
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a8 18 00 20 0d 17 00 00 3f 54 00 00 c5 16 00 00     ... ....?T......
  10:	c5 16 00 00 c5 16 00 00 c5 16 00 00 c5 16 00 00     ................
	...
  2c:	89 13 00 00 c5 16 00 00 00 00 00 00 2d 13 00 00     ............-...
  3c:	c5 16 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
  50:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
  60:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
  70:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
  80:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
  90:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
  a0:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
  b0:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
  c0:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
  d0:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
  e0:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
  f0:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
 100:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
 110:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
 120:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
 130:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
 140:	19 14 00 00 19 14 00 00 19 14 00 00 19 14 00 00     ................
 150:	19 14 00 00                                         ....

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	4686      	mov	lr, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x74>
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x6c>
     1da:	18eb      	adds	r3, r5, r3
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x70>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x58>
     20e:	42a0      	cmp	r0, r4
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x58>
     212:	f1ac 0302 	sub.w	r3, ip, #2
     216:	442c      	add	r4, r5
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x68>
     220:	40d4      	lsrs	r4, r2
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x58>
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
     24a:	fb0c f807 	mul.w	r8, ip, r7
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     25c:	d204      	bcs.n	268 <CONFIG_SRAM_SIZE+0xa8>
     25e:	4598      	cmp	r8, r3
     260:	d902      	bls.n	268 <CONFIG_SRAM_SIZE+0xa8>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
     268:	eba3 0308 	sub.w	r3, r3, r8
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
     272:	fb0e 331c 	mls	r3, lr, ip, r3
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
     284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28e:	f1ac 0302 	sub.w	r3, ip, #2
     292:	442c      	add	r4, r5
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
     2dc:	4429      	add	r1, r5
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
     2ec:	fb0c f707 	mul.w	r7, ip, r7
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
     2f8:	18eb      	adds	r3, r5, r3
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     300:	429f      	cmp	r7, r3
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     304:	f1ac 0102 	sub.w	r1, ip, #2
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x7a>
     312:	4660      	mov	r0, ip
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     31a:	4660      	mov	r0, ip
     31c:	e7a4      	b.n	268 <CONFIG_SRAM_SIZE+0xa8>
     31e:	4663      	mov	r3, ip
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     32e:	e9c6 e000 	strd	lr, r0, [r6]
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
     358:	e9c6 4c00 	strd	r4, ip, [r6]
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     396:	459a      	cmp	sl, r3
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <main>:
#define LED0_NODE DT_ALIAS(led0)
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);


void main(void)
{
     424:	b510      	push	{r4, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     426:	4814      	ldr	r0, [pc, #80]	; (478 <main+0x54>)
     428:	f006 f80c 	bl	6444 <z_device_is_ready>
	int ret;

	if (!device_is_ready(led.port)) {
     42c:	b900      	cbnz	r0, 430 <main+0xc>
		/* STEP 6.2 - Update the LED to the status of the button */
		gpio_pin_set_dt(&led,val);

		k_msleep(SLEEP_TIME_MS); // Put the main thread to sleep for 100ms for power optimization
	}
     42e:	bd10      	pop	{r4, pc}
     430:	4811      	ldr	r0, [pc, #68]	; (478 <main+0x54>)
     432:	f006 f807 	bl	6444 <z_device_is_ready>
	if (!device_is_ready(button.port)) {
     436:	2800      	cmp	r0, #0
     438:	d0f9      	beq.n	42e <main+0xa>
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
     43a:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     43e:	480f      	ldr	r0, [pc, #60]	; (47c <main+0x58>)
     440:	f004 fb80 	bl	4b44 <gpio_pin_configure_dt>
	if (ret < 0) {
     444:	2800      	cmp	r0, #0
     446:	dbf2      	blt.n	42e <main+0xa>
	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
     448:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     44c:	480c      	ldr	r0, [pc, #48]	; (480 <main+0x5c>)
     44e:	f004 fb79 	bl	4b44 <gpio_pin_configure_dt>
	if (ret < 0) {
     452:	2800      	cmp	r0, #0
     454:	dbeb      	blt.n	42e <main+0xa>
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_get()
 */
static inline int gpio_pin_get_dt(const struct gpio_dt_spec *spec)
{
	return gpio_pin_get(spec->port, spec->pin);
     456:	4c08      	ldr	r4, [pc, #32]	; (478 <main+0x54>)
     458:	2117      	movs	r1, #23
     45a:	4620      	mov	r0, r4
     45c:	f004 fb89 	bl	4b72 <gpio_pin_get>
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
	return gpio_pin_set(spec->port, spec->pin, value);
     460:	1e02      	subs	r2, r0, #0
     462:	bf18      	it	ne
     464:	2201      	movne	r2, #1
     466:	211c      	movs	r1, #28
     468:	4620      	mov	r0, r4
     46a:	f004 fba2 	bl	4bb2 <gpio_pin_set>
		k_msleep(SLEEP_TIME_MS); // Put the main thread to sleep for 100ms for power optimization
     46e:	2064      	movs	r0, #100	; 0x64
     470:	f004 fbac 	bl	4bcc <k_msleep>
	while (1) {
     474:	e7ef      	b.n	456 <main+0x32>
     476:	bf00      	nop
     478:	00006968 	.word	0x00006968
     47c:	00006c38 	.word	0x00006c38
     480:	00006c40 	.word	0x00006c40

00000484 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
     484:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
     486:	4b02      	ldr	r3, [pc, #8]	; (490 <char_out+0xc>)
     488:	681b      	ldr	r3, [r3, #0]
     48a:	4798      	blx	r3
}
     48c:	bd08      	pop	{r3, pc}
     48e:	bf00      	nop
     490:	20000000 	.word	0x20000000

00000494 <__printk_hook_install>:
	_char_out = fn;
     494:	4b01      	ldr	r3, [pc, #4]	; (49c <__printk_hook_install+0x8>)
     496:	6018      	str	r0, [r3, #0]
}
     498:	4770      	bx	lr
     49a:	bf00      	nop
     49c:	20000000 	.word	0x20000000

000004a0 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     4a0:	b500      	push	{lr}
     4a2:	b083      	sub	sp, #12
     4a4:	4602      	mov	r2, r0
     4a6:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     4a8:	2100      	movs	r1, #0
     4aa:	9100      	str	r1, [sp, #0]
     4ac:	4802      	ldr	r0, [pc, #8]	; (4b8 <vprintk+0x18>)
     4ae:	f000 f91d 	bl	6ec <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     4b2:	b003      	add	sp, #12
     4b4:	f85d fb04 	ldr.w	pc, [sp], #4
     4b8:	00000485 	.word	0x00000485

000004bc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     4bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4c0:	b083      	sub	sp, #12
     4c2:	4604      	mov	r4, r0
     4c4:	4608      	mov	r0, r1
     4c6:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4c8:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4ca:	f013 0f08 	tst.w	r3, #8
     4ce:	d105      	bne.n	4dc <process_event+0x20>
     4d0:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     4d4:	2300      	movs	r3, #0
     4d6:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     4d8:	9301      	str	r3, [sp, #4]
}
     4da:	e055      	b.n	588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>
		if (evt == EVT_COMPLETE) {
     4dc:	2901      	cmp	r1, #1
     4de:	d009      	beq.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     4e0:	f043 0320 	orr.w	r3, r3, #32
     4e4:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4e6:	f385 8811 	msr	BASEPRI, r5
     4ea:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4ee:	b003      	add	sp, #12
     4f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4f4:	f043 0310 	orr.w	r3, r3, #16
     4f8:	8323      	strh	r3, [r4, #24]
     4fa:	e7f4      	b.n	4e6 <process_event+0x2a>
			evt = process_recheck(mgr);
     4fc:	4620      	mov	r0, r4
     4fe:	f004 fbbf 	bl	4c80 <process_recheck>
     502:	e043      	b.n	58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
			res = mgr->last_res;
     504:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     508:	464a      	mov	r2, r9
     50a:	4669      	mov	r1, sp
     50c:	4620      	mov	r0, r4
     50e:	f004 fbd0 	bl	4cb2 <process_complete>
		onoff_transition_fn transit = NULL;
     512:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     516:	8b23      	ldrh	r3, [r4, #24]
     518:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     51c:	42b7      	cmp	r7, r6
     51e:	d069      	beq.n	5f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10c>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     520:	68a2      	ldr	r2, [r4, #8]
     522:	2a00      	cmp	r2, #0
     524:	d066      	beq.n	5f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10c>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     526:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     528:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     52c:	8323      	strh	r3, [r4, #24]
     52e:	f385 8811 	msr	BASEPRI, r5
     532:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     536:	2a00      	cmp	r2, #0
     538:	d164      	bne.n	604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>
     53a:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     53c:	b12b      	cbz	r3, 54a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x62>
				notify_all(mgr, &clients, state, res);
     53e:	464b      	mov	r3, r9
     540:	463a      	mov	r2, r7
     542:	4669      	mov	r1, sp
     544:	4620      	mov	r0, r4
     546:	f004 fc2d 	bl	4da4 <notify_all>
			if (transit != NULL) {
     54a:	f1b8 0f00 	cmp.w	r8, #0
     54e:	d002      	beq.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
				transit(mgr, transition_complete);
     550:	4934      	ldr	r1, [pc, #208]	; (624 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x13c>)
     552:	4620      	mov	r0, r4
     554:	47c0      	blx	r8
	__asm__ volatile(
     556:	f04f 0320 	mov.w	r3, #32
     55a:	f3ef 8511 	mrs	r5, BASEPRI
     55e:	f383 8812 	msr	BASEPRI_MAX, r3
     562:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     566:	8b23      	ldrh	r3, [r4, #24]
     568:	f023 0308 	bic.w	r3, r3, #8
     56c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     56e:	8b23      	ldrh	r3, [r4, #24]
     570:	f013 0f10 	tst.w	r3, #16
     574:	d04c      	beq.n	610 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x128>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     576:	f023 0310 	bic.w	r3, r3, #16
     57a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     57c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     57e:	8b26      	ldrh	r6, [r4, #24]
     580:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     584:	2800      	cmp	r0, #0
     586:	d0ae      	beq.n	4e6 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     588:	2802      	cmp	r0, #2
     58a:	d0b7      	beq.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
		if (evt == EVT_NOP) {
     58c:	2800      	cmp	r0, #0
     58e:	d0aa      	beq.n	4e6 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     590:	3801      	subs	r0, #1
     592:	2804      	cmp	r0, #4
     594:	d82a      	bhi.n	5ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x104>
     596:	a301      	add	r3, pc, #4	; (adr r3, 59c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb4>)
     598:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     59c:	00000505 	.word	0x00000505
     5a0:	000005ed 	.word	0x000005ed
     5a4:	000005b1 	.word	0x000005b1
     5a8:	000005c5 	.word	0x000005c5
     5ac:	000005d9 	.word	0x000005d9
			transit = mgr->transitions->start;
     5b0:	6923      	ldr	r3, [r4, #16]
     5b2:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
     5b6:	2106      	movs	r1, #6
     5b8:	4620      	mov	r0, r4
     5ba:	f004 fb37 	bl	4c2c <set_state>
		res = 0;
     5be:	f04f 0900 	mov.w	r9, #0
     5c2:	e7a8      	b.n	516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
			transit = mgr->transitions->stop;
     5c4:	6923      	ldr	r3, [r4, #16]
     5c6:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     5ca:	2104      	movs	r1, #4
     5cc:	4620      	mov	r0, r4
     5ce:	f004 fb2d 	bl	4c2c <set_state>
		res = 0;
     5d2:	f04f 0900 	mov.w	r9, #0
     5d6:	e79e      	b.n	516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
			transit = mgr->transitions->reset;
     5d8:	6923      	ldr	r3, [r4, #16]
     5da:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     5de:	2105      	movs	r1, #5
     5e0:	4620      	mov	r0, r4
     5e2:	f004 fb23 	bl	4c2c <set_state>
		res = 0;
     5e6:	f04f 0900 	mov.w	r9, #0
     5ea:	e794      	b.n	516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
		if (evt == EVT_NOP) {
     5ec:	f04f 0800 	mov.w	r8, #0
     5f0:	46c1      	mov	r9, r8
     5f2:	e790      	b.n	516 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e>
     5f4:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     5f6:	b10a      	cbz	r2, 5fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x114>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5f8:	2200      	movs	r2, #0
     5fa:	e795      	b.n	528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
		    || (transit != NULL)) {
     5fc:	f1b8 0f00 	cmp.w	r8, #0
     600:	d192      	bne.n	528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
     602:	e7b4      	b.n	56e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x86>
				notify_monitors(mgr, state, res);
     604:	464a      	mov	r2, r9
     606:	4639      	mov	r1, r7
     608:	4620      	mov	r0, r4
     60a:	f004 fb17 	bl	4c3c <notify_monitors>
     60e:	e794      	b.n	53a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x52>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     610:	f013 0f20 	tst.w	r3, #32
     614:	d004      	beq.n	620 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x138>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     616:	f023 0320 	bic.w	r3, r3, #32
     61a:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     61c:	2002      	movs	r0, #2
     61e:	e7ae      	b.n	57e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x96>
		evt = EVT_NOP;
     620:	2000      	movs	r0, #0
     622:	e7ac      	b.n	57e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x96>
     624:	00004dd3 	.word	0x00004dd3

00000628 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
     628:	4684      	mov	ip, r0
     62a:	4608      	mov	r0, r1
	bool loop = true;
     62c:	2201      	movs	r2, #1
     62e:	e026      	b.n	67e <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
     630:	f89c 3000 	ldrb.w	r3, [ip]
     634:	f043 0304 	orr.w	r3, r3, #4
     638:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
     63c:	b1f2      	cbz	r2, 67c <extract_flags+0x54>
			++sp;
     63e:	3001      	adds	r0, #1
     640:	e01c      	b.n	67c <extract_flags+0x54>
			conv->flag_plus = true;
     642:	f89c 3000 	ldrb.w	r3, [ip]
     646:	f043 0308 	orr.w	r3, r3, #8
     64a:	f88c 3000 	strb.w	r3, [ip]
			break;
     64e:	e7f5      	b.n	63c <extract_flags+0x14>
			conv->flag_space = true;
     650:	f89c 3000 	ldrb.w	r3, [ip]
     654:	f043 0310 	orr.w	r3, r3, #16
     658:	f88c 3000 	strb.w	r3, [ip]
			break;
     65c:	e7ee      	b.n	63c <extract_flags+0x14>
			conv->flag_hash = true;
     65e:	f89c 3000 	ldrb.w	r3, [ip]
     662:	f043 0320 	orr.w	r3, r3, #32
     666:	f88c 3000 	strb.w	r3, [ip]
			break;
     66a:	e7e7      	b.n	63c <extract_flags+0x14>
			conv->flag_zero = true;
     66c:	f89c 3000 	ldrb.w	r3, [ip]
     670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     674:	f88c 3000 	strb.w	r3, [ip]
			break;
     678:	e7e0      	b.n	63c <extract_flags+0x14>
		switch (*sp) {
     67a:	2200      	movs	r2, #0
		}
	} while (loop);
     67c:	b342      	cbz	r2, 6d0 <extract_flags+0xa8>
		switch (*sp) {
     67e:	7803      	ldrb	r3, [r0, #0]
     680:	3b20      	subs	r3, #32
     682:	2b10      	cmp	r3, #16
     684:	d8f9      	bhi.n	67a <extract_flags+0x52>
     686:	a101      	add	r1, pc, #4	; (adr r1, 68c <extract_flags+0x64>)
     688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     68c:	00000651 	.word	0x00000651
     690:	0000067b 	.word	0x0000067b
     694:	0000067b 	.word	0x0000067b
     698:	0000065f 	.word	0x0000065f
     69c:	0000067b 	.word	0x0000067b
     6a0:	0000067b 	.word	0x0000067b
     6a4:	0000067b 	.word	0x0000067b
     6a8:	0000067b 	.word	0x0000067b
     6ac:	0000067b 	.word	0x0000067b
     6b0:	0000067b 	.word	0x0000067b
     6b4:	0000067b 	.word	0x0000067b
     6b8:	00000643 	.word	0x00000643
     6bc:	0000067b 	.word	0x0000067b
     6c0:	00000631 	.word	0x00000631
     6c4:	0000067b 	.word	0x0000067b
     6c8:	0000067b 	.word	0x0000067b
     6cc:	0000066d 	.word	0x0000066d

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
     6d0:	f89c 3000 	ldrb.w	r3, [ip]
     6d4:	f003 0344 	and.w	r3, r3, #68	; 0x44
     6d8:	2b44      	cmp	r3, #68	; 0x44
     6da:	d000      	beq.n	6de <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
     6dc:	4770      	bx	lr
		conv->flag_zero = false;
     6de:	f89c 3000 	ldrb.w	r3, [ip]
     6e2:	f36f 1386 	bfc	r3, #6, #1
     6e6:	f88c 3000 	strb.w	r3, [ip]
     6ea:	e7f7      	b.n	6dc <extract_flags+0xb4>

000006ec <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6f0:	b091      	sub	sp, #68	; 0x44
     6f2:	4606      	mov	r6, r0
     6f4:	460d      	mov	r5, r1
     6f6:	4691      	mov	r9, r2
     6f8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     6fa:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     6fc:	f899 0000 	ldrb.w	r0, [r9]
     700:	2800      	cmp	r0, #0
     702:	f000 82b9 	beq.w	c78 <CONFIG_ISR_STACK_SIZE+0x478>
		if (*fp != '%') {
     706:	2825      	cmp	r0, #37	; 0x25
     708:	d008      	beq.n	71c <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     70a:	f109 0901 	add.w	r9, r9, #1
     70e:	4629      	mov	r1, r5
     710:	47b0      	blx	r6
     712:	2800      	cmp	r0, #0
     714:	f2c0 82b1 	blt.w	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     718:	3401      	adds	r4, #1
			continue;
     71a:	e7ef      	b.n	6fc <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     71c:	2300      	movs	r3, #0
     71e:	9304      	str	r3, [sp, #16]
     720:	9305      	str	r3, [sp, #20]
     722:	9306      	str	r3, [sp, #24]
     724:	9307      	str	r3, [sp, #28]
     726:	9308      	str	r3, [sp, #32]
     728:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     72a:	4649      	mov	r1, r9
     72c:	a806      	add	r0, sp, #24
     72e:	f004 fd6c 	bl	520a <extract_conversion>
     732:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     734:	f89d 3019 	ldrb.w	r3, [sp, #25]
     738:	f013 0f01 	tst.w	r3, #1
     73c:	f000 8097 	beq.w	86e <CONFIG_ISR_STACK_SIZE+0x6e>
			width = va_arg(ap, int);
     740:	9b03      	ldr	r3, [sp, #12]
     742:	1d1a      	adds	r2, r3, #4
     744:	9203      	str	r2, [sp, #12]
     746:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     748:	2f00      	cmp	r7, #0
     74a:	f2c0 8088 	blt.w	85e <CONFIG_ISR_STACK_SIZE+0x5e>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     74e:	f89d 3019 	ldrb.w	r3, [sp, #25]
     752:	f013 0f04 	tst.w	r3, #4
     756:	f000 809c 	beq.w	892 <CONFIG_ISR_STACK_SIZE+0x92>
			int arg = va_arg(ap, int);
     75a:	9b03      	ldr	r3, [sp, #12]
     75c:	1d1a      	adds	r2, r3, #4
     75e:	9203      	str	r2, [sp, #12]
     760:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     764:	f1ba 0f00 	cmp.w	sl, #0
     768:	f2c0 808a 	blt.w	880 <CONFIG_ISR_STACK_SIZE+0x80>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     76c:	2300      	movs	r3, #0
     76e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     770:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     772:	f89d 301a 	ldrb.w	r3, [sp, #26]
     776:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     77a:	f89d 1019 	ldrb.w	r1, [sp, #25]
     77e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     782:	2b01      	cmp	r3, #1
     784:	f000 808e 	beq.w	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     788:	2b02      	cmp	r3, #2
     78a:	f000 80d3 	beq.w	934 <CONFIG_ISR_STACK_SIZE+0x134>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     78e:	2b04      	cmp	r3, #4
     790:	f000 8124 	beq.w	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     794:	2b03      	cmp	r3, #3
     796:	f000 813b 	beq.w	a10 <CONFIG_ISR_STACK_SIZE+0x210>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     79a:	f89d 8018 	ldrb.w	r8, [sp, #24]
     79e:	f018 0b03 	ands.w	fp, r8, #3
     7a2:	f040 813b 	bne.w	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     7a6:	f89d 301b 	ldrb.w	r3, [sp, #27]
     7aa:	3b25      	subs	r3, #37	; 0x25
     7ac:	2b53      	cmp	r3, #83	; 0x53
     7ae:	f200 81ca 	bhi.w	b46 <CONFIG_ISR_STACK_SIZE+0x346>
     7b2:	e8df f013 	tbh	[pc, r3, lsl #1]
     7b6:	0140      	.short	0x0140
     7b8:	01c801c8 	.word	0x01c801c8
     7bc:	01c801c8 	.word	0x01c801c8
     7c0:	01c801c8 	.word	0x01c801c8
     7c4:	01c801c8 	.word	0x01c801c8
     7c8:	01c801c8 	.word	0x01c801c8
     7cc:	01c801c8 	.word	0x01c801c8
     7d0:	01c801c8 	.word	0x01c801c8
     7d4:	01c801c8 	.word	0x01c801c8
     7d8:	01c801c8 	.word	0x01c801c8
     7dc:	01c801c8 	.word	0x01c801c8
     7e0:	01c801c8 	.word	0x01c801c8
     7e4:	01c801c8 	.word	0x01c801c8
     7e8:	01c801c8 	.word	0x01c801c8
     7ec:	01c801c8 	.word	0x01c801c8
     7f0:	01c801c8 	.word	0x01c801c8
     7f4:	01c801c8 	.word	0x01c801c8
     7f8:	01c801c8 	.word	0x01c801c8
     7fc:	01c801c8 	.word	0x01c801c8
     800:	01c801c8 	.word	0x01c801c8
     804:	01c801c8 	.word	0x01c801c8
     808:	01c801c8 	.word	0x01c801c8
     80c:	01c801c8 	.word	0x01c801c8
     810:	01c801c8 	.word	0x01c801c8
     814:	01c801c8 	.word	0x01c801c8
     818:	01c801c8 	.word	0x01c801c8
     81c:	01c80181 	.word	0x01c80181
     820:	01c801c8 	.word	0x01c801c8
     824:	01c801c8 	.word	0x01c801c8
     828:	01c801c8 	.word	0x01c801c8
     82c:	01c801c8 	.word	0x01c801c8
     830:	015e01c8 	.word	0x015e01c8
     834:	01c80167 	.word	0x01c80167
     838:	01c801c8 	.word	0x01c801c8
     83c:	016701c8 	.word	0x016701c8
     840:	01c801c8 	.word	0x01c801c8
     844:	01c801c8 	.word	0x01c801c8
     848:	018101bd 	.word	0x018101bd
     84c:	01c801a1 	.word	0x01c801a1
     850:	014d01c8 	.word	0x014d01c8
     854:	018101c8 	.word	0x018101c8
     858:	01c801c8 	.word	0x01c801c8
     85c:	0181      	.short	0x0181
				conv->flag_dash = true;
     85e:	f89d 3018 	ldrb.w	r3, [sp, #24]
     862:	f043 0304 	orr.w	r3, r3, #4
     866:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     86a:	427f      	negs	r7, r7
     86c:	e76f      	b.n	74e <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
     86e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     872:	2b00      	cmp	r3, #0
     874:	db02      	blt.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
		int width = -1;
     876:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     87a:	e768      	b.n	74e <z_cbvprintf_impl+0x62>
			width = conv->width_value;
     87c:	9f07      	ldr	r7, [sp, #28]
     87e:	e766      	b.n	74e <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
     880:	f89d 3019 	ldrb.w	r3, [sp, #25]
     884:	f36f 0341 	bfc	r3, #1, #1
     888:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     88c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     890:	e76c      	b.n	76c <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
     892:	f013 0f02 	tst.w	r3, #2
     896:	d002      	beq.n	89e <CONFIG_ISR_STACK_SIZE+0x9e>
			precision = conv->prec_value;
     898:	f8dd a020 	ldr.w	sl, [sp, #32]
     89c:	e766      	b.n	76c <z_cbvprintf_impl+0x80>
		int precision = -1;
     89e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     8a2:	e763      	b.n	76c <z_cbvprintf_impl+0x80>
			switch (length_mod) {
     8a4:	1ecb      	subs	r3, r1, #3
     8a6:	2b04      	cmp	r3, #4
     8a8:	d804      	bhi.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
     8aa:	e8df f003 	tbb	[pc, r3]
     8ae:	1d0b      	.short	0x1d0b
     8b0:	3529      	.short	0x3529
     8b2:	35          	.byte	0x35
     8b3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     8b4:	9b03      	ldr	r3, [sp, #12]
     8b6:	1d1a      	adds	r2, r3, #4
     8b8:	9203      	str	r2, [sp, #12]
     8ba:	681b      	ldr	r3, [r3, #0]
     8bc:	17da      	asrs	r2, r3, #31
     8be:	9304      	str	r3, [sp, #16]
     8c0:	9205      	str	r2, [sp, #20]
				break;
     8c2:	e006      	b.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
					value->sint = va_arg(ap, long);
     8c4:	9b03      	ldr	r3, [sp, #12]
     8c6:	1d1a      	adds	r2, r3, #4
     8c8:	9203      	str	r2, [sp, #12]
     8ca:	681b      	ldr	r3, [r3, #0]
     8cc:	17da      	asrs	r2, r3, #31
     8ce:	9304      	str	r3, [sp, #16]
     8d0:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     8d2:	2901      	cmp	r1, #1
     8d4:	d028      	beq.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
			} else if (length_mod == LENGTH_H) {
     8d6:	2902      	cmp	r1, #2
     8d8:	f47f af5f 	bne.w	79a <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
     8dc:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     8e0:	17da      	asrs	r2, r3, #31
     8e2:	9304      	str	r3, [sp, #16]
     8e4:	9205      	str	r2, [sp, #20]
     8e6:	e758      	b.n	79a <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
     8e8:	9b03      	ldr	r3, [sp, #12]
     8ea:	3307      	adds	r3, #7
     8ec:	f023 0307 	bic.w	r3, r3, #7
     8f0:	f103 0208 	add.w	r2, r3, #8
     8f4:	9203      	str	r2, [sp, #12]
     8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     8fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     8fe:	e7e8      	b.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
					(sint_value_type)va_arg(ap, intmax_t);
     900:	9b03      	ldr	r3, [sp, #12]
     902:	3307      	adds	r3, #7
     904:	f023 0307 	bic.w	r3, r3, #7
     908:	f103 0208 	add.w	r2, r3, #8
     90c:	9203      	str	r2, [sp, #12]
     90e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     912:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     916:	e7dc      	b.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     918:	9b03      	ldr	r3, [sp, #12]
     91a:	1d1a      	adds	r2, r3, #4
     91c:	9203      	str	r2, [sp, #12]
     91e:	681b      	ldr	r3, [r3, #0]
     920:	17da      	asrs	r2, r3, #31
				value->sint =
     922:	9304      	str	r3, [sp, #16]
     924:	9205      	str	r2, [sp, #20]
				break;
     926:	e7d4      	b.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
				value->sint = (signed char)value->sint;
     928:	f99d 3010 	ldrsb.w	r3, [sp, #16]
     92c:	17da      	asrs	r2, r3, #31
     92e:	9304      	str	r3, [sp, #16]
     930:	9205      	str	r2, [sp, #20]
     932:	e732      	b.n	79a <z_cbvprintf_impl+0xae>
			switch (length_mod) {
     934:	1ecb      	subs	r3, r1, #3
     936:	2b04      	cmp	r3, #4
     938:	d804      	bhi.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
     93a:	e8df f003 	tbb	[pc, r3]
     93e:	1f0b      	.short	0x1f0b
     940:	4135      	.short	0x4135
     942:	41          	.byte	0x41
     943:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     944:	9b03      	ldr	r3, [sp, #12]
     946:	1d1a      	adds	r2, r3, #4
     948:	9203      	str	r2, [sp, #12]
     94a:	681b      	ldr	r3, [r3, #0]
     94c:	9304      	str	r3, [sp, #16]
     94e:	2300      	movs	r3, #0
     950:	9305      	str	r3, [sp, #20]
				break;
     952:	e01e      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
				    && (conv->specifier == 'c')) {
     954:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     958:	2b63      	cmp	r3, #99	; 0x63
     95a:	d007      	beq.n	96c <CONFIG_ISR_STACK_SIZE+0x16c>
					value->uint = va_arg(ap, unsigned long);
     95c:	9b03      	ldr	r3, [sp, #12]
     95e:	1d1a      	adds	r2, r3, #4
     960:	9203      	str	r2, [sp, #12]
     962:	681b      	ldr	r3, [r3, #0]
     964:	9304      	str	r3, [sp, #16]
     966:	2300      	movs	r3, #0
     968:	9305      	str	r3, [sp, #20]
     96a:	e012      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
					value->uint = (wchar_t)va_arg(ap,
     96c:	9b03      	ldr	r3, [sp, #12]
     96e:	1d1a      	adds	r2, r3, #4
     970:	9203      	str	r2, [sp, #12]
     972:	681b      	ldr	r3, [r3, #0]
     974:	9304      	str	r3, [sp, #16]
     976:	2300      	movs	r3, #0
     978:	9305      	str	r3, [sp, #20]
     97a:	e00a      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
					(uint_value_type)va_arg(ap,
     97c:	9b03      	ldr	r3, [sp, #12]
     97e:	3307      	adds	r3, #7
     980:	f023 0307 	bic.w	r3, r3, #7
     984:	f103 0208 	add.w	r2, r3, #8
     988:	9203      	str	r2, [sp, #12]
     98a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     98e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     992:	2901      	cmp	r1, #1
     994:	d01c      	beq.n	9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>
			} else if (length_mod == LENGTH_H) {
     996:	2902      	cmp	r1, #2
     998:	f47f aeff 	bne.w	79a <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
     99c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     9a0:	9304      	str	r3, [sp, #16]
     9a2:	2300      	movs	r3, #0
     9a4:	9305      	str	r3, [sp, #20]
     9a6:	e6f8      	b.n	79a <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
     9a8:	9b03      	ldr	r3, [sp, #12]
     9aa:	3307      	adds	r3, #7
     9ac:	f023 0307 	bic.w	r3, r3, #7
     9b0:	f103 0208 	add.w	r2, r3, #8
     9b4:	9203      	str	r2, [sp, #12]
     9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     9ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     9be:	e7e8      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
					(uint_value_type)va_arg(ap, size_t);
     9c0:	9b03      	ldr	r3, [sp, #12]
     9c2:	1d1a      	adds	r2, r3, #4
     9c4:	9203      	str	r2, [sp, #12]
     9c6:	681b      	ldr	r3, [r3, #0]
				value->uint =
     9c8:	9304      	str	r3, [sp, #16]
     9ca:	2300      	movs	r3, #0
     9cc:	9305      	str	r3, [sp, #20]
				break;
     9ce:	e7e0      	b.n	992 <CONFIG_ISR_STACK_SIZE+0x192>
				value->uint = (unsigned char)value->uint;
     9d0:	f89d 3010 	ldrb.w	r3, [sp, #16]
     9d4:	9304      	str	r3, [sp, #16]
     9d6:	2300      	movs	r3, #0
     9d8:	9305      	str	r3, [sp, #20]
     9da:	e6de      	b.n	79a <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
     9dc:	2908      	cmp	r1, #8
     9de:	d00b      	beq.n	9f8 <CONFIG_ISR_STACK_SIZE+0x1f8>
				value->dbl = va_arg(ap, double);
     9e0:	9b03      	ldr	r3, [sp, #12]
     9e2:	3307      	adds	r3, #7
     9e4:	f023 0307 	bic.w	r3, r3, #7
     9e8:	f103 0208 	add.w	r2, r3, #8
     9ec:	9203      	str	r2, [sp, #12]
     9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
     9f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
     9f6:	e6d0      	b.n	79a <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
     9f8:	9b03      	ldr	r3, [sp, #12]
     9fa:	3307      	adds	r3, #7
     9fc:	f023 0307 	bic.w	r3, r3, #7
     a00:	f103 0208 	add.w	r2, r3, #8
     a04:	9203      	str	r2, [sp, #12]
     a06:	e9d3 2300 	ldrd	r2, r3, [r3]
     a0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
     a0e:	e6c4      	b.n	79a <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
     a10:	9b03      	ldr	r3, [sp, #12]
     a12:	1d1a      	adds	r2, r3, #4
     a14:	9203      	str	r2, [sp, #12]
     a16:	681b      	ldr	r3, [r3, #0]
     a18:	9304      	str	r3, [sp, #16]
     a1a:	e6be      	b.n	79a <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
     a1c:	9f02      	ldr	r7, [sp, #8]
     a1e:	463b      	mov	r3, r7
     a20:	464a      	mov	r2, r9
     a22:	4629      	mov	r1, r5
     a24:	4630      	mov	r0, r6
     a26:	f004 fc96 	bl	5356 <outs>
     a2a:	2800      	cmp	r0, #0
     a2c:	f2c0 8125 	blt.w	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     a30:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     a32:	46b9      	mov	r9, r7
			continue;
     a34:	e662      	b.n	6fc <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
     a36:	4629      	mov	r1, r5
     a38:	2025      	movs	r0, #37	; 0x25
     a3a:	47b0      	blx	r6
     a3c:	2800      	cmp	r0, #0
     a3e:	f2c0 811c 	blt.w	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     a42:	3401      	adds	r4, #1
		char sign = 0;
     a44:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     a46:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     a4a:	f04f 0900 	mov.w	r9, #0
			break;
     a4e:	e07f      	b.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
		case 's': {
			bps = (const char *)value->ptr;
     a50:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     a54:	f1ba 0f00 	cmp.w	sl, #0
     a58:	db07      	blt.n	a6a <CONFIG_ISR_STACK_SIZE+0x26a>
				len = strnlen(bps, precision);
     a5a:	4651      	mov	r1, sl
     a5c:	4648      	mov	r0, r9
     a5e:	f004 fdba 	bl	55d6 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     a62:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     a66:	46d8      	mov	r8, fp
			precision = -1;

			break;
     a68:	e072      	b.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
				len = strlen(bps);
     a6a:	4648      	mov	r0, r9
     a6c:	f004 fdaa 	bl	55c4 <strlen>
     a70:	e7f7      	b.n	a62 <CONFIG_ISR_STACK_SIZE+0x262>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     a72:	9b04      	ldr	r3, [sp, #16]
     a74:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     a78:	46d8      	mov	r8, fp
			bpe = buf + 1;
     a7a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     a7e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     a82:	e065      	b.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     a84:	f018 0f08 	tst.w	r8, #8
     a88:	d105      	bne.n	a96 <CONFIG_ISR_STACK_SIZE+0x296>
				sign = '+';
			} else if (conv->flag_space) {
     a8a:	f018 0810 	ands.w	r8, r8, #16
     a8e:	d004      	beq.n	a9a <CONFIG_ISR_STACK_SIZE+0x29a>
				sign = ' ';
     a90:	f04f 0820 	mov.w	r8, #32
     a94:	e001      	b.n	a9a <CONFIG_ISR_STACK_SIZE+0x29a>
				sign = '+';
     a96:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     a9a:	9a04      	ldr	r2, [sp, #16]
     a9c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     a9e:	2b00      	cmp	r3, #0
     aa0:	db02      	blt.n	aa8 <CONFIG_ISR_STACK_SIZE+0x2a8>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     aa2:	9204      	str	r2, [sp, #16]
     aa4:	9305      	str	r3, [sp, #20]
     aa6:	e008      	b.n	aba <CONFIG_ISR_STACK_SIZE+0x2ba>
				value->uint = (uint_value_type)-sint;
     aa8:	4252      	negs	r2, r2
     aaa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     aae:	9204      	str	r2, [sp, #16]
     ab0:	9305      	str	r3, [sp, #20]
				sign = '-';
     ab2:	f04f 082d 	mov.w	r8, #45	; 0x2d
     ab6:	e000      	b.n	aba <CONFIG_ISR_STACK_SIZE+0x2ba>
		switch (conv->specifier) {
     ab8:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     aba:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     abe:	9300      	str	r3, [sp, #0]
     ac0:	ab0a      	add	r3, sp, #40	; 0x28
     ac2:	aa06      	add	r2, sp, #24
     ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     ac8:	f004 fbd6 	bl	5278 <encode_uint>
     acc:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     ace:	f1ba 0f00 	cmp.w	sl, #0
     ad2:	db6c      	blt.n	bae <CONFIG_ISR_STACK_SIZE+0x3ae>
				size_t len = bpe - bps;
     ad4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     ad8:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     adc:	f89d 2018 	ldrb.w	r2, [sp, #24]
     ae0:	f36f 1286 	bfc	r2, #6, #1
     ae4:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     ae8:	459a      	cmp	sl, r3
     aea:	d963      	bls.n	bb4 <CONFIG_ISR_STACK_SIZE+0x3b4>
					conv->pad0_value = precision - (int)len;
     aec:	ebaa 0303 	sub.w	r3, sl, r3
     af0:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     af2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     af6:	e02b      	b.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     af8:	9804      	ldr	r0, [sp, #16]
     afa:	b928      	cbnz	r0, b08 <CONFIG_ISR_STACK_SIZE+0x308>
		char sign = 0;
     afc:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     afe:	f8df a180 	ldr.w	sl, [pc, #384]	; c80 <CONFIG_ISR_STACK_SIZE+0x480>
			bps = "(nil)";
     b02:	f1aa 0905 	sub.w	r9, sl, #5
     b06:	e023      	b.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     b08:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     b0c:	9300      	str	r3, [sp, #0]
     b0e:	ab0a      	add	r3, sp, #40	; 0x28
     b10:	aa06      	add	r2, sp, #24
     b12:	2100      	movs	r1, #0
     b14:	f004 fbb0 	bl	5278 <encode_uint>
     b18:	4681      	mov	r9, r0
				conv->altform_0c = true;
     b1a:	f89d 301a 	ldrb.w	r3, [sp, #26]
     b1e:	f043 0310 	orr.w	r3, r3, #16
     b22:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     b26:	2378      	movs	r3, #120	; 0x78
     b28:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     b2c:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     b2e:	e7ce      	b.n	ace <CONFIG_ISR_STACK_SIZE+0x2ce>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     b30:	4622      	mov	r2, r4
     b32:	9904      	ldr	r1, [sp, #16]
     b34:	a806      	add	r0, sp, #24
     b36:	f004 fbef 	bl	5318 <store_count>
		char sign = 0;
     b3a:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     b3c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     b40:	f04f 0900 	mov.w	r9, #0
			}

			break;
     b44:	e004      	b.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
		switch (conv->specifier) {
     b46:	46d8      	mov	r8, fp
     b48:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     b4c:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     b50:	f1b9 0f00 	cmp.w	r9, #0
     b54:	f000 808d 	beq.w	c72 <CONFIG_ISR_STACK_SIZE+0x472>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     b58:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     b5c:	f1b8 0f00 	cmp.w	r8, #0
     b60:	d000      	beq.n	b64 <CONFIG_ISR_STACK_SIZE+0x364>
			nj_len += 1U;
     b62:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     b64:	f89d 201a 	ldrb.w	r2, [sp, #26]
     b68:	f012 0f10 	tst.w	r2, #16
     b6c:	d025      	beq.n	bba <CONFIG_ISR_STACK_SIZE+0x3ba>
			nj_len += 2U;
     b6e:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     b70:	9907      	ldr	r1, [sp, #28]
     b72:	440b      	add	r3, r1
		if (conv->pad_fp) {
     b74:	f012 0f40 	tst.w	r2, #64	; 0x40
     b78:	d001      	beq.n	b7e <CONFIG_ISR_STACK_SIZE+0x37e>
			nj_len += conv->pad0_pre_exp;
     b7a:	9a08      	ldr	r2, [sp, #32]
     b7c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     b7e:	2f00      	cmp	r7, #0
     b80:	dd31      	ble.n	be6 <CONFIG_ISR_STACK_SIZE+0x3e6>
			width -= (int)nj_len;
     b82:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     b84:	f89d 3018 	ldrb.w	r3, [sp, #24]
     b88:	f013 0f04 	tst.w	r3, #4
     b8c:	d12b      	bne.n	be6 <CONFIG_ISR_STACK_SIZE+0x3e6>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     b8e:	f013 0f40 	tst.w	r3, #64	; 0x40
     b92:	d017      	beq.n	bc4 <CONFIG_ISR_STACK_SIZE+0x3c4>
					if (sign != 0) {
     b94:	f1b8 0f00 	cmp.w	r8, #0
     b98:	d017      	beq.n	bca <CONFIG_ISR_STACK_SIZE+0x3ca>
						OUTC(sign);
     b9a:	4629      	mov	r1, r5
     b9c:	4640      	mov	r0, r8
     b9e:	47b0      	blx	r6
     ba0:	2800      	cmp	r0, #0
     ba2:	db6a      	blt.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     ba4:	3401      	adds	r4, #1
						sign = 0;
     ba6:	46d8      	mov	r8, fp
					}
					pad = '0';
     ba8:	f04f 0b30 	mov.w	fp, #48	; 0x30
     bac:	e00f      	b.n	bce <CONFIG_ISR_STACK_SIZE+0x3ce>
		const char *bpe = buf + sizeof(buf);
     bae:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     bb2:	e7cd      	b.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
     bb4:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     bb8:	e7ca      	b.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
		} else if (conv->altform_0) {
     bba:	f012 0f08 	tst.w	r2, #8
     bbe:	d0d7      	beq.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
			nj_len += 1U;
     bc0:	3301      	adds	r3, #1
     bc2:	e7d5      	b.n	b70 <CONFIG_ISR_STACK_SIZE+0x370>
				char pad = ' ';
     bc4:	f04f 0b20 	mov.w	fp, #32
     bc8:	e001      	b.n	bce <CONFIG_ISR_STACK_SIZE+0x3ce>
					pad = '0';
     bca:	f04f 0b30 	mov.w	fp, #48	; 0x30
     bce:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     bd0:	1e5f      	subs	r7, r3, #1
     bd2:	2b00      	cmp	r3, #0
     bd4:	dd07      	ble.n	be6 <CONFIG_ISR_STACK_SIZE+0x3e6>
					OUTC(pad);
     bd6:	4629      	mov	r1, r5
     bd8:	4658      	mov	r0, fp
     bda:	47b0      	blx	r6
     bdc:	2800      	cmp	r0, #0
     bde:	db4c      	blt.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     be0:	3401      	adds	r4, #1
				while (width-- > 0) {
     be2:	463b      	mov	r3, r7
     be4:	e7f4      	b.n	bd0 <CONFIG_ISR_STACK_SIZE+0x3d0>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     be6:	f1b8 0f00 	cmp.w	r8, #0
     bea:	d005      	beq.n	bf8 <CONFIG_ISR_STACK_SIZE+0x3f8>
			OUTC(sign);
     bec:	4629      	mov	r1, r5
     bee:	4640      	mov	r0, r8
     bf0:	47b0      	blx	r6
     bf2:	2800      	cmp	r0, #0
     bf4:	db41      	blt.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     bf6:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     bf8:	f89d 301a 	ldrb.w	r3, [sp, #26]
     bfc:	f3c3 1200 	ubfx	r2, r3, #4, #1
     c00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     c04:	431a      	orrs	r2, r3
     c06:	d005      	beq.n	c14 <CONFIG_ISR_STACK_SIZE+0x414>
				OUTC('0');
     c08:	4629      	mov	r1, r5
     c0a:	2030      	movs	r0, #48	; 0x30
     c0c:	47b0      	blx	r6
     c0e:	2800      	cmp	r0, #0
     c10:	db33      	blt.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     c12:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     c14:	f89d 301a 	ldrb.w	r3, [sp, #26]
     c18:	f013 0f10 	tst.w	r3, #16
     c1c:	d006      	beq.n	c2c <CONFIG_ISR_STACK_SIZE+0x42c>
				OUTC(conv->specifier);
     c1e:	4629      	mov	r1, r5
     c20:	f89d 001b 	ldrb.w	r0, [sp, #27]
     c24:	47b0      	blx	r6
     c26:	2800      	cmp	r0, #0
     c28:	db27      	blt.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     c2a:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     c2c:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     c2e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     c32:	2b00      	cmp	r3, #0
     c34:	dd07      	ble.n	c46 <CONFIG_ISR_STACK_SIZE+0x446>
				OUTC('0');
     c36:	4629      	mov	r1, r5
     c38:	2030      	movs	r0, #48	; 0x30
     c3a:	47b0      	blx	r6
     c3c:	2800      	cmp	r0, #0
     c3e:	db1c      	blt.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     c40:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     c42:	4643      	mov	r3, r8
     c44:	e7f3      	b.n	c2e <CONFIG_ISR_STACK_SIZE+0x42e>
			}

			OUTS(bps, bpe);
     c46:	4653      	mov	r3, sl
     c48:	464a      	mov	r2, r9
     c4a:	4629      	mov	r1, r5
     c4c:	4630      	mov	r0, r6
     c4e:	f004 fb82 	bl	5356 <outs>
     c52:	2800      	cmp	r0, #0
     c54:	db11      	blt.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     c56:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     c58:	2f00      	cmp	r7, #0
     c5a:	dd07      	ble.n	c6c <CONFIG_ISR_STACK_SIZE+0x46c>
			OUTC(' ');
     c5c:	4629      	mov	r1, r5
     c5e:	2020      	movs	r0, #32
     c60:	47b0      	blx	r6
     c62:	2800      	cmp	r0, #0
     c64:	db09      	blt.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
     c66:	3401      	adds	r4, #1
			--width;
     c68:	3f01      	subs	r7, #1
     c6a:	e7f5      	b.n	c58 <CONFIG_ISR_STACK_SIZE+0x458>
		fp = extract_conversion(conv, sp);
     c6c:	f8dd 9008 	ldr.w	r9, [sp, #8]
     c70:	e544      	b.n	6fc <z_cbvprintf_impl+0x10>
     c72:	f8dd 9008 	ldr.w	r9, [sp, #8]
     c76:	e541      	b.n	6fc <z_cbvprintf_impl+0x10>
		}
	}

	return count;
     c78:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     c7a:	b011      	add	sp, #68	; 0x44
     c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c80:	00006c4d 	.word	0x00006c4d

00000c84 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     c84:	b508      	push	{r3, lr}
     c86:	f04f 0220 	mov.w	r2, #32
     c8a:	f3ef 8311 	mrs	r3, BASEPRI
     c8e:	f382 8812 	msr	BASEPRI_MAX, r2
     c92:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     c96:	f004 fc05 	bl	54a4 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     c9a:	4803      	ldr	r0, [pc, #12]	; (ca8 <sys_reboot+0x24>)
     c9c:	f003 ffae 	bl	4bfc <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     ca0:	f000 fac0 	bl	1224 <arch_cpu_idle>
     ca4:	e7fc      	b.n	ca0 <sys_reboot+0x1c>
     ca6:	bf00      	nop
     ca8:	00006c50 	.word	0x00006c50

00000cac <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     cac:	b168      	cbz	r0, cca <nrfx_coredep_delay_us+0x1e>
{
     cae:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     cb0:	4a06      	ldr	r2, [pc, #24]	; (ccc <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     cb2:	4b07      	ldr	r3, [pc, #28]	; (cd0 <nrfx_coredep_delay_us+0x24>)
     cb4:	681b      	ldr	r3, [r3, #0]
     cb6:	4907      	ldr	r1, [pc, #28]	; (cd4 <nrfx_coredep_delay_us+0x28>)
     cb8:	fba1 1303 	umull	r1, r3, r1, r3
     cbc:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
     cbe:	fb00 f003 	mul.w	r0, r0, r3
     cc2:	f042 0301 	orr.w	r3, r2, #1
     cc6:	4798      	blx	r3
}
     cc8:	bd08      	pop	{r3, pc}
     cca:	4770      	bx	lr
     ccc:	00006c30 	.word	0x00006c30
     cd0:	20000048 	.word	0x20000048
     cd4:	431bde83 	.word	0x431bde83

00000cd8 <nordicsemi_nrf53_init>:
     cd8:	f04f 0320 	mov.w	r3, #32
     cdc:	f3ef 8c11 	mrs	ip, BASEPRI
     ce0:	f383 8812 	msr	BASEPRI_MAX, r3
     ce4:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     ce8:	2101      	movs	r1, #1
     cea:	4b12      	ldr	r3, [pc, #72]	; (d34 <nordicsemi_nrf53_init+0x5c>)
     cec:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     cf0:	4a11      	ldr	r2, [pc, #68]	; (d38 <nordicsemi_nrf53_init+0x60>)
     cf2:	2302      	movs	r3, #2
     cf4:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     cf8:	4810      	ldr	r0, [pc, #64]	; (d3c <nordicsemi_nrf53_init+0x64>)
     cfa:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     cfe:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     d02:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     d06:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     d0a:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
     d0e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     d12:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     d16:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     d1a:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     d1e:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     d22:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
     d26:	f38c 8811 	msr	BASEPRI, ip
     d2a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     d2e:	2000      	movs	r0, #0
     d30:	4770      	bx	lr
     d32:	bf00      	nop
     d34:	50001000 	.word	0x50001000
     d38:	50004000 	.word	0x50004000
     d3c:	50842500 	.word	0x50842500

00000d40 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     d40:	2806      	cmp	r0, #6
     d42:	d000      	beq.n	d46 <pm_state_set+0x6>
     d44:	4770      	bx	lr
{
     d46:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
     d48:	4801      	ldr	r0, [pc, #4]	; (d50 <pm_state_set+0x10>)
     d4a:	f004 fb23 	bl	5394 <nrf_regulators_system_off>
     d4e:	bf00      	nop
     d50:	50004000 	.word	0x50004000

00000d54 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     d54:	f001 be86 	b.w	2a64 <SystemInit>

00000d58 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     d58:	b570      	push	{r4, r5, r6, lr}
     d5a:	4605      	mov	r5, r0
	__asm__ volatile(
     d5c:	f04f 0320 	mov.w	r3, #32
     d60:	f3ef 8611 	mrs	r6, BASEPRI
     d64:	f383 8812 	msr	BASEPRI_MAX, r3
     d68:	f3bf 8f6f 	isb	sy
     d6c:	4b0e      	ldr	r3, [pc, #56]	; (da8 <pm_state_notify+0x50>)
     d6e:	681c      	ldr	r4, [r3, #0]
     d70:	e00d      	b.n	d8e <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
     d72:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
     d74:	b13a      	cbz	r2, d86 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     d76:	4b0d      	ldr	r3, [pc, #52]	; (dac <pm_state_notify+0x54>)
     d78:	7d1b      	ldrb	r3, [r3, #20]
     d7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     d7e:	490c      	ldr	r1, [pc, #48]	; (db0 <pm_state_notify+0x58>)
     d80:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
     d84:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     d86:	4623      	mov	r3, r4
	return node->next;
     d88:	6824      	ldr	r4, [r4, #0]
     d8a:	b104      	cbz	r4, d8e <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     d8c:	b123      	cbz	r3, d98 <pm_state_notify+0x40>
     d8e:	b12c      	cbz	r4, d9c <pm_state_notify+0x44>
		if (entering_state) {
     d90:	2d00      	cmp	r5, #0
     d92:	d0ee      	beq.n	d72 <pm_state_notify+0x1a>
			callback = notifier->state_entry;
     d94:	6862      	ldr	r2, [r4, #4]
     d96:	e7ed      	b.n	d74 <pm_state_notify+0x1c>
     d98:	461c      	mov	r4, r3
     d9a:	e7f8      	b.n	d8e <pm_state_notify+0x36>
	__asm__ volatile(
     d9c:	f386 8811 	msr	BASEPRI, r6
     da0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     da4:	bd70      	pop	{r4, r5, r6, pc}
     da6:	bf00      	nop
     da8:	20000330 	.word	0x20000330
     dac:	20000950 	.word	0x20000950
     db0:	20000324 	.word	0x20000324

00000db4 <pm_exit_pos_ops>:
{
     db4:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
     db6:	4b06      	ldr	r3, [pc, #24]	; (dd0 <pm_exit_pos_ops+0x1c>)
     db8:	b123      	cbz	r3, dc4 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
     dba:	7841      	ldrb	r1, [r0, #1]
     dbc:	7800      	ldrb	r0, [r0, #0]
     dbe:	f004 faf0 	bl	53a2 <pm_state_exit_post_ops>
}
     dc2:	bd08      	pop	{r3, pc}
     dc4:	2300      	movs	r3, #0
     dc6:	f383 8811 	msr	BASEPRI, r3
     dca:	f3bf 8f6f 	isb	sy
     dce:	e7f8      	b.n	dc2 <pm_exit_pos_ops+0xe>
     dd0:	000053a3 	.word	0x000053a3

00000dd4 <pm_system_resume>:

void pm_system_resume(void)
{
     dd4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     dd6:	4b0e      	ldr	r3, [pc, #56]	; (e10 <pm_system_resume+0x3c>)
     dd8:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     dda:	4621      	mov	r1, r4
     ddc:	480d      	ldr	r0, [pc, #52]	; (e14 <pm_system_resume+0x40>)
     dde:	f004 fae6 	bl	53ae <atomic_test_and_clear_bit>
     de2:	b900      	cbnz	r0, de6 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
     de4:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
     de6:	0065      	lsls	r5, r4, #1
     de8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
     dec:	4e0a      	ldr	r6, [pc, #40]	; (e18 <pm_system_resume+0x44>)
     dee:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     df2:	f7ff ffdf 	bl	db4 <pm_exit_pos_ops>
		pm_state_notify(false);
     df6:	2000      	movs	r0, #0
     df8:	f7ff ffae 	bl	d58 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     dfc:	192b      	adds	r3, r5, r4
     dfe:	0099      	lsls	r1, r3, #2
     e00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     e04:	2200      	movs	r2, #0
     e06:	5072      	str	r2, [r6, r1]
     e08:	605a      	str	r2, [r3, #4]
     e0a:	609a      	str	r2, [r3, #8]
}
     e0c:	e7ea      	b.n	de4 <pm_system_resume+0x10>
     e0e:	bf00      	nop
     e10:	20000950 	.word	0x20000950
     e14:	20000338 	.word	0x20000338
     e18:	20000324 	.word	0x20000324

00000e1c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e1e:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
     e20:	4b38      	ldr	r3, [pc, #224]	; (f04 <pm_system_suspend+0xe8>)
     e22:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
     e24:	f04f 0320 	mov.w	r3, #32
     e28:	f3ef 8611 	mrs	r6, BASEPRI
     e2c:	f383 8812 	msr	BASEPRI_MAX, r3
     e30:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     e34:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     e38:	4b33      	ldr	r3, [pc, #204]	; (f08 <pm_system_suspend+0xec>)
     e3a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
     e3e:	2b00      	cmp	r3, #0
     e40:	d039      	beq.n	eb6 <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     e42:	4b32      	ldr	r3, [pc, #200]	; (f0c <pm_system_suspend+0xf0>)
     e44:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
     e48:	4f2f      	ldr	r7, [pc, #188]	; (f08 <pm_system_suspend+0xec>)
     e4a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
     e4e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
     e52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     e56:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     e5a:	2300      	movs	r3, #0
     e5c:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
     e60:	f386 8811 	msr	BASEPRI, r6
     e64:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     e68:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     e6c:	4a27      	ldr	r2, [pc, #156]	; (f0c <pm_system_suspend+0xf0>)
     e6e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     e72:	2b00      	cmp	r3, #0
     e74:	d044      	beq.n	f00 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
     e76:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
     e7a:	d12b      	bne.n	ed4 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     e7c:	f002 ffd8 	bl	3e30 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     e80:	2001      	movs	r0, #1
     e82:	f7ff ff69 	bl	d58 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
     e86:	4621      	mov	r1, r4
     e88:	4821      	ldr	r0, [pc, #132]	; (f10 <pm_system_suspend+0xf4>)
     e8a:	f004 faa8 	bl	53de <atomic_set_bit>
	if (pm_state_set != NULL) {
     e8e:	4b21      	ldr	r3, [pc, #132]	; (f14 <pm_system_suspend+0xf8>)
     e90:	b15b      	cbz	r3, eaa <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
     e92:	4a1e      	ldr	r2, [pc, #120]	; (f0c <pm_system_suspend+0xf0>)
     e94:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     e98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     e9c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     ea0:	7859      	ldrb	r1, [r3, #1]
     ea2:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
     ea6:	f7ff ff4b 	bl	d40 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
     eaa:	f7ff ff93 	bl	dd4 <pm_system_resume>
	k_sched_unlock();
     eae:	f003 f9c1 	bl	4234 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
     eb2:	2001      	movs	r0, #1
}
     eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
     eb6:	4601      	mov	r1, r0
     eb8:	4620      	mov	r0, r4
     eba:	f000 f831 	bl	f20 <pm_policy_next_state>
		if (info != NULL) {
     ebe:	2800      	cmp	r0, #0
     ec0:	d0ce      	beq.n	e60 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
     ec2:	eb04 0144 	add.w	r1, r4, r4, lsl #1
     ec6:	4b11      	ldr	r3, [pc, #68]	; (f0c <pm_system_suspend+0xf0>)
     ec8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     ecc:	c807      	ldmia	r0, {r0, r1, r2}
     ece:	e883 0007 	stmia.w	r3, {r0, r1, r2}
     ed2:	e7c5      	b.n	e60 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
     ed4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     ed8:	4b0c      	ldr	r3, [pc, #48]	; (f0c <pm_system_suspend+0xf0>)
     eda:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     ede:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     ee0:	0c41      	lsrs	r1, r0, #17
     ee2:	03c0      	lsls	r0, r0, #15
     ee4:	4b0c      	ldr	r3, [pc, #48]	; (f18 <pm_system_suspend+0xfc>)
     ee6:	18c0      	adds	r0, r0, r3
     ee8:	4a0c      	ldr	r2, [pc, #48]	; (f1c <pm_system_suspend+0x100>)
     eea:	f04f 0300 	mov.w	r3, #0
     eee:	f141 0100 	adc.w	r1, r1, #0
     ef2:	f7ff f92f 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
     ef6:	2101      	movs	r1, #1
     ef8:	1a28      	subs	r0, r5, r0
     efa:	f005 fcbb 	bl	6874 <z_set_timeout_expiry>
     efe:	e7bd      	b.n	e7c <pm_system_suspend+0x60>
		return false;
     f00:	2000      	movs	r0, #0
     f02:	e7d7      	b.n	eb4 <pm_system_suspend+0x98>
     f04:	20000950 	.word	0x20000950
     f08:	20000318 	.word	0x20000318
     f0c:	20000324 	.word	0x20000324
     f10:	20000338 	.word	0x20000338
     f14:	00000d41 	.word	0x00000d41
     f18:	000f423f 	.word	0x000f423f
     f1c:	000f4240 	.word	0x000f4240

00000f20 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
     f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     f24:	b082      	sub	sp, #8
     f26:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
     f28:	a901      	add	r1, sp, #4
     f2a:	f000 f845 	bl	fb8 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     f2e:	1e44      	subs	r4, r0, #1
     f30:	b224      	sxth	r4, r4
     f32:	e007      	b.n	f44 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
     f34:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
     f38:	d033      	beq.n	fa2 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
     f3a:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
     f3c:	45b0      	cmp	r8, r6
     f3e:	d930      	bls.n	fa2 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     f40:	3c01      	subs	r4, #1
     f42:	b224      	sxth	r4, r4
     f44:	2c00      	cmp	r4, #0
     f46:	db2b      	blt.n	fa0 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
     f48:	9b01      	ldr	r3, [sp, #4]
     f4a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     f4e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
     f52:	7869      	ldrb	r1, [r5, #1]
     f54:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
     f58:	f004 fa50 	bl	53fc <pm_policy_state_lock_is_active>
     f5c:	2800      	cmp	r0, #0
     f5e:	d1ef      	bne.n	f40 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
     f60:	6868      	ldr	r0, [r5, #4]
     f62:	0c41      	lsrs	r1, r0, #17
     f64:	03c0      	lsls	r0, r0, #15
     f66:	4f11      	ldr	r7, [pc, #68]	; (fac <pm_policy_next_state+0x8c>)
     f68:	19c0      	adds	r0, r0, r7
     f6a:	4a11      	ldr	r2, [pc, #68]	; (fb0 <pm_policy_next_state+0x90>)
     f6c:	f04f 0300 	mov.w	r3, #0
     f70:	f141 0100 	adc.w	r1, r1, #0
     f74:	f7ff f8ee 	bl	154 <__aeabi_uldivmod>
     f78:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
     f7a:	68ab      	ldr	r3, [r5, #8]
     f7c:	0c59      	lsrs	r1, r3, #17
     f7e:	03db      	lsls	r3, r3, #15
     f80:	19d8      	adds	r0, r3, r7
     f82:	4a0b      	ldr	r2, [pc, #44]	; (fb0 <pm_policy_next_state+0x90>)
     f84:	f04f 0300 	mov.w	r3, #0
     f88:	f141 0100 	adc.w	r1, r1, #0
     f8c:	f7ff f8e2 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
     f90:	4b08      	ldr	r3, [pc, #32]	; (fb4 <pm_policy_next_state+0x94>)
     f92:	681b      	ldr	r3, [r3, #0]
     f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
     f98:	d0cc      	beq.n	f34 <pm_policy_next_state+0x14>
     f9a:	4283      	cmp	r3, r0
     f9c:	d8ca      	bhi.n	f34 <pm_policy_next_state+0x14>
     f9e:	e7cf      	b.n	f40 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
     fa0:	2500      	movs	r5, #0
}
     fa2:	4628      	mov	r0, r5
     fa4:	b002      	add	sp, #8
     fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     faa:	bf00      	nop
     fac:	000f423f 	.word	0x000f423f
     fb0:	000f4240 	.word	0x000f4240
     fb4:	20000004 	.word	0x20000004

00000fb8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
     fb8:	b908      	cbnz	r0, fbe <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
     fba:	4b02      	ldr	r3, [pc, #8]	; (fc4 <pm_state_cpu_get_all+0xc>)
     fbc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
     fbe:	2000      	movs	r0, #0
     fc0:	4770      	bx	lr
     fc2:	bf00      	nop
     fc4:	00006c7c 	.word	0x00006c7c

00000fc8 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
     fc8:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
     fca:	4802      	ldr	r0, [pc, #8]	; (fd4 <nrf_cc3xx_platform_abort_init+0xc>)
     fcc:	f003 fc50 	bl	4870 <nrf_cc3xx_platform_set_abort>
}
     fd0:	bd08      	pop	{r3, pc}
     fd2:	bf00      	nop
     fd4:	00006c7c 	.word	0x00006c7c

00000fd8 <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
     fd8:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
     fdc:	d017      	beq.n	100e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xe>
     fde:	d80c      	bhi.n	ffa <mutex_flags_unknown+0x22>
     fe0:	f640 63ba 	movw	r3, #3770	; 0xeba
     fe4:	4298      	cmp	r0, r3
     fe6:	d014      	beq.n	1012 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x12>
     fe8:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
     fec:	d013      	beq.n	1016 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x16>
     fee:	283a      	cmp	r0, #58	; 0x3a
     ff0:	d001      	beq.n	ff6 <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
     ff2:	2001      	movs	r0, #1
     ff4:	4770      	bx	lr
    switch(flags){
     ff6:	2000      	movs	r0, #0
     ff8:	4770      	bx	lr
     ffa:	4b09      	ldr	r3, [pc, #36]	; (1020 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x20>)
     ffc:	4298      	cmp	r0, r3
     ffe:	d00c      	beq.n	101a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1a>
    1000:	4b08      	ldr	r3, [pc, #32]	; (1024 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x24>)
    1002:	4298      	cmp	r0, r3
    1004:	d001      	beq.n	100a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa>
            return true;
    1006:	2001      	movs	r0, #1
    }
}
    1008:	4770      	bx	lr
    switch(flags){
    100a:	2000      	movs	r0, #0
    100c:	4770      	bx	lr
    100e:	2000      	movs	r0, #0
    1010:	4770      	bx	lr
    1012:	2000      	movs	r0, #0
    1014:	4770      	bx	lr
    1016:	2000      	movs	r0, #0
    1018:	4770      	bx	lr
    101a:	2000      	movs	r0, #0
    101c:	4770      	bx	lr
    101e:	bf00      	nop
    1020:	3a00003a 	.word	0x3a00003a
    1024:	a95c5f2c 	.word	0xa95c5f2c

00001028 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1028:	b328      	cbz	r0, 1076 <mutex_unlock_platform+0x4e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    102a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    102c:	6843      	ldr	r3, [r0, #4]
    102e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1032:	d00a      	beq.n	104a <mutex_unlock_platform+0x22>
    1034:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1038:	d014      	beq.n	1064 <mutex_unlock_platform+0x3c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    103a:	4912      	ldr	r1, [pc, #72]	; (1084 <mutex_unlock_platform+0x5c>)
    103c:	428b      	cmp	r3, r1
    103e:	d01f      	beq.n	1080 <mutex_unlock_platform+0x58>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1040:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1042:	f002 fdd9 	bl	3bf8 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1046:	2000      	movs	r0, #0
    1048:	e014      	b.n	1074 <mutex_unlock_platform+0x4c>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    104a:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    104c:	2200      	movs	r2, #0
    104e:	e8d3 1fef 	ldaex	r1, [r3]
    1052:	2901      	cmp	r1, #1
    1054:	d103      	bne.n	105e <mutex_unlock_platform+0x36>
    1056:	e8c3 2fe0 	stlex	r0, r2, [r3]
    105a:	2800      	cmp	r0, #0
    105c:	d1f7      	bne.n	104e <mutex_unlock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    105e:	d10d      	bne.n	107c <mutex_unlock_platform+0x54>
    1060:	4610      	mov	r0, r2
    1062:	e007      	b.n	1074 <mutex_unlock_platform+0x4c>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    1064:	6803      	ldr	r3, [r0, #0]
    1066:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    1068:	f503 7380 	add.w	r3, r3, #256	; 0x100
    106c:	2000      	movs	r0, #0
    106e:	4a06      	ldr	r2, [pc, #24]	; (1088 <mutex_unlock_platform+0x60>)
    1070:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    1074:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1076:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    107a:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    107c:	4803      	ldr	r0, [pc, #12]	; (108c <mutex_unlock_platform+0x64>)
    107e:	e7f9      	b.n	1074 <mutex_unlock_platform+0x4c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1080:	4803      	ldr	r0, [pc, #12]	; (1090 <mutex_unlock_platform+0x68>)
    1082:	e7f7      	b.n	1074 <mutex_unlock_platform+0x4c>
    1084:	a95c5f2c 	.word	0xa95c5f2c
    1088:	50030000 	.word	0x50030000
    108c:	ffff8fe9 	.word	0xffff8fe9
    1090:	ffff8fea 	.word	0xffff8fea

00001094 <mutex_lock_platform>:
    if(mutex == NULL) {
    1094:	b388      	cbz	r0, 10fa <mutex_lock_platform+0x66>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1096:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    1098:	6843      	ldr	r3, [r0, #4]
    109a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    109e:	d00f      	beq.n	10c0 <mutex_lock_platform+0x2c>
    10a0:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    10a4:	d019      	beq.n	10da <mutex_lock_platform+0x46>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    10a6:	4916      	ldr	r1, [pc, #88]	; (1100 <mutex_lock_platform+0x6c>)
    10a8:	428b      	cmp	r3, r1
    10aa:	d024      	beq.n	10f6 <mutex_lock_platform+0x62>
        p_mutex = (struct k_mutex *)mutex->mutex;
    10ac:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    10ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    10b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    10b6:	f002 fd1b 	bl	3af0 <z_impl_k_mutex_lock>
        if (ret == 0) {
    10ba:	b168      	cbz	r0, 10d8 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    10bc:	4811      	ldr	r0, [pc, #68]	; (1104 <mutex_lock_platform+0x70>)
    10be:	e00b      	b.n	10d8 <mutex_lock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    10c0:	6803      	ldr	r3, [r0, #0]
    10c2:	2201      	movs	r2, #1
    10c4:	e8d3 1fef 	ldaex	r1, [r3]
    10c8:	2900      	cmp	r1, #0
    10ca:	d103      	bne.n	10d4 <mutex_lock_platform+0x40>
    10cc:	e8c3 2fe0 	stlex	r0, r2, [r3]
    10d0:	2800      	cmp	r0, #0
    10d2:	d1f7      	bne.n	10c4 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    10d4:	d10b      	bne.n	10ee <mutex_lock_platform+0x5a>
    10d6:	2000      	movs	r0, #0
}
    10d8:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    10da:	6803      	ldr	r3, [r0, #0]
    10dc:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    10de:	f503 7380 	add.w	r3, r3, #256	; 0x100
    10e2:	4a09      	ldr	r2, [pc, #36]	; (1108 <mutex_lock_platform+0x74>)
    10e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    10e8:	b91b      	cbnz	r3, 10f2 <mutex_lock_platform+0x5e>
    10ea:	2000      	movs	r0, #0
    10ec:	e7f4      	b.n	10d8 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    10ee:	4805      	ldr	r0, [pc, #20]	; (1104 <mutex_lock_platform+0x70>)
    10f0:	e7f2      	b.n	10d8 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    10f2:	4804      	ldr	r0, [pc, #16]	; (1104 <mutex_lock_platform+0x70>)
    10f4:	e7f0      	b.n	10d8 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    10f6:	4805      	ldr	r0, [pc, #20]	; (110c <mutex_lock_platform+0x78>)
    10f8:	e7ee      	b.n	10d8 <mutex_lock_platform+0x44>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    10fa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    10fe:	4770      	bx	lr
    1100:	a95c5f2c 	.word	0xa95c5f2c
    1104:	ffff8fe9 	.word	0xffff8fe9
    1108:	50030000 	.word	0x50030000
    110c:	ffff8fea 	.word	0xffff8fea

00001110 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1110:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1112:	4604      	mov	r4, r0
    1114:	b1a8      	cbz	r0, 1142 <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1116:	6863      	ldr	r3, [r4, #4]
    1118:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    111c:	d010      	beq.n	1140 <mutex_free_platform+0x30>
    111e:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1122:	d00d      	beq.n	1140 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1124:	4a0c      	ldr	r2, [pc, #48]	; (1158 <mutex_free_platform+0x48>)
    1126:	4293      	cmp	r3, r2
    1128:	d00a      	beq.n	1140 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    112a:	f413 6f68 	tst.w	r3, #3712	; 0xe80
    112e:	d00d      	beq.n	114c <mutex_free_platform+0x3c>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1130:	4621      	mov	r1, r4
    1132:	480a      	ldr	r0, [pc, #40]	; (115c <mutex_free_platform+0x4c>)
    1134:	f005 f9dd 	bl	64f2 <k_mem_slab_free>
        mutex->mutex = NULL;
    1138:	2300      	movs	r3, #0
    113a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    113c:	4b06      	ldr	r3, [pc, #24]	; (1158 <mutex_free_platform+0x48>)
    113e:	6063      	str	r3, [r4, #4]
}
    1140:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1142:	4b07      	ldr	r3, [pc, #28]	; (1160 <mutex_free_platform+0x50>)
    1144:	685b      	ldr	r3, [r3, #4]
    1146:	4807      	ldr	r0, [pc, #28]	; (1164 <mutex_free_platform+0x54>)
    1148:	4798      	blx	r3
    114a:	e7e4      	b.n	1116 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    114c:	2214      	movs	r2, #20
    114e:	2100      	movs	r1, #0
    1150:	6820      	ldr	r0, [r4, #0]
    1152:	f004 fa79 	bl	5648 <memset>
    1156:	e7f1      	b.n	113c <mutex_free_platform+0x2c>
    1158:	a95c5f2c 	.word	0xa95c5f2c
    115c:	2000083c 	.word	0x2000083c
    1160:	200000d4 	.word	0x200000d4
    1164:	00006c84 	.word	0x00006c84

00001168 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1168:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    116a:	4604      	mov	r4, r0
    116c:	b368      	cbz	r0, 11ca <mutex_init_platform+0x62>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    116e:	6860      	ldr	r0, [r4, #4]
    1170:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    1174:	d028      	beq.n	11c8 <mutex_init_platform+0x60>
    1176:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    117a:	d025      	beq.n	11c8 <mutex_init_platform+0x60>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    117c:	4b17      	ldr	r3, [pc, #92]	; (11dc <mutex_init_platform+0x74>)
    117e:	4298      	cmp	r0, r3
    1180:	d028      	beq.n	11d4 <mutex_init_platform+0x6c>
        mutex_flags_unknown(mutex->flags)) {
    1182:	f7ff ff29 	bl	fd8 <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1186:	b1c0      	cbz	r0, 11ba <mutex_init_platform+0x52>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    118c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1190:	4621      	mov	r1, r4
    1192:	4813      	ldr	r0, [pc, #76]	; (11e0 <mutex_init_platform+0x78>)
    1194:	f002 fb7e 	bl	3894 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1198:	b908      	cbnz	r0, 119e <mutex_init_platform+0x36>
    119a:	6823      	ldr	r3, [r4, #0]
    119c:	b91b      	cbnz	r3, 11a6 <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
    119e:	4b11      	ldr	r3, [pc, #68]	; (11e4 <mutex_init_platform+0x7c>)
    11a0:	685b      	ldr	r3, [r3, #4]
    11a2:	4811      	ldr	r0, [pc, #68]	; (11e8 <mutex_init_platform+0x80>)
    11a4:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    11a6:	2214      	movs	r2, #20
    11a8:	2100      	movs	r1, #0
    11aa:	6820      	ldr	r0, [r4, #0]
    11ac:	f004 fa4c 	bl	5648 <memset>
        mutex->flags = 0;
    11b0:	2300      	movs	r3, #0
    11b2:	6063      	str	r3, [r4, #4]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    11b4:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    11b8:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    11ba:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    11bc:	f005 fa05 	bl	65ca <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    11c0:	6863      	ldr	r3, [r4, #4]
    11c2:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    11c6:	6063      	str	r3, [r4, #4]
}
    11c8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    11ca:	4b06      	ldr	r3, [pc, #24]	; (11e4 <mutex_init_platform+0x7c>)
    11cc:	685b      	ldr	r3, [r3, #4]
    11ce:	4807      	ldr	r0, [pc, #28]	; (11ec <mutex_init_platform+0x84>)
    11d0:	4798      	blx	r3
    11d2:	e7cc      	b.n	116e <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    11d4:	6823      	ldr	r3, [r4, #0]
    11d6:	2b00      	cmp	r3, #0
    11d8:	d1d3      	bne.n	1182 <mutex_init_platform+0x1a>
    11da:	e7d5      	b.n	1188 <mutex_init_platform+0x20>
    11dc:	a95c5f2c 	.word	0xa95c5f2c
    11e0:	2000083c 	.word	0x2000083c
    11e4:	200000d4 	.word	0x200000d4
    11e8:	00006cac 	.word	0x00006cac
    11ec:	00006c84 	.word	0x00006c84

000011f0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    11f0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    11f2:	2340      	movs	r3, #64	; 0x40
    11f4:	2214      	movs	r2, #20
    11f6:	4904      	ldr	r1, [pc, #16]	; (1208 <nrf_cc3xx_platform_mutex_init+0x18>)
    11f8:	4804      	ldr	r0, [pc, #16]	; (120c <nrf_cc3xx_platform_mutex_init+0x1c>)
    11fa:	f005 f96c 	bl	64d6 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    11fe:	4904      	ldr	r1, [pc, #16]	; (1210 <nrf_cc3xx_platform_mutex_init+0x20>)
    1200:	4804      	ldr	r0, [pc, #16]	; (1214 <nrf_cc3xx_platform_mutex_init+0x24>)
    1202:	f003 fba7 	bl	4954 <nrf_cc3xx_platform_set_mutexes>
}
    1206:	bd08      	pop	{r3, pc}
    1208:	2000033c 	.word	0x2000033c
    120c:	2000083c 	.word	0x2000083c
    1210:	00006cdc 	.word	0x00006cdc
    1214:	00006cf0 	.word	0x00006cf0

00001218 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1218:	4901      	ldr	r1, [pc, #4]	; (1220 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    121a:	2210      	movs	r2, #16
	str	r2, [r1]
    121c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    121e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1220:	e000ed10 	.word	0xe000ed10

00001224 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1224:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1226:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1228:	f380 8811 	msr	BASEPRI, r0
	isb
    122c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1230:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1234:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1236:	b662      	cpsie	i
	isb
    1238:	f3bf 8f6f 	isb	sy

	bx	lr
    123c:	4770      	bx	lr
    123e:	bf00      	nop

00001240 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1240:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1242:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1244:	f381 8811 	msr	BASEPRI, r1

	wfe
    1248:	bf20      	wfe

	msr	BASEPRI, r0
    124a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    124e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1250:	4770      	bx	lr
    1252:	bf00      	nop

00001254 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1254:	2800      	cmp	r0, #0
    1256:	db07      	blt.n	1268 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1258:	f000 021f 	and.w	r2, r0, #31
    125c:	0940      	lsrs	r0, r0, #5
    125e:	2301      	movs	r3, #1
    1260:	4093      	lsls	r3, r2
    1262:	4a02      	ldr	r2, [pc, #8]	; (126c <__NVIC_EnableIRQ+0x18>)
    1264:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    1268:	4770      	bx	lr
    126a:	bf00      	nop
    126c:	e000e100 	.word	0xe000e100

00001270 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1270:	2800      	cmp	r0, #0
    1272:	db08      	blt.n	1286 <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1274:	0149      	lsls	r1, r1, #5
    1276:	b2c9      	uxtb	r1, r1
    1278:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    127c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    1280:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    1284:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1286:	f000 000f 	and.w	r0, r0, #15
    128a:	0149      	lsls	r1, r1, #5
    128c:	b2c9      	uxtb	r1, r1
    128e:	4b01      	ldr	r3, [pc, #4]	; (1294 <__NVIC_SetPriority+0x24>)
    1290:	5419      	strb	r1, [r3, r0]
  }
}
    1292:	4770      	bx	lr
    1294:	e000ed14 	.word	0xe000ed14

00001298 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1298:	0942      	lsrs	r2, r0, #5
    129a:	4b05      	ldr	r3, [pc, #20]	; (12b0 <arch_irq_is_enabled+0x18>)
    129c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    12a0:	f000 001f 	and.w	r0, r0, #31
    12a4:	2301      	movs	r3, #1
    12a6:	fa03 f000 	lsl.w	r0, r3, r0
}
    12aa:	4010      	ands	r0, r2
    12ac:	4770      	bx	lr
    12ae:	bf00      	nop
    12b0:	e000e100 	.word	0xe000e100

000012b4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    12b4:	bf30      	wfi
    b z_SysNmiOnReset
    12b6:	f7ff bffd 	b.w	12b4 <z_SysNmiOnReset>
    12ba:	bf00      	nop

000012bc <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    12bc:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    12be:	4b0b      	ldr	r3, [pc, #44]	; (12ec <z_arm_prep_c+0x30>)
    12c0:	4a0b      	ldr	r2, [pc, #44]	; (12f0 <z_arm_prep_c+0x34>)
    12c2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    12c6:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    12c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    12cc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    12d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    12d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    12d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    12dc:	f002 fa26 	bl	372c <z_bss_zero>
	z_data_copy();
    12e0:	f003 f900 	bl	44e4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    12e4:	f000 f9f8 	bl	16d8 <z_arm_interrupt_init>
	z_cstart();
    12e8:	f002 fa7c 	bl	37e4 <z_cstart>
    12ec:	e000ed00 	.word	0xe000ed00
    12f0:	00000000 	.word	0x00000000

000012f4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    12f4:	4a0a      	ldr	r2, [pc, #40]	; (1320 <arch_swap+0x2c>)
    12f6:	6893      	ldr	r3, [r2, #8]
    12f8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    12fc:	4909      	ldr	r1, [pc, #36]	; (1324 <arch_swap+0x30>)
    12fe:	6809      	ldr	r1, [r1, #0]
    1300:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1304:	4908      	ldr	r1, [pc, #32]	; (1328 <arch_swap+0x34>)
    1306:	684b      	ldr	r3, [r1, #4]
    1308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    130c:	604b      	str	r3, [r1, #4]
    130e:	2300      	movs	r3, #0
    1310:	f383 8811 	msr	BASEPRI, r3
    1314:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1318:	6893      	ldr	r3, [r2, #8]
}
    131a:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    131e:	4770      	bx	lr
    1320:	20000950 	.word	0x20000950
    1324:	00006e48 	.word	0x00006e48
    1328:	e000ed00 	.word	0xe000ed00

0000132c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    132c:	4914      	ldr	r1, [pc, #80]	; (1380 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    132e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1330:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1334:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1336:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    133a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    133e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1340:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1344:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1348:	4f0e      	ldr	r7, [pc, #56]	; (1384 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    134a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    134e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1350:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1352:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1354:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1358:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    135a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    135e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1362:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1366:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    136a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    136e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    1372:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    1374:	f004 f869 	bl	544a <configure_builtin_stack_guard>
    pop {r2, lr}
    1378:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    137c:	4770      	bx	lr
    137e:	0000      	.short	0x0000
    ldr r1, =_kernel
    1380:	20000950 	.word	0x20000950
    ldr v4, =_SCS_ICSR
    1384:	e000ed04 	.word	0xe000ed04

00001388 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1388:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    138c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    138e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1392:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1396:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1398:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    139c:	2902      	cmp	r1, #2
    beq _oops
    139e:	d0ff      	beq.n	13a0 <_oops>

000013a0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    13a0:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    13a2:	f004 f835 	bl	5410 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    13a6:	bd01      	pop	{r0, pc}

000013a8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    13a8:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    13aa:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    13ae:	490e      	ldr	r1, [pc, #56]	; (13e8 <arch_new_thread+0x40>)
    13b0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    13b4:	f021 0101 	bic.w	r1, r1, #1
    13b8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    13bc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    13c0:	9b01      	ldr	r3, [sp, #4]
    13c2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    13c6:	9b02      	ldr	r3, [sp, #8]
    13c8:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    13cc:	9b03      	ldr	r3, [sp, #12]
    13ce:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    13d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    13d6:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    13da:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    13dc:	2300      	movs	r3, #0
    13de:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    13e2:	bc10      	pop	{r4}
    13e4:	4770      	bx	lr
    13e6:	bf00      	nop
    13e8:	00004c19 	.word	0x00004c19

000013ec <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    13ec:	4b09      	ldr	r3, [pc, #36]	; (1414 <arch_switch_to_main_thread+0x28>)
    13ee:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    13f0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    13f4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    13f8:	4610      	mov	r0, r2
    13fa:	f381 8809 	msr	PSP, r1
    13fe:	2100      	movs	r1, #0
    1400:	b663      	cpsie	if
    1402:	f381 8811 	msr	BASEPRI, r1
    1406:	f3bf 8f6f 	isb	sy
    140a:	2200      	movs	r2, #0
    140c:	2300      	movs	r3, #0
    140e:	f003 fc03 	bl	4c18 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1412:	bf00      	nop
    1414:	20000950 	.word	0x20000950

00001418 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1418:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    141a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    141c:	4a0b      	ldr	r2, [pc, #44]	; (144c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    141e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1420:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1422:	bf1e      	ittt	ne
	movne	r1, #0
    1424:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1426:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1428:	f005 f8b3 	blne	6592 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    142c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    142e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1432:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    1436:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    143a:	4905      	ldr	r1, [pc, #20]	; (1450 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    143c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    143e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1440:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1442:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1446:	4903      	ldr	r1, [pc, #12]	; (1454 <_isr_wrapper+0x3c>)
	bx r1
    1448:	4708      	bx	r1
    144a:	0000      	.short	0x0000
	ldr r2, =_kernel
    144c:	20000950 	.word	0x20000950
	ldr r1, =_sw_isr_table
    1450:	00006998 	.word	0x00006998
	ldr r1, =z_arm_int_exit
    1454:	00001459 	.word	0x00001459

00001458 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1458:	4b04      	ldr	r3, [pc, #16]	; (146c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    145a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    145c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    145e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1460:	d003      	beq.n	146a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1462:	4903      	ldr	r1, [pc, #12]	; (1470 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1468:	600a      	str	r2, [r1, #0]

0000146a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    146a:	4770      	bx	lr
	ldr r3, =_kernel
    146c:	20000950 	.word	0x20000950
	ldr r1, =_SCS_ICSR
    1470:	e000ed04 	.word	0xe000ed04

00001474 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1474:	b510      	push	{r4, lr}
    1476:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1478:	4b18      	ldr	r3, [pc, #96]	; (14dc <mem_manage_fault+0x68>)
    147a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    147c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1480:	f013 0f02 	tst.w	r3, #2
    1484:	d00b      	beq.n	149e <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1486:	4b15      	ldr	r3, [pc, #84]	; (14dc <mem_manage_fault+0x68>)
    1488:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    148c:	f013 0f80 	tst.w	r3, #128	; 0x80
    1490:	d005      	beq.n	149e <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    1492:	b121      	cbz	r1, 149e <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1494:	4a11      	ldr	r2, [pc, #68]	; (14dc <mem_manage_fault+0x68>)
    1496:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    149c:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    149e:	4b0f      	ldr	r3, [pc, #60]	; (14dc <mem_manage_fault+0x68>)
    14a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    14a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    14a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14a6:	f013 0f10 	tst.w	r3, #16
    14aa:	d101      	bne.n	14b0 <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    14ac:	4b0b      	ldr	r3, [pc, #44]	; (14dc <mem_manage_fault+0x68>)
    14ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    14b0:	4b0a      	ldr	r3, [pc, #40]	; (14dc <mem_manage_fault+0x68>)
    14b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14b4:	f013 0f20 	tst.w	r3, #32
    14b8:	d004      	beq.n	14c4 <mem_manage_fault+0x50>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    14ba:	4a08      	ldr	r2, [pc, #32]	; (14dc <mem_manage_fault+0x68>)
    14bc:	6a53      	ldr	r3, [r2, #36]	; 0x24
    14be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    14c2:	6253      	str	r3, [r2, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    14c4:	4a05      	ldr	r2, [pc, #20]	; (14dc <mem_manage_fault+0x68>)
    14c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14c8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    14cc:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    14ce:	2101      	movs	r1, #1
    14d0:	f003 ffc0 	bl	5454 <memory_fault_recoverable>
    14d4:	7020      	strb	r0, [r4, #0]

	return reason;
}
    14d6:	2000      	movs	r0, #0
    14d8:	bd10      	pop	{r4, pc}
    14da:	bf00      	nop
    14dc:	e000ed00 	.word	0xe000ed00

000014e0 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    14e0:	b510      	push	{r4, lr}
    14e2:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    14e4:	4b12      	ldr	r3, [pc, #72]	; (1530 <bus_fault+0x50>)
    14e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    14e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    14ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14ec:	f413 7f00 	tst.w	r3, #512	; 0x200
    14f0:	d00b      	beq.n	150a <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    14f2:	4b0f      	ldr	r3, [pc, #60]	; (1530 <bus_fault+0x50>)
    14f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    14f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14f8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    14fc:	d005      	beq.n	150a <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    14fe:	b121      	cbz	r1, 150a <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1500:	4a0b      	ldr	r2, [pc, #44]	; (1530 <bus_fault+0x50>)
    1502:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1504:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1508:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    150a:	4b09      	ldr	r3, [pc, #36]	; (1530 <bus_fault+0x50>)
    150c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1510:	f413 7f80 	tst.w	r3, #256	; 0x100
    1514:	d101      	bne.n	151a <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1516:	4b06      	ldr	r3, [pc, #24]	; (1530 <bus_fault+0x50>)
    1518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    151a:	4a05      	ldr	r2, [pc, #20]	; (1530 <bus_fault+0x50>)
    151c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    151e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1522:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1524:	2101      	movs	r1, #1
    1526:	f003 ff95 	bl	5454 <memory_fault_recoverable>
    152a:	7020      	strb	r0, [r4, #0]

	return reason;
}
    152c:	2000      	movs	r0, #0
    152e:	bd10      	pop	{r4, pc}
    1530:	e000ed00 	.word	0xe000ed00

00001534 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1534:	4b0a      	ldr	r3, [pc, #40]	; (1560 <usage_fault+0x2c>)
    1536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    153a:	6a98      	ldr	r0, [r3, #40]	; 0x28
    153c:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    1540:	d10b      	bne.n	155a <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1542:	4b07      	ldr	r3, [pc, #28]	; (1560 <usage_fault+0x2c>)
    1544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1548:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    154a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    154c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    154e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1552:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1556:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1558:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    155a:	2002      	movs	r0, #2
    155c:	e7f1      	b.n	1542 <usage_fault+0xe>
    155e:	bf00      	nop
    1560:	e000ed00 	.word	0xe000ed00

00001564 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1564:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1566:	4b0d      	ldr	r3, [pc, #52]	; (159c <z_arm_is_synchronous_svc+0x38>)
    1568:	695a      	ldr	r2, [r3, #20]
    156a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    156e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1570:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1574:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    1578:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    157c:	695a      	ldr	r2, [r3, #20]
    157e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1582:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1584:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1588:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    158c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1590:	4299      	cmp	r1, r3
    1592:	d001      	beq.n	1598 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    1594:	2000      	movs	r0, #0
    1596:	4770      	bx	lr
		return true;
    1598:	2001      	movs	r0, #1
}
    159a:	4770      	bx	lr
    159c:	e000ed00 	.word	0xe000ed00

000015a0 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    15a0:	b538      	push	{r3, r4, r5, lr}
    15a2:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    15a4:	2300      	movs	r3, #0
    15a6:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    15a8:	4b1a      	ldr	r3, [pc, #104]	; (1614 <hard_fault+0x74>)
    15aa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    15ac:	f010 0002 	ands.w	r0, r0, #2
    15b0:	d12d      	bne.n	160e <hard_fault+0x6e>
    15b2:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    15b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    15b6:	2b00      	cmp	r3, #0
    15b8:	db2a      	blt.n	1610 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    15ba:	4b16      	ldr	r3, [pc, #88]	; (1614 <hard_fault+0x74>)
    15bc:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    15be:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    15c2:	d025      	beq.n	1610 <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
    15c4:	4628      	mov	r0, r5
    15c6:	f7ff ffcd 	bl	1564 <z_arm_is_synchronous_svc>
    15ca:	b108      	cbz	r0, 15d0 <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
    15cc:	6828      	ldr	r0, [r5, #0]
    15ce:	e01f      	b.n	1610 <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    15d0:	4b10      	ldr	r3, [pc, #64]	; (1614 <hard_fault+0x74>)
    15d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15d4:	f013 0fff 	tst.w	r3, #255	; 0xff
    15d8:	d10d      	bne.n	15f6 <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    15da:	4b0e      	ldr	r3, [pc, #56]	; (1614 <hard_fault+0x74>)
    15dc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    15de:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
    15e2:	d10e      	bne.n	1602 <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    15e4:	4b0b      	ldr	r3, [pc, #44]	; (1614 <hard_fault+0x74>)
    15e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    15ec:	d310      	bcc.n	1610 <hard_fault+0x70>
			reason = usage_fault(esf);
    15ee:	4628      	mov	r0, r5
    15f0:	f7ff ffa0 	bl	1534 <usage_fault>
    15f4:	e00c      	b.n	1610 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    15f6:	4622      	mov	r2, r4
    15f8:	2101      	movs	r1, #1
    15fa:	4628      	mov	r0, r5
    15fc:	f7ff ff3a 	bl	1474 <mem_manage_fault>
    1600:	e006      	b.n	1610 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    1602:	4622      	mov	r2, r4
    1604:	2101      	movs	r1, #1
    1606:	4628      	mov	r0, r5
    1608:	f7ff ff6a 	bl	14e0 <bus_fault>
    160c:	e000      	b.n	1610 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    160e:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    1610:	bd38      	pop	{r3, r4, r5, pc}
    1612:	bf00      	nop
    1614:	e000ed00 	.word	0xe000ed00

00001618 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1618:	b570      	push	{r4, r5, r6, lr}
    161a:	b08a      	sub	sp, #40	; 0x28
    161c:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    161e:	4b22      	ldr	r3, [pc, #136]	; (16a8 <z_arm_fault+0x90>)
    1620:	6859      	ldr	r1, [r3, #4]
    1622:	f3c1 0108 	ubfx	r1, r1, #0, #9
    1626:	2300      	movs	r3, #0
    1628:	f383 8811 	msr	BASEPRI, r3
    162c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1630:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1634:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1638:	d115      	bne.n	1666 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    163a:	f002 030c 	and.w	r3, r2, #12
    163e:	2b08      	cmp	r3, #8
    1640:	d014      	beq.n	166c <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1642:	f012 0f08 	tst.w	r2, #8
    1646:	d00b      	beq.n	1660 <z_arm_fault+0x48>
	*nested_exc = false;
    1648:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    164a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    164e:	4620      	mov	r0, r4
    1650:	f003 ff05 	bl	545e <fault_handle>
    1654:	4605      	mov	r5, r0
	if (recoverable) {
    1656:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    165a:	b153      	cbz	r3, 1672 <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    165c:	b00a      	add	sp, #40	; 0x28
    165e:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    1660:	4604      	mov	r4, r0
			*nested_exc = true;
    1662:	2601      	movs	r6, #1
    1664:	e7f1      	b.n	164a <z_arm_fault+0x32>
	*nested_exc = false;
    1666:	2600      	movs	r6, #0
		return NULL;
    1668:	4634      	mov	r4, r6
    166a:	e7ee      	b.n	164a <z_arm_fault+0x32>
	*nested_exc = false;
    166c:	2600      	movs	r6, #0
		return NULL;
    166e:	4634      	mov	r4, r6
    1670:	e7eb      	b.n	164a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1672:	2220      	movs	r2, #32
    1674:	4621      	mov	r1, r4
    1676:	a801      	add	r0, sp, #4
    1678:	f003 ffb7 	bl	55ea <memcpy>
	if (nested_exc) {
    167c:	b14e      	cbz	r6, 1692 <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    167e:	9b08      	ldr	r3, [sp, #32]
    1680:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1684:	b95a      	cbnz	r2, 169e <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1686:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    168a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    168e:	9308      	str	r3, [sp, #32]
    1690:	e005      	b.n	169e <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1692:	9b08      	ldr	r3, [sp, #32]
    1694:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1698:	f023 0301 	bic.w	r3, r3, #1
    169c:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    169e:	a901      	add	r1, sp, #4
    16a0:	4628      	mov	r0, r5
    16a2:	f003 feb1 	bl	5408 <z_arm_fatal_error>
    16a6:	e7d9      	b.n	165c <z_arm_fault+0x44>
    16a8:	e000ed00 	.word	0xe000ed00

000016ac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    16ac:	4b04      	ldr	r3, [pc, #16]	; (16c0 <z_arm_fault_init+0x14>)
    16ae:	695a      	ldr	r2, [r3, #20]
    16b0:	f042 0210 	orr.w	r2, r2, #16
    16b4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    16b6:	695a      	ldr	r2, [r3, #20]
    16b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    16bc:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    16be:	4770      	bx	lr
    16c0:	e000ed00 	.word	0xe000ed00

000016c4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    16c4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    16c8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    16cc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    16ce:	4672      	mov	r2, lr
	bl z_arm_fault
    16d0:	f7ff ffa2 	bl	1618 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    16d4:	bd01      	pop	{r0, pc}
    16d6:	bf00      	nop

000016d8 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    16d8:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    16da:	e007      	b.n	16ec <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    16e0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    16e4:	2120      	movs	r1, #32
    16e6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    16ea:	3201      	adds	r2, #1
    16ec:	2a44      	cmp	r2, #68	; 0x44
    16ee:	dc09      	bgt.n	1704 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    16f0:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    16f2:	2b00      	cmp	r3, #0
    16f4:	daf2      	bge.n	16dc <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    16f6:	f003 030f 	and.w	r3, r3, #15
    16fa:	4903      	ldr	r1, [pc, #12]	; (1708 <z_arm_interrupt_init+0x30>)
    16fc:	4419      	add	r1, r3
    16fe:	2320      	movs	r3, #32
    1700:	760b      	strb	r3, [r1, #24]
    1702:	e7f2      	b.n	16ea <z_arm_interrupt_init+0x12>
	}
}
    1704:	4770      	bx	lr
    1706:	bf00      	nop
    1708:	e000ecfc 	.word	0xe000ecfc

0000170c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    170c:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    170e:	4915      	ldr	r1, [pc, #84]	; (1764 <__start+0x58>)
    strb r0, [r1]
    1710:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1712:	2000      	movs	r0, #0
    msr CONTROL, r0
    1714:	f380 8814 	msr	CONTROL, r0
    isb
    1718:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    171c:	2000      	movs	r0, #0
    msr MSPLIM, r0
    171e:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1722:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1726:	f7ff fb15 	bl	d54 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    172a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    172c:	490e      	ldr	r1, [pc, #56]	; (1768 <__start+0x5c>)
    str r0, [r1]
    172e:	6008      	str	r0, [r1, #0]
    dsb
    1730:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1734:	480d      	ldr	r0, [pc, #52]	; (176c <__start+0x60>)
    msr msp, r0
    1736:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    173a:	f000 f841 	bl	17c0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    173e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1740:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1744:	480a      	ldr	r0, [pc, #40]	; (1770 <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1746:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    174a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    174c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1750:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1754:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1756:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1758:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    175c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1760:	f7ff fdac 	bl	12bc <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
    1764:	20000b67 	.word	0x20000b67
    ldr r1, =_SCS_MPU_CTRL
    1768:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    176c:	200018a8 	.word	0x200018a8
    ldr r0, =z_interrupt_stacks
    1770:	20000b68 	.word	0x20000b68

00001774 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    1774:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1778:	4905      	ldr	r1, [pc, #20]	; (1790 <__NVIC_SystemReset+0x1c>)
    177a:	68ca      	ldr	r2, [r1, #12]
    177c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1780:	4b04      	ldr	r3, [pc, #16]	; (1794 <__NVIC_SystemReset+0x20>)
    1782:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1784:	60cb      	str	r3, [r1, #12]
    1786:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    178a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    178c:	e7fd      	b.n	178a <__NVIC_SystemReset+0x16>
    178e:	bf00      	nop
    1790:	e000ed00 	.word	0xe000ed00
    1794:	05fa0004 	.word	0x05fa0004

00001798 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1798:	4b08      	ldr	r3, [pc, #32]	; (17bc <z_arm_clear_arm_mpu_config+0x24>)
    179a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    179e:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    17a2:	2300      	movs	r3, #0
    17a4:	e006      	b.n	17b4 <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    17a6:	4a05      	ldr	r2, [pc, #20]	; (17bc <z_arm_clear_arm_mpu_config+0x24>)
    17a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
    17ac:	2100      	movs	r1, #0
    17ae:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    17b2:	3301      	adds	r3, #1
    17b4:	4283      	cmp	r3, r0
    17b6:	dbf6      	blt.n	17a6 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    17b8:	4770      	bx	lr
    17ba:	bf00      	nop
    17bc:	e000ed00 	.word	0xe000ed00

000017c0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    17c0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    17c2:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    17c4:	2400      	movs	r4, #0
    17c6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    17ca:	f7ff ffe5 	bl	1798 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    17ce:	4623      	mov	r3, r4
    17d0:	e008      	b.n	17e4 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    17d2:	f103 0120 	add.w	r1, r3, #32
    17d6:	4a0e      	ldr	r2, [pc, #56]	; (1810 <z_arm_init_arch_hw_at_boot+0x50>)
    17d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    17dc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    17e0:	3301      	adds	r3, #1
    17e2:	b2db      	uxtb	r3, r3
    17e4:	2b0f      	cmp	r3, #15
    17e6:	d9f4      	bls.n	17d2 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    17e8:	2300      	movs	r3, #0
    17ea:	e008      	b.n	17fe <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    17ec:	f103 0160 	add.w	r1, r3, #96	; 0x60
    17f0:	4a07      	ldr	r2, [pc, #28]	; (1810 <z_arm_init_arch_hw_at_boot+0x50>)
    17f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    17f6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    17fa:	3301      	adds	r3, #1
    17fc:	b2db      	uxtb	r3, r3
    17fe:	2b0f      	cmp	r3, #15
    1800:	d9f4      	bls.n	17ec <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1802:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1804:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1808:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    180c:	bd10      	pop	{r4, pc}
    180e:	bf00      	nop
    1810:	e000e100 	.word	0xe000e100

00001814 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1814:	b508      	push	{r3, lr}
	if (_current == thread) {
    1816:	4b0a      	ldr	r3, [pc, #40]	; (1840 <z_impl_k_thread_abort+0x2c>)
    1818:	689b      	ldr	r3, [r3, #8]
    181a:	4283      	cmp	r3, r0
    181c:	d002      	beq.n	1824 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    181e:	f002 fe29 	bl	4474 <z_thread_abort>
}
    1822:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1824:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1828:	2b00      	cmp	r3, #0
    182a:	d0f8      	beq.n	181e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    182c:	4b05      	ldr	r3, [pc, #20]	; (1844 <z_impl_k_thread_abort+0x30>)
    182e:	685a      	ldr	r2, [r3, #4]
    1830:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1834:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    183c:	625a      	str	r2, [r3, #36]	; 0x24
    183e:	e7ee      	b.n	181e <z_impl_k_thread_abort+0xa>
    1840:	20000950 	.word	0x20000950
    1844:	e000ed00 	.word	0xe000ed00

00001848 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1848:	b510      	push	{r4, lr}
    184a:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    184c:	4c0a      	ldr	r4, [pc, #40]	; (1878 <z_arm_configure_static_mpu_regions+0x30>)
    184e:	4623      	mov	r3, r4
    1850:	4a0a      	ldr	r2, [pc, #40]	; (187c <z_arm_configure_static_mpu_regions+0x34>)
    1852:	2101      	movs	r1, #1
    1854:	480a      	ldr	r0, [pc, #40]	; (1880 <z_arm_configure_static_mpu_regions+0x38>)
    1856:	f003 fe93 	bl	5580 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    185a:	2300      	movs	r3, #0
    185c:	9301      	str	r3, [sp, #4]
    185e:	9302      	str	r3, [sp, #8]
    1860:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1862:	4b08      	ldr	r3, [pc, #32]	; (1884 <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1864:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1866:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1868:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    186a:	2101      	movs	r1, #1
    186c:	a801      	add	r0, sp, #4
    186e:	f003 fe8b 	bl	5588 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1872:	b004      	add	sp, #16
    1874:	bd10      	pop	{r4, pc}
    1876:	bf00      	nop
    1878:	20070000 	.word	0x20070000
    187c:	20000000 	.word	0x20000000
    1880:	00006d00 	.word	0x00006d00
    1884:	20000190 	.word	0x20000190

00001888 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
    1888:	4b02      	ldr	r3, [pc, #8]	; (1894 <mpu_init+0xc>)
    188a:	4a03      	ldr	r2, [pc, #12]	; (1898 <mpu_init+0x10>)
    188c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
    1890:	4770      	bx	lr
    1892:	bf00      	nop
    1894:	e000ed00 	.word	0xe000ed00
    1898:	0044ffaa 	.word	0x0044ffaa

0000189c <mpu_set_region>:
	MPU->RNR = rnr;
    189c:	4b03      	ldr	r3, [pc, #12]	; (18ac <mpu_set_region+0x10>)
    189e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
    18a2:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
    18a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
    18aa:	4770      	bx	lr
    18ac:	e000ed00 	.word	0xe000ed00

000018b0 <mpu_region_get_conf>:
	MPU->RNR = rnr;
    18b0:	4b0e      	ldr	r3, [pc, #56]	; (18ec <mpu_region_get_conf+0x3c>)
    18b2:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    18b6:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    18ba:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
    18be:	7a0a      	ldrb	r2, [r1, #8]
    18c0:	f360 0204 	bfi	r2, r0, #0, #5
    18c4:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
    18c6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    18ca:	f3c2 0242 	ubfx	r2, r2, #1, #3
    18ce:	7a08      	ldrb	r0, [r1, #8]
    18d0:	f362 1047 	bfi	r0, r2, #5, #3
    18d4:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
    18d6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    18da:	f022 021f 	bic.w	r2, r2, #31
    18de:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
    18e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    18e4:	f023 031f 	bic.w	r3, r3, #31
    18e8:	60cb      	str	r3, [r1, #12]
}
    18ea:	4770      	bx	lr
    18ec:	e000ed00 	.word	0xe000ed00

000018f0 <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    18f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18f4:	b087      	sub	sp, #28
    18f6:	4681      	mov	r9, r0
    18f8:	9100      	str	r1, [sp, #0]
    18fa:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    18fc:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    18fe:	2700      	movs	r7, #0
    1900:	e034      	b.n	196c <mpu_configure_regions_and_partition+0x7c>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    1902:	45d8      	cmp	r8, fp
    1904:	d165      	bne.n	19d2 <mpu_configure_regions_and_partition+0xe2>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    1906:	4629      	mov	r1, r5
    1908:	b2c0      	uxtb	r0, r0
    190a:	f003 fe09 	bl	5520 <mpu_configure_region>
    190e:	e02c      	b.n	196a <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = rnr;
    1910:	4a58      	ldr	r2, [pc, #352]	; (1a74 <mpu_configure_regions_and_partition+0x184>)
    1912:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
    1916:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    191a:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    191e:	f021 011f 	bic.w	r1, r1, #31
    1922:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
    1924:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1928:	4629      	mov	r1, r5
    192a:	b2e0      	uxtb	r0, r4
    192c:	f003 fdf8 	bl	5520 <mpu_configure_region>
    1930:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1932:	f110 0f16 	cmn.w	r0, #22
    1936:	f000 8096 	beq.w	1a66 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    193a:	3401      	adds	r4, #1
    193c:	e015      	b.n	196a <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    193e:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    1940:	494c      	ldr	r1, [pc, #304]	; (1a74 <mpu_configure_regions_and_partition+0x184>)
    1942:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    1946:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    194a:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    194e:	f023 031f 	bic.w	r3, r3, #31
    1952:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    1954:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1958:	4629      	mov	r1, r5
    195a:	b2e0      	uxtb	r0, r4
    195c:	f003 fde0 	bl	5520 <mpu_configure_region>
    1960:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1962:	f110 0f16 	cmn.w	r0, #22
    1966:	d07e      	beq.n	1a66 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1968:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    196a:	3701      	adds	r7, #1
    196c:	9b00      	ldr	r3, [sp, #0]
    196e:	429f      	cmp	r7, r3
    1970:	da79      	bge.n	1a66 <mpu_configure_regions_and_partition+0x176>
		if (regions[i].size == 0U) {
    1972:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    1976:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    197a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    197e:	686e      	ldr	r6, [r5, #4]
    1980:	2e00      	cmp	r6, #0
    1982:	d0f2      	beq.n	196a <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
    1984:	9b01      	ldr	r3, [sp, #4]
    1986:	b123      	cbz	r3, 1992 <mpu_configure_regions_and_partition+0xa2>
			(!mpu_partition_is_valid(&regions[i]))) {
    1988:	4628      	mov	r0, r5
    198a:	f003 fdac 	bl	54e6 <mpu_partition_is_valid>
		if (do_sanity_check &&
    198e:	2800      	cmp	r0, #0
    1990:	d065      	beq.n	1a5e <mpu_configure_regions_and_partition+0x16e>
			get_region_index(regions[i].start, regions[i].size);
    1992:	4631      	mov	r1, r6
    1994:	f859 000a 	ldr.w	r0, [r9, sl]
    1998:	f003 fde1 	bl	555e <get_region_index>
    199c:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
    199e:	f110 0f16 	cmn.w	r0, #22
    19a2:	d05f      	beq.n	1a64 <mpu_configure_regions_and_partition+0x174>
    19a4:	42a0      	cmp	r0, r4
    19a6:	da62      	bge.n	1a6e <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
    19a8:	4b32      	ldr	r3, [pc, #200]	; (1a74 <mpu_configure_regions_and_partition+0x184>)
    19aa:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    19ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    19b2:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    19b6:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
    19ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    19be:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    19c2:	f859 300a 	ldr.w	r3, [r9, sl]
    19c6:	6869      	ldr	r1, [r5, #4]
    19c8:	4419      	add	r1, r3
    19ca:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    19ce:	429a      	cmp	r2, r3
    19d0:	d097      	beq.n	1902 <mpu_configure_regions_and_partition+0x12>
		} else if (regions[i].start == u_reg_base) {
    19d2:	429a      	cmp	r2, r3
    19d4:	d09c      	beq.n	1910 <mpu_configure_regions_and_partition+0x20>
		} else if (reg_last == u_reg_last) {
    19d6:	45d8      	cmp	r8, fp
    19d8:	d0b1      	beq.n	193e <mpu_configure_regions_and_partition+0x4e>
			/* The new regions lies strictly inside the
			 * underlying region, which needs to split
			 * into two regions.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    19da:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    19dc:	4925      	ldr	r1, [pc, #148]	; (1a74 <mpu_configure_regions_and_partition+0x184>)
    19de:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    19e2:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    19e6:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    19ea:	f023 031f 	bic.w	r3, r3, #31
    19ee:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    19f0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    19f4:	4629      	mov	r1, r5
    19f6:	b2e0      	uxtb	r0, r4
    19f8:	f003 fd92 	bl	5520 <mpu_configure_region>
    19fc:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    19fe:	f110 0f16 	cmn.w	r0, #22
    1a02:	d030      	beq.n	1a66 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}
			reg_index++;
    1a04:	3001      	adds	r0, #1
	MPU->RNR = rnr;
    1a06:	4b1b      	ldr	r3, [pc, #108]	; (1a74 <mpu_configure_regions_and_partition+0x184>)
    1a08:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    1a0c:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1a10:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1a14:	f361 0204 	bfi	r2, r1, #0, #5
    1a18:	f88d 2010 	strb.w	r2, [sp, #16]
	return MPU->RLAR;
    1a1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1a20:	f3c3 0342 	ubfx	r3, r3, #1, #3
    1a24:	b2d2      	uxtb	r2, r2
    1a26:	f363 1247 	bfi	r2, r3, #5, #3
    1a2a:	f88d 2010 	strb.w	r2, [sp, #16]
			 */
			struct arm_mpu_region fill_region;

			mpu_region_get_access_attr(u_reg_index,
				&fill_region.attr);
			fill_region.base = regions[i].start +
    1a2e:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    1a32:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    1a34:	4413      	add	r3, r2
    1a36:	9302      	str	r3, [sp, #8]
			fill_region.attr.r_limit =
			REGION_LIMIT_ADDR((regions[i].start +
    1a38:	f023 031f 	bic.w	r3, r3, #31
    1a3c:	eba8 080b 	sub.w	r8, r8, fp
    1a40:	4443      	add	r3, r8
    1a42:	3b01      	subs	r3, #1
    1a44:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    1a48:	9305      	str	r3, [sp, #20]
				regions[i].size), (u_reg_last - reg_last));

			reg_index =
				region_allocate_and_init(reg_index,
    1a4a:	a902      	add	r1, sp, #8
    1a4c:	b2c0      	uxtb	r0, r0
    1a4e:	f003 fd5c 	bl	550a <region_allocate_and_init>
    1a52:	4604      	mov	r4, r0
					(const struct arm_mpu_region *)
						&fill_region);

			if (reg_index == -EINVAL) {
    1a54:	f110 0f16 	cmn.w	r0, #22
    1a58:	d005      	beq.n	1a66 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1a5a:	3401      	adds	r4, #1
    1a5c:	e785      	b.n	196a <mpu_configure_regions_and_partition+0x7a>
			return -EINVAL;
    1a5e:	f06f 0415 	mvn.w	r4, #21
    1a62:	e000      	b.n	1a66 <mpu_configure_regions_and_partition+0x176>
			return -EINVAL;
    1a64:	4604      	mov	r4, r0
		}
	}

	return reg_index;
}
    1a66:	4620      	mov	r0, r4
    1a68:	b007      	add	sp, #28
    1a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    1a6e:	f06f 0415 	mvn.w	r4, #21
    1a72:	e7f8      	b.n	1a66 <mpu_configure_regions_and_partition+0x176>
    1a74:	e000ed00 	.word	0xe000ed00

00001a78 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1a78:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1a7a:	4c03      	ldr	r4, [pc, #12]	; (1a88 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1a7c:	2301      	movs	r3, #1
    1a7e:	7822      	ldrb	r2, [r4, #0]
    1a80:	f7ff ff36 	bl	18f0 <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1a84:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1a86:	bd10      	pop	{r4, pc}
    1a88:	20000b64 	.word	0x20000b64

00001a8c <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    1a8c:	b570      	push	{r4, r5, r6, lr}
    1a8e:	4605      	mov	r5, r0
    1a90:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1a92:	2400      	movs	r4, #0
    1a94:	e000      	b.n	1a98 <mpu_mark_areas_for_dynamic_regions+0xc>
    1a96:	3401      	adds	r4, #1
    1a98:	42a6      	cmp	r6, r4
    1a9a:	dd1e      	ble.n	1ada <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1a9c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1aa0:	009a      	lsls	r2, r3, #2
    1aa2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1aa6:	6859      	ldr	r1, [r3, #4]
    1aa8:	2900      	cmp	r1, #0
    1aaa:	d0f4      	beq.n	1a96 <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1aac:	58a8      	ldr	r0, [r5, r2]
    1aae:	f003 fd56 	bl	555e <get_region_index>
		dyn_reg_info[i].index =
    1ab2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1ab6:	4a0b      	ldr	r2, [pc, #44]	; (1ae4 <mpu_mark_areas_for_dynamic_regions+0x58>)
    1ab8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1abc:	f110 0f16 	cmn.w	r0, #22
    1ac0:	d00c      	beq.n	1adc <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1ac2:	4b09      	ldr	r3, [pc, #36]	; (1ae8 <mpu_mark_areas_for_dynamic_regions+0x5c>)
    1ac4:	781b      	ldrb	r3, [r3, #0]
    1ac6:	4298      	cmp	r0, r3
    1ac8:	da09      	bge.n	1ade <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    1aca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1ace:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    1ad2:	3104      	adds	r1, #4
    1ad4:	f7ff feec 	bl	18b0 <mpu_region_get_conf>
    1ad8:	e7dd      	b.n	1a96 <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    1ada:	2000      	movs	r0, #0
}
    1adc:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    1ade:	f06f 0015 	mvn.w	r0, #21
    1ae2:	e7fb      	b.n	1adc <mpu_mark_areas_for_dynamic_regions+0x50>
    1ae4:	20000858 	.word	0x20000858
    1ae8:	20000b64 	.word	0x20000b64

00001aec <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1aec:	4b04      	ldr	r3, [pc, #16]	; (1b00 <arm_core_mpu_enable+0x14>)
    1aee:	2205      	movs	r2, #5
    1af0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1af8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1afc:	4770      	bx	lr
    1afe:	bf00      	nop
    1b00:	e000ed00 	.word	0xe000ed00

00001b04 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1b04:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1b08:	4b02      	ldr	r3, [pc, #8]	; (1b14 <arm_core_mpu_disable+0x10>)
    1b0a:	2200      	movs	r2, #0
    1b0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1b10:	4770      	bx	lr
    1b12:	bf00      	nop
    1b14:	e000ed00 	.word	0xe000ed00

00001b18 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1b18:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1b1a:	4b0e      	ldr	r3, [pc, #56]	; (1b54 <z_arm_mpu_init+0x3c>)
    1b1c:	681d      	ldr	r5, [r3, #0]
    1b1e:	2d08      	cmp	r5, #8
    1b20:	d815      	bhi.n	1b4e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1b22:	f7ff ffef 	bl	1b04 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    1b26:	f7ff feaf 	bl	1888 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b2a:	2400      	movs	r4, #0
    1b2c:	e007      	b.n	1b3e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1b2e:	4b09      	ldr	r3, [pc, #36]	; (1b54 <z_arm_mpu_init+0x3c>)
    1b30:	6859      	ldr	r1, [r3, #4]
    1b32:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1b36:	4620      	mov	r0, r4
    1b38:	f003 fcc1 	bl	54be <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b3c:	3401      	adds	r4, #1
    1b3e:	42a5      	cmp	r5, r4
    1b40:	d8f5      	bhi.n	1b2e <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1b42:	4b05      	ldr	r3, [pc, #20]	; (1b58 <z_arm_mpu_init+0x40>)
    1b44:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1b46:	f7ff ffd1 	bl	1aec <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1b4a:	2000      	movs	r0, #0
}
    1b4c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1b4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b52:	e7fb      	b.n	1b4c <z_arm_mpu_init+0x34>
    1b54:	00006d0c 	.word	0x00006d0c
    1b58:	20000b64 	.word	0x20000b64

00001b5c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1b5c:	4b01      	ldr	r3, [pc, #4]	; (1b64 <__stdout_hook_install+0x8>)
    1b5e:	6018      	str	r0, [r3, #0]
}
    1b60:	4770      	bx	lr
    1b62:	bf00      	nop
    1b64:	20000028 	.word	0x20000028

00001b68 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1b68:	4800      	ldr	r0, [pc, #0]	; (1b6c <get_hf_flags+0x4>)
    1b6a:	4770      	bx	lr
    1b6c:	200008f8 	.word	0x200008f8

00001b70 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1b70:	4b03      	ldr	r3, [pc, #12]	; (1b80 <get_subsys+0x10>)
    1b72:	1ac0      	subs	r0, r0, r3
    1b74:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1b76:	4b03      	ldr	r3, [pc, #12]	; (1b84 <get_subsys+0x14>)
    1b78:	fb03 f000 	mul.w	r0, r3, r0
    1b7c:	4770      	bx	lr
    1b7e:	bf00      	nop
    1b80:	20000880 	.word	0x20000880
    1b84:	b6db6db7 	.word	0xb6db6db7

00001b88 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1b88:	b538      	push	{r3, r4, r5, lr}
    1b8a:	4605      	mov	r5, r0
    1b8c:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1b8e:	f7ff ffef 	bl	1b70 <get_subsys>
    1b92:	4601      	mov	r1, r0
    1b94:	2240      	movs	r2, #64	; 0x40
    1b96:	4803      	ldr	r0, [pc, #12]	; (1ba4 <onoff_stop+0x1c>)
    1b98:	f003 fe26 	bl	57e8 <stop>
    1b9c:	4601      	mov	r1, r0
	notify(mgr, res);
    1b9e:	4628      	mov	r0, r5
    1ba0:	47a0      	blx	r4
}
    1ba2:	bd38      	pop	{r3, r4, r5, pc}
    1ba4:	00006938 	.word	0x00006938

00001ba8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1ba8:	b530      	push	{r4, r5, lr}
    1baa:	b083      	sub	sp, #12
    1bac:	4605      	mov	r5, r0
    1bae:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1bb0:	f7ff ffde 	bl	1b70 <get_subsys>
    1bb4:	4601      	mov	r1, r0
    1bb6:	2340      	movs	r3, #64	; 0x40
    1bb8:	9300      	str	r3, [sp, #0]
    1bba:	4623      	mov	r3, r4
    1bbc:	4a05      	ldr	r2, [pc, #20]	; (1bd4 <onoff_start+0x2c>)
    1bbe:	4806      	ldr	r0, [pc, #24]	; (1bd8 <onoff_start+0x30>)
    1bc0:	f003 fe2c 	bl	581c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1bc4:	1e01      	subs	r1, r0, #0
    1bc6:	db01      	blt.n	1bcc <onoff_start+0x24>
		notify(mgr, err);
	}
}
    1bc8:	b003      	add	sp, #12
    1bca:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    1bcc:	4628      	mov	r0, r5
    1bce:	47a0      	blx	r4
}
    1bd0:	e7fa      	b.n	1bc8 <onoff_start+0x20>
    1bd2:	bf00      	nop
    1bd4:	00005865 	.word	0x00005865
    1bd8:	00006938 	.word	0x00006938

00001bdc <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    1bdc:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    1bde:	2805      	cmp	r0, #5
    1be0:	d815      	bhi.n	1c0e <clock_event_handler+0x32>
    1be2:	e8df f000 	tbb	[pc, r0]
    1be6:	1a03      	.short	0x1a03
    1be8:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1bec:	2100      	movs	r1, #0
    1bee:	480d      	ldr	r0, [pc, #52]	; (1c24 <clock_event_handler+0x48>)
    1bf0:	f003 fd85 	bl	56fe <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1bf4:	6883      	ldr	r3, [r0, #8]
    1bf6:	f013 0f07 	tst.w	r3, #7
    1bfa:	d108      	bne.n	1c0e <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1bfc:	2100      	movs	r1, #0
    1bfe:	4809      	ldr	r0, [pc, #36]	; (1c24 <clock_event_handler+0x48>)
    1c00:	f003 fde0 	bl	57c4 <clkstarted_handle>
    1c04:	e003      	b.n	1c0e <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1c06:	2102      	movs	r1, #2
    1c08:	4806      	ldr	r0, [pc, #24]	; (1c24 <clock_event_handler+0x48>)
    1c0a:	f003 fddb 	bl	57c4 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    1c0e:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1c10:	2103      	movs	r1, #3
    1c12:	4804      	ldr	r0, [pc, #16]	; (1c24 <clock_event_handler+0x48>)
    1c14:	f003 fdd6 	bl	57c4 <clkstarted_handle>
		break;
    1c18:	e7f9      	b.n	1c0e <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1c1a:	2101      	movs	r1, #1
    1c1c:	4801      	ldr	r0, [pc, #4]	; (1c24 <clock_event_handler+0x48>)
    1c1e:	f003 fdd1 	bl	57c4 <clkstarted_handle>
}
    1c22:	e7f4      	b.n	1c0e <clock_event_handler+0x32>
    1c24:	00006938 	.word	0x00006938

00001c28 <generic_hfclk_start>:
{
    1c28:	b510      	push	{r4, lr}
    1c2a:	b082      	sub	sp, #8
	__asm__ volatile(
    1c2c:	f04f 0320 	mov.w	r3, #32
    1c30:	f3ef 8411 	mrs	r4, BASEPRI
    1c34:	f383 8812 	msr	BASEPRI_MAX, r3
    1c38:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1c3c:	4a14      	ldr	r2, [pc, #80]	; (1c90 <generic_hfclk_start+0x68>)
    1c3e:	6813      	ldr	r3, [r2, #0]
    1c40:	f043 0102 	orr.w	r1, r3, #2
    1c44:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1c46:	f013 0f01 	tst.w	r3, #1
    1c4a:	d109      	bne.n	1c60 <generic_hfclk_start+0x38>
	bool already_started = false;
    1c4c:	2300      	movs	r3, #0
	__asm__ volatile(
    1c4e:	f384 8811 	msr	BASEPRI, r4
    1c52:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1c56:	b9b3      	cbnz	r3, 1c86 <generic_hfclk_start+0x5e>
	hfclk_start();
    1c58:	f003 fe0c 	bl	5874 <hfclk_start>
}
    1c5c:	b002      	add	sp, #8
    1c5e:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    1c60:	f10d 0207 	add.w	r2, sp, #7
    1c64:	2101      	movs	r1, #1
    1c66:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    1c6a:	f003 fd0e 	bl	568a <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1c6e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1c72:	2b01      	cmp	r3, #1
    1c74:	d001      	beq.n	1c7a <generic_hfclk_start+0x52>
	bool already_started = false;
    1c76:	2300      	movs	r3, #0
    1c78:	e7e9      	b.n	1c4e <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    1c7a:	f7ff ff75 	bl	1b68 <get_hf_flags>
    1c7e:	f003 fd8e 	bl	579e <set_on_state>
			already_started = true;
    1c82:	2301      	movs	r3, #1
    1c84:	e7e3      	b.n	1c4e <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    1c86:	2100      	movs	r1, #0
    1c88:	4802      	ldr	r0, [pc, #8]	; (1c94 <generic_hfclk_start+0x6c>)
    1c8a:	f003 fd9b 	bl	57c4 <clkstarted_handle>
		return;
    1c8e:	e7e5      	b.n	1c5c <generic_hfclk_start+0x34>
    1c90:	20000920 	.word	0x20000920
    1c94:	00006938 	.word	0x00006938

00001c98 <generic_hfclk_stop>:
{
    1c98:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c9a:	4b08      	ldr	r3, [pc, #32]	; (1cbc <generic_hfclk_stop+0x24>)
    1c9c:	e8d3 2fef 	ldaex	r2, [r3]
    1ca0:	f022 0102 	bic.w	r1, r2, #2
    1ca4:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1ca8:	2800      	cmp	r0, #0
    1caa:	d1f7      	bne.n	1c9c <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1cac:	f012 0f01 	tst.w	r2, #1
    1cb0:	d000      	beq.n	1cb4 <generic_hfclk_stop+0x1c>
}
    1cb2:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1cb4:	f003 fdf2 	bl	589c <hfclk_stop>
    1cb8:	e7fb      	b.n	1cb2 <generic_hfclk_stop+0x1a>
    1cba:	bf00      	nop
    1cbc:	20000920 	.word	0x20000920

00001cc0 <lfclk_spinwait>:
{
    1cc0:	b570      	push	{r4, r5, r6, lr}
    1cc2:	b082      	sub	sp, #8
    1cc4:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1cc6:	2801      	cmp	r0, #1
    1cc8:	d107      	bne.n	1cda <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1cca:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1cce:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1cd2:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1cd6:	2b02      	cmp	r3, #2
    1cd8:	d037      	beq.n	1d4a <lfclk_spinwait+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1cda:	f004 fc45 	bl	6568 <k_is_in_isr>
    1cde:	4604      	mov	r4, r0
    1ce0:	b910      	cbnz	r0, 1ce8 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    1ce2:	4b2b      	ldr	r3, [pc, #172]	; (1d90 <lfclk_spinwait+0xd0>)
    1ce4:	781b      	ldrb	r3, [r3, #0]
    1ce6:	b97b      	cbnz	r3, 1d08 <lfclk_spinwait+0x48>
	__asm__ volatile(
    1ce8:	f04f 0320 	mov.w	r3, #32
    1cec:	f3ef 8611 	mrs	r6, BASEPRI
    1cf0:	f383 8812 	msr	BASEPRI_MAX, r3
    1cf4:	f3bf 8f6f 	isb	sy
    1cf8:	2401      	movs	r4, #1
	if (!isr_mode) {
    1cfa:	b994      	cbnz	r4, 1d22 <lfclk_spinwait+0x62>
    p_reg->INTENCLR = mask;
    1cfc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d00:	2202      	movs	r2, #2
    1d02:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    1d06:	e00c      	b.n	1d22 <lfclk_spinwait+0x62>
	int key = isr_mode ? irq_lock() : 0;
    1d08:	2600      	movs	r6, #0
    1d0a:	e7f6      	b.n	1cfa <lfclk_spinwait+0x3a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1d0c:	b1fc      	cbz	r4, 1d4e <lfclk_spinwait+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1d0e:	4630      	mov	r0, r6
    1d10:	f7ff fa96 	bl	1240 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1d14:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d18:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1d1c:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1d1e:	2b01      	cmp	r3, #1
    1d20:	d019      	beq.n	1d56 <lfclk_spinwait+0x96>
    1d22:	f10d 0207 	add.w	r2, sp, #7
    1d26:	2100      	movs	r1, #0
    1d28:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    1d2c:	f003 fcad 	bl	568a <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1d30:	2800      	cmp	r0, #0
    1d32:	d0eb      	beq.n	1d0c <lfclk_spinwait+0x4c>
		 && ((type == target_type)
    1d34:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1d38:	2b02      	cmp	r3, #2
    1d3a:	d001      	beq.n	1d40 <lfclk_spinwait+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1d3c:	2d01      	cmp	r5, #1
    1d3e:	d1e5      	bne.n	1d0c <lfclk_spinwait+0x4c>
	if (isr_mode) {
    1d40:	b304      	cbz	r4, 1d84 <lfclk_spinwait+0xc4>
	__asm__ volatile(
    1d42:	f386 8811 	msr	BASEPRI, r6
    1d46:	f3bf 8f6f 	isb	sy
}
    1d4a:	b002      	add	sp, #8
    1d4c:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
    1d4e:	2001      	movs	r0, #1
    1d50:	f003 fdb8 	bl	58c4 <k_msleep>
    1d54:	e7de      	b.n	1d14 <lfclk_spinwait+0x54>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1d56:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d5a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1d5e:	2b00      	cmp	r3, #0
    1d60:	d0df      	beq.n	1d22 <lfclk_spinwait+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1d62:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d66:	2200      	movs	r2, #0
    1d68:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1d6c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1d70:	2202      	movs	r2, #2
    1d72:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1d76:	4a07      	ldr	r2, [pc, #28]	; (1d94 <lfclk_spinwait+0xd4>)
    1d78:	2120      	movs	r1, #32
    1d7a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1d7e:	2201      	movs	r2, #1
    1d80:	609a      	str	r2, [r3, #8]
}
    1d82:	e7ce      	b.n	1d22 <lfclk_spinwait+0x62>
    p_reg->INTENSET = mask;
    1d84:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d88:	2202      	movs	r2, #2
    1d8a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1d8e:	e7dc      	b.n	1d4a <lfclk_spinwait+0x8a>
    1d90:	20000b67 	.word	0x20000b67
    1d94:	e000e100 	.word	0xe000e100

00001d98 <api_blocking_start>:
{
    1d98:	b500      	push	{lr}
    1d9a:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1d9c:	f8cd d000 	str.w	sp, [sp]
    1da0:	f8cd d004 	str.w	sp, [sp, #4]
    1da4:	2300      	movs	r3, #0
    1da6:	9302      	str	r3, [sp, #8]
    1da8:	2301      	movs	r3, #1
    1daa:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1dac:	466b      	mov	r3, sp
    1dae:	4a07      	ldr	r2, [pc, #28]	; (1dcc <api_blocking_start+0x34>)
    1db0:	f003 fd50 	bl	5854 <api_start>
	if (err < 0) {
    1db4:	2800      	cmp	r0, #0
    1db6:	db05      	blt.n	1dc4 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1db8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1dbc:	2300      	movs	r3, #0
    1dbe:	4668      	mov	r0, sp
    1dc0:	f001 ff7c 	bl	3cbc <z_impl_k_sem_take>
}
    1dc4:	b005      	add	sp, #20
    1dc6:	f85d fb04 	ldr.w	pc, [sp], #4
    1dca:	bf00      	nop
    1dcc:	000058f1 	.word	0x000058f1

00001dd0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1dd0:	b570      	push	{r4, r5, r6, lr}
    1dd2:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1dd4:	2200      	movs	r2, #0
    1dd6:	2101      	movs	r1, #1
    1dd8:	2005      	movs	r0, #5
    1dda:	f003 fb24 	bl	5426 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1dde:	4811      	ldr	r0, [pc, #68]	; (1e24 <clk_init+0x54>)
    1de0:	f000 ff32 	bl	2c48 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1de4:	4b10      	ldr	r3, [pc, #64]	; (1e28 <clk_init+0x58>)
    1de6:	4298      	cmp	r0, r3
    1de8:	d119      	bne.n	1e1e <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1dea:	f004 fa2b 	bl	6244 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    1dee:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1df0:	2c03      	cmp	r4, #3
    1df2:	d812      	bhi.n	1e1a <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1df4:	4621      	mov	r1, r4
    1df6:	4630      	mov	r0, r6
    1df8:	f003 fc81 	bl	56fe <get_sub_data>
    1dfc:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1dfe:	4621      	mov	r1, r4
    1e00:	4630      	mov	r0, r6
    1e02:	f003 fc87 	bl	5714 <get_onoff_manager>
    1e06:	4909      	ldr	r1, [pc, #36]	; (1e2c <clk_init+0x5c>)
    1e08:	f002 fff1 	bl	4dee <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1e0c:	2800      	cmp	r0, #0
    1e0e:	db05      	blt.n	1e1c <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1e10:	2301      	movs	r3, #1
    1e12:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1e14:	441c      	add	r4, r3
    1e16:	b2e4      	uxtb	r4, r4
    1e18:	e7ea      	b.n	1df0 <clk_init+0x20>
	}

	return 0;
    1e1a:	2000      	movs	r0, #0
}
    1e1c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1e1e:	f06f 0004 	mvn.w	r0, #4
    1e22:	e7fb      	b.n	1e1c <clk_init+0x4c>
    1e24:	00001bdd 	.word	0x00001bdd
    1e28:	0bad0000 	.word	0x0bad0000
    1e2c:	00006d44 	.word	0x00006d44

00001e30 <z_nrf_clock_control_lf_on>:
{
    1e30:	b510      	push	{r4, lr}
    1e32:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1e34:	4b0e      	ldr	r3, [pc, #56]	; (1e70 <z_nrf_clock_control_lf_on+0x40>)
    1e36:	2101      	movs	r1, #1
    1e38:	e8d3 2fef 	ldaex	r2, [r3]
    1e3c:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1e40:	2800      	cmp	r0, #0
    1e42:	d1f9      	bne.n	1e38 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    1e44:	b11a      	cbz	r2, 1e4e <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    1e46:	1e63      	subs	r3, r4, #1
    1e48:	2b01      	cmp	r3, #1
    1e4a:	d90d      	bls.n	1e68 <z_nrf_clock_control_lf_on+0x38>
}
    1e4c:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    1e4e:	4809      	ldr	r0, [pc, #36]	; (1e74 <z_nrf_clock_control_lf_on+0x44>)
    1e50:	f003 fc60 	bl	5714 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1e54:	4908      	ldr	r1, [pc, #32]	; (1e78 <z_nrf_clock_control_lf_on+0x48>)
    1e56:	2300      	movs	r3, #0
    1e58:	604b      	str	r3, [r1, #4]
    1e5a:	608b      	str	r3, [r1, #8]
    1e5c:	60cb      	str	r3, [r1, #12]
    1e5e:	2301      	movs	r3, #1
    1e60:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    1e62:	f002 ffe1 	bl	4e28 <onoff_request>
    1e66:	e7ee      	b.n	1e46 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    1e68:	4620      	mov	r0, r4
    1e6a:	f7ff ff29 	bl	1cc0 <lfclk_spinwait>
		break;
    1e6e:	e7ed      	b.n	1e4c <z_nrf_clock_control_lf_on+0x1c>
    1e70:	2000087c 	.word	0x2000087c
    1e74:	00006938 	.word	0x00006938
    1e78:	2000086c 	.word	0x2000086c

00001e7c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1e7c:	b510      	push	{r4, lr}
    1e7e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1e80:	280a      	cmp	r0, #10
    1e82:	d006      	beq.n	1e92 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1e84:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    1e86:	4806      	ldr	r0, [pc, #24]	; (1ea0 <console_out+0x24>)
    1e88:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1e8a:	685b      	ldr	r3, [r3, #4]
    1e8c:	4798      	blx	r3

	return c;
}
    1e8e:	4620      	mov	r0, r4
    1e90:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    1e92:	4803      	ldr	r0, [pc, #12]	; (1ea0 <console_out+0x24>)
    1e94:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1e96:	685b      	ldr	r3, [r3, #4]
    1e98:	210d      	movs	r1, #13
    1e9a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    1e9c:	e7f2      	b.n	1e84 <console_out+0x8>
    1e9e:	bf00      	nop
    1ea0:	00006980 	.word	0x00006980

00001ea4 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    1ea4:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    1ea6:	4c04      	ldr	r4, [pc, #16]	; (1eb8 <uart_console_hook_install+0x14>)
    1ea8:	4620      	mov	r0, r4
    1eaa:	f7ff fe57 	bl	1b5c <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    1eae:	4620      	mov	r0, r4
    1eb0:	f7fe faf0 	bl	494 <__printk_hook_install>
#endif
}
    1eb4:	bd10      	pop	{r4, pc}
    1eb6:	bf00      	nop
    1eb8:	00001e7d 	.word	0x00001e7d

00001ebc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1ebc:	b508      	push	{r3, lr}
    1ebe:	4805      	ldr	r0, [pc, #20]	; (1ed4 <uart_console_init+0x18>)
    1ec0:	f004 fac0 	bl	6444 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    1ec4:	b118      	cbz	r0, 1ece <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    1ec6:	f7ff ffed 	bl	1ea4 <uart_console_hook_install>

	return 0;
    1eca:	2000      	movs	r0, #0
}
    1ecc:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1ece:	f06f 0012 	mvn.w	r0, #18
    1ed2:	e7fb      	b.n	1ecc <uart_console_init+0x10>
    1ed4:	00006980 	.word	0x00006980

00001ed8 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1ed8:	b128      	cbz	r0, 1ee6 <get_dev+0xe>
    1eda:	2801      	cmp	r0, #1
    1edc:	d101      	bne.n	1ee2 <get_dev+0xa>
    1ede:	4803      	ldr	r0, [pc, #12]	; (1eec <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    1ee0:	4770      	bx	lr
	const struct device *dev = NULL;
    1ee2:	2000      	movs	r0, #0
    1ee4:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1ee6:	4802      	ldr	r0, [pc, #8]	; (1ef0 <get_dev+0x18>)
    1ee8:	4770      	bx	lr
    1eea:	bf00      	nop
    1eec:	00006950 	.word	0x00006950
    1ef0:	00006968 	.word	0x00006968

00001ef4 <gpio_nrfx_pin_interrupt_configure>:
{
    1ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ef6:	b085      	sub	sp, #20
    1ef8:	460e      	mov	r6, r1
    1efa:	4619      	mov	r1, r3
	return port->config;
    1efc:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1efe:	7b1b      	ldrb	r3, [r3, #12]
    1f00:	f006 051f 	and.w	r5, r6, #31
    1f04:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1f08:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    1f0c:	d022      	beq.n	1f54 <gpio_nrfx_pin_interrupt_configure+0x60>
    1f0e:	4607      	mov	r7, r0
    1f10:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1f12:	2300      	movs	r3, #0
    1f14:	9301      	str	r3, [sp, #4]
    1f16:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    1f18:	4610      	mov	r0, r2
    1f1a:	f003 fdc3 	bl	5aa4 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1f1e:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    1f22:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1f24:	6899      	ldr	r1, [r3, #8]
    1f26:	40f1      	lsrs	r1, r6
    1f28:	f011 0f01 	tst.w	r1, #1
    1f2c:	d102      	bne.n	1f34 <gpio_nrfx_pin_interrupt_configure+0x40>
    1f2e:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    1f32:	d014      	beq.n	1f5e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1f34:	2300      	movs	r3, #0
    1f36:	aa01      	add	r2, sp, #4
    1f38:	4619      	mov	r1, r3
    1f3a:	4628      	mov	r0, r5
    1f3c:	f001 f970 	bl	3220 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1f40:	4b1a      	ldr	r3, [pc, #104]	; (1fac <gpio_nrfx_pin_interrupt_configure+0xb8>)
    1f42:	4298      	cmp	r0, r3
    1f44:	d12f      	bne.n	1fa6 <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1f46:	2101      	movs	r1, #1
    1f48:	4628      	mov	r0, r5
    1f4a:	f001 facd 	bl	34e8 <nrfx_gpiote_trigger_enable>
	return 0;
    1f4e:	2000      	movs	r0, #0
}
    1f50:	b005      	add	sp, #20
    1f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    1f54:	4628      	mov	r0, r5
    1f56:	f001 faf9 	bl	354c <nrfx_gpiote_trigger_disable>
		return 0;
    1f5a:	2000      	movs	r0, #0
    1f5c:	e7f8      	b.n	1f50 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1f5e:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    1f62:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    1f64:	2a01      	cmp	r2, #1
    1f66:	d012      	beq.n	1f8e <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    1f68:	4a11      	ldr	r2, [pc, #68]	; (1fb0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1f6a:	3380      	adds	r3, #128	; 0x80
    1f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1f70:	f013 0f01 	tst.w	r3, #1
    1f74:	d1de      	bne.n	1f34 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1f76:	f10d 010f 	add.w	r1, sp, #15
    1f7a:	4628      	mov	r0, r5
    1f7c:	f001 fa58 	bl	3430 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1f80:	4b0c      	ldr	r3, [pc, #48]	; (1fb4 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1f82:	4298      	cmp	r0, r3
    1f84:	d005      	beq.n	1f92 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    1f86:	f10d 030f 	add.w	r3, sp, #15
    1f8a:	9302      	str	r3, [sp, #8]
    1f8c:	e7d2      	b.n	1f34 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    1f8e:	4a0a      	ldr	r2, [pc, #40]	; (1fb8 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1f90:	e7eb      	b.n	1f6a <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    1f92:	f10d 000f 	add.w	r0, sp, #15
    1f96:	f001 fa9f 	bl	34d8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1f9a:	4b04      	ldr	r3, [pc, #16]	; (1fac <gpio_nrfx_pin_interrupt_configure+0xb8>)
    1f9c:	4298      	cmp	r0, r3
    1f9e:	d0f2      	beq.n	1f86 <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    1fa0:	f06f 000b 	mvn.w	r0, #11
    1fa4:	e7d4      	b.n	1f50 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    1fa6:	f06f 0015 	mvn.w	r0, #21
    1faa:	e7d1      	b.n	1f50 <gpio_nrfx_pin_interrupt_configure+0x5c>
    1fac:	0bad0000 	.word	0x0bad0000
    1fb0:	50842500 	.word	0x50842500
    1fb4:	0bad0004 	.word	0x0bad0004
    1fb8:	50842800 	.word	0x50842800

00001fbc <gpio_nrfx_pin_configure>:
{
    1fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fc0:	b086      	sub	sp, #24
    1fc2:	460e      	mov	r6, r1
    1fc4:	4614      	mov	r4, r2
	return port->config;
    1fc6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1fca:	f898 300c 	ldrb.w	r3, [r8, #12]
    1fce:	f001 051f 	and.w	r5, r1, #31
    1fd2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1fd6:	f10d 0117 	add.w	r1, sp, #23
    1fda:	4628      	mov	r0, r5
    1fdc:	f001 fa28 	bl	3430 <nrfx_gpiote_channel_get>
    1fe0:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1fe2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    1fe6:	d039      	beq.n	205c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x5c>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1fe8:	2100      	movs	r1, #0
    1fea:	9103      	str	r1, [sp, #12]
    1fec:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1fee:	460b      	mov	r3, r1
    1ff0:	aa03      	add	r2, sp, #12
    1ff2:	4628      	mov	r0, r5
    1ff4:	f001 f914 	bl	3220 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1ff8:	4b32      	ldr	r3, [pc, #200]	; (20c4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc4>)
    1ffa:	4298      	cmp	r0, r3
    1ffc:	d15f      	bne.n	20be <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xbe>
	if (free_ch) {
    1ffe:	429f      	cmp	r7, r3
    2000:	d03c      	beq.n	207c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x7c>
	if (flags & GPIO_OUTPUT) {
    2002:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    2006:	d047      	beq.n	2098 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x98>
		int rv = get_drive(flags, &drive);
    2008:	f10d 0103 	add.w	r1, sp, #3
    200c:	4620      	mov	r0, r4
    200e:	f003 fcd6 	bl	59be <get_drive>
		if (rv != 0) {
    2012:	4607      	mov	r7, r0
    2014:	bb48      	cbnz	r0, 206a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6a>
		nrfx_gpiote_output_config_t output_config = {
    2016:	f89d 3003 	ldrb.w	r3, [sp, #3]
    201a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    201e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    2022:	bf0c      	ite	eq
    2024:	2301      	moveq	r3, #1
    2026:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2028:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    202c:	4620      	mov	r0, r4
    202e:	f003 fd09 	bl	5a44 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    2032:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2036:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    203a:	d024      	beq.n	2086 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x86>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    203c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2040:	2301      	movs	r3, #1
    2042:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    2044:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2046:	2200      	movs	r2, #0
    2048:	a901      	add	r1, sp, #4
    204a:	4628      	mov	r0, r5
    204c:	f001 f97e 	bl	334c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2050:	4b1c      	ldr	r3, [pc, #112]	; (20c4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc4>)
    2052:	4298      	cmp	r0, r3
    2054:	d009      	beq.n	206a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6a>
    2056:	f06f 0715 	mvn.w	r7, #21
    205a:	e006      	b.n	206a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6a>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    205c:	4628      	mov	r0, r5
    205e:	f001 fa97 	bl	3590 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    2062:	4b18      	ldr	r3, [pc, #96]	; (20c4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc4>)
    2064:	429f      	cmp	r7, r3
    2066:	d004      	beq.n	2072 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x72>
		return 0;
    2068:	2700      	movs	r7, #0
}
    206a:	4638      	mov	r0, r7
    206c:	b006      	add	sp, #24
    206e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    2072:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2076:	f001 fa27 	bl	34c8 <nrfx_gpiote_channel_free>
    207a:	e7f5      	b.n	2068 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x68>
		err = nrfx_gpiote_channel_free(ch);
    207c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2080:	f001 fa22 	bl	34c8 <nrfx_gpiote_channel_free>
    2084:	e7bd      	b.n	2002 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2086:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    208a:	d0dc      	beq.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    208c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2090:	2301      	movs	r3, #1
    2092:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    2094:	60d3      	str	r3, [r2, #12]
}
    2096:	e7d6      	b.n	2046 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x46>
		.pull = get_pull(flags)
    2098:	4620      	mov	r0, r4
    209a:	f003 fcd3 	bl	5a44 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    209e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    20a2:	2300      	movs	r3, #0
    20a4:	461a      	mov	r2, r3
    20a6:	a902      	add	r1, sp, #8
    20a8:	4628      	mov	r0, r5
    20aa:	f001 f8b9 	bl	3220 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    20ae:	4b05      	ldr	r3, [pc, #20]	; (20c4 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc4>)
    20b0:	4298      	cmp	r0, r3
    20b2:	d101      	bne.n	20b8 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xb8>
    20b4:	2700      	movs	r7, #0
    20b6:	e7d8      	b.n	206a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6a>
    20b8:	f06f 0715 	mvn.w	r7, #21
    20bc:	e7d5      	b.n	206a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6a>
		return -EINVAL;
    20be:	f06f 0715 	mvn.w	r7, #21
    20c2:	e7d2      	b.n	206a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6a>
    20c4:	0bad0000 	.word	0x0bad0000

000020c8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    20c8:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    20ca:	f001 f9f3 	bl	34b4 <nrfx_gpiote_is_init>
    20ce:	b108      	cbz	r0, 20d4 <gpio_nrfx_init+0xc>
		return 0;
    20d0:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    20d2:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    20d4:	f001 f9c4 	bl	3460 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    20d8:	4b08      	ldr	r3, [pc, #32]	; (20fc <gpio_nrfx_init+0x34>)
    20da:	4298      	cmp	r0, r3
    20dc:	d10a      	bne.n	20f4 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    20de:	2100      	movs	r1, #0
    20e0:	4807      	ldr	r0, [pc, #28]	; (2100 <gpio_nrfx_init+0x38>)
    20e2:	f001 f99f 	bl	3424 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    20e6:	2200      	movs	r2, #0
    20e8:	2105      	movs	r1, #5
    20ea:	200d      	movs	r0, #13
    20ec:	f003 f99b 	bl	5426 <z_arm_irq_priority_set>
	return 0;
    20f0:	2000      	movs	r0, #0
    20f2:	e7ee      	b.n	20d2 <gpio_nrfx_init+0xa>
		return -EIO;
    20f4:	f06f 0004 	mvn.w	r0, #4
    20f8:	e7eb      	b.n	20d2 <gpio_nrfx_init+0xa>
    20fa:	bf00      	nop
    20fc:	0bad0000 	.word	0x0bad0000
    2100:	00005add 	.word	0x00005add

00002104 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    2104:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    2106:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    2108:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    210c:	d06f      	beq.n	21ee <baudrate_set+0xea>
    210e:	d83a      	bhi.n	2186 <baudrate_set+0x82>
    2110:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2114:	d06e      	beq.n	21f4 <baudrate_set+0xf0>
    2116:	d90a      	bls.n	212e <baudrate_set+0x2a>
    2118:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    211c:	d075      	beq.n	220a <baudrate_set+0x106>
    211e:	d924      	bls.n	216a <baudrate_set+0x66>
    2120:	f647 2312 	movw	r3, #31250	; 0x7a12
    2124:	4299      	cmp	r1, r3
    2126:	d12b      	bne.n	2180 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2128:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    212c:	e013      	b.n	2156 <baudrate_set+0x52>
	switch (baudrate) {
    212e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    2132:	d061      	beq.n	21f8 <baudrate_set+0xf4>
    2134:	d907      	bls.n	2146 <baudrate_set+0x42>
    2136:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    213a:	d063      	beq.n	2204 <baudrate_set+0x100>
    213c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2140:	d110      	bne.n	2164 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2142:	4b3c      	ldr	r3, [pc, #240]	; (2234 <baudrate_set+0x130>)
    2144:	e007      	b.n	2156 <baudrate_set+0x52>
	switch (baudrate) {
    2146:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    214a:	d058      	beq.n	21fe <baudrate_set+0xfa>
    214c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2150:	d105      	bne.n	215e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    2152:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2156:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    215a:	2000      	movs	r0, #0
    215c:	4770      	bx	lr
	switch (baudrate) {
    215e:	f06f 0015 	mvn.w	r0, #21
    2162:	4770      	bx	lr
    2164:	f06f 0015 	mvn.w	r0, #21
    2168:	4770      	bx	lr
    216a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    216e:	d04e      	beq.n	220e <baudrate_set+0x10a>
    2170:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2174:	d101      	bne.n	217a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2176:	4b30      	ldr	r3, [pc, #192]	; (2238 <baudrate_set+0x134>)
    2178:	e7ed      	b.n	2156 <baudrate_set+0x52>
	switch (baudrate) {
    217a:	f06f 0015 	mvn.w	r0, #21
    217e:	4770      	bx	lr
    2180:	f06f 0015 	mvn.w	r0, #21
    2184:	4770      	bx	lr
    2186:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    218a:	d042      	beq.n	2212 <baudrate_set+0x10e>
    218c:	d909      	bls.n	21a2 <baudrate_set+0x9e>
    218e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2192:	d046      	beq.n	2222 <baudrate_set+0x11e>
    2194:	d91f      	bls.n	21d6 <baudrate_set+0xd2>
    2196:	4b29      	ldr	r3, [pc, #164]	; (223c <baudrate_set+0x138>)
    2198:	4299      	cmp	r1, r3
    219a:	d148      	bne.n	222e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    219c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    21a0:	e7d9      	b.n	2156 <baudrate_set+0x52>
	switch (baudrate) {
    21a2:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    21a6:	d037      	beq.n	2218 <baudrate_set+0x114>
    21a8:	d905      	bls.n	21b6 <baudrate_set+0xb2>
    21aa:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    21ae:	d10f      	bne.n	21d0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    21b0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    21b4:	e7cf      	b.n	2156 <baudrate_set+0x52>
	switch (baudrate) {
    21b6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    21ba:	4299      	cmp	r1, r3
    21bc:	d02e      	beq.n	221c <baudrate_set+0x118>
    21be:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    21c2:	d102      	bne.n	21ca <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    21c4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    21c8:	e7c5      	b.n	2156 <baudrate_set+0x52>
	switch (baudrate) {
    21ca:	f06f 0015 	mvn.w	r0, #21
    21ce:	4770      	bx	lr
    21d0:	f06f 0015 	mvn.w	r0, #21
    21d4:	4770      	bx	lr
    21d6:	4b1a      	ldr	r3, [pc, #104]	; (2240 <baudrate_set+0x13c>)
    21d8:	4299      	cmp	r1, r3
    21da:	d025      	beq.n	2228 <baudrate_set+0x124>
    21dc:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    21e0:	d102      	bne.n	21e8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    21e2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    21e6:	e7b6      	b.n	2156 <baudrate_set+0x52>
	switch (baudrate) {
    21e8:	f06f 0015 	mvn.w	r0, #21
    21ec:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    21ee:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    21f2:	e7b0      	b.n	2156 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    21f4:	4b13      	ldr	r3, [pc, #76]	; (2244 <baudrate_set+0x140>)
    21f6:	e7ae      	b.n	2156 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    21f8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    21fc:	e7ab      	b.n	2156 <baudrate_set+0x52>
	switch (baudrate) {
    21fe:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2202:	e7a8      	b.n	2156 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2204:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2208:	e7a5      	b.n	2156 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    220a:	4b0f      	ldr	r3, [pc, #60]	; (2248 <baudrate_set+0x144>)
    220c:	e7a3      	b.n	2156 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    220e:	4b0f      	ldr	r3, [pc, #60]	; (224c <baudrate_set+0x148>)
    2210:	e7a1      	b.n	2156 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2212:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2216:	e79e      	b.n	2156 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2218:	4b0d      	ldr	r3, [pc, #52]	; (2250 <baudrate_set+0x14c>)
    221a:	e79c      	b.n	2156 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    221c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2220:	e799      	b.n	2156 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2222:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2226:	e796      	b.n	2156 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2228:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    222c:	e793      	b.n	2156 <baudrate_set+0x52>
	switch (baudrate) {
    222e:	f06f 0015 	mvn.w	r0, #21
}
    2232:	4770      	bx	lr
    2234:	0013b000 	.word	0x0013b000
    2238:	004ea000 	.word	0x004ea000
    223c:	000f4240 	.word	0x000f4240
    2240:	0003d090 	.word	0x0003d090
    2244:	00275000 	.word	0x00275000
    2248:	0075c000 	.word	0x0075c000
    224c:	003af000 	.word	0x003af000
    2250:	013a9000 	.word	0x013a9000

00002254 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2256:	4605      	mov	r5, r0
    2258:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    225a:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    225c:	f004 f984 	bl	6568 <k_is_in_isr>
    2260:	b910      	cbnz	r0, 2268 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2262:	4b12      	ldr	r3, [pc, #72]	; (22ac <uarte_nrfx_poll_out+0x58>)
    2264:	781b      	ldrb	r3, [r3, #0]
    2266:	b983      	cbnz	r3, 228a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2268:	f04f 0320 	mov.w	r3, #32
    226c:	f3ef 8411 	mrs	r4, BASEPRI
    2270:	f383 8812 	msr	BASEPRI_MAX, r3
    2274:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2278:	4628      	mov	r0, r5
    227a:	f003 fcf2 	bl	5c62 <is_tx_ready>
    227e:	b940      	cbnz	r0, 2292 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    2280:	f384 8811 	msr	BASEPRI, r4
    2284:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2288:	e7ee      	b.n	2268 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    228a:	4628      	mov	r0, r5
    228c:	f003 fd4e 	bl	5d2c <wait_tx_ready>
    2290:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    2292:	693b      	ldr	r3, [r7, #16]
    2294:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    2296:	2201      	movs	r2, #1
    2298:	6939      	ldr	r1, [r7, #16]
    229a:	4628      	mov	r0, r5
    229c:	f003 fcfb 	bl	5c96 <tx_start>
	__asm__ volatile(
    22a0:	f384 8811 	msr	BASEPRI, r4
    22a4:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    22a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    22aa:	bf00      	nop
    22ac:	20000b67 	.word	0x20000b67

000022b0 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    22b0:	b538      	push	{r3, r4, r5, lr}
    22b2:	4605      	mov	r5, r0
    22b4:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    22b6:	f101 0018 	add.w	r0, r1, #24
    22ba:	f000 fd3b 	bl	2d34 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    22be:	4b0a      	ldr	r3, [pc, #40]	; (22e8 <endtx_stoptx_ppi_init+0x38>)
    22c0:	4298      	cmp	r0, r3
    22c2:	d10e      	bne.n	22e2 <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    22c4:	7e23      	ldrb	r3, [r4, #24]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    22c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    22ca:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    22ce:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    22d2:	7e22      	ldrb	r2, [r4, #24]
    22d4:	2301      	movs	r3, #1
    22d6:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    22d8:	4a04      	ldr	r2, [pc, #16]	; (22ec <endtx_stoptx_ppi_init+0x3c>)
    22da:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    22de:	2000      	movs	r0, #0
}
    22e0:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    22e2:	f06f 0004 	mvn.w	r0, #4
    22e6:	e7fb      	b.n	22e0 <endtx_stoptx_ppi_init+0x30>
    22e8:	0bad0000 	.word	0x0bad0000
    22ec:	50017000 	.word	0x50017000

000022f0 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    22f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    22f4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    22f8:	4b01      	ldr	r3, [pc, #4]	; (2300 <set_comparator+0x10>)
    22fa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    22fe:	4770      	bx	lr
    2300:	50015000 	.word	0x50015000

00002304 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    2304:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    2308:	4b01      	ldr	r3, [pc, #4]	; (2310 <get_comparator+0xc>)
    230a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    230e:	4770      	bx	lr
    2310:	50015000 	.word	0x50015000

00002314 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2314:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2318:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    231a:	4a02      	ldr	r2, [pc, #8]	; (2324 <event_enable+0x10>)
    231c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    2320:	4770      	bx	lr
    2322:	bf00      	nop
    2324:	50015000 	.word	0x50015000

00002328 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2328:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    232c:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    232e:	4a02      	ldr	r2, [pc, #8]	; (2338 <event_disable+0x10>)
    2330:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    2334:	4770      	bx	lr
    2336:	bf00      	nop
    2338:	50015000 	.word	0x50015000

0000233c <counter>:
     return p_reg->COUNTER;
    233c:	4b01      	ldr	r3, [pc, #4]	; (2344 <counter+0x8>)
    233e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    2342:	4770      	bx	lr
    2344:	50015000 	.word	0x50015000

00002348 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2348:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    234a:	2301      	movs	r3, #1
    234c:	4083      	lsls	r3, r0
    234e:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2352:	4a0c      	ldr	r2, [pc, #48]	; (2384 <compare_int_lock+0x3c>)
    2354:	e8d2 1fef 	ldaex	r1, [r2]
    2358:	ea01 0e0c 	and.w	lr, r1, ip
    235c:	e8c2 efe4 	stlex	r4, lr, [r2]
    2360:	2c00      	cmp	r4, #0
    2362:	d1f7      	bne.n	2354 <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2364:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2368:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    236a:	4807      	ldr	r0, [pc, #28]	; (2388 <compare_int_lock+0x40>)
    236c:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2370:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2374:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2378:	420b      	tst	r3, r1
}
    237a:	bf14      	ite	ne
    237c:	2001      	movne	r0, #1
    237e:	2000      	moveq	r0, #0
    2380:	bd10      	pop	{r4, pc}
    2382:	bf00      	nop
    2384:	20000940 	.word	0x20000940
    2388:	50015000 	.word	0x50015000

0000238c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    238c:	b538      	push	{r3, r4, r5, lr}
    238e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    2390:	f003 fd77 	bl	5e82 <full_int_lock>
    2394:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    239a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    239c:	4a14      	ldr	r2, [pc, #80]	; (23f0 <channel_processing_check_and_clear+0x64>)
    239e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    23a2:	4213      	tst	r3, r2
    23a4:	d105      	bne.n	23b2 <channel_processing_check_and_clear+0x26>
	bool result = false;
    23a6:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    23a8:	4628      	mov	r0, r5
    23aa:	f003 fd73 	bl	5e94 <full_int_unlock>

	return result;
}
    23ae:	4620      	mov	r0, r4
    23b0:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    23b2:	2301      	movs	r3, #1
    23b4:	40a3      	lsls	r3, r4
    23b6:	43db      	mvns	r3, r3
    23b8:	4a0e      	ldr	r2, [pc, #56]	; (23f4 <channel_processing_check_and_clear+0x68>)
    23ba:	e8d2 1fef 	ldaex	r1, [r2]
    23be:	ea01 0003 	and.w	r0, r1, r3
    23c2:	e8c2 0fec 	stlex	ip, r0, [r2]
    23c6:	f1bc 0f00 	cmp.w	ip, #0
    23ca:	d1f6      	bne.n	23ba <channel_processing_check_and_clear+0x2e>
    23cc:	b949      	cbnz	r1, 23e2 <channel_processing_check_and_clear+0x56>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    23ce:	f104 0350 	add.w	r3, r4, #80	; 0x50
    23d2:	009b      	lsls	r3, r3, #2
    23d4:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    23d6:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    23da:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    23de:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    23e0:	b123      	cbz	r3, 23ec <channel_processing_check_and_clear+0x60>
			event_clear(chan);
    23e2:	4620      	mov	r0, r4
    23e4:	f003 fd3e 	bl	5e64 <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    23e8:	2401      	movs	r4, #1
    23ea:	e7dd      	b.n	23a8 <channel_processing_check_and_clear+0x1c>
    23ec:	2400      	movs	r4, #0
    23ee:	e7db      	b.n	23a8 <channel_processing_check_and_clear+0x1c>
    23f0:	50015000 	.word	0x50015000
    23f4:	2000093c 	.word	0x2000093c

000023f8 <compare_int_unlock>:
	if (key) {
    23f8:	b901      	cbnz	r1, 23fc <compare_int_unlock+0x4>
}
    23fa:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    23fc:	2301      	movs	r3, #1
    23fe:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2400:	4a0d      	ldr	r2, [pc, #52]	; (2438 <compare_int_unlock+0x40>)
    2402:	e8d2 cfef 	ldaex	ip, [r2]
    2406:	ea4c 0c03 	orr.w	ip, ip, r3
    240a:	e8c2 cfe1 	stlex	r1, ip, [r2]
    240e:	2900      	cmp	r1, #0
    2410:	d1f7      	bne.n	2402 <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2412:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2416:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    2418:	4a08      	ldr	r2, [pc, #32]	; (243c <compare_int_unlock+0x44>)
    241a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    241e:	4b08      	ldr	r3, [pc, #32]	; (2440 <compare_int_unlock+0x48>)
    2420:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2424:	40c3      	lsrs	r3, r0
    2426:	f013 0f01 	tst.w	r3, #1
    242a:	d0e6      	beq.n	23fa <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    242c:	4b05      	ldr	r3, [pc, #20]	; (2444 <compare_int_unlock+0x4c>)
    242e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2432:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2436:	e7e0      	b.n	23fa <compare_int_unlock+0x2>
    2438:	20000940 	.word	0x20000940
    243c:	50015000 	.word	0x50015000
    2440:	2000093c 	.word	0x2000093c
    2444:	e000e100 	.word	0xe000e100

00002448 <sys_clock_timeout_handler>:
{
    2448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    244c:	4607      	mov	r7, r0
    244e:	4614      	mov	r4, r2
    2450:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    2452:	4610      	mov	r0, r2
    2454:	4619      	mov	r1, r3
    2456:	f003 fd11 	bl	5e7c <absolute_time_to_cc>
    245a:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    245c:	4b15      	ldr	r3, [pc, #84]	; (24b4 <sys_clock_timeout_handler+0x6c>)
    245e:	681a      	ldr	r2, [r3, #0]
    2460:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    2462:	601c      	str	r4, [r3, #0]
    2464:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2466:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    246a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    246e:	d309      	bcc.n	2484 <sys_clock_timeout_handler+0x3c>
	return false;
    2470:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2472:	f002 f923 	bl	46bc <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    2476:	4638      	mov	r0, r7
    2478:	f7ff ff44 	bl	2304 <get_comparator>
    247c:	42a8      	cmp	r0, r5
    247e:	d00e      	beq.n	249e <sys_clock_timeout_handler+0x56>
}
    2480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2484:	4b0c      	ldr	r3, [pc, #48]	; (24b8 <sys_clock_timeout_handler+0x70>)
    2486:	681b      	ldr	r3, [r3, #0]
    2488:	0a1a      	lsrs	r2, r3, #8
    248a:	061b      	lsls	r3, r3, #24
    248c:	eb15 0803 	adds.w	r8, r5, r3
    2490:	f142 0900 	adc.w	r9, r2, #0
    2494:	4b09      	ldr	r3, [pc, #36]	; (24bc <sys_clock_timeout_handler+0x74>)
    2496:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    249a:	2401      	movs	r4, #1
    249c:	e7e9      	b.n	2472 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    249e:	b11c      	cbz	r4, 24a8 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    24a0:	4638      	mov	r0, r7
    24a2:	f7ff ff37 	bl	2314 <event_enable>
}
    24a6:	e7eb      	b.n	2480 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    24a8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    24ac:	4638      	mov	r0, r7
    24ae:	f7ff ff1f 	bl	22f0 <set_comparator>
    24b2:	e7f5      	b.n	24a0 <sys_clock_timeout_handler+0x58>
    24b4:	200001a0 	.word	0x200001a0
    24b8:	20000944 	.word	0x20000944
    24bc:	200001a8 	.word	0x200001a8

000024c0 <z_nrf_rtc_timer_read>:
{
    24c0:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    24c2:	4b0d      	ldr	r3, [pc, #52]	; (24f8 <z_nrf_rtc_timer_read+0x38>)
    24c4:	681c      	ldr	r4, [r3, #0]
    24c6:	0a25      	lsrs	r5, r4, #8
    24c8:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    24ca:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    24ce:	f7ff ff35 	bl	233c <counter>
    24d2:	4603      	mov	r3, r0
	val += cntr;
    24d4:	1900      	adds	r0, r0, r4
    24d6:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    24da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    24de:	d20a      	bcs.n	24f6 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    24e0:	4b06      	ldr	r3, [pc, #24]	; (24fc <z_nrf_rtc_timer_read+0x3c>)
    24e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    24e6:	4290      	cmp	r0, r2
    24e8:	eb71 0303 	sbcs.w	r3, r1, r3
    24ec:	d203      	bcs.n	24f6 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    24ee:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    24f2:	f141 0100 	adc.w	r1, r1, #0
}
    24f6:	bd38      	pop	{r3, r4, r5, pc}
    24f8:	20000944 	.word	0x20000944
    24fc:	200001a8 	.word	0x200001a8

00002500 <compare_set_nolocks>:
{
    2500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2502:	4606      	mov	r6, r0
    2504:	4614      	mov	r4, r2
    2506:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    2508:	4610      	mov	r0, r2
    250a:	4619      	mov	r1, r3
    250c:	f003 fcb6 	bl	5e7c <absolute_time_to_cc>
    2510:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2512:	f7ff ffd5 	bl	24c0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2516:	42a0      	cmp	r0, r4
    2518:	eb71 0305 	sbcs.w	r3, r1, r5
    251c:	d21d      	bcs.n	255a <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    251e:	1a20      	subs	r0, r4, r0
    2520:	eb65 0101 	sbc.w	r1, r5, r1
    2524:	4b19      	ldr	r3, [pc, #100]	; (258c <compare_set_nolocks+0x8c>)
    2526:	4298      	cmp	r0, r3
    2528:	f171 0100 	sbcs.w	r1, r1, #0
    252c:	d22b      	bcs.n	2586 <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
    252e:	4b18      	ldr	r3, [pc, #96]	; (2590 <compare_set_nolocks+0x90>)
    2530:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2534:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2538:	42ab      	cmp	r3, r5
    253a:	bf08      	it	eq
    253c:	42a2      	cmpeq	r2, r4
    253e:	d016      	beq.n	256e <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2540:	4639      	mov	r1, r7
    2542:	4630      	mov	r0, r6
    2544:	f003 fcab 	bl	5e9e <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    2548:	4639      	mov	r1, r7
    254a:	f003 fc87 	bl	5e5c <counter_sub>
    254e:	1900      	adds	r0, r0, r4
    2550:	f145 0300 	adc.w	r3, r5, #0
    2554:	4604      	mov	r4, r0
    2556:	461d      	mov	r5, r3
    2558:	e009      	b.n	256e <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
    255a:	2301      	movs	r3, #1
    255c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    255e:	4a0d      	ldr	r2, [pc, #52]	; (2594 <compare_set_nolocks+0x94>)
    2560:	e8d2 0fef 	ldaex	r0, [r2]
    2564:	4318      	orrs	r0, r3
    2566:	e8c2 0fe1 	stlex	r1, r0, [r2]
    256a:	2900      	cmp	r1, #0
    256c:	d1f8      	bne.n	2560 <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
    256e:	4b08      	ldr	r3, [pc, #32]	; (2590 <compare_set_nolocks+0x90>)
    2570:	0132      	lsls	r2, r6, #4
    2572:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    2576:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    257a:	9906      	ldr	r1, [sp, #24]
    257c:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    257e:	9b07      	ldr	r3, [sp, #28]
    2580:	6073      	str	r3, [r6, #4]
	return ret;
    2582:	2000      	movs	r0, #0
}
    2584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    2586:	f06f 0015 	mvn.w	r0, #21
    258a:	e7fb      	b.n	2584 <compare_set_nolocks+0x84>
    258c:	01000001 	.word	0x01000001
    2590:	20000190 	.word	0x20000190
    2594:	2000093c 	.word	0x2000093c

00002598 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2598:	b530      	push	{r4, r5, lr}
    259a:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    259c:	2300      	movs	r3, #0
    259e:	4a1d      	ldr	r2, [pc, #116]	; (2614 <sys_clock_driver_init+0x7c>)
    25a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    25a4:	2b00      	cmp	r3, #0
    25a6:	dd24      	ble.n	25f2 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    25a8:	4c1a      	ldr	r4, [pc, #104]	; (2614 <sys_clock_driver_init+0x7c>)
    25aa:	2502      	movs	r5, #2
    25ac:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25b0:	4b19      	ldr	r3, [pc, #100]	; (2618 <sys_clock_driver_init+0x80>)
    25b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    25b6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    25ba:	2200      	movs	r2, #0
    25bc:	2101      	movs	r1, #1
    25be:	2015      	movs	r0, #21
    25c0:	f002 ff31 	bl	5426 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    25c4:	2015      	movs	r0, #21
    25c6:	f002 ff29 	bl	541c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    25ca:	2301      	movs	r3, #1
    25cc:	60a3      	str	r3, [r4, #8]
    25ce:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    25d0:	4a12      	ldr	r2, [pc, #72]	; (261c <sys_clock_driver_init+0x84>)
    25d2:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    25d4:	2400      	movs	r4, #0
    25d6:	9401      	str	r4, [sp, #4]
    25d8:	4b11      	ldr	r3, [pc, #68]	; (2620 <sys_clock_driver_init+0x88>)
    25da:	9300      	str	r3, [sp, #0]
    25dc:	4a11      	ldr	r2, [pc, #68]	; (2624 <sys_clock_driver_init+0x8c>)
    25de:	2300      	movs	r3, #0
    25e0:	4620      	mov	r0, r4
    25e2:	f003 fc97 	bl	5f14 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    25e6:	4628      	mov	r0, r5
    25e8:	f7ff fc22 	bl	1e30 <z_nrf_clock_control_lf_on>

	return 0;
}
    25ec:	4620      	mov	r0, r4
    25ee:	b003      	add	sp, #12
    25f0:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    25f2:	4a0d      	ldr	r2, [pc, #52]	; (2628 <sys_clock_driver_init+0x90>)
    25f4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    25f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    25fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2600:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2604:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2608:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    260a:	4902      	ldr	r1, [pc, #8]	; (2614 <sys_clock_driver_init+0x7c>)
    260c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2610:	3301      	adds	r3, #1
    2612:	e7c7      	b.n	25a4 <sys_clock_driver_init+0xc>
    2614:	50015000 	.word	0x50015000
    2618:	e000e100 	.word	0xe000e100
    261c:	20000940 	.word	0x20000940
    2620:	00002449 	.word	0x00002449
    2624:	007fffff 	.word	0x007fffff
    2628:	20000190 	.word	0x20000190

0000262c <process_channel>:
{
    262c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2630:	b082      	sub	sp, #8
    2632:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2634:	f7ff feaa 	bl	238c <channel_processing_check_and_clear>
    2638:	b910      	cbnz	r0, 2640 <process_channel+0x14>
}
    263a:	b002      	add	sp, #8
    263c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2640:	f7ff ff3e 	bl	24c0 <z_nrf_rtc_timer_read>
    2644:	4682      	mov	sl, r0
    2646:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    2648:	f003 fc1b 	bl	5e82 <full_int_lock>
    264c:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    264e:	4b13      	ldr	r3, [pc, #76]	; (269c <process_channel+0x70>)
    2650:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2654:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2658:	45c2      	cmp	sl, r8
    265a:	eb75 0509 	sbcs.w	r5, r5, r9
    265e:	d20b      	bcs.n	2678 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2660:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    2662:	4630      	mov	r0, r6
    2664:	f003 fc16 	bl	5e94 <full_int_unlock>
		if (handler) {
    2668:	2d00      	cmp	r5, #0
    266a:	d0e6      	beq.n	263a <process_channel+0xe>
			handler(chan, expire_time, user_context);
    266c:	9700      	str	r7, [sp, #0]
    266e:	4642      	mov	r2, r8
    2670:	464b      	mov	r3, r9
    2672:	4620      	mov	r0, r4
    2674:	47a8      	blx	r5
}
    2676:	e7e0      	b.n	263a <process_channel+0xe>
			handler = cc_data[chan].callback;
    2678:	4a08      	ldr	r2, [pc, #32]	; (269c <process_channel+0x70>)
    267a:	0123      	lsls	r3, r4, #4
    267c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2680:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    2682:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    2684:	2000      	movs	r0, #0
    2686:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    268c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2690:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    2694:	4620      	mov	r0, r4
    2696:	f7ff fe47 	bl	2328 <event_disable>
    269a:	e7e2      	b.n	2662 <process_channel+0x36>
    269c:	20000190 	.word	0x20000190

000026a0 <rtc_nrf_isr>:
{
    26a0:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    26a2:	4b0e      	ldr	r3, [pc, #56]	; (26dc <rtc_nrf_isr+0x3c>)
    26a4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    26a8:	f013 0f02 	tst.w	r3, #2
    26ac:	d00d      	beq.n	26ca <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    26ae:	4b0b      	ldr	r3, [pc, #44]	; (26dc <rtc_nrf_isr+0x3c>)
    26b0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    26b4:	b14b      	cbz	r3, 26ca <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    26b6:	4b09      	ldr	r3, [pc, #36]	; (26dc <rtc_nrf_isr+0x3c>)
    26b8:	2200      	movs	r2, #0
    26ba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    26be:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    26c2:	4a07      	ldr	r2, [pc, #28]	; (26e0 <rtc_nrf_isr+0x40>)
    26c4:	6813      	ldr	r3, [r2, #0]
    26c6:	3301      	adds	r3, #1
    26c8:	6013      	str	r3, [r2, #0]
{
    26ca:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    26cc:	2c00      	cmp	r4, #0
    26ce:	dd00      	ble.n	26d2 <rtc_nrf_isr+0x32>
}
    26d0:	bd10      	pop	{r4, pc}
		process_channel(chan);
    26d2:	4620      	mov	r0, r4
    26d4:	f7ff ffaa 	bl	262c <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    26d8:	3401      	adds	r4, #1
    26da:	e7f7      	b.n	26cc <rtc_nrf_isr+0x2c>
    26dc:	50015000 	.word	0x50015000
    26e0:	20000944 	.word	0x20000944

000026e4 <sys_clock_set_timeout>:
{
    26e4:	b510      	push	{r4, lr}
    26e6:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    26e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    26ec:	d006      	beq.n	26fc <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    26ee:	2801      	cmp	r0, #1
    26f0:	dd06      	ble.n	2700 <sys_clock_set_timeout+0x1c>
    26f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    26f6:	da05      	bge.n	2704 <sys_clock_set_timeout+0x20>
    26f8:	1e44      	subs	r4, r0, #1
    26fa:	e004      	b.n	2706 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    26fc:	480f      	ldr	r0, [pc, #60]	; (273c <sys_clock_set_timeout+0x58>)
    26fe:	e7f8      	b.n	26f2 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2700:	2400      	movs	r4, #0
    2702:	e000      	b.n	2706 <sys_clock_set_timeout+0x22>
    2704:	4c0d      	ldr	r4, [pc, #52]	; (273c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2706:	f7ff fedb 	bl	24c0 <z_nrf_rtc_timer_read>
    270a:	4b0d      	ldr	r3, [pc, #52]	; (2740 <sys_clock_set_timeout+0x5c>)
    270c:	681a      	ldr	r2, [r3, #0]
    270e:	685b      	ldr	r3, [r3, #4]
    2710:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    2712:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2716:	d300      	bcc.n	271a <sys_clock_set_timeout+0x36>
		ticks = 0;
    2718:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    271a:	4420      	add	r0, r4
    271c:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
    271e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2722:	d300      	bcc.n	2726 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    2724:	4905      	ldr	r1, [pc, #20]	; (273c <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    2726:	2000      	movs	r0, #0
    2728:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    272a:	9001      	str	r0, [sp, #4]
    272c:	4905      	ldr	r1, [pc, #20]	; (2744 <sys_clock_set_timeout+0x60>)
    272e:	9100      	str	r1, [sp, #0]
    2730:	f143 0300 	adc.w	r3, r3, #0
    2734:	f003 fbee 	bl	5f14 <compare_set>
}
    2738:	b002      	add	sp, #8
    273a:	bd10      	pop	{r4, pc}
    273c:	007fffff 	.word	0x007fffff
    2740:	200001a0 	.word	0x200001a0
    2744:	00002449 	.word	0x00002449

00002748 <sys_clock_elapsed>:
{
    2748:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    274a:	f7ff feb9 	bl	24c0 <z_nrf_rtc_timer_read>
    274e:	4b02      	ldr	r3, [pc, #8]	; (2758 <sys_clock_elapsed+0x10>)
    2750:	681b      	ldr	r3, [r3, #0]
}
    2752:	1ac0      	subs	r0, r0, r3
    2754:	bd08      	pop	{r3, pc}
    2756:	bf00      	nop
    2758:	200001a0 	.word	0x200001a0

0000275c <nrf_gpio_cfg>:
{
    275c:	b430      	push	{r4, r5}
    *p_pin = pin_number & 0x1F;
    275e:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    2762:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2764:	2801      	cmp	r0, #1
    2766:	d018      	beq.n	279a <nrf_gpio_cfg+0x3e>
        case 0: return NRF_P0;
    2768:	4d0d      	ldr	r5, [pc, #52]	; (27a0 <nrf_gpio_cfg+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    276a:	f10c 0080 	add.w	r0, ip, #128	; 0x80
    276e:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
    2772:	f004 4ce0 	and.w	ip, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2776:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    277a:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    277e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2782:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    2786:	f89d 200c 	ldrb.w	r2, [sp, #12]
    278a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    278e:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
    2792:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
    2796:	bc30      	pop	{r4, r5}
    2798:	4770      	bx	lr
        case 1: return NRF_P1;
    279a:	4d02      	ldr	r5, [pc, #8]	; (27a4 <nrf_gpio_cfg+0x48>)
    279c:	e7e5      	b.n	276a <nrf_gpio_cfg+0xe>
    279e:	bf00      	nop
    27a0:	50842500 	.word	0x50842500
    27a4:	50842800 	.word	0x50842800

000027a8 <nrf_gpio_pin_write>:
    if (value == 0)
    27a8:	b959      	cbnz	r1, 27c2 <nrf_gpio_pin_write+0x1a>
    *p_pin = pin_number & 0x1F;
    27aa:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    27ae:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    27b0:	2801      	cmp	r0, #1
    27b2:	d004      	beq.n	27be <nrf_gpio_pin_write+0x16>
        case 0: return NRF_P0;
    27b4:	4a09      	ldr	r2, [pc, #36]	; (27dc <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    27b6:	2301      	movs	r3, #1
    27b8:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    27ba:	60d3      	str	r3, [r2, #12]
}
    27bc:	4770      	bx	lr
        case 1: return NRF_P1;
    27be:	4a08      	ldr	r2, [pc, #32]	; (27e0 <nrf_gpio_pin_write+0x38>)
    27c0:	e7f9      	b.n	27b6 <nrf_gpio_pin_write+0xe>
    *p_pin = pin_number & 0x1F;
    27c2:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    27c6:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    27c8:	2801      	cmp	r0, #1
    27ca:	d004      	beq.n	27d6 <nrf_gpio_pin_write+0x2e>
        case 0: return NRF_P0;
    27cc:	4a03      	ldr	r2, [pc, #12]	; (27dc <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    27ce:	2301      	movs	r3, #1
    27d0:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    27d2:	6093      	str	r3, [r2, #8]
}
    27d4:	4770      	bx	lr
        case 1: return NRF_P1;
    27d6:	4a02      	ldr	r2, [pc, #8]	; (27e0 <nrf_gpio_pin_write+0x38>)
    27d8:	e7f9      	b.n	27ce <nrf_gpio_pin_write+0x26>
    27da:	bf00      	nop
    27dc:	50842500 	.word	0x50842500
    27e0:	50842800 	.word	0x50842800

000027e4 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    27e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27e8:	b085      	sub	sp, #20
    27ea:	4607      	mov	r7, r0
    27ec:	468b      	mov	fp, r1
    27ee:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    27f0:	2400      	movs	r4, #0
    27f2:	e022      	b.n	283a <pinctrl_configure_pins+0x56>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    27f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    27f8:	e02c      	b.n	2854 <pinctrl_configure_pins+0x70>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    27fa:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27fe:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2800:	9603      	str	r6, [sp, #12]
			write = 1U;
    2802:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    2804:	2d7f      	cmp	r5, #127	; 0x7f
    2806:	d016      	beq.n	2836 <pinctrl_configure_pins+0x52>
			if (write != NO_WRITE) {
    2808:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    280c:	f040 810e 	bne.w	2a2c <pinctrl_configure_pins+0x248>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    2810:	f857 300a 	ldr.w	r3, [r7, sl]
    2814:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2818:	d002      	beq.n	2820 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    281a:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    281c:	2200      	movs	r2, #0
    281e:	9203      	str	r2, [sp, #12]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2820:	2200      	movs	r2, #0
    2822:	9201      	str	r2, [sp, #4]
    2824:	f8cd 9000 	str.w	r9, [sp]
    2828:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    282c:	4632      	mov	r2, r6
    282e:	9903      	ldr	r1, [sp, #12]
    2830:	4628      	mov	r0, r5
    2832:	f7ff ff93 	bl	275c <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2836:	3401      	adds	r4, #1
    2838:	b2e4      	uxtb	r4, r4
    283a:	455c      	cmp	r4, fp
    283c:	f080 80fa 	bcs.w	2a34 <pinctrl_configure_pins+0x250>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2840:	ea4f 0a84 	mov.w	sl, r4, lsl #2
    2844:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    2848:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    284c:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    2850:	2d7f      	cmp	r5, #127	; 0x7f
    2852:	d0cf      	beq.n	27f4 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    2854:	0c1b      	lsrs	r3, r3, #16
    2856:	2b22      	cmp	r3, #34	; 0x22
    2858:	f200 80ee 	bhi.w	2a38 <pinctrl_configure_pins+0x254>
    285c:	a201      	add	r2, pc, #4	; (adr r2, 2864 <pinctrl_configure_pins+0x80>)
    285e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2862:	bf00      	nop
    2864:	000027fb 	.word	0x000027fb
    2868:	000028f1 	.word	0x000028f1
    286c:	000028ff 	.word	0x000028ff
    2870:	0000290b 	.word	0x0000290b
    2874:	00002919 	.word	0x00002919
    2878:	00002927 	.word	0x00002927
    287c:	00002933 	.word	0x00002933
    2880:	00002a39 	.word	0x00002a39
    2884:	00002a39 	.word	0x00002a39
    2888:	00002a39 	.word	0x00002a39
    288c:	00002a39 	.word	0x00002a39
    2890:	00002941 	.word	0x00002941
    2894:	00002955 	.word	0x00002955
    2898:	00002a39 	.word	0x00002a39
    289c:	00002a39 	.word	0x00002a39
    28a0:	00002a39 	.word	0x00002a39
    28a4:	00002a39 	.word	0x00002a39
    28a8:	00002a39 	.word	0x00002a39
    28ac:	00002a39 	.word	0x00002a39
    28b0:	00002a39 	.word	0x00002a39
    28b4:	00002a39 	.word	0x00002a39
    28b8:	00002a39 	.word	0x00002a39
    28bc:	00002969 	.word	0x00002969
    28c0:	0000297b 	.word	0x0000297b
    28c4:	0000298d 	.word	0x0000298d
    28c8:	0000299f 	.word	0x0000299f
    28cc:	00002a39 	.word	0x00002a39
    28d0:	00002a39 	.word	0x00002a39
    28d4:	00002a39 	.word	0x00002a39
    28d8:	000029b1 	.word	0x000029b1
    28dc:	000029c1 	.word	0x000029c1
    28e0:	000029cd 	.word	0x000029cd
    28e4:	000029dd 	.word	0x000029dd
    28e8:	000029ed 	.word	0x000029ed
    28ec:	000029fd 	.word	0x000029fd
			NRF_PSEL_UART(reg, RXD) = pin;
    28f0:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    28f4:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    28f6:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    28f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    28fc:	e782      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
    28fe:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2902:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2904:	9603      	str	r6, [sp, #12]
			write = 1U;
    2906:	4631      	mov	r1, r6
			break;
    2908:	e77c      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
    290a:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    290e:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2910:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2912:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2916:	e775      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    2918:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    291c:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    291e:	2301      	movs	r3, #1
    2920:	9303      	str	r3, [sp, #12]
			write = 0U;
    2922:	4631      	mov	r1, r6
			break;
    2924:	e76e      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    2926:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    292a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    292c:	9603      	str	r6, [sp, #12]
			write = 0U;
    292e:	2100      	movs	r1, #0
			break;
    2930:	e768      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    2932:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2936:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2938:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    293a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    293e:	e761      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    2940:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2944:	f1b9 0f00 	cmp.w	r9, #0
    2948:	d060      	beq.n	2a0c <pinctrl_configure_pins+0x228>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    294a:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    294c:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    294e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2952:	e757      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    2954:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2958:	f1b9 0f00 	cmp.w	r9, #0
    295c:	d05e      	beq.n	2a1c <pinctrl_configure_pins+0x238>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    295e:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2960:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2962:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2966:	e74d      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    2968:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    296c:	f857 100a 	ldr.w	r1, [r7, sl]
    2970:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2974:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2976:	9603      	str	r6, [sp, #12]
			break;
    2978:	e744      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    297a:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    297e:	f857 100a 	ldr.w	r1, [r7, sl]
    2982:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2986:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2988:	9603      	str	r6, [sp, #12]
			break;
    298a:	e73b      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    298c:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2990:	f857 100a 	ldr.w	r1, [r7, sl]
    2994:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2998:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    299a:	9603      	str	r6, [sp, #12]
			break;
    299c:	e732      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    299e:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    29a2:	f857 100a 	ldr.w	r1, [r7, sl]
    29a6:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29aa:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    29ac:	9603      	str	r6, [sp, #12]
			break;
    29ae:	e729      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    29b0:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29b4:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    29b6:	2300      	movs	r3, #0
    29b8:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    29ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    29be:	e721      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    29c0:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29c4:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    29c6:	9603      	str	r6, [sp, #12]
			write = 1U;
    29c8:	4631      	mov	r1, r6
			break;
    29ca:	e71b      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    29cc:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29d0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    29d2:	2300      	movs	r3, #0
    29d4:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    29d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    29da:	e713      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    29dc:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29e0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    29e2:	2300      	movs	r3, #0
    29e4:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    29e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    29ea:	e70b      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    29ec:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29f0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    29f2:	2300      	movs	r3, #0
    29f4:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    29f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    29fa:	e703      	b.n	2804 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    29fc:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2a00:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2a02:	2300      	movs	r3, #0
    2a04:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2a06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2a0a:	e6fb      	b.n	2804 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2a0c:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2a0e:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    2a12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
    2a16:	f04f 0906 	mov.w	r9, #6
    2a1a:	e6f3      	b.n	2804 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2a1c:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2a1e:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    2a22:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
    2a26:	f04f 0906 	mov.w	r9, #6
    2a2a:	e6eb      	b.n	2804 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
    2a2c:	4628      	mov	r0, r5
    2a2e:	f7ff febb 	bl	27a8 <nrf_gpio_pin_write>
    2a32:	e6ed      	b.n	2810 <pinctrl_configure_pins+0x2c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    2a34:	2000      	movs	r0, #0
    2a36:	e001      	b.n	2a3c <pinctrl_configure_pins+0x258>
		switch (NRF_GET_FUN(pins[i])) {
    2a38:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2a3c:	b005      	add	sp, #20
    2a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a42:	bf00      	nop

00002a44 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    2a44:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2a48:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    2a4c:	f002 0203 	and.w	r2, r2, #3
    2a50:	4b02      	ldr	r3, [pc, #8]	; (2a5c <SystemCoreClockUpdate+0x18>)
    2a52:	40d3      	lsrs	r3, r2
    2a54:	4a02      	ldr	r2, [pc, #8]	; (2a60 <SystemCoreClockUpdate+0x1c>)
    2a56:	6013      	str	r3, [r2, #0]
#endif
}
    2a58:	4770      	bx	lr
    2a5a:	bf00      	nop
    2a5c:	07a12000 	.word	0x07a12000
    2a60:	20000048 	.word	0x20000048

00002a64 <SystemInit>:

void SystemInit(void)
{
    2a64:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    2a66:	f003 fb0e 	bl	6086 <nrf53_errata_97>
    2a6a:	b168      	cbz	r0, 2a88 <SystemInit+0x24>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    2a6c:	4b4e      	ldr	r3, [pc, #312]	; (2ba8 <SystemInit+0x144>)
    2a6e:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
    2a72:	b94b      	cbnz	r3, 2a88 <SystemInit+0x24>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2a74:	4b4c      	ldr	r3, [pc, #304]	; (2ba8 <SystemInit+0x144>)
    2a76:	220d      	movs	r2, #13
    2a78:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    2a7c:	2201      	movs	r2, #1
    2a7e:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2a82:	2200      	movs	r2, #0
    2a84:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    2a88:	2200      	movs	r2, #0
    2a8a:	e00b      	b.n	2aa4 <SystemInit+0x40>
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2a8c:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2a90:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2a94:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    2a98:	00db      	lsls	r3, r3, #3
    2a9a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    2a9e:	685b      	ldr	r3, [r3, #4]
    2aa0:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2aa2:	3201      	adds	r2, #1
    2aa4:	2a1f      	cmp	r2, #31
    2aa6:	d808      	bhi.n	2aba <SystemInit+0x56>
    2aa8:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2aac:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2ab0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    2ab4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2ab8:	d1e8      	bne.n	2a8c <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2aba:	f003 fabc 	bl	6036 <nrf53_errata_64>
    2abe:	b130      	cbz	r0, 2ace <SystemInit+0x6a>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2ac0:	4b39      	ldr	r3, [pc, #228]	; (2ba8 <SystemInit+0x144>)
    2ac2:	2229      	movs	r2, #41	; 0x29
    2ac4:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2ac8:	2203      	movs	r2, #3
    2aca:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    2ace:	f003 fa66 	bl	5f9e <nrf53_errata_42>
    2ad2:	b140      	cbz	r0, 2ae6 <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2ad4:	4b35      	ldr	r3, [pc, #212]	; (2bac <SystemInit+0x148>)
    2ad6:	4a36      	ldr	r2, [pc, #216]	; (2bb0 <SystemInit+0x14c>)
    2ad8:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    2adc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ae0:	2201      	movs	r2, #1
    2ae2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    2ae6:	f003 fa6e 	bl	5fc6 <nrf53_errata_46>
    2aea:	b118      	cbz	r0, 2af4 <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2aec:	4b31      	ldr	r3, [pc, #196]	; (2bb4 <SystemInit+0x150>)
    2aee:	2200      	movs	r2, #0
    2af0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    2af4:	f003 fa7f 	bl	5ff6 <nrf53_errata_49>
    2af8:	b168      	cbz	r0, 2b16 <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2afa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2afe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2b02:	f013 0f01 	tst.w	r3, #1
    2b06:	d006      	beq.n	2b16 <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    2b08:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b0c:	2200      	movs	r2, #0
    2b0e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2b12:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    2b16:	f003 fa82 	bl	601e <nrf53_errata_55>
    2b1a:	b160      	cbz	r0, 2b36 <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2b1c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b20:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2b24:	f013 0f01 	tst.w	r3, #1
    2b28:	d005      	beq.n	2b36 <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2b2a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b2e:	f06f 0201 	mvn.w	r2, #1
    2b32:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2b36:	f003 fa92 	bl	605e <nrf53_errata_69>
    2b3a:	b118      	cbz	r0, 2b44 <SystemInit+0xe0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    2b3c:	4b1a      	ldr	r3, [pc, #104]	; (2ba8 <SystemInit+0x144>)
    2b3e:	2265      	movs	r2, #101	; 0x65
    2b40:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        }

        if (nrf53_errata_140())
    2b44:	f003 fab3 	bl	60ae <nrf53_errata_140>
    2b48:	b120      	cbz	r0, 2b54 <SystemInit+0xf0>
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    2b4a:	4b1a      	ldr	r3, [pc, #104]	; (2bb4 <SystemInit+0x150>)
    2b4c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    2b50:	2b00      	cmp	r3, #0
    2b52:	db11      	blt.n	2b78 <SystemInit+0x114>

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2b54:	4a18      	ldr	r2, [pc, #96]	; (2bb8 <SystemInit+0x154>)
    2b56:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2b5a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2b5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2b62:	4a16      	ldr	r2, [pc, #88]	; (2bbc <SystemInit+0x158>)
    2b64:	6811      	ldr	r1, [r2, #0]
    2b66:	4b16      	ldr	r3, [pc, #88]	; (2bc0 <SystemInit+0x15c>)
    2b68:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2b6c:	69d2      	ldr	r2, [r2, #28]
    2b6e:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    2b72:	f7ff ff67 	bl	2a44 <SystemCoreClockUpdate>
}
    2b76:	bd08      	pop	{r3, pc}
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    2b78:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b7c:	2203      	movs	r2, #3
    2b7e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    2b82:	2201      	movs	r2, #1
    2b84:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    2b86:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b8a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2b8e:	2b00      	cmp	r3, #0
    2b90:	d0f9      	beq.n	2b86 <SystemInit+0x122>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    2b92:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b96:	2200      	movs	r2, #0
    2b98:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    2b9c:	2201      	movs	r2, #1
    2b9e:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    2ba0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    2ba4:	e7d6      	b.n	2b54 <SystemInit+0xf0>
    2ba6:	bf00      	nop
    2ba8:	50004000 	.word	0x50004000
    2bac:	50039000 	.word	0x50039000
    2bb0:	beef0044 	.word	0xbeef0044
    2bb4:	50032000 	.word	0x50032000
    2bb8:	e000ed00 	.word	0xe000ed00
    2bbc:	00ff8000 	.word	0x00ff8000
    2bc0:	50006000 	.word	0x50006000

00002bc4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2bc4:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    2bc6:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2bc8:	fab4 f384 	clz	r3, r4
    2bcc:	f1c3 031f 	rsb	r3, r3, #31
    2bd0:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    2bd4:	2b00      	cmp	r3, #0
    2bd6:	db12      	blt.n	2bfe <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2bd8:	2201      	movs	r2, #1
    2bda:	fa02 f303 	lsl.w	r3, r2, r3
    2bde:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2be2:	e8d0 2fef 	ldaex	r2, [r0]
    2be6:	42a2      	cmp	r2, r4
    2be8:	d104      	bne.n	2bf4 <nrfx_flag32_alloc+0x30>
    2bea:	e8c0 3fee 	stlex	lr, r3, [r0]
    2bee:	f1be 0f00 	cmp.w	lr, #0
    2bf2:	d1f6      	bne.n	2be2 <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2bf4:	d1e7      	bne.n	2bc6 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    2bf6:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    2bfa:	4802      	ldr	r0, [pc, #8]	; (2c04 <nrfx_flag32_alloc+0x40>)
}
    2bfc:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    2bfe:	4802      	ldr	r0, [pc, #8]	; (2c08 <nrfx_flag32_alloc+0x44>)
    2c00:	e7fc      	b.n	2bfc <nrfx_flag32_alloc+0x38>
    2c02:	bf00      	nop
    2c04:	0bad0000 	.word	0x0bad0000
    2c08:	0bad0002 	.word	0x0bad0002

00002c0c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2c0c:	6803      	ldr	r3, [r0, #0]
    2c0e:	40cb      	lsrs	r3, r1
    2c10:	f013 0f01 	tst.w	r3, #1
    2c14:	d111      	bne.n	2c3a <nrfx_flag32_free+0x2e>
{
    2c16:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    2c18:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    2c1a:	2301      	movs	r3, #1
    2c1c:	408b      	lsls	r3, r1
    2c1e:	4313      	orrs	r3, r2
    2c20:	e8d0 cfef 	ldaex	ip, [r0]
    2c24:	4594      	cmp	ip, r2
    2c26:	d104      	bne.n	2c32 <nrfx_flag32_free+0x26>
    2c28:	e8c0 3fee 	stlex	lr, r3, [r0]
    2c2c:	f1be 0f00 	cmp.w	lr, #0
    2c30:	d1f6      	bne.n	2c20 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2c32:	d1f1      	bne.n	2c18 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    2c34:	4802      	ldr	r0, [pc, #8]	; (2c40 <nrfx_flag32_free+0x34>)
}
    2c36:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    2c3a:	4802      	ldr	r0, [pc, #8]	; (2c44 <nrfx_flag32_free+0x38>)
}
    2c3c:	4770      	bx	lr
    2c3e:	bf00      	nop
    2c40:	0bad0000 	.word	0x0bad0000
    2c44:	0bad0004 	.word	0x0bad0004

00002c48 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2c48:	4b05      	ldr	r3, [pc, #20]	; (2c60 <nrfx_clock_init+0x18>)
    2c4a:	791b      	ldrb	r3, [r3, #4]
    2c4c:	b92b      	cbnz	r3, 2c5a <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    2c4e:	4b04      	ldr	r3, [pc, #16]	; (2c60 <nrfx_clock_init+0x18>)
    2c50:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2c52:	2201      	movs	r2, #1
    2c54:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2c56:	4803      	ldr	r0, [pc, #12]	; (2c64 <nrfx_clock_init+0x1c>)
    2c58:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2c5a:	4803      	ldr	r0, [pc, #12]	; (2c68 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2c5c:	4770      	bx	lr
    2c5e:	bf00      	nop
    2c60:	20000948 	.word	0x20000948
    2c64:	0bad0000 	.word	0x0bad0000
    2c68:	0bad000c 	.word	0x0bad000c

00002c6c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2c6c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2c6e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2c76:	b163      	cbz	r3, 2c92 <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c78:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c7c:	2000      	movs	r0, #0
    2c7e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    2c82:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2c86:	2201      	movs	r2, #1
    2c88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2c8c:	4b28      	ldr	r3, [pc, #160]	; (2d30 <nrfx_power_clock_irq_handler+0xc4>)
    2c8e:	681b      	ldr	r3, [r3, #0]
    2c90:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2c92:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2c96:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2c9a:	b1bb      	cbz	r3, 2ccc <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2c9c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ca0:	2200      	movs	r2, #0
    2ca2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2ca6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2caa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    2cae:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2cb2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2cb6:	2a01      	cmp	r2, #1
    2cb8:	d031      	beq.n	2d1e <nrfx_power_clock_irq_handler+0xb2>
    p_reg->INTENCLR = mask;
    2cba:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cbe:	2202      	movs	r2, #2
    2cc0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2cc4:	4b1a      	ldr	r3, [pc, #104]	; (2d30 <nrfx_power_clock_irq_handler+0xc4>)
    2cc6:	681b      	ldr	r3, [r3, #0]
    2cc8:	2001      	movs	r0, #1
    2cca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2ccc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cd0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    2cd4:	b173      	cbz	r3, 2cf4 <nrfx_power_clock_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cd6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cda:	2200      	movs	r2, #0
    2cdc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2ce0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    2ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
    2ce8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    2cec:	4b10      	ldr	r3, [pc, #64]	; (2d30 <nrfx_power_clock_irq_handler+0xc4>)
    2cee:	681b      	ldr	r3, [r3, #0]
    2cf0:	2004      	movs	r0, #4
    2cf2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2cf4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cf8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    2cfc:	b173      	cbz	r3, 2d1c <nrfx_power_clock_irq_handler+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cfe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d02:	2200      	movs	r2, #0
    2d04:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    2d08:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    2d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2d10:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2d14:	4b06      	ldr	r3, [pc, #24]	; (2d30 <nrfx_power_clock_irq_handler+0xc4>)
    2d16:	681b      	ldr	r3, [r3, #0]
    2d18:	2005      	movs	r0, #5
    2d1a:	4798      	blx	r3
    }
#endif
}
    2d1c:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    2d1e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d22:	2202      	movs	r2, #2
    2d24:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d28:	2201      	movs	r2, #1
    2d2a:	609a      	str	r2, [r3, #8]
}
    2d2c:	e7ce      	b.n	2ccc <nrfx_power_clock_irq_handler+0x60>
    2d2e:	bf00      	nop
    2d30:	20000948 	.word	0x20000948

00002d34 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    2d34:	b508      	push	{r3, lr}
    2d36:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    2d38:	4801      	ldr	r0, [pc, #4]	; (2d40 <nrfx_dppi_channel_alloc+0xc>)
    2d3a:	f7ff ff43 	bl	2bc4 <nrfx_flag32_alloc>
}
    2d3e:	bd08      	pop	{r3, pc}
    2d40:	2000004c 	.word	0x2000004c

00002d44 <nrf_gpio_reconfigure>:
{
    2d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    2d46:	461c      	mov	r4, r3
    2d48:	9f05      	ldr	r7, [sp, #20]
    2d4a:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    2d4c:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    2d50:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2d52:	2801      	cmp	r0, #1
    2d54:	d034      	beq.n	2dc0 <nrf_gpio_reconfigure+0x7c>
        case 0: return NRF_P0;
    2d56:	4d27      	ldr	r5, [pc, #156]	; (2df4 <nrf_gpio_reconfigure+0xb0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    2d58:	f10c 0380 	add.w	r3, ip, #128	; 0x80
    2d5c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2d60:	b381      	cbz	r1, 2dc4 <nrf_gpio_reconfigure+0x80>
    2d62:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    2d64:	b382      	cbz	r2, 2dc8 <nrf_gpio_reconfigure+0x84>
    2d66:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2d6a:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    2d6e:	b374      	cbz	r4, 2dce <nrf_gpio_reconfigure+0x8a>
    2d70:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    2d74:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    2d78:	b367      	cbz	r7, 2dd4 <nrf_gpio_reconfigure+0x90>
    2d7a:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    2d7e:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    2d82:	b356      	cbz	r6, 2dda <nrf_gpio_reconfigure+0x96>
    2d84:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2d88:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    2d8c:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2d90:	b331      	cbz	r1, 2de0 <nrf_gpio_reconfigure+0x9c>
    2d92:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2d94:	b332      	cbz	r2, 2de4 <nrf_gpio_reconfigure+0xa0>
    2d96:	7812      	ldrb	r2, [r2, #0]
    2d98:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2d9a:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2d9c:	b324      	cbz	r4, 2de8 <nrf_gpio_reconfigure+0xa4>
    2d9e:	7822      	ldrb	r2, [r4, #0]
    2da0:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2da2:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2da4:	b317      	cbz	r7, 2dec <nrf_gpio_reconfigure+0xa8>
    2da6:	783a      	ldrb	r2, [r7, #0]
    2da8:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2daa:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    2dac:	b306      	cbz	r6, 2df0 <nrf_gpio_reconfigure+0xac>
    2dae:	7832      	ldrb	r2, [r6, #0]
    2db0:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2db2:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2db4:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    2db6:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    2dba:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    2dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    2dc0:	4d0d      	ldr	r5, [pc, #52]	; (2df8 <nrf_gpio_reconfigure+0xb4>)
    2dc2:	e7c9      	b.n	2d58 <nrf_gpio_reconfigure+0x14>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2dc4:	2000      	movs	r0, #0
    2dc6:	e7cd      	b.n	2d64 <nrf_gpio_reconfigure+0x20>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    2dc8:	f04f 0e00 	mov.w	lr, #0
    2dcc:	e7cd      	b.n	2d6a <nrf_gpio_reconfigure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    2dce:	f04f 0e00 	mov.w	lr, #0
    2dd2:	e7cf      	b.n	2d74 <nrf_gpio_reconfigure+0x30>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    2dd4:	f04f 0e00 	mov.w	lr, #0
    2dd8:	e7d1      	b.n	2d7e <nrf_gpio_reconfigure+0x3a>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    2dda:	f04f 0e00 	mov.w	lr, #0
    2dde:	e7d3      	b.n	2d88 <nrf_gpio_reconfigure+0x44>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2de0:	2300      	movs	r3, #0
    2de2:	e7d7      	b.n	2d94 <nrf_gpio_reconfigure+0x50>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2de4:	2200      	movs	r2, #0
    2de6:	e7d8      	b.n	2d9a <nrf_gpio_reconfigure+0x56>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2de8:	2200      	movs	r2, #0
    2dea:	e7da      	b.n	2da2 <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2dec:	2200      	movs	r2, #0
    2dee:	e7dc      	b.n	2daa <nrf_gpio_reconfigure+0x66>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    2df0:	2200      	movs	r2, #0
    2df2:	e7de      	b.n	2db2 <nrf_gpio_reconfigure+0x6e>
    2df4:	50842500 	.word	0x50842500
    2df8:	50842800 	.word	0x50842800

00002dfc <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
    2dfc:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    2e00:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2e02:	2801      	cmp	r0, #1
    2e04:	d00a      	beq.n	2e1c <nrf_gpio_cfg_default+0x20>
        case 0: return NRF_P0;
    2e06:	4906      	ldr	r1, [pc, #24]	; (2e20 <nrf_gpio_cfg_default+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2e08:	3280      	adds	r2, #128	; 0x80
    2e0a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    2e0e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2e12:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    2e16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    2e1a:	4770      	bx	lr
        case 1: return NRF_P1;
    2e1c:	4901      	ldr	r1, [pc, #4]	; (2e24 <nrf_gpio_cfg_default+0x28>)
    2e1e:	e7f3      	b.n	2e08 <nrf_gpio_cfg_default+0xc>
    2e20:	50842500 	.word	0x50842500
    2e24:	50842800 	.word	0x50842800

00002e28 <nrf_gpio_latches_read_and_clear>:
{
    2e28:	b500      	push	{lr}
    2e2a:	b083      	sub	sp, #12
    2e2c:	4684      	mov	ip, r0
    2e2e:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    2e30:	4b0c      	ldr	r3, [pc, #48]	; (2e64 <nrf_gpio_latches_read_and_clear+0x3c>)
    2e32:	e893 0003 	ldmia.w	r3, {r0, r1}
    2e36:	ab02      	add	r3, sp, #8
    2e38:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    2e3c:	4663      	mov	r3, ip
    2e3e:	e009      	b.n	2e54 <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
    2e40:	a902      	add	r1, sp, #8
    2e42:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    2e46:	f851 1c08 	ldr.w	r1, [r1, #-8]
    2e4a:	6a08      	ldr	r0, [r1, #32]
    2e4c:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    2e50:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
    2e52:	3301      	adds	r3, #1
    2e54:	eb0c 000e 	add.w	r0, ip, lr
    2e58:	4298      	cmp	r0, r3
    2e5a:	d8f1      	bhi.n	2e40 <nrf_gpio_latches_read_and_clear+0x18>
}
    2e5c:	b003      	add	sp, #12
    2e5e:	f85d fb04 	ldr.w	pc, [sp], #4
    2e62:	bf00      	nop
    2e64:	00006c20 	.word	0x00006c20

00002e68 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2e68:	3008      	adds	r0, #8
    2e6a:	4b03      	ldr	r3, [pc, #12]	; (2e78 <pin_in_use+0x10>)
    2e6c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2e70:	f000 0001 	and.w	r0, r0, #1
    2e74:	4770      	bx	lr
    2e76:	bf00      	nop
    2e78:	20000050 	.word	0x20000050

00002e7c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2e7c:	3008      	adds	r0, #8
    2e7e:	4b03      	ldr	r3, [pc, #12]	; (2e8c <pin_in_use_by_te+0x10>)
    2e80:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2e84:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2e88:	4770      	bx	lr
    2e8a:	bf00      	nop
    2e8c:	20000050 	.word	0x20000050

00002e90 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    2e90:	3008      	adds	r0, #8
    2e92:	4b04      	ldr	r3, [pc, #16]	; (2ea4 <pin_has_trigger+0x14>)
    2e94:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2e98:	f010 001c 	ands.w	r0, r0, #28
    2e9c:	bf18      	it	ne
    2e9e:	2001      	movne	r0, #1
    2ea0:	4770      	bx	lr
    2ea2:	bf00      	nop
    2ea4:	20000050 	.word	0x20000050

00002ea8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2ea8:	3008      	adds	r0, #8
    2eaa:	4b03      	ldr	r3, [pc, #12]	; (2eb8 <pin_is_output+0x10>)
    2eac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2eb0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2eb4:	4770      	bx	lr
    2eb6:	bf00      	nop
    2eb8:	20000050 	.word	0x20000050

00002ebc <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2ebc:	3008      	adds	r0, #8
    2ebe:	4b02      	ldr	r3, [pc, #8]	; (2ec8 <pin_te_get+0xc>)
    2ec0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2ec4:	0b40      	lsrs	r0, r0, #13
    2ec6:	4770      	bx	lr
    2ec8:	20000050 	.word	0x20000050

00002ecc <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2ecc:	2200      	movs	r2, #0
    2ece:	e004      	b.n	2eda <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2ed4:	4283      	cmp	r3, r0
    2ed6:	d00f      	beq.n	2ef8 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2ed8:	3201      	adds	r2, #1
    2eda:	2a2f      	cmp	r2, #47	; 0x2f
    2edc:	d80a      	bhi.n	2ef4 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2ede:	f102 0308 	add.w	r3, r2, #8
    2ee2:	4906      	ldr	r1, [pc, #24]	; (2efc <handler_in_use+0x30>)
    2ee4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    2ee8:	f413 7f80 	tst.w	r3, #256	; 0x100
    2eec:	d0f0      	beq.n	2ed0 <handler_in_use+0x4>
    2eee:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2ef2:	e7ef      	b.n	2ed4 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    2ef4:	2000      	movs	r0, #0
    2ef6:	4770      	bx	lr
            return true;
    2ef8:	2001      	movs	r0, #1
}
    2efa:	4770      	bx	lr
    2efc:	20000050 	.word	0x20000050

00002f00 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    2f00:	2300      	movs	r3, #0
    2f02:	b113      	cbz	r3, 2f0a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    2f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2f08:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2f0a:	4a07      	ldr	r2, [pc, #28]	; (2f28 <find_handler+0x28>)
    2f0c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    2f10:	4282      	cmp	r2, r0
    2f12:	d001      	beq.n	2f18 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    2f14:	3301      	adds	r3, #1
    2f16:	e7f4      	b.n	2f02 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2f18:	4a03      	ldr	r2, [pc, #12]	; (2f28 <find_handler+0x28>)
    2f1a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2f1e:	6852      	ldr	r2, [r2, #4]
    2f20:	428a      	cmp	r2, r1
    2f22:	d1f7      	bne.n	2f14 <find_handler+0x14>
            return i;
    2f24:	4618      	mov	r0, r3
    2f26:	4770      	bx	lr
    2f28:	20000050 	.word	0x20000050

00002f2c <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2f2c:	f100 0208 	add.w	r2, r0, #8
    2f30:	4b0e      	ldr	r3, [pc, #56]	; (2f6c <get_initial_sense+0x40>)
    2f32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2f36:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    2f3a:	2b04      	cmp	r3, #4
    2f3c:	d010      	beq.n	2f60 <get_initial_sense+0x34>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    2f3e:	2b05      	cmp	r3, #5
    2f40:	d010      	beq.n	2f64 <get_initial_sense+0x38>
    *p_pin = pin_number & 0x1F;
    2f42:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    2f46:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2f48:	2801      	cmp	r0, #1
    2f4a:	d007      	beq.n	2f5c <get_initial_sense+0x30>
        case 0: return NRF_P0;
    2f4c:	4b08      	ldr	r3, [pc, #32]	; (2f70 <get_initial_sense+0x44>)
    return p_reg->IN;
    2f4e:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2f50:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2f52:	f013 0f01 	tst.w	r3, #1
    2f56:	d007      	beq.n	2f68 <get_initial_sense+0x3c>
    2f58:	2003      	movs	r0, #3
    2f5a:	4770      	bx	lr
        case 1: return NRF_P1;
    2f5c:	4b05      	ldr	r3, [pc, #20]	; (2f74 <get_initial_sense+0x48>)
    2f5e:	e7f6      	b.n	2f4e <get_initial_sense+0x22>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    2f60:	2003      	movs	r0, #3
    2f62:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    2f64:	2002      	movs	r0, #2
    2f66:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2f68:	2002      	movs	r0, #2
    }

    return sense;
}
    2f6a:	4770      	bx	lr
    2f6c:	20000050 	.word	0x20000050
    2f70:	50842500 	.word	0x50842500
    2f74:	50842800 	.word	0x50842800

00002f78 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2f78:	3008      	adds	r0, #8
    2f7a:	4b06      	ldr	r3, [pc, #24]	; (2f94 <channel_handler_get+0x1c>)
    2f7c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    2f80:	f410 7f80 	tst.w	r0, #256	; 0x100
    2f84:	d004      	beq.n	2f90 <channel_handler_get+0x18>
    2f86:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    2f8a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2f8e:	4770      	bx	lr
        return NULL;
    2f90:	2000      	movs	r0, #0
}
    2f92:	4770      	bx	lr
    2f94:	20000050 	.word	0x20000050

00002f98 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2f98:	b570      	push	{r4, r5, r6, lr}
    2f9a:	4604      	mov	r4, r0
    2f9c:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    2f9e:	f7ff ffeb 	bl	2f78 <channel_handler_get>

    if (handler)
    2fa2:	b120      	cbz	r0, 2fae <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    2fa4:	6806      	ldr	r6, [r0, #0]
    2fa6:	6842      	ldr	r2, [r0, #4]
    2fa8:	4629      	mov	r1, r5
    2faa:	4620      	mov	r0, r4
    2fac:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    2fae:	4b04      	ldr	r3, [pc, #16]	; (2fc0 <call_handler+0x28>)
    2fb0:	689b      	ldr	r3, [r3, #8]
    2fb2:	b123      	cbz	r3, 2fbe <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2fb4:	4a02      	ldr	r2, [pc, #8]	; (2fc0 <call_handler+0x28>)
    2fb6:	68d2      	ldr	r2, [r2, #12]
    2fb8:	4629      	mov	r1, r5
    2fba:	4620      	mov	r0, r4
    2fbc:	4798      	blx	r3
    }
}
    2fbe:	bd70      	pop	{r4, r5, r6, pc}
    2fc0:	20000050 	.word	0x20000050

00002fc4 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    2fc4:	b570      	push	{r4, r5, r6, lr}
    2fc6:	4606      	mov	r6, r0
    2fc8:	460c      	mov	r4, r1
    2fca:	4615      	mov	r5, r2
    if (is_level(trigger))
    2fcc:	4608      	mov	r0, r1
    2fce:	f003 fa21 	bl	6414 <is_level>
    2fd2:	b960      	cbnz	r0, 2fee <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2fd4:	2d02      	cmp	r5, #2
    2fd6:	d026      	beq.n	3026 <next_sense_cond_call_handler+0x62>
    2fd8:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    2fda:	4630      	mov	r0, r6
    2fdc:	f003 f9f2 	bl	63c4 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    2fe0:	2c03      	cmp	r4, #3
    2fe2:	d024      	beq.n	302e <next_sense_cond_call_handler+0x6a>
    2fe4:	2d02      	cmp	r5, #2
    2fe6:	d020      	beq.n	302a <next_sense_cond_call_handler+0x66>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    2fe8:	2d03      	cmp	r5, #3
    2fea:	d025      	beq.n	3038 <next_sense_cond_call_handler+0x74>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    2fec:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    2fee:	4621      	mov	r1, r4
    2ff0:	4630      	mov	r0, r6
    2ff2:	f7ff ffd1 	bl	2f98 <call_handler>
    *p_pin = pin_number & 0x1F;
    2ff6:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    2ffa:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2ffc:	2a01      	cmp	r2, #1
    2ffe:	d010      	beq.n	3022 <next_sense_cond_call_handler+0x5e>
        case 0: return NRF_P0;
    3000:	4a0f      	ldr	r2, [pc, #60]	; (3040 <next_sense_cond_call_handler+0x7c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3002:	3380      	adds	r3, #128	; 0x80
    3004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3008:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    300c:	429d      	cmp	r5, r3
    300e:	d1ed      	bne.n	2fec <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3010:	2100      	movs	r1, #0
    3012:	4630      	mov	r0, r6
    3014:	f003 f9d6 	bl	63c4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3018:	4629      	mov	r1, r5
    301a:	4630      	mov	r0, r6
    301c:	f003 f9d2 	bl	63c4 <nrf_gpio_cfg_sense_set>
    3020:	e7e4      	b.n	2fec <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    3022:	4a08      	ldr	r2, [pc, #32]	; (3044 <next_sense_cond_call_handler+0x80>)
    3024:	e7ed      	b.n	3002 <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3026:	2103      	movs	r1, #3
    3028:	e7d7      	b.n	2fda <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    302a:	2c01      	cmp	r4, #1
    302c:	d1dc      	bne.n	2fe8 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    302e:	4621      	mov	r1, r4
    3030:	4630      	mov	r0, r6
    3032:	f7ff ffb1 	bl	2f98 <call_handler>
}
    3036:	e7d9      	b.n	2fec <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3038:	2c02      	cmp	r4, #2
    303a:	d1d7      	bne.n	2fec <next_sense_cond_call_handler+0x28>
    303c:	e7f7      	b.n	302e <next_sense_cond_call_handler+0x6a>
    303e:	bf00      	nop
    3040:	50842500 	.word	0x50842500
    3044:	50842800 	.word	0x50842800

00003048 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3048:	f100 0208 	add.w	r2, r0, #8
    304c:	4b0e      	ldr	r3, [pc, #56]	; (3088 <release_handler+0x40>)
    304e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    3052:	f413 7f80 	tst.w	r3, #256	; 0x100
    3056:	d016      	beq.n	3086 <release_handler+0x3e>
{
    3058:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    305a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    305e:	4610      	mov	r0, r2
    3060:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3064:	4a08      	ldr	r2, [pc, #32]	; (3088 <release_handler+0x40>)
    3066:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    306a:	4620      	mov	r0, r4
    306c:	f7ff ff2e 	bl	2ecc <handler_in_use>
    3070:	b100      	cbz	r0, 3074 <release_handler+0x2c>
}
    3072:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    3074:	4804      	ldr	r0, [pc, #16]	; (3088 <release_handler+0x40>)
    3076:	2300      	movs	r3, #0
    3078:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    307c:	4621      	mov	r1, r4
    307e:	3074      	adds	r0, #116	; 0x74
    3080:	f7ff fdc4 	bl	2c0c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    3084:	e7f5      	b.n	3072 <release_handler+0x2a>
    3086:	4770      	bx	lr
    3088:	20000050 	.word	0x20000050

0000308c <pin_handler_trigger_uninit>:
{
    308c:	b510      	push	{r4, lr}
    308e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    3090:	f7ff fef4 	bl	2e7c <pin_in_use_by_te>
    3094:	b150      	cbz	r0, 30ac <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    3096:	4620      	mov	r0, r4
    3098:	f7ff ff10 	bl	2ebc <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    309c:	4b08      	ldr	r3, [pc, #32]	; (30c0 <pin_handler_trigger_uninit+0x34>)
    309e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    30a2:	2200      	movs	r2, #0
    30a4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    30a8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    30ac:	4620      	mov	r0, r4
    30ae:	f7ff ffcb 	bl	3048 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    30b2:	3408      	adds	r4, #8
    30b4:	4b03      	ldr	r3, [pc, #12]	; (30c4 <pin_handler_trigger_uninit+0x38>)
    30b6:	2200      	movs	r2, #0
    30b8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    30bc:	bd10      	pop	{r4, pc}
    30be:	bf00      	nop
    30c0:	5000d000 	.word	0x5000d000
    30c4:	20000050 	.word	0x20000050

000030c8 <pin_handler_set>:
{
    30c8:	b570      	push	{r4, r5, r6, lr}
    30ca:	b082      	sub	sp, #8
    30cc:	4605      	mov	r5, r0
    30ce:	460e      	mov	r6, r1
    30d0:	4614      	mov	r4, r2
    release_handler(pin);
    30d2:	f7ff ffb9 	bl	3048 <release_handler>
    if (!handler)
    30d6:	b326      	cbz	r6, 3122 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    30d8:	4621      	mov	r1, r4
    30da:	4630      	mov	r0, r6
    30dc:	f7ff ff10 	bl	2f00 <find_handler>
    if (handler_id < 0)
    30e0:	1e03      	subs	r3, r0, #0
    30e2:	db13      	blt.n	310c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    30e4:	4910      	ldr	r1, [pc, #64]	; (3128 <pin_handler_set+0x60>)
    30e6:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    30ea:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    30ee:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    30f0:	f105 0008 	add.w	r0, r5, #8
    30f4:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    30f8:	025b      	lsls	r3, r3, #9
    30fa:	b29b      	uxth	r3, r3
    30fc:	4313      	orrs	r3, r2
    30fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    3102:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    3106:	4809      	ldr	r0, [pc, #36]	; (312c <pin_handler_set+0x64>)
}
    3108:	b002      	add	sp, #8
    310a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    310c:	f10d 0107 	add.w	r1, sp, #7
    3110:	4807      	ldr	r0, [pc, #28]	; (3130 <pin_handler_set+0x68>)
    3112:	f7ff fd57 	bl	2bc4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3116:	4b05      	ldr	r3, [pc, #20]	; (312c <pin_handler_set+0x64>)
    3118:	4298      	cmp	r0, r3
    311a:	d1f5      	bne.n	3108 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    311c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3120:	e7e0      	b.n	30e4 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    3122:	4802      	ldr	r0, [pc, #8]	; (312c <pin_handler_set+0x64>)
    3124:	e7f0      	b.n	3108 <pin_handler_set+0x40>
    3126:	bf00      	nop
    3128:	20000050 	.word	0x20000050
    312c:	0bad0000 	.word	0x0bad0000
    3130:	200000c4 	.word	0x200000c4

00003134 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    3134:	b570      	push	{r4, r5, r6, lr}
    3136:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    3138:	466a      	mov	r2, sp
    313a:	2102      	movs	r1, #2
    313c:	2000      	movs	r0, #0
    313e:	f7ff fe73 	bl	2e28 <nrf_gpio_latches_read_and_clear>
    3142:	e03e      	b.n	31c2 <port_event_handle+0x8e>
    3144:	4e21      	ldr	r6, [pc, #132]	; (31cc <port_event_handle+0x98>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3146:	f105 0380 	add.w	r3, r5, #128	; 0x80
    314a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    314e:	f3c2 4201 	ubfx	r2, r2, #16, #2
    3152:	f7ff ff37 	bl	2fc4 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    3156:	2301      	movs	r3, #1
    3158:	40ab      	lsls	r3, r5
    315a:	6233      	str	r3, [r6, #32]
            while (latch[i])
    315c:	ab02      	add	r3, sp, #8
    315e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3162:	f853 0c08 	ldr.w	r0, [r3, #-8]
    3166:	b1f8      	cbz	r0, 31a8 <port_event_handle+0x74>
                uint32_t pin = NRF_CTZ(latch[i]);
    3168:	fa90 f0a0 	rbit	r0, r0
    316c:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    3170:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3174:	f100 0208 	add.w	r2, r0, #8
    3178:	4b15      	ldr	r3, [pc, #84]	; (31d0 <port_event_handle+0x9c>)
    317a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    317e:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    3182:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    3184:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3188:	f81d 2005 	ldrb.w	r2, [sp, r5]
    318c:	2301      	movs	r3, #1
    318e:	40b3      	lsls	r3, r6
    3190:	43db      	mvns	r3, r3
    3192:	b25b      	sxtb	r3, r3
    3194:	4013      	ands	r3, r2
    3196:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    319a:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    319e:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31a0:	2b01      	cmp	r3, #1
    31a2:	d0cf      	beq.n	3144 <port_event_handle+0x10>
        case 0: return NRF_P0;
    31a4:	4e0b      	ldr	r6, [pc, #44]	; (31d4 <port_event_handle+0xa0>)
    31a6:	e7ce      	b.n	3146 <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    31a8:	3401      	adds	r4, #1
    31aa:	2c01      	cmp	r4, #1
    31ac:	d9d6      	bls.n	315c <port_event_handle+0x28>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    31ae:	4b0a      	ldr	r3, [pc, #40]	; (31d8 <port_event_handle+0xa4>)
    31b0:	2200      	movs	r2, #0
    31b2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    31b6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    31ba:	4668      	mov	r0, sp
    31bc:	f003 f92f 	bl	641e <latch_pending_read_and_check>
    31c0:	b108      	cbz	r0, 31c6 <port_event_handle+0x92>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    31c2:	2400      	movs	r4, #0
    31c4:	e7f1      	b.n	31aa <port_event_handle+0x76>
}
    31c6:	b002      	add	sp, #8
    31c8:	bd70      	pop	{r4, r5, r6, pc}
    31ca:	bf00      	nop
    31cc:	50842800 	.word	0x50842800
    31d0:	20000050 	.word	0x20000050
    31d4:	50842500 	.word	0x50842500
    31d8:	5000d000 	.word	0x5000d000

000031dc <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    31dc:	b538      	push	{r3, r4, r5, lr}
    31de:	4604      	mov	r4, r0
    while (mask)
    31e0:	e018      	b.n	3214 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    31e2:	fa94 f3a4 	rbit	r3, r4
    31e6:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    31ea:	2201      	movs	r2, #1
    31ec:	409a      	lsls	r2, r3
    31ee:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    31f2:	4a0a      	ldr	r2, [pc, #40]	; (321c <gpiote_evt_handle+0x40>)
    31f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    31f8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    31fc:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3200:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3204:	f3c0 4001 	ubfx	r0, r0, #16, #2
    3208:	f003 f902 	bl	6410 <gpiote_polarity_to_trigger>
    320c:	4601      	mov	r1, r0
    320e:	4628      	mov	r0, r5
    3210:	f7ff fec2 	bl	2f98 <call_handler>
    while (mask)
    3214:	2c00      	cmp	r4, #0
    3216:	d1e4      	bne.n	31e2 <gpiote_evt_handle+0x6>
    }
}
    3218:	bd38      	pop	{r3, r4, r5, pc}
    321a:	bf00      	nop
    321c:	5000d000 	.word	0x5000d000

00003220 <nrfx_gpiote_input_configure>:
{
    3220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3224:	b084      	sub	sp, #16
    3226:	4604      	mov	r4, r0
    3228:	4615      	mov	r5, r2
    322a:	461e      	mov	r6, r3
    if (p_input_config)
    322c:	b309      	cbz	r1, 3272 <nrfx_gpiote_input_configure+0x52>
    322e:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    3230:	f003 f8d8 	bl	63e4 <pin_is_task_output>
    3234:	2800      	cmp	r0, #0
    3236:	d13f      	bne.n	32b8 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    3238:	2300      	movs	r3, #0
    323a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    323e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    3242:	9301      	str	r3, [sp, #4]
    3244:	9300      	str	r3, [sp, #0]
    3246:	463b      	mov	r3, r7
    3248:	f10d 020f 	add.w	r2, sp, #15
    324c:	f10d 010e 	add.w	r1, sp, #14
    3250:	4620      	mov	r0, r4
    3252:	f7ff fd77 	bl	2d44 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    3256:	4a39      	ldr	r2, [pc, #228]	; (333c <nrfx_gpiote_input_configure+0x11c>)
    3258:	f104 0108 	add.w	r1, r4, #8
    325c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3260:	f023 0302 	bic.w	r3, r3, #2
    3264:	b29b      	uxth	r3, r3
    3266:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    326a:	f043 0301 	orr.w	r3, r3, #1
    326e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    3272:	b1bd      	cbz	r5, 32a4 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3274:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3276:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    327a:	4620      	mov	r0, r4
    327c:	f7ff fe14 	bl	2ea8 <pin_is_output>
    3280:	b1e0      	cbz	r0, 32bc <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    3282:	f1b8 0f00 	cmp.w	r8, #0
    3286:	d153      	bne.n	3330 <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3288:	4a2c      	ldr	r2, [pc, #176]	; (333c <nrfx_gpiote_input_configure+0x11c>)
    328a:	f104 0108 	add.w	r1, r4, #8
    328e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3292:	f023 031c 	bic.w	r3, r3, #28
    3296:	b29b      	uxth	r3, r3
    3298:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    329c:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    32a0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    32a4:	2e00      	cmp	r6, #0
    32a6:	d047      	beq.n	3338 <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    32a8:	6872      	ldr	r2, [r6, #4]
    32aa:	6831      	ldr	r1, [r6, #0]
    32ac:	4620      	mov	r0, r4
    32ae:	f7ff ff0b 	bl	30c8 <pin_handler_set>
}
    32b2:	b004      	add	sp, #16
    32b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    32b8:	4821      	ldr	r0, [pc, #132]	; (3340 <nrfx_gpiote_input_configure+0x120>)
    32ba:	e7fa      	b.n	32b2 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    32bc:	4a1f      	ldr	r2, [pc, #124]	; (333c <nrfx_gpiote_input_configure+0x11c>)
    32be:	f104 0108 	add.w	r1, r4, #8
    32c2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    32c6:	f023 0320 	bic.w	r3, r3, #32
    32ca:	04db      	lsls	r3, r3, #19
    32cc:	0cdb      	lsrs	r3, r3, #19
    32ce:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    32d2:	f1b8 0f00 	cmp.w	r8, #0
    32d6:	d0d7      	beq.n	3288 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    32d8:	2f03      	cmp	r7, #3
    32da:	d82b      	bhi.n	3334 <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
    32dc:	686b      	ldr	r3, [r5, #4]
    32de:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    32e0:	b947      	cbnz	r7, 32f4 <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
    32e2:	4b18      	ldr	r3, [pc, #96]	; (3344 <nrfx_gpiote_input_configure+0x124>)
    32e4:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    32e8:	2200      	movs	r2, #0
    32ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    32ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    32f2:	e7c9      	b.n	3288 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    32f4:	4638      	mov	r0, r7
    32f6:	f003 f88c 	bl	6412 <gpiote_trigger_to_polarity>
    32fa:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    32fc:	4811      	ldr	r0, [pc, #68]	; (3344 <nrfx_gpiote_input_configure+0x124>)
    32fe:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    3302:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    3306:	f022 0203 	bic.w	r2, r2, #3
    330a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    330e:	4622      	mov	r2, r4
    3310:	4629      	mov	r1, r5
    3312:	f003 f81f 	bl	6354 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3316:	4a09      	ldr	r2, [pc, #36]	; (333c <nrfx_gpiote_input_configure+0x11c>)
    3318:	f104 0108 	add.w	r1, r4, #8
    331c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3320:	036d      	lsls	r5, r5, #13
    3322:	b2ad      	uxth	r5, r5
    3324:	432b      	orrs	r3, r5
    3326:	f043 0320 	orr.w	r3, r3, #32
    332a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    332e:	e7ab      	b.n	3288 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    3330:	4803      	ldr	r0, [pc, #12]	; (3340 <nrfx_gpiote_input_configure+0x120>)
    3332:	e7be      	b.n	32b2 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    3334:	4802      	ldr	r0, [pc, #8]	; (3340 <nrfx_gpiote_input_configure+0x120>)
    3336:	e7bc      	b.n	32b2 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    3338:	4803      	ldr	r0, [pc, #12]	; (3348 <nrfx_gpiote_input_configure+0x128>)
    333a:	e7ba      	b.n	32b2 <nrfx_gpiote_input_configure+0x92>
    333c:	20000050 	.word	0x20000050
    3340:	0bad0004 	.word	0x0bad0004
    3344:	5000d000 	.word	0x5000d000
    3348:	0bad0000 	.word	0x0bad0000

0000334c <nrfx_gpiote_output_configure>:
{
    334c:	b570      	push	{r4, r5, r6, lr}
    334e:	b084      	sub	sp, #16
    3350:	4604      	mov	r4, r0
    3352:	4615      	mov	r5, r2
    if (p_config)
    3354:	b329      	cbz	r1, 33a2 <nrfx_gpiote_output_configure+0x56>
    3356:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3358:	f003 f853 	bl	6402 <pin_is_input>
    335c:	b120      	cbz	r0, 3368 <nrfx_gpiote_output_configure+0x1c>
    335e:	4620      	mov	r0, r4
    3360:	f7ff fd8c 	bl	2e7c <pin_in_use_by_te>
    3364:	2800      	cmp	r0, #0
    3366:	d13a      	bne.n	33de <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3368:	4620      	mov	r0, r4
    336a:	f7ff fd91 	bl	2e90 <pin_has_trigger>
    336e:	b110      	cbz	r0, 3376 <nrfx_gpiote_output_configure+0x2a>
    3370:	7873      	ldrb	r3, [r6, #1]
    3372:	2b01      	cmp	r3, #1
    3374:	d033      	beq.n	33de <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3376:	2301      	movs	r3, #1
    3378:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    337c:	2300      	movs	r3, #0
    337e:	9301      	str	r3, [sp, #4]
    3380:	9600      	str	r6, [sp, #0]
    3382:	1cb3      	adds	r3, r6, #2
    3384:	1c72      	adds	r2, r6, #1
    3386:	f10d 010f 	add.w	r1, sp, #15
    338a:	4620      	mov	r0, r4
    338c:	f7ff fcda 	bl	2d44 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3390:	4a20      	ldr	r2, [pc, #128]	; (3414 <nrfx_gpiote_output_configure+0xc8>)
    3392:	f104 0108 	add.w	r1, r4, #8
    3396:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    339a:	f043 0303 	orr.w	r3, r3, #3
    339e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    33a2:	b395      	cbz	r5, 340a <nrfx_gpiote_output_configure+0xbe>
        if (pin_is_input(pin))
    33a4:	4620      	mov	r0, r4
    33a6:	f003 f82c 	bl	6402 <pin_is_input>
    33aa:	bb80      	cbnz	r0, 340e <nrfx_gpiote_output_configure+0xc2>
        uint32_t ch = p_task_config->task_ch;
    33ac:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    33ae:	4b1a      	ldr	r3, [pc, #104]	; (3418 <nrfx_gpiote_output_configure+0xcc>)
    33b0:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    33b4:	2100      	movs	r1, #0
    33b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
    33ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    33be:	4a15      	ldr	r2, [pc, #84]	; (3414 <nrfx_gpiote_output_configure+0xc8>)
    33c0:	f104 0108 	add.w	r1, r4, #8
    33c4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    33c8:	f023 0320 	bic.w	r3, r3, #32
    33cc:	04db      	lsls	r3, r3, #19
    33ce:	0cdb      	lsrs	r3, r3, #19
    33d0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    33d4:	786b      	ldrb	r3, [r5, #1]
    33d6:	b923      	cbnz	r3, 33e2 <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
    33d8:	4810      	ldr	r0, [pc, #64]	; (341c <nrfx_gpiote_output_configure+0xd0>)
}
    33da:	b004      	add	sp, #16
    33dc:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    33de:	4810      	ldr	r0, [pc, #64]	; (3420 <nrfx_gpiote_output_configure+0xd4>)
    33e0:	e7fb      	b.n	33da <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
    33e2:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    33e4:	9200      	str	r2, [sp, #0]
    33e6:	4622      	mov	r2, r4
    33e8:	4631      	mov	r1, r6
    33ea:	480b      	ldr	r0, [pc, #44]	; (3418 <nrfx_gpiote_output_configure+0xcc>)
    33ec:	f002 ffcb 	bl	6386 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    33f0:	4a08      	ldr	r2, [pc, #32]	; (3414 <nrfx_gpiote_output_configure+0xc8>)
    33f2:	3408      	adds	r4, #8
    33f4:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    33f8:	0376      	lsls	r6, r6, #13
    33fa:	b2b6      	uxth	r6, r6
    33fc:	4333      	orrs	r3, r6
    33fe:	f043 0320 	orr.w	r3, r3, #32
    3402:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    3406:	4805      	ldr	r0, [pc, #20]	; (341c <nrfx_gpiote_output_configure+0xd0>)
    3408:	e7e7      	b.n	33da <nrfx_gpiote_output_configure+0x8e>
    340a:	4804      	ldr	r0, [pc, #16]	; (341c <nrfx_gpiote_output_configure+0xd0>)
    340c:	e7e5      	b.n	33da <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
    340e:	4804      	ldr	r0, [pc, #16]	; (3420 <nrfx_gpiote_output_configure+0xd4>)
    3410:	e7e3      	b.n	33da <nrfx_gpiote_output_configure+0x8e>
    3412:	bf00      	nop
    3414:	20000050 	.word	0x20000050
    3418:	5000d000 	.word	0x5000d000
    341c:	0bad0000 	.word	0x0bad0000
    3420:	0bad0004 	.word	0x0bad0004

00003424 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3424:	4b01      	ldr	r3, [pc, #4]	; (342c <nrfx_gpiote_global_callback_set+0x8>)
    3426:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    3428:	60d9      	str	r1, [r3, #12]
}
    342a:	4770      	bx	lr
    342c:	20000050 	.word	0x20000050

00003430 <nrfx_gpiote_channel_get>:
{
    3430:	b538      	push	{r3, r4, r5, lr}
    3432:	4604      	mov	r4, r0
    3434:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    3436:	f7ff fd21 	bl	2e7c <pin_in_use_by_te>
    343a:	b140      	cbz	r0, 344e <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    343c:	f104 0008 	add.w	r0, r4, #8
    3440:	4b04      	ldr	r3, [pc, #16]	; (3454 <nrfx_gpiote_channel_get+0x24>)
    3442:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    3446:	0b5b      	lsrs	r3, r3, #13
    3448:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    344a:	4803      	ldr	r0, [pc, #12]	; (3458 <nrfx_gpiote_channel_get+0x28>)
}
    344c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    344e:	4803      	ldr	r0, [pc, #12]	; (345c <nrfx_gpiote_channel_get+0x2c>)
    3450:	e7fc      	b.n	344c <nrfx_gpiote_channel_get+0x1c>
    3452:	bf00      	nop
    3454:	20000050 	.word	0x20000050
    3458:	0bad0000 	.word	0x0bad0000
    345c:	0bad0004 	.word	0x0bad0004

00003460 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3460:	4b0f      	ldr	r3, [pc, #60]	; (34a0 <nrfx_gpiote_init+0x40>)
    3462:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    3466:	b10b      	cbz	r3, 346c <nrfx_gpiote_init+0xc>
        return err_code;
    3468:	480e      	ldr	r0, [pc, #56]	; (34a4 <nrfx_gpiote_init+0x44>)
}
    346a:	4770      	bx	lr
{
    346c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    346e:	4c0e      	ldr	r4, [pc, #56]	; (34a8 <nrfx_gpiote_init+0x48>)
    3470:	2260      	movs	r2, #96	; 0x60
    3472:	2100      	movs	r1, #0
    3474:	4620      	mov	r0, r4
    3476:	f002 f8e7 	bl	5648 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    347a:	200d      	movs	r0, #13
    347c:	f001 ffce 	bl	541c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3480:	4b0a      	ldr	r3, [pc, #40]	; (34ac <nrfx_gpiote_init+0x4c>)
    3482:	2200      	movs	r2, #0
    3484:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3488:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    348c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3490:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    3494:	2301      	movs	r3, #1
    3496:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    349a:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
    349c:	4804      	ldr	r0, [pc, #16]	; (34b0 <nrfx_gpiote_init+0x50>)
}
    349e:	bd10      	pop	{r4, pc}
    34a0:	20000050 	.word	0x20000050
    34a4:	0bad0005 	.word	0x0bad0005
    34a8:	20000060 	.word	0x20000060
    34ac:	5000d000 	.word	0x5000d000
    34b0:	0bad0000 	.word	0x0bad0000

000034b4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    34b4:	4b03      	ldr	r3, [pc, #12]	; (34c4 <nrfx_gpiote_is_init+0x10>)
    34b6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    34ba:	3800      	subs	r0, #0
    34bc:	bf18      	it	ne
    34be:	2001      	movne	r0, #1
    34c0:	4770      	bx	lr
    34c2:	bf00      	nop
    34c4:	20000050 	.word	0x20000050

000034c8 <nrfx_gpiote_channel_free>:
{
    34c8:	b508      	push	{r3, lr}
    34ca:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    34cc:	4801      	ldr	r0, [pc, #4]	; (34d4 <nrfx_gpiote_channel_free+0xc>)
    34ce:	f7ff fb9d 	bl	2c0c <nrfx_flag32_free>
}
    34d2:	bd08      	pop	{r3, pc}
    34d4:	200000c0 	.word	0x200000c0

000034d8 <nrfx_gpiote_channel_alloc>:
{
    34d8:	b508      	push	{r3, lr}
    34da:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    34dc:	4801      	ldr	r0, [pc, #4]	; (34e4 <nrfx_gpiote_channel_alloc+0xc>)
    34de:	f7ff fb71 	bl	2bc4 <nrfx_flag32_alloc>
}
    34e2:	bd08      	pop	{r3, pc}
    34e4:	200000c0 	.word	0x200000c0

000034e8 <nrfx_gpiote_trigger_enable>:
{
    34e8:	b538      	push	{r3, r4, r5, lr}
    34ea:	4604      	mov	r4, r0
    34ec:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    34ee:	f7ff fcc5 	bl	2e7c <pin_in_use_by_te>
    34f2:	b300      	cbz	r0, 3536 <nrfx_gpiote_trigger_enable+0x4e>
    34f4:	4620      	mov	r0, r4
    34f6:	f002 ff84 	bl	6402 <pin_is_input>
    34fa:	b1e0      	cbz	r0, 3536 <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    34fc:	4620      	mov	r0, r4
    34fe:	f7ff fcdd 	bl	2ebc <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3502:	0083      	lsls	r3, r0, #2
    3504:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    3508:	b29b      	uxth	r3, r3
    350a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    350e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3512:	2200      	movs	r2, #0
    3514:	601a      	str	r2, [r3, #0]
    3516:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3518:	4a0b      	ldr	r2, [pc, #44]	; (3548 <nrfx_gpiote_trigger_enable+0x60>)
    351a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    351e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    3522:	f043 0301 	orr.w	r3, r3, #1
    3526:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    352a:	b15d      	cbz	r5, 3544 <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    352c:	2301      	movs	r3, #1
    352e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3530:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3534:	e006      	b.n	3544 <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3536:	4620      	mov	r0, r4
    3538:	f7ff fcf8 	bl	2f2c <get_initial_sense>
    353c:	4601      	mov	r1, r0
    353e:	4620      	mov	r0, r4
    3540:	f002 ff40 	bl	63c4 <nrf_gpio_cfg_sense_set>
}
    3544:	bd38      	pop	{r3, r4, r5, pc}
    3546:	bf00      	nop
    3548:	5000d000 	.word	0x5000d000

0000354c <nrfx_gpiote_trigger_disable>:
{
    354c:	b510      	push	{r4, lr}
    354e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3550:	f7ff fc94 	bl	2e7c <pin_in_use_by_te>
    3554:	b1a0      	cbz	r0, 3580 <nrfx_gpiote_trigger_disable+0x34>
    3556:	4620      	mov	r0, r4
    3558:	f002 ff53 	bl	6402 <pin_is_input>
    355c:	b180      	cbz	r0, 3580 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    355e:	4620      	mov	r0, r4
    3560:	f7ff fcac 	bl	2ebc <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3564:	2201      	movs	r2, #1
    3566:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    3568:	4b08      	ldr	r3, [pc, #32]	; (358c <nrfx_gpiote_trigger_disable+0x40>)
    356a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    356e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    3572:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    3576:	f022 0203 	bic.w	r2, r2, #3
    357a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    357e:	e003      	b.n	3588 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3580:	2100      	movs	r1, #0
    3582:	4620      	mov	r0, r4
    3584:	f002 ff1e 	bl	63c4 <nrf_gpio_cfg_sense_set>
}
    3588:	bd10      	pop	{r4, pc}
    358a:	bf00      	nop
    358c:	5000d000 	.word	0x5000d000

00003590 <nrfx_gpiote_pin_uninit>:
{
    3590:	b510      	push	{r4, lr}
    3592:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3594:	f7ff fc68 	bl	2e68 <pin_in_use>
    3598:	b908      	cbnz	r0, 359e <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    359a:	4806      	ldr	r0, [pc, #24]	; (35b4 <nrfx_gpiote_pin_uninit+0x24>)
}
    359c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    359e:	4620      	mov	r0, r4
    35a0:	f7ff ffd4 	bl	354c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    35a4:	4620      	mov	r0, r4
    35a6:	f7ff fd71 	bl	308c <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
    35aa:	4620      	mov	r0, r4
    35ac:	f7ff fc26 	bl	2dfc <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
    35b0:	4801      	ldr	r0, [pc, #4]	; (35b8 <nrfx_gpiote_pin_uninit+0x28>)
    35b2:	e7f3      	b.n	359c <nrfx_gpiote_pin_uninit+0xc>
    35b4:	0bad0004 	.word	0x0bad0004
    35b8:	0bad0000 	.word	0x0bad0000

000035bc <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    35bc:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    35be:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    35c0:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35c4:	2100      	movs	r1, #0
    uint32_t status = 0;
    35c6:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35c8:	e003      	b.n	35d2 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    35ca:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    35cc:	3304      	adds	r3, #4
    35ce:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    35d0:	3101      	adds	r1, #1
    35d2:	2907      	cmp	r1, #7
    35d4:	d814      	bhi.n	3600 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    35d6:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    35da:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    35de:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    35e0:	2a00      	cmp	r2, #0
    35e2:	d0f2      	beq.n	35ca <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    35e4:	4a0c      	ldr	r2, [pc, #48]	; (3618 <nrfx_gpiote_irq_handler+0x5c>)
    35e6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    35ea:	4210      	tst	r0, r2
    35ec:	d0ed      	beq.n	35ca <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    35ee:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    35f2:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    35f6:	2500      	movs	r5, #0
    35f8:	6015      	str	r5, [r2, #0]
    35fa:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    35fc:	4304      	orrs	r4, r0
    35fe:	e7e4      	b.n	35ca <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3600:	4b05      	ldr	r3, [pc, #20]	; (3618 <nrfx_gpiote_irq_handler+0x5c>)
    3602:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3606:	b91b      	cbnz	r3, 3610 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    3608:	4620      	mov	r0, r4
    360a:	f7ff fde7 	bl	31dc <gpiote_evt_handle>
}
    360e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    3610:	f7ff fd90 	bl	3134 <port_event_handle>
    3614:	e7f8      	b.n	3608 <nrfx_gpiote_irq_handler+0x4c>
    3616:	bf00      	nop
    3618:	5000d000 	.word	0x5000d000

0000361c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    361c:	4b03      	ldr	r3, [pc, #12]	; (362c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    361e:	e000      	b.n	3622 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    3620:	3318      	adds	r3, #24
	while (dev < __device_end) {
    3622:	4a03      	ldr	r2, [pc, #12]	; (3630 <z_device_state_init+0x14>)
    3624:	4293      	cmp	r3, r2
    3626:	d3fb      	bcc.n	3620 <z_device_state_init+0x4>
	}
}
    3628:	4770      	bx	lr
    362a:	bf00      	nop
    362c:	00006938 	.word	0x00006938
    3630:	00006998 	.word	0x00006998

00003634 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    3634:	b570      	push	{r4, r5, r6, lr}
    3636:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3638:	4b11      	ldr	r3, [pc, #68]	; (3680 <z_sys_init_run_level+0x4c>)
    363a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    363e:	e009      	b.n	3654 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3640:	4240      	negs	r0, r0
    3642:	e017      	b.n	3674 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    3644:	68eb      	ldr	r3, [r5, #12]
    3646:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3648:	68ea      	ldr	r2, [r5, #12]
    364a:	7853      	ldrb	r3, [r2, #1]
    364c:	f043 0301 	orr.w	r3, r3, #1
    3650:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3652:	3408      	adds	r4, #8
    3654:	1c73      	adds	r3, r6, #1
    3656:	4a0a      	ldr	r2, [pc, #40]	; (3680 <z_sys_init_run_level+0x4c>)
    3658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    365c:	42a3      	cmp	r3, r4
    365e:	d90d      	bls.n	367c <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3660:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    3662:	6823      	ldr	r3, [r4, #0]
    3664:	4628      	mov	r0, r5
    3666:	4798      	blx	r3
		if (dev != NULL) {
    3668:	2d00      	cmp	r5, #0
    366a:	d0f2      	beq.n	3652 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    366c:	2800      	cmp	r0, #0
    366e:	d0eb      	beq.n	3648 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3670:	2800      	cmp	r0, #0
    3672:	dbe5      	blt.n	3640 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    3674:	28ff      	cmp	r0, #255	; 0xff
    3676:	dde5      	ble.n	3644 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3678:	20ff      	movs	r0, #255	; 0xff
    367a:	e7e3      	b.n	3644 <z_sys_init_run_level+0x10>
		}
	}
}
    367c:	bd70      	pop	{r4, r5, r6, pc}
    367e:	bf00      	nop
    3680:	00006e5c 	.word	0x00006e5c

00003684 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3684:	b510      	push	{r4, lr}
    3686:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    3688:	23b0      	movs	r3, #176	; 0xb0
    368a:	4c11      	ldr	r4, [pc, #68]	; (36d0 <init_idle_thread+0x4c>)
    368c:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    3690:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3694:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3698:	4b0e      	ldr	r3, [pc, #56]	; (36d4 <init_idle_thread+0x50>)
    369a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
    369e:	4a0e      	ldr	r2, [pc, #56]	; (36d8 <init_idle_thread+0x54>)
    36a0:	9205      	str	r2, [sp, #20]
    36a2:	2201      	movs	r2, #1
    36a4:	9204      	str	r2, [sp, #16]
    36a6:	220f      	movs	r2, #15
    36a8:	9203      	str	r2, [sp, #12]
    36aa:	2200      	movs	r2, #0
    36ac:	9202      	str	r2, [sp, #8]
    36ae:	9201      	str	r2, [sp, #4]
    36b0:	9300      	str	r3, [sp, #0]
    36b2:	4b0a      	ldr	r3, [pc, #40]	; (36dc <init_idle_thread+0x58>)
    36b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
    36b8:	4909      	ldr	r1, [pc, #36]	; (36e0 <init_idle_thread+0x5c>)
    36ba:	eb01 118c 	add.w	r1, r1, ip, lsl #6
    36be:	4620      	mov	r0, r4
    36c0:	f000 f94a 	bl	3958 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    36c4:	7b63      	ldrb	r3, [r4, #13]
    36c6:	f023 0304 	bic.w	r3, r3, #4
    36ca:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    36cc:	b006      	add	sp, #24
    36ce:	bd10      	pop	{r4, pc}
    36d0:	200001b0 	.word	0x200001b0
    36d4:	20000950 	.word	0x20000950
    36d8:	00006e4c 	.word	0x00006e4c
    36dc:	00003ab5 	.word	0x00003ab5
    36e0:	20001368 	.word	0x20001368

000036e4 <bg_thread_main>:
{
    36e4:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    36e6:	4b0a      	ldr	r3, [pc, #40]	; (3710 <bg_thread_main+0x2c>)
    36e8:	2201      	movs	r2, #1
    36ea:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    36ec:	2003      	movs	r0, #3
    36ee:	f7ff ffa1 	bl	3634 <z_sys_init_run_level>
	boot_banner();
    36f2:	f001 f865 	bl	47c0 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    36f6:	2004      	movs	r0, #4
    36f8:	f7ff ff9c 	bl	3634 <z_sys_init_run_level>
	z_init_static_threads();
    36fc:	f000 f990 	bl	3a20 <z_init_static_threads>
	main();
    3700:	f7fc fe90 	bl	424 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3704:	4a03      	ldr	r2, [pc, #12]	; (3714 <bg_thread_main+0x30>)
    3706:	7b13      	ldrb	r3, [r2, #12]
    3708:	f023 0301 	bic.w	r3, r3, #1
    370c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    370e:	bd08      	pop	{r3, pc}
    3710:	20000b67 	.word	0x20000b67
    3714:	20000260 	.word	0x20000260

00003718 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    3718:	b508      	push	{r3, lr}
    371a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    371c:	4a01      	ldr	r2, [pc, #4]	; (3724 <switch_to_main_thread+0xc>)
    371e:	4802      	ldr	r0, [pc, #8]	; (3728 <switch_to_main_thread+0x10>)
    3720:	f7fd fe64 	bl	13ec <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3724:	000036e5 	.word	0x000036e5
    3728:	20000260 	.word	0x20000260

0000372c <z_bss_zero>:
{
    372c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    372e:	4803      	ldr	r0, [pc, #12]	; (373c <z_bss_zero+0x10>)
    3730:	4a03      	ldr	r2, [pc, #12]	; (3740 <z_bss_zero+0x14>)
    3732:	1a12      	subs	r2, r2, r0
    3734:	2100      	movs	r1, #0
    3736:	f002 feaf 	bl	6498 <z_early_memset>
}
    373a:	bd08      	pop	{r3, pc}
    373c:	20000190 	.word	0x20000190
    3740:	20000b68 	.word	0x20000b68

00003744 <z_init_cpu>:
{
    3744:	b510      	push	{r4, lr}
    3746:	4604      	mov	r4, r0
	init_idle_thread(id);
    3748:	f7ff ff9c 	bl	3684 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    374c:	23b0      	movs	r3, #176	; 0xb0
    374e:	490a      	ldr	r1, [pc, #40]	; (3778 <z_init_cpu+0x34>)
    3750:	fb03 1104 	mla	r1, r3, r4, r1
    3754:	4a09      	ldr	r2, [pc, #36]	; (377c <z_init_cpu+0x38>)
    3756:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    375a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    375e:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    3760:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3762:	4b07      	ldr	r3, [pc, #28]	; (3780 <z_init_cpu+0x3c>)
    3764:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    3768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    376c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3770:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    3774:	6053      	str	r3, [r2, #4]
}
    3776:	bd10      	pop	{r4, pc}
    3778:	200001b0 	.word	0x200001b0
    377c:	20000950 	.word	0x20000950
    3780:	20000b68 	.word	0x20000b68

00003784 <prepare_multithreading>:
{
    3784:	b570      	push	{r4, r5, r6, lr}
    3786:	b086      	sub	sp, #24
	z_sched_init();
    3788:	f000 fda6 	bl	42d8 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    378c:	4d10      	ldr	r5, [pc, #64]	; (37d0 <prepare_multithreading+0x4c>)
    378e:	4b11      	ldr	r3, [pc, #68]	; (37d4 <prepare_multithreading+0x50>)
    3790:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3792:	4b11      	ldr	r3, [pc, #68]	; (37d8 <prepare_multithreading+0x54>)
    3794:	9305      	str	r3, [sp, #20]
    3796:	2301      	movs	r3, #1
    3798:	9304      	str	r3, [sp, #16]
    379a:	2400      	movs	r4, #0
    379c:	9403      	str	r4, [sp, #12]
    379e:	9402      	str	r4, [sp, #8]
    37a0:	9401      	str	r4, [sp, #4]
    37a2:	9400      	str	r4, [sp, #0]
    37a4:	4b0d      	ldr	r3, [pc, #52]	; (37dc <prepare_multithreading+0x58>)
    37a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    37aa:	490d      	ldr	r1, [pc, #52]	; (37e0 <prepare_multithreading+0x5c>)
    37ac:	4628      	mov	r0, r5
    37ae:	f000 f8d3 	bl	3958 <z_setup_new_thread>
    37b2:	4606      	mov	r6, r0
    37b4:	7b6b      	ldrb	r3, [r5, #13]
    37b6:	f023 0304 	bic.w	r3, r3, #4
    37ba:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    37bc:	4628      	mov	r0, r5
    37be:	f002 ff50 	bl	6662 <z_ready_thread>
	z_init_cpu(0);
    37c2:	4620      	mov	r0, r4
    37c4:	f7ff ffbe 	bl	3744 <z_init_cpu>
}
    37c8:	4630      	mov	r0, r6
    37ca:	b006      	add	sp, #24
    37cc:	bd70      	pop	{r4, r5, r6, pc}
    37ce:	bf00      	nop
    37d0:	20000260 	.word	0x20000260
    37d4:	20000950 	.word	0x20000950
    37d8:	00006e54 	.word	0x00006e54
    37dc:	000036e5 	.word	0x000036e5
    37e0:	200014a8 	.word	0x200014a8

000037e4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    37e4:	b500      	push	{lr}
    37e6:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    37e8:	2000      	movs	r0, #0
    37ea:	f7ff ff23 	bl	3634 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    37ee:	4b1d      	ldr	r3, [pc, #116]	; (3864 <z_cstart+0x80>)
	uint32_t msp =
    37f0:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    37f4:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    37f8:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    37fc:	4c1a      	ldr	r4, [pc, #104]	; (3868 <z_cstart+0x84>)
    37fe:	23e0      	movs	r3, #224	; 0xe0
    3800:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3804:	2500      	movs	r5, #0
    3806:	77e5      	strb	r5, [r4, #31]
    3808:	7625      	strb	r5, [r4, #24]
    380a:	7665      	strb	r5, [r4, #25]
    380c:	76a5      	strb	r5, [r4, #26]
    380e:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3812:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3814:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3818:	6263      	str	r3, [r4, #36]	; 0x24
    381a:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    381e:	f7fd ff45 	bl	16ac <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3822:	f7fd fcf9 	bl	1218 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    382a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    382c:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    382e:	f7fe f973 	bl	1b18 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3832:	f7fe f809 	bl	1848 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    3836:	2401      	movs	r4, #1
    3838:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    383c:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3840:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    3842:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    3844:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    3846:	4b09      	ldr	r3, [pc, #36]	; (386c <z_cstart+0x88>)
    3848:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    384c:	f7ff fee6 	bl	361c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    3850:	4620      	mov	r0, r4
    3852:	f7ff feef 	bl	3634 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3856:	2002      	movs	r0, #2
    3858:	f7ff feec 	bl	3634 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    385c:	f7ff ff92 	bl	3784 <prepare_multithreading>
    3860:	f7ff ff5a 	bl	3718 <switch_to_main_thread>
    3864:	20000b68 	.word	0x20000b68
    3868:	e000ed00 	.word	0xe000ed00
    386c:	20000950 	.word	0x20000950

00003870 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    3870:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3872:	4c06      	ldr	r4, [pc, #24]	; (388c <init_mem_slab_module+0x1c>)
	int rc = 0;
    3874:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3876:	e000      	b.n	387a <init_mem_slab_module+0xa>
    3878:	341c      	adds	r4, #28
    387a:	4b05      	ldr	r3, [pc, #20]	; (3890 <init_mem_slab_module+0x20>)
    387c:	429c      	cmp	r4, r3
    387e:	d204      	bcs.n	388a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    3880:	4620      	mov	r0, r4
    3882:	f002 fe11 	bl	64a8 <create_free_list>
		if (rc < 0) {
    3886:	2800      	cmp	r0, #0
    3888:	daf6      	bge.n	3878 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    388a:	bd10      	pop	{r4, pc}
    388c:	2000013c 	.word	0x2000013c
    3890:	2000013c 	.word	0x2000013c

00003894 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3894:	b530      	push	{r4, r5, lr}
    3896:	b083      	sub	sp, #12
    3898:	460d      	mov	r5, r1
	__asm__ volatile(
    389a:	f04f 0120 	mov.w	r1, #32
    389e:	f3ef 8c11 	mrs	ip, BASEPRI
    38a2:	f381 8812 	msr	BASEPRI_MAX, r1
    38a6:	f3bf 8f6f 	isb	sy
    38aa:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    38ac:	6944      	ldr	r4, [r0, #20]
    38ae:	b164      	cbz	r4, 38ca <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    38b0:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    38b2:	6823      	ldr	r3, [r4, #0]
    38b4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    38b6:	6983      	ldr	r3, [r0, #24]
    38b8:	3301      	adds	r3, #1
    38ba:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    38bc:	2000      	movs	r0, #0
	__asm__ volatile(
    38be:	f381 8811 	msr	BASEPRI, r1
    38c2:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    38c6:	b003      	add	sp, #12
    38c8:	bd30      	pop	{r4, r5, pc}
    38ca:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    38ce:	ea53 0402 	orrs.w	r4, r3, r2
    38d2:	d104      	bne.n	38de <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    38d4:	2300      	movs	r3, #0
    38d6:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    38d8:	f06f 000b 	mvn.w	r0, #11
    38dc:	e7ef      	b.n	38be <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    38de:	9200      	str	r2, [sp, #0]
    38e0:	9301      	str	r3, [sp, #4]
    38e2:	4602      	mov	r2, r0
    38e4:	4670      	mov	r0, lr
    38e6:	f000 fbf1 	bl	40cc <z_pend_curr>
		if (result == 0) {
    38ea:	2800      	cmp	r0, #0
    38ec:	d1eb      	bne.n	38c6 <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    38ee:	4b02      	ldr	r3, [pc, #8]	; (38f8 <k_mem_slab_alloc+0x64>)
    38f0:	689b      	ldr	r3, [r3, #8]
    38f2:	695b      	ldr	r3, [r3, #20]
    38f4:	602b      	str	r3, [r5, #0]
		return result;
    38f6:	e7e6      	b.n	38c6 <k_mem_slab_alloc+0x32>
    38f8:	20000950 	.word	0x20000950

000038fc <z_thread_monitor_exit>:
	__asm__ volatile(
    38fc:	f04f 0320 	mov.w	r3, #32
    3900:	f3ef 8111 	mrs	r1, BASEPRI
    3904:	f383 8812 	msr	BASEPRI_MAX, r3
    3908:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    390c:	4b0a      	ldr	r3, [pc, #40]	; (3938 <z_thread_monitor_exit+0x3c>)
    390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3910:	4283      	cmp	r3, r0
    3912:	d104      	bne.n	391e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    3914:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3916:	4b08      	ldr	r3, [pc, #32]	; (3938 <z_thread_monitor_exit+0x3c>)
    3918:	629a      	str	r2, [r3, #40]	; 0x28
    391a:	e007      	b.n	392c <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    391c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    391e:	b113      	cbz	r3, 3926 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3920:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    3922:	4282      	cmp	r2, r0
    3924:	d1fa      	bne.n	391c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    3926:	b10b      	cbz	r3, 392c <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3928:	6f02      	ldr	r2, [r0, #112]	; 0x70
    392a:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    392c:	f381 8811 	msr	BASEPRI, r1
    3930:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    3934:	4770      	bx	lr
    3936:	bf00      	nop
    3938:	20000950 	.word	0x20000950

0000393c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    393c:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    393e:	ea53 0102 	orrs.w	r1, r3, r2
    3942:	d102      	bne.n	394a <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    3944:	f002 fe16 	bl	6574 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3948:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    394a:	4902      	ldr	r1, [pc, #8]	; (3954 <schedule_new_thread+0x18>)
    394c:	3018      	adds	r0, #24
    394e:	f000 fe2b 	bl	45a8 <z_add_timeout>
    3952:	e7f9      	b.n	3948 <schedule_new_thread+0xc>
    3954:	0000669b 	.word	0x0000669b

00003958 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    395c:	b085      	sub	sp, #20
    395e:	4604      	mov	r4, r0
    3960:	460f      	mov	r7, r1
    3962:	4615      	mov	r5, r2
    3964:	461e      	mov	r6, r3
    3966:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    396a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    396e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    3972:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3976:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    397a:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    397c:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    397e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3980:	2204      	movs	r2, #4
    3982:	9911      	ldr	r1, [sp, #68]	; 0x44
    3984:	f002 fdfa 	bl	657c <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    3988:	462a      	mov	r2, r5
    398a:	4639      	mov	r1, r7
    398c:	4620      	mov	r0, r4
    398e:	f002 fddf 	bl	6550 <setup_thread_stack>
    3992:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3994:	f8cd 8008 	str.w	r8, [sp, #8]
    3998:	f8cd 9004 	str.w	r9, [sp, #4]
    399c:	f8cd a000 	str.w	sl, [sp]
    39a0:	4633      	mov	r3, r6
    39a2:	4602      	mov	r2, r0
    39a4:	4639      	mov	r1, r7
    39a6:	4620      	mov	r0, r4
    39a8:	f7fd fcfe 	bl	13a8 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    39ac:	2300      	movs	r3, #0
    39ae:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    39b0:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    39b2:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    39b6:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    39ba:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    39be:	f04f 0320 	mov.w	r3, #32
    39c2:	f3ef 8211 	mrs	r2, BASEPRI
    39c6:	f383 8812 	msr	BASEPRI_MAX, r3
    39ca:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    39ce:	4b13      	ldr	r3, [pc, #76]	; (3a1c <z_setup_new_thread+0xc4>)
    39d0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    39d2:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    39d4:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    39d6:	f382 8811 	msr	BASEPRI, r2
    39da:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    39de:	f1bb 0f00 	cmp.w	fp, #0
    39e2:	d013      	beq.n	3a0c <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    39e4:	221f      	movs	r2, #31
    39e6:	4659      	mov	r1, fp
    39e8:	f104 0074 	add.w	r0, r4, #116	; 0x74
    39ec:	f001 fdd0 	bl	5590 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    39f0:	2300      	movs	r3, #0
    39f2:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    39f6:	4b09      	ldr	r3, [pc, #36]	; (3a1c <z_setup_new_thread+0xc4>)
    39f8:	689b      	ldr	r3, [r3, #8]
    39fa:	b15b      	cbz	r3, 3a14 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    39fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3a00:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    3a04:	4628      	mov	r0, r5
    3a06:	b005      	add	sp, #20
    3a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    3a0c:	2300      	movs	r3, #0
    3a0e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    3a12:	e7f0      	b.n	39f6 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    3a14:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    3a18:	e7f4      	b.n	3a04 <z_setup_new_thread+0xac>
    3a1a:	bf00      	nop
    3a1c:	20000950 	.word	0x20000950

00003a20 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3a20:	b530      	push	{r4, r5, lr}
    3a22:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    3a24:	4c21      	ldr	r4, [pc, #132]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3a26:	e014      	b.n	3a52 <z_init_static_threads+0x32>
		z_setup_new_thread(
    3a28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3a2a:	9305      	str	r3, [sp, #20]
    3a2c:	6a23      	ldr	r3, [r4, #32]
    3a2e:	9304      	str	r3, [sp, #16]
    3a30:	69e3      	ldr	r3, [r4, #28]
    3a32:	9303      	str	r3, [sp, #12]
    3a34:	69a3      	ldr	r3, [r4, #24]
    3a36:	9302      	str	r3, [sp, #8]
    3a38:	6963      	ldr	r3, [r4, #20]
    3a3a:	9301      	str	r3, [sp, #4]
    3a3c:	6923      	ldr	r3, [r4, #16]
    3a3e:	9300      	str	r3, [sp, #0]
    3a40:	68e3      	ldr	r3, [r4, #12]
    3a42:	68a2      	ldr	r2, [r4, #8]
    3a44:	6861      	ldr	r1, [r4, #4]
    3a46:	6820      	ldr	r0, [r4, #0]
    3a48:	f7ff ff86 	bl	3958 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    3a4c:	6823      	ldr	r3, [r4, #0]
    3a4e:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3a50:	3430      	adds	r4, #48	; 0x30
    3a52:	4b17      	ldr	r3, [pc, #92]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a54:	429c      	cmp	r4, r3
    3a56:	d3e7      	bcc.n	3a28 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3a58:	f000 f9ea 	bl	3e30 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3a5c:	4c13      	ldr	r4, [pc, #76]	; (3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>)
    3a5e:	e000      	b.n	3a62 <z_init_static_threads+0x42>
    3a60:	3430      	adds	r4, #48	; 0x30
    3a62:	4b13      	ldr	r3, [pc, #76]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    3a64:	429c      	cmp	r4, r3
    3a66:	d21c      	bcs.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3a68:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3a6a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3a6e:	d0f7      	beq.n	3a60 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    3a70:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    3a72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    3a76:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3a78:	03c9      	lsls	r1, r1, #15
    3a7a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    3a7e:	03c0      	lsls	r0, r0, #15
    3a80:	f240 33e7 	movw	r3, #999	; 0x3e7
    3a84:	18c0      	adds	r0, r0, r3
    3a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3a8a:	f04f 0300 	mov.w	r3, #0
    3a8e:	f141 0100 	adc.w	r1, r1, #0
    3a92:	f7fc fb5f 	bl	154 <__aeabi_uldivmod>
    3a96:	4602      	mov	r2, r0
    3a98:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    3a9a:	4628      	mov	r0, r5
    3a9c:	f7ff ff4e 	bl	393c <schedule_new_thread>
    3aa0:	e7de      	b.n	3a60 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    3aa2:	f000 fbc7 	bl	4234 <k_sched_unlock>
}
    3aa6:	b007      	add	sp, #28
    3aa8:	bd30      	pop	{r4, r5, pc}
    3aaa:	bf00      	nop
    3aac:	00006bc0 	.word	0x00006bc0
    3ab0:	00006bc0 	.word	0x00006bc0

00003ab4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3ab4:	b508      	push	{r3, lr}
    3ab6:	e001      	b.n	3abc <idle+0x8>
	arch_cpu_idle();
    3ab8:	f7fd fbb4 	bl	1224 <arch_cpu_idle>
	__asm__ volatile(
    3abc:	f04f 0220 	mov.w	r2, #32
    3ac0:	f3ef 8311 	mrs	r3, BASEPRI
    3ac4:	f382 8812 	msr	BASEPRI_MAX, r2
    3ac8:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3acc:	f002 febb 	bl	6846 <z_get_next_timeout_expiry>
    3ad0:	4b05      	ldr	r3, [pc, #20]	; (3ae8 <idle+0x34>)
    3ad2:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    3ad4:	4b05      	ldr	r3, [pc, #20]	; (3aec <idle+0x38>)
    3ad6:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3ad8:	2b00      	cmp	r3, #0
    3ada:	d0ed      	beq.n	3ab8 <idle+0x4>
    3adc:	f7fd f99e 	bl	e1c <pm_system_suspend>
    3ae0:	2800      	cmp	r0, #0
    3ae2:	d1eb      	bne.n	3abc <idle+0x8>
    3ae4:	e7e8      	b.n	3ab8 <idle+0x4>
    3ae6:	bf00      	nop
    3ae8:	20000950 	.word	0x20000950
    3aec:	20000b67 	.word	0x20000b67

00003af0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3af4:	b082      	sub	sp, #8
    3af6:	4604      	mov	r4, r0
    3af8:	461e      	mov	r6, r3
    3afa:	f04f 0320 	mov.w	r3, #32
    3afe:	f3ef 8511 	mrs	r5, BASEPRI
    3b02:	f383 8812 	msr	BASEPRI_MAX, r3
    3b06:	f3bf 8f6f 	isb	sy
    3b0a:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3b0c:	68c1      	ldr	r1, [r0, #12]
    3b0e:	b999      	cbnz	r1, 3b38 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    3b10:	2900      	cmp	r1, #0
    3b12:	d151      	bne.n	3bb8 <z_impl_k_mutex_lock+0xc8>
    3b14:	4a36      	ldr	r2, [pc, #216]	; (3bf0 <z_impl_k_mutex_lock+0x100>)
    3b16:	6892      	ldr	r2, [r2, #8]
    3b18:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3b1c:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    3b1e:	3101      	adds	r1, #1
    3b20:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    3b22:	4a33      	ldr	r2, [pc, #204]	; (3bf0 <z_impl_k_mutex_lock+0x100>)
    3b24:	6892      	ldr	r2, [r2, #8]
    3b26:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    3b28:	f383 8811 	msr	BASEPRI, r3
    3b2c:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    3b30:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3b32:	b002      	add	sp, #8
    3b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b38:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3b3a:	6880      	ldr	r0, [r0, #8]
    3b3c:	4a2c      	ldr	r2, [pc, #176]	; (3bf0 <z_impl_k_mutex_lock+0x100>)
    3b3e:	6892      	ldr	r2, [r2, #8]
    3b40:	4290      	cmp	r0, r2
    3b42:	d0e5      	beq.n	3b10 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3b44:	ea56 0107 	orrs.w	r1, r6, r7
    3b48:	d038      	beq.n	3bbc <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
    3b4a:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3b4e:	4641      	mov	r1, r8
    3b50:	f992 000e 	ldrsb.w	r0, [r2, #14]
    3b54:	f002 fd23 	bl	659e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3b58:	4580      	cmp	r8, r0
    3b5a:	dc36      	bgt.n	3bca <z_impl_k_mutex_lock+0xda>
	bool resched = false;
    3b5c:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3b60:	9700      	str	r7, [sp, #0]
    3b62:	9601      	str	r6, [sp, #4]
    3b64:	4622      	mov	r2, r4
    3b66:	4629      	mov	r1, r5
    3b68:	4822      	ldr	r0, [pc, #136]	; (3bf4 <z_impl_k_mutex_lock+0x104>)
    3b6a:	f000 faaf 	bl	40cc <z_pend_curr>
	if (got_mutex == 0) {
    3b6e:	2800      	cmp	r0, #0
    3b70:	d0df      	beq.n	3b32 <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    3b72:	f04f 0320 	mov.w	r3, #32
    3b76:	f3ef 8511 	mrs	r5, BASEPRI
    3b7a:	f383 8812 	msr	BASEPRI_MAX, r3
    3b7e:	f3bf 8f6f 	isb	sy
    3b82:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    3b84:	68a3      	ldr	r3, [r4, #8]
    3b86:	b343      	cbz	r3, 3bda <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3b88:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3b8a:	429c      	cmp	r4, r3
    3b8c:	d023      	beq.n	3bd6 <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3b8e:	b313      	cbz	r3, 3bd6 <z_impl_k_mutex_lock+0xe6>
    3b90:	6921      	ldr	r1, [r4, #16]
    3b92:	f993 000e 	ldrsb.w	r0, [r3, #14]
    3b96:	f002 fd02 	bl	659e <new_prio_for_inheritance>
    3b9a:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    3b9c:	4620      	mov	r0, r4
    3b9e:	f002 fd09 	bl	65b4 <adjust_owner_prio>
    3ba2:	b9e8      	cbnz	r0, 3be0 <z_impl_k_mutex_lock+0xf0>
    3ba4:	f1b8 0f00 	cmp.w	r8, #0
    3ba8:	d11a      	bne.n	3be0 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
    3baa:	f386 8811 	msr	BASEPRI, r6
    3bae:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    3bb2:	f06f 000a 	mvn.w	r0, #10
    3bb6:	e7bc      	b.n	3b32 <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    3bb8:	6922      	ldr	r2, [r4, #16]
    3bba:	e7af      	b.n	3b1c <z_impl_k_mutex_lock+0x2c>
    3bbc:	f385 8811 	msr	BASEPRI, r5
    3bc0:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    3bc4:	f06f 000f 	mvn.w	r0, #15
    3bc8:	e7b3      	b.n	3b32 <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    3bca:	4601      	mov	r1, r0
    3bcc:	4620      	mov	r0, r4
    3bce:	f002 fcf1 	bl	65b4 <adjust_owner_prio>
    3bd2:	4680      	mov	r8, r0
    3bd4:	e7c4      	b.n	3b60 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3bd6:	6921      	ldr	r1, [r4, #16]
    3bd8:	e7e0      	b.n	3b9c <z_impl_k_mutex_lock+0xac>
	if (resched) {
    3bda:	f1b8 0f00 	cmp.w	r8, #0
    3bde:	d0e4      	beq.n	3baa <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
    3be0:	4629      	mov	r1, r5
    3be2:	4804      	ldr	r0, [pc, #16]	; (3bf4 <z_impl_k_mutex_lock+0x104>)
    3be4:	f000 f90e 	bl	3e04 <z_reschedule>
	return -EAGAIN;
    3be8:	f06f 000a 	mvn.w	r0, #10
    3bec:	e7a1      	b.n	3b32 <z_impl_k_mutex_lock+0x42>
    3bee:	bf00      	nop
    3bf0:	20000950 	.word	0x20000950
    3bf4:	2000097c 	.word	0x2000097c

00003bf8 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3bf8:	6883      	ldr	r3, [r0, #8]
    3bfa:	b38b      	cbz	r3, 3c60 <z_impl_k_mutex_unlock+0x68>
{
    3bfc:	b570      	push	{r4, r5, r6, lr}
    3bfe:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3c00:	4a1a      	ldr	r2, [pc, #104]	; (3c6c <z_impl_k_mutex_unlock+0x74>)
    3c02:	6892      	ldr	r2, [r2, #8]
    3c04:	4293      	cmp	r3, r2
    3c06:	d12e      	bne.n	3c66 <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3c08:	68c3      	ldr	r3, [r0, #12]
    3c0a:	2b01      	cmp	r3, #1
    3c0c:	d903      	bls.n	3c16 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    3c0e:	3b01      	subs	r3, #1
    3c10:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    3c12:	2000      	movs	r0, #0
}
    3c14:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    3c16:	f04f 0320 	mov.w	r3, #32
    3c1a:	f3ef 8511 	mrs	r5, BASEPRI
    3c1e:	f383 8812 	msr	BASEPRI_MAX, r3
    3c22:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3c26:	6901      	ldr	r1, [r0, #16]
    3c28:	f002 fcc4 	bl	65b4 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3c2c:	4620      	mov	r0, r4
    3c2e:	f002 fdaf 	bl	6790 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3c32:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3c34:	b168      	cbz	r0, 3c52 <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    3c36:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3c3a:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3c3c:	2400      	movs	r4, #0
    3c3e:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    3c42:	f002 fd0e 	bl	6662 <z_ready_thread>
		z_reschedule(&lock, key);
    3c46:	4629      	mov	r1, r5
    3c48:	4809      	ldr	r0, [pc, #36]	; (3c70 <z_impl_k_mutex_unlock+0x78>)
    3c4a:	f000 f8db 	bl	3e04 <z_reschedule>
	return 0;
    3c4e:	4620      	mov	r0, r4
    3c50:	e7e0      	b.n	3c14 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    3c52:	2000      	movs	r0, #0
    3c54:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3c56:	f385 8811 	msr	BASEPRI, r5
    3c5a:	f3bf 8f6f 	isb	sy
    3c5e:	e7d9      	b.n	3c14 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    3c60:	f06f 0015 	mvn.w	r0, #21
}
    3c64:	4770      	bx	lr
		return -EPERM;
    3c66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3c6a:	e7d3      	b.n	3c14 <z_impl_k_mutex_unlock+0x1c>
    3c6c:	20000950 	.word	0x20000950
    3c70:	2000097c 	.word	0x2000097c

00003c74 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3c74:	b538      	push	{r3, r4, r5, lr}
    3c76:	4604      	mov	r4, r0
	__asm__ volatile(
    3c78:	f04f 0320 	mov.w	r3, #32
    3c7c:	f3ef 8511 	mrs	r5, BASEPRI
    3c80:	f383 8812 	msr	BASEPRI_MAX, r3
    3c84:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3c88:	f002 fd82 	bl	6790 <z_unpend_first_thread>

	if (thread != NULL) {
    3c8c:	b148      	cbz	r0, 3ca2 <z_impl_k_sem_give+0x2e>
    3c8e:	2200      	movs	r2, #0
    3c90:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3c94:	f002 fce5 	bl	6662 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3c98:	4629      	mov	r1, r5
    3c9a:	4807      	ldr	r0, [pc, #28]	; (3cb8 <z_impl_k_sem_give+0x44>)
    3c9c:	f000 f8b2 	bl	3e04 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3ca0:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3ca2:	68a3      	ldr	r3, [r4, #8]
    3ca4:	68e2      	ldr	r2, [r4, #12]
    3ca6:	4293      	cmp	r3, r2
    3ca8:	d003      	beq.n	3cb2 <z_impl_k_sem_give+0x3e>
    3caa:	2201      	movs	r2, #1
    3cac:	4413      	add	r3, r2
    3cae:	60a3      	str	r3, [r4, #8]
}
    3cb0:	e7f2      	b.n	3c98 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3cb2:	2200      	movs	r2, #0
    3cb4:	e7fa      	b.n	3cac <z_impl_k_sem_give+0x38>
    3cb6:	bf00      	nop
    3cb8:	2000097c 	.word	0x2000097c

00003cbc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3cbc:	b510      	push	{r4, lr}
    3cbe:	b082      	sub	sp, #8
    3cc0:	f04f 0420 	mov.w	r4, #32
    3cc4:	f3ef 8111 	mrs	r1, BASEPRI
    3cc8:	f384 8812 	msr	BASEPRI_MAX, r4
    3ccc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3cd0:	6884      	ldr	r4, [r0, #8]
    3cd2:	b144      	cbz	r4, 3ce6 <z_impl_k_sem_take+0x2a>
		sem->count--;
    3cd4:	3c01      	subs	r4, #1
    3cd6:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    3cd8:	f381 8811 	msr	BASEPRI, r1
    3cdc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3ce0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3ce2:	b002      	add	sp, #8
    3ce4:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3ce6:	ea53 0402 	orrs.w	r4, r3, r2
    3cea:	d006      	beq.n	3cfa <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3cec:	9200      	str	r2, [sp, #0]
    3cee:	9301      	str	r3, [sp, #4]
    3cf0:	4602      	mov	r2, r0
    3cf2:	4805      	ldr	r0, [pc, #20]	; (3d08 <z_impl_k_sem_take+0x4c>)
    3cf4:	f000 f9ea 	bl	40cc <z_pend_curr>
	return ret;
    3cf8:	e7f3      	b.n	3ce2 <z_impl_k_sem_take+0x26>
    3cfa:	f381 8811 	msr	BASEPRI, r1
    3cfe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3d02:	f06f 000f 	mvn.w	r0, #15
    3d06:	e7ec      	b.n	3ce2 <z_impl_k_sem_take+0x26>
    3d08:	2000097c 	.word	0x2000097c

00003d0c <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    3d0c:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
    3d0e:	2b7f      	cmp	r3, #127	; 0x7f
    3d10:	d80e      	bhi.n	3d30 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
    3d12:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    3d14:	f013 0f1f 	tst.w	r3, #31
    3d18:	d10c      	bne.n	3d34 <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3d1a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3d1e:	4b08      	ldr	r3, [pc, #32]	; (3d40 <sliceable+0x34>)
    3d20:	681b      	ldr	r3, [r3, #0]
    3d22:	429a      	cmp	r2, r3
    3d24:	db08      	blt.n	3d38 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    3d26:	4b07      	ldr	r3, [pc, #28]	; (3d44 <sliceable+0x38>)
    3d28:	4298      	cmp	r0, r3
    3d2a:	d007      	beq.n	3d3c <sliceable+0x30>
    3d2c:	2001      	movs	r0, #1
    3d2e:	4770      	bx	lr
    3d30:	2000      	movs	r0, #0
    3d32:	4770      	bx	lr
    3d34:	2000      	movs	r0, #0
    3d36:	4770      	bx	lr
    3d38:	2000      	movs	r0, #0
    3d3a:	4770      	bx	lr
    3d3c:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    3d3e:	4770      	bx	lr
    3d40:	20000980 	.word	0x20000980
    3d44:	200001b0 	.word	0x200001b0

00003d48 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3d4c:	bf08      	it	eq
    3d4e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    3d52:	d100      	bne.n	3d56 <add_thread_timeout+0xe>
    3d54:	4770      	bx	lr
{
    3d56:	b508      	push	{r3, lr}
    3d58:	4902      	ldr	r1, [pc, #8]	; (3d64 <add_thread_timeout+0x1c>)
    3d5a:	3018      	adds	r0, #24
    3d5c:	f000 fc24 	bl	45a8 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    3d60:	bd08      	pop	{r3, pc}
    3d62:	bf00      	nop
    3d64:	0000669b 	.word	0x0000669b

00003d68 <z_reset_time_slice>:
{
    3d68:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    3d6a:	4b07      	ldr	r3, [pc, #28]	; (3d88 <z_reset_time_slice+0x20>)
    3d6c:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    3d6e:	b904      	cbnz	r4, 3d72 <z_reset_time_slice+0xa>
}
    3d70:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3d72:	f7fe fce9 	bl	2748 <sys_clock_elapsed>
    3d76:	4404      	add	r4, r0
    3d78:	4b04      	ldr	r3, [pc, #16]	; (3d8c <z_reset_time_slice+0x24>)
    3d7a:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    3d7c:	2100      	movs	r1, #0
    3d7e:	4b02      	ldr	r3, [pc, #8]	; (3d88 <z_reset_time_slice+0x20>)
    3d80:	6818      	ldr	r0, [r3, #0]
    3d82:	f002 fd77 	bl	6874 <z_set_timeout_expiry>
}
    3d86:	e7f3      	b.n	3d70 <z_reset_time_slice+0x8>
    3d88:	20000984 	.word	0x20000984
    3d8c:	20000950 	.word	0x20000950

00003d90 <k_sched_time_slice_set>:
{
    3d90:	b570      	push	{r4, r5, r6, lr}
    3d92:	4604      	mov	r4, r0
    3d94:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    3d96:	2300      	movs	r3, #0
	__asm__ volatile(
    3d98:	f04f 0220 	mov.w	r2, #32
    3d9c:	f3ef 8511 	mrs	r5, BASEPRI
    3da0:	f382 8812 	msr	BASEPRI_MAX, r2
    3da4:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    3da8:	e00e      	b.n	3dc8 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    3daa:	2802      	cmp	r0, #2
    3dac:	bfb8      	it	lt
    3dae:	2002      	movlt	r0, #2
    3db0:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3db2:	4b11      	ldr	r3, [pc, #68]	; (3df8 <k_sched_time_slice_set+0x68>)
    3db4:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
    3db6:	4b11      	ldr	r3, [pc, #68]	; (3dfc <k_sched_time_slice_set+0x6c>)
    3db8:	6898      	ldr	r0, [r3, #8]
    3dba:	f7ff ffd5 	bl	3d68 <z_reset_time_slice>
	__asm__ volatile(
    3dbe:	f385 8811 	msr	BASEPRI, r5
    3dc2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    3dc6:	2301      	movs	r3, #1
    3dc8:	b9a3      	cbnz	r3, 3df4 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    3dca:	4b0c      	ldr	r3, [pc, #48]	; (3dfc <k_sched_time_slice_set+0x6c>)
    3dcc:	2200      	movs	r2, #0
    3dce:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    3dd0:	0c61      	lsrs	r1, r4, #17
    3dd2:	03e0      	lsls	r0, r4, #15
    3dd4:	f240 33e7 	movw	r3, #999	; 0x3e7
    3dd8:	18c0      	adds	r0, r0, r3
    3dda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3dde:	f04f 0300 	mov.w	r3, #0
    3de2:	f141 0100 	adc.w	r1, r1, #0
    3de6:	f7fc f9b5 	bl	154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    3dea:	4b05      	ldr	r3, [pc, #20]	; (3e00 <k_sched_time_slice_set+0x70>)
    3dec:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3dee:	2c00      	cmp	r4, #0
    3df0:	dcdb      	bgt.n	3daa <k_sched_time_slice_set+0x1a>
    3df2:	e7de      	b.n	3db2 <k_sched_time_slice_set+0x22>
}
    3df4:	bd70      	pop	{r4, r5, r6, pc}
    3df6:	bf00      	nop
    3df8:	20000980 	.word	0x20000980
    3dfc:	20000950 	.word	0x20000950
    3e00:	20000984 	.word	0x20000984

00003e04 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    3e04:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    3e06:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3e08:	b959      	cbnz	r1, 3e22 <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3e0a:	f3ef 8205 	mrs	r2, IPSR
    3e0e:	b942      	cbnz	r2, 3e22 <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    3e10:	4a06      	ldr	r2, [pc, #24]	; (3e2c <z_reschedule+0x28>)
    3e12:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
    3e14:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    3e16:	4290      	cmp	r0, r2
    3e18:	d003      	beq.n	3e22 <z_reschedule+0x1e>
	ret = arch_swap(key);
    3e1a:	4608      	mov	r0, r1
    3e1c:	f7fd fa6a 	bl	12f4 <arch_swap>
		z_swap(lock, key);
    3e20:	e003      	b.n	3e2a <z_reschedule+0x26>
    3e22:	f383 8811 	msr	BASEPRI, r3
    3e26:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    3e2a:	bd08      	pop	{r3, pc}
    3e2c:	20000950 	.word	0x20000950

00003e30 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    3e30:	2300      	movs	r3, #0
	__asm__ volatile(
    3e32:	f04f 0220 	mov.w	r2, #32
    3e36:	f3ef 8111 	mrs	r1, BASEPRI
    3e3a:	f382 8812 	msr	BASEPRI_MAX, r2
    3e3e:	f3bf 8f6f 	isb	sy
    3e42:	e009      	b.n	3e58 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3e44:	4b06      	ldr	r3, [pc, #24]	; (3e60 <k_sched_lock+0x30>)
    3e46:	689a      	ldr	r2, [r3, #8]
    3e48:	7bd3      	ldrb	r3, [r2, #15]
    3e4a:	3b01      	subs	r3, #1
    3e4c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3e4e:	f381 8811 	msr	BASEPRI, r1
    3e52:	f3bf 8f6f 	isb	sy
    3e56:	2301      	movs	r3, #1
    3e58:	2b00      	cmp	r3, #0
    3e5a:	d0f3      	beq.n	3e44 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    3e5c:	4770      	bx	lr
    3e5e:	bf00      	nop
    3e60:	20000950 	.word	0x20000950

00003e64 <update_cache>:
{
    3e64:	b538      	push	{r3, r4, r5, lr}
    3e66:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    3e68:	4810      	ldr	r0, [pc, #64]	; (3eac <update_cache+0x48>)
    3e6a:	f002 fbf3 	bl	6654 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3e6e:	4605      	mov	r5, r0
    3e70:	b170      	cbz	r0, 3e90 <update_cache+0x2c>
	if (preempt_ok != 0) {
    3e72:	b984      	cbnz	r4, 3e96 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    3e74:	4b0e      	ldr	r3, [pc, #56]	; (3eb0 <update_cache+0x4c>)
    3e76:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    3e78:	7b5a      	ldrb	r2, [r3, #13]
    3e7a:	f012 0f1f 	tst.w	r2, #31
    3e7e:	d10a      	bne.n	3e96 <update_cache+0x32>
	return node->next != NULL;
    3e80:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3e82:	b942      	cbnz	r2, 3e96 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    3e84:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    3e86:	2a7f      	cmp	r2, #127	; 0x7f
    3e88:	d905      	bls.n	3e96 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    3e8a:	4a09      	ldr	r2, [pc, #36]	; (3eb0 <update_cache+0x4c>)
    3e8c:	61d3      	str	r3, [r2, #28]
    3e8e:	e00b      	b.n	3ea8 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3e90:	4b07      	ldr	r3, [pc, #28]	; (3eb0 <update_cache+0x4c>)
    3e92:	68dd      	ldr	r5, [r3, #12]
    3e94:	e7ed      	b.n	3e72 <update_cache+0xe>
		if (thread != _current) {
    3e96:	4b06      	ldr	r3, [pc, #24]	; (3eb0 <update_cache+0x4c>)
    3e98:	689b      	ldr	r3, [r3, #8]
    3e9a:	42ab      	cmp	r3, r5
    3e9c:	d002      	beq.n	3ea4 <update_cache+0x40>
			z_reset_time_slice(thread);
    3e9e:	4628      	mov	r0, r5
    3ea0:	f7ff ff62 	bl	3d68 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3ea4:	4b02      	ldr	r3, [pc, #8]	; (3eb0 <update_cache+0x4c>)
    3ea6:	61dd      	str	r5, [r3, #28]
}
    3ea8:	bd38      	pop	{r3, r4, r5, pc}
    3eaa:	bf00      	nop
    3eac:	20000970 	.word	0x20000970
    3eb0:	20000950 	.word	0x20000950

00003eb4 <move_thread_to_end_of_prio_q>:
{
    3eb4:	b538      	push	{r3, r4, r5, lr}
    3eb6:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    3eb8:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    3eba:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3ebe:	2b00      	cmp	r3, #0
    3ec0:	db0a      	blt.n	3ed8 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    3ec2:	7b6b      	ldrb	r3, [r5, #13]
    3ec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3ec8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    3eca:	4b1b      	ldr	r3, [pc, #108]	; (3f38 <move_thread_to_end_of_prio_q+0x84>)
    3ecc:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ed0:	429c      	cmp	r4, r3
    3ed2:	d110      	bne.n	3ef6 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ed4:	2400      	movs	r4, #0
    3ed6:	e00e      	b.n	3ef6 <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3ed8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3edc:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3ede:	4601      	mov	r1, r0
    3ee0:	4816      	ldr	r0, [pc, #88]	; (3f3c <move_thread_to_end_of_prio_q+0x88>)
    3ee2:	f002 fba1 	bl	6628 <z_priq_dumb_remove>
}
    3ee6:	e7ec      	b.n	3ec2 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3ee8:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    3eea:	606b      	str	r3, [r5, #4]
	node->next = successor;
    3eec:	602c      	str	r4, [r5, #0]
	prev->next = node;
    3eee:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    3ef0:	6065      	str	r5, [r4, #4]
}
    3ef2:	e017      	b.n	3f24 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ef4:	2400      	movs	r4, #0
    3ef6:	b16c      	cbz	r4, 3f14 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3ef8:	4621      	mov	r1, r4
    3efa:	4628      	mov	r0, r5
    3efc:	f002 fb70 	bl	65e0 <z_sched_prio_cmp>
    3f00:	2800      	cmp	r0, #0
    3f02:	dcf1      	bgt.n	3ee8 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3f04:	2c00      	cmp	r4, #0
    3f06:	d0f6      	beq.n	3ef6 <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    3f08:	4b0b      	ldr	r3, [pc, #44]	; (3f38 <move_thread_to_end_of_prio_q+0x84>)
    3f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3f0c:	429c      	cmp	r4, r3
    3f0e:	d0f1      	beq.n	3ef4 <move_thread_to_end_of_prio_q+0x40>
    3f10:	6824      	ldr	r4, [r4, #0]
    3f12:	e7f0      	b.n	3ef6 <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    3f14:	4b08      	ldr	r3, [pc, #32]	; (3f38 <move_thread_to_end_of_prio_q+0x84>)
    3f16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    3f18:	f103 0120 	add.w	r1, r3, #32
    3f1c:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    3f1e:	606a      	str	r2, [r5, #4]
	tail->next = node;
    3f20:	6015      	str	r5, [r2, #0]
	list->tail = node;
    3f22:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    3f24:	4b04      	ldr	r3, [pc, #16]	; (3f38 <move_thread_to_end_of_prio_q+0x84>)
    3f26:	6898      	ldr	r0, [r3, #8]
    3f28:	42a8      	cmp	r0, r5
    3f2a:	bf14      	ite	ne
    3f2c:	2000      	movne	r0, #0
    3f2e:	2001      	moveq	r0, #1
    3f30:	f7ff ff98 	bl	3e64 <update_cache>
}
    3f34:	bd38      	pop	{r3, r4, r5, pc}
    3f36:	bf00      	nop
    3f38:	20000950 	.word	0x20000950
    3f3c:	20000970 	.word	0x20000970

00003f40 <slice_expired_locked>:
{
    3f40:	b538      	push	{r3, r4, r5, lr}
    3f42:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    3f44:	4b07      	ldr	r3, [pc, #28]	; (3f64 <slice_expired_locked+0x24>)
    3f46:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    3f48:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    3f4a:	f013 0f1f 	tst.w	r3, #31
    3f4e:	d004      	beq.n	3f5a <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    3f50:	4628      	mov	r0, r5
    3f52:	f7ff ff09 	bl	3d68 <z_reset_time_slice>
}
    3f56:	4620      	mov	r0, r4
    3f58:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    3f5a:	4628      	mov	r0, r5
    3f5c:	f7ff ffaa 	bl	3eb4 <move_thread_to_end_of_prio_q>
    3f60:	e7f6      	b.n	3f50 <slice_expired_locked+0x10>
    3f62:	bf00      	nop
    3f64:	20000950 	.word	0x20000950

00003f68 <z_time_slice>:
{
    3f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f6a:	4605      	mov	r5, r0
	__asm__ volatile(
    3f6c:	f04f 0320 	mov.w	r3, #32
    3f70:	f3ef 8611 	mrs	r6, BASEPRI
    3f74:	f383 8812 	msr	BASEPRI_MAX, r3
    3f78:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3f7c:	4b15      	ldr	r3, [pc, #84]	; (3fd4 <z_time_slice+0x6c>)
    3f7e:	6898      	ldr	r0, [r3, #8]
    3f80:	4b15      	ldr	r3, [pc, #84]	; (3fd8 <z_time_slice+0x70>)
    3f82:	681b      	ldr	r3, [r3, #0]
    3f84:	4298      	cmp	r0, r3
    3f86:	d011      	beq.n	3fac <z_time_slice+0x44>
    3f88:	4634      	mov	r4, r6
	pending_current = NULL;
    3f8a:	4b13      	ldr	r3, [pc, #76]	; (3fd8 <z_time_slice+0x70>)
    3f8c:	2200      	movs	r2, #0
    3f8e:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
    3f90:	4b12      	ldr	r3, [pc, #72]	; (3fdc <z_time_slice+0x74>)
    3f92:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
    3f94:	b1b3      	cbz	r3, 3fc4 <z_time_slice+0x5c>
    3f96:	f7ff feb9 	bl	3d0c <sliceable>
    3f9a:	b198      	cbz	r0, 3fc4 <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
    3f9c:	4b0d      	ldr	r3, [pc, #52]	; (3fd4 <z_time_slice+0x6c>)
    3f9e:	691b      	ldr	r3, [r3, #16]
    3fa0:	42ab      	cmp	r3, r5
    3fa2:	dd0a      	ble.n	3fba <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
    3fa4:	1b5b      	subs	r3, r3, r5
    3fa6:	4a0b      	ldr	r2, [pc, #44]	; (3fd4 <z_time_slice+0x6c>)
    3fa8:	6113      	str	r3, [r2, #16]
    3faa:	e00e      	b.n	3fca <z_time_slice+0x62>
		z_reset_time_slice(_current);
    3fac:	f7ff fedc 	bl	3d68 <z_reset_time_slice>
	__asm__ volatile(
    3fb0:	f386 8811 	msr	BASEPRI, r6
    3fb4:	f3bf 8f6f 	isb	sy
		return;
    3fb8:	e00b      	b.n	3fd2 <z_time_slice+0x6a>
			key = slice_expired_locked(key);
    3fba:	4630      	mov	r0, r6
    3fbc:	f7ff ffc0 	bl	3f40 <slice_expired_locked>
    3fc0:	4604      	mov	r4, r0
    3fc2:	e002      	b.n	3fca <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
    3fc4:	4b03      	ldr	r3, [pc, #12]	; (3fd4 <z_time_slice+0x6c>)
    3fc6:	2200      	movs	r2, #0
    3fc8:	611a      	str	r2, [r3, #16]
    3fca:	f384 8811 	msr	BASEPRI, r4
    3fce:	f3bf 8f6f 	isb	sy
}
    3fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fd4:	20000950 	.word	0x20000950
    3fd8:	2000097c 	.word	0x2000097c
    3fdc:	20000984 	.word	0x20000984

00003fe0 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    3fe0:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3fe2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3fe6:	2b00      	cmp	r3, #0
    3fe8:	db33      	blt.n	4052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
{
    3fea:	b570      	push	{r4, r5, r6, lr}
    3fec:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3fee:	f012 0f1f 	tst.w	r2, #31
    3ff2:	d101      	bne.n	3ff8 <ready_thread+0x18>
	return node->next != NULL;
    3ff4:	6986      	ldr	r6, [r0, #24]
    3ff6:	b106      	cbz	r6, 3ffa <ready_thread+0x1a>
}
    3ff8:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    3ffa:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3ffe:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    4000:	4b14      	ldr	r3, [pc, #80]	; (4054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
    4002:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4006:	429d      	cmp	r5, r3
    4008:	d108      	bne.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    400a:	4635      	mov	r5, r6
    400c:	e006      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	sys_dnode_t *const prev = successor->prev;
    400e:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    4010:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4012:	6025      	str	r5, [r4, #0]
	prev->next = node;
    4014:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4016:	606c      	str	r4, [r5, #4]
}
    4018:	e017      	b.n	404a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
    401a:	4635      	mov	r5, r6
    401c:	b16d      	cbz	r5, 403a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    401e:	4629      	mov	r1, r5
    4020:	4620      	mov	r0, r4
    4022:	f002 fadd 	bl	65e0 <z_sched_prio_cmp>
    4026:	2800      	cmp	r0, #0
    4028:	dcf1      	bgt.n	400e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    402a:	2d00      	cmp	r5, #0
    402c:	d0f6      	beq.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	return (node == list->tail) ? NULL : node->next;
    402e:	4b09      	ldr	r3, [pc, #36]	; (4054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
    4030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4032:	429d      	cmp	r5, r3
    4034:	d0f1      	beq.n	401a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    4036:	682d      	ldr	r5, [r5, #0]
    4038:	e7f0      	b.n	401c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	sys_dnode_t *const tail = list->tail;
    403a:	4b06      	ldr	r3, [pc, #24]	; (4054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>)
    403c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    403e:	f103 0120 	add.w	r1, r3, #32
    4042:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    4044:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4046:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4048:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    404a:	2000      	movs	r0, #0
    404c:	f7ff ff0a 	bl	3e64 <update_cache>
}
    4050:	e7d2      	b.n	3ff8 <ready_thread+0x18>
    4052:	4770      	bx	lr
    4054:	20000950 	.word	0x20000950

00004058 <z_sched_start>:
{
    4058:	b510      	push	{r4, lr}
	__asm__ volatile(
    405a:	f04f 0320 	mov.w	r3, #32
    405e:	f3ef 8411 	mrs	r4, BASEPRI
    4062:	f383 8812 	msr	BASEPRI_MAX, r3
    4066:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    406a:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    406c:	f013 0f04 	tst.w	r3, #4
    4070:	d104      	bne.n	407c <z_sched_start+0x24>
	__asm__ volatile(
    4072:	f384 8811 	msr	BASEPRI, r4
    4076:	f3bf 8f6f 	isb	sy
}
    407a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    407c:	f023 0304 	bic.w	r3, r3, #4
    4080:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    4082:	f7ff ffad 	bl	3fe0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4086:	4621      	mov	r1, r4
    4088:	4801      	ldr	r0, [pc, #4]	; (4090 <z_sched_start+0x38>)
    408a:	f7ff febb 	bl	3e04 <z_reschedule>
    408e:	e7f4      	b.n	407a <z_sched_start+0x22>
    4090:	20000988 	.word	0x20000988

00004094 <unready_thread>:
{
    4094:	b510      	push	{r4, lr}
    4096:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    4098:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    409a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    409e:	2b00      	cmp	r3, #0
    40a0:	db08      	blt.n	40b4 <unready_thread+0x20>
	update_cache(thread == _current);
    40a2:	4b08      	ldr	r3, [pc, #32]	; (40c4 <unready_thread+0x30>)
    40a4:	6898      	ldr	r0, [r3, #8]
    40a6:	42a0      	cmp	r0, r4
    40a8:	bf14      	ite	ne
    40aa:	2000      	movne	r0, #0
    40ac:	2001      	moveq	r0, #1
    40ae:	f7ff fed9 	bl	3e64 <update_cache>
}
    40b2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    40b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    40b8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    40ba:	4601      	mov	r1, r0
    40bc:	4802      	ldr	r0, [pc, #8]	; (40c8 <unready_thread+0x34>)
    40be:	f002 fab3 	bl	6628 <z_priq_dumb_remove>
}
    40c2:	e7ee      	b.n	40a2 <unready_thread+0xe>
    40c4:	20000950 	.word	0x20000950
    40c8:	20000970 	.word	0x20000970

000040cc <z_pend_curr>:
{
    40cc:	b510      	push	{r4, lr}
    40ce:	460c      	mov	r4, r1
    40d0:	4611      	mov	r1, r2
	pending_current = _current;
    40d2:	480a      	ldr	r0, [pc, #40]	; (40fc <z_pend_curr+0x30>)
    40d4:	6882      	ldr	r2, [r0, #8]
    40d6:	4b0a      	ldr	r3, [pc, #40]	; (4100 <z_pend_curr+0x34>)
    40d8:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    40da:	f04f 0220 	mov.w	r2, #32
    40de:	f3ef 8311 	mrs	r3, BASEPRI
    40e2:	f382 8812 	msr	BASEPRI_MAX, r2
    40e6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    40ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    40ee:	6880      	ldr	r0, [r0, #8]
    40f0:	f002 fb42 	bl	6778 <pend_locked>
    40f4:	4620      	mov	r0, r4
    40f6:	f7fd f8fd 	bl	12f4 <arch_swap>
}
    40fa:	bd10      	pop	{r4, pc}
    40fc:	20000950 	.word	0x20000950
    4100:	2000097c 	.word	0x2000097c

00004104 <z_set_prio>:
{
    4104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4108:	4605      	mov	r5, r0
    410a:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    410c:	2300      	movs	r3, #0
    410e:	f04f 0220 	mov.w	r2, #32
    4112:	f3ef 8611 	mrs	r6, BASEPRI
    4116:	f382 8812 	msr	BASEPRI_MAX, r2
    411a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    411e:	4618      	mov	r0, r3
    4120:	e029      	b.n	4176 <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    4122:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    4124:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4126:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4128:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    412a:	6065      	str	r5, [r4, #4]
}
    412c:	e017      	b.n	415e <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    412e:	4644      	mov	r4, r8
    4130:	b16c      	cbz	r4, 414e <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4132:	4621      	mov	r1, r4
    4134:	4628      	mov	r0, r5
    4136:	f002 fa53 	bl	65e0 <z_sched_prio_cmp>
    413a:	2800      	cmp	r0, #0
    413c:	dcf1      	bgt.n	4122 <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    413e:	2c00      	cmp	r4, #0
    4140:	d0f6      	beq.n	4130 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    4142:	4b1d      	ldr	r3, [pc, #116]	; (41b8 <z_set_prio+0xb4>)
    4144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4146:	429c      	cmp	r4, r3
    4148:	d0f1      	beq.n	412e <z_set_prio+0x2a>
    414a:	6824      	ldr	r4, [r4, #0]
    414c:	e7f0      	b.n	4130 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    414e:	4b1a      	ldr	r3, [pc, #104]	; (41b8 <z_set_prio+0xb4>)
    4150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4152:	f103 0120 	add.w	r1, r3, #32
    4156:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4158:	606a      	str	r2, [r5, #4]
	tail->next = node;
    415a:	6015      	str	r5, [r2, #0]
	list->tail = node;
    415c:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
    415e:	2001      	movs	r0, #1
    4160:	f7ff fe80 	bl	3e64 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4164:	2001      	movs	r0, #1
    4166:	e001      	b.n	416c <z_set_prio+0x68>
			thread->base.prio = prio;
    4168:	73af      	strb	r7, [r5, #14]
    416a:	2000      	movs	r0, #0
	__asm__ volatile(
    416c:	f386 8811 	msr	BASEPRI, r6
    4170:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4174:	2301      	movs	r3, #1
    4176:	b9e3      	cbnz	r3, 41b2 <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    4178:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    417a:	f013 0f1f 	tst.w	r3, #31
    417e:	d1f3      	bne.n	4168 <z_set_prio+0x64>
	return node->next != NULL;
    4180:	f8d5 8018 	ldr.w	r8, [r5, #24]
    4184:	f1b8 0f00 	cmp.w	r8, #0
    4188:	d1ee      	bne.n	4168 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    418a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    418e:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4190:	f8df 9028 	ldr.w	r9, [pc, #40]	; 41bc <z_set_prio+0xb8>
    4194:	4629      	mov	r1, r5
    4196:	4648      	mov	r0, r9
    4198:	f002 fa46 	bl	6628 <z_priq_dumb_remove>
				thread->base.prio = prio;
    419c:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    419e:	7b6b      	ldrb	r3, [r5, #13]
    41a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    41a4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    41a6:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    41aa:	454c      	cmp	r4, r9
    41ac:	d1c0      	bne.n	4130 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    41ae:	4644      	mov	r4, r8
    41b0:	e7be      	b.n	4130 <z_set_prio+0x2c>
}
    41b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    41b6:	bf00      	nop
    41b8:	20000950 	.word	0x20000950
    41bc:	20000970 	.word	0x20000970

000041c0 <z_impl_k_thread_suspend>:
{
    41c0:	b538      	push	{r3, r4, r5, lr}
    41c2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    41c4:	3018      	adds	r0, #24
    41c6:	f002 fb20 	bl	680a <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    41ca:	2300      	movs	r3, #0
	__asm__ volatile(
    41cc:	f04f 0220 	mov.w	r2, #32
    41d0:	f3ef 8511 	mrs	r5, BASEPRI
    41d4:	f382 8812 	msr	BASEPRI_MAX, r2
    41d8:	f3bf 8f6f 	isb	sy
    41dc:	e010      	b.n	4200 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    41de:	7b63      	ldrb	r3, [r4, #13]
    41e0:	f043 0310 	orr.w	r3, r3, #16
    41e4:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    41e6:	4b11      	ldr	r3, [pc, #68]	; (422c <z_impl_k_thread_suspend+0x6c>)
    41e8:	6898      	ldr	r0, [r3, #8]
    41ea:	42a0      	cmp	r0, r4
    41ec:	bf14      	ite	ne
    41ee:	2000      	movne	r0, #0
    41f0:	2001      	moveq	r0, #1
    41f2:	f7ff fe37 	bl	3e64 <update_cache>
	__asm__ volatile(
    41f6:	f385 8811 	msr	BASEPRI, r5
    41fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    41fe:	2301      	movs	r3, #1
    4200:	b963      	cbnz	r3, 421c <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    4202:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    4204:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4208:	2b00      	cmp	r3, #0
    420a:	dae8      	bge.n	41de <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    420c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4210:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4212:	4621      	mov	r1, r4
    4214:	4806      	ldr	r0, [pc, #24]	; (4230 <z_impl_k_thread_suspend+0x70>)
    4216:	f002 fa07 	bl	6628 <z_priq_dumb_remove>
}
    421a:	e7e0      	b.n	41de <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    421c:	4b03      	ldr	r3, [pc, #12]	; (422c <z_impl_k_thread_suspend+0x6c>)
    421e:	689b      	ldr	r3, [r3, #8]
    4220:	42a3      	cmp	r3, r4
    4222:	d000      	beq.n	4226 <z_impl_k_thread_suspend+0x66>
}
    4224:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    4226:	f002 f9f3 	bl	6610 <z_reschedule_unlocked>
}
    422a:	e7fb      	b.n	4224 <z_impl_k_thread_suspend+0x64>
    422c:	20000950 	.word	0x20000950
    4230:	20000970 	.word	0x20000970

00004234 <k_sched_unlock>:

void k_sched_unlock(void)
{
    4234:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    4236:	2300      	movs	r3, #0
	__asm__ volatile(
    4238:	f04f 0220 	mov.w	r2, #32
    423c:	f3ef 8411 	mrs	r4, BASEPRI
    4240:	f382 8812 	msr	BASEPRI_MAX, r2
    4244:	f3bf 8f6f 	isb	sy
    4248:	e00c      	b.n	4264 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    424a:	4b09      	ldr	r3, [pc, #36]	; (4270 <k_sched_unlock+0x3c>)
    424c:	689a      	ldr	r2, [r3, #8]
    424e:	7bd3      	ldrb	r3, [r2, #15]
    4250:	3301      	adds	r3, #1
    4252:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4254:	2000      	movs	r0, #0
    4256:	f7ff fe05 	bl	3e64 <update_cache>
	__asm__ volatile(
    425a:	f384 8811 	msr	BASEPRI, r4
    425e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4262:	2301      	movs	r3, #1
    4264:	2b00      	cmp	r3, #0
    4266:	d0f0      	beq.n	424a <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    4268:	f002 f9d2 	bl	6610 <z_reschedule_unlocked>
}
    426c:	bd10      	pop	{r4, pc}
    426e:	bf00      	nop
    4270:	20000950 	.word	0x20000950

00004274 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    4274:	7b43      	ldrb	r3, [r0, #13]
    4276:	f013 0f08 	tst.w	r3, #8
    427a:	d12a      	bne.n	42d2 <end_thread+0x5e>
{
    427c:	b510      	push	{r4, lr}
    427e:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    4280:	f043 0208 	orr.w	r2, r3, #8
    4284:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4286:	f023 0220 	bic.w	r2, r3, #32
    428a:	f042 0208 	orr.w	r2, r2, #8
    428e:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    4290:	f012 0f80 	tst.w	r2, #128	; 0x80
    4294:	d113      	bne.n	42be <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    4296:	68a3      	ldr	r3, [r4, #8]
    4298:	b113      	cbz	r3, 42a0 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    429a:	4620      	mov	r0, r4
    429c:	f002 f9cc 	bl	6638 <unpend_thread_no_timeout>
    42a0:	f104 0018 	add.w	r0, r4, #24
    42a4:	f002 fab1 	bl	680a <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    42a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
    42ac:	f002 fa24 	bl	66f8 <unpend_all>
		update_cache(1);
    42b0:	2001      	movs	r0, #1
    42b2:	f7ff fdd7 	bl	3e64 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    42b6:	4620      	mov	r0, r4
    42b8:	f7ff fb20 	bl	38fc <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    42bc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    42be:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    42c2:	f043 0308 	orr.w	r3, r3, #8
    42c6:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    42c8:	4601      	mov	r1, r0
    42ca:	4802      	ldr	r0, [pc, #8]	; (42d4 <end_thread+0x60>)
    42cc:	f002 f9ac 	bl	6628 <z_priq_dumb_remove>
}
    42d0:	e7e1      	b.n	4296 <end_thread+0x22>
    42d2:	4770      	bx	lr
    42d4:	20000970 	.word	0x20000970

000042d8 <z_sched_init>:
{
    42d8:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    42da:	4804      	ldr	r0, [pc, #16]	; (42ec <z_sched_init+0x14>)
    42dc:	f002 fa7a 	bl	67d4 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    42e0:	2100      	movs	r1, #0
    42e2:	4608      	mov	r0, r1
    42e4:	f7ff fd54 	bl	3d90 <k_sched_time_slice_set>
}
    42e8:	bd08      	pop	{r3, pc}
    42ea:	bf00      	nop
    42ec:	2000096c 	.word	0x2000096c

000042f0 <z_impl_k_yield>:
{
    42f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    42f2:	f04f 0320 	mov.w	r3, #32
    42f6:	f3ef 8611 	mrs	r6, BASEPRI
    42fa:	f383 8812 	msr	BASEPRI_MAX, r3
    42fe:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    4302:	4c1d      	ldr	r4, [pc, #116]	; (4378 <z_impl_k_yield+0x88>)
    4304:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4306:	7b4b      	ldrb	r3, [r1, #13]
    4308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    430c:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    430e:	f104 0720 	add.w	r7, r4, #32
    4312:	4638      	mov	r0, r7
    4314:	f002 f988 	bl	6628 <z_priq_dumb_remove>
	queue_thread(_current);
    4318:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    431a:	7b6b      	ldrb	r3, [r5, #13]
    431c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4320:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    4322:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4324:	42bc      	cmp	r4, r7
    4326:	d108      	bne.n	433a <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4328:	2400      	movs	r4, #0
    432a:	e006      	b.n	433a <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    432c:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    432e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4330:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4332:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4334:	6065      	str	r5, [r4, #4]
}
    4336:	e017      	b.n	4368 <z_impl_k_yield+0x78>
    4338:	2400      	movs	r4, #0
    433a:	b16c      	cbz	r4, 4358 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    433c:	4621      	mov	r1, r4
    433e:	4628      	mov	r0, r5
    4340:	f002 f94e 	bl	65e0 <z_sched_prio_cmp>
    4344:	2800      	cmp	r0, #0
    4346:	dcf1      	bgt.n	432c <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4348:	2c00      	cmp	r4, #0
    434a:	d0f6      	beq.n	433a <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    434c:	4b0a      	ldr	r3, [pc, #40]	; (4378 <z_impl_k_yield+0x88>)
    434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4350:	429c      	cmp	r4, r3
    4352:	d0f1      	beq.n	4338 <z_impl_k_yield+0x48>
    4354:	6824      	ldr	r4, [r4, #0]
    4356:	e7f0      	b.n	433a <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    4358:	4b07      	ldr	r3, [pc, #28]	; (4378 <z_impl_k_yield+0x88>)
    435a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    435c:	f103 0120 	add.w	r1, r3, #32
    4360:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4362:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4364:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4366:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    4368:	2001      	movs	r0, #1
    436a:	f7ff fd7b 	bl	3e64 <update_cache>
    436e:	4630      	mov	r0, r6
    4370:	f7fc ffc0 	bl	12f4 <arch_swap>
}
    4374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4376:	bf00      	nop
    4378:	20000950 	.word	0x20000950

0000437c <z_tick_sleep>:
{
    437c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    4380:	ea50 0301 	orrs.w	r3, r0, r1
    4384:	d038      	beq.n	43f8 <z_tick_sleep+0x7c>
    4386:	4604      	mov	r4, r0
    4388:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    438a:	f06f 0301 	mvn.w	r3, #1
    438e:	1a1b      	subs	r3, r3, r0
    4390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4394:	eb62 0201 	sbc.w	r2, r2, r1
    4398:	2b01      	cmp	r3, #1
    439a:	f172 0200 	sbcs.w	r2, r2, #0
    439e:	db2f      	blt.n	4400 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    43a0:	f06f 0501 	mvn.w	r5, #1
    43a4:	1a2d      	subs	r5, r5, r0
    43a6:	f04f 0320 	mov.w	r3, #32
    43aa:	f3ef 8811 	mrs	r8, BASEPRI
    43ae:	f383 8812 	msr	BASEPRI_MAX, r3
    43b2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    43b6:	4f14      	ldr	r7, [pc, #80]	; (4408 <z_tick_sleep+0x8c>)
    43b8:	68b8      	ldr	r0, [r7, #8]
    43ba:	4b14      	ldr	r3, [pc, #80]	; (440c <z_tick_sleep+0x90>)
    43bc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    43be:	f7ff fe69 	bl	4094 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    43c2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    43c4:	4622      	mov	r2, r4
    43c6:	4633      	mov	r3, r6
    43c8:	4911      	ldr	r1, [pc, #68]	; (4410 <z_tick_sleep+0x94>)
    43ca:	3018      	adds	r0, #24
    43cc:	f000 f8ec 	bl	45a8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    43d0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    43d2:	7b53      	ldrb	r3, [r2, #13]
    43d4:	f043 0310 	orr.w	r3, r3, #16
    43d8:	7353      	strb	r3, [r2, #13]
    43da:	4640      	mov	r0, r8
    43dc:	f7fc ff8a 	bl	12f4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    43e0:	f002 fa73 	bl	68ca <sys_clock_tick_get_32>
    43e4:	1a28      	subs	r0, r5, r0
    43e6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    43ea:	2801      	cmp	r0, #1
    43ec:	f173 0300 	sbcs.w	r3, r3, #0
    43f0:	da00      	bge.n	43f4 <z_tick_sleep+0x78>
	return 0;
    43f2:	2000      	movs	r0, #0
}
    43f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    43f8:	f7ff ff7a 	bl	42f0 <z_impl_k_yield>
		return 0;
    43fc:	2000      	movs	r0, #0
    43fe:	e7f9      	b.n	43f4 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4400:	f002 fa63 	bl	68ca <sys_clock_tick_get_32>
    4404:	1905      	adds	r5, r0, r4
    4406:	e7ce      	b.n	43a6 <z_tick_sleep+0x2a>
    4408:	20000950 	.word	0x20000950
    440c:	2000097c 	.word	0x2000097c
    4410:	0000669b 	.word	0x0000669b

00004414 <z_impl_k_sleep>:
{
    4414:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4416:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    441a:	bf08      	it	eq
    441c:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    4420:	d018      	beq.n	4454 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    4422:	f7ff ffab 	bl	437c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    4426:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    4428:	0151      	lsls	r1, r2, #5
    442a:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    442e:	0143      	lsls	r3, r0, #5
    4430:	1a1b      	subs	r3, r3, r0
    4432:	eb61 0102 	sbc.w	r1, r1, r2
    4436:	0089      	lsls	r1, r1, #2
    4438:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    443c:	009b      	lsls	r3, r3, #2
    443e:	181b      	adds	r3, r3, r0
    4440:	eb42 0201 	adc.w	r2, r2, r1
    4444:	00d2      	lsls	r2, r2, #3
    4446:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    444a:	f3c3 3310 	ubfx	r3, r3, #12, #17
    444e:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    4452:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    4454:	4b03      	ldr	r3, [pc, #12]	; (4464 <z_impl_k_sleep+0x50>)
    4456:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4458:	f7ff feb2 	bl	41c0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    445c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4460:	e7f7      	b.n	4452 <z_impl_k_sleep+0x3e>
    4462:	bf00      	nop
    4464:	20000950 	.word	0x20000950

00004468 <z_impl_z_current_get>:
}
    4468:	4b01      	ldr	r3, [pc, #4]	; (4470 <z_impl_z_current_get+0x8>)
    446a:	6898      	ldr	r0, [r3, #8]
    446c:	4770      	bx	lr
    446e:	bf00      	nop
    4470:	20000950 	.word	0x20000950

00004474 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    4474:	b570      	push	{r4, r5, r6, lr}
    4476:	f04f 0320 	mov.w	r3, #32
    447a:	f3ef 8511 	mrs	r5, BASEPRI
    447e:	f383 8812 	msr	BASEPRI_MAX, r3
    4482:	f3bf 8f6f 	isb	sy
    4486:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    4488:	7b03      	ldrb	r3, [r0, #12]
    448a:	f013 0f01 	tst.w	r3, #1
    448e:	d109      	bne.n	44a4 <z_thread_abort+0x30>
    4490:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    4492:	7b43      	ldrb	r3, [r0, #13]
    4494:	f013 0f08 	tst.w	r3, #8
    4498:	d00f      	beq.n	44ba <z_thread_abort+0x46>
	__asm__ volatile(
    449a:	f385 8811 	msr	BASEPRI, r5
    449e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    44a2:	e009      	b.n	44b8 <z_thread_abort+0x44>
    44a4:	f385 8811 	msr	BASEPRI, r5
    44a8:	f3bf 8f6f 	isb	sy
		k_panic();
    44ac:	4040      	eors	r0, r0
    44ae:	f380 8811 	msr	BASEPRI, r0
    44b2:	f04f 0004 	mov.w	r0, #4
    44b6:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    44b8:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    44ba:	f7ff fedb 	bl	4274 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    44be:	4b08      	ldr	r3, [pc, #32]	; (44e0 <z_thread_abort+0x6c>)
    44c0:	689b      	ldr	r3, [r3, #8]
    44c2:	42a3      	cmp	r3, r4
    44c4:	d004      	beq.n	44d0 <z_thread_abort+0x5c>
    44c6:	f386 8811 	msr	BASEPRI, r6
    44ca:	f3bf 8f6f 	isb	sy
    44ce:	e7f3      	b.n	44b8 <z_thread_abort+0x44>
    44d0:	f3ef 8305 	mrs	r3, IPSR
    44d4:	2b00      	cmp	r3, #0
    44d6:	d1f6      	bne.n	44c6 <z_thread_abort+0x52>
    44d8:	4628      	mov	r0, r5
    44da:	f7fc ff0b 	bl	12f4 <arch_swap>
	return ret;
    44de:	e7f2      	b.n	44c6 <z_thread_abort+0x52>
    44e0:	20000950 	.word	0x20000950

000044e4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    44e4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    44e6:	4806      	ldr	r0, [pc, #24]	; (4500 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    44e8:	4a06      	ldr	r2, [pc, #24]	; (4504 <z_data_copy+0x20>)
    44ea:	1a12      	subs	r2, r2, r0
    44ec:	4906      	ldr	r1, [pc, #24]	; (4508 <z_data_copy+0x24>)
    44ee:	f001 ffd7 	bl	64a0 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    44f2:	4a06      	ldr	r2, [pc, #24]	; (450c <z_data_copy+0x28>)
    44f4:	4906      	ldr	r1, [pc, #24]	; (4510 <z_data_copy+0x2c>)
    44f6:	4807      	ldr	r0, [pc, #28]	; (4514 <z_data_copy+0x30>)
    44f8:	f001 ffd2 	bl	64a0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    44fc:	bd08      	pop	{r3, pc}
    44fe:	bf00      	nop
    4500:	20000000 	.word	0x20000000
    4504:	2000018c 	.word	0x2000018c
    4508:	00006f30 	.word	0x00006f30
    450c:	00000000 	.word	0x00000000
    4510:	00006f30 	.word	0x00006f30
    4514:	20000000 	.word	0x20000000

00004518 <first>:
	return list->head == list;
    4518:	4b03      	ldr	r3, [pc, #12]	; (4528 <first+0x10>)
    451a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    451c:	4298      	cmp	r0, r3
    451e:	d000      	beq.n	4522 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    4520:	4770      	bx	lr
    4522:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    4524:	e7fc      	b.n	4520 <first+0x8>
    4526:	bf00      	nop
    4528:	200000cc 	.word	0x200000cc

0000452c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    452c:	b130      	cbz	r0, 453c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    452e:	4a04      	ldr	r2, [pc, #16]	; (4540 <next+0x14>)
    4530:	6852      	ldr	r2, [r2, #4]
    4532:	4290      	cmp	r0, r2
    4534:	d001      	beq.n	453a <next+0xe>
    4536:	6800      	ldr	r0, [r0, #0]
    4538:	4770      	bx	lr
    453a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    453c:	4770      	bx	lr
    453e:	bf00      	nop
    4540:	200000cc 	.word	0x200000cc

00004544 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    4544:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4546:	4b04      	ldr	r3, [pc, #16]	; (4558 <elapsed+0x14>)
    4548:	681b      	ldr	r3, [r3, #0]
    454a:	b10b      	cbz	r3, 4550 <elapsed+0xc>
    454c:	2000      	movs	r0, #0
}
    454e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4550:	f7fe f8fa 	bl	2748 <sys_clock_elapsed>
    4554:	e7fb      	b.n	454e <elapsed+0xa>
    4556:	bf00      	nop
    4558:	20000988 	.word	0x20000988

0000455c <next_timeout>:

static int32_t next_timeout(void)
{
    455c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    455e:	f7ff ffdb 	bl	4518 <first>
    4562:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    4564:	f7ff ffee 	bl	4544 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4568:	b17c      	cbz	r4, 458a <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    456a:	6923      	ldr	r3, [r4, #16]
    456c:	6962      	ldr	r2, [r4, #20]
    456e:	1a1b      	subs	r3, r3, r0
    4570:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    4574:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4578:	f172 0100 	sbcs.w	r1, r2, #0
    457c:	da08      	bge.n	4590 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    457e:	2a00      	cmp	r2, #0
    4580:	db01      	blt.n	4586 <next_timeout+0x2a>
    4582:	4618      	mov	r0, r3
    4584:	e006      	b.n	4594 <next_timeout+0x38>
    4586:	2300      	movs	r3, #0
    4588:	e7fb      	b.n	4582 <next_timeout+0x26>
		ret = MAX_WAIT;
    458a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    458e:	e001      	b.n	4594 <next_timeout+0x38>
    4590:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4594:	4b03      	ldr	r3, [pc, #12]	; (45a4 <next_timeout+0x48>)
    4596:	691b      	ldr	r3, [r3, #16]
    4598:	b113      	cbz	r3, 45a0 <next_timeout+0x44>
    459a:	4283      	cmp	r3, r0
    459c:	da00      	bge.n	45a0 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    459e:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    45a0:	bd10      	pop	{r4, pc}
    45a2:	bf00      	nop
    45a4:	20000950 	.word	0x20000950

000045a8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    45a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    45ac:	bf08      	it	eq
    45ae:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    45b2:	d07b      	beq.n	46ac <z_add_timeout+0x104>
{
    45b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45b8:	4604      	mov	r4, r0
    45ba:	4692      	mov	sl, r2
    45bc:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    45be:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    45c0:	2300      	movs	r3, #0
	__asm__ volatile(
    45c2:	f04f 0220 	mov.w	r2, #32
    45c6:	f3ef 8711 	mrs	r7, BASEPRI
    45ca:	f382 8812 	msr	BASEPRI_MAX, r2
    45ce:	f3bf 8f6f 	isb	sy
    45d2:	e026      	b.n	4622 <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    45d4:	f11a 0801 	adds.w	r8, sl, #1
    45d8:	f145 0900 	adc.w	r9, r5, #0
    45dc:	f7ff ffb2 	bl	4544 <elapsed>
    45e0:	eb18 0300 	adds.w	r3, r8, r0
    45e4:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    45e8:	6123      	str	r3, [r4, #16]
    45ea:	6160      	str	r0, [r4, #20]
    45ec:	e03b      	b.n	4666 <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    45ee:	1a52      	subs	r2, r2, r1
    45f0:	eb66 0303 	sbc.w	r3, r6, r3
    45f4:	6102      	str	r2, [r0, #16]
    45f6:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    45f8:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    45fa:	6063      	str	r3, [r4, #4]
	node->next = successor;
    45fc:	6020      	str	r0, [r4, #0]
	prev->next = node;
    45fe:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4600:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    4602:	e005      	b.n	4610 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    4604:	4b2a      	ldr	r3, [pc, #168]	; (46b0 <z_add_timeout+0x108>)
    4606:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4608:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    460a:	6062      	str	r2, [r4, #4]
	tail->next = node;
    460c:	6014      	str	r4, [r2, #0]
	list->tail = node;
    460e:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4610:	f7ff ff82 	bl	4518 <first>
    4614:	4284      	cmp	r4, r0
    4616:	d03a      	beq.n	468e <z_add_timeout+0xe6>
	__asm__ volatile(
    4618:	f387 8811 	msr	BASEPRI, r7
    461c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4620:	2301      	movs	r3, #1
    4622:	2b00      	cmp	r3, #0
    4624:	d140      	bne.n	46a8 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4626:	4653      	mov	r3, sl
    4628:	f06f 0101 	mvn.w	r1, #1
    462c:	ebb1 010a 	subs.w	r1, r1, sl
    4630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4634:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4638:	2a00      	cmp	r2, #0
    463a:	dbcb      	blt.n	45d4 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    463c:	4a1d      	ldr	r2, [pc, #116]	; (46b4 <z_add_timeout+0x10c>)
    463e:	6811      	ldr	r1, [r2, #0]
    4640:	6852      	ldr	r2, [r2, #4]
    4642:	185b      	adds	r3, r3, r1
    4644:	eb42 0205 	adc.w	r2, r2, r5
    4648:	f06f 0101 	mvn.w	r1, #1
    464c:	1ac9      	subs	r1, r1, r3
    464e:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    4652:	4608      	mov	r0, r1
    4654:	461a      	mov	r2, r3
    4656:	2901      	cmp	r1, #1
    4658:	f173 0300 	sbcs.w	r3, r3, #0
    465c:	da01      	bge.n	4662 <z_add_timeout+0xba>
    465e:	2001      	movs	r0, #1
    4660:	2200      	movs	r2, #0
    4662:	6120      	str	r0, [r4, #16]
    4664:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4666:	f7ff ff57 	bl	4518 <first>
    466a:	2800      	cmp	r0, #0
    466c:	d0ca      	beq.n	4604 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    466e:	6902      	ldr	r2, [r0, #16]
    4670:	6946      	ldr	r6, [r0, #20]
    4672:	6921      	ldr	r1, [r4, #16]
    4674:	6963      	ldr	r3, [r4, #20]
    4676:	4291      	cmp	r1, r2
    4678:	eb73 0e06 	sbcs.w	lr, r3, r6
    467c:	dbb7      	blt.n	45ee <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    467e:	1a89      	subs	r1, r1, r2
    4680:	eb63 0306 	sbc.w	r3, r3, r6
    4684:	6121      	str	r1, [r4, #16]
    4686:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4688:	f7ff ff50 	bl	452c <next>
    468c:	e7ed      	b.n	466a <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    468e:	f7ff ff65 	bl	455c <next_timeout>

			if (next_time == 0 ||
    4692:	4603      	mov	r3, r0
    4694:	b118      	cbz	r0, 469e <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
    4696:	4a08      	ldr	r2, [pc, #32]	; (46b8 <z_add_timeout+0x110>)
    4698:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    469a:	4282      	cmp	r2, r0
    469c:	d0bc      	beq.n	4618 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
    469e:	2100      	movs	r1, #0
    46a0:	4618      	mov	r0, r3
    46a2:	f7fe f81f 	bl	26e4 <sys_clock_set_timeout>
    46a6:	e7b7      	b.n	4618 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    46a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    46ac:	4770      	bx	lr
    46ae:	bf00      	nop
    46b0:	200000cc 	.word	0x200000cc
    46b4:	20000310 	.word	0x20000310
    46b8:	20000950 	.word	0x20000950

000046bc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    46bc:	b570      	push	{r4, r5, r6, lr}
    46be:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    46c0:	f7ff fc52 	bl	3f68 <z_time_slice>
	__asm__ volatile(
    46c4:	f04f 0320 	mov.w	r3, #32
    46c8:	f3ef 8611 	mrs	r6, BASEPRI
    46cc:	f383 8812 	msr	BASEPRI_MAX, r3
    46d0:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    46d4:	4b28      	ldr	r3, [pc, #160]	; (4778 <sys_clock_announce+0xbc>)
    46d6:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    46d8:	e021      	b.n	471e <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    46da:	4a28      	ldr	r2, [pc, #160]	; (477c <sys_clock_announce+0xc0>)
    46dc:	6813      	ldr	r3, [r2, #0]
    46de:	6851      	ldr	r1, [r2, #4]
    46e0:	195b      	adds	r3, r3, r5
    46e2:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    46e6:	6013      	str	r3, [r2, #0]
    46e8:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    46ea:	2200      	movs	r2, #0
    46ec:	2300      	movs	r3, #0
    46ee:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    46f2:	4620      	mov	r0, r4
    46f4:	f002 f872 	bl	67dc <remove_timeout>
	__asm__ volatile(
    46f8:	f386 8811 	msr	BASEPRI, r6
    46fc:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4700:	68a3      	ldr	r3, [r4, #8]
    4702:	4620      	mov	r0, r4
    4704:	4798      	blx	r3
	__asm__ volatile(
    4706:	f04f 0320 	mov.w	r3, #32
    470a:	f3ef 8611 	mrs	r6, BASEPRI
    470e:	f383 8812 	msr	BASEPRI_MAX, r3
    4712:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    4716:	4a18      	ldr	r2, [pc, #96]	; (4778 <sys_clock_announce+0xbc>)
    4718:	6813      	ldr	r3, [r2, #0]
    471a:	1b5b      	subs	r3, r3, r5
    471c:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    471e:	f7ff fefb 	bl	4518 <first>
    4722:	4604      	mov	r4, r0
    4724:	b138      	cbz	r0, 4736 <sys_clock_announce+0x7a>
    4726:	6905      	ldr	r5, [r0, #16]
    4728:	6941      	ldr	r1, [r0, #20]
    472a:	4b13      	ldr	r3, [pc, #76]	; (4778 <sys_clock_announce+0xbc>)
    472c:	681a      	ldr	r2, [r3, #0]
    472e:	17d3      	asrs	r3, r2, #31
    4730:	42aa      	cmp	r2, r5
    4732:	418b      	sbcs	r3, r1
    4734:	dad1      	bge.n	46da <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
    4736:	b144      	cbz	r4, 474a <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    4738:	6923      	ldr	r3, [r4, #16]
    473a:	6962      	ldr	r2, [r4, #20]
    473c:	490e      	ldr	r1, [pc, #56]	; (4778 <sys_clock_announce+0xbc>)
    473e:	6809      	ldr	r1, [r1, #0]
    4740:	1a5b      	subs	r3, r3, r1
    4742:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    4746:	6123      	str	r3, [r4, #16]
    4748:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    474a:	4a0c      	ldr	r2, [pc, #48]	; (477c <sys_clock_announce+0xc0>)
    474c:	4d0a      	ldr	r5, [pc, #40]	; (4778 <sys_clock_announce+0xbc>)
    474e:	6828      	ldr	r0, [r5, #0]
    4750:	6813      	ldr	r3, [r2, #0]
    4752:	6851      	ldr	r1, [r2, #4]
    4754:	181b      	adds	r3, r3, r0
    4756:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    475a:	6013      	str	r3, [r2, #0]
    475c:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    475e:	2400      	movs	r4, #0
    4760:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4762:	f7ff fefb 	bl	455c <next_timeout>
    4766:	4621      	mov	r1, r4
    4768:	f7fd ffbc 	bl	26e4 <sys_clock_set_timeout>
	__asm__ volatile(
    476c:	f386 8811 	msr	BASEPRI, r6
    4770:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4774:	bd70      	pop	{r4, r5, r6, pc}
    4776:	bf00      	nop
    4778:	20000988 	.word	0x20000988
    477c:	20000310 	.word	0x20000310

00004780 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4780:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    4782:	2200      	movs	r2, #0
	__asm__ volatile(
    4784:	f04f 0320 	mov.w	r3, #32
    4788:	f3ef 8411 	mrs	r4, BASEPRI
    478c:	f383 8812 	msr	BASEPRI_MAX, r3
    4790:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    4794:	4613      	mov	r3, r2
    4796:	4611      	mov	r1, r2
    4798:	e00c      	b.n	47b4 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    479a:	f7ff fed3 	bl	4544 <elapsed>
    479e:	4a07      	ldr	r2, [pc, #28]	; (47bc <sys_clock_tick_get+0x3c>)
    47a0:	6813      	ldr	r3, [r2, #0]
    47a2:	6851      	ldr	r1, [r2, #4]
    47a4:	18c3      	adds	r3, r0, r3
    47a6:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    47aa:	f384 8811 	msr	BASEPRI, r4
    47ae:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    47b2:	2201      	movs	r2, #1
    47b4:	2a00      	cmp	r2, #0
    47b6:	d0f0      	beq.n	479a <sys_clock_tick_get+0x1a>
	}
	return t;
}
    47b8:	4618      	mov	r0, r3
    47ba:	bd10      	pop	{r4, pc}
    47bc:	20000310 	.word	0x20000310

000047c0 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    47c0:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    47c2:	4802      	ldr	r0, [pc, #8]	; (47cc <boot_banner+0xc>)
    47c4:	f000 fa1a 	bl	4bfc <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    47c8:	bd08      	pop	{r3, pc}
    47ca:	bf00      	nop
    47cc:	00006e74 	.word	0x00006e74

000047d0 <nrf_cc3xx_platform_init_no_rng>:
    47d0:	b510      	push	{r4, lr}
    47d2:	4c0a      	ldr	r4, [pc, #40]	; (47fc <nrf_cc3xx_platform_init_no_rng+0x2c>)
    47d4:	6823      	ldr	r3, [r4, #0]
    47d6:	b11b      	cbz	r3, 47e0 <nrf_cc3xx_platform_init_no_rng+0x10>
    47d8:	2301      	movs	r3, #1
    47da:	2000      	movs	r0, #0
    47dc:	6023      	str	r3, [r4, #0]
    47de:	bd10      	pop	{r4, pc}
    47e0:	f000 f8f4 	bl	49cc <CC_LibInitNoRng>
    47e4:	2800      	cmp	r0, #0
    47e6:	d0f7      	beq.n	47d8 <nrf_cc3xx_platform_init_no_rng+0x8>
    47e8:	3801      	subs	r0, #1
    47ea:	2807      	cmp	r0, #7
    47ec:	d803      	bhi.n	47f6 <nrf_cc3xx_platform_init_no_rng+0x26>
    47ee:	4b04      	ldr	r3, [pc, #16]	; (4800 <nrf_cc3xx_platform_init_no_rng+0x30>)
    47f0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    47f4:	bd10      	pop	{r4, pc}
    47f6:	4803      	ldr	r0, [pc, #12]	; (4804 <nrf_cc3xx_platform_init_no_rng+0x34>)
    47f8:	bd10      	pop	{r4, pc}
    47fa:	bf00      	nop
    47fc:	2000098c 	.word	0x2000098c
    4800:	00006ea4 	.word	0x00006ea4
    4804:	ffff8ffe 	.word	0xffff8ffe

00004808 <nrf_cc3xx_platform_abort>:
    4808:	f3bf 8f4f 	dsb	sy
    480c:	4905      	ldr	r1, [pc, #20]	; (4824 <nrf_cc3xx_platform_abort+0x1c>)
    480e:	4b06      	ldr	r3, [pc, #24]	; (4828 <nrf_cc3xx_platform_abort+0x20>)
    4810:	68ca      	ldr	r2, [r1, #12]
    4812:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4816:	4313      	orrs	r3, r2
    4818:	60cb      	str	r3, [r1, #12]
    481a:	f3bf 8f4f 	dsb	sy
    481e:	bf00      	nop
    4820:	e7fd      	b.n	481e <nrf_cc3xx_platform_abort+0x16>
    4822:	bf00      	nop
    4824:	e000ed00 	.word	0xe000ed00
    4828:	05fa0004 	.word	0x05fa0004

0000482c <CC_PalAbort>:
    482c:	b430      	push	{r4, r5}
    482e:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    4832:	2500      	movs	r5, #0
    4834:	4b0b      	ldr	r3, [pc, #44]	; (4864 <CC_PalAbort+0x38>)
    4836:	4c0c      	ldr	r4, [pc, #48]	; (4868 <CC_PalAbort+0x3c>)
    4838:	490c      	ldr	r1, [pc, #48]	; (486c <CC_PalAbort+0x40>)
    483a:	6849      	ldr	r1, [r1, #4]
    483c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4840:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    4844:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4848:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    484c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    4850:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    4854:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    4858:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    485c:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    4860:	bc30      	pop	{r4, r5}
    4862:	4708      	bx	r1
    4864:	50845000 	.word	0x50845000
    4868:	50844000 	.word	0x50844000
    486c:	200000d4 	.word	0x200000d4

00004870 <nrf_cc3xx_platform_set_abort>:
    4870:	4b02      	ldr	r3, [pc, #8]	; (487c <nrf_cc3xx_platform_set_abort+0xc>)
    4872:	e9d0 1200 	ldrd	r1, r2, [r0]
    4876:	e9c3 1200 	strd	r1, r2, [r3]
    487a:	4770      	bx	lr
    487c:	200000d4 	.word	0x200000d4

00004880 <mutex_free>:
    4880:	b510      	push	{r4, lr}
    4882:	4604      	mov	r4, r0
    4884:	b150      	cbz	r0, 489c <mutex_free+0x1c>
    4886:	6863      	ldr	r3, [r4, #4]
    4888:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    488c:	d005      	beq.n	489a <mutex_free+0x1a>
    488e:	4a06      	ldr	r2, [pc, #24]	; (48a8 <mutex_free+0x28>)
    4890:	4293      	cmp	r3, r2
    4892:	d002      	beq.n	489a <mutex_free+0x1a>
    4894:	2300      	movs	r3, #0
    4896:	6062      	str	r2, [r4, #4]
    4898:	6023      	str	r3, [r4, #0]
    489a:	bd10      	pop	{r4, pc}
    489c:	4b03      	ldr	r3, [pc, #12]	; (48ac <mutex_free+0x2c>)
    489e:	4804      	ldr	r0, [pc, #16]	; (48b0 <mutex_free+0x30>)
    48a0:	685b      	ldr	r3, [r3, #4]
    48a2:	4798      	blx	r3
    48a4:	e7ef      	b.n	4886 <mutex_free+0x6>
    48a6:	bf00      	nop
    48a8:	a95c5f2c 	.word	0xa95c5f2c
    48ac:	200000d4 	.word	0x200000d4
    48b0:	00006ec4 	.word	0x00006ec4

000048b4 <mutex_lock>:
    48b4:	b1c8      	cbz	r0, 48ea <mutex_lock+0x36>
    48b6:	6843      	ldr	r3, [r0, #4]
    48b8:	4a0d      	ldr	r2, [pc, #52]	; (48f0 <mutex_lock+0x3c>)
    48ba:	4293      	cmp	r3, r2
    48bc:	d013      	beq.n	48e6 <mutex_lock+0x32>
    48be:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    48c2:	d00e      	beq.n	48e2 <mutex_lock+0x2e>
    48c4:	2301      	movs	r3, #1
    48c6:	e850 2f00 	ldrex	r2, [r0]
    48ca:	4619      	mov	r1, r3
    48cc:	e840 1c00 	strex	ip, r1, [r0]
    48d0:	f09c 0f00 	teq	ip, #0
    48d4:	d1f7      	bne.n	48c6 <mutex_lock+0x12>
    48d6:	2a01      	cmp	r2, #1
    48d8:	d0f5      	beq.n	48c6 <mutex_lock+0x12>
    48da:	f3bf 8f5f 	dmb	sy
    48de:	2000      	movs	r0, #0
    48e0:	4770      	bx	lr
    48e2:	4804      	ldr	r0, [pc, #16]	; (48f4 <mutex_lock+0x40>)
    48e4:	4770      	bx	lr
    48e6:	4804      	ldr	r0, [pc, #16]	; (48f8 <mutex_lock+0x44>)
    48e8:	4770      	bx	lr
    48ea:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    48ee:	4770      	bx	lr
    48f0:	a95c5f2c 	.word	0xa95c5f2c
    48f4:	ffff8fe9 	.word	0xffff8fe9
    48f8:	ffff8fea 	.word	0xffff8fea

000048fc <mutex_unlock>:
    48fc:	4603      	mov	r3, r0
    48fe:	b180      	cbz	r0, 4922 <mutex_unlock+0x26>
    4900:	6842      	ldr	r2, [r0, #4]
    4902:	4909      	ldr	r1, [pc, #36]	; (4928 <mutex_unlock+0x2c>)
    4904:	428a      	cmp	r2, r1
    4906:	d00a      	beq.n	491e <mutex_unlock+0x22>
    4908:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    490c:	d005      	beq.n	491a <mutex_unlock+0x1e>
    490e:	f3bf 8f5f 	dmb	sy
    4912:	2200      	movs	r2, #0
    4914:	4610      	mov	r0, r2
    4916:	601a      	str	r2, [r3, #0]
    4918:	4770      	bx	lr
    491a:	4804      	ldr	r0, [pc, #16]	; (492c <mutex_unlock+0x30>)
    491c:	4770      	bx	lr
    491e:	4804      	ldr	r0, [pc, #16]	; (4930 <mutex_unlock+0x34>)
    4920:	4770      	bx	lr
    4922:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4926:	4770      	bx	lr
    4928:	a95c5f2c 	.word	0xa95c5f2c
    492c:	ffff8fe9 	.word	0xffff8fe9
    4930:	ffff8fea 	.word	0xffff8fea

00004934 <mutex_init>:
    4934:	b510      	push	{r4, lr}
    4936:	4604      	mov	r4, r0
    4938:	b120      	cbz	r0, 4944 <mutex_init+0x10>
    493a:	2300      	movs	r3, #0
    493c:	4a03      	ldr	r2, [pc, #12]	; (494c <mutex_init+0x18>)
    493e:	6023      	str	r3, [r4, #0]
    4940:	6062      	str	r2, [r4, #4]
    4942:	bd10      	pop	{r4, pc}
    4944:	4802      	ldr	r0, [pc, #8]	; (4950 <mutex_init+0x1c>)
    4946:	f7ff ff71 	bl	482c <CC_PalAbort>
    494a:	e7f6      	b.n	493a <mutex_init+0x6>
    494c:	3a00003a 	.word	0x3a00003a
    4950:	00006eec 	.word	0x00006eec

00004954 <nrf_cc3xx_platform_set_mutexes>:
    4954:	b570      	push	{r4, r5, r6, lr}
    4956:	4c19      	ldr	r4, [pc, #100]	; (49bc <nrf_cc3xx_platform_set_mutexes+0x68>)
    4958:	f8d0 c004 	ldr.w	ip, [r0, #4]
    495c:	6806      	ldr	r6, [r0, #0]
    495e:	f8c4 c004 	str.w	ip, [r4, #4]
    4962:	f8d0 c008 	ldr.w	ip, [r0, #8]
    4966:	68c0      	ldr	r0, [r0, #12]
    4968:	f8c4 c008 	str.w	ip, [r4, #8]
    496c:	60e0      	str	r0, [r4, #12]
    496e:	6026      	str	r6, [r4, #0]
    4970:	6808      	ldr	r0, [r1, #0]
    4972:	4b13      	ldr	r3, [pc, #76]	; (49c0 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    4974:	4d13      	ldr	r5, [pc, #76]	; (49c4 <nrf_cc3xx_platform_set_mutexes+0x70>)
    4976:	6018      	str	r0, [r3, #0]
    4978:	6848      	ldr	r0, [r1, #4]
    497a:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    497e:	6058      	str	r0, [r3, #4]
    4980:	6888      	ldr	r0, [r1, #8]
    4982:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    4986:	6098      	str	r0, [r3, #8]
    4988:	68c8      	ldr	r0, [r1, #12]
    498a:	6909      	ldr	r1, [r1, #16]
    498c:	60d8      	str	r0, [r3, #12]
    498e:	6119      	str	r1, [r3, #16]
    4990:	d012      	beq.n	49b8 <nrf_cc3xx_platform_set_mutexes+0x64>
    4992:	2300      	movs	r3, #0
    4994:	4a0c      	ldr	r2, [pc, #48]	; (49c8 <nrf_cc3xx_platform_set_mutexes+0x74>)
    4996:	f505 708a 	add.w	r0, r5, #276	; 0x114
    499a:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    499e:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    49a2:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    49a6:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    49aa:	47b0      	blx	r6
    49ac:	6823      	ldr	r3, [r4, #0]
    49ae:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    49b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    49b6:	4718      	bx	r3
    49b8:	bd70      	pop	{r4, r5, r6, pc}
    49ba:	bf00      	nop
    49bc:	200000e4 	.word	0x200000e4
    49c0:	200000f4 	.word	0x200000f4
    49c4:	200009a4 	.word	0x200009a4
    49c8:	a95c5f2c 	.word	0xa95c5f2c

000049cc <CC_LibInitNoRng>:
    49cc:	b508      	push	{r3, lr}
    49ce:	f000 f811 	bl	49f4 <CC_HalInit>
    49d2:	b930      	cbnz	r0, 49e2 <CC_LibInitNoRng+0x16>
    49d4:	f000 f810 	bl	49f8 <CC_PalInit>
    49d8:	b938      	cbnz	r0, 49ea <CC_LibInitNoRng+0x1e>
    49da:	4a05      	ldr	r2, [pc, #20]	; (49f0 <CC_LibInitNoRng+0x24>)
    49dc:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    49e0:	bd08      	pop	{r3, pc}
    49e2:	f000 f837 	bl	4a54 <CC_PalTerminate>
    49e6:	2003      	movs	r0, #3
    49e8:	bd08      	pop	{r3, pc}
    49ea:	2004      	movs	r0, #4
    49ec:	bd08      	pop	{r3, pc}
    49ee:	bf00      	nop
    49f0:	50845000 	.word	0x50845000

000049f4 <CC_HalInit>:
    49f4:	2000      	movs	r0, #0
    49f6:	4770      	bx	lr

000049f8 <CC_PalInit>:
    49f8:	b510      	push	{r4, lr}
    49fa:	4811      	ldr	r0, [pc, #68]	; (4a40 <CC_PalInit+0x48>)
    49fc:	f000 f848 	bl	4a90 <CC_PalMutexCreate>
    4a00:	b100      	cbz	r0, 4a04 <CC_PalInit+0xc>
    4a02:	bd10      	pop	{r4, pc}
    4a04:	480f      	ldr	r0, [pc, #60]	; (4a44 <CC_PalInit+0x4c>)
    4a06:	f000 f843 	bl	4a90 <CC_PalMutexCreate>
    4a0a:	2800      	cmp	r0, #0
    4a0c:	d1f9      	bne.n	4a02 <CC_PalInit+0xa>
    4a0e:	4c0e      	ldr	r4, [pc, #56]	; (4a48 <CC_PalInit+0x50>)
    4a10:	4620      	mov	r0, r4
    4a12:	f000 f83d 	bl	4a90 <CC_PalMutexCreate>
    4a16:	2800      	cmp	r0, #0
    4a18:	d1f3      	bne.n	4a02 <CC_PalInit+0xa>
    4a1a:	4b0c      	ldr	r3, [pc, #48]	; (4a4c <CC_PalInit+0x54>)
    4a1c:	480c      	ldr	r0, [pc, #48]	; (4a50 <CC_PalInit+0x58>)
    4a1e:	601c      	str	r4, [r3, #0]
    4a20:	f000 f836 	bl	4a90 <CC_PalMutexCreate>
    4a24:	4601      	mov	r1, r0
    4a26:	2800      	cmp	r0, #0
    4a28:	d1eb      	bne.n	4a02 <CC_PalInit+0xa>
    4a2a:	f000 f82d 	bl	4a88 <CC_PalDmaInit>
    4a2e:	4604      	mov	r4, r0
    4a30:	b108      	cbz	r0, 4a36 <CC_PalInit+0x3e>
    4a32:	4620      	mov	r0, r4
    4a34:	bd10      	pop	{r4, pc}
    4a36:	f000 f83f 	bl	4ab8 <CC_PalPowerSaveModeInit>
    4a3a:	4620      	mov	r0, r4
    4a3c:	e7fa      	b.n	4a34 <CC_PalInit+0x3c>
    4a3e:	bf00      	nop
    4a40:	2000012c 	.word	0x2000012c
    4a44:	20000120 	.word	0x20000120
    4a48:	20000128 	.word	0x20000128
    4a4c:	20000130 	.word	0x20000130
    4a50:	20000124 	.word	0x20000124

00004a54 <CC_PalTerminate>:
    4a54:	b508      	push	{r3, lr}
    4a56:	4808      	ldr	r0, [pc, #32]	; (4a78 <CC_PalTerminate+0x24>)
    4a58:	f000 f824 	bl	4aa4 <CC_PalMutexDestroy>
    4a5c:	4807      	ldr	r0, [pc, #28]	; (4a7c <CC_PalTerminate+0x28>)
    4a5e:	f000 f821 	bl	4aa4 <CC_PalMutexDestroy>
    4a62:	4807      	ldr	r0, [pc, #28]	; (4a80 <CC_PalTerminate+0x2c>)
    4a64:	f000 f81e 	bl	4aa4 <CC_PalMutexDestroy>
    4a68:	4806      	ldr	r0, [pc, #24]	; (4a84 <CC_PalTerminate+0x30>)
    4a6a:	f000 f81b 	bl	4aa4 <CC_PalMutexDestroy>
    4a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4a72:	f000 b80b 	b.w	4a8c <CC_PalDmaTerminate>
    4a76:	bf00      	nop
    4a78:	2000012c 	.word	0x2000012c
    4a7c:	20000120 	.word	0x20000120
    4a80:	20000128 	.word	0x20000128
    4a84:	20000124 	.word	0x20000124

00004a88 <CC_PalDmaInit>:
    4a88:	2000      	movs	r0, #0
    4a8a:	4770      	bx	lr

00004a8c <CC_PalDmaTerminate>:
    4a8c:	4770      	bx	lr
    4a8e:	bf00      	nop

00004a90 <CC_PalMutexCreate>:
    4a90:	b508      	push	{r3, lr}
    4a92:	4b03      	ldr	r3, [pc, #12]	; (4aa0 <CC_PalMutexCreate+0x10>)
    4a94:	6802      	ldr	r2, [r0, #0]
    4a96:	681b      	ldr	r3, [r3, #0]
    4a98:	6810      	ldr	r0, [r2, #0]
    4a9a:	4798      	blx	r3
    4a9c:	2000      	movs	r0, #0
    4a9e:	bd08      	pop	{r3, pc}
    4aa0:	200000e4 	.word	0x200000e4

00004aa4 <CC_PalMutexDestroy>:
    4aa4:	b508      	push	{r3, lr}
    4aa6:	4b03      	ldr	r3, [pc, #12]	; (4ab4 <CC_PalMutexDestroy+0x10>)
    4aa8:	6802      	ldr	r2, [r0, #0]
    4aaa:	685b      	ldr	r3, [r3, #4]
    4aac:	6810      	ldr	r0, [r2, #0]
    4aae:	4798      	blx	r3
    4ab0:	2000      	movs	r0, #0
    4ab2:	bd08      	pop	{r3, pc}
    4ab4:	200000e4 	.word	0x200000e4

00004ab8 <CC_PalPowerSaveModeInit>:
    4ab8:	b570      	push	{r4, r5, r6, lr}
    4aba:	4c09      	ldr	r4, [pc, #36]	; (4ae0 <CC_PalPowerSaveModeInit+0x28>)
    4abc:	4d09      	ldr	r5, [pc, #36]	; (4ae4 <CC_PalPowerSaveModeInit+0x2c>)
    4abe:	6920      	ldr	r0, [r4, #16]
    4ac0:	68ab      	ldr	r3, [r5, #8]
    4ac2:	4798      	blx	r3
    4ac4:	b118      	cbz	r0, 4ace <CC_PalPowerSaveModeInit+0x16>
    4ac6:	4b08      	ldr	r3, [pc, #32]	; (4ae8 <CC_PalPowerSaveModeInit+0x30>)
    4ac8:	4808      	ldr	r0, [pc, #32]	; (4aec <CC_PalPowerSaveModeInit+0x34>)
    4aca:	685b      	ldr	r3, [r3, #4]
    4acc:	4798      	blx	r3
    4ace:	2100      	movs	r1, #0
    4ad0:	4a07      	ldr	r2, [pc, #28]	; (4af0 <CC_PalPowerSaveModeInit+0x38>)
    4ad2:	68eb      	ldr	r3, [r5, #12]
    4ad4:	6011      	str	r1, [r2, #0]
    4ad6:	6920      	ldr	r0, [r4, #16]
    4ad8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4adc:	4718      	bx	r3
    4ade:	bf00      	nop
    4ae0:	200000f4 	.word	0x200000f4
    4ae4:	200000e4 	.word	0x200000e4
    4ae8:	200000d4 	.word	0x200000d4
    4aec:	00006f10 	.word	0x00006f10
    4af0:	200009a0 	.word	0x200009a0

00004af4 <z_impl_gpio_pin_configure>:
{
    4af4:	b538      	push	{r3, r4, r5, lr}
    4af6:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    4af8:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    4afa:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    4afc:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    4b00:	d007      	beq.n	4b12 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    4b02:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    4b06:	d004      	beq.n	4b12 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4b08:	f012 0f01 	tst.w	r2, #1
    4b0c:	d001      	beq.n	4b12 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    4b0e:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    4b12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4b16:	f013 0f01 	tst.w	r3, #1
    4b1a:	d00a      	beq.n	4b32 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4b1c:	6823      	ldr	r3, [r4, #0]
    4b1e:	f04f 0c01 	mov.w	ip, #1
    4b22:	fa0c fc01 	lsl.w	ip, ip, r1
    4b26:	ea43 030c 	orr.w	r3, r3, ip
    4b2a:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    4b2c:	682b      	ldr	r3, [r5, #0]
    4b2e:	4798      	blx	r3
}
    4b30:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4b32:	6823      	ldr	r3, [r4, #0]
    4b34:	f04f 0c01 	mov.w	ip, #1
    4b38:	fa0c fc01 	lsl.w	ip, ip, r1
    4b3c:	ea23 030c 	bic.w	r3, r3, ip
    4b40:	6023      	str	r3, [r4, #0]
    4b42:	e7f3      	b.n	4b2c <z_impl_gpio_pin_configure+0x38>

00004b44 <gpio_pin_configure_dt>:
{
    4b44:	b508      	push	{r3, lr}
    4b46:	4603      	mov	r3, r0
    4b48:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    4b4a:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    4b4c:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    4b4e:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    4b50:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    4b54:	f7ff ffce 	bl	4af4 <z_impl_gpio_pin_configure>
}
    4b58:	bd08      	pop	{r3, pc}

00004b5a <gpio_port_get>:
{
    4b5a:	b538      	push	{r3, r4, r5, lr}
    4b5c:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
    4b5e:	6905      	ldr	r5, [r0, #16]
	const struct gpio_driver_api *api =
    4b60:	6883      	ldr	r3, [r0, #8]
	return api->port_get_raw(port, value);
    4b62:	685b      	ldr	r3, [r3, #4]
    4b64:	4798      	blx	r3
	if (ret == 0) {
    4b66:	b918      	cbnz	r0, 4b70 <gpio_port_get+0x16>
		*value ^= data->invert;
    4b68:	6823      	ldr	r3, [r4, #0]
    4b6a:	682a      	ldr	r2, [r5, #0]
    4b6c:	4053      	eors	r3, r2
    4b6e:	6023      	str	r3, [r4, #0]
}
    4b70:	bd38      	pop	{r3, r4, r5, pc}

00004b72 <gpio_pin_get>:
{
    4b72:	b510      	push	{r4, lr}
    4b74:	b082      	sub	sp, #8
    4b76:	460c      	mov	r4, r1
	ret = gpio_port_get(port, &value);
    4b78:	a901      	add	r1, sp, #4
    4b7a:	f7ff ffee 	bl	4b5a <gpio_port_get>
	if (ret == 0) {
    4b7e:	b930      	cbnz	r0, 4b8e <gpio_pin_get+0x1c>
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    4b80:	2301      	movs	r3, #1
    4b82:	40a3      	lsls	r3, r4
    4b84:	9a01      	ldr	r2, [sp, #4]
    4b86:	4213      	tst	r3, r2
    4b88:	bf14      	ite	ne
    4b8a:	2001      	movne	r0, #1
    4b8c:	2000      	moveq	r0, #0
}
    4b8e:	b002      	add	sp, #8
    4b90:	bd10      	pop	{r4, pc}

00004b92 <gpio_pin_set_raw>:
{
    4b92:	b508      	push	{r3, lr}
	if (value != 0)	{
    4b94:	b132      	cbz	r2, 4ba4 <gpio_pin_set_raw+0x12>
		ret = gpio_port_set_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    4b96:	2301      	movs	r3, #1
    4b98:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    4b9c:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    4b9e:	68db      	ldr	r3, [r3, #12]
    4ba0:	4798      	blx	r3
}
    4ba2:	bd08      	pop	{r3, pc}
		ret = gpio_port_clear_bits_raw(port, (gpio_port_pins_t)BIT(pin));
    4ba4:	2301      	movs	r3, #1
    4ba6:	fa03 f101 	lsl.w	r1, r3, r1
	const struct gpio_driver_api *api =
    4baa:	6883      	ldr	r3, [r0, #8]
	return api->port_clear_bits_raw(port, pins);
    4bac:	691b      	ldr	r3, [r3, #16]
    4bae:	4798      	blx	r3
	return ret;
    4bb0:	e7f7      	b.n	4ba2 <gpio_pin_set_raw+0x10>

00004bb2 <gpio_pin_set>:
{
    4bb2:	b510      	push	{r4, lr}
	const struct gpio_driver_data *const data =
    4bb4:	6903      	ldr	r3, [r0, #16]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    4bb6:	681c      	ldr	r4, [r3, #0]
    4bb8:	2301      	movs	r3, #1
    4bba:	408b      	lsls	r3, r1
    4bbc:	421c      	tst	r4, r3
    4bbe:	d002      	beq.n	4bc6 <gpio_pin_set+0x14>
		value = (value != 0) ? 0 : 1;
    4bc0:	fab2 f282 	clz	r2, r2
    4bc4:	0952      	lsrs	r2, r2, #5
	return gpio_pin_set_raw(port, pin, value);
    4bc6:	f7ff ffe4 	bl	4b92 <gpio_pin_set_raw>
}
    4bca:	bd10      	pop	{r4, pc}

00004bcc <k_msleep>:
{
    4bcc:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    4bce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    4bd2:	17c1      	asrs	r1, r0, #31
    4bd4:	03c9      	lsls	r1, r1, #15
    4bd6:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4bda:	03c0      	lsls	r0, r0, #15
    4bdc:	f240 33e7 	movw	r3, #999	; 0x3e7
    4be0:	18c0      	adds	r0, r0, r3
    4be2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4be6:	f04f 0300 	mov.w	r3, #0
    4bea:	f141 0100 	adc.w	r1, r1, #0
    4bee:	f7fb fab1 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    4bf2:	f7ff fc0f 	bl	4414 <z_impl_k_sleep>
}
    4bf6:	bd08      	pop	{r3, pc}

00004bf8 <arch_printk_char_out>:
}
    4bf8:	2000      	movs	r0, #0
    4bfa:	4770      	bx	lr

00004bfc <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    4bfc:	b40f      	push	{r0, r1, r2, r3}
    4bfe:	b500      	push	{lr}
    4c00:	b083      	sub	sp, #12
    4c02:	a904      	add	r1, sp, #16
    4c04:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    4c08:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    4c0a:	f7fb fc49 	bl	4a0 <vprintk>

	va_end(ap);
}
    4c0e:	b003      	add	sp, #12
    4c10:	f85d eb04 	ldr.w	lr, [sp], #4
    4c14:	b004      	add	sp, #16
    4c16:	4770      	bx	lr

00004c18 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4c18:	b508      	push	{r3, lr}
    4c1a:	4604      	mov	r4, r0
    4c1c:	4608      	mov	r0, r1
    4c1e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4c20:	461a      	mov	r2, r3
    4c22:	47a0      	blx	r4
	return z_impl_z_current_get();
    4c24:	f7ff fc20 	bl	4468 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    4c28:	f7fc fdf4 	bl	1814 <z_impl_k_thread_abort>

00004c2c <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    4c2c:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4c30:	8b03      	ldrh	r3, [r0, #24]
    4c32:	f023 0307 	bic.w	r3, r3, #7
    4c36:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4c38:	8303      	strh	r3, [r0, #24]
}
    4c3a:	4770      	bx	lr

00004c3c <notify_monitors>:
{
    4c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c40:	4606      	mov	r6, r0
    4c42:	460f      	mov	r7, r1
    4c44:	4690      	mov	r8, r2
	return list->head;
    4c46:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4c48:	b121      	cbz	r1, 4c54 <notify_monitors+0x18>
	return node->next;
    4c4a:	680c      	ldr	r4, [r1, #0]
    4c4c:	b13c      	cbz	r4, 4c5e <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4c4e:	b931      	cbnz	r1, 4c5e <notify_monitors+0x22>
    4c50:	460c      	mov	r4, r1
    4c52:	e004      	b.n	4c5e <notify_monitors+0x22>
    4c54:	460c      	mov	r4, r1
    4c56:	e002      	b.n	4c5e <notify_monitors+0x22>
    4c58:	4623      	mov	r3, r4
    4c5a:	4621      	mov	r1, r4
    4c5c:	461c      	mov	r4, r3
    4c5e:	b169      	cbz	r1, 4c7c <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    4c60:	684d      	ldr	r5, [r1, #4]
    4c62:	4643      	mov	r3, r8
    4c64:	463a      	mov	r2, r7
    4c66:	4630      	mov	r0, r6
    4c68:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4c6a:	2c00      	cmp	r4, #0
    4c6c:	d0f4      	beq.n	4c58 <notify_monitors+0x1c>
	return node->next;
    4c6e:	6823      	ldr	r3, [r4, #0]
    4c70:	2b00      	cmp	r3, #0
    4c72:	d0f2      	beq.n	4c5a <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4c74:	2c00      	cmp	r4, #0
    4c76:	d1f0      	bne.n	4c5a <notify_monitors+0x1e>
    4c78:	4623      	mov	r3, r4
    4c7a:	e7ee      	b.n	4c5a <notify_monitors+0x1e>
}
    4c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004c80 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4c80:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4c82:	f013 0307 	ands.w	r3, r3, #7
    4c86:	d103      	bne.n	4c90 <process_recheck+0x10>
	return list->head;
    4c88:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    4c8a:	b10a      	cbz	r2, 4c90 <process_recheck+0x10>
		evt = EVT_START;
    4c8c:	2003      	movs	r0, #3
    4c8e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4c90:	2b02      	cmp	r3, #2
    4c92:	d003      	beq.n	4c9c <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    4c94:	2b01      	cmp	r3, #1
    4c96:	d006      	beq.n	4ca6 <process_recheck+0x26>
	int evt = EVT_NOP;
    4c98:	2000      	movs	r0, #0
    4c9a:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    4c9c:	8b42      	ldrh	r2, [r0, #26]
    4c9e:	2a00      	cmp	r2, #0
    4ca0:	d1f8      	bne.n	4c94 <process_recheck+0x14>
		evt = EVT_STOP;
    4ca2:	2004      	movs	r0, #4
    4ca4:	4770      	bx	lr
    4ca6:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    4ca8:	b10b      	cbz	r3, 4cae <process_recheck+0x2e>
		evt = EVT_RESET;
    4caa:	2005      	movs	r0, #5
}
    4cac:	4770      	bx	lr
	int evt = EVT_NOP;
    4cae:	2000      	movs	r0, #0
    4cb0:	4770      	bx	lr

00004cb2 <process_complete>:
{
    4cb2:	b510      	push	{r4, lr}
    4cb4:	4604      	mov	r4, r0
    4cb6:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4cb8:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    4cba:	2a00      	cmp	r2, #0
    4cbc:	db07      	blt.n	4cce <process_complete+0x1c>
    4cbe:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4cc2:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4cc4:	2a01      	cmp	r2, #1
    4cc6:	d90e      	bls.n	4ce6 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4cc8:	2b04      	cmp	r3, #4
    4cca:	d036      	beq.n	4d3a <process_complete+0x88>
}
    4ccc:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    4cce:	e9d0 0100 	ldrd	r0, r1, [r0]
    4cd2:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    4cd6:	2300      	movs	r3, #0
    4cd8:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    4cda:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    4cdc:	2101      	movs	r1, #1
    4cde:	4620      	mov	r0, r4
    4ce0:	f7ff ffa4 	bl	4c2c <set_state>
    4ce4:	e7f2      	b.n	4ccc <process_complete+0x1a>
		*clients = mgr->clients;
    4ce6:	e9d0 0100 	ldrd	r0, r1, [r0]
    4cea:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    4cee:	2200      	movs	r2, #0
    4cf0:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    4cf2:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    4cf4:	2b06      	cmp	r3, #6
    4cf6:	d11b      	bne.n	4d30 <process_complete+0x7e>
	return list->head;
    4cf8:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4cfc:	b153      	cbz	r3, 4d14 <process_complete+0x62>
				mgr->refs += 1U;
    4cfe:	8b62      	ldrh	r2, [r4, #26]
    4d00:	3201      	adds	r2, #1
    4d02:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4d04:	461a      	mov	r2, r3
	return node->next;
    4d06:	681b      	ldr	r3, [r3, #0]
    4d08:	2b00      	cmp	r3, #0
    4d0a:	d0f7      	beq.n	4cfc <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4d0c:	2a00      	cmp	r2, #0
    4d0e:	d1f5      	bne.n	4cfc <process_complete+0x4a>
    4d10:	4613      	mov	r3, r2
    4d12:	e7f3      	b.n	4cfc <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    4d14:	2102      	movs	r1, #2
    4d16:	4620      	mov	r0, r4
    4d18:	f7ff ff88 	bl	4c2c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    4d1c:	4620      	mov	r0, r4
    4d1e:	f7ff ffaf 	bl	4c80 <process_recheck>
    4d22:	2800      	cmp	r0, #0
    4d24:	d0d2      	beq.n	4ccc <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4d26:	8b23      	ldrh	r3, [r4, #24]
    4d28:	f043 0320 	orr.w	r3, r3, #32
    4d2c:	8323      	strh	r3, [r4, #24]
    4d2e:	e7cd      	b.n	4ccc <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    4d30:	2100      	movs	r1, #0
    4d32:	4620      	mov	r0, r4
    4d34:	f7ff ff7a 	bl	4c2c <set_state>
    4d38:	e7f0      	b.n	4d1c <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    4d3a:	2100      	movs	r1, #0
    4d3c:	f7ff ff76 	bl	4c2c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    4d40:	4620      	mov	r0, r4
    4d42:	f7ff ff9d 	bl	4c80 <process_recheck>
    4d46:	2800      	cmp	r0, #0
    4d48:	d0c0      	beq.n	4ccc <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4d4a:	8b23      	ldrh	r3, [r4, #24]
    4d4c:	f043 0320 	orr.w	r3, r3, #32
    4d50:	8323      	strh	r3, [r4, #24]
}
    4d52:	e7bb      	b.n	4ccc <process_complete+0x1a>

00004d54 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    4d54:	b150      	cbz	r0, 4d6c <validate_args+0x18>
{
    4d56:	b510      	push	{r4, lr}
    4d58:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4d5a:	b151      	cbz	r1, 4d72 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    4d5c:	1d08      	adds	r0, r1, #4
    4d5e:	f000 f8c4 	bl	4eea <sys_notify_validate>
	if ((rv == 0)
    4d62:	b910      	cbnz	r0, 4d6a <validate_args+0x16>
	    && ((cli->notify.flags
    4d64:	68a3      	ldr	r3, [r4, #8]
    4d66:	2b03      	cmp	r3, #3
    4d68:	d806      	bhi.n	4d78 <validate_args+0x24>
}
    4d6a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    4d6c:	f06f 0015 	mvn.w	r0, #21
}
    4d70:	4770      	bx	lr
		return -EINVAL;
    4d72:	f06f 0015 	mvn.w	r0, #21
    4d76:	e7f8      	b.n	4d6a <validate_args+0x16>
		rv = -EINVAL;
    4d78:	f06f 0015 	mvn.w	r0, #21
    4d7c:	e7f5      	b.n	4d6a <validate_args+0x16>

00004d7e <notify_one>:
{
    4d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d82:	4607      	mov	r7, r0
    4d84:	460c      	mov	r4, r1
    4d86:	4616      	mov	r6, r2
    4d88:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4d8a:	4619      	mov	r1, r3
    4d8c:	1d20      	adds	r0, r4, #4
    4d8e:	f000 f8c3 	bl	4f18 <sys_notify_finalize>
	if (cb) {
    4d92:	b128      	cbz	r0, 4da0 <notify_one+0x22>
    4d94:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    4d96:	462b      	mov	r3, r5
    4d98:	4632      	mov	r2, r6
    4d9a:	4621      	mov	r1, r4
    4d9c:	4638      	mov	r0, r7
    4d9e:	47c0      	blx	r8
}
    4da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004da4 <notify_all>:
{
    4da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4da8:	4680      	mov	r8, r0
    4daa:	460c      	mov	r4, r1
    4dac:	4617      	mov	r7, r2
    4dae:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    4db0:	e004      	b.n	4dbc <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    4db2:	4633      	mov	r3, r6
    4db4:	463a      	mov	r2, r7
    4db6:	4640      	mov	r0, r8
    4db8:	f7ff ffe1 	bl	4d7e <notify_one>
	return list->head;
    4dbc:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    4dbe:	b131      	cbz	r1, 4dce <notify_all+0x2a>
	return node->next;
    4dc0:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    4dc2:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4dc4:	6863      	ldr	r3, [r4, #4]
    4dc6:	428b      	cmp	r3, r1
    4dc8:	d1f3      	bne.n	4db2 <notify_all+0xe>
	list->tail = node;
    4dca:	6065      	str	r5, [r4, #4]
}
    4dcc:	e7f1      	b.n	4db2 <notify_all+0xe>
}
    4dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004dd2 <transition_complete>:
{
    4dd2:	b508      	push	{r3, lr}
	__asm__ volatile(
    4dd4:	f04f 0c20 	mov.w	ip, #32
    4dd8:	f3ef 8211 	mrs	r2, BASEPRI
    4ddc:	f38c 8812 	msr	BASEPRI_MAX, ip
    4de0:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4de4:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    4de6:	2101      	movs	r1, #1
    4de8:	f7fb fb68 	bl	4bc <process_event>
}
    4dec:	bd08      	pop	{r3, pc}

00004dee <onoff_manager_init>:
	if ((mgr == NULL)
    4dee:	4603      	mov	r3, r0
    4df0:	b170      	cbz	r0, 4e10 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    4df2:	b181      	cbz	r1, 4e16 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    4df4:	680a      	ldr	r2, [r1, #0]
    4df6:	b18a      	cbz	r2, 4e1c <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    4df8:	684a      	ldr	r2, [r1, #4]
    4dfa:	b192      	cbz	r2, 4e22 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4dfc:	2000      	movs	r0, #0
    4dfe:	6018      	str	r0, [r3, #0]
    4e00:	6058      	str	r0, [r3, #4]
    4e02:	6098      	str	r0, [r3, #8]
    4e04:	60d8      	str	r0, [r3, #12]
    4e06:	6118      	str	r0, [r3, #16]
    4e08:	6158      	str	r0, [r3, #20]
    4e0a:	6198      	str	r0, [r3, #24]
    4e0c:	6119      	str	r1, [r3, #16]
	return 0;
    4e0e:	4770      	bx	lr
		return -EINVAL;
    4e10:	f06f 0015 	mvn.w	r0, #21
    4e14:	4770      	bx	lr
    4e16:	f06f 0015 	mvn.w	r0, #21
    4e1a:	4770      	bx	lr
    4e1c:	f06f 0015 	mvn.w	r0, #21
    4e20:	4770      	bx	lr
    4e22:	f06f 0015 	mvn.w	r0, #21
}
    4e26:	4770      	bx	lr

00004e28 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4e28:	b570      	push	{r4, r5, r6, lr}
    4e2a:	4605      	mov	r5, r0
    4e2c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4e2e:	f7ff ff91 	bl	4d54 <validate_args>

	if (rv < 0) {
    4e32:	1e04      	subs	r4, r0, #0
    4e34:	db30      	blt.n	4e98 <onoff_request+0x70>
    4e36:	f04f 0320 	mov.w	r3, #32
    4e3a:	f3ef 8211 	mrs	r2, BASEPRI
    4e3e:	f383 8812 	msr	BASEPRI_MAX, r3
    4e42:	f3bf 8f6f 	isb	sy
    4e46:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4e48:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    4e4c:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4e50:	8b6b      	ldrh	r3, [r5, #26]
    4e52:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4e56:	428b      	cmp	r3, r1
    4e58:	d02c      	beq.n	4eb4 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    4e5a:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    4e5c:	f1bc 0f02 	cmp.w	ip, #2
    4e60:	d008      	beq.n	4e74 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    4e62:	f1bc 0f06 	cmp.w	ip, #6
    4e66:	d819      	bhi.n	4e9c <onoff_request+0x74>
    4e68:	e8df f00c 	tbb	[pc, ip]
    4e6c:	1818181e 	.word	0x1818181e
    4e70:	2a1e      	.short	0x2a1e
    4e72:	1e          	.byte	0x1e
    4e73:	00          	.byte	0x00
		mgr->refs += 1U;
    4e74:	3301      	adds	r3, #1
    4e76:	836b      	strh	r3, [r5, #26]
		notify = true;
    4e78:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    4e7a:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    4e7c:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    4e7e:	b128      	cbz	r0, 4e8c <onoff_request+0x64>
	parent->next = child;
    4e80:	2000      	movs	r0, #0
    4e82:	6030      	str	r0, [r6, #0]
	return list->tail;
    4e84:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    4e86:	b308      	cbz	r0, 4ecc <onoff_request+0xa4>
	parent->next = child;
    4e88:	6006      	str	r6, [r0, #0]
	list->tail = node;
    4e8a:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    4e8c:	bb09      	cbnz	r1, 4ed2 <onoff_request+0xaa>
	__asm__ volatile(
    4e8e:	f38e 8811 	msr	BASEPRI, lr
    4e92:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4e96:	bb0b      	cbnz	r3, 4edc <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    4e98:	4620      	mov	r0, r4
    4e9a:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    4e9c:	f06f 0404 	mvn.w	r4, #4
    4ea0:	2300      	movs	r3, #0
    4ea2:	4619      	mov	r1, r3
    4ea4:	4618      	mov	r0, r3
    4ea6:	e7ea      	b.n	4e7e <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    4ea8:	fabc f18c 	clz	r1, ip
    4eac:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    4eae:	2300      	movs	r3, #0
		add_client = true;
    4eb0:	2001      	movs	r0, #1
    4eb2:	e7e4      	b.n	4e7e <onoff_request+0x56>
		rv = -EAGAIN;
    4eb4:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    4eb8:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    4eba:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    4ebc:	4618      	mov	r0, r3
    4ebe:	e7de      	b.n	4e7e <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    4ec0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4ec4:	2300      	movs	r3, #0
    4ec6:	4619      	mov	r1, r3
    4ec8:	4618      	mov	r0, r3
    4eca:	e7d8      	b.n	4e7e <onoff_request+0x56>
    4ecc:	606e      	str	r6, [r5, #4]
	list->head = node;
    4ece:	602e      	str	r6, [r5, #0]
}
    4ed0:	e7dc      	b.n	4e8c <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    4ed2:	2102      	movs	r1, #2
    4ed4:	4628      	mov	r0, r5
    4ed6:	f7fb faf1 	bl	4bc <process_event>
    4eda:	e7dd      	b.n	4e98 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    4edc:	2300      	movs	r3, #0
    4ede:	4662      	mov	r2, ip
    4ee0:	4631      	mov	r1, r6
    4ee2:	4628      	mov	r0, r5
    4ee4:	f7ff ff4b 	bl	4d7e <notify_one>
    4ee8:	e7d6      	b.n	4e98 <onoff_request+0x70>

00004eea <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4eea:	4602      	mov	r2, r0
    4eec:	b158      	cbz	r0, 4f06 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4eee:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4ef0:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4ef4:	2b01      	cmp	r3, #1
    4ef6:	d003      	beq.n	4f00 <sys_notify_validate+0x16>
    4ef8:	2b03      	cmp	r3, #3
    4efa:	d107      	bne.n	4f0c <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4efc:	6803      	ldr	r3, [r0, #0]
    4efe:	b143      	cbz	r3, 4f12 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4f00:	2000      	movs	r0, #0
    4f02:	6090      	str	r0, [r2, #8]
    4f04:	4770      	bx	lr
		return -EINVAL;
    4f06:	f06f 0015 	mvn.w	r0, #21
    4f0a:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    4f0c:	f06f 0015 	mvn.w	r0, #21
    4f10:	4770      	bx	lr
			rv = -EINVAL;
    4f12:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4f16:	4770      	bx	lr

00004f18 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    4f18:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4f1a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4f1c:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4f20:	6081      	str	r1, [r0, #8]
	switch (method) {
    4f22:	2a03      	cmp	r2, #3
    4f24:	d103      	bne.n	4f2e <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4f26:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4f28:	2200      	movs	r2, #0
    4f2a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4f2c:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    4f2e:	2000      	movs	r0, #0
    4f30:	e7fa      	b.n	4f28 <sys_notify_finalize+0x10>

00004f32 <extract_decimal>:
{
    4f32:	4684      	mov	ip, r0
	const char *sp = *str;
    4f34:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    4f36:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    4f38:	e006      	b.n	4f48 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    4f3a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4f3e:	3201      	adds	r2, #1
    4f40:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    4f44:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4f48:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    4f4a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    4f4e:	2909      	cmp	r1, #9
    4f50:	d9f3      	bls.n	4f3a <extract_decimal+0x8>
	*str = sp;
    4f52:	f8cc 2000 	str.w	r2, [ip]
}
    4f56:	4770      	bx	lr

00004f58 <extract_width>:
{
    4f58:	b530      	push	{r4, r5, lr}
    4f5a:	b083      	sub	sp, #12
    4f5c:	4604      	mov	r4, r0
    4f5e:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    4f60:	7803      	ldrb	r3, [r0, #0]
    4f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4f66:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    4f68:	460d      	mov	r5, r1
    4f6a:	780b      	ldrb	r3, [r1, #0]
    4f6c:	2b2a      	cmp	r3, #42	; 0x2a
    4f6e:	d018      	beq.n	4fa2 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    4f70:	a801      	add	r0, sp, #4
    4f72:	f7ff ffde 	bl	4f32 <extract_decimal>
	if (sp != wp) {
    4f76:	9b01      	ldr	r3, [sp, #4]
    4f78:	429d      	cmp	r5, r3
    4f7a:	d00f      	beq.n	4f9c <extract_width+0x44>
		conv->width_present = true;
    4f7c:	7823      	ldrb	r3, [r4, #0]
    4f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4f82:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    4f84:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    4f86:	b2db      	uxtb	r3, r3
    4f88:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    4f8c:	2800      	cmp	r0, #0
    4f8e:	db10      	blt.n	4fb2 <extract_width+0x5a>
    4f90:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    4f92:	4313      	orrs	r3, r2
    4f94:	7822      	ldrb	r2, [r4, #0]
    4f96:	f363 0241 	bfi	r2, r3, #1, #1
    4f9a:	7022      	strb	r2, [r4, #0]
	return sp;
    4f9c:	9801      	ldr	r0, [sp, #4]
}
    4f9e:	b003      	add	sp, #12
    4fa0:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    4fa2:	7843      	ldrb	r3, [r0, #1]
    4fa4:	f043 0301 	orr.w	r3, r3, #1
    4fa8:	7043      	strb	r3, [r0, #1]
		return ++sp;
    4faa:	4608      	mov	r0, r1
    4fac:	3001      	adds	r0, #1
    4fae:	9001      	str	r0, [sp, #4]
    4fb0:	e7f5      	b.n	4f9e <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    4fb2:	2201      	movs	r2, #1
    4fb4:	e7ed      	b.n	4f92 <extract_width+0x3a>

00004fb6 <extract_prec>:
{
    4fb6:	b510      	push	{r4, lr}
    4fb8:	b082      	sub	sp, #8
    4fba:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    4fbc:	780b      	ldrb	r3, [r1, #0]
    4fbe:	2b2e      	cmp	r3, #46	; 0x2e
    4fc0:	bf14      	ite	ne
    4fc2:	2300      	movne	r3, #0
    4fc4:	2301      	moveq	r3, #1
    4fc6:	7842      	ldrb	r2, [r0, #1]
    4fc8:	f363 0241 	bfi	r2, r3, #1, #1
    4fcc:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    4fce:	b1c3      	cbz	r3, 5002 <extract_prec+0x4c>
    4fd0:	4604      	mov	r4, r0
	++sp;
    4fd2:	9b01      	ldr	r3, [sp, #4]
    4fd4:	1c5a      	adds	r2, r3, #1
    4fd6:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    4fd8:	785b      	ldrb	r3, [r3, #1]
    4fda:	2b2a      	cmp	r3, #42	; 0x2a
    4fdc:	d013      	beq.n	5006 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    4fde:	a801      	add	r0, sp, #4
    4fe0:	f7ff ffa7 	bl	4f32 <extract_decimal>
	conv->prec_value = prec;
    4fe4:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    4fe6:	7823      	ldrb	r3, [r4, #0]
    4fe8:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    4fec:	2800      	cmp	r0, #0
    4fee:	db12      	blt.n	5016 <extract_prec+0x60>
    4ff0:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    4ff2:	4313      	orrs	r3, r2
    4ff4:	7822      	ldrb	r2, [r4, #0]
    4ff6:	f363 0241 	bfi	r2, r3, #1, #1
    4ffa:	7022      	strb	r2, [r4, #0]
	return sp;
    4ffc:	9801      	ldr	r0, [sp, #4]
}
    4ffe:	b002      	add	sp, #8
    5000:	bd10      	pop	{r4, pc}
		return sp;
    5002:	4608      	mov	r0, r1
    5004:	e7fb      	b.n	4ffe <extract_prec+0x48>
		conv->prec_star = true;
    5006:	7843      	ldrb	r3, [r0, #1]
    5008:	f043 0304 	orr.w	r3, r3, #4
    500c:	7043      	strb	r3, [r0, #1]
		return ++sp;
    500e:	4610      	mov	r0, r2
    5010:	3001      	adds	r0, #1
    5012:	9001      	str	r0, [sp, #4]
    5014:	e7f3      	b.n	4ffe <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    5016:	2201      	movs	r2, #1
    5018:	e7eb      	b.n	4ff2 <extract_prec+0x3c>

0000501a <extract_length>:
{
    501a:	4602      	mov	r2, r0
	switch (*sp) {
    501c:	780b      	ldrb	r3, [r1, #0]
    501e:	3b4c      	subs	r3, #76	; 0x4c
    5020:	2b2e      	cmp	r3, #46	; 0x2e
    5022:	d85b      	bhi.n	50dc <extract_length+0xc2>
    5024:	e8df f003 	tbb	[pc, r3]
    5028:	5a5a5a4f 	.word	0x5a5a5a4f
    502c:	5a5a5a5a 	.word	0x5a5a5a5a
    5030:	5a5a5a5a 	.word	0x5a5a5a5a
    5034:	5a5a5a5a 	.word	0x5a5a5a5a
    5038:	5a5a5a5a 	.word	0x5a5a5a5a
    503c:	5a5a5a5a 	.word	0x5a5a5a5a
    5040:	5a5a5a5a 	.word	0x5a5a5a5a
    5044:	5a3a5a18 	.word	0x5a3a5a18
    5048:	5a5a5a29 	.word	0x5a5a5a29
    504c:	5a5a5a5a 	.word	0x5a5a5a5a
    5050:	5a5a5a48 	.word	0x5a5a5a48
    5054:	5a5a      	.short	0x5a5a
    5056:	41          	.byte	0x41
    5057:	00          	.byte	0x00
		if (*++sp == 'h') {
    5058:	1c48      	adds	r0, r1, #1
    505a:	784b      	ldrb	r3, [r1, #1]
    505c:	2b68      	cmp	r3, #104	; 0x68
    505e:	d005      	beq.n	506c <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    5060:	7853      	ldrb	r3, [r2, #1]
    5062:	2102      	movs	r1, #2
    5064:	f361 03c6 	bfi	r3, r1, #3, #4
    5068:	7053      	strb	r3, [r2, #1]
    506a:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    506c:	7853      	ldrb	r3, [r2, #1]
    506e:	2001      	movs	r0, #1
    5070:	f360 03c6 	bfi	r3, r0, #3, #4
    5074:	7053      	strb	r3, [r2, #1]
			++sp;
    5076:	1c88      	adds	r0, r1, #2
    5078:	4770      	bx	lr
		if (*++sp == 'l') {
    507a:	1c48      	adds	r0, r1, #1
    507c:	784b      	ldrb	r3, [r1, #1]
    507e:	2b6c      	cmp	r3, #108	; 0x6c
    5080:	d005      	beq.n	508e <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    5082:	7853      	ldrb	r3, [r2, #1]
    5084:	2103      	movs	r1, #3
    5086:	f361 03c6 	bfi	r3, r1, #3, #4
    508a:	7053      	strb	r3, [r2, #1]
    508c:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    508e:	7853      	ldrb	r3, [r2, #1]
    5090:	2004      	movs	r0, #4
    5092:	f360 03c6 	bfi	r3, r0, #3, #4
    5096:	7053      	strb	r3, [r2, #1]
			++sp;
    5098:	1c88      	adds	r0, r1, #2
    509a:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    509c:	7853      	ldrb	r3, [r2, #1]
    509e:	2005      	movs	r0, #5
    50a0:	f360 03c6 	bfi	r3, r0, #3, #4
    50a4:	7053      	strb	r3, [r2, #1]
		++sp;
    50a6:	1c48      	adds	r0, r1, #1
		break;
    50a8:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    50aa:	7853      	ldrb	r3, [r2, #1]
    50ac:	2006      	movs	r0, #6
    50ae:	f360 03c6 	bfi	r3, r0, #3, #4
    50b2:	7053      	strb	r3, [r2, #1]
		++sp;
    50b4:	1c48      	adds	r0, r1, #1
		break;
    50b6:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    50b8:	7853      	ldrb	r3, [r2, #1]
    50ba:	2007      	movs	r0, #7
    50bc:	f360 03c6 	bfi	r3, r0, #3, #4
    50c0:	7053      	strb	r3, [r2, #1]
		++sp;
    50c2:	1c48      	adds	r0, r1, #1
		break;
    50c4:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    50c6:	7853      	ldrb	r3, [r2, #1]
    50c8:	2008      	movs	r0, #8
    50ca:	f360 03c6 	bfi	r3, r0, #3, #4
    50ce:	7053      	strb	r3, [r2, #1]
		++sp;
    50d0:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    50d2:	7813      	ldrb	r3, [r2, #0]
    50d4:	f043 0302 	orr.w	r3, r3, #2
    50d8:	7013      	strb	r3, [r2, #0]
		break;
    50da:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    50dc:	7853      	ldrb	r3, [r2, #1]
    50de:	f36f 03c6 	bfc	r3, #3, #4
    50e2:	7053      	strb	r3, [r2, #1]
		break;
    50e4:	4608      	mov	r0, r1
}
    50e6:	4770      	bx	lr

000050e8 <extract_specifier>:
{
    50e8:	b500      	push	{lr}
    50ea:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    50ec:	4608      	mov	r0, r1
    50ee:	f810 3b01 	ldrb.w	r3, [r0], #1
    50f2:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    50f4:	2b78      	cmp	r3, #120	; 0x78
    50f6:	d817      	bhi.n	5128 <extract_specifier+0x40>
    50f8:	2b6e      	cmp	r3, #110	; 0x6e
    50fa:	d229      	bcs.n	5150 <extract_specifier+0x68>
    50fc:	2b69      	cmp	r3, #105	; 0x69
    50fe:	d813      	bhi.n	5128 <extract_specifier+0x40>
    5100:	2b58      	cmp	r3, #88	; 0x58
    5102:	d317      	bcc.n	5134 <extract_specifier+0x4c>
    5104:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    5108:	fa5f fc8c 	uxtb.w	ip, ip
    510c:	2101      	movs	r1, #1
    510e:	fa01 f10c 	lsl.w	r1, r1, ip
    5112:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    5116:	d114      	bne.n	5142 <extract_specifier+0x5a>
    5118:	f640 0c01 	movw	ip, #2049	; 0x801
    511c:	ea11 0f0c 	tst.w	r1, ip
    5120:	d155      	bne.n	51ce <extract_specifier+0xe6>
    5122:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    5126:	d13a      	bne.n	519e <extract_specifier+0xb6>
		conv->invalid = true;
    5128:	7813      	ldrb	r3, [r2, #0]
    512a:	f043 0301 	orr.w	r3, r3, #1
    512e:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    5130:	2100      	movs	r1, #0
		break;
    5132:	e042      	b.n	51ba <extract_specifier+0xd2>
	switch (conv->specifier) {
    5134:	2b41      	cmp	r3, #65	; 0x41
    5136:	d004      	beq.n	5142 <extract_specifier+0x5a>
    5138:	d3f6      	bcc.n	5128 <extract_specifier+0x40>
    513a:	3b45      	subs	r3, #69	; 0x45
    513c:	b2db      	uxtb	r3, r3
    513e:	2b02      	cmp	r3, #2
    5140:	d8f2      	bhi.n	5128 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    5142:	7893      	ldrb	r3, [r2, #2]
    5144:	2104      	movs	r1, #4
    5146:	f361 0302 	bfi	r3, r1, #0, #3
    514a:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    514c:	2101      	movs	r1, #1
			break;
    514e:	e034      	b.n	51ba <extract_specifier+0xd2>
	switch (conv->specifier) {
    5150:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    5154:	b2c9      	uxtb	r1, r1
    5156:	f04f 0c01 	mov.w	ip, #1
    515a:	fa0c fc01 	lsl.w	ip, ip, r1
    515e:	f240 4182 	movw	r1, #1154	; 0x482
    5162:	ea1c 0f01 	tst.w	ip, r1
    5166:	bf14      	ite	ne
    5168:	f04f 0e01 	movne.w	lr, #1
    516c:	f04f 0e00 	moveq.w	lr, #0
    5170:	d12d      	bne.n	51ce <extract_specifier+0xe6>
    5172:	f01c 0f24 	tst.w	ip, #36	; 0x24
    5176:	bf14      	ite	ne
    5178:	2101      	movne	r1, #1
    517a:	2100      	moveq	r1, #0
    517c:	d139      	bne.n	51f2 <extract_specifier+0x10a>
    517e:	f01c 0c01 	ands.w	ip, ip, #1
    5182:	d0d1      	beq.n	5128 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    5184:	7893      	ldrb	r3, [r2, #2]
    5186:	f04f 0e03 	mov.w	lr, #3
    518a:	f36e 0302 	bfi	r3, lr, #0, #3
    518e:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    5190:	7853      	ldrb	r3, [r2, #1]
    5192:	f003 0378 	and.w	r3, r3, #120	; 0x78
    5196:	2b40      	cmp	r3, #64	; 0x40
    5198:	d10f      	bne.n	51ba <extract_specifier+0xd2>
			unsupported = true;
    519a:	4661      	mov	r1, ip
    519c:	e00d      	b.n	51ba <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    519e:	7891      	ldrb	r1, [r2, #2]
    51a0:	f04f 0c01 	mov.w	ip, #1
    51a4:	f36c 0102 	bfi	r1, ip, #0, #3
    51a8:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    51aa:	7851      	ldrb	r1, [r2, #1]
    51ac:	f001 0178 	and.w	r1, r1, #120	; 0x78
    51b0:	2940      	cmp	r1, #64	; 0x40
    51b2:	d013      	beq.n	51dc <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    51b4:	2b63      	cmp	r3, #99	; 0x63
    51b6:	d018      	beq.n	51ea <extract_specifier+0x102>
	bool unsupported = false;
    51b8:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    51ba:	7813      	ldrb	r3, [r2, #0]
    51bc:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    51c0:	ea41 010c 	orr.w	r1, r1, ip
    51c4:	f361 0341 	bfi	r3, r1, #1, #1
    51c8:	7013      	strb	r3, [r2, #0]
}
    51ca:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    51ce:	7891      	ldrb	r1, [r2, #2]
    51d0:	f04f 0c02 	mov.w	ip, #2
    51d4:	f36c 0102 	bfi	r1, ip, #0, #3
    51d8:	7091      	strb	r1, [r2, #2]
    51da:	e7e6      	b.n	51aa <extract_specifier+0xc2>
			conv->invalid = true;
    51dc:	f892 c000 	ldrb.w	ip, [r2]
    51e0:	f04c 0c01 	orr.w	ip, ip, #1
    51e4:	f882 c000 	strb.w	ip, [r2]
    51e8:	e7e4      	b.n	51b4 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    51ea:	3900      	subs	r1, #0
    51ec:	bf18      	it	ne
    51ee:	2101      	movne	r1, #1
    51f0:	e7e3      	b.n	51ba <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    51f2:	7893      	ldrb	r3, [r2, #2]
    51f4:	f04f 0c03 	mov.w	ip, #3
    51f8:	f36c 0302 	bfi	r3, ip, #0, #3
    51fc:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    51fe:	7853      	ldrb	r3, [r2, #1]
    5200:	f013 0f78 	tst.w	r3, #120	; 0x78
    5204:	d1d9      	bne.n	51ba <extract_specifier+0xd2>
	bool unsupported = false;
    5206:	4671      	mov	r1, lr
    5208:	e7d7      	b.n	51ba <extract_specifier+0xd2>

0000520a <extract_conversion>:
{
    520a:	b510      	push	{r4, lr}
    520c:	4604      	mov	r4, r0
    520e:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    5210:	2300      	movs	r3, #0
    5212:	6023      	str	r3, [r4, #0]
    5214:	6063      	str	r3, [r4, #4]
    5216:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    5218:	784b      	ldrb	r3, [r1, #1]
    521a:	2b25      	cmp	r3, #37	; 0x25
    521c:	d014      	beq.n	5248 <extract_conversion+0x3e>
    521e:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    5220:	4620      	mov	r0, r4
    5222:	f7fb fa01 	bl	628 <extract_flags>
    5226:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    5228:	4620      	mov	r0, r4
    522a:	f7ff fe95 	bl	4f58 <extract_width>
    522e:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    5230:	4620      	mov	r0, r4
    5232:	f7ff fec0 	bl	4fb6 <extract_prec>
    5236:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    5238:	4620      	mov	r0, r4
    523a:	f7ff feee 	bl	501a <extract_length>
    523e:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    5240:	4620      	mov	r0, r4
    5242:	f7ff ff51 	bl	50e8 <extract_specifier>
}
    5246:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    5248:	3002      	adds	r0, #2
    524a:	70e3      	strb	r3, [r4, #3]
		return sp;
    524c:	e7fb      	b.n	5246 <extract_conversion+0x3c>

0000524e <conversion_radix>:
	switch (specifier) {
    524e:	286f      	cmp	r0, #111	; 0x6f
    5250:	d00c      	beq.n	526c <conversion_radix+0x1e>
    5252:	d905      	bls.n	5260 <conversion_radix+0x12>
    5254:	2870      	cmp	r0, #112	; 0x70
    5256:	d00b      	beq.n	5270 <conversion_radix+0x22>
    5258:	2878      	cmp	r0, #120	; 0x78
    525a:	d10b      	bne.n	5274 <conversion_radix+0x26>
		return 16;
    525c:	2010      	movs	r0, #16
    525e:	4770      	bx	lr
	switch (specifier) {
    5260:	2858      	cmp	r0, #88	; 0x58
    5262:	d001      	beq.n	5268 <conversion_radix+0x1a>
    5264:	200a      	movs	r0, #10
    5266:	4770      	bx	lr
		return 16;
    5268:	2010      	movs	r0, #16
    526a:	4770      	bx	lr
		return 8;
    526c:	2008      	movs	r0, #8
    526e:	4770      	bx	lr
		return 16;
    5270:	2010      	movs	r0, #16
    5272:	4770      	bx	lr
	switch (specifier) {
    5274:	200a      	movs	r0, #10
}
    5276:	4770      	bx	lr

00005278 <encode_uint>:
{
    5278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    527c:	4605      	mov	r5, r0
    527e:	460c      	mov	r4, r1
    5280:	4693      	mov	fp, r2
    5282:	4699      	mov	r9, r3
    5284:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
    5286:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    5288:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    528c:	f7ff ffdf 	bl	524e <conversion_radix>
    5290:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    5292:	e015      	b.n	52c0 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5294:	f1ba 0f19 	cmp.w	sl, #25
    5298:	d820      	bhi.n	52dc <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    529a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    529c:	3237      	adds	r2, #55	; 0x37
    529e:	b2d2      	uxtb	r2, r2
    52a0:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    52a4:	4632      	mov	r2, r6
    52a6:	4643      	mov	r3, r8
    52a8:	4628      	mov	r0, r5
    52aa:	4621      	mov	r1, r4
    52ac:	f7fa ff52 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    52b0:	42b5      	cmp	r5, r6
    52b2:	f174 0400 	sbcs.w	r4, r4, #0
    52b6:	d315      	bcc.n	52e4 <encode_uint+0x6c>
    52b8:	454f      	cmp	r7, r9
    52ba:	d913      	bls.n	52e4 <encode_uint+0x6c>
		value /= radix;
    52bc:	4605      	mov	r5, r0
    52be:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    52c0:	f04f 0800 	mov.w	r8, #0
    52c4:	4632      	mov	r2, r6
    52c6:	4643      	mov	r3, r8
    52c8:	4628      	mov	r0, r5
    52ca:	4621      	mov	r1, r4
    52cc:	f7fa ff42 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    52d0:	2a09      	cmp	r2, #9
    52d2:	d8df      	bhi.n	5294 <encode_uint+0x1c>
    52d4:	b2d2      	uxtb	r2, r2
    52d6:	3230      	adds	r2, #48	; 0x30
    52d8:	b2d2      	uxtb	r2, r2
    52da:	e7e1      	b.n	52a0 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    52dc:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    52de:	3257      	adds	r2, #87	; 0x57
    52e0:	b2d2      	uxtb	r2, r2
    52e2:	e7dd      	b.n	52a0 <encode_uint+0x28>
	if (conv->flag_hash) {
    52e4:	f89b 3000 	ldrb.w	r3, [fp]
    52e8:	f013 0f20 	tst.w	r3, #32
    52ec:	d003      	beq.n	52f6 <encode_uint+0x7e>
		if (radix == 8) {
    52ee:	2e08      	cmp	r6, #8
    52f0:	d004      	beq.n	52fc <encode_uint+0x84>
		} else if (radix == 16) {
    52f2:	2e10      	cmp	r6, #16
    52f4:	d009      	beq.n	530a <encode_uint+0x92>
}
    52f6:	4638      	mov	r0, r7
    52f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    52fc:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5300:	f043 0308 	orr.w	r3, r3, #8
    5304:	f88b 3002 	strb.w	r3, [fp, #2]
    5308:	e7f5      	b.n	52f6 <encode_uint+0x7e>
			conv->altform_0c = true;
    530a:	f89b 3002 	ldrb.w	r3, [fp, #2]
    530e:	f043 0310 	orr.w	r3, r3, #16
    5312:	f88b 3002 	strb.w	r3, [fp, #2]
    5316:	e7ee      	b.n	52f6 <encode_uint+0x7e>

00005318 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    5318:	7843      	ldrb	r3, [r0, #1]
    531a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    531e:	2b07      	cmp	r3, #7
    5320:	d818      	bhi.n	5354 <store_count+0x3c>
    5322:	e8df f003 	tbb	[pc, r3]
    5326:	0604      	.short	0x0604
    5328:	100c0a08 	.word	0x100c0a08
    532c:	1614      	.short	0x1614
		*(int *)dp = count;
    532e:	600a      	str	r2, [r1, #0]
		break;
    5330:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    5332:	700a      	strb	r2, [r1, #0]
		break;
    5334:	4770      	bx	lr
		*(short *)dp = (short)count;
    5336:	800a      	strh	r2, [r1, #0]
		break;
    5338:	4770      	bx	lr
		*(long *)dp = (long)count;
    533a:	600a      	str	r2, [r1, #0]
		break;
    533c:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    533e:	17d3      	asrs	r3, r2, #31
    5340:	600a      	str	r2, [r1, #0]
    5342:	604b      	str	r3, [r1, #4]
		break;
    5344:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    5346:	17d3      	asrs	r3, r2, #31
    5348:	600a      	str	r2, [r1, #0]
    534a:	604b      	str	r3, [r1, #4]
		break;
    534c:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    534e:	600a      	str	r2, [r1, #0]
		break;
    5350:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    5352:	600a      	str	r2, [r1, #0]
}
    5354:	4770      	bx	lr

00005356 <outs>:
{
    5356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    535a:	4607      	mov	r7, r0
    535c:	460e      	mov	r6, r1
    535e:	4614      	mov	r4, r2
    5360:	4698      	mov	r8, r3
	size_t count = 0;
    5362:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5364:	e006      	b.n	5374 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    5366:	4631      	mov	r1, r6
    5368:	f814 0b01 	ldrb.w	r0, [r4], #1
    536c:	47b8      	blx	r7
		if (rc < 0) {
    536e:	2800      	cmp	r0, #0
    5370:	db09      	blt.n	5386 <outs+0x30>
		++count;
    5372:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5374:	4544      	cmp	r4, r8
    5376:	d3f6      	bcc.n	5366 <outs+0x10>
    5378:	f1b8 0f00 	cmp.w	r8, #0
    537c:	d102      	bne.n	5384 <outs+0x2e>
    537e:	7823      	ldrb	r3, [r4, #0]
    5380:	2b00      	cmp	r3, #0
    5382:	d1f0      	bne.n	5366 <outs+0x10>
	return (int)count;
    5384:	4628      	mov	r0, r5
}
    5386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000538a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    538a:	4770      	bx	lr

0000538c <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
    538c:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
    538e:	f7fb fc8d 	bl	cac <nrfx_coredep_delay_us>
}
    5392:	bd08      	pop	{r3, pc}

00005394 <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    5394:	2301      	movs	r3, #1
    5396:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    539a:	f3bf 8f4f 	dsb	sy
        __WFE();
    539e:	bf20      	wfe
    while (true)
    53a0:	e7fd      	b.n	539e <nrf_regulators_system_off+0xa>

000053a2 <pm_state_exit_post_ops>:
    53a2:	2300      	movs	r3, #0
    53a4:	f383 8811 	msr	BASEPRI, r3
    53a8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    53ac:	4770      	bx	lr

000053ae <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    53ae:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    53b0:	f001 021f 	and.w	r2, r1, #31
    53b4:	2301      	movs	r3, #1
    53b6:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    53b8:	0949      	lsrs	r1, r1, #5
    53ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    53be:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    53c0:	e8d0 2fef 	ldaex	r2, [r0]
    53c4:	ea02 0c01 	and.w	ip, r2, r1
    53c8:	e8c0 cfee 	stlex	lr, ip, [r0]
    53cc:	f1be 0f00 	cmp.w	lr, #0
    53d0:	d1f6      	bne.n	53c0 <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
    53d2:	4213      	tst	r3, r2
}
    53d4:	bf14      	ite	ne
    53d6:	2001      	movne	r0, #1
    53d8:	2000      	moveq	r0, #0
    53da:	f85d fb04 	ldr.w	pc, [sp], #4

000053de <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    53de:	f001 021f 	and.w	r2, r1, #31
    53e2:	2301      	movs	r3, #1
    53e4:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    53e6:	0949      	lsrs	r1, r1, #5
    53e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    53ec:	e8d0 2fef 	ldaex	r2, [r0]
    53f0:	431a      	orrs	r2, r3
    53f2:	e8c0 2fe1 	stlex	r1, r2, [r0]
    53f6:	2900      	cmp	r1, #0
    53f8:	d1f8      	bne.n	53ec <atomic_set_bit+0xe>
}
    53fa:	4770      	bx	lr

000053fc <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    53fc:	2000      	movs	r0, #0
    53fe:	4770      	bx	lr

00005400 <abort_function>:
{
    5400:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5402:	2000      	movs	r0, #0
    5404:	f7fb fc3e 	bl	c84 <sys_reboot>

00005408 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5408:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    540a:	f001 f82b 	bl	6464 <z_fatal_error>
}
    540e:	bd08      	pop	{r3, pc}

00005410 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    5410:	b508      	push	{r3, lr}
    5412:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5414:	6800      	ldr	r0, [r0, #0]
    5416:	f7ff fff7 	bl	5408 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    541a:	bd08      	pop	{r3, pc}

0000541c <arch_irq_enable>:
{
    541c:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    541e:	b240      	sxtb	r0, r0
    5420:	f7fb ff18 	bl	1254 <__NVIC_EnableIRQ>
}
    5424:	bd08      	pop	{r3, pc}

00005426 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    5426:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5428:	3101      	adds	r1, #1
    542a:	b240      	sxtb	r0, r0
    542c:	f7fb ff20 	bl	1270 <__NVIC_SetPriority>
}
    5430:	bd08      	pop	{r3, pc}

00005432 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    5432:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5434:	2100      	movs	r1, #0
    5436:	2001      	movs	r0, #1
    5438:	f7ff ffe6 	bl	5408 <z_arm_fatal_error>
}
    543c:	bd08      	pop	{r3, pc}

0000543e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    543e:	b508      	push	{r3, lr}
	handler();
    5440:	f7fb ff38 	bl	12b4 <z_SysNmiOnReset>
	z_arm_int_exit();
    5444:	f7fc f808 	bl	1458 <z_arm_exc_exit>
}
    5448:	bd08      	pop	{r3, pc}

0000544a <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    544a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    544e:	f383 880b 	msr	PSPLIM, r3
}
    5452:	4770      	bx	lr

00005454 <memory_fault_recoverable>:
}
    5454:	2000      	movs	r0, #0
    5456:	4770      	bx	lr

00005458 <debug_monitor>:
	*recoverable = false;
    5458:	2300      	movs	r3, #0
    545a:	700b      	strb	r3, [r1, #0]
}
    545c:	4770      	bx	lr

0000545e <fault_handle>:
{
    545e:	b508      	push	{r3, lr}
	*recoverable = false;
    5460:	2300      	movs	r3, #0
    5462:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    5464:	1ecb      	subs	r3, r1, #3
    5466:	2b09      	cmp	r3, #9
    5468:	d81a      	bhi.n	54a0 <fault_handle+0x42>
    546a:	e8df f003 	tbb	[pc, r3]
    546e:	0905      	.short	0x0905
    5470:	1919110d 	.word	0x1919110d
    5474:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    5478:	4611      	mov	r1, r2
    547a:	f7fc f891 	bl	15a0 <hard_fault>
		break;
    547e:	e010      	b.n	54a2 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    5480:	2100      	movs	r1, #0
    5482:	f7fb fff7 	bl	1474 <mem_manage_fault>
		break;
    5486:	e00c      	b.n	54a2 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    5488:	2100      	movs	r1, #0
    548a:	f7fc f829 	bl	14e0 <bus_fault>
		break;
    548e:	e008      	b.n	54a2 <fault_handle+0x44>
		reason = usage_fault(esf);
    5490:	f7fc f850 	bl	1534 <usage_fault>
		break;
    5494:	e005      	b.n	54a2 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    5496:	4611      	mov	r1, r2
    5498:	f7ff ffde 	bl	5458 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    549c:	2000      	movs	r0, #0
		break;
    549e:	e000      	b.n	54a2 <fault_handle+0x44>
	switch (fault) {
    54a0:	2000      	movs	r0, #0
}
    54a2:	bd08      	pop	{r3, pc}

000054a4 <sys_arch_reboot>:
{
    54a4:	b508      	push	{r3, lr}
	NVIC_SystemReset();
    54a6:	f7fc f965 	bl	1774 <__NVIC_SystemReset>

000054aa <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    54aa:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    54ae:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    54b2:	d001      	beq.n	54b8 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    54b4:	b2c0      	uxtb	r0, r0
    54b6:	4770      	bx	lr
	}

	return -EINVAL;
    54b8:	f06f 0015 	mvn.w	r0, #21
}
    54bc:	4770      	bx	lr

000054be <region_init>:
{
    54be:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
    54c0:	680b      	ldr	r3, [r1, #0]
    54c2:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
    54c6:	7a0b      	ldrb	r3, [r1, #8]
    54c8:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    54cc:	68ca      	ldr	r2, [r1, #12]
    54ce:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    54d2:	095b      	lsrs	r3, r3, #5
    54d4:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
    54d8:	f042 0201 	orr.w	r2, r2, #1
    54dc:	ea4c 010e 	orr.w	r1, ip, lr
    54e0:	f7fc f9dc 	bl	189c <mpu_set_region>
}
    54e4:	bd08      	pop	{r3, pc}

000054e6 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    54e6:	6843      	ldr	r3, [r0, #4]
		&&
    54e8:	2b1f      	cmp	r3, #31
    54ea:	d908      	bls.n	54fe <mpu_partition_is_valid+0x18>
		&&
    54ec:	f013 0f1f 	tst.w	r3, #31
    54f0:	d107      	bne.n	5502 <mpu_partition_is_valid+0x1c>
		((part->start &
    54f2:	6803      	ldr	r3, [r0, #0]
		&&
    54f4:	f013 0f1f 	tst.w	r3, #31
    54f8:	d005      	beq.n	5506 <mpu_partition_is_valid+0x20>
    54fa:	2000      	movs	r0, #0
    54fc:	4770      	bx	lr
    54fe:	2000      	movs	r0, #0
    5500:	4770      	bx	lr
    5502:	2000      	movs	r0, #0
    5504:	4770      	bx	lr
    5506:	2001      	movs	r0, #1
}
    5508:	4770      	bx	lr

0000550a <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    550a:	2807      	cmp	r0, #7
    550c:	d805      	bhi.n	551a <region_allocate_and_init+0x10>
{
    550e:	b510      	push	{r4, lr}
    5510:	4604      	mov	r4, r0
	region_init(index, region_conf);
    5512:	f7ff ffd4 	bl	54be <region_init>
	return index;
    5516:	4620      	mov	r0, r4
}
    5518:	bd10      	pop	{r4, pc}
		return -EINVAL;
    551a:	f06f 0015 	mvn.w	r0, #21
}
    551e:	4770      	bx	lr

00005520 <mpu_configure_region>:
{
    5520:	b510      	push	{r4, lr}
    5522:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
    5524:	680b      	ldr	r3, [r1, #0]
    5526:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
    5528:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    552a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    552e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    5532:	f36c 0204 	bfi	r2, ip, #0, #5
    5536:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
    553a:	8949      	ldrh	r1, [r1, #10]
    553c:	b2d2      	uxtb	r2, r2
    553e:	f361 1247 	bfi	r2, r1, #5, #3
    5542:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    5546:	f023 031f 	bic.w	r3, r3, #31
    554a:	4423      	add	r3, r4
    554c:	3b01      	subs	r3, #1
    554e:	f023 031f 	bic.w	r3, r3, #31
    5552:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    5554:	4669      	mov	r1, sp
    5556:	f7ff ffd8 	bl	550a <region_allocate_and_init>
}
    555a:	b004      	add	sp, #16
    555c:	bd10      	pop	{r4, pc}

0000555e <get_region_index>:
{
    555e:	b570      	push	{r4, r5, r6, lr}
    5560:	4604      	mov	r4, r0
    5562:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    5564:	f7ff ffa1 	bl	54aa <arm_cmse_mpu_region_get>
    5568:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    556a:	4434      	add	r4, r6
    556c:	1e60      	subs	r0, r4, #1
    556e:	f7ff ff9c 	bl	54aa <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    5572:	4285      	cmp	r5, r0
    5574:	d101      	bne.n	557a <get_region_index+0x1c>
}
    5576:	4628      	mov	r0, r5
    5578:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
    557a:	f06f 0515 	mvn.w	r5, #21
    557e:	e7fa      	b.n	5576 <get_region_index+0x18>

00005580 <arm_core_mpu_configure_static_mpu_regions>:
{
    5580:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    5582:	f7fc fa79 	bl	1a78 <mpu_configure_static_mpu_regions>
}
    5586:	bd08      	pop	{r3, pc}

00005588 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    5588:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    558a:	f7fc fa7f 	bl	1a8c <mpu_mark_areas_for_dynamic_regions>
}
    558e:	bd08      	pop	{r3, pc}

00005590 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    5590:	4603      	mov	r3, r0
    5592:	b1a2      	cbz	r2, 55be <strncpy+0x2e>
{
    5594:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    5596:	780c      	ldrb	r4, [r1, #0]
    5598:	b12c      	cbz	r4, 55a6 <strncpy+0x16>
		*d = *s;
    559a:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    559e:	3101      	adds	r1, #1
		d++;
		n--;
    55a0:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    55a2:	2a00      	cmp	r2, #0
    55a4:	d1f7      	bne.n	5596 <strncpy+0x6>
	}

	while (n > 0) {
    55a6:	b122      	cbz	r2, 55b2 <strncpy+0x22>
		*d = '\0';
    55a8:	2100      	movs	r1, #0
    55aa:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    55ae:	3a01      	subs	r2, #1
    55b0:	e7f9      	b.n	55a6 <strncpy+0x16>
	}

	return dest;
}
    55b2:	bc10      	pop	{r4}
    55b4:	4770      	bx	lr
		*d = '\0';
    55b6:	2100      	movs	r1, #0
    55b8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    55bc:	3a01      	subs	r2, #1
	while (n > 0) {
    55be:	2a00      	cmp	r2, #0
    55c0:	d1f9      	bne.n	55b6 <strncpy+0x26>
    55c2:	4770      	bx	lr

000055c4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    55c4:	4603      	mov	r3, r0
	size_t n = 0;
    55c6:	2000      	movs	r0, #0

	while (*s != '\0') {
    55c8:	e001      	b.n	55ce <strlen+0xa>
		s++;
    55ca:	3301      	adds	r3, #1
		n++;
    55cc:	3001      	adds	r0, #1
	while (*s != '\0') {
    55ce:	781a      	ldrb	r2, [r3, #0]
    55d0:	2a00      	cmp	r2, #0
    55d2:	d1fa      	bne.n	55ca <strlen+0x6>
	}

	return n;
}
    55d4:	4770      	bx	lr

000055d6 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    55d6:	4603      	mov	r3, r0
	size_t n = 0;
    55d8:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    55da:	e001      	b.n	55e0 <strnlen+0xa>
		s++;
    55dc:	3301      	adds	r3, #1
		n++;
    55de:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    55e0:	781a      	ldrb	r2, [r3, #0]
    55e2:	b10a      	cbz	r2, 55e8 <strnlen+0x12>
    55e4:	4288      	cmp	r0, r1
    55e6:	d3f9      	bcc.n	55dc <strnlen+0x6>
	}

	return n;
}
    55e8:	4770      	bx	lr

000055ea <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    55ea:	ea80 0301 	eor.w	r3, r0, r1
    55ee:	f013 0f03 	tst.w	r3, #3
    55f2:	d001      	beq.n	55f8 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    55f4:	4603      	mov	r3, r0
    55f6:	e023      	b.n	5640 <memcpy+0x56>
    55f8:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    55fa:	f013 0f03 	tst.w	r3, #3
    55fe:	d00f      	beq.n	5620 <memcpy+0x36>
			if (n == 0) {
    5600:	b30a      	cbz	r2, 5646 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    5602:	f811 cb01 	ldrb.w	ip, [r1], #1
    5606:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    560a:	3a01      	subs	r2, #1
    560c:	e7f5      	b.n	55fa <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    560e:	f811 cb01 	ldrb.w	ip, [r1], #1
    5612:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5616:	3a01      	subs	r2, #1
	while (n > 0) {
    5618:	2a00      	cmp	r2, #0
    561a:	d1f8      	bne.n	560e <memcpy+0x24>
	}

	return d;
}
    561c:	bc10      	pop	{r4}
    561e:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    5620:	2a03      	cmp	r2, #3
    5622:	d90d      	bls.n	5640 <memcpy+0x56>
{
    5624:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    5626:	f851 4b04 	ldr.w	r4, [r1], #4
    562a:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    562e:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    5630:	2a03      	cmp	r2, #3
    5632:	d8f8      	bhi.n	5626 <memcpy+0x3c>
    5634:	e7f0      	b.n	5618 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    5636:	f811 cb01 	ldrb.w	ip, [r1], #1
    563a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    563e:	3a01      	subs	r2, #1
	while (n > 0) {
    5640:	2a00      	cmp	r2, #0
    5642:	d1f8      	bne.n	5636 <memcpy+0x4c>
    5644:	4770      	bx	lr
}
    5646:	4770      	bx	lr

00005648 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5648:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    564c:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    564e:	e002      	b.n	5656 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    5650:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5654:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5656:	f013 0f03 	tst.w	r3, #3
    565a:	d002      	beq.n	5662 <memset+0x1a>
		if (n == 0) {
    565c:	2a00      	cmp	r2, #0
    565e:	d1f7      	bne.n	5650 <memset+0x8>
    5660:	e00f      	b.n	5682 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    5662:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    5664:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    5668:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    566c:	2a03      	cmp	r2, #3
    566e:	d906      	bls.n	567e <memset+0x36>
		*(d_word++) = c_word;
    5670:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    5674:	3a04      	subs	r2, #4
    5676:	e7f9      	b.n	566c <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    5678:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    567c:	3a01      	subs	r2, #1
	while (n > 0) {
    567e:	2a00      	cmp	r2, #0
    5680:	d1fa      	bne.n	5678 <memset+0x30>
	}

	return buf;
}
    5682:	4770      	bx	lr

00005684 <_stdout_hook_default>:
}
    5684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5688:	4770      	bx	lr

0000568a <nrf_clock_is_running>:
    switch (domain)
    568a:	2903      	cmp	r1, #3
    568c:	d82f      	bhi.n	56ee <nrf_clock_is_running+0x64>
    568e:	e8df f001 	tbb	[pc, r1]
    5692:	0f02      	.short	0x0f02
    5694:	291c      	.short	0x291c
            if (p_clk_src != NULL)
    5696:	b122      	cbz	r2, 56a2 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5698:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    569c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    56a0:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    56a2:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    56a6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    56aa:	d122      	bne.n	56f2 <nrf_clock_is_running+0x68>
    return false;
    56ac:	2000      	movs	r0, #0
    56ae:	4770      	bx	lr
            if (p_clk_src != NULL)
    56b0:	b122      	cbz	r2, 56bc <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    56b2:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    56b6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    56ba:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    56bc:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    56c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    56c4:	d117      	bne.n	56f6 <nrf_clock_is_running+0x6c>
    return false;
    56c6:	2000      	movs	r0, #0
    56c8:	4770      	bx	lr
            if (p_clk_src != NULL)
    56ca:	b122      	cbz	r2, 56d6 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    56cc:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    56d0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    56d4:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    56d6:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    56da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    56de:	d10c      	bne.n	56fa <nrf_clock_is_running+0x70>
    return false;
    56e0:	2000      	movs	r0, #0
    56e2:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    56e4:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    56e8:	f3c0 4000 	ubfx	r0, r0, #16, #1
    56ec:	4770      	bx	lr
    switch (domain)
    56ee:	2000      	movs	r0, #0
    56f0:	4770      	bx	lr
                return true;
    56f2:	2001      	movs	r0, #1
    56f4:	4770      	bx	lr
                return true;
    56f6:	2001      	movs	r0, #1
    56f8:	4770      	bx	lr
                return true;
    56fa:	2001      	movs	r0, #1
}
    56fc:	4770      	bx	lr

000056fe <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    56fe:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    5700:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5704:	0089      	lsls	r1, r1, #2
    5706:	3170      	adds	r1, #112	; 0x70
}
    5708:	4408      	add	r0, r1
    570a:	4770      	bx	lr

0000570c <get_sub_config>:
	const struct nrf_clock_control_config *config =
    570c:	6840      	ldr	r0, [r0, #4]
}
    570e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    5712:	4770      	bx	lr

00005714 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    5714:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    5716:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    571a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    571e:	4770      	bx	lr

00005720 <get_status>:
{
    5720:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5722:	b2c9      	uxtb	r1, r1
    5724:	f7ff ffeb 	bl	56fe <get_sub_data>
    5728:	6880      	ldr	r0, [r0, #8]
}
    572a:	f000 0007 	and.w	r0, r0, #7
    572e:	bd08      	pop	{r3, pc}

00005730 <set_off_state>:
	__asm__ volatile(
    5730:	f04f 0320 	mov.w	r3, #32
    5734:	f3ef 8211 	mrs	r2, BASEPRI
    5738:	f383 8812 	msr	BASEPRI_MAX, r3
    573c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5740:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5742:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5746:	d001      	beq.n	574c <set_off_state+0x1c>
    5748:	428b      	cmp	r3, r1
    574a:	d107      	bne.n	575c <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    574c:	2301      	movs	r3, #1
    574e:	6003      	str	r3, [r0, #0]
	int err = 0;
    5750:	2000      	movs	r0, #0
	__asm__ volatile(
    5752:	f382 8811 	msr	BASEPRI, r2
    5756:	f3bf 8f6f 	isb	sy
}
    575a:	4770      	bx	lr
		err = -EPERM;
    575c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5760:	e7f7      	b.n	5752 <set_off_state+0x22>

00005762 <set_starting_state>:
	__asm__ volatile(
    5762:	f04f 0320 	mov.w	r3, #32
    5766:	f3ef 8211 	mrs	r2, BASEPRI
    576a:	f383 8812 	msr	BASEPRI_MAX, r3
    576e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5772:	6803      	ldr	r3, [r0, #0]
    5774:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5778:	f003 0307 	and.w	r3, r3, #7
    577c:	2b01      	cmp	r3, #1
    577e:	d008      	beq.n	5792 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    5780:	458c      	cmp	ip, r1
    5782:	d009      	beq.n	5798 <set_starting_state+0x36>
		err = -EPERM;
    5784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    5788:	f382 8811 	msr	BASEPRI, r2
    578c:	f3bf 8f6f 	isb	sy
}
    5790:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5792:	6001      	str	r1, [r0, #0]
	int err = 0;
    5794:	2000      	movs	r0, #0
    5796:	e7f7      	b.n	5788 <set_starting_state+0x26>
		err = -EALREADY;
    5798:	f06f 0077 	mvn.w	r0, #119	; 0x77
    579c:	e7f4      	b.n	5788 <set_starting_state+0x26>

0000579e <set_on_state>:
	__asm__ volatile(
    579e:	f04f 0320 	mov.w	r3, #32
    57a2:	f3ef 8211 	mrs	r2, BASEPRI
    57a6:	f383 8812 	msr	BASEPRI_MAX, r3
    57aa:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    57ae:	6803      	ldr	r3, [r0, #0]
    57b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    57b4:	f043 0302 	orr.w	r3, r3, #2
    57b8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    57ba:	f382 8811 	msr	BASEPRI, r2
    57be:	f3bf 8f6f 	isb	sy
}
    57c2:	4770      	bx	lr

000057c4 <clkstarted_handle>:
{
    57c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    57c6:	4606      	mov	r6, r0
    57c8:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    57ca:	f7ff ff98 	bl	56fe <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    57ce:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    57d0:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    57d2:	2300      	movs	r3, #0
    57d4:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    57d8:	f7ff ffe1 	bl	579e <set_on_state>
	if (callback) {
    57dc:	b11d      	cbz	r5, 57e6 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    57de:	463a      	mov	r2, r7
    57e0:	4621      	mov	r1, r4
    57e2:	4630      	mov	r0, r6
    57e4:	47a8      	blx	r5
}
    57e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000057e8 <stop>:
{
    57e8:	b570      	push	{r4, r5, r6, lr}
    57ea:	4606      	mov	r6, r0
    57ec:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    57ee:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    57f0:	4621      	mov	r1, r4
    57f2:	f7ff ff84 	bl	56fe <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    57f6:	4629      	mov	r1, r5
    57f8:	3008      	adds	r0, #8
    57fa:	f7ff ff99 	bl	5730 <set_off_state>
	if (err < 0) {
    57fe:	2800      	cmp	r0, #0
    5800:	db06      	blt.n	5810 <stop+0x28>
	get_sub_config(dev, type)->stop();
    5802:	4621      	mov	r1, r4
    5804:	4630      	mov	r0, r6
    5806:	f7ff ff81 	bl	570c <get_sub_config>
    580a:	6843      	ldr	r3, [r0, #4]
    580c:	4798      	blx	r3
	return 0;
    580e:	2000      	movs	r0, #0
}
    5810:	bd70      	pop	{r4, r5, r6, pc}

00005812 <api_stop>:
{
    5812:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    5814:	2280      	movs	r2, #128	; 0x80
    5816:	f7ff ffe7 	bl	57e8 <stop>
}
    581a:	bd08      	pop	{r3, pc}

0000581c <async_start>:
{
    581c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5820:	4606      	mov	r6, r0
    5822:	4690      	mov	r8, r2
    5824:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5826:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5828:	4629      	mov	r1, r5
    582a:	f7ff ff68 	bl	56fe <get_sub_data>
    582e:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    5830:	9906      	ldr	r1, [sp, #24]
    5832:	3008      	adds	r0, #8
    5834:	f7ff ff95 	bl	5762 <set_starting_state>
	if (err < 0) {
    5838:	2800      	cmp	r0, #0
    583a:	db09      	blt.n	5850 <async_start+0x34>
	subdata->cb = cb;
    583c:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    5840:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    5842:	4629      	mov	r1, r5
    5844:	4630      	mov	r0, r6
    5846:	f7ff ff61 	bl	570c <get_sub_config>
    584a:	6803      	ldr	r3, [r0, #0]
    584c:	4798      	blx	r3
	return 0;
    584e:	2000      	movs	r0, #0
}
    5850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005854 <api_start>:
{
    5854:	b510      	push	{r4, lr}
    5856:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5858:	2480      	movs	r4, #128	; 0x80
    585a:	9400      	str	r4, [sp, #0]
    585c:	f7ff ffde 	bl	581c <async_start>
}
    5860:	b002      	add	sp, #8
    5862:	bd10      	pop	{r4, pc}

00005864 <onoff_started_callback>:
{
    5864:	b510      	push	{r4, lr}
    5866:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    5868:	b2c9      	uxtb	r1, r1
    586a:	f7ff ff53 	bl	5714 <get_onoff_manager>
	notify(mgr, 0);
    586e:	2100      	movs	r1, #0
    5870:	47a0      	blx	r4
}
    5872:	bd10      	pop	{r4, pc}

00005874 <hfclk_start>:
{
    5874:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5876:	2001      	movs	r0, #1
    5878:	f000 fcf3 	bl	6262 <nrfx_clock_start>
}
    587c:	bd08      	pop	{r3, pc}

0000587e <hfclkaudio_start>:
{
    587e:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5880:	2003      	movs	r0, #3
    5882:	f000 fcee 	bl	6262 <nrfx_clock_start>
}
    5886:	bd08      	pop	{r3, pc}

00005888 <hfclk192m_start>:
{
    5888:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    588a:	2002      	movs	r0, #2
    588c:	f000 fce9 	bl	6262 <nrfx_clock_start>
}
    5890:	bd08      	pop	{r3, pc}

00005892 <lfclk_start>:
{
    5892:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5894:	2000      	movs	r0, #0
    5896:	f000 fce4 	bl	6262 <nrfx_clock_start>
}
    589a:	bd08      	pop	{r3, pc}

0000589c <hfclk_stop>:
{
    589c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    589e:	2001      	movs	r0, #1
    58a0:	f000 fd54 	bl	634c <nrfx_clock_stop>
}
    58a4:	bd08      	pop	{r3, pc}

000058a6 <hfclkaudio_stop>:
{
    58a6:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    58a8:	2003      	movs	r0, #3
    58aa:	f000 fd4f 	bl	634c <nrfx_clock_stop>
}
    58ae:	bd08      	pop	{r3, pc}

000058b0 <hfclk192m_stop>:
{
    58b0:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    58b2:	2002      	movs	r0, #2
    58b4:	f000 fd4a 	bl	634c <nrfx_clock_stop>
}
    58b8:	bd08      	pop	{r3, pc}

000058ba <lfclk_stop>:
{
    58ba:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    58bc:	2000      	movs	r0, #0
    58be:	f000 fd45 	bl	634c <nrfx_clock_stop>
}
    58c2:	bd08      	pop	{r3, pc}

000058c4 <k_msleep>:
{
    58c4:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    58c6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    58ca:	17c1      	asrs	r1, r0, #31
    58cc:	03c9      	lsls	r1, r1, #15
    58ce:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    58d2:	03c0      	lsls	r0, r0, #15
    58d4:	f240 33e7 	movw	r3, #999	; 0x3e7
    58d8:	18c0      	adds	r0, r0, r3
    58da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    58de:	f04f 0300 	mov.w	r3, #0
    58e2:	f141 0100 	adc.w	r1, r1, #0
    58e6:	f7fa fc35 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    58ea:	f7fe fd93 	bl	4414 <z_impl_k_sleep>
}
    58ee:	bd08      	pop	{r3, pc}

000058f0 <blocking_start_callback>:
{
    58f0:	b508      	push	{r3, lr}
    58f2:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    58f4:	f7fe f9be 	bl	3c74 <z_impl_k_sem_give>
}
    58f8:	bd08      	pop	{r3, pc}

000058fa <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    58fa:	460b      	mov	r3, r1
    58fc:	b139      	cbz	r1, 590e <sys_slist_remove+0x14>
	return node->next;
    58fe:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    5900:	6019      	str	r1, [r3, #0]
	return list->tail;
    5902:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    5904:	428a      	cmp	r2, r1
    5906:	d009      	beq.n	591c <sys_slist_remove+0x22>
	parent->next = child;
    5908:	2300      	movs	r3, #0
    590a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    590c:	4770      	bx	lr
	return node->next;
    590e:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    5910:	6003      	str	r3, [r0, #0]
	return list->tail;
    5912:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    5914:	428a      	cmp	r2, r1
    5916:	d1f7      	bne.n	5908 <sys_slist_remove+0xe>
	list->tail = node;
    5918:	6043      	str	r3, [r0, #4]
}
    591a:	e7f5      	b.n	5908 <sys_slist_remove+0xe>
	list->tail = node;
    591c:	6043      	str	r3, [r0, #4]
}
    591e:	e7f3      	b.n	5908 <sys_slist_remove+0xe>

00005920 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5920:	b508      	push	{r3, lr}
    5922:	460a      	mov	r2, r1
	return list->head;
    5924:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5926:	2100      	movs	r1, #0
    5928:	e001      	b.n	592e <sys_slist_find_and_remove+0xe>
    592a:	4619      	mov	r1, r3
    592c:	681b      	ldr	r3, [r3, #0]
    592e:	b12b      	cbz	r3, 593c <sys_slist_find_and_remove+0x1c>
    5930:	4293      	cmp	r3, r2
    5932:	d1fa      	bne.n	592a <sys_slist_find_and_remove+0xa>
    5934:	f7ff ffe1 	bl	58fa <sys_slist_remove>
    5938:	2001      	movs	r0, #1
    593a:	e000      	b.n	593e <sys_slist_find_and_remove+0x1e>
    593c:	2000      	movs	r0, #0
    593e:	bd08      	pop	{r3, pc}

00005940 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    5940:	b570      	push	{r4, r5, r6, lr}
    5942:	4604      	mov	r4, r0
    5944:	460d      	mov	r5, r1
    5946:	4616      	mov	r6, r2
	return list->head;
    5948:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    594a:	b133      	cbz	r3, 595a <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    594c:	f7ff ffe8 	bl	5920 <sys_slist_find_and_remove>
    5950:	b970      	cbnz	r0, 5970 <gpio_manage_callback+0x30>
			if (!set) {
    5952:	b91e      	cbnz	r6, 595c <gpio_manage_callback+0x1c>
				return -EINVAL;
    5954:	f06f 0015 	mvn.w	r0, #21
    5958:	e006      	b.n	5968 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    595a:	b132      	cbz	r2, 596a <gpio_manage_callback+0x2a>
    595c:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    595e:	602b      	str	r3, [r5, #0]
	list->head = node;
    5960:	6025      	str	r5, [r4, #0]
	return list->tail;
    5962:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    5964:	b143      	cbz	r3, 5978 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5966:	2000      	movs	r0, #0
}
    5968:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    596a:	f06f 0015 	mvn.w	r0, #21
    596e:	e7fb      	b.n	5968 <gpio_manage_callback+0x28>
	if (set) {
    5970:	2e00      	cmp	r6, #0
    5972:	d1f3      	bne.n	595c <gpio_manage_callback+0x1c>
	return 0;
    5974:	2000      	movs	r0, #0
    5976:	e7f7      	b.n	5968 <gpio_manage_callback+0x28>
	list->tail = node;
    5978:	6065      	str	r5, [r4, #4]
    597a:	2000      	movs	r0, #0
}
    597c:	e7f4      	b.n	5968 <gpio_manage_callback+0x28>

0000597e <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    597e:	b570      	push	{r4, r5, r6, lr}
    5980:	460e      	mov	r6, r1
    5982:	4615      	mov	r5, r2
	return list->head;
    5984:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5986:	b121      	cbz	r1, 5992 <gpio_fire_callbacks+0x14>
	return node->next;
    5988:	680c      	ldr	r4, [r1, #0]
    598a:	b13c      	cbz	r4, 599c <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    598c:	b931      	cbnz	r1, 599c <gpio_fire_callbacks+0x1e>
    598e:	460c      	mov	r4, r1
    5990:	e004      	b.n	599c <gpio_fire_callbacks+0x1e>
    5992:	460c      	mov	r4, r1
    5994:	e002      	b.n	599c <gpio_fire_callbacks+0x1e>
    5996:	4623      	mov	r3, r4
    5998:	4621      	mov	r1, r4
    599a:	461c      	mov	r4, r3
    599c:	b171      	cbz	r1, 59bc <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    599e:	688a      	ldr	r2, [r1, #8]
    59a0:	402a      	ands	r2, r5
    59a2:	d002      	beq.n	59aa <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    59a4:	684b      	ldr	r3, [r1, #4]
    59a6:	4630      	mov	r0, r6
    59a8:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    59aa:	2c00      	cmp	r4, #0
    59ac:	d0f3      	beq.n	5996 <gpio_fire_callbacks+0x18>
	return node->next;
    59ae:	6823      	ldr	r3, [r4, #0]
    59b0:	2b00      	cmp	r3, #0
    59b2:	d0f1      	beq.n	5998 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    59b4:	2c00      	cmp	r4, #0
    59b6:	d1ef      	bne.n	5998 <gpio_fire_callbacks+0x1a>
    59b8:	4623      	mov	r3, r4
    59ba:	e7ed      	b.n	5998 <gpio_fire_callbacks+0x1a>
		}
	}
}
    59bc:	bd70      	pop	{r4, r5, r6, pc}

000059be <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    59be:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    59c2:	0580      	lsls	r0, r0, #22
    59c4:	0d80      	lsrs	r0, r0, #22
    59c6:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    59ca:	d033      	beq.n	5a34 <get_drive+0x76>
    59cc:	d816      	bhi.n	59fc <get_drive+0x3e>
    59ce:	2806      	cmp	r0, #6
    59d0:	d02c      	beq.n	5a2c <get_drive+0x6e>
    59d2:	d906      	bls.n	59e2 <get_drive+0x24>
    59d4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    59d8:	d10d      	bne.n	59f6 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    59da:	2301      	movs	r3, #1
    59dc:	700b      	strb	r3, [r1, #0]
	return 0;
    59de:	2000      	movs	r0, #0
		break;
    59e0:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    59e2:	b300      	cbz	r0, 5a26 <get_drive+0x68>
    59e4:	2802      	cmp	r0, #2
    59e6:	d103      	bne.n	59f0 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    59e8:	2304      	movs	r3, #4
    59ea:	700b      	strb	r3, [r1, #0]
	return 0;
    59ec:	2000      	movs	r0, #0
		break;
    59ee:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    59f0:	f06f 0015 	mvn.w	r0, #21
    59f4:	4770      	bx	lr
    59f6:	f06f 0015 	mvn.w	r0, #21
    59fa:	4770      	bx	lr
    59fc:	f240 2302 	movw	r3, #514	; 0x202
    5a00:	4298      	cmp	r0, r3
    5a02:	d01b      	beq.n	5a3c <get_drive+0x7e>
    5a04:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    5a08:	d103      	bne.n	5a12 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    5a0a:	2303      	movs	r3, #3
    5a0c:	700b      	strb	r3, [r1, #0]
	return 0;
    5a0e:	2000      	movs	r0, #0
		break;
    5a10:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5a12:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    5a16:	d103      	bne.n	5a20 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    5a18:	2302      	movs	r3, #2
    5a1a:	700b      	strb	r3, [r1, #0]
	return 0;
    5a1c:	2000      	movs	r0, #0
		break;
    5a1e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5a20:	f06f 0015 	mvn.w	r0, #21
    5a24:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    5a26:	2000      	movs	r0, #0
    5a28:	7008      	strb	r0, [r1, #0]
		break;
    5a2a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    5a2c:	2306      	movs	r3, #6
    5a2e:	700b      	strb	r3, [r1, #0]
	return 0;
    5a30:	2000      	movs	r0, #0
		break;
    5a32:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    5a34:	2307      	movs	r3, #7
    5a36:	700b      	strb	r3, [r1, #0]
	return 0;
    5a38:	2000      	movs	r0, #0
		break;
    5a3a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    5a3c:	2305      	movs	r3, #5
    5a3e:	700b      	strb	r3, [r1, #0]
	return 0;
    5a40:	2000      	movs	r0, #0
}
    5a42:	4770      	bx	lr

00005a44 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    5a44:	f010 0f10 	tst.w	r0, #16
    5a48:	d104      	bne.n	5a54 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    5a4a:	f010 0f20 	tst.w	r0, #32
    5a4e:	d103      	bne.n	5a58 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    5a50:	2000      	movs	r0, #0
    5a52:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    5a54:	2003      	movs	r0, #3
    5a56:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    5a58:	2001      	movs	r0, #1
}
    5a5a:	4770      	bx	lr

00005a5c <gpio_nrfx_port_get_raw>:
	return port->config;
    5a5c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a5e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5a60:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    5a62:	600b      	str	r3, [r1, #0]
}
    5a64:	2000      	movs	r0, #0
    5a66:	4770      	bx	lr

00005a68 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    5a68:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a6a:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    5a6c:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    5a70:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    5a74:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
    5a76:	60d9      	str	r1, [r3, #12]
}
    5a78:	2000      	movs	r0, #0
    5a7a:	4770      	bx	lr

00005a7c <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    5a7c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a7e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    5a80:	6099      	str	r1, [r3, #8]
}
    5a82:	2000      	movs	r0, #0
    5a84:	4770      	bx	lr

00005a86 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    5a86:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a88:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    5a8a:	60d9      	str	r1, [r3, #12]
}
    5a8c:	2000      	movs	r0, #0
    5a8e:	4770      	bx	lr

00005a90 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    5a90:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5a92:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5a94:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    5a96:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    5a9a:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    5a9c:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
    5a9e:	60d3      	str	r3, [r2, #12]
}
    5aa0:	2000      	movs	r0, #0
    5aa2:	4770      	bx	lr

00005aa4 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    5aa4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    5aa8:	d007      	beq.n	5aba <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5aaa:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    5aae:	d00d      	beq.n	5acc <get_trigger+0x28>
    5ab0:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5ab4:	d008      	beq.n	5ac8 <get_trigger+0x24>
    5ab6:	2001      	movs	r0, #1
}
    5ab8:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5aba:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5abe:	d001      	beq.n	5ac4 <get_trigger+0x20>
    5ac0:	2005      	movs	r0, #5
    5ac2:	4770      	bx	lr
    5ac4:	2004      	movs	r0, #4
    5ac6:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5ac8:	2002      	movs	r0, #2
    5aca:	4770      	bx	lr
    5acc:	2003      	movs	r0, #3
    5ace:	4770      	bx	lr

00005ad0 <gpio_nrfx_manage_callback>:
{
    5ad0:	b508      	push	{r3, lr}
	return port->data;
    5ad2:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5ad4:	3004      	adds	r0, #4
    5ad6:	f7ff ff33 	bl	5940 <gpio_manage_callback>
}
    5ada:	bd08      	pop	{r3, pc}

00005adc <nrfx_gpio_handler>:
{
    5adc:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    5ade:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    5ae2:	0940      	lsrs	r0, r0, #5
    5ae4:	f7fc f9f8 	bl	1ed8 <get_dev>
	if (port == NULL) {
    5ae8:	b130      	cbz	r0, 5af8 <nrfx_gpio_handler+0x1c>
    5aea:	4601      	mov	r1, r0
	return port->data;
    5aec:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    5aee:	2201      	movs	r2, #1
    5af0:	40a2      	lsls	r2, r4
    5af2:	3004      	adds	r0, #4
    5af4:	f7ff ff43 	bl	597e <gpio_fire_callbacks>
}
    5af8:	bd10      	pop	{r4, pc}

00005afa <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    5afa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5afc:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    5afe:	f04f 0120 	mov.w	r1, #32
    5b02:	f3ef 8311 	mrs	r3, BASEPRI
    5b06:	f381 8812 	msr	BASEPRI_MAX, r1
    5b0a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b0e:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5b12:	b131      	cbz	r1, 5b22 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b14:	2100      	movs	r1, #0
    5b16:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    5b1a:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b1e:	2101      	movs	r1, #1
    5b20:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    5b22:	f383 8811 	msr	BASEPRI, r3
    5b26:	f3bf 8f6f 	isb	sy
}
    5b2a:	4770      	bx	lr

00005b2c <uarte_nrfx_isr_int>:
{
    5b2c:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5b2e:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    5b30:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    5b32:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5b36:	f413 7f80 	tst.w	r3, #256	; 0x100
    5b3a:	d002      	beq.n	5b42 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5b3c:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    5b40:	b9d3      	cbnz	r3, 5b78 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5b42:	686b      	ldr	r3, [r5, #4]
    5b44:	f013 0f10 	tst.w	r3, #16
    5b48:	d015      	beq.n	5b76 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    5b4a:	f04f 0220 	mov.w	r2, #32
    5b4e:	f3ef 8311 	mrs	r3, BASEPRI
    5b52:	f382 8812 	msr	BASEPRI_MAX, r2
    5b56:	f3bf 8f6f 	isb	sy
    5b5a:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5b5e:	b112      	cbz	r2, 5b66 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5b60:	2200      	movs	r2, #0
    5b62:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5b66:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5b6a:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    5b6e:	f383 8811 	msr	BASEPRI, r3
    5b72:	f3bf 8f6f 	isb	sy
}
    5b76:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    5b78:	f7ff ffbf 	bl	5afa <endtx_isr>
    5b7c:	e7e1      	b.n	5b42 <uarte_nrfx_isr_int+0x16>

00005b7e <uarte_nrfx_configure>:
{
    5b7e:	b570      	push	{r4, r5, r6, lr}
    5b80:	b082      	sub	sp, #8
    5b82:	4605      	mov	r5, r0
    5b84:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    5b86:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    5b88:	794b      	ldrb	r3, [r1, #5]
    5b8a:	2b01      	cmp	r3, #1
    5b8c:	d006      	beq.n	5b9c <uarte_nrfx_configure+0x1e>
    5b8e:	2b03      	cmp	r3, #3
    5b90:	d011      	beq.n	5bb6 <uarte_nrfx_configure+0x38>
    5b92:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    5b96:	4610      	mov	r0, r2
    5b98:	b002      	add	sp, #8
    5b9a:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    5b9c:	2300      	movs	r3, #0
    5b9e:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5ba2:	79a3      	ldrb	r3, [r4, #6]
    5ba4:	2b03      	cmp	r3, #3
    5ba6:	d146      	bne.n	5c36 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    5ba8:	79e3      	ldrb	r3, [r4, #7]
    5baa:	b143      	cbz	r3, 5bbe <uarte_nrfx_configure+0x40>
    5bac:	2b01      	cmp	r3, #1
    5bae:	d015      	beq.n	5bdc <uarte_nrfx_configure+0x5e>
    5bb0:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5bb4:	e7ef      	b.n	5b96 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5bb6:	2310      	movs	r3, #16
    5bb8:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    5bbc:	e7f1      	b.n	5ba2 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    5bbe:	2300      	movs	r3, #0
    5bc0:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    5bc4:	2300      	movs	r3, #0
    5bc6:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    5bca:	7923      	ldrb	r3, [r4, #4]
    5bcc:	2b01      	cmp	r3, #1
    5bce:	d02a      	beq.n	5c26 <uarte_nrfx_configure+0xa8>
    5bd0:	2b02      	cmp	r3, #2
    5bd2:	d024      	beq.n	5c1e <uarte_nrfx_configure+0xa0>
    5bd4:	b133      	cbz	r3, 5be4 <uarte_nrfx_configure+0x66>
    5bd6:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5bda:	e7dc      	b.n	5b96 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    5bdc:	2301      	movs	r3, #1
    5bde:	f88d 3000 	strb.w	r3, [sp]
		break;
    5be2:	e7ef      	b.n	5bc4 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    5be4:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5be8:	6821      	ldr	r1, [r4, #0]
    5bea:	4628      	mov	r0, r5
    5bec:	f7fc fa8a 	bl	2104 <baudrate_set>
    5bf0:	4602      	mov	r2, r0
    5bf2:	bb18      	cbnz	r0, 5c3c <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    5bf4:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    5bf6:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5bf8:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    5bfc:	f89d 0002 	ldrb.w	r0, [sp, #2]
    5c00:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    5c02:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    5c06:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    5c08:	f89d 0000 	ldrb.w	r0, [sp]
    5c0c:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5c0e:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    5c12:	3604      	adds	r6, #4
    5c14:	e894 0003 	ldmia.w	r4, {r0, r1}
    5c18:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    5c1c:	e7bb      	b.n	5b96 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5c1e:	230e      	movs	r3, #14
    5c20:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    5c24:	e7e0      	b.n	5be8 <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5c26:	230e      	movs	r3, #14
    5c28:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    5c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
    5c30:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    5c34:	e7d8      	b.n	5be8 <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    5c36:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5c3a:	e7ac      	b.n	5b96 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    5c3c:	f06f 0285 	mvn.w	r2, #133	; 0x85
    5c40:	e7a9      	b.n	5b96 <uarte_nrfx_configure+0x18>

00005c42 <uarte_nrfx_config_get>:
{
    5c42:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    5c44:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    5c46:	3304      	adds	r3, #4
    5c48:	e893 0003 	ldmia.w	r3, {r0, r1}
    5c4c:	e882 0003 	stmia.w	r2, {r0, r1}
}
    5c50:	2000      	movs	r0, #0
    5c52:	4770      	bx	lr

00005c54 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    5c54:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c56:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5c58:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5c5c:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5c60:	4770      	bx	lr

00005c62 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    5c62:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c64:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5c66:	685b      	ldr	r3, [r3, #4]
    5c68:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c6c:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5c70:	b929      	cbnz	r1, 5c7e <is_tx_ready+0x1c>
    5c72:	b933      	cbnz	r3, 5c82 <is_tx_ready+0x20>
    5c74:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    5c78:	b92b      	cbnz	r3, 5c86 <is_tx_ready+0x24>
    5c7a:	2000      	movs	r0, #0
    5c7c:	4770      	bx	lr
    5c7e:	2001      	movs	r0, #1
    5c80:	4770      	bx	lr
    5c82:	2000      	movs	r0, #0
    5c84:	4770      	bx	lr
    5c86:	2001      	movs	r0, #1
}
    5c88:	4770      	bx	lr

00005c8a <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    5c8a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c8c:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5c8e:	2208      	movs	r2, #8
    5c90:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    5c94:	4770      	bx	lr

00005c96 <tx_start>:
{
    5c96:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5c98:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c9a:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5c9c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5ca0:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ca4:	2200      	movs	r2, #0
    5ca6:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    5caa:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    5cae:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    5cb2:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5cb6:	685b      	ldr	r3, [r3, #4]
    5cb8:	f013 0f10 	tst.w	r3, #16
    5cbc:	d102      	bne.n	5cc4 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cbe:	2301      	movs	r3, #1
    5cc0:	60a3      	str	r3, [r4, #8]
}
    5cc2:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    5cc4:	2101      	movs	r1, #1
    5cc6:	f7ff ffe0 	bl	5c8a <uarte_enable>
    p_reg->INTENSET = mask;
    5cca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5cce:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    5cd2:	e7f4      	b.n	5cbe <tx_start+0x28>

00005cd4 <uarte_nrfx_poll_in>:
{
    5cd4:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    5cd6:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    5cd8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5cda:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5cdc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5ce0:	b15a      	cbz	r2, 5cfa <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    5ce2:	6962      	ldr	r2, [r4, #20]
    5ce4:	7812      	ldrb	r2, [r2, #0]
    5ce6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ce8:	2000      	movs	r0, #0
    5cea:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5cee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5cf2:	2201      	movs	r2, #1
    5cf4:	601a      	str	r2, [r3, #0]
}
    5cf6:	bc10      	pop	{r4}
    5cf8:	4770      	bx	lr
		return -1;
    5cfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5cfe:	e7fa      	b.n	5cf6 <uarte_nrfx_poll_in+0x22>

00005d00 <k_msleep>:
{
    5d00:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    5d02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    5d06:	17c1      	asrs	r1, r0, #31
    5d08:	03c9      	lsls	r1, r1, #15
    5d0a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    5d0e:	03c0      	lsls	r0, r0, #15
    5d10:	f240 33e7 	movw	r3, #999	; 0x3e7
    5d14:	18c0      	adds	r0, r0, r3
    5d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5d1a:	f04f 0300 	mov.w	r3, #0
    5d1e:	f141 0100 	adc.w	r1, r1, #0
    5d22:	f7fa fa17 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    5d26:	f7fe fb75 	bl	4414 <z_impl_k_sleep>
}
    5d2a:	bd08      	pop	{r3, pc}

00005d2c <wait_tx_ready>:
{
    5d2c:	b570      	push	{r4, r5, r6, lr}
    5d2e:	4606      	mov	r6, r0
    5d30:	e013      	b.n	5d5a <wait_tx_ready+0x2e>
		if (res) {
    5d32:	b17d      	cbz	r5, 5d54 <wait_tx_ready+0x28>
	__asm__ volatile(
    5d34:	f04f 0320 	mov.w	r3, #32
    5d38:	f3ef 8411 	mrs	r4, BASEPRI
    5d3c:	f383 8812 	msr	BASEPRI_MAX, r3
    5d40:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5d44:	4630      	mov	r0, r6
    5d46:	f7ff ff8c 	bl	5c62 <is_tx_ready>
    5d4a:	b998      	cbnz	r0, 5d74 <wait_tx_ready+0x48>
	__asm__ volatile(
    5d4c:	f384 8811 	msr	BASEPRI, r4
    5d50:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    5d54:	2001      	movs	r0, #1
    5d56:	f7ff ffd3 	bl	5d00 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5d5a:	2464      	movs	r4, #100	; 0x64
    5d5c:	4630      	mov	r0, r6
    5d5e:	f7ff ff80 	bl	5c62 <is_tx_ready>
    5d62:	4605      	mov	r5, r0
    5d64:	2800      	cmp	r0, #0
    5d66:	d1e4      	bne.n	5d32 <wait_tx_ready+0x6>
    5d68:	2001      	movs	r0, #1
    5d6a:	f000 f9af 	bl	60cc <nrfx_busy_wait>
    5d6e:	3c01      	subs	r4, #1
    5d70:	d1f4      	bne.n	5d5c <wait_tx_ready+0x30>
    5d72:	e7de      	b.n	5d32 <wait_tx_ready+0x6>
}
    5d74:	4620      	mov	r0, r4
    5d76:	bd70      	pop	{r4, r5, r6, pc}

00005d78 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    5d78:	b510      	push	{r4, lr}
    5d7a:	b082      	sub	sp, #8
    5d7c:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    5d7e:	aa01      	add	r2, sp, #4
    5d80:	f000 f8e1 	bl	5f46 <pinctrl_lookup_state>
	if (ret < 0) {
    5d84:	2800      	cmp	r0, #0
    5d86:	db05      	blt.n	5d94 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    5d88:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5d8a:	6822      	ldr	r2, [r4, #0]
    5d8c:	7919      	ldrb	r1, [r3, #4]
    5d8e:	6818      	ldr	r0, [r3, #0]
    5d90:	f7fc fd28 	bl	27e4 <pinctrl_configure_pins>
}
    5d94:	b002      	add	sp, #8
    5d96:	bd10      	pop	{r4, pc}

00005d98 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d9c:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    5d9e:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    5da0:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    5da2:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5da6:	2100      	movs	r1, #0
    5da8:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5dac:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    5db0:	68f8      	ldr	r0, [r7, #12]
    5db2:	f7ff ffe1 	bl	5d78 <pinctrl_apply_state>
	if (err < 0) {
    5db6:	1e05      	subs	r5, r0, #0
    5db8:	db35      	blt.n	5e26 <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    5dba:	f108 0104 	add.w	r1, r8, #4
    5dbe:	4620      	mov	r0, r4
    5dc0:	f7ff fedd 	bl	5b7e <uarte_nrfx_configure>
	if (err) {
    5dc4:	4605      	mov	r5, r0
    5dc6:	bb70      	cbnz	r0, 5e26 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5dc8:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5dca:	f013 0f02 	tst.w	r3, #2
    5dce:	d12d      	bne.n	5e2c <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5dd0:	2308      	movs	r3, #8
    5dd2:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    5dd6:	7a3b      	ldrb	r3, [r7, #8]
    5dd8:	b95b      	cbnz	r3, 5df2 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5dda:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    5dde:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    5de2:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5de6:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5dea:	2301      	movs	r3, #1
    5dec:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5df0:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5df2:	687b      	ldr	r3, [r7, #4]
    5df4:	f013 0f02 	tst.w	r3, #2
    5df8:	d103      	bne.n	5e02 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    5dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
    5dfe:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5e02:	687b      	ldr	r3, [r7, #4]
    5e04:	f013 0f10 	tst.w	r3, #16
    5e08:	d003      	beq.n	5e12 <uarte_instance_init+0x7a>
    5e0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5e0e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    5e12:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5e16:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5e1a:	2300      	movs	r3, #0
    5e1c:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5e20:	2301      	movs	r3, #1
    5e22:	60b3      	str	r3, [r6, #8]
    5e24:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5e26:	4628      	mov	r0, r5
    5e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    5e2c:	4641      	mov	r1, r8
    5e2e:	4630      	mov	r0, r6
    5e30:	f7fc fa3e 	bl	22b0 <endtx_stoptx_ppi_init>
		if (err < 0) {
    5e34:	2800      	cmp	r0, #0
    5e36:	dacb      	bge.n	5dd0 <uarte_instance_init+0x38>
			return err;
    5e38:	4605      	mov	r5, r0
    5e3a:	e7f4      	b.n	5e26 <uarte_instance_init+0x8e>

00005e3c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5e3c:	b510      	push	{r4, lr}
    5e3e:	4604      	mov	r4, r0
    5e40:	2200      	movs	r2, #0
    5e42:	2101      	movs	r1, #1
    5e44:	2008      	movs	r0, #8
    5e46:	f7ff faee 	bl	5426 <z_arm_irq_priority_set>
    5e4a:	2008      	movs	r0, #8
    5e4c:	f7ff fae6 	bl	541c <arch_irq_enable>
    5e50:	2100      	movs	r1, #0
    5e52:	4620      	mov	r0, r4
    5e54:	f7ff ffa0 	bl	5d98 <uarte_instance_init>
    5e58:	bd10      	pop	{r4, pc}

00005e5a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5e5a:	4770      	bx	lr

00005e5c <counter_sub>:
	return (a - b) & COUNTER_MAX;
    5e5c:	1a40      	subs	r0, r0, r1
}
    5e5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5e62:	4770      	bx	lr

00005e64 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5e64:	f100 0350 	add.w	r3, r0, #80	; 0x50
    5e68:	009b      	lsls	r3, r3, #2
    5e6a:	b29b      	uxth	r3, r3
    5e6c:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    5e70:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    5e74:	2200      	movs	r2, #0
    5e76:	601a      	str	r2, [r3, #0]
    5e78:	681b      	ldr	r3, [r3, #0]
}
    5e7a:	4770      	bx	lr

00005e7c <absolute_time_to_cc>:
}
    5e7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5e80:	4770      	bx	lr

00005e82 <full_int_lock>:
	__asm__ volatile(
    5e82:	f04f 0320 	mov.w	r3, #32
    5e86:	f3ef 8011 	mrs	r0, BASEPRI
    5e8a:	f383 8812 	msr	BASEPRI_MAX, r3
    5e8e:	f3bf 8f6f 	isb	sy
}
    5e92:	4770      	bx	lr

00005e94 <full_int_unlock>:
	__asm__ volatile(
    5e94:	f380 8811 	msr	BASEPRI, r0
    5e98:	f3bf 8f6f 	isb	sy
}
    5e9c:	4770      	bx	lr

00005e9e <set_absolute_alarm>:
{
    5e9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5ea0:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5ea2:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    5ea6:	f7fc fa2d 	bl	2304 <get_comparator>
    5eaa:	4607      	mov	r7, r0
    5eac:	e019      	b.n	5ee2 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    5eae:	2013      	movs	r0, #19
    5eb0:	f000 fd0f 	bl	68d2 <z_impl_k_busy_wait>
}
    5eb4:	e022      	b.n	5efc <set_absolute_alarm+0x5e>
		event_clear(chan);
    5eb6:	4630      	mov	r0, r6
    5eb8:	f7ff ffd4 	bl	5e64 <event_clear>
		event_enable(chan);
    5ebc:	4630      	mov	r0, r6
    5ebe:	f7fc fa29 	bl	2314 <event_enable>
		set_comparator(chan, cc_val);
    5ec2:	4629      	mov	r1, r5
    5ec4:	4630      	mov	r0, r6
    5ec6:	f7fc fa13 	bl	22f0 <set_comparator>
		now2 = counter();
    5eca:	f7fc fa37 	bl	233c <counter>
	} while ((now2 != now) &&
    5ece:	4284      	cmp	r4, r0
    5ed0:	d01e      	beq.n	5f10 <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5ed2:	1c81      	adds	r1, r0, #2
    5ed4:	4628      	mov	r0, r5
    5ed6:	f7ff ffc1 	bl	5e5c <counter_sub>
	} while ((now2 != now) &&
    5eda:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5ede:	d917      	bls.n	5f10 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    5ee0:	462f      	mov	r7, r5
		now = counter();
    5ee2:	f7fc fa2b 	bl	233c <counter>
    5ee6:	4604      	mov	r4, r0
		set_comparator(chan, now);
    5ee8:	4601      	mov	r1, r0
    5eea:	4630      	mov	r0, r6
    5eec:	f7fc fa00 	bl	22f0 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    5ef0:	4621      	mov	r1, r4
    5ef2:	4638      	mov	r0, r7
    5ef4:	f7ff ffb2 	bl	5e5c <counter_sub>
    5ef8:	2801      	cmp	r0, #1
    5efa:	d0d8      	beq.n	5eae <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5efc:	1ca7      	adds	r7, r4, #2
    5efe:	4639      	mov	r1, r7
    5f00:	4628      	mov	r0, r5
    5f02:	f7ff ffab 	bl	5e5c <counter_sub>
    5f06:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5f0a:	d9d4      	bls.n	5eb6 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    5f0c:	463d      	mov	r5, r7
    5f0e:	e7d2      	b.n	5eb6 <set_absolute_alarm+0x18>
}
    5f10:	4628      	mov	r0, r5
    5f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005f14 <compare_set>:
{
    5f14:	b5f0      	push	{r4, r5, r6, r7, lr}
    5f16:	b083      	sub	sp, #12
    5f18:	4604      	mov	r4, r0
    5f1a:	4617      	mov	r7, r2
    5f1c:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    5f1e:	f7fc fa13 	bl	2348 <compare_int_lock>
    5f22:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    5f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5f26:	9301      	str	r3, [sp, #4]
    5f28:	9b08      	ldr	r3, [sp, #32]
    5f2a:	9300      	str	r3, [sp, #0]
    5f2c:	463a      	mov	r2, r7
    5f2e:	462b      	mov	r3, r5
    5f30:	4620      	mov	r0, r4
    5f32:	f7fc fae5 	bl	2500 <compare_set_nolocks>
    5f36:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    5f38:	4631      	mov	r1, r6
    5f3a:	4620      	mov	r0, r4
    5f3c:	f7fc fa5c 	bl	23f8 <compare_int_unlock>
}
    5f40:	4628      	mov	r0, r5
    5f42:	b003      	add	sp, #12
    5f44:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005f46 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5f46:	b410      	push	{r4}
	*state = &config->states[0];
    5f48:	6843      	ldr	r3, [r0, #4]
    5f4a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5f4c:	e001      	b.n	5f52 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    5f4e:	3408      	adds	r4, #8
    5f50:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5f52:	6814      	ldr	r4, [r2, #0]
    5f54:	7a03      	ldrb	r3, [r0, #8]
    5f56:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    5f5a:	3b01      	subs	r3, #1
    5f5c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5f60:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    5f64:	429c      	cmp	r4, r3
    5f66:	d804      	bhi.n	5f72 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    5f68:	7963      	ldrb	r3, [r4, #5]
    5f6a:	428b      	cmp	r3, r1
    5f6c:	d1ef      	bne.n	5f4e <pinctrl_lookup_state+0x8>
			return 0;
    5f6e:	2000      	movs	r0, #0
    5f70:	e001      	b.n	5f76 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    5f72:	f06f 0001 	mvn.w	r0, #1
}
    5f76:	bc10      	pop	{r4}
    5f78:	4770      	bx	lr

00005f7a <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5f7a:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    5f7c:	2000      	movs	r0, #0
    5f7e:	f7ff fa91 	bl	54a4 <sys_arch_reboot>

00005f82 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    5f82:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    5f84:	f7fe fc24 	bl	47d0 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    5f88:	bd08      	pop	{r3, pc}

00005f8a <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    5f8a:	b510      	push	{r4, lr}
    5f8c:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    5f8e:	f7fb f81b 	bl	fc8 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    5f92:	f7fb f92d 	bl	11f0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    5f96:	4620      	mov	r0, r4
    5f98:	f7ff fff3 	bl	5f82 <hw_cc3xx_init_internal>
	return res;
}
    5f9c:	bd10      	pop	{r4, pc}

00005f9e <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5f9e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5fa2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5fa6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5faa:	2a07      	cmp	r2, #7
    5fac:	d001      	beq.n	5fb2 <nrf53_errata_42+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5fae:	2000      	movs	r0, #0
    5fb0:	4770      	bx	lr
                    switch(var2)
    5fb2:	3b02      	subs	r3, #2
    5fb4:	2b00      	cmp	r3, #0
    5fb6:	d804      	bhi.n	5fc2 <nrf53_errata_42+0x24>
    5fb8:	e8df f003 	tbb	[pc, r3]
    5fbc:	01          	.byte	0x01
    5fbd:	00          	.byte	0x00
    5fbe:	2001      	movs	r0, #1
    5fc0:	4770      	bx	lr
                            return false;
    5fc2:	2000      	movs	r0, #0
    #endif
}
    5fc4:	4770      	bx	lr

00005fc6 <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5fc6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5fca:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5fce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    5fd2:	2a07      	cmp	r2, #7
    5fd4:	d001      	beq.n	5fda <nrf53_errata_46+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    5fd6:	2000      	movs	r0, #0
    5fd8:	4770      	bx	lr
                    switch(var2)
    5fda:	2b04      	cmp	r3, #4
    5fdc:	d007      	beq.n	5fee <nrf53_errata_46+0x28>
    5fde:	d808      	bhi.n	5ff2 <nrf53_errata_46+0x2c>
    5fe0:	3b02      	subs	r3, #2
    5fe2:	2b01      	cmp	r3, #1
    5fe4:	d801      	bhi.n	5fea <nrf53_errata_46+0x24>
    5fe6:	2001      	movs	r0, #1
    #endif
}
    5fe8:	4770      	bx	lr
                            return false;
    5fea:	2000      	movs	r0, #0
    5fec:	4770      	bx	lr
                            return false;
    5fee:	2000      	movs	r0, #0
    5ff0:	4770      	bx	lr
                            return false;
    5ff2:	2000      	movs	r0, #0
    5ff4:	4770      	bx	lr

00005ff6 <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    5ff6:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    5ffa:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    5ffe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6002:	2a07      	cmp	r2, #7
    6004:	d001      	beq.n	600a <nrf53_errata_49+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6006:	2000      	movs	r0, #0
    6008:	4770      	bx	lr
                    switch(var2)
    600a:	3b02      	subs	r3, #2
    600c:	2b00      	cmp	r3, #0
    600e:	d804      	bhi.n	601a <nrf53_errata_49+0x24>
    6010:	e8df f003 	tbb	[pc, r3]
    6014:	01          	.byte	0x01
    6015:	00          	.byte	0x00
    6016:	2001      	movs	r0, #1
    6018:	4770      	bx	lr
                            return false;
    601a:	2000      	movs	r0, #0
    #endif
}
    601c:	4770      	bx	lr

0000601e <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    601e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6022:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6026:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    602a:	2a07      	cmp	r2, #7
    602c:	d001      	beq.n	6032 <nrf53_errata_55+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    602e:	2000      	movs	r0, #0
    6030:	4770      	bx	lr
                            return true;
    6032:	2001      	movs	r0, #1
    #endif
}
    6034:	4770      	bx	lr

00006036 <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6036:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    603a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    603e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6042:	2a07      	cmp	r2, #7
    6044:	d001      	beq.n	604a <nrf53_errata_64+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6046:	2000      	movs	r0, #0
    6048:	4770      	bx	lr
                    switch(var2)
    604a:	3b02      	subs	r3, #2
    604c:	2b00      	cmp	r3, #0
    604e:	d804      	bhi.n	605a <nrf53_errata_64+0x24>
    6050:	e8df f003 	tbb	[pc, r3]
    6054:	01          	.byte	0x01
    6055:	00          	.byte	0x00
    6056:	2001      	movs	r0, #1
    6058:	4770      	bx	lr
                            return false;
    605a:	2000      	movs	r0, #0
    #endif
}
    605c:	4770      	bx	lr

0000605e <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    605e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6062:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6066:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    606a:	2a07      	cmp	r2, #7
    606c:	d001      	beq.n	6072 <nrf53_errata_69+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    606e:	2000      	movs	r0, #0
    6070:	4770      	bx	lr
                    switch(var2)
    6072:	3b02      	subs	r3, #2
    6074:	2b00      	cmp	r3, #0
    6076:	d804      	bhi.n	6082 <nrf53_errata_69+0x24>
    6078:	e8df f003 	tbb	[pc, r3]
    607c:	01          	.byte	0x01
    607d:	00          	.byte	0x00
    607e:	2001      	movs	r0, #1
    6080:	4770      	bx	lr
                            return false;
    6082:	2000      	movs	r0, #0
    #endif
}
    6084:	4770      	bx	lr

00006086 <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6086:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    608a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    608e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6092:	2a07      	cmp	r2, #7
    6094:	d001      	beq.n	609a <nrf53_errata_97+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6096:	2000      	movs	r0, #0
    6098:	4770      	bx	lr
                    switch(var2)
    609a:	3b02      	subs	r3, #2
    609c:	2b00      	cmp	r3, #0
    609e:	d804      	bhi.n	60aa <nrf53_errata_97+0x24>
    60a0:	e8df f003 	tbb	[pc, r3]
    60a4:	01          	.byte	0x01
    60a5:	00          	.byte	0x00
    60a6:	2001      	movs	r0, #1
    60a8:	4770      	bx	lr
                            return false;
    60aa:	2000      	movs	r0, #0
    #endif
}
    60ac:	4770      	bx	lr

000060ae <nrf53_errata_140>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    60ae:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    60b2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    60b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    60ba:	2a07      	cmp	r2, #7
    60bc:	d001      	beq.n	60c2 <nrf53_errata_140+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    60be:	2000      	movs	r0, #0
    60c0:	4770      	bx	lr
                            return true;
    60c2:	2001      	movs	r0, #1
    #endif
}
    60c4:	4770      	bx	lr

000060c6 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    60c6:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    60c8:	4780      	blx	r0
}
    60ca:	bd08      	pop	{r3, pc}

000060cc <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    60cc:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    60ce:	f000 fc00 	bl	68d2 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    60d2:	bd08      	pop	{r3, pc}

000060d4 <nrf_clock_is_running>:
    switch (domain)
    60d4:	2903      	cmp	r1, #3
    60d6:	d82f      	bhi.n	6138 <nrf_clock_is_running+0x64>
    60d8:	e8df f001 	tbb	[pc, r1]
    60dc:	291c0f02 	.word	0x291c0f02
            if (p_clk_src != NULL)
    60e0:	b122      	cbz	r2, 60ec <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    60e2:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    60e6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    60ea:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    60ec:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    60f0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    60f4:	d122      	bne.n	613c <nrf_clock_is_running+0x68>
    return false;
    60f6:	2000      	movs	r0, #0
    60f8:	4770      	bx	lr
            if (p_clk_src != NULL)
    60fa:	b122      	cbz	r2, 6106 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    60fc:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6100:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6104:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6106:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    610a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    610e:	d117      	bne.n	6140 <nrf_clock_is_running+0x6c>
    return false;
    6110:	2000      	movs	r0, #0
    6112:	4770      	bx	lr
            if (p_clk_src != NULL)
    6114:	b122      	cbz	r2, 6120 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    6116:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    611a:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    611e:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    6120:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    6124:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6128:	d10c      	bne.n	6144 <nrf_clock_is_running+0x70>
    return false;
    612a:	2000      	movs	r0, #0
    612c:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    612e:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    6132:	f3c0 4000 	ubfx	r0, r0, #16, #1
    6136:	4770      	bx	lr
    switch (domain)
    6138:	2000      	movs	r0, #0
    613a:	4770      	bx	lr
                return true;
    613c:	2001      	movs	r0, #1
    613e:	4770      	bx	lr
                return true;
    6140:	2001      	movs	r0, #1
    6142:	4770      	bx	lr
                return true;
    6144:	2001      	movs	r0, #1
}
    6146:	4770      	bx	lr

00006148 <clock_initial_lfclksrc_get>:
}
    6148:	2001      	movs	r0, #1
    614a:	4770      	bx	lr

0000614c <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    614c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    614e:	2005      	movs	r0, #5
    6150:	f7fb f8a2 	bl	1298 <arch_irq_is_enabled>
    6154:	b100      	cbz	r0, 6158 <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    6156:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6158:	2005      	movs	r0, #5
    615a:	f7ff f95f 	bl	541c <arch_irq_enable>
}
    615e:	e7fa      	b.n	6156 <nrfx_power_clock_irq_init+0xa>

00006160 <clock_stop>:
{
    6160:	b570      	push	{r4, r5, r6, lr}
    6162:	b082      	sub	sp, #8
    6164:	4606      	mov	r6, r0
    switch (domain)
    6166:	2803      	cmp	r0, #3
    6168:	d855      	bhi.n	6216 <clock_stop+0xb6>
    616a:	e8df f000 	tbb	[pc, r0]
    616e:	1702      	.short	0x1702
    6170:	3123      	.short	0x3123
    p_reg->INTENCLR = mask;
    6172:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6176:	2202      	movs	r2, #2
    6178:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    617c:	2200      	movs	r2, #0
    617e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6182:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6186:	2201      	movs	r2, #1
    6188:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    618a:	2301      	movs	r3, #1
    618c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6190:	429e      	cmp	r6, r3
    6192:	d02b      	beq.n	61ec <clock_stop+0x8c>
    6194:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6196:	f242 7410 	movw	r4, #10000	; 0x2710
    619a:	e02f      	b.n	61fc <clock_stop+0x9c>
    p_reg->INTENCLR = mask;
    619c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61a0:	2201      	movs	r2, #1
    61a2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61a6:	2100      	movs	r1, #0
    61a8:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    61ac:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    61b0:	605a      	str	r2, [r3, #4]
}
    61b2:	e7ea      	b.n	618a <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    61b4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61b8:	f44f 7200 	mov.w	r2, #512	; 0x200
    61bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61c0:	2200      	movs	r2, #0
    61c2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    61c6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    61ca:	2201      	movs	r2, #1
    61cc:	625a      	str	r2, [r3, #36]	; 0x24
}
    61ce:	e7dc      	b.n	618a <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    61d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    61d4:	f44f 7280 	mov.w	r2, #256	; 0x100
    61d8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61dc:	2200      	movs	r2, #0
    61de:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    61e2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    61e6:	2201      	movs	r2, #1
    61e8:	61da      	str	r2, [r3, #28]
}
    61ea:	e7ce      	b.n	618a <clock_stop+0x2a>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    61ec:	f10d 0507 	add.w	r5, sp, #7
    61f0:	e7d1      	b.n	6196 <clock_stop+0x36>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    61f2:	2001      	movs	r0, #1
    61f4:	f7ff ff6a 	bl	60cc <nrfx_busy_wait>
    61f8:	3c01      	subs	r4, #1
    61fa:	d00c      	beq.n	6216 <clock_stop+0xb6>
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    61fc:	462a      	mov	r2, r5
    61fe:	4631      	mov	r1, r6
    6200:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    6204:	f7ff ff66 	bl	60d4 <nrf_clock_is_running>
    6208:	b128      	cbz	r0, 6216 <clock_stop+0xb6>
    620a:	2d00      	cmp	r5, #0
    620c:	d0f1      	beq.n	61f2 <clock_stop+0x92>
    620e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6212:	2b01      	cmp	r3, #1
    6214:	d0ed      	beq.n	61f2 <clock_stop+0x92>
}
    6216:	b002      	add	sp, #8
    6218:	bd70      	pop	{r4, r5, r6, pc}

0000621a <clock_lfclksrc_tweak>:
{
    621a:	b538      	push	{r3, r4, r5, lr}
    621c:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    621e:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6220:	2b02      	cmp	r3, #2
    6222:	d006      	beq.n	6232 <clock_lfclksrc_tweak+0x18>
    6224:	2b01      	cmp	r3, #1
    6226:	d000      	beq.n	622a <clock_lfclksrc_tweak+0x10>
    6228:	2300      	movs	r3, #0
    if (!is_correct_clk)
    622a:	461d      	mov	r5, r3
    622c:	b11b      	cbz	r3, 6236 <clock_lfclksrc_tweak+0x1c>
}
    622e:	4628      	mov	r0, r5
    6230:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6232:	2301      	movs	r3, #1
    6234:	e7f9      	b.n	622a <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6236:	2000      	movs	r0, #0
    6238:	f7ff ff92 	bl	6160 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    623c:	f7ff ff84 	bl	6148 <clock_initial_lfclksrc_get>
    6240:	7020      	strb	r0, [r4, #0]
    6242:	e7f4      	b.n	622e <clock_lfclksrc_tweak+0x14>

00006244 <nrfx_clock_enable>:
{
    6244:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    6246:	f7ff ff81 	bl	614c <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    624a:	f7ff ff7d 	bl	6148 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    624e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6252:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    6256:	2201      	movs	r2, #1
    6258:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    625c:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    6260:	bd08      	pop	{r3, pc}

00006262 <nrfx_clock_start>:
    switch (domain)
    6262:	2803      	cmp	r0, #3
    6264:	d871      	bhi.n	634a <nrfx_clock_start+0xe8>
    6266:	e8df f000 	tbb	[pc, r0]
    626a:	4802      	.short	0x4802
    626c:	6254      	.short	0x6254
{
    626e:	b500      	push	{lr}
    6270:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6272:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6276:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    627a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    627e:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6282:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6286:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    628a:	d11d      	bne.n	62c8 <nrfx_clock_start+0x66>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    628c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6290:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6294:	f013 0f01 	tst.w	r3, #1
    6298:	d11b      	bne.n	62d2 <nrfx_clock_start+0x70>
                    lfclksrc = clock_initial_lfclksrc_get();
    629a:	f7ff ff55 	bl	6148 <clock_initial_lfclksrc_get>
    629e:	f88d 0007 	strb.w	r0, [sp, #7]
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
    62a2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
    62a6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62ae:	2200      	movs	r2, #0
    62b0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    62b4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    62b8:	2202      	movs	r2, #2
    62ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    62be:	2201      	movs	r2, #1
    62c0:	609a      	str	r2, [r3, #8]
}
    62c2:	b003      	add	sp, #12
    62c4:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    62c8:	f10d 0007 	add.w	r0, sp, #7
    62cc:	f7ff ffa5 	bl	621a <clock_lfclksrc_tweak>
    62d0:	e7e7      	b.n	62a2 <nrfx_clock_start+0x40>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    62d2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62d6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    62da:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    62de:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    62e2:	f10d 0007 	add.w	r0, sp, #7
    62e6:	f7ff ff98 	bl	621a <clock_lfclksrc_tweak>
    62ea:	2800      	cmp	r0, #0
    62ec:	d0d9      	beq.n	62a2 <nrfx_clock_start+0x40>
    p_reg->INTENSET = mask;
    62ee:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62f2:	2202      	movs	r2, #2
    62f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    62f8:	e7e3      	b.n	62c2 <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62fa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    62fe:	2200      	movs	r2, #0
    6300:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6304:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6308:	2201      	movs	r2, #1
    630a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    630e:	601a      	str	r2, [r3, #0]
}
    6310:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6312:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6316:	2200      	movs	r2, #0
    6318:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    631c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    6320:	f44f 7200 	mov.w	r2, #512	; 0x200
    6324:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6328:	2201      	movs	r2, #1
    632a:	621a      	str	r2, [r3, #32]
}
    632c:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    632e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6332:	2200      	movs	r2, #0
    6334:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    6338:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    633c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6340:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6344:	2201      	movs	r2, #1
    6346:	619a      	str	r2, [r3, #24]
}
    6348:	4770      	bx	lr
    634a:	4770      	bx	lr

0000634c <nrfx_clock_stop>:
{
    634c:	b508      	push	{r3, lr}
    clock_stop(domain);
    634e:	f7ff ff07 	bl	6160 <clock_stop>
}
    6352:	bd08      	pop	{r3, pc}

00006354 <nrf_gpiote_event_configure>:
{
    6354:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6356:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    635a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    635e:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    6362:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    6366:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    636a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    636e:	0212      	lsls	r2, r2, #8
    6370:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    6374:	041b      	lsls	r3, r3, #16
    6376:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    637a:	431a      	orrs	r2, r3
    637c:	4314      	orrs	r4, r2
    637e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    6382:	bc10      	pop	{r4}
    6384:	4770      	bx	lr

00006386 <nrf_gpiote_task_configure>:
{
    6386:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6388:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    638c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6390:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    6394:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    6398:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    639c:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    63a0:	0212      	lsls	r2, r2, #8
    63a2:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    63a6:	041b      	lsls	r3, r3, #16
    63a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    63ac:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    63ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
    63b2:	051b      	lsls	r3, r3, #20
    63b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    63b8:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    63ba:	4314      	orrs	r4, r2
    63bc:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    63c0:	bc10      	pop	{r4}
    63c2:	4770      	bx	lr

000063c4 <nrf_gpio_cfg_sense_set>:
{
    63c4:	b500      	push	{lr}
    63c6:	b085      	sub	sp, #20
    63c8:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    63cc:	f10d 030f 	add.w	r3, sp, #15
    63d0:	9301      	str	r3, [sp, #4]
    63d2:	2100      	movs	r1, #0
    63d4:	9100      	str	r1, [sp, #0]
    63d6:	460b      	mov	r3, r1
    63d8:	460a      	mov	r2, r1
    63da:	f7fc fcb3 	bl	2d44 <nrf_gpio_reconfigure>
}
    63de:	b005      	add	sp, #20
    63e0:	f85d fb04 	ldr.w	pc, [sp], #4

000063e4 <pin_is_task_output>:
{
    63e4:	b510      	push	{r4, lr}
    63e6:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    63e8:	f7fc fd5e 	bl	2ea8 <pin_is_output>
    63ec:	b128      	cbz	r0, 63fa <pin_is_task_output+0x16>
    63ee:	4620      	mov	r0, r4
    63f0:	f7fc fd44 	bl	2e7c <pin_in_use_by_te>
    63f4:	b118      	cbz	r0, 63fe <pin_is_task_output+0x1a>
    63f6:	2001      	movs	r0, #1
    63f8:	e000      	b.n	63fc <pin_is_task_output+0x18>
    63fa:	2000      	movs	r0, #0
}
    63fc:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    63fe:	2000      	movs	r0, #0
    6400:	e7fc      	b.n	63fc <pin_is_task_output+0x18>

00006402 <pin_is_input>:
{
    6402:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    6404:	f7fc fd50 	bl	2ea8 <pin_is_output>
    6408:	f080 0001 	eor.w	r0, r0, #1
}
    640c:	b2c0      	uxtb	r0, r0
    640e:	bd08      	pop	{r3, pc}

00006410 <gpiote_polarity_to_trigger>:
}
    6410:	4770      	bx	lr

00006412 <gpiote_trigger_to_polarity>:
}
    6412:	4770      	bx	lr

00006414 <is_level>:
}
    6414:	2803      	cmp	r0, #3
    6416:	bf94      	ite	ls
    6418:	2000      	movls	r0, #0
    641a:	2001      	movhi	r0, #1
    641c:	4770      	bx	lr

0000641e <latch_pending_read_and_check>:
{
    641e:	b510      	push	{r4, lr}
    6420:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    6422:	4602      	mov	r2, r0
    6424:	2102      	movs	r1, #2
    6426:	2000      	movs	r0, #0
    6428:	f7fc fcfe 	bl	2e28 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    642c:	2300      	movs	r3, #0
    642e:	2b01      	cmp	r3, #1
    6430:	d804      	bhi.n	643c <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    6432:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    6436:	b91a      	cbnz	r2, 6440 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6438:	3301      	adds	r3, #1
    643a:	e7f8      	b.n	642e <latch_pending_read_and_check+0x10>
    return false;
    643c:	2000      	movs	r0, #0
}
    643e:	bd10      	pop	{r4, pc}
            return true;
    6440:	2001      	movs	r0, #1
    6442:	e7fc      	b.n	643e <latch_pending_read_and_check+0x20>

00006444 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6444:	b160      	cbz	r0, 6460 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6446:	68c3      	ldr	r3, [r0, #12]
    6448:	785a      	ldrb	r2, [r3, #1]
    644a:	f012 0f01 	tst.w	r2, #1
    644e:	d003      	beq.n	6458 <z_device_is_ready+0x14>
    6450:	781b      	ldrb	r3, [r3, #0]
    6452:	b11b      	cbz	r3, 645c <z_device_is_ready+0x18>
    6454:	2000      	movs	r0, #0
    6456:	4770      	bx	lr
    6458:	2000      	movs	r0, #0
    645a:	4770      	bx	lr
    645c:	2001      	movs	r0, #1
    645e:	4770      	bx	lr
		return false;
    6460:	2000      	movs	r0, #0
}
    6462:	4770      	bx	lr

00006464 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6466:	4605      	mov	r5, r0
    6468:	460e      	mov	r6, r1
	__asm__ volatile(
    646a:	f04f 0320 	mov.w	r3, #32
    646e:	f3ef 8711 	mrs	r7, BASEPRI
    6472:	f383 8812 	msr	BASEPRI_MAX, r3
    6476:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    647a:	f7fd fff5 	bl	4468 <z_impl_z_current_get>
    647e:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    6480:	4631      	mov	r1, r6
    6482:	4628      	mov	r0, r5
    6484:	f7ff fd79 	bl	5f7a <k_sys_fatal_error_handler>
	__asm__ volatile(
    6488:	f387 8811 	msr	BASEPRI, r7
    648c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6490:	4620      	mov	r0, r4
    6492:	f7fb f9bf 	bl	1814 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006498 <z_early_memset>:
{
    6498:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    649a:	f7ff f8d5 	bl	5648 <memset>
}
    649e:	bd08      	pop	{r3, pc}

000064a0 <z_early_memcpy>:
{
    64a0:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    64a2:	f7ff f8a2 	bl	55ea <memcpy>
}
    64a6:	bd08      	pop	{r3, pc}

000064a8 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    64a8:	68c2      	ldr	r2, [r0, #12]
    64aa:	6903      	ldr	r3, [r0, #16]
    64ac:	431a      	orrs	r2, r3
    64ae:	f012 0203 	ands.w	r2, r2, #3
    64b2:	d10d      	bne.n	64d0 <create_free_list+0x28>
	slab->free_list = NULL;
    64b4:	2100      	movs	r1, #0
    64b6:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    64b8:	e005      	b.n	64c6 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    64ba:	6941      	ldr	r1, [r0, #20]
    64bc:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    64be:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    64c0:	68c1      	ldr	r1, [r0, #12]
    64c2:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    64c4:	3201      	adds	r2, #1
    64c6:	6881      	ldr	r1, [r0, #8]
    64c8:	4291      	cmp	r1, r2
    64ca:	d8f6      	bhi.n	64ba <create_free_list+0x12>
	return 0;
    64cc:	2000      	movs	r0, #0
    64ce:	4770      	bx	lr
		return -EINVAL;
    64d0:	f06f 0015 	mvn.w	r0, #21
}
    64d4:	4770      	bx	lr

000064d6 <k_mem_slab_init>:
{
    64d6:	b510      	push	{r4, lr}
    64d8:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    64da:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    64dc:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    64de:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    64e0:	2300      	movs	r3, #0
    64e2:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    64e4:	f7ff ffe0 	bl	64a8 <create_free_list>
	if (rc < 0) {
    64e8:	2800      	cmp	r0, #0
    64ea:	db01      	blt.n	64f0 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    64ec:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    64ee:	6064      	str	r4, [r4, #4]
}
    64f0:	bd10      	pop	{r4, pc}

000064f2 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    64f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64f6:	4604      	mov	r4, r0
    64f8:	460d      	mov	r5, r1
	__asm__ volatile(
    64fa:	f04f 0320 	mov.w	r3, #32
    64fe:	f3ef 8611 	mrs	r6, BASEPRI
    6502:	f383 8812 	msr	BASEPRI_MAX, r3
    6506:	f3bf 8f6f 	isb	sy
    650a:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    650c:	6943      	ldr	r3, [r0, #20]
    650e:	b16b      	cbz	r3, 652c <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    6510:	682b      	ldr	r3, [r5, #0]
    6512:	6962      	ldr	r2, [r4, #20]
    6514:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6516:	682b      	ldr	r3, [r5, #0]
    6518:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    651a:	69a3      	ldr	r3, [r4, #24]
    651c:	3b01      	subs	r3, #1
    651e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6520:	f387 8811 	msr	BASEPRI, r7
    6524:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    652c:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6530:	f000 f92e 	bl	6790 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    6534:	2800      	cmp	r0, #0
    6536:	d0eb      	beq.n	6510 <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6538:	682a      	ldr	r2, [r5, #0]
    653a:	2100      	movs	r1, #0
    653c:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6540:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    6542:	f000 f88e 	bl	6662 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6546:	4631      	mov	r1, r6
    6548:	4640      	mov	r0, r8
    654a:	f7fd fc5b 	bl	3e04 <z_reschedule>
			return;
    654e:	e7eb      	b.n	6528 <k_mem_slab_free+0x36>

00006550 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6550:	3207      	adds	r2, #7
    6552:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    6556:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    655a:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    655e:	2300      	movs	r3, #0
    6560:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    6564:	1888      	adds	r0, r1, r2
    6566:	4770      	bx	lr

00006568 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6568:	f3ef 8005 	mrs	r0, IPSR
}
    656c:	3800      	subs	r0, #0
    656e:	bf18      	it	ne
    6570:	2001      	movne	r0, #1
    6572:	4770      	bx	lr

00006574 <z_impl_k_thread_start>:
{
    6574:	b508      	push	{r3, lr}
	z_sched_start(thread);
    6576:	f7fd fd6f 	bl	4058 <z_sched_start>
}
    657a:	bd08      	pop	{r3, pc}

0000657c <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    657c:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    657e:	2400      	movs	r4, #0
    6580:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    6582:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    6584:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    6586:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    6588:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    658a:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    658c:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    658e:	bc10      	pop	{r4}
    6590:	4770      	bx	lr

00006592 <z_pm_save_idle_exit>:
{
    6592:	b508      	push	{r3, lr}
	pm_system_resume();
    6594:	f7fa fc1e 	bl	dd4 <pm_system_resume>
	sys_clock_idle_exit();
    6598:	f7ff fc5f 	bl	5e5a <sys_clock_idle_exit>
}
    659c:	bd08      	pop	{r3, pc}

0000659e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    659e:	4288      	cmp	r0, r1
    65a0:	da00      	bge.n	65a4 <new_prio_for_inheritance+0x6>
    65a2:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    65a4:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    65a8:	db01      	blt.n	65ae <new_prio_for_inheritance+0x10>
    65aa:	4608      	mov	r0, r1
    65ac:	4770      	bx	lr
    65ae:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    65b2:	4770      	bx	lr

000065b4 <adjust_owner_prio>:
{
    65b4:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    65b6:	6880      	ldr	r0, [r0, #8]
    65b8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    65bc:	428b      	cmp	r3, r1
    65be:	d101      	bne.n	65c4 <adjust_owner_prio+0x10>
	return false;
    65c0:	2000      	movs	r0, #0
}
    65c2:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    65c4:	f7fd fd9e 	bl	4104 <z_set_prio>
    65c8:	e7fb      	b.n	65c2 <adjust_owner_prio+0xe>

000065ca <z_impl_k_mutex_init>:
{
    65ca:	4603      	mov	r3, r0
	mutex->owner = NULL;
    65cc:	2000      	movs	r0, #0
    65ce:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    65d0:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    65d2:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    65d4:	605b      	str	r3, [r3, #4]
}
    65d6:	4770      	bx	lr

000065d8 <thread_active_elsewhere>:
}
    65d8:	2000      	movs	r0, #0
    65da:	4770      	bx	lr

000065dc <pended_on_thread>:
}
    65dc:	6880      	ldr	r0, [r0, #8]
    65de:	4770      	bx	lr

000065e0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    65e0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    65e4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    65e8:	4283      	cmp	r3, r0
    65ea:	d001      	beq.n	65f0 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    65ec:	1ac0      	subs	r0, r0, r3
    65ee:	4770      	bx	lr
	return 0;
    65f0:	2000      	movs	r0, #0
}
    65f2:	4770      	bx	lr

000065f4 <z_reschedule_irqlock>:
{
    65f4:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    65f6:	4603      	mov	r3, r0
    65f8:	b928      	cbnz	r0, 6606 <z_reschedule_irqlock+0x12>
    65fa:	f3ef 8205 	mrs	r2, IPSR
    65fe:	b912      	cbnz	r2, 6606 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    6600:	f7fa fe78 	bl	12f4 <arch_swap>
	return ret;
    6604:	e003      	b.n	660e <z_reschedule_irqlock+0x1a>
    6606:	f383 8811 	msr	BASEPRI, r3
    660a:	f3bf 8f6f 	isb	sy
}
    660e:	bd08      	pop	{r3, pc}

00006610 <z_reschedule_unlocked>:
{
    6610:	b508      	push	{r3, lr}
	__asm__ volatile(
    6612:	f04f 0320 	mov.w	r3, #32
    6616:	f3ef 8011 	mrs	r0, BASEPRI
    661a:	f383 8812 	msr	BASEPRI_MAX, r3
    661e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6622:	f7ff ffe7 	bl	65f4 <z_reschedule_irqlock>
}
    6626:	bd08      	pop	{r3, pc}

00006628 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6628:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    662a:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    662c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    662e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6630:	2300      	movs	r3, #0
    6632:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    6634:	604b      	str	r3, [r1, #4]
}
    6636:	4770      	bx	lr

00006638 <unpend_thread_no_timeout>:
{
    6638:	b510      	push	{r4, lr}
    663a:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    663c:	f7ff ffce 	bl	65dc <pended_on_thread>
    6640:	4621      	mov	r1, r4
    6642:	f7ff fff1 	bl	6628 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6646:	7b63      	ldrb	r3, [r4, #13]
    6648:	f023 0302 	bic.w	r3, r3, #2
    664c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    664e:	2300      	movs	r3, #0
    6650:	60a3      	str	r3, [r4, #8]
}
    6652:	bd10      	pop	{r4, pc}

00006654 <z_priq_dumb_best>:
{
    6654:	4603      	mov	r3, r0
	return list->head == list;
    6656:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6658:	4283      	cmp	r3, r0
    665a:	d000      	beq.n	665e <z_priq_dumb_best+0xa>
}
    665c:	4770      	bx	lr
	struct k_thread *thread = NULL;
    665e:	2000      	movs	r0, #0
	return thread;
    6660:	e7fc      	b.n	665c <z_priq_dumb_best+0x8>

00006662 <z_ready_thread>:
{
    6662:	b538      	push	{r3, r4, r5, lr}
    6664:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    6666:	2300      	movs	r3, #0
    6668:	f04f 0220 	mov.w	r2, #32
    666c:	f3ef 8511 	mrs	r5, BASEPRI
    6670:	f382 8812 	msr	BASEPRI_MAX, r2
    6674:	f3bf 8f6f 	isb	sy
    6678:	e004      	b.n	6684 <z_ready_thread+0x22>
	__asm__ volatile(
    667a:	f385 8811 	msr	BASEPRI, r5
    667e:	f3bf 8f6f 	isb	sy
    6682:	2301      	movs	r3, #1
    6684:	b943      	cbnz	r3, 6698 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    6686:	4620      	mov	r0, r4
    6688:	f7ff ffa6 	bl	65d8 <thread_active_elsewhere>
    668c:	2800      	cmp	r0, #0
    668e:	d1f4      	bne.n	667a <z_ready_thread+0x18>
			ready_thread(thread);
    6690:	4620      	mov	r0, r4
    6692:	f7fd fca5 	bl	3fe0 <ready_thread>
    6696:	e7f0      	b.n	667a <z_ready_thread+0x18>
}
    6698:	bd38      	pop	{r3, r4, r5, pc}

0000669a <z_thread_timeout>:
{
    669a:	b570      	push	{r4, r5, r6, lr}
    669c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    669e:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    66a2:	2300      	movs	r3, #0
	__asm__ volatile(
    66a4:	f04f 0220 	mov.w	r2, #32
    66a8:	f3ef 8511 	mrs	r5, BASEPRI
    66ac:	f382 8812 	msr	BASEPRI_MAX, r2
    66b0:	f3bf 8f6f 	isb	sy
    66b4:	e011      	b.n	66da <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    66b6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    66ba:	f023 0204 	bic.w	r2, r3, #4
    66be:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    66c2:	f023 0314 	bic.w	r3, r3, #20
    66c6:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    66ca:	4630      	mov	r0, r6
    66cc:	f7fd fc88 	bl	3fe0 <ready_thread>
	__asm__ volatile(
    66d0:	f385 8811 	msr	BASEPRI, r5
    66d4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    66d8:	2301      	movs	r3, #1
    66da:	b963      	cbnz	r3, 66f6 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    66dc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    66e0:	f013 0f28 	tst.w	r3, #40	; 0x28
    66e4:	d1f4      	bne.n	66d0 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    66e6:	f854 3c10 	ldr.w	r3, [r4, #-16]
    66ea:	2b00      	cmp	r3, #0
    66ec:	d0e3      	beq.n	66b6 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
    66ee:	4630      	mov	r0, r6
    66f0:	f7ff ffa2 	bl	6638 <unpend_thread_no_timeout>
    66f4:	e7df      	b.n	66b6 <z_thread_timeout+0x1c>
}
    66f6:	bd70      	pop	{r4, r5, r6, pc}

000066f8 <unpend_all>:
{
    66f8:	b538      	push	{r3, r4, r5, lr}
    66fa:	4605      	mov	r5, r0
	return list->head == list;
    66fc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    66fe:	42a5      	cmp	r5, r4
    6700:	d00e      	beq.n	6720 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6702:	b16c      	cbz	r4, 6720 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    6704:	4620      	mov	r0, r4
    6706:	f7ff ff97 	bl	6638 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    670a:	f104 0018 	add.w	r0, r4, #24
    670e:	f000 f87c 	bl	680a <z_abort_timeout>
    6712:	2300      	movs	r3, #0
    6714:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    6718:	4620      	mov	r0, r4
    671a:	f7fd fc61 	bl	3fe0 <ready_thread>
    671e:	e7ed      	b.n	66fc <unpend_all+0x4>
}
    6720:	bd38      	pop	{r3, r4, r5, pc}

00006722 <add_to_waitq_locked>:
{
    6722:	b570      	push	{r4, r5, r6, lr}
    6724:	4605      	mov	r5, r0
    6726:	460e      	mov	r6, r1
	unready_thread(thread);
    6728:	f7fd fcb4 	bl	4094 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    672c:	7b6b      	ldrb	r3, [r5, #13]
    672e:	f043 0302 	orr.w	r3, r3, #2
    6732:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    6734:	b1fe      	cbz	r6, 6776 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    6736:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    6738:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    673a:	42a6      	cmp	r6, r4
    673c:	d108      	bne.n	6750 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    673e:	2400      	movs	r4, #0
    6740:	e006      	b.n	6750 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    6742:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6744:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6746:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6748:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    674a:	6065      	str	r5, [r4, #4]
}
    674c:	e013      	b.n	6776 <add_to_waitq_locked+0x54>
    674e:	2400      	movs	r4, #0
    6750:	b164      	cbz	r4, 676c <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6752:	4621      	mov	r1, r4
    6754:	4628      	mov	r0, r5
    6756:	f7ff ff43 	bl	65e0 <z_sched_prio_cmp>
    675a:	2800      	cmp	r0, #0
    675c:	dcf1      	bgt.n	6742 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    675e:	2c00      	cmp	r4, #0
    6760:	d0f6      	beq.n	6750 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    6762:	6873      	ldr	r3, [r6, #4]
    6764:	429c      	cmp	r4, r3
    6766:	d0f2      	beq.n	674e <add_to_waitq_locked+0x2c>
    6768:	6824      	ldr	r4, [r4, #0]
    676a:	e7f1      	b.n	6750 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    676c:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    676e:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    6770:	606b      	str	r3, [r5, #4]
	tail->next = node;
    6772:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6774:	6075      	str	r5, [r6, #4]
}
    6776:	bd70      	pop	{r4, r5, r6, pc}

00006778 <pend_locked>:
{
    6778:	b570      	push	{r4, r5, r6, lr}
    677a:	4604      	mov	r4, r0
    677c:	4616      	mov	r6, r2
    677e:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    6780:	f7ff ffcf 	bl	6722 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    6784:	4632      	mov	r2, r6
    6786:	462b      	mov	r3, r5
    6788:	4620      	mov	r0, r4
    678a:	f7fd fadd 	bl	3d48 <add_thread_timeout>
}
    678e:	bd70      	pop	{r4, r5, r6, pc}

00006790 <z_unpend_first_thread>:
{
    6790:	b570      	push	{r4, r5, r6, lr}
    6792:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    6794:	2300      	movs	r3, #0
	__asm__ volatile(
    6796:	f04f 0220 	mov.w	r2, #32
    679a:	f3ef 8511 	mrs	r5, BASEPRI
    679e:	f382 8812 	msr	BASEPRI_MAX, r2
    67a2:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    67a6:	461c      	mov	r4, r3
    67a8:	e004      	b.n	67b4 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    67aa:	f385 8811 	msr	BASEPRI, r5
    67ae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    67b2:	2301      	movs	r3, #1
    67b4:	b963      	cbnz	r3, 67d0 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    67b6:	4630      	mov	r0, r6
    67b8:	f7ff ff4c 	bl	6654 <z_priq_dumb_best>
		if (thread != NULL) {
    67bc:	4604      	mov	r4, r0
    67be:	2800      	cmp	r0, #0
    67c0:	d0f3      	beq.n	67aa <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    67c2:	f7ff ff39 	bl	6638 <unpend_thread_no_timeout>
    67c6:	f104 0018 	add.w	r0, r4, #24
    67ca:	f000 f81e 	bl	680a <z_abort_timeout>
    67ce:	e7ec      	b.n	67aa <z_unpend_first_thread+0x1a>
}
    67d0:	4620      	mov	r0, r4
    67d2:	bd70      	pop	{r4, r5, r6, pc}

000067d4 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    67d4:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    67d6:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    67d8:	6083      	str	r3, [r0, #8]
}
    67da:	4770      	bx	lr

000067dc <remove_timeout>:
{
    67dc:	b510      	push	{r4, lr}
    67de:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    67e0:	f7fd fea4 	bl	452c <next>
    67e4:	b148      	cbz	r0, 67fa <remove_timeout+0x1e>
    67e6:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    67e8:	6903      	ldr	r3, [r0, #16]
    67ea:	6941      	ldr	r1, [r0, #20]
    67ec:	6920      	ldr	r0, [r4, #16]
    67ee:	181b      	adds	r3, r3, r0
    67f0:	6960      	ldr	r0, [r4, #20]
    67f2:	eb41 0100 	adc.w	r1, r1, r0
    67f6:	6113      	str	r3, [r2, #16]
    67f8:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    67fa:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    67fc:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    67fe:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6800:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6802:	2300      	movs	r3, #0
    6804:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    6806:	6063      	str	r3, [r4, #4]
}
    6808:	bd10      	pop	{r4, pc}

0000680a <z_abort_timeout>:
{
    680a:	b570      	push	{r4, r5, r6, lr}
    680c:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    680e:	2300      	movs	r3, #0
	__asm__ volatile(
    6810:	f04f 0220 	mov.w	r2, #32
    6814:	f3ef 8611 	mrs	r6, BASEPRI
    6818:	f382 8812 	msr	BASEPRI_MAX, r2
    681c:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    6820:	f06f 0015 	mvn.w	r0, #21
    6824:	e004      	b.n	6830 <z_abort_timeout+0x26>
	__asm__ volatile(
    6826:	f386 8811 	msr	BASEPRI, r6
    682a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    682e:	2301      	movs	r3, #1
    6830:	461d      	mov	r5, r3
    6832:	b93b      	cbnz	r3, 6844 <z_abort_timeout+0x3a>
	return node->next != NULL;
    6834:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    6836:	2b00      	cmp	r3, #0
    6838:	d0f5      	beq.n	6826 <z_abort_timeout+0x1c>
			remove_timeout(to);
    683a:	4620      	mov	r0, r4
    683c:	f7ff ffce 	bl	67dc <remove_timeout>
			ret = 0;
    6840:	4628      	mov	r0, r5
    6842:	e7f0      	b.n	6826 <z_abort_timeout+0x1c>
}
    6844:	bd70      	pop	{r4, r5, r6, pc}

00006846 <z_get_next_timeout_expiry>:
{
    6846:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    6848:	2300      	movs	r3, #0
	__asm__ volatile(
    684a:	f04f 0220 	mov.w	r2, #32
    684e:	f3ef 8411 	mrs	r4, BASEPRI
    6852:	f382 8812 	msr	BASEPRI_MAX, r2
    6856:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    685a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    685e:	e006      	b.n	686e <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    6860:	f7fd fe7c 	bl	455c <next_timeout>
	__asm__ volatile(
    6864:	f384 8811 	msr	BASEPRI, r4
    6868:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    686c:	2301      	movs	r3, #1
    686e:	2b00      	cmp	r3, #0
    6870:	d0f6      	beq.n	6860 <z_get_next_timeout_expiry+0x1a>
}
    6872:	bd10      	pop	{r4, pc}

00006874 <z_set_timeout_expiry>:
{
    6874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6876:	4606      	mov	r6, r0
    6878:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    687a:	2300      	movs	r3, #0
	__asm__ volatile(
    687c:	f04f 0220 	mov.w	r2, #32
    6880:	f3ef 8511 	mrs	r5, BASEPRI
    6884:	f382 8812 	msr	BASEPRI_MAX, r2
    6888:	f3bf 8f6f 	isb	sy
    688c:	e00a      	b.n	68a4 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    688e:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    6890:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6894:	2801      	cmp	r0, #1
    6896:	dd00      	ble.n	689a <z_set_timeout_expiry+0x26>
    6898:	b97c      	cbnz	r4, 68ba <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    689a:	f385 8811 	msr	BASEPRI, r5
    689e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    68a2:	2301      	movs	r3, #1
    68a4:	461c      	mov	r4, r3
    68a6:	b97b      	cbnz	r3, 68c8 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    68a8:	f7fd fe58 	bl	455c <next_timeout>
			      || (ticks <= next_to);
    68ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    68b0:	d0ed      	beq.n	688e <z_set_timeout_expiry+0x1a>
    68b2:	42b0      	cmp	r0, r6
    68b4:	dbec      	blt.n	6890 <z_set_timeout_expiry+0x1c>
    68b6:	2401      	movs	r4, #1
    68b8:	e7ea      	b.n	6890 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    68ba:	4639      	mov	r1, r7
    68bc:	42b0      	cmp	r0, r6
    68be:	bfa8      	it	ge
    68c0:	4630      	movge	r0, r6
    68c2:	f7fb ff0f 	bl	26e4 <sys_clock_set_timeout>
    68c6:	e7e8      	b.n	689a <z_set_timeout_expiry+0x26>
}
    68c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000068ca <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    68ca:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    68cc:	f7fd ff58 	bl	4780 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    68d0:	bd08      	pop	{r3, pc}

000068d2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    68d2:	b900      	cbnz	r0, 68d6 <z_impl_k_busy_wait+0x4>
    68d4:	4770      	bx	lr
{
    68d6:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    68d8:	f7fe fd58 	bl	538c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    68dc:	bd08      	pop	{r3, pc}

000068de <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    68de:	4770      	bx	lr
