
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	e8 21 00 20 59 3a 00 00 c3 8c 00 00 11 3a 00 00     .!. Y:.......:..
  10:	11 3a 00 00 11 3a 00 00 11 3a 00 00 11 3a 00 00     .:...:...:...:..
	...
  2c:	59 2b 00 00 11 3a 00 00 00 00 00 00 fd 2a 00 00     Y+...:.......*..
  3c:	11 3a 00 00                                         .:..

00000040 <_irq_vector_table>:
  40:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
  50:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
  60:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
  70:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
  80:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
  90:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
  a0:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
  b0:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
  c0:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
  d0:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
  e0:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
  f0:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
 100:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
 110:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
 120:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
 130:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
 140:	e9 2b 00 00 e9 2b 00 00 e9 2b 00 00 e9 2b 00 00     .+...+...+...+..
 150:	e9 2b 00 00                                         .+..

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	4686      	mov	lr, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x22>
     1a0:	4285      	cmp	r5, r0
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x74>
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x6c>
     1da:	18eb      	adds	r3, r5, r3
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x70>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x58>
     20e:	42a0      	cmp	r0, r4
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x58>
     212:	f1ac 0302 	sub.w	r3, ip, #2
     216:	442c      	add	r4, r5
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x68>
     220:	40d4      	lsrs	r4, r2
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x58>
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
     24a:	fb0c f807 	mul.w	r8, ip, r7
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
     254:	d961      	bls.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     25c:	d204      	bcs.n	268 <CONFIG_SRAM_SIZE+0xa8>
     25e:	4598      	cmp	r8, r3
     260:	d902      	bls.n	268 <CONFIG_SRAM_SIZE+0xa8>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
     268:	eba3 0308 	sub.w	r3, r3, r8
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
     272:	fb0e 331c 	mls	r3, lr, ip, r3
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     282:	192c      	adds	r4, r5, r4
     284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28e:	f1ac 0302 	sub.w	r3, ip, #2
     292:	442c      	add	r4, r5
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1
     2ca:	d922      	bls.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
     2dc:	4429      	add	r1, r5
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
     2ec:	fb0c f707 	mul.w	r7, ip, r7
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
     2f6:	d90e      	bls.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     2f8:	18eb      	adds	r3, r5, r3
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2fe:	d204      	bcs.n	30a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa>
     300:	429f      	cmp	r7, r3
     302:	d902      	bls.n	30a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa>
     304:	f1ac 0102 	sub.w	r1, ip, #2
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x7a>
     312:	4660      	mov	r0, ip
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
     318:	e7f7      	b.n	30a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa>
     31a:	4660      	mov	r0, ip
     31c:	e7a4      	b.n	268 <CONFIG_SRAM_SIZE+0xa8>
     31e:	4663      	mov	r3, ip
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x34>
     326:	b916      	cbnz	r6, 32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     32e:	e9c6 e000 	strd	lr, r0, [r6]
     332:	e7f9      	b.n	328 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x28>
     334:	fab3 f783 	clz	r7, r3
     338:	b98f      	cbnz	r7, 35e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5e>
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x58>
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     358:	e9c6 4c00 	strd	r4, ip, [r6]
     35c:	e7f8      	b.n	350 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x50>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     396:	459a      	cmp	sl, r3
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3a0:	d204      	bcs.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3cc:	d204      	bcs.n	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_LOG_FAILURE_REPORT_PERIOD+0xa>
     3ec:	d106      	bne.n	3fc <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x14>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x14>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x50>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x50>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>

00000424 <button_pressed>:
LOG_MODULE_REGISTER(Less4_Exer2,LOG_LEVEL_DBG);

/* STEP 7 - Replace the callback function button_pressed() */
void button_pressed(const struct device *dev, struct gpio_callback *cb,
            uint32_t pins)
{
     424:	b5f0      	push	{r4, r5, r6, r7, lr}
     426:	b083      	sub	sp, #12
     428:	af00      	add	r7, sp, #0
  int i;
  int j;
  long int factorial;
  LOG_INF("Calculating the factorials of numbers 1 to %d:",MAX_NUMBER_FACT);
     42a:	466e      	mov	r6, sp
     42c:	b088      	sub	sp, #32
     42e:	466b      	mov	r3, sp
     430:	f113 0210 	adds.w	r2, r3, #16
     434:	d031      	beq.n	49a <button_pressed+0x76>
     436:	210c      	movs	r1, #12
     438:	b142      	cbz	r2, 44c <button_pressed+0x28>
     43a:	4608      	mov	r0, r1
     43c:	2904      	cmp	r1, #4
     43e:	dd01      	ble.n	444 <button_pressed+0x20>
     440:	4c41      	ldr	r4, [pc, #260]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     442:	615c      	str	r4, [r3, #20]
     444:	2808      	cmp	r0, #8
     446:	dd01      	ble.n	44c <button_pressed+0x28>
     448:	200a      	movs	r0, #10
     44a:	6198      	str	r0, [r3, #24]
     44c:	290b      	cmp	r1, #11
     44e:	dd27      	ble.n	4a0 <button_pressed+0x7c>
     450:	240c      	movs	r4, #12
     452:	b13a      	cbz	r2, 464 <button_pressed+0x40>
     454:	2103      	movs	r1, #3
     456:	7139      	strb	r1, [r7, #4]
     458:	2100      	movs	r1, #0
     45a:	7179      	strb	r1, [r7, #5]
     45c:	71b9      	strb	r1, [r7, #6]
     45e:	71f9      	strb	r1, [r7, #7]
     460:	6878      	ldr	r0, [r7, #4]
     462:	6118      	str	r0, [r3, #16]
     464:	2100      	movs	r1, #0
     466:	f36f 0100 	bfc	r1, #0, #1
     46a:	f36f 0141 	bfc	r1, #1, #1
     46e:	f36f 0182 	bfc	r1, #2, #1
     472:	f36f 01c5 	bfc	r1, #3, #3
     476:	2303      	movs	r3, #3
     478:	f363 1188 	bfi	r1, r3, #6, #3
     47c:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
     480:	f363 2152 	bfi	r1, r3, #9, #10
     484:	f36f 41de 	bfc	r1, #19, #12
     488:	f36f 71df 	bfc	r1, #31, #1
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     48c:	2300      	movs	r3, #0
     48e:	482f      	ldr	r0, [pc, #188]	; (54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>)
     490:	f008 fafc 	bl	8a8c <z_impl_z_log_msg_static_create>
     494:	46b5      	mov	sp, r6
  for (i=1;i<=MAX_NUMBER_FACT;i++){
     496:	2401      	movs	r4, #1
     498:	e047      	b.n	52a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x42>
  LOG_INF("Calculating the factorials of numbers 1 to %d:",MAX_NUMBER_FACT);
     49a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     49e:	e7cb      	b.n	438 <button_pressed+0x14>
     4a0:	f06f 041b 	mvn.w	r4, #27
     4a4:	e7d5      	b.n	452 <button_pressed+0x2e>
       factorial =1;
        for (j=1;j<=i;j++){
            factorial = factorial*j;
     4a6:	fb03 f101 	mul.w	r1, r3, r1
        for (j=1;j<=i;j++){
     4aa:	3301      	adds	r3, #1
     4ac:	429c      	cmp	r4, r3
     4ae:	dafa      	bge.n	4a6 <button_pressed+0x82>
        }
        LOG_INF("The factorial of %2d = %ld",i,factorial);
     4b0:	466e      	mov	r6, sp
     4b2:	b088      	sub	sp, #32
     4b4:	466b      	mov	r3, sp
     4b6:	f113 0210 	adds.w	r2, r3, #16
     4ba:	d03b      	beq.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
     4bc:	2010      	movs	r0, #16
     4be:	b172      	cbz	r2, 4de <button_pressed+0xba>
     4c0:	4684      	mov	ip, r0
     4c2:	2804      	cmp	r0, #4
     4c4:	dd03      	ble.n	4ce <button_pressed+0xaa>
     4c6:	f8df e088 	ldr.w	lr, [pc, #136]	; 550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     4ca:	f8c3 e014 	str.w	lr, [r3, #20]
     4ce:	f1bc 0f08 	cmp.w	ip, #8
     4d2:	dd00      	ble.n	4d6 <button_pressed+0xb2>
     4d4:	619c      	str	r4, [r3, #24]
     4d6:	f1bc 0f0c 	cmp.w	ip, #12
     4da:	dd00      	ble.n	4de <button_pressed+0xba>
     4dc:	61d9      	str	r1, [r3, #28]
     4de:	280f      	cmp	r0, #15
     4e0:	dd2b      	ble.n	53a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x52>
     4e2:	2110      	movs	r1, #16
     4e4:	b13a      	cbz	r2, 4f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe>
     4e6:	2004      	movs	r0, #4
     4e8:	7138      	strb	r0, [r7, #4]
     4ea:	2000      	movs	r0, #0
     4ec:	7178      	strb	r0, [r7, #5]
     4ee:	71b8      	strb	r0, [r7, #6]
     4f0:	71f8      	strb	r0, [r7, #7]
     4f2:	6878      	ldr	r0, [r7, #4]
     4f4:	6118      	str	r0, [r3, #16]
     4f6:	f36f 0500 	bfc	r5, #0, #1
     4fa:	f36f 0541 	bfc	r5, #1, #1
     4fe:	f36f 0582 	bfc	r5, #2, #1
     502:	f36f 05c5 	bfc	r5, #3, #3
     506:	2303      	movs	r3, #3
     508:	f363 1588 	bfi	r5, r3, #6, #3
     50c:	f401 717d 	and.w	r1, r1, #1012	; 0x3f4
     510:	f361 2552 	bfi	r5, r1, #9, #10
     514:	f36f 45de 	bfc	r5, #19, #12
     518:	f36f 75df 	bfc	r5, #31, #1
     51c:	2300      	movs	r3, #0
     51e:	4629      	mov	r1, r5
     520:	480a      	ldr	r0, [pc, #40]	; (54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>)
     522:	f008 fab3 	bl	8a8c <z_impl_z_log_msg_static_create>
     526:	46b5      	mov	sp, r6
  for (i=1;i<=MAX_NUMBER_FACT;i++){
     528:	3401      	adds	r4, #1
     52a:	2c0a      	cmp	r4, #10
     52c:	dc08      	bgt.n	540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>
       factorial =1;
     52e:	2101      	movs	r1, #1
        for (j=1;j<=i;j++){
     530:	460b      	mov	r3, r1
     532:	e7bb      	b.n	4ac <button_pressed+0x88>
        LOG_INF("The factorial of %2d = %ld",i,factorial);
     534:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     538:	e7c1      	b.n	4be <button_pressed+0x9a>
     53a:	f06f 011b 	mvn.w	r1, #27
     53e:	e7d1      	b.n	4e4 <button_pressed+0xc0>
  }
  /*Important note!
  Code in ISR runs at a high priority, therefore, it should be written with timing in mind.
  Too lengthy or too complex tasks should not be performed by an ISR, they should be deferred to a thread
  */
}
     540:	370c      	adds	r7, #12
     542:	46bd      	mov	sp, r7
     544:	bdf0      	pop	{r4, r5, r6, r7, pc}
     546:	bf00      	nop
     548:	0000a6b8 	.word	0x0000a6b8
     54c:	0000a5c8 	.word	0x0000a5c8
     550:	0000a6e8 	.word	0x0000a6e8

00000554 <main>:

static struct gpio_callback button_cb_data;

void main(void)
{
     554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     558:	b098      	sub	sp, #96	; 0x60
     55a:	af00      	add	r7, sp, #0
	int ret;
	/* STEP 6 - Write some logs */
	int exercise_num=2;
    uint8_t data[] = {0x00, 0x01, 0x02, 0x03,
     55c:	4bb2      	ldr	r3, [pc, #712]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     55e:	f107 0408 	add.w	r4, r7, #8
     562:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     564:	c407      	stmia	r4!, {r0, r1, r2}
     566:	7023      	strb	r3, [r4, #0]
                      0x04, 0x05, 0x06, 0x07,
                      'H', 'e', 'l', 'l','o'};
    //Printf-like messages
    LOG_INF("nRF Connect SDK Fundamentals");
     568:	4bb0      	ldr	r3, [pc, #704]	; (82c <CONFIG_ISR_STACK_SIZE+0x2c>)
     56a:	62fb      	str	r3, [r7, #44]	; 0x2c
     56c:	2302      	movs	r3, #2
     56e:	713b      	strb	r3, [r7, #4]
     570:	2300      	movs	r3, #0
     572:	717b      	strb	r3, [r7, #5]
     574:	71bb      	strb	r3, [r7, #6]
     576:	71fb      	strb	r3, [r7, #7]
     578:	687a      	ldr	r2, [r7, #4]
     57a:	62ba      	str	r2, [r7, #40]	; 0x28
     57c:	4619      	mov	r1, r3
     57e:	f363 0100 	bfi	r1, r3, #0, #1
     582:	f363 0141 	bfi	r1, r3, #1, #1
     586:	f363 0182 	bfi	r1, r3, #2, #1
     58a:	f363 01c5 	bfi	r1, r3, #3, #3
     58e:	2203      	movs	r2, #3
     590:	f362 1188 	bfi	r1, r2, #6, #3
     594:	2208      	movs	r2, #8
     596:	f362 2152 	bfi	r1, r2, #9, #10
     59a:	f363 41de 	bfi	r1, r3, #19, #12
     59e:	f363 71df 	bfi	r1, r3, #31, #1
     5a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
     5a6:	48a2      	ldr	r0, [pc, #648]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     5a8:	f008 fa70 	bl	8a8c <z_impl_z_log_msg_static_create>
    LOG_INF("Exercise %d",exercise_num);
     5ac:	466d      	mov	r5, sp
     5ae:	b088      	sub	sp, #32
     5b0:	466b      	mov	r3, sp
     5b2:	f113 0210 	adds.w	r2, r3, #16
     5b6:	d00e      	beq.n	5d6 <main+0x82>
     5b8:	210c      	movs	r1, #12
     5ba:	b142      	cbz	r2, 5ce <main+0x7a>
     5bc:	4608      	mov	r0, r1
     5be:	2904      	cmp	r1, #4
     5c0:	dd01      	ble.n	5c6 <main+0x72>
     5c2:	4c9c      	ldr	r4, [pc, #624]	; (834 <CONFIG_ISR_STACK_SIZE+0x34>)
     5c4:	615c      	str	r4, [r3, #20]
     5c6:	2808      	cmp	r0, #8
     5c8:	dd08      	ble.n	5dc <main+0x88>
     5ca:	2002      	movs	r0, #2
     5cc:	6198      	str	r0, [r3, #24]
     5ce:	290b      	cmp	r1, #11
     5d0:	dd3e      	ble.n	650 <main+0xfc>
     5d2:	240c      	movs	r4, #12
     5d4:	e004      	b.n	5e0 <main+0x8c>
     5d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     5da:	e7ee      	b.n	5ba <main+0x66>
     5dc:	f06f 041b 	mvn.w	r4, #27
     5e0:	b13a      	cbz	r2, 5f2 <main+0x9e>
     5e2:	2103      	movs	r1, #3
     5e4:	7139      	strb	r1, [r7, #4]
     5e6:	2100      	movs	r1, #0
     5e8:	7179      	strb	r1, [r7, #5]
     5ea:	71b9      	strb	r1, [r7, #6]
     5ec:	71f9      	strb	r1, [r7, #7]
     5ee:	6878      	ldr	r0, [r7, #4]
     5f0:	6118      	str	r0, [r3, #16]
     5f2:	2100      	movs	r1, #0
     5f4:	f36f 0100 	bfc	r1, #0, #1
     5f8:	f36f 0141 	bfc	r1, #1, #1
     5fc:	f36f 0182 	bfc	r1, #2, #1
     600:	f36f 01c5 	bfc	r1, #3, #3
     604:	2303      	movs	r3, #3
     606:	f363 1188 	bfi	r1, r3, #6, #3
     60a:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
     60e:	f363 2152 	bfi	r1, r3, #9, #10
     612:	f36f 41de 	bfc	r1, #19, #12
     616:	f36f 71df 	bfc	r1, #31, #1
     61a:	2300      	movs	r3, #0
     61c:	4884      	ldr	r0, [pc, #528]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     61e:	f008 fa35 	bl	8a8c <z_impl_z_log_msg_static_create>
     622:	46ad      	mov	sp, r5
    LOG_DBG("A log message in debug level");
     624:	466e      	mov	r6, sp
     626:	b088      	sub	sp, #32
     628:	466b      	mov	r3, sp
     62a:	f113 0210 	adds.w	r2, r3, #16
     62e:	d012      	beq.n	656 <main+0x102>
     630:	210c      	movs	r1, #12
     632:	b142      	cbz	r2, 646 <main+0xf2>
     634:	4608      	mov	r0, r1
     636:	2904      	cmp	r1, #4
     638:	dd01      	ble.n	63e <main+0xea>
     63a:	4c7f      	ldr	r4, [pc, #508]	; (838 <CONFIG_ISR_STACK_SIZE+0x38>)
     63c:	615c      	str	r4, [r3, #20]
     63e:	2808      	cmp	r0, #8
     640:	dd0c      	ble.n	65c <main+0x108>
     642:	487e      	ldr	r0, [pc, #504]	; (83c <CONFIG_ISR_STACK_SIZE+0x3c>)
     644:	6198      	str	r0, [r3, #24]
     646:	290b      	cmp	r1, #11
     648:	f340 808b 	ble.w	762 <main+0x20e>
     64c:	240c      	movs	r4, #12
     64e:	e007      	b.n	660 <main+0x10c>
    LOG_INF("Exercise %d",exercise_num);
     650:	f06f 041b 	mvn.w	r4, #27
     654:	e7c4      	b.n	5e0 <main+0x8c>
    LOG_DBG("A log message in debug level");
     656:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
     65a:	e7ea      	b.n	632 <main+0xde>
     65c:	f06f 041b 	mvn.w	r4, #27
     660:	b13a      	cbz	r2, 672 <main+0x11e>
     662:	2103      	movs	r1, #3
     664:	7139      	strb	r1, [r7, #4]
     666:	2100      	movs	r1, #0
     668:	7179      	strb	r1, [r7, #5]
     66a:	71b9      	strb	r1, [r7, #6]
     66c:	71f9      	strb	r1, [r7, #7]
     66e:	6878      	ldr	r0, [r7, #4]
     670:	6118      	str	r0, [r3, #16]
     672:	2100      	movs	r1, #0
     674:	f36f 0100 	bfc	r1, #0, #1
     678:	f36f 0141 	bfc	r1, #1, #1
     67c:	f36f 0182 	bfc	r1, #2, #1
     680:	f36f 01c5 	bfc	r1, #3, #3
     684:	2304      	movs	r3, #4
     686:	f363 1188 	bfi	r1, r3, #6, #3
     68a:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
     68e:	f363 2152 	bfi	r1, r3, #9, #10
     692:	f36f 41de 	bfc	r1, #19, #12
     696:	f36f 71df 	bfc	r1, #31, #1
     69a:	4d65      	ldr	r5, [pc, #404]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     69c:	2300      	movs	r3, #0
     69e:	4628      	mov	r0, r5
     6a0:	f008 f9f4 	bl	8a8c <z_impl_z_log_msg_static_create>
     6a4:	46b5      	mov	sp, r6
    LOG_WRN("A log message in warning level!");
     6a6:	4b66      	ldr	r3, [pc, #408]	; (840 <CONFIG_ISR_STACK_SIZE+0x40>)
     6a8:	647b      	str	r3, [r7, #68]	; 0x44
     6aa:	2602      	movs	r6, #2
     6ac:	713e      	strb	r6, [r7, #4]
     6ae:	2400      	movs	r4, #0
     6b0:	717c      	strb	r4, [r7, #5]
     6b2:	71bc      	strb	r4, [r7, #6]
     6b4:	71fc      	strb	r4, [r7, #7]
     6b6:	687b      	ldr	r3, [r7, #4]
     6b8:	643b      	str	r3, [r7, #64]	; 0x40
     6ba:	4621      	mov	r1, r4
     6bc:	f364 0100 	bfi	r1, r4, #0, #1
     6c0:	f364 0141 	bfi	r1, r4, #1, #1
     6c4:	f364 0182 	bfi	r1, r4, #2, #1
     6c8:	f364 01c5 	bfi	r1, r4, #3, #3
     6cc:	f366 1188 	bfi	r1, r6, #6, #3
     6d0:	f04f 0808 	mov.w	r8, #8
     6d4:	f368 2152 	bfi	r1, r8, #9, #10
     6d8:	f364 41de 	bfi	r1, r4, #19, #12
     6dc:	f364 71df 	bfi	r1, r4, #31, #1
     6e0:	4623      	mov	r3, r4
     6e2:	f107 0240 	add.w	r2, r7, #64	; 0x40
     6e6:	4628      	mov	r0, r5
     6e8:	f008 f9d0 	bl	8a8c <z_impl_z_log_msg_static_create>
    LOG_ERR("A log message in Error level!");
     6ec:	4b55      	ldr	r3, [pc, #340]	; (844 <CONFIG_ISR_STACK_SIZE+0x44>)
     6ee:	65fb      	str	r3, [r7, #92]	; 0x5c
     6f0:	713e      	strb	r6, [r7, #4]
     6f2:	717c      	strb	r4, [r7, #5]
     6f4:	71bc      	strb	r4, [r7, #6]
     6f6:	71fc      	strb	r4, [r7, #7]
     6f8:	687b      	ldr	r3, [r7, #4]
     6fa:	65bb      	str	r3, [r7, #88]	; 0x58
     6fc:	4621      	mov	r1, r4
     6fe:	f364 0100 	bfi	r1, r4, #0, #1
     702:	f364 0141 	bfi	r1, r4, #1, #1
     706:	f364 0182 	bfi	r1, r4, #2, #1
     70a:	f364 01c5 	bfi	r1, r4, #3, #3
     70e:	2301      	movs	r3, #1
     710:	f363 1188 	bfi	r1, r3, #6, #3
     714:	f368 2152 	bfi	r1, r8, #9, #10
     718:	f364 41de 	bfi	r1, r4, #19, #12
     71c:	f364 71df 	bfi	r1, r4, #31, #1
     720:	4623      	mov	r3, r4
     722:	f107 0258 	add.w	r2, r7, #88	; 0x58
     726:	4628      	mov	r0, r5
     728:	f008 f9b0 	bl	8a8c <z_impl_z_log_msg_static_create>
    //Hexdump some data
    LOG_HEXDUMP_INF(data, sizeof(data),"Sample Data!");
     72c:	466d      	mov	r5, sp
     72e:	713c      	strb	r4, [r7, #4]
     730:	717e      	strb	r6, [r7, #5]
     732:	b088      	sub	sp, #32
     734:	466c      	mov	r4, sp
     736:	f114 0210 	adds.w	r2, r4, #16
     73a:	d015      	beq.n	768 <main+0x214>
     73c:	200e      	movs	r0, #14
     73e:	b11a      	cbz	r2, 748 <main+0x1f4>
     740:	2804      	cmp	r0, #4
     742:	dd01      	ble.n	748 <main+0x1f4>
     744:	4b40      	ldr	r3, [pc, #256]	; (848 <CONFIG_ISR_STACK_SIZE+0x48>)
     746:	6163      	str	r3, [r4, #20]
     748:	2300      	movs	r3, #0
     74a:	703b      	strb	r3, [r7, #0]
     74c:	2302      	movs	r3, #2
     74e:	707b      	strb	r3, [r7, #1]
     750:	b1ba      	cbz	r2, 782 <main+0x22e>
     752:	2808      	cmp	r0, #8
     754:	dd01      	ble.n	75a <main+0x206>
     756:	4b3d      	ldr	r3, [pc, #244]	; (84c <CONFIG_ISR_STACK_SIZE+0x4c>)
     758:	61a3      	str	r3, [r4, #24]
     75a:	f104 031c 	add.w	r3, r4, #28
     75e:	2100      	movs	r1, #0
     760:	e00d      	b.n	77e <main+0x22a>
    LOG_DBG("A log message in debug level");
     762:	f06f 041b 	mvn.w	r4, #27
     766:	e77b      	b.n	660 <main+0x10c>
    LOG_HEXDUMP_INF(data, sizeof(data),"Sample Data!");
     768:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     76c:	e7e7      	b.n	73e <main+0x1ea>
     76e:	f101 0660 	add.w	r6, r1, #96	; 0x60
     772:	443e      	add	r6, r7
     774:	f816 6c60 	ldrb.w	r6, [r6, #-96]
     778:	f803 6b01 	strb.w	r6, [r3], #1
     77c:	3101      	adds	r1, #1
     77e:	2901      	cmp	r1, #1
     780:	d9f5      	bls.n	76e <main+0x21a>
     782:	280d      	cmp	r0, #13
     784:	dd2d      	ble.n	7e2 <main+0x28e>
     786:	230e      	movs	r3, #14
     788:	b142      	cbz	r2, 79c <main+0x248>
     78a:	2103      	movs	r1, #3
     78c:	7139      	strb	r1, [r7, #4]
     78e:	2100      	movs	r1, #0
     790:	7179      	strb	r1, [r7, #5]
     792:	71b9      	strb	r1, [r7, #6]
     794:	2101      	movs	r1, #1
     796:	71f9      	strb	r1, [r7, #7]
     798:	6878      	ldr	r0, [r7, #4]
     79a:	6120      	str	r0, [r4, #16]
     79c:	2100      	movs	r1, #0
     79e:	f36f 0100 	bfc	r1, #0, #1
     7a2:	f36f 0141 	bfc	r1, #1, #1
     7a6:	f36f 0182 	bfc	r1, #2, #1
     7aa:	f36f 01c5 	bfc	r1, #3, #3
     7ae:	2003      	movs	r0, #3
     7b0:	f360 1188 	bfi	r1, r0, #6, #3
     7b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
     7b8:	f363 2152 	bfi	r1, r3, #9, #10
     7bc:	230d      	movs	r3, #13
     7be:	f363 41de 	bfi	r1, r3, #19, #12
     7c2:	f36f 71df 	bfc	r1, #31, #1
     7c6:	f107 0308 	add.w	r3, r7, #8
     7ca:	4819      	ldr	r0, [pc, #100]	; (830 <CONFIG_ISR_STACK_SIZE+0x30>)
     7cc:	f008 f95e 	bl	8a8c <z_impl_z_log_msg_static_create>
     7d0:	46ad      	mov	sp, r5
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     7d2:	481f      	ldr	r0, [pc, #124]	; (850 <CONFIG_ISR_STACK_SIZE+0x50>)
     7d4:	f009 fa95 	bl	9d02 <z_device_is_ready>

	/* Only checking one since led.port and button.port point to the same device, &gpio0 */
	if (!device_is_ready(led.port)) {
     7d8:	b930      	cbnz	r0, 7e8 <main+0x294>

	gpio_add_callback(button.port, &button_cb_data);
	while (1) {
        k_msleep(SLEEP_TIME_MS); 
	}
     7da:	3760      	adds	r7, #96	; 0x60
     7dc:	46bd      	mov	sp, r7
     7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LOG_HEXDUMP_INF(data, sizeof(data),"Sample Data!");
     7e2:	f06f 031b 	mvn.w	r3, #27
     7e6:	e7cf      	b.n	788 <main+0x234>
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
     7e8:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     7ec:	4819      	ldr	r0, [pc, #100]	; (854 <CONFIG_ISR_STACK_SIZE+0x54>)
     7ee:	f007 f961 	bl	7ab4 <gpio_pin_configure_dt>
	if (ret < 0) {
     7f2:	2800      	cmp	r0, #0
     7f4:	dbf1      	blt.n	7da <main+0x286>
	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
     7f6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     7fa:	4817      	ldr	r0, [pc, #92]	; (858 <CONFIG_ISR_STACK_SIZE+0x58>)
     7fc:	f007 f95a 	bl	7ab4 <gpio_pin_configure_dt>
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
     800:	4c13      	ldr	r4, [pc, #76]	; (850 <CONFIG_ISR_STACK_SIZE+0x50>)
     802:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
     806:	2117      	movs	r1, #23
     808:	4620      	mov	r0, r4
     80a:	f007 f917 	bl	7a3c <z_impl_gpio_pin_interrupt_configure>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     80e:	4913      	ldr	r1, [pc, #76]	; (85c <CONFIG_ISR_STACK_SIZE+0x5c>)
     810:	4b13      	ldr	r3, [pc, #76]	; (860 <CONFIG_ISR_STACK_SIZE+0x60>)
     812:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     814:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
     818:	608b      	str	r3, [r1, #8]
	gpio_add_callback(button.port, &button_cb_data);
     81a:	4620      	mov	r0, r4
     81c:	f007 f955 	bl	7aca <gpio_add_callback>
        k_msleep(SLEEP_TIME_MS); 
     820:	4810      	ldr	r0, [pc, #64]	; (864 <CONFIG_ISR_STACK_SIZE+0x64>)
     822:	f007 f95c 	bl	7ade <k_msleep>
	while (1) {
     826:	e7fb      	b.n	820 <CONFIG_ISR_STACK_SIZE+0x20>
     828:	0000a690 	.word	0x0000a690
     82c:	0000a704 	.word	0x0000a704
     830:	0000a5c8 	.word	0x0000a5c8
     834:	0000a724 	.word	0x0000a724
     838:	0000a730 	.word	0x0000a730
     83c:	0000a7a8 	.word	0x0000a7a8
     840:	0000a754 	.word	0x0000a754
     844:	0000a774 	.word	0x0000a774
     848:	0000a794 	.word	0x0000a794
     84c:	0000a798 	.word	0x0000a798
     850:	0000a338 	.word	0x0000a338
     854:	0000a7bc 	.word	0x0000a7bc
     858:	0000a7c4 	.word	0x0000a7c4
     85c:	20000870 	.word	0x20000870
     860:	00000425 	.word	0x00000425
     864:	000927c0 	.word	0x000927c0

00000868 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     86c:	b097      	sub	sp, #92	; 0x5c
     86e:	af00      	add	r7, sp, #0
     870:	4683      	mov	fp, r0
     872:	61ba      	str	r2, [r7, #24]
     874:	613b      	str	r3, [r7, #16]
	__ASSERT_NO_MSG(in_packaged != NULL);

	uint8_t *buf = in_packaged;
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
     876:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     87a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     87e:	623b      	str	r3, [r7, #32]
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     880:	60f9      	str	r1, [r7, #12]
     882:	b151      	cbz	r1, 89a <cbprintf_package_convert+0x32>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     884:	f89b 6002 	ldrb.w	r6, [fp, #2]
     888:	46b1      	mov	r9, r6
	ro_cpy = ros_nbr &&
     88a:	b156      	cbz	r6, 8a2 <cbprintf_package_convert+0x3a>
     88c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     890:	f013 0f01 	tst.w	r3, #1
     894:	d111      	bne.n	8ba <cbprintf_package_convert+0x52>
     896:	2300      	movs	r3, #0
     898:	e004      	b.n	8a4 <cbprintf_package_convert+0x3c>
	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     89a:	f007 f944 	bl	7b26 <get_package_len>
     89e:	60f8      	str	r0, [r7, #12]
     8a0:	e7f0      	b.n	884 <cbprintf_package_convert+0x1c>
	ro_cpy = ros_nbr &&
     8a2:	2300      	movs	r3, #0
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     8a4:	f89b 2003 	ldrb.w	r2, [fp, #3]
     8a8:	627a      	str	r2, [r7, #36]	; 0x24
	rw_cpy = rws_nbr > 0 &&
     8aa:	b142      	cbz	r2, 8be <cbprintf_package_convert+0x56>
     8ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
     8b0:	f012 0f02 	tst.w	r2, #2
     8b4:	d122      	bne.n	8fc <cbprintf_package_convert+0x94>
     8b6:	2200      	movs	r2, #0
     8b8:	e002      	b.n	8c0 <cbprintf_package_convert+0x58>
	ro_cpy = ros_nbr &&
     8ba:	2301      	movs	r3, #1
     8bc:	e7f2      	b.n	8a4 <cbprintf_package_convert+0x3c>
	rw_cpy = rws_nbr > 0 &&
     8be:	2200      	movs	r2, #0

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     8c0:	b902      	cbnz	r2, 8c4 <cbprintf_package_convert+0x5c>
     8c2:	b1eb      	cbz	r3, 900 <cbprintf_package_convert+0x98>

	/* If we got here, it means that coping will be more complex and will be
	 * done with strings appending.
	 * Retrieve the size of the arg list.
	 */
	args_size = in_desc->len * sizeof(int);
     8c4:	f89b 5000 	ldrb.w	r5, [fp]
     8c8:	00aa      	lsls	r2, r5, #2
     8ca:	60ba      	str	r2, [r7, #8]
	int out_len;

	/* Pointer to array with string locations. Array starts with read-only
	 * string locations.
	 */
	const char *fmt = *(const char **)(buf + sizeof(void *));
     8cc:	f8db 2004 	ldr.w	r2, [fp, #4]
     8d0:	617a      	str	r2, [r7, #20]
	uint8_t *str_pos = &buf[args_size];
     8d2:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
	size_t strl_cnt = 0;

	/* If null destination, just calculate output length. */
	if (cb == NULL) {
     8d6:	69ba      	ldr	r2, [r7, #24]
     8d8:	b1f2      	cbz	r2, 918 <cbprintf_package_convert+0xb0>

	/* If read-only strings shall be appended to the output package copy
	 * their indexes to the local array, otherwise indicate that indexes
	 * shall remain in the output package.
	 */
	if (ro_cpy) {
     8da:	2b00      	cmp	r3, #0
     8dc:	f040 8112 	bne.w	b04 <cbprintf_package_convert+0x29c>
		scpy_cnt = ros_nbr;
		keep_cnt = 0;
		dst = cpy_str_pos;
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     8e0:	f1b9 0f00 	cmp.w	r9, #0
     8e4:	f000 811d 	beq.w	b22 <cbprintf_package_convert+0x2ba>
     8e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     8ec:	f013 0f04 	tst.w	r3, #4
     8f0:	f040 811b 	bne.w	b2a <cbprintf_package_convert+0x2c2>
		keep_cnt = ros_nbr;
		dst = keep_str_pos;
	} else {
		scpy_cnt = 0;
		keep_cnt = 0;
		dst = NULL;
     8f4:	2000      	movs	r0, #0
		keep_cnt = 0;
     8f6:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
     8f8:	4606      	mov	r6, r0
     8fa:	e107      	b.n	b0c <cbprintf_package_convert+0x2a4>
	rw_cpy = rws_nbr > 0 &&
     8fc:	2201      	movs	r2, #1
     8fe:	e7df      	b.n	8c0 <cbprintf_package_convert+0x58>
		if (cb) {
     900:	69bb      	ldr	r3, [r7, #24]
     902:	b11b      	cbz	r3, 90c <cbprintf_package_convert+0xa4>
			cb(in_packaged, in_len, ctx);
     904:	693a      	ldr	r2, [r7, #16]
     906:	68f9      	ldr	r1, [r7, #12]
     908:	4658      	mov	r0, fp
     90a:	4798      	blx	r3
		return in_len;
     90c:	68fc      	ldr	r4, [r7, #12]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     90e:	4620      	mov	r0, r4
     910:	375c      	adds	r7, #92	; 0x5c
     912:	46bd      	mov	sp, r7
     914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_len = (int)in_len;
     918:	68fc      	ldr	r4, [r7, #12]
		if (ro_cpy) {
     91a:	bb2b      	cbnz	r3, 968 <cbprintf_package_convert+0x100>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     91c:	f1b9 0f00 	cmp.w	r9, #0
     920:	d038      	beq.n	994 <cbprintf_package_convert+0x12c>
     922:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     926:	f013 0304 	ands.w	r3, r3, #4
     92a:	613b      	str	r3, [r7, #16]
     92c:	d027      	beq.n	97e <cbprintf_package_convert+0x116>
				str_pos += ros_nbr;
     92e:	444d      	add	r5, r9
	size_t strl_cnt = 0;
     930:	2300      	movs	r3, #0
     932:	613b      	str	r3, [r7, #16]
     934:	e023      	b.n	97e <cbprintf_package_convert+0x116>
				out_len += len;
     936:	4404      	add	r4, r0
				str_pos++;
     938:	3501      	adds	r5, #1
			for (int i = 0; i < ros_nbr; i++) {
     93a:	3601      	adds	r6, #1
     93c:	454e      	cmp	r6, r9
     93e:	d21a      	bcs.n	976 <cbprintf_package_convert+0x10e>
				const char *str = *(const char **)&buf32[*str_pos];
     940:	782a      	ldrb	r2, [r5, #0]
				int len = append_string(cb, NULL, str, 0);
     942:	2300      	movs	r3, #0
     944:	f85b 2022 	ldr.w	r2, [fp, r2, lsl #2]
     948:	4619      	mov	r1, r3
     94a:	69b8      	ldr	r0, [r7, #24]
     94c:	f007 f900 	bl	7b50 <append_string>
				if (strl && strl_cnt < strl_len) {
     950:	f1ba 0f00 	cmp.w	sl, #0
     954:	d0ef      	beq.n	936 <cbprintf_package_convert+0xce>
     956:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
     95a:	4598      	cmp	r8, r3
     95c:	d2eb      	bcs.n	936 <cbprintf_package_convert+0xce>
					strl[strl_cnt++] = (uint16_t)len;
     95e:	f82a 0018 	strh.w	r0, [sl, r8, lsl #1]
     962:	f108 0801 	add.w	r8, r8, #1
     966:	e7e6      	b.n	936 <cbprintf_package_convert+0xce>
			for (int i = 0; i < ros_nbr; i++) {
     968:	2600      	movs	r6, #0
	size_t strl_cnt = 0;
     96a:	46b0      	mov	r8, r6
     96c:	f8c7 a01c 	str.w	sl, [r7, #28]
     970:	f8d7 a084 	ldr.w	sl, [r7, #132]	; 0x84
     974:	e7e2      	b.n	93c <cbprintf_package_convert+0xd4>
     976:	f8c7 8010 	str.w	r8, [r7, #16]
     97a:	f8d7 a01c 	ldr.w	sl, [r7, #28]
		bool drop_ro_str_pos = !(flags &
     97e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     982:	f003 0305 	and.w	r3, r3, #5
     986:	60fb      	str	r3, [r7, #12]
		for (int i = 0; i < rws_nbr; i++) {
     988:	f04f 0800 	mov.w	r8, #0
     98c:	46a1      	mov	r9, r4
     98e:	f8c7 b01c 	str.w	fp, [r7, #28]
     992:	e0a1      	b.n	ad8 <cbprintf_package_convert+0x270>
	size_t strl_cnt = 0;
     994:	f8c7 9010 	str.w	r9, [r7, #16]
     998:	e7f1      	b.n	97e <cbprintf_package_convert+0x116>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     99a:	2500      	movs	r5, #0
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     99c:	6a3b      	ldr	r3, [r7, #32]
     99e:	b97b      	cbnz	r3, 9c0 <cbprintf_package_convert+0x158>
			if (is_ro) {
     9a0:	2d00      	cmp	r5, #0
     9a2:	d07b      	beq.n	a9c <cbprintf_package_convert+0x234>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     9a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     9a8:	f013 0f01 	tst.w	r3, #1
     9ac:	d17b      	bne.n	aa6 <cbprintf_package_convert+0x23e>
					out_len -= drop_ro_str_pos ? 2 : 1;
     9ae:	68fb      	ldr	r3, [r7, #12]
     9b0:	2b00      	cmp	r3, #0
     9b2:	d171      	bne.n	a98 <cbprintf_package_convert+0x230>
     9b4:	2302      	movs	r3, #2
     9b6:	eba9 0903 	sub.w	r9, r9, r3
     9ba:	e08a      	b.n	ad2 <cbprintf_package_convert+0x26a>
     9bc:	2501      	movs	r5, #1
     9be:	e7ed      	b.n	99c <cbprintf_package_convert+0x134>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     9c0:	4659      	mov	r1, fp
     9c2:	6978      	ldr	r0, [r7, #20]
     9c4:	f007 f90b 	bl	7bde <is_ptr>
     9c8:	2800      	cmp	r0, #0
     9ca:	d0e9      	beq.n	9a0 <cbprintf_package_convert+0x138>
				LOG_WRN("(unsigned) char * used for %%p argument. "
     9cc:	466c      	mov	r4, sp
     9ce:	2300      	movs	r3, #0
     9d0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
     9d4:	2302      	movs	r3, #2
     9d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
     9da:	b08a      	sub	sp, #40	; 0x28
     9dc:	4669      	mov	r1, sp
     9de:	f111 0210 	adds.w	r2, r1, #16
     9e2:	d039      	beq.n	a58 <cbprintf_package_convert+0x1f0>
     9e4:	2512      	movs	r5, #18
     9e6:	b11a      	cbz	r2, 9f0 <cbprintf_package_convert+0x188>
     9e8:	2d04      	cmp	r5, #4
     9ea:	dd01      	ble.n	9f0 <cbprintf_package_convert+0x188>
     9ec:	4bb3      	ldr	r3, [pc, #716]	; (cbc <cbprintf_package_convert+0x454>)
     9ee:	614b      	str	r3, [r1, #20]
     9f0:	2300      	movs	r3, #0
     9f2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
     9f6:	2302      	movs	r3, #2
     9f8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
     9fc:	bb7a      	cbnz	r2, a5e <cbprintf_package_convert+0x1f6>
     9fe:	2d11      	cmp	r5, #17
     a00:	dd47      	ble.n	a92 <cbprintf_package_convert+0x22a>
     a02:	2312      	movs	r3, #18
     a04:	b162      	cbz	r2, a20 <cbprintf_package_convert+0x1b8>
     a06:	2004      	movs	r0, #4
     a08:	f887 002c 	strb.w	r0, [r7, #44]	; 0x2c
     a0c:	2000      	movs	r0, #0
     a0e:	f887 002d 	strb.w	r0, [r7, #45]	; 0x2d
     a12:	f887 002e 	strb.w	r0, [r7, #46]	; 0x2e
     a16:	2001      	movs	r0, #1
     a18:	f887 002f 	strb.w	r0, [r7, #47]	; 0x2f
     a1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
     a1e:	6108      	str	r0, [r1, #16]
     a20:	f36f 0a00 	bfc	sl, #0, #1
     a24:	f36f 0a41 	bfc	sl, #1, #1
     a28:	f36f 0a82 	bfc	sl, #2, #1
     a2c:	f36f 0ac5 	bfc	sl, #3, #3
     a30:	2102      	movs	r1, #2
     a32:	f361 1a88 	bfi	sl, r1, #6, #3
     a36:	f3c3 0309 	ubfx	r3, r3, #0, #10
     a3a:	f363 2a52 	bfi	sl, r3, #9, #10
     a3e:	f36f 4ade 	bfc	sl, #19, #12
     a42:	f36f 7adf 	bfc	sl, #31, #1
     a46:	2300      	movs	r3, #0
     a48:	4651      	mov	r1, sl
     a4a:	489d      	ldr	r0, [pc, #628]	; (cc0 <cbprintf_package_convert+0x458>)
     a4c:	f008 f81e 	bl	8a8c <z_impl_z_log_msg_static_create>
     a50:	46a5      	mov	sp, r4
				out_len -= 2;
     a52:	f1a9 0902 	sub.w	r9, r9, #2
				continue;
     a56:	e03c      	b.n	ad2 <cbprintf_package_convert+0x26a>
				LOG_WRN("(unsigned) char * used for %%p argument. "
     a58:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
     a5c:	e7c3      	b.n	9e6 <cbprintf_package_convert+0x17e>
     a5e:	462b      	mov	r3, r5
     a60:	2d08      	cmp	r5, #8
     a62:	dd01      	ble.n	a68 <cbprintf_package_convert+0x200>
     a64:	6978      	ldr	r0, [r7, #20]
     a66:	6188      	str	r0, [r1, #24]
     a68:	2b0c      	cmp	r3, #12
     a6a:	dd01      	ble.n	a70 <cbprintf_package_convert+0x208>
     a6c:	f8c1 b01c 	str.w	fp, [r1, #28]
     a70:	f101 0320 	add.w	r3, r1, #32
     a74:	2000      	movs	r0, #0
     a76:	e009      	b.n	a8c <cbprintf_package_convert+0x224>
     a78:	f100 0c30 	add.w	ip, r0, #48	; 0x30
     a7c:	f107 0e28 	add.w	lr, r7, #40	; 0x28
     a80:	44f4      	add	ip, lr
     a82:	f81c cc30 	ldrb.w	ip, [ip, #-48]
     a86:	f803 cb01 	strb.w	ip, [r3], #1
     a8a:	3001      	adds	r0, #1
     a8c:	2801      	cmp	r0, #1
     a8e:	d9f3      	bls.n	a78 <cbprintf_package_convert+0x210>
     a90:	e7b5      	b.n	9fe <cbprintf_package_convert+0x196>
     a92:	f06f 031b 	mvn.w	r3, #27
     a96:	e7b5      	b.n	a04 <cbprintf_package_convert+0x19c>
					out_len -= drop_ro_str_pos ? 2 : 1;
     a98:	2301      	movs	r3, #1
     a9a:	e78c      	b.n	9b6 <cbprintf_package_convert+0x14e>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     a9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     aa0:	f013 0f02 	tst.w	r3, #2
     aa4:	d015      	beq.n	ad2 <cbprintf_package_convert+0x26a>
				len = append_string(cb, NULL, str, 0);
     aa6:	2300      	movs	r3, #0
     aa8:	4622      	mov	r2, r4
     aaa:	4619      	mov	r1, r3
     aac:	69b8      	ldr	r0, [r7, #24]
     aae:	f007 f84f 	bl	7b50 <append_string>
				if (strl && strl_cnt < strl_len) {
     ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
     ab6:	b153      	cbz	r3, ace <cbprintf_package_convert+0x266>
     ab8:	693b      	ldr	r3, [r7, #16]
     aba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
     abe:	4293      	cmp	r3, r2
     ac0:	d205      	bcs.n	ace <cbprintf_package_convert+0x266>
					strl[strl_cnt++] = (uint16_t)len;
     ac2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
     ac6:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
     aca:	3301      	adds	r3, #1
     acc:	613b      	str	r3, [r7, #16]
				out_len += (len - 1);
     ace:	3801      	subs	r0, #1
     ad0:	4481      	add	r9, r0
		for (int i = 0; i < rws_nbr; i++) {
     ad2:	f108 0801 	add.w	r8, r8, #1
			uint8_t arg_pos = *str_pos++;
     ad6:	4635      	mov	r5, r6
		for (int i = 0; i < rws_nbr; i++) {
     ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ada:	4598      	cmp	r8, r3
     adc:	d210      	bcs.n	b00 <cbprintf_package_convert+0x298>
			uint8_t arg_idx = *str_pos++;
     ade:	462e      	mov	r6, r5
     ae0:	f816 bb02 	ldrb.w	fp, [r6], #2
			uint8_t arg_pos = *str_pos++;
     ae4:	786b      	ldrb	r3, [r5, #1]
			const char *str = *(const char **)&buf32[arg_pos];
     ae6:	69fa      	ldr	r2, [r7, #28]
     ae8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
     aec:	4b75      	ldr	r3, [pc, #468]	; (cc4 <cbprintf_package_convert+0x45c>)
     aee:	429c      	cmp	r4, r3
     af0:	f4ff af53 	bcc.w	99a <cbprintf_package_convert+0x132>
     af4:	4b74      	ldr	r3, [pc, #464]	; (cc8 <cbprintf_package_convert+0x460>)
     af6:	429c      	cmp	r4, r3
     af8:	f4ff af60 	bcc.w	9bc <cbprintf_package_convert+0x154>
     afc:	2500      	movs	r5, #0
     afe:	e74d      	b.n	99c <cbprintf_package_convert+0x134>
     b00:	464c      	mov	r4, r9
     b02:	e704      	b.n	90e <cbprintf_package_convert+0xa6>
		dst = cpy_str_pos;
     b04:	f107 0044 	add.w	r0, r7, #68	; 0x44
		keep_cnt = 0;
     b08:	2300      	movs	r3, #0
     b0a:	61fb      	str	r3, [r7, #28]
	if (dst) {
     b0c:	b118      	cbz	r0, b16 <cbprintf_package_convert+0x2ae>
		memcpy(dst, str_pos, ros_nbr);
     b0e:	464a      	mov	r2, r9
     b10:	4629      	mov	r1, r5
     b12:	f008 f9a0 	bl	8e56 <memcpy>
	str_pos += ros_nbr;
     b16:	444d      	add	r5, r9
	for (int i = 0; i < rws_nbr; i++) {
     b18:	f04f 0800 	mov.w	r8, #0
     b1c:	f8c7 9004 	str.w	r9, [r7, #4]
     b20:	e01e      	b.n	b60 <cbprintf_package_convert+0x2f8>
		dst = NULL;
     b22:	2000      	movs	r0, #0
		keep_cnt = 0;
     b24:	61f8      	str	r0, [r7, #28]
		scpy_cnt = 0;
     b26:	4606      	mov	r6, r0
     b28:	e7f0      	b.n	b0c <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
     b2a:	61fe      	str	r6, [r7, #28]
		dst = keep_str_pos;
     b2c:	f107 0034 	add.w	r0, r7, #52	; 0x34
		scpy_cnt = 0;
     b30:	2600      	movs	r6, #0
     b32:	e7eb      	b.n	b0c <cbprintf_package_convert+0x2a4>
     b34:	2500      	movs	r5, #0
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     b36:	6a3b      	ldr	r3, [r7, #32]
     b38:	bb33      	cbnz	r3, b88 <cbprintf_package_convert+0x320>
		if (is_ro) {
     b3a:	2d00      	cmp	r5, #0
     b3c:	d03b      	beq.n	bb6 <cbprintf_package_convert+0x34e>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     b42:	f013 0f01 	tst.w	r3, #1
     b46:	d026      	beq.n	b96 <cbprintf_package_convert+0x32e>
				cpy_str_pos[scpy_cnt++] = arg_pos;
     b48:	1c73      	adds	r3, r6, #1
     b4a:	f106 0230 	add.w	r2, r6, #48	; 0x30
     b4e:	f107 0128 	add.w	r1, r7, #40	; 0x28
     b52:	1856      	adds	r6, r2, r1
     b54:	f806 9c14 	strb.w	r9, [r6, #-20]
     b58:	b2de      	uxtb	r6, r3
	for (int i = 0; i < rws_nbr; i++) {
     b5a:	f108 0801 	add.w	r8, r8, #1
		uint8_t arg_pos = *str_pos++;
     b5e:	4625      	mov	r5, r4
	for (int i = 0; i < rws_nbr; i++) {
     b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     b62:	4598      	cmp	r8, r3
     b64:	d24a      	bcs.n	bfc <cbprintf_package_convert+0x394>
		uint8_t arg_idx = *str_pos++;
     b66:	462c      	mov	r4, r5
     b68:	f814 ab02 	ldrb.w	sl, [r4], #2
		uint8_t arg_pos = *str_pos++;
     b6c:	f895 9001 	ldrb.w	r9, [r5, #1]
		const char *str = *(const char **)&buf32[arg_pos];
     b70:	f85b 3029 	ldr.w	r3, [fp, r9, lsl #2]
     b74:	4a53      	ldr	r2, [pc, #332]	; (cc4 <cbprintf_package_convert+0x45c>)
     b76:	4293      	cmp	r3, r2
     b78:	d3dc      	bcc.n	b34 <cbprintf_package_convert+0x2cc>
     b7a:	4a53      	ldr	r2, [pc, #332]	; (cc8 <cbprintf_package_convert+0x460>)
     b7c:	4293      	cmp	r3, r2
     b7e:	d301      	bcc.n	b84 <cbprintf_package_convert+0x31c>
     b80:	2500      	movs	r5, #0
     b82:	e7d8      	b.n	b36 <cbprintf_package_convert+0x2ce>
     b84:	2501      	movs	r5, #1
     b86:	e7d6      	b.n	b36 <cbprintf_package_convert+0x2ce>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
     b88:	4651      	mov	r1, sl
     b8a:	6978      	ldr	r0, [r7, #20]
     b8c:	f007 f827 	bl	7bde <is_ptr>
     b90:	2800      	cmp	r0, #0
     b92:	d0d2      	beq.n	b3a <cbprintf_package_convert+0x2d2>
     b94:	e7e1      	b.n	b5a <cbprintf_package_convert+0x2f2>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     b96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     b9a:	f013 0f04 	tst.w	r3, #4
     b9e:	d0dc      	beq.n	b5a <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_pos;
     ba0:	69fa      	ldr	r2, [r7, #28]
     ba2:	1c53      	adds	r3, r2, #1
     ba4:	3230      	adds	r2, #48	; 0x30
     ba6:	f107 0128 	add.w	r1, r7, #40	; 0x28
     baa:	440a      	add	r2, r1
     bac:	f802 9c24 	strb.w	r9, [r2, #-36]
     bb0:	b2db      	uxtb	r3, r3
     bb2:	61fb      	str	r3, [r7, #28]
     bb4:	e7d1      	b.n	b5a <cbprintf_package_convert+0x2f2>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     bb6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     bba:	f013 0f02 	tst.w	r3, #2
     bbe:	d009      	beq.n	bd4 <cbprintf_package_convert+0x36c>
				cpy_str_pos[scpy_cnt++] = arg_pos;
     bc0:	1c73      	adds	r3, r6, #1
     bc2:	f106 0230 	add.w	r2, r6, #48	; 0x30
     bc6:	f107 0128 	add.w	r1, r7, #40	; 0x28
     bca:	1856      	adds	r6, r2, r1
     bcc:	f806 9c14 	strb.w	r9, [r6, #-20]
     bd0:	b2de      	uxtb	r6, r3
     bd2:	e7c2      	b.n	b5a <cbprintf_package_convert+0x2f2>
				keep_str_pos[keep_cnt++] = arg_idx;
     bd4:	69f8      	ldr	r0, [r7, #28]
     bd6:	1c43      	adds	r3, r0, #1
     bd8:	f100 0130 	add.w	r1, r0, #48	; 0x30
     bdc:	f107 0228 	add.w	r2, r7, #40	; 0x28
     be0:	188a      	adds	r2, r1, r2
     be2:	f802 ac24 	strb.w	sl, [r2, #-36]
				keep_str_pos[keep_cnt++] = arg_pos;
     be6:	4602      	mov	r2, r0
     be8:	3202      	adds	r2, #2
     bea:	b2d2      	uxtb	r2, r2
     bec:	61fa      	str	r2, [r7, #28]
     bee:	f107 0258 	add.w	r2, r7, #88	; 0x58
     bf2:	fa52 f383 	uxtab	r3, r2, r3
     bf6:	f803 9c24 	strb.w	r9, [r3, #-36]
     bfa:	e7ae      	b.n	b5a <cbprintf_package_convert+0x2f2>
	out_desc.len = in_desc->len;
     bfc:	f8d7 9004 	ldr.w	r9, [r7, #4]
     c00:	f89b 3000 	ldrb.w	r3, [fp]
     c04:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     c08:	f89b 3001 	ldrb.w	r3, [fp, #1]
     c0c:	4433      	add	r3, r6
     c0e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     c12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     c16:	f013 0f02 	tst.w	r3, #2
     c1a:	d10e      	bne.n	c3a <cbprintf_package_convert+0x3d2>
     c1c:	69fb      	ldr	r3, [r7, #28]
     c1e:	f3c3 0347 	ubfx	r3, r3, #1, #8
     c22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     c2a:	f013 0f01 	tst.w	r3, #1
     c2e:	d106      	bne.n	c3e <cbprintf_package_convert+0x3d6>
     c30:	f013 0f04 	tst.w	r3, #4
     c34:	d13f      	bne.n	cb6 <cbprintf_package_convert+0x44e>
     c36:	2300      	movs	r3, #0
     c38:	e002      	b.n	c40 <cbprintf_package_convert+0x3d8>
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     c3a:	2300      	movs	r3, #0
     c3c:	e7f1      	b.n	c22 <cbprintf_package_convert+0x3ba>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     c3e:	2300      	movs	r3, #0
     c40:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	struct cbprintf_package_desc in_desc_backup = *in_desc;
     c44:	f8db 0000 	ldr.w	r0, [fp]
     c48:	6338      	str	r0, [r7, #48]	; 0x30
	*in_desc = out_desc;
     c4a:	6d78      	ldr	r0, [r7, #84]	; 0x54
     c4c:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(in_packaged, args_size, ctx);
     c50:	f8d7 8010 	ldr.w	r8, [r7, #16]
     c54:	4642      	mov	r2, r8
     c56:	68b9      	ldr	r1, [r7, #8]
     c58:	4658      	mov	r0, fp
     c5a:	f8d7 a018 	ldr.w	sl, [r7, #24]
     c5e:	47d0      	blx	sl
	if (rv < 0) {
     c60:	1e04      	subs	r4, r0, #0
     c62:	f6ff ae54 	blt.w	90e <cbprintf_package_convert+0xa6>
	*in_desc = in_desc_backup;
     c66:	6b38      	ldr	r0, [r7, #48]	; 0x30
     c68:	f8cb 0000 	str.w	r0, [fp]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     c6c:	f8c7 8010 	str.w	r8, [r7, #16]
     c70:	4642      	mov	r2, r8
     c72:	69f9      	ldr	r1, [r7, #28]
     c74:	f107 0034 	add.w	r0, r7, #52	; 0x34
     c78:	47d0      	blx	sl
	if (rv < 0) {
     c7a:	2800      	cmp	r0, #0
     c7c:	db57      	blt.n	d2e <cbprintf_package_convert+0x4c6>
	out_len += rv;
     c7e:	eb04 0800 	add.w	r8, r4, r0
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     c82:	68b9      	ldr	r1, [r7, #8]
     c84:	4449      	add	r1, r9
     c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c88:	eb01 0143 	add.w	r1, r1, r3, lsl #1
	rv = cb(str_pos, strs_len, ctx);
     c8c:	f8d7 9010 	ldr.w	r9, [r7, #16]
     c90:	464a      	mov	r2, r9
     c92:	68fb      	ldr	r3, [r7, #12]
     c94:	1a59      	subs	r1, r3, r1
     c96:	4628      	mov	r0, r5
     c98:	47d0      	blx	sl
	if (rv < 0) {
     c9a:	1e04      	subs	r4, r0, #0
     c9c:	f6ff ae37 	blt.w	90e <cbprintf_package_convert+0xa6>
	out_len += rv;
     ca0:	eb08 0504 	add.w	r5, r8, r4
	for (int i = 0; i < scpy_cnt; i++) {
     ca4:	f04f 0800 	mov.w	r8, #0
     ca8:	627e      	str	r6, [r7, #36]	; 0x24
     caa:	f8c7 b020 	str.w	fp, [r7, #32]
     cae:	4656      	mov	r6, sl
     cb0:	f8d7 b084 	ldr.w	fp, [r7, #132]	; 0x84
     cb4:	e01f      	b.n	cf6 <cbprintf_package_convert+0x48e>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     cb6:	69fb      	ldr	r3, [r7, #28]
     cb8:	e7c2      	b.n	c40 <cbprintf_package_convert+0x3d8>
     cba:	bf00      	nop
     cbc:	0000a7cc 	.word	0x0000a7cc
     cc0:	0000a5d0 	.word	0x0000a5d0
     cc4:	0000a2a0 	.word	0x0000a2a0
     cc8:	0000b424 	.word	0x0000b424
		uint16_t str_len = strl ? strl[i] : 0;
     ccc:	f04f 0a00 	mov.w	sl, #0
		rv = cb(&loc, 1, ctx);
     cd0:	464a      	mov	r2, r9
     cd2:	2101      	movs	r1, #1
     cd4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
     cd8:	47b0      	blx	r6
		if (rv < 0) {
     cda:	2800      	cmp	r0, #0
     cdc:	db29      	blt.n	d32 <cbprintf_package_convert+0x4ca>
		out_len += rv;
     cde:	4405      	add	r5, r0
		rv = append_string(cb, ctx, str, str_len);
     ce0:	4653      	mov	r3, sl
     ce2:	4622      	mov	r2, r4
     ce4:	4649      	mov	r1, r9
     ce6:	4630      	mov	r0, r6
     ce8:	f006 ff32 	bl	7b50 <append_string>
		if (rv < 0) {
     cec:	2800      	cmp	r0, #0
     cee:	db22      	blt.n	d36 <cbprintf_package_convert+0x4ce>
		out_len += rv;
     cf0:	4405      	add	r5, r0
	for (int i = 0; i < scpy_cnt; i++) {
     cf2:	f108 0801 	add.w	r8, r8, #1
     cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     cf8:	4598      	cmp	r8, r3
     cfa:	da11      	bge.n	d20 <cbprintf_package_convert+0x4b8>
		uint8_t loc = cpy_str_pos[i];
     cfc:	f108 0330 	add.w	r3, r8, #48	; 0x30
     d00:	f107 0228 	add.w	r2, r7, #40	; 0x28
     d04:	4413      	add	r3, r2
     d06:	f813 3c14 	ldrb.w	r3, [r3, #-20]
     d0a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
		const char *str = *(const char **)&buf32[loc];
     d0e:	6a3a      	ldr	r2, [r7, #32]
     d10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     d14:	f1bb 0f00 	cmp.w	fp, #0
     d18:	d0d8      	beq.n	ccc <cbprintf_package_convert+0x464>
     d1a:	f83b a018 	ldrh.w	sl, [fp, r8, lsl #1]
     d1e:	e7d7      	b.n	cd0 <cbprintf_package_convert+0x468>
	(void)cb(NULL, 0, ctx);
     d20:	693a      	ldr	r2, [r7, #16]
     d22:	2100      	movs	r1, #0
     d24:	4608      	mov	r0, r1
     d26:	69bb      	ldr	r3, [r7, #24]
     d28:	4798      	blx	r3
	return out_len;
     d2a:	462c      	mov	r4, r5
     d2c:	e5ef      	b.n	90e <cbprintf_package_convert+0xa6>
		return rv;
     d2e:	4604      	mov	r4, r0
     d30:	e5ed      	b.n	90e <cbprintf_package_convert+0xa6>
     d32:	4604      	mov	r4, r0
     d34:	e5eb      	b.n	90e <cbprintf_package_convert+0xa6>
     d36:	4604      	mov	r4, r0
     d38:	e5e9      	b.n	90e <cbprintf_package_convert+0xa6>
     d3a:	bf00      	nop

00000d3c <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
     d3c:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
     d3e:	4b02      	ldr	r3, [pc, #8]	; (d48 <char_out+0xc>)
     d40:	681b      	ldr	r3, [r3, #0]
     d42:	4798      	blx	r3
}
     d44:	bd08      	pop	{r3, pc}
     d46:	bf00      	nop
     d48:	20000000 	.word	0x20000000

00000d4c <__printk_hook_install>:
	_char_out = fn;
     d4c:	4b01      	ldr	r3, [pc, #4]	; (d54 <__printk_hook_install+0x8>)
     d4e:	6018      	str	r0, [r3, #0]
}
     d50:	4770      	bx	lr
     d52:	bf00      	nop
     d54:	20000000 	.word	0x20000000

00000d58 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     d58:	b500      	push	{lr}
     d5a:	b083      	sub	sp, #12
     d5c:	4602      	mov	r2, r0
     d5e:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     d60:	2100      	movs	r1, #0
     d62:	9100      	str	r1, [sp, #0]
     d64:	4802      	ldr	r0, [pc, #8]	; (d70 <vprintk+0x18>)
     d66:	f000 f935 	bl	fd4 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     d6a:	b003      	add	sp, #12
     d6c:	f85d fb04 	ldr.w	pc, [sp], #4
     d70:	00000d3d 	.word	0x00000d3d

00000d74 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     d74:	b510      	push	{r4, lr}
     d76:	b086      	sub	sp, #24
     d78:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     d7a:	9003      	str	r0, [sp, #12]
     d7c:	9104      	str	r1, [sp, #16]
     d7e:	2100      	movs	r1, #0
     d80:	9105      	str	r1, [sp, #20]
     d82:	9100      	str	r1, [sp, #0]
     d84:	a903      	add	r1, sp, #12
     d86:	4806      	ldr	r0, [pc, #24]	; (da0 <vsnprintk+0x2c>)
     d88:	f000 f924 	bl	fd4 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
     d8c:	9b05      	ldr	r3, [sp, #20]
     d8e:	9a04      	ldr	r2, [sp, #16]
     d90:	4293      	cmp	r3, r2
     d92:	da01      	bge.n	d98 <vsnprintk+0x24>
		str[ctx.count] = '\0';
     d94:	2200      	movs	r2, #0
     d96:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     d98:	9805      	ldr	r0, [sp, #20]
     d9a:	b006      	add	sp, #24
     d9c:	bd10      	pop	{r4, pc}
     d9e:	bf00      	nop
     da0:	00007c31 	.word	0x00007c31

00000da4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     da8:	b083      	sub	sp, #12
     daa:	4604      	mov	r4, r0
     dac:	4608      	mov	r0, r1
     dae:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     db0:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     db2:	f013 0f08 	tst.w	r3, #8
     db6:	d105      	bne.n	dc4 <process_event+0x20>
     db8:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     dbc:	2300      	movs	r3, #0
     dbe:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     dc0:	9301      	str	r3, [sp, #4]
}
     dc2:	e055      	b.n	e70 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
     dc4:	2901      	cmp	r1, #1
     dc6:	d009      	beq.n	ddc <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     dc8:	f043 0320 	orr.w	r3, r3, #32
     dcc:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     dce:	f385 8811 	msr	BASEPRI, r5
     dd2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     dd6:	b003      	add	sp, #12
     dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     ddc:	f043 0310 	orr.w	r3, r3, #16
     de0:	8323      	strh	r3, [r4, #24]
     de2:	e7f4      	b.n	dce <process_event+0x2a>
			evt = process_recheck(mgr);
     de4:	4620      	mov	r0, r4
     de6:	f006 ff8b 	bl	7d00 <process_recheck>
     dea:	e043      	b.n	e74 <process_event+0xd0>
			res = mgr->last_res;
     dec:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     df0:	464a      	mov	r2, r9
     df2:	4669      	mov	r1, sp
     df4:	4620      	mov	r0, r4
     df6:	f006 ff9c 	bl	7d32 <process_complete>
		onoff_transition_fn transit = NULL;
     dfa:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     dfe:	8b23      	ldrh	r3, [r4, #24]
     e00:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     e04:	42b7      	cmp	r7, r6
     e06:	d069      	beq.n	edc <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     e08:	68a2      	ldr	r2, [r4, #8]
     e0a:	2a00      	cmp	r2, #0
     e0c:	d066      	beq.n	edc <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     e0e:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     e10:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     e14:	8323      	strh	r3, [r4, #24]
     e16:	f385 8811 	msr	BASEPRI, r5
     e1a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     e1e:	2a00      	cmp	r2, #0
     e20:	d164      	bne.n	eec <process_event+0x148>
     e22:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     e24:	b12b      	cbz	r3, e32 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
     e26:	464b      	mov	r3, r9
     e28:	463a      	mov	r2, r7
     e2a:	4669      	mov	r1, sp
     e2c:	4620      	mov	r0, r4
     e2e:	f006 fff9 	bl	7e24 <notify_all>
			if (transit != NULL) {
     e32:	f1b8 0f00 	cmp.w	r8, #0
     e36:	d002      	beq.n	e3e <process_event+0x9a>
				transit(mgr, transition_complete);
     e38:	4934      	ldr	r1, [pc, #208]	; (f0c <process_event+0x168>)
     e3a:	4620      	mov	r0, r4
     e3c:	47c0      	blx	r8
	__asm__ volatile(
     e3e:	f04f 0320 	mov.w	r3, #32
     e42:	f3ef 8511 	mrs	r5, BASEPRI
     e46:	f383 8812 	msr	BASEPRI_MAX, r3
     e4a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     e4e:	8b23      	ldrh	r3, [r4, #24]
     e50:	f023 0308 	bic.w	r3, r3, #8
     e54:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     e56:	8b23      	ldrh	r3, [r4, #24]
     e58:	f013 0f10 	tst.w	r3, #16
     e5c:	d04c      	beq.n	ef8 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     e5e:	f023 0310 	bic.w	r3, r3, #16
     e62:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     e64:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     e66:	8b26      	ldrh	r6, [r4, #24]
     e68:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     e6c:	2800      	cmp	r0, #0
     e6e:	d0ae      	beq.n	dce <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     e70:	2802      	cmp	r0, #2
     e72:	d0b7      	beq.n	de4 <process_event+0x40>
		if (evt == EVT_NOP) {
     e74:	2800      	cmp	r0, #0
     e76:	d0aa      	beq.n	dce <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     e78:	3801      	subs	r0, #1
     e7a:	2804      	cmp	r0, #4
     e7c:	d82a      	bhi.n	ed4 <process_event+0x130>
     e7e:	a301      	add	r3, pc, #4	; (adr r3, e84 <process_event+0xe0>)
     e80:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     e84:	00000ded 	.word	0x00000ded
     e88:	00000ed5 	.word	0x00000ed5
     e8c:	00000e99 	.word	0x00000e99
     e90:	00000ead 	.word	0x00000ead
     e94:	00000ec1 	.word	0x00000ec1
			transit = mgr->transitions->start;
     e98:	6923      	ldr	r3, [r4, #16]
     e9a:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
     e9e:	2106      	movs	r1, #6
     ea0:	4620      	mov	r0, r4
     ea2:	f006 ff03 	bl	7cac <set_state>
		res = 0;
     ea6:	f04f 0900 	mov.w	r9, #0
     eaa:	e7a8      	b.n	dfe <process_event+0x5a>
			transit = mgr->transitions->stop;
     eac:	6923      	ldr	r3, [r4, #16]
     eae:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     eb2:	2104      	movs	r1, #4
     eb4:	4620      	mov	r0, r4
     eb6:	f006 fef9 	bl	7cac <set_state>
		res = 0;
     eba:	f04f 0900 	mov.w	r9, #0
     ebe:	e79e      	b.n	dfe <process_event+0x5a>
			transit = mgr->transitions->reset;
     ec0:	6923      	ldr	r3, [r4, #16]
     ec2:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     ec6:	2105      	movs	r1, #5
     ec8:	4620      	mov	r0, r4
     eca:	f006 feef 	bl	7cac <set_state>
		res = 0;
     ece:	f04f 0900 	mov.w	r9, #0
     ed2:	e794      	b.n	dfe <process_event+0x5a>
		if (evt == EVT_NOP) {
     ed4:	f04f 0800 	mov.w	r8, #0
     ed8:	46c1      	mov	r9, r8
     eda:	e790      	b.n	dfe <process_event+0x5a>
     edc:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     ede:	b10a      	cbz	r2, ee4 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     ee0:	2200      	movs	r2, #0
     ee2:	e795      	b.n	e10 <process_event+0x6c>
		    || (transit != NULL)) {
     ee4:	f1b8 0f00 	cmp.w	r8, #0
     ee8:	d192      	bne.n	e10 <process_event+0x6c>
     eea:	e7b4      	b.n	e56 <process_event+0xb2>
				notify_monitors(mgr, state, res);
     eec:	464a      	mov	r2, r9
     eee:	4639      	mov	r1, r7
     ef0:	4620      	mov	r0, r4
     ef2:	f006 fee3 	bl	7cbc <notify_monitors>
     ef6:	e794      	b.n	e22 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     ef8:	f013 0f20 	tst.w	r3, #32
     efc:	d004      	beq.n	f08 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     efe:	f023 0320 	bic.w	r3, r3, #32
     f02:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     f04:	2002      	movs	r0, #2
     f06:	e7ae      	b.n	e66 <process_event+0xc2>
		evt = EVT_NOP;
     f08:	2000      	movs	r0, #0
     f0a:	e7ac      	b.n	e66 <process_event+0xc2>
     f0c:	00007e53 	.word	0x00007e53

00000f10 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
     f10:	4684      	mov	ip, r0
     f12:	4608      	mov	r0, r1
	bool loop = true;
     f14:	2201      	movs	r2, #1
     f16:	e026      	b.n	f66 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
     f18:	f89c 3000 	ldrb.w	r3, [ip]
     f1c:	f043 0304 	orr.w	r3, r3, #4
     f20:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
     f24:	b1f2      	cbz	r2, f64 <extract_flags+0x54>
			++sp;
     f26:	3001      	adds	r0, #1
     f28:	e01c      	b.n	f64 <extract_flags+0x54>
			conv->flag_plus = true;
     f2a:	f89c 3000 	ldrb.w	r3, [ip]
     f2e:	f043 0308 	orr.w	r3, r3, #8
     f32:	f88c 3000 	strb.w	r3, [ip]
			break;
     f36:	e7f5      	b.n	f24 <extract_flags+0x14>
			conv->flag_space = true;
     f38:	f89c 3000 	ldrb.w	r3, [ip]
     f3c:	f043 0310 	orr.w	r3, r3, #16
     f40:	f88c 3000 	strb.w	r3, [ip]
			break;
     f44:	e7ee      	b.n	f24 <extract_flags+0x14>
			conv->flag_hash = true;
     f46:	f89c 3000 	ldrb.w	r3, [ip]
     f4a:	f043 0320 	orr.w	r3, r3, #32
     f4e:	f88c 3000 	strb.w	r3, [ip]
			break;
     f52:	e7e7      	b.n	f24 <extract_flags+0x14>
			conv->flag_zero = true;
     f54:	f89c 3000 	ldrb.w	r3, [ip]
     f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     f5c:	f88c 3000 	strb.w	r3, [ip]
			break;
     f60:	e7e0      	b.n	f24 <extract_flags+0x14>
		switch (*sp) {
     f62:	2200      	movs	r2, #0
		}
	} while (loop);
     f64:	b342      	cbz	r2, fb8 <extract_flags+0xa8>
		switch (*sp) {
     f66:	7803      	ldrb	r3, [r0, #0]
     f68:	3b20      	subs	r3, #32
     f6a:	2b10      	cmp	r3, #16
     f6c:	d8f9      	bhi.n	f62 <extract_flags+0x52>
     f6e:	a101      	add	r1, pc, #4	; (adr r1, f74 <extract_flags+0x64>)
     f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     f74:	00000f39 	.word	0x00000f39
     f78:	00000f63 	.word	0x00000f63
     f7c:	00000f63 	.word	0x00000f63
     f80:	00000f47 	.word	0x00000f47
     f84:	00000f63 	.word	0x00000f63
     f88:	00000f63 	.word	0x00000f63
     f8c:	00000f63 	.word	0x00000f63
     f90:	00000f63 	.word	0x00000f63
     f94:	00000f63 	.word	0x00000f63
     f98:	00000f63 	.word	0x00000f63
     f9c:	00000f63 	.word	0x00000f63
     fa0:	00000f2b 	.word	0x00000f2b
     fa4:	00000f63 	.word	0x00000f63
     fa8:	00000f19 	.word	0x00000f19
     fac:	00000f63 	.word	0x00000f63
     fb0:	00000f63 	.word	0x00000f63
     fb4:	00000f55 	.word	0x00000f55

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
     fb8:	f89c 3000 	ldrb.w	r3, [ip]
     fbc:	f003 0344 	and.w	r3, r3, #68	; 0x44
     fc0:	2b44      	cmp	r3, #68	; 0x44
     fc2:	d000      	beq.n	fc6 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
     fc4:	4770      	bx	lr
		conv->flag_zero = false;
     fc6:	f89c 3000 	ldrb.w	r3, [ip]
     fca:	f36f 1386 	bfc	r3, #6, #1
     fce:	f88c 3000 	strb.w	r3, [ip]
     fd2:	e7f7      	b.n	fc4 <extract_flags+0xb4>

00000fd4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fd8:	b091      	sub	sp, #68	; 0x44
     fda:	4606      	mov	r6, r0
     fdc:	460d      	mov	r5, r1
     fde:	4691      	mov	r9, r2
     fe0:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     fe2:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     fe4:	f899 0000 	ldrb.w	r0, [r9]
     fe8:	2800      	cmp	r0, #0
     fea:	f000 82b9 	beq.w	1560 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x560>
		if (*fp != '%') {
     fee:	2825      	cmp	r0, #37	; 0x25
     ff0:	d008      	beq.n	1004 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4>
			OUTC(*fp++);
     ff2:	f109 0901 	add.w	r9, r9, #1
     ff6:	4629      	mov	r1, r5
     ff8:	47b0      	blx	r6
     ffa:	2800      	cmp	r0, #0
     ffc:	f2c0 82b1 	blt.w	1562 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x562>
    1000:	3401      	adds	r4, #1
			continue;
    1002:	e7ef      	b.n	fe4 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    1004:	2300      	movs	r3, #0
    1006:	9304      	str	r3, [sp, #16]
    1008:	9305      	str	r3, [sp, #20]
    100a:	9306      	str	r3, [sp, #24]
    100c:	9307      	str	r3, [sp, #28]
    100e:	9308      	str	r3, [sp, #32]
    1010:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
    1012:	4649      	mov	r1, r9
    1014:	a806      	add	r0, sp, #24
    1016:	f007 f938 	bl	828a <extract_conversion>
    101a:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    101c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    1020:	f013 0f01 	tst.w	r3, #1
    1024:	f000 8097 	beq.w	1156 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x156>
			width = va_arg(ap, int);
    1028:	9b03      	ldr	r3, [sp, #12]
    102a:	1d1a      	adds	r2, r3, #4
    102c:	9203      	str	r2, [sp, #12]
    102e:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    1030:	2f00      	cmp	r7, #0
    1032:	f2c0 8088 	blt.w	1146 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x146>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    1036:	f89d 3019 	ldrb.w	r3, [sp, #25]
    103a:	f013 0f04 	tst.w	r3, #4
    103e:	f000 809c 	beq.w	117a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x17a>
			int arg = va_arg(ap, int);
    1042:	9b03      	ldr	r3, [sp, #12]
    1044:	1d1a      	adds	r2, r3, #4
    1046:	9203      	str	r2, [sp, #12]
    1048:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
    104c:	f1ba 0f00 	cmp.w	sl, #0
    1050:	f2c0 808a 	blt.w	1168 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x168>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    1054:	2300      	movs	r3, #0
    1056:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
    1058:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    105a:	f89d 301a 	ldrb.w	r3, [sp, #26]
    105e:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    1062:	f89d 1019 	ldrb.w	r1, [sp, #25]
    1066:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    106a:	2b01      	cmp	r3, #1
    106c:	f000 808e 	beq.w	118c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x18c>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    1070:	2b02      	cmp	r3, #2
    1072:	f000 80d3 	beq.w	121c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x21c>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1076:	2b04      	cmp	r3, #4
    1078:	f000 8124 	beq.w	12c4 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2c4>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    107c:	2b03      	cmp	r3, #3
    107e:	f000 813b 	beq.w	12f8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2f8>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1082:	f89d 8018 	ldrb.w	r8, [sp, #24]
    1086:	f018 0b03 	ands.w	fp, r8, #3
    108a:	f040 813b 	bne.w	1304 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x304>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    108e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    1092:	3b25      	subs	r3, #37	; 0x25
    1094:	2b53      	cmp	r3, #83	; 0x53
    1096:	f200 81ca 	bhi.w	142e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x42e>
    109a:	e8df f013 	tbh	[pc, r3, lsl #1]
    109e:	0140      	.short	0x0140
    10a0:	01c801c8 	.word	0x01c801c8
    10a4:	01c801c8 	.word	0x01c801c8
    10a8:	01c801c8 	.word	0x01c801c8
    10ac:	01c801c8 	.word	0x01c801c8
    10b0:	01c801c8 	.word	0x01c801c8
    10b4:	01c801c8 	.word	0x01c801c8
    10b8:	01c801c8 	.word	0x01c801c8
    10bc:	01c801c8 	.word	0x01c801c8
    10c0:	01c801c8 	.word	0x01c801c8
    10c4:	01c801c8 	.word	0x01c801c8
    10c8:	01c801c8 	.word	0x01c801c8
    10cc:	01c801c8 	.word	0x01c801c8
    10d0:	01c801c8 	.word	0x01c801c8
    10d4:	01c801c8 	.word	0x01c801c8
    10d8:	01c801c8 	.word	0x01c801c8
    10dc:	01c801c8 	.word	0x01c801c8
    10e0:	01c801c8 	.word	0x01c801c8
    10e4:	01c801c8 	.word	0x01c801c8
    10e8:	01c801c8 	.word	0x01c801c8
    10ec:	01c801c8 	.word	0x01c801c8
    10f0:	01c801c8 	.word	0x01c801c8
    10f4:	01c801c8 	.word	0x01c801c8
    10f8:	01c801c8 	.word	0x01c801c8
    10fc:	01c801c8 	.word	0x01c801c8
    1100:	01c801c8 	.word	0x01c801c8
    1104:	01c80181 	.word	0x01c80181
    1108:	01c801c8 	.word	0x01c801c8
    110c:	01c801c8 	.word	0x01c801c8
    1110:	01c801c8 	.word	0x01c801c8
    1114:	01c801c8 	.word	0x01c801c8
    1118:	015e01c8 	.word	0x015e01c8
    111c:	01c80167 	.word	0x01c80167
    1120:	01c801c8 	.word	0x01c801c8
    1124:	016701c8 	.word	0x016701c8
    1128:	01c801c8 	.word	0x01c801c8
    112c:	01c801c8 	.word	0x01c801c8
    1130:	018101bd 	.word	0x018101bd
    1134:	01c801a1 	.word	0x01c801a1
    1138:	014d01c8 	.word	0x014d01c8
    113c:	018101c8 	.word	0x018101c8
    1140:	01c801c8 	.word	0x01c801c8
    1144:	0181      	.short	0x0181
				conv->flag_dash = true;
    1146:	f89d 3018 	ldrb.w	r3, [sp, #24]
    114a:	f043 0304 	orr.w	r3, r3, #4
    114e:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
    1152:	427f      	negs	r7, r7
    1154:	e76f      	b.n	1036 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x36>
		} else if (conv->width_present) {
    1156:	f99d 3018 	ldrsb.w	r3, [sp, #24]
    115a:	2b00      	cmp	r3, #0
    115c:	db02      	blt.n	1164 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x164>
		int width = -1;
    115e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1162:	e768      	b.n	1036 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x36>
			width = conv->width_value;
    1164:	9f07      	ldr	r7, [sp, #28]
    1166:	e766      	b.n	1036 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x36>
				conv->prec_present = false;
    1168:	f89d 3019 	ldrb.w	r3, [sp, #25]
    116c:	f36f 0341 	bfc	r3, #1, #1
    1170:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
    1174:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    1178:	e76c      	b.n	1054 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x54>
		} else if (conv->prec_present) {
    117a:	f013 0f02 	tst.w	r3, #2
    117e:	d002      	beq.n	1186 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x186>
			precision = conv->prec_value;
    1180:	f8dd a020 	ldr.w	sl, [sp, #32]
    1184:	e766      	b.n	1054 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x54>
		int precision = -1;
    1186:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    118a:	e763      	b.n	1054 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x54>
			switch (length_mod) {
    118c:	1ecb      	subs	r3, r1, #3
    118e:	2b04      	cmp	r3, #4
    1190:	d804      	bhi.n	119c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x19c>
    1192:	e8df f003 	tbb	[pc, r3]
    1196:	1d0b      	.short	0x1d0b
    1198:	3529      	.short	0x3529
    119a:	35          	.byte	0x35
    119b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    119c:	9b03      	ldr	r3, [sp, #12]
    119e:	1d1a      	adds	r2, r3, #4
    11a0:	9203      	str	r2, [sp, #12]
    11a2:	681b      	ldr	r3, [r3, #0]
    11a4:	17da      	asrs	r2, r3, #31
    11a6:	9304      	str	r3, [sp, #16]
    11a8:	9205      	str	r2, [sp, #20]
				break;
    11aa:	e006      	b.n	11ba <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1ba>
					value->sint = va_arg(ap, long);
    11ac:	9b03      	ldr	r3, [sp, #12]
    11ae:	1d1a      	adds	r2, r3, #4
    11b0:	9203      	str	r2, [sp, #12]
    11b2:	681b      	ldr	r3, [r3, #0]
    11b4:	17da      	asrs	r2, r3, #31
    11b6:	9304      	str	r3, [sp, #16]
    11b8:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
    11ba:	2901      	cmp	r1, #1
    11bc:	d028      	beq.n	1210 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x210>
			} else if (length_mod == LENGTH_H) {
    11be:	2902      	cmp	r1, #2
    11c0:	f47f af5f 	bne.w	1082 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x82>
				value->sint = (short)value->sint;
    11c4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
    11c8:	17da      	asrs	r2, r3, #31
    11ca:	9304      	str	r3, [sp, #16]
    11cc:	9205      	str	r2, [sp, #20]
    11ce:	e758      	b.n	1082 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x82>
					(sint_value_type)va_arg(ap, long long);
    11d0:	9b03      	ldr	r3, [sp, #12]
    11d2:	3307      	adds	r3, #7
    11d4:	f023 0307 	bic.w	r3, r3, #7
    11d8:	f103 0208 	add.w	r2, r3, #8
    11dc:	9203      	str	r2, [sp, #12]
    11de:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    11e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    11e6:	e7e8      	b.n	11ba <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1ba>
					(sint_value_type)va_arg(ap, intmax_t);
    11e8:	9b03      	ldr	r3, [sp, #12]
    11ea:	3307      	adds	r3, #7
    11ec:	f023 0307 	bic.w	r3, r3, #7
    11f0:	f103 0208 	add.w	r2, r3, #8
    11f4:	9203      	str	r2, [sp, #12]
    11f6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    11fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    11fe:	e7dc      	b.n	11ba <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1ba>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1200:	9b03      	ldr	r3, [sp, #12]
    1202:	1d1a      	adds	r2, r3, #4
    1204:	9203      	str	r2, [sp, #12]
    1206:	681b      	ldr	r3, [r3, #0]
    1208:	17da      	asrs	r2, r3, #31
				value->sint =
    120a:	9304      	str	r3, [sp, #16]
    120c:	9205      	str	r2, [sp, #20]
				break;
    120e:	e7d4      	b.n	11ba <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x1ba>
				value->sint = (signed char)value->sint;
    1210:	f99d 3010 	ldrsb.w	r3, [sp, #16]
    1214:	17da      	asrs	r2, r3, #31
    1216:	9304      	str	r3, [sp, #16]
    1218:	9205      	str	r2, [sp, #20]
    121a:	e732      	b.n	1082 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x82>
			switch (length_mod) {
    121c:	1ecb      	subs	r3, r1, #3
    121e:	2b04      	cmp	r3, #4
    1220:	d804      	bhi.n	122c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x22c>
    1222:	e8df f003 	tbb	[pc, r3]
    1226:	1f0b      	.short	0x1f0b
    1228:	4135      	.short	0x4135
    122a:	41          	.byte	0x41
    122b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    122c:	9b03      	ldr	r3, [sp, #12]
    122e:	1d1a      	adds	r2, r3, #4
    1230:	9203      	str	r2, [sp, #12]
    1232:	681b      	ldr	r3, [r3, #0]
    1234:	9304      	str	r3, [sp, #16]
    1236:	2300      	movs	r3, #0
    1238:	9305      	str	r3, [sp, #20]
				break;
    123a:	e01e      	b.n	127a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x27a>
				    && (conv->specifier == 'c')) {
    123c:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
    1240:	2b63      	cmp	r3, #99	; 0x63
    1242:	d007      	beq.n	1254 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x254>
					value->uint = va_arg(ap, unsigned long);
    1244:	9b03      	ldr	r3, [sp, #12]
    1246:	1d1a      	adds	r2, r3, #4
    1248:	9203      	str	r2, [sp, #12]
    124a:	681b      	ldr	r3, [r3, #0]
    124c:	9304      	str	r3, [sp, #16]
    124e:	2300      	movs	r3, #0
    1250:	9305      	str	r3, [sp, #20]
    1252:	e012      	b.n	127a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x27a>
					value->uint = (wchar_t)va_arg(ap,
    1254:	9b03      	ldr	r3, [sp, #12]
    1256:	1d1a      	adds	r2, r3, #4
    1258:	9203      	str	r2, [sp, #12]
    125a:	681b      	ldr	r3, [r3, #0]
    125c:	9304      	str	r3, [sp, #16]
    125e:	2300      	movs	r3, #0
    1260:	9305      	str	r3, [sp, #20]
    1262:	e00a      	b.n	127a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x27a>
					(uint_value_type)va_arg(ap,
    1264:	9b03      	ldr	r3, [sp, #12]
    1266:	3307      	adds	r3, #7
    1268:	f023 0307 	bic.w	r3, r3, #7
    126c:	f103 0208 	add.w	r2, r3, #8
    1270:	9203      	str	r2, [sp, #12]
    1272:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    1276:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
    127a:	2901      	cmp	r1, #1
    127c:	d01c      	beq.n	12b8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2b8>
			} else if (length_mod == LENGTH_H) {
    127e:	2902      	cmp	r1, #2
    1280:	f47f aeff 	bne.w	1082 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x82>
				value->uint = (unsigned short)value->uint;
    1284:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    1288:	9304      	str	r3, [sp, #16]
    128a:	2300      	movs	r3, #0
    128c:	9305      	str	r3, [sp, #20]
    128e:	e6f8      	b.n	1082 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x82>
					(uint_value_type)va_arg(ap,
    1290:	9b03      	ldr	r3, [sp, #12]
    1292:	3307      	adds	r3, #7
    1294:	f023 0307 	bic.w	r3, r3, #7
    1298:	f103 0208 	add.w	r2, r3, #8
    129c:	9203      	str	r2, [sp, #12]
    129e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    12a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
    12a6:	e7e8      	b.n	127a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x27a>
					(uint_value_type)va_arg(ap, size_t);
    12a8:	9b03      	ldr	r3, [sp, #12]
    12aa:	1d1a      	adds	r2, r3, #4
    12ac:	9203      	str	r2, [sp, #12]
    12ae:	681b      	ldr	r3, [r3, #0]
				value->uint =
    12b0:	9304      	str	r3, [sp, #16]
    12b2:	2300      	movs	r3, #0
    12b4:	9305      	str	r3, [sp, #20]
				break;
    12b6:	e7e0      	b.n	127a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x27a>
				value->uint = (unsigned char)value->uint;
    12b8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    12bc:	9304      	str	r3, [sp, #16]
    12be:	2300      	movs	r3, #0
    12c0:	9305      	str	r3, [sp, #20]
    12c2:	e6de      	b.n	1082 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x82>
			if (length_mod == LENGTH_UPPER_L) {
    12c4:	2908      	cmp	r1, #8
    12c6:	d00b      	beq.n	12e0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2e0>
				value->dbl = va_arg(ap, double);
    12c8:	9b03      	ldr	r3, [sp, #12]
    12ca:	3307      	adds	r3, #7
    12cc:	f023 0307 	bic.w	r3, r3, #7
    12d0:	f103 0208 	add.w	r2, r3, #8
    12d4:	9203      	str	r2, [sp, #12]
    12d6:	e9d3 2300 	ldrd	r2, r3, [r3]
    12da:	e9cd 2304 	strd	r2, r3, [sp, #16]
    12de:	e6d0      	b.n	1082 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x82>
				value->ldbl = va_arg(ap, long double);
    12e0:	9b03      	ldr	r3, [sp, #12]
    12e2:	3307      	adds	r3, #7
    12e4:	f023 0307 	bic.w	r3, r3, #7
    12e8:	f103 0208 	add.w	r2, r3, #8
    12ec:	9203      	str	r2, [sp, #12]
    12ee:	e9d3 2300 	ldrd	r2, r3, [r3]
    12f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    12f6:	e6c4      	b.n	1082 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x82>
			value->ptr = va_arg(ap, void *);
    12f8:	9b03      	ldr	r3, [sp, #12]
    12fa:	1d1a      	adds	r2, r3, #4
    12fc:	9203      	str	r2, [sp, #12]
    12fe:	681b      	ldr	r3, [r3, #0]
    1300:	9304      	str	r3, [sp, #16]
    1302:	e6be      	b.n	1082 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x82>
			OUTS(sp, fp);
    1304:	9f02      	ldr	r7, [sp, #8]
    1306:	463b      	mov	r3, r7
    1308:	464a      	mov	r2, r9
    130a:	4629      	mov	r1, r5
    130c:	4630      	mov	r0, r6
    130e:	f007 f862 	bl	83d6 <outs>
    1312:	2800      	cmp	r0, #0
    1314:	f2c0 8125 	blt.w	1562 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x562>
    1318:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    131a:	46b9      	mov	r9, r7
			continue;
    131c:	e662      	b.n	fe4 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
    131e:	4629      	mov	r1, r5
    1320:	2025      	movs	r0, #37	; 0x25
    1322:	47b0      	blx	r6
    1324:	2800      	cmp	r0, #0
    1326:	f2c0 811c 	blt.w	1562 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x562>
    132a:	3401      	adds	r4, #1
		char sign = 0;
    132c:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    132e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1332:	f04f 0900 	mov.w	r9, #0
			break;
    1336:	e07f      	b.n	1438 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x438>
		case 's': {
			bps = (const char *)value->ptr;
    1338:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
    133c:	f1ba 0f00 	cmp.w	sl, #0
    1340:	db07      	blt.n	1352 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x352>
				len = strnlen(bps, precision);
    1342:	4651      	mov	r1, sl
    1344:	4648      	mov	r0, r9
    1346:	f007 fd7c 	bl	8e42 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    134a:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
    134e:	46d8      	mov	r8, fp
			precision = -1;

			break;
    1350:	e072      	b.n	1438 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x438>
				len = strlen(bps);
    1352:	4648      	mov	r0, r9
    1354:	f007 fd6c 	bl	8e30 <strlen>
    1358:	e7f7      	b.n	134a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x34a>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    135a:	9b04      	ldr	r3, [sp, #16]
    135c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
    1360:	46d8      	mov	r8, fp
			bpe = buf + 1;
    1362:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
    1366:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
    136a:	e065      	b.n	1438 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x438>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    136c:	f018 0f08 	tst.w	r8, #8
    1370:	d105      	bne.n	137e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x37e>
				sign = '+';
			} else if (conv->flag_space) {
    1372:	f018 0810 	ands.w	r8, r8, #16
    1376:	d004      	beq.n	1382 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x382>
				sign = ' ';
    1378:	f04f 0820 	mov.w	r8, #32
    137c:	e001      	b.n	1382 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x382>
				sign = '+';
    137e:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    1382:	9a04      	ldr	r2, [sp, #16]
    1384:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
    1386:	2b00      	cmp	r3, #0
    1388:	db02      	blt.n	1390 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x390>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    138a:	9204      	str	r2, [sp, #16]
    138c:	9305      	str	r3, [sp, #20]
    138e:	e008      	b.n	13a2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3a2>
				value->uint = (uint_value_type)-sint;
    1390:	4252      	negs	r2, r2
    1392:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1396:	9204      	str	r2, [sp, #16]
    1398:	9305      	str	r3, [sp, #20]
				sign = '-';
    139a:	f04f 082d 	mov.w	r8, #45	; 0x2d
    139e:	e000      	b.n	13a2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3a2>
		switch (conv->specifier) {
    13a0:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    13a2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    13a6:	9300      	str	r3, [sp, #0]
    13a8:	ab0a      	add	r3, sp, #40	; 0x28
    13aa:	aa06      	add	r2, sp, #24
    13ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    13b0:	f006 ffa2 	bl	82f8 <encode_uint>
    13b4:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    13b6:	f1ba 0f00 	cmp.w	sl, #0
    13ba:	db6c      	blt.n	1496 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x496>
				size_t len = bpe - bps;
    13bc:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    13c0:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    13c4:	f89d 2018 	ldrb.w	r2, [sp, #24]
    13c8:	f36f 1286 	bfc	r2, #6, #1
    13cc:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    13d0:	459a      	cmp	sl, r3
    13d2:	d963      	bls.n	149c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x49c>
					conv->pad0_value = precision - (int)len;
    13d4:	ebaa 0303 	sub.w	r3, sl, r3
    13d8:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
    13da:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    13de:	e02b      	b.n	1438 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x438>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    13e0:	9804      	ldr	r0, [sp, #16]
    13e2:	b928      	cbnz	r0, 13f0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3f0>
		char sign = 0;
    13e4:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    13e6:	f8df a180 	ldr.w	sl, [pc, #384]	; 1568 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x568>
			bps = "(nil)";
    13ea:	f1aa 0905 	sub.w	r9, sl, #5
    13ee:	e023      	b.n	1438 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x438>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    13f0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
    13f4:	9300      	str	r3, [sp, #0]
    13f6:	ab0a      	add	r3, sp, #40	; 0x28
    13f8:	aa06      	add	r2, sp, #24
    13fa:	2100      	movs	r1, #0
    13fc:	f006 ff7c 	bl	82f8 <encode_uint>
    1400:	4681      	mov	r9, r0
				conv->altform_0c = true;
    1402:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1406:	f043 0310 	orr.w	r3, r3, #16
    140a:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
    140e:	2378      	movs	r3, #120	; 0x78
    1410:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
    1414:	46d8      	mov	r8, fp
				goto prec_int_pad0;
    1416:	e7ce      	b.n	13b6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x3b6>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1418:	4622      	mov	r2, r4
    141a:	9904      	ldr	r1, [sp, #16]
    141c:	a806      	add	r0, sp, #24
    141e:	f006 ffbb 	bl	8398 <store_count>
		char sign = 0;
    1422:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
    1424:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
    1428:	f04f 0900 	mov.w	r9, #0
			}

			break;
    142c:	e004      	b.n	1438 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x438>
		switch (conv->specifier) {
    142e:	46d8      	mov	r8, fp
    1430:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    1434:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1438:	f1b9 0f00 	cmp.w	r9, #0
    143c:	f000 808d 	beq.w	155a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x55a>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1440:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
    1444:	f1b8 0f00 	cmp.w	r8, #0
    1448:	d000      	beq.n	144c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x44c>
			nj_len += 1U;
    144a:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
    144c:	f89d 201a 	ldrb.w	r2, [sp, #26]
    1450:	f012 0f10 	tst.w	r2, #16
    1454:	d025      	beq.n	14a2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4a2>
			nj_len += 2U;
    1456:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1458:	9907      	ldr	r1, [sp, #28]
    145a:	440b      	add	r3, r1
		if (conv->pad_fp) {
    145c:	f012 0f40 	tst.w	r2, #64	; 0x40
    1460:	d001      	beq.n	1466 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x466>
			nj_len += conv->pad0_pre_exp;
    1462:	9a08      	ldr	r2, [sp, #32]
    1464:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1466:	2f00      	cmp	r7, #0
    1468:	dd31      	ble.n	14ce <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4ce>
			width -= (int)nj_len;
    146a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    146c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1470:	f013 0f04 	tst.w	r3, #4
    1474:	d12b      	bne.n	14ce <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4ce>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1476:	f013 0f40 	tst.w	r3, #64	; 0x40
    147a:	d017      	beq.n	14ac <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4ac>
					if (sign != 0) {
    147c:	f1b8 0f00 	cmp.w	r8, #0
    1480:	d017      	beq.n	14b2 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4b2>
						OUTC(sign);
    1482:	4629      	mov	r1, r5
    1484:	4640      	mov	r0, r8
    1486:	47b0      	blx	r6
    1488:	2800      	cmp	r0, #0
    148a:	db6a      	blt.n	1562 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x562>
    148c:	3401      	adds	r4, #1
						sign = 0;
    148e:	46d8      	mov	r8, fp
					}
					pad = '0';
    1490:	f04f 0b30 	mov.w	fp, #48	; 0x30
    1494:	e00f      	b.n	14b6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4b6>
		const char *bpe = buf + sizeof(buf);
    1496:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    149a:	e7cd      	b.n	1438 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x438>
    149c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
    14a0:	e7ca      	b.n	1438 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x438>
		} else if (conv->altform_0) {
    14a2:	f012 0f08 	tst.w	r2, #8
    14a6:	d0d7      	beq.n	1458 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x458>
			nj_len += 1U;
    14a8:	3301      	adds	r3, #1
    14aa:	e7d5      	b.n	1458 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x458>
				char pad = ' ';
    14ac:	f04f 0b20 	mov.w	fp, #32
    14b0:	e001      	b.n	14b6 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4b6>
					pad = '0';
    14b2:	f04f 0b30 	mov.w	fp, #48	; 0x30
    14b6:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    14b8:	1e5f      	subs	r7, r3, #1
    14ba:	2b00      	cmp	r3, #0
    14bc:	dd07      	ble.n	14ce <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4ce>
					OUTC(pad);
    14be:	4629      	mov	r1, r5
    14c0:	4658      	mov	r0, fp
    14c2:	47b0      	blx	r6
    14c4:	2800      	cmp	r0, #0
    14c6:	db4c      	blt.n	1562 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x562>
    14c8:	3401      	adds	r4, #1
				while (width-- > 0) {
    14ca:	463b      	mov	r3, r7
    14cc:	e7f4      	b.n	14b8 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4b8>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    14ce:	f1b8 0f00 	cmp.w	r8, #0
    14d2:	d005      	beq.n	14e0 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4e0>
			OUTC(sign);
    14d4:	4629      	mov	r1, r5
    14d6:	4640      	mov	r0, r8
    14d8:	47b0      	blx	r6
    14da:	2800      	cmp	r0, #0
    14dc:	db41      	blt.n	1562 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x562>
    14de:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    14e0:	f89d 301a 	ldrb.w	r3, [sp, #26]
    14e4:	f3c3 1200 	ubfx	r2, r3, #4, #1
    14e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    14ec:	431a      	orrs	r2, r3
    14ee:	d005      	beq.n	14fc <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x4fc>
				OUTC('0');
    14f0:	4629      	mov	r1, r5
    14f2:	2030      	movs	r0, #48	; 0x30
    14f4:	47b0      	blx	r6
    14f6:	2800      	cmp	r0, #0
    14f8:	db33      	blt.n	1562 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x562>
    14fa:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    14fc:	f89d 301a 	ldrb.w	r3, [sp, #26]
    1500:	f013 0f10 	tst.w	r3, #16
    1504:	d006      	beq.n	1514 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x514>
				OUTC(conv->specifier);
    1506:	4629      	mov	r1, r5
    1508:	f89d 001b 	ldrb.w	r0, [sp, #27]
    150c:	47b0      	blx	r6
    150e:	2800      	cmp	r0, #0
    1510:	db27      	blt.n	1562 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x562>
    1512:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    1514:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
    1516:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    151a:	2b00      	cmp	r3, #0
    151c:	dd07      	ble.n	152e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x52e>
				OUTC('0');
    151e:	4629      	mov	r1, r5
    1520:	2030      	movs	r0, #48	; 0x30
    1522:	47b0      	blx	r6
    1524:	2800      	cmp	r0, #0
    1526:	db1c      	blt.n	1562 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x562>
    1528:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    152a:	4643      	mov	r3, r8
    152c:	e7f3      	b.n	1516 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x516>
			}

			OUTS(bps, bpe);
    152e:	4653      	mov	r3, sl
    1530:	464a      	mov	r2, r9
    1532:	4629      	mov	r1, r5
    1534:	4630      	mov	r0, r6
    1536:	f006 ff4e 	bl	83d6 <outs>
    153a:	2800      	cmp	r0, #0
    153c:	db11      	blt.n	1562 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x562>
    153e:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1540:	2f00      	cmp	r7, #0
    1542:	dd07      	ble.n	1554 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x554>
			OUTC(' ');
    1544:	4629      	mov	r1, r5
    1546:	2020      	movs	r0, #32
    1548:	47b0      	blx	r6
    154a:	2800      	cmp	r0, #0
    154c:	db09      	blt.n	1562 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x562>
    154e:	3401      	adds	r4, #1
			--width;
    1550:	3f01      	subs	r7, #1
    1552:	e7f5      	b.n	1540 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x540>
		fp = extract_conversion(conv, sp);
    1554:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1558:	e544      	b.n	fe4 <z_cbvprintf_impl+0x10>
    155a:	f8dd 9008 	ldr.w	r9, [sp, #8]
    155e:	e541      	b.n	fe4 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
    1560:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1562:	b011      	add	sp, #68	; 0x44
    1564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1568:	0000a889 	.word	0x0000a889

0000156c <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    156c:	b508      	push	{r3, lr}
    156e:	f04f 0220 	mov.w	r2, #32
    1572:	f3ef 8311 	mrs	r3, BASEPRI
    1576:	f382 8812 	msr	BASEPRI_MAX, r2
    157a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    157e:	f007 fbd2 	bl	8d26 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    1582:	4803      	ldr	r0, [pc, #12]	; (1590 <sys_reboot+0x24>)
    1584:	f006 fb6c 	bl	7c60 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1588:	f001 f8fc 	bl	2784 <arch_cpu_idle>
    158c:	e7fc      	b.n	1588 <sys_reboot+0x1c>
    158e:	bf00      	nop
    1590:	0000a88c 	.word	0x0000a88c

00001594 <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1594:	b168      	cbz	r0, 15b2 <nrfx_coredep_delay_us+0x1e>
{
    1596:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1598:	4a06      	ldr	r2, [pc, #24]	; (15b4 <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    159a:	4b07      	ldr	r3, [pc, #28]	; (15b8 <nrfx_coredep_delay_us+0x24>)
    159c:	681b      	ldr	r3, [r3, #0]
    159e:	4907      	ldr	r1, [pc, #28]	; (15bc <nrfx_coredep_delay_us+0x28>)
    15a0:	fba1 1303 	umull	r1, r3, r1, r3
    15a4:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
    15a6:	fb00 f003 	mul.w	r0, r0, r3
    15aa:	f042 0301 	orr.w	r3, r2, #1
    15ae:	4798      	blx	r3
}
    15b0:	bd08      	pop	{r3, pc}
    15b2:	4770      	bx	lr
    15b4:	0000a6b0 	.word	0x0000a6b0
    15b8:	20000054 	.word	0x20000054
    15bc:	431bde83 	.word	0x431bde83

000015c0 <nordicsemi_nrf53_init>:
    15c0:	f04f 0320 	mov.w	r3, #32
    15c4:	f3ef 8c11 	mrs	ip, BASEPRI
    15c8:	f383 8812 	msr	BASEPRI_MAX, r3
    15cc:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
    15d0:	2101      	movs	r1, #1
    15d2:	4b12      	ldr	r3, [pc, #72]	; (161c <nordicsemi_nrf53_init+0x5c>)
    15d4:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
    15d8:	4a11      	ldr	r2, [pc, #68]	; (1620 <nordicsemi_nrf53_init+0x60>)
    15da:	2302      	movs	r3, #2
    15dc:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    15e0:	4810      	ldr	r0, [pc, #64]	; (1624 <nordicsemi_nrf53_init+0x64>)
    15e2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    15e6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    15ea:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    15ee:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
    15f2:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
    15f6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
    15fa:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    15fe:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
    1602:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
    1606:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
    160a:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
    160e:	f38c 8811 	msr	BASEPRI, ip
    1612:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1616:	2000      	movs	r0, #0
    1618:	4770      	bx	lr
    161a:	bf00      	nop
    161c:	50001000 	.word	0x50001000
    1620:	50004000 	.word	0x50004000
    1624:	50842500 	.word	0x50842500

00001628 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    1628:	2806      	cmp	r0, #6
    162a:	d000      	beq.n	162e <pm_state_set+0x6>
    162c:	4770      	bx	lr
{
    162e:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
    1630:	4801      	ldr	r0, [pc, #4]	; (1638 <pm_state_set+0x10>)
    1632:	f007 f96e 	bl	8912 <nrf_regulators_system_off>
    1636:	bf00      	nop
    1638:	50004000 	.word	0x50004000

0000163c <mbox_rx_init>:

	remote_callback(user_data);
}

static int mbox_rx_init(void *user_data)
{
    163c:	b500      	push	{lr}
    163e:	b083      	sub	sp, #12
    1640:	4602      	mov	r2, r0
 * @param ch_id Channel ID
 */
static inline void mbox_init_channel(struct mbox_channel *channel, const struct device *dev,
				     uint32_t ch_id)
{
	channel->dev = dev;
    1642:	4b08      	ldr	r3, [pc, #32]	; (1664 <mbox_rx_init+0x28>)
    1644:	9300      	str	r3, [sp, #0]
	channel->id = ch_id;
    1646:	2308      	movs	r3, #8
    1648:	9301      	str	r3, [sp, #4]
		return -ENODEV;
	}

	mbox_init_channel(&channel, dev, CONFIG_NRF53_SYNC_RTC_IPM_IN);

	err = mbox_register_callback(&channel, mbox_callback, user_data);
    164a:	4907      	ldr	r1, [pc, #28]	; (1668 <mbox_rx_init+0x2c>)
    164c:	4668      	mov	r0, sp
    164e:	f007 f96d 	bl	892c <mbox_register_callback>
	if (err < 0) {
    1652:	2800      	cmp	r0, #0
    1654:	db03      	blt.n	165e <mbox_rx_init+0x22>
		union { uintptr_t x; bool val; } parm1 = { .val = enable };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_MBOX_SET_ENABLED);
	}
#endif
	compiler_barrier();
	return z_impl_mbox_set_enabled(channel, enable);
    1656:	2101      	movs	r1, #1
    1658:	4668      	mov	r0, sp
    165a:	f007 f976 	bl	894a <z_impl_mbox_set_enabled>
		return err;
	}

	return mbox_set_enabled(&channel, true);
}
    165e:	b003      	add	sp, #12
    1660:	f85d fb04 	ldr.w	pc, [sp], #4
    1664:	0000a368 	.word	0x0000a368
    1668:	00008979 	.word	0x00008979

0000166c <free_resources>:
{
    166c:	b510      	push	{r4, lr}
	nrfx_gppi_channels_disable(BIT(channels.ch.ppi));
    166e:	b2c4      	uxtb	r4, r0
    1670:	2301      	movs	r3, #1
    1672:	40a3      	lsls	r3, r4
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_dppi_channels_disable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    1674:	4a05      	ldr	r2, [pc, #20]	; (168c <free_resources+0x20>)
    1676:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	z_nrf_rtc_timer_chan_free(channels.ch.rtc);
    167a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    167e:	f003 fb13 	bl	4ca8 <z_nrf_rtc_timer_chan_free>
	err = nrfx_dppi_channel_free(channels.ch.ppi);
    1682:	4620      	mov	r0, r4
    1684:	f004 f85e 	bl	5744 <nrfx_dppi_channel_free>
}
    1688:	bd10      	pop	{r4, pc}
    168a:	bf00      	nop
    168c:	50017000 	.word	0x50017000

00001690 <ppi_rtc_to_ipc>:
{
    1690:	b538      	push	{r3, r4, r5, lr}
    1692:	4604      	mov	r4, r0
    1694:	460d      	mov	r5, r1
	uint32_t evt_addr = z_nrf_rtc_timer_compare_evt_address_get(channels.ch.rtc);
    1696:	f3c0 2007 	ubfx	r0, r0, #8, #8
    169a:	f003 f9b5 	bl	4a08 <z_nrf_rtc_timer_compare_evt_address_get>
	nrf_ipc_task_t ipc_task = nrf_ipc_send_task_get(channels.ch.ipc_out);
    169e:	f3c4 4307 	ubfx	r3, r4, #16, #8
}

NRF_STATIC_INLINE nrf_ipc_task_t nrf_ipc_send_task_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    16a2:	009b      	lsls	r3, r3, #2
    16a4:	b2db      	uxtb	r3, r3
	if (setup) {
    16a6:	b13d      	cbz	r5, 16b8 <ppi_rtc_to_ipc+0x28>
		nrf_ipc_subscribe_set(NRF_IPC, ipc_task, channels.ch.ppi);
    16a8:	b2e4      	uxtb	r4, r4
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    16aa:	4a06      	ldr	r2, [pc, #24]	; (16c4 <ppi_rtc_to_ipc+0x34>)
            ((uint32_t)channel | IPC_SUBSCRIBE_SEND_EN_Msk);
    16ac:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) =
    16b0:	50d4      	str	r4, [r2, r3]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    16b2:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
}
    16b6:	bd38      	pop	{r3, r4, r5, pc}

__STATIC_INLINE void nrfx_gppi_event_endpoint_clear(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    (void)channel;
    *((volatile uint32_t *)(eep + 0x80uL)) = 0;
    16b8:	2100      	movs	r1, #0
    16ba:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) task + 0x80uL)) = 0;
    16be:	4a01      	ldr	r2, [pc, #4]	; (16c4 <ppi_rtc_to_ipc+0x34>)
    16c0:	50d1      	str	r1, [r2, r3]
    16c2:	e7f8      	b.n	16b6 <ppi_rtc_to_ipc+0x26>
    16c4:	5002a080 	.word	0x5002a080

000016c8 <ppi_ipc_to_rtc>:
{
    16c8:	b570      	push	{r4, r5, r6, lr}
    16ca:	4605      	mov	r5, r0
    16cc:	460e      	mov	r6, r1
	nrf_ipc_event_t ipc_evt = nrf_ipc_receive_event_get(channels.ch.ipc_in);
    16ce:	0e04      	lsrs	r4, r0, #24
}

NRF_STATIC_INLINE nrf_ipc_event_t nrf_ipc_receive_event_get(uint8_t index)
{
    NRFX_ASSERT(index < IPC_CH_NUM);
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    16d0:	00a4      	lsls	r4, r4, #2
    16d2:	f504 7480 	add.w	r4, r4, #256	; 0x100
	uint32_t task_addr = z_nrf_rtc_timer_capture_task_address_get(channels.ch.rtc);
    16d6:	f3c0 2007 	ubfx	r0, r0, #8, #8
    16da:	f008 f853 	bl	9784 <z_nrf_rtc_timer_capture_task_address_get>
	if (setup) {
    16de:	b146      	cbz	r6, 16f2 <ppi_ipc_to_rtc+0x2a>
		nrfx_gppi_task_endpoint_setup(channels.ch.ppi, task_addr);
    16e0:	b2ed      	uxtb	r5, r5
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    16e2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    16e6:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) =
    16ea:	b2a4      	uxth	r4, r4
    16ec:	4b04      	ldr	r3, [pc, #16]	; (1700 <ppi_ipc_to_rtc+0x38>)
    16ee:	511d      	str	r5, [r3, r4]
}
    16f0:	bd70      	pop	{r4, r5, r6, pc}

__STATIC_INLINE void nrfx_gppi_task_endpoint_clear(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    (void)channel;
    *((volatile uint32_t *)(tep + 0x80uL)) = 0;
    16f2:	2200      	movs	r2, #0
    16f4:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    *((volatile uint32_t *) ((uint8_t *) p_reg + (uint32_t) event + 0x80uL)) = 0;
    16f8:	b2a4      	uxth	r4, r4
    16fa:	4b01      	ldr	r3, [pc, #4]	; (1700 <ppi_ipc_to_rtc+0x38>)
    16fc:	511a      	str	r2, [r3, r4]
    16fe:	e7f7      	b.n	16f0 <ppi_ipc_to_rtc+0x28>
    1700:	5002a080 	.word	0x5002a080

00001704 <remote_callback>:
{
    1704:	b570      	push	{r4, r5, r6, lr}
    1706:	b082      	sub	sp, #8
    1708:	4604      	mov	r4, r0
	cc = z_nrf_rtc_timer_compare_read(channels.ch.rtc);
    170a:	f3c0 2607 	ubfx	r6, r0, #8, #8
    170e:	4630      	mov	r0, r6
    1710:	f003 f982 	bl	4a18 <z_nrf_rtc_timer_compare_read>
    1714:	4605      	mov	r5, r0
	ppi_ipc_to_rtc(channels, false);
    1716:	2100      	movs	r1, #0
    1718:	4620      	mov	r0, r4
    171a:	f7ff ffd5 	bl	16c8 <ppi_ipc_to_rtc>
		ppi_rtc_to_ipc(channels, true);
    171e:	2101      	movs	r1, #1
    1720:	4620      	mov	r0, r4
    1722:	f7ff ffb5 	bl	1690 <ppi_rtc_to_ipc>
		z_nrf_rtc_timer_set(channels.ch.rtc, cc + cc + RTC_SYNC_ARBITRARY_DELAY,
    1726:	f105 0232 	add.w	r2, r5, #50	; 0x32
    172a:	9401      	str	r4, [sp, #4]
    172c:	4b04      	ldr	r3, [pc, #16]	; (1740 <remote_callback+0x3c>)
    172e:	9300      	str	r3, [sp, #0]
    1730:	0052      	lsls	r2, r2, #1
    1732:	2300      	movs	r3, #0
    1734:	4630      	mov	r0, r6
    1736:	f008 f849 	bl	97cc <z_nrf_rtc_timer_set>
}
    173a:	b002      	add	sp, #8
    173c:	bd70      	pop	{r4, r5, r6, pc}
    173e:	bf00      	nop
    1740:	00008965 	.word	0x00008965

00001744 <sync_rtc_setup>:

/* Setup RTC synchronization. */
static int sync_rtc_setup(const struct device *unused)
{
    1744:	b5f0      	push	{r4, r5, r6, r7, lr}
    1746:	b083      	sub	sp, #12
    1748:	af00      	add	r7, sp, #0
	nrfx_err_t err;
	union rtc_sync_channels channels;
	int32_t sync_rtc_ch;
	int rv;

	err = nrfx_dppi_channel_alloc(&channels.ch.ppi);
    174a:	1d38      	adds	r0, r7, #4
    174c:	f003 fff2 	bl	5734 <nrfx_dppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    1750:	4b31      	ldr	r3, [pc, #196]	; (1818 <sync_rtc_setup+0xd4>)
    1752:	4298      	cmp	r0, r3
    1754:	d03b      	beq.n	17ce <sync_rtc_setup+0x8a>
		rv = -ENODEV;
    1756:	f06f 0412 	mvn.w	r4, #18
		irq_unlock(key);
	}

bail:
	if (rv != 0) {
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    175a:	466d      	mov	r5, sp
    175c:	b088      	sub	sp, #32
    175e:	466b      	mov	r3, sp
    1760:	f113 0210 	adds.w	r2, r3, #16
    1764:	d052      	beq.n	180c <sync_rtc_setup+0xc8>
    1766:	210c      	movs	r1, #12
    1768:	b13a      	cbz	r2, 177a <sync_rtc_setup+0x36>
    176a:	4608      	mov	r0, r1
    176c:	2904      	cmp	r1, #4
    176e:	dd01      	ble.n	1774 <sync_rtc_setup+0x30>
    1770:	4e2a      	ldr	r6, [pc, #168]	; (181c <sync_rtc_setup+0xd8>)
    1772:	615e      	str	r6, [r3, #20]
    1774:	2808      	cmp	r0, #8
    1776:	dd00      	ble.n	177a <sync_rtc_setup+0x36>
    1778:	619c      	str	r4, [r3, #24]
    177a:	290b      	cmp	r1, #11
    177c:	dd49      	ble.n	1812 <sync_rtc_setup+0xce>
    177e:	f04f 0c0c 	mov.w	ip, #12
    1782:	b13a      	cbz	r2, 1794 <sync_rtc_setup+0x50>
    1784:	2103      	movs	r1, #3
    1786:	7039      	strb	r1, [r7, #0]
    1788:	2100      	movs	r1, #0
    178a:	7079      	strb	r1, [r7, #1]
    178c:	70b9      	strb	r1, [r7, #2]
    178e:	70f9      	strb	r1, [r7, #3]
    1790:	6838      	ldr	r0, [r7, #0]
    1792:	6118      	str	r0, [r3, #16]
    1794:	2100      	movs	r1, #0
    1796:	f36f 0100 	bfc	r1, #0, #1
    179a:	f36f 0141 	bfc	r1, #1, #1
    179e:	f36f 0182 	bfc	r1, #2, #1
    17a2:	f36f 01c5 	bfc	r1, #3, #3
    17a6:	2301      	movs	r3, #1
    17a8:	f363 1188 	bfi	r1, r3, #6, #3
    17ac:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    17b0:	f36c 2152 	bfi	r1, ip, #9, #10
    17b4:	f36f 41de 	bfc	r1, #19, #12
    17b8:	f36f 71df 	bfc	r1, #31, #1
    17bc:	2300      	movs	r3, #0
    17be:	4818      	ldr	r0, [pc, #96]	; (1820 <sync_rtc_setup+0xdc>)
    17c0:	f007 f964 	bl	8a8c <z_impl_z_log_msg_static_create>
    17c4:	46ad      	mov	sp, r5
	}

	return rv;
}
    17c6:	4620      	mov	r0, r4
    17c8:	370c      	adds	r7, #12
    17ca:	46bd      	mov	sp, r7
    17cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sync_rtc_ch = z_nrf_rtc_timer_chan_alloc();
    17ce:	f003 fa43 	bl	4c58 <z_nrf_rtc_timer_chan_alloc>
	if (sync_rtc_ch < 0) {
    17d2:	1e04      	subs	r4, r0, #0
    17d4:	db16      	blt.n	1804 <sync_rtc_setup+0xc0>
	channels.ch.rtc = (uint8_t)sync_rtc_ch;
    17d6:	717c      	strb	r4, [r7, #5]
	channels.ch.ipc_out = CONFIG_NRF53_SYNC_RTC_IPM_OUT;
    17d8:	2307      	movs	r3, #7
    17da:	71bb      	strb	r3, [r7, #6]
	channels.ch.ipc_in = CONFIG_NRF53_SYNC_RTC_IPM_IN;
    17dc:	2308      	movs	r3, #8
    17de:	71fb      	strb	r3, [r7, #7]
	rv = mbox_rx_init((void *)channels.raw);
    17e0:	6878      	ldr	r0, [r7, #4]
    17e2:	f7ff ff2b 	bl	163c <mbox_rx_init>
	if (rv < 0) {
    17e6:	1e04      	subs	r4, r0, #0
    17e8:	dbb7      	blt.n	175a <sync_rtc_setup+0x16>
	nrfx_gppi_channels_enable(BIT(channels.ch.ppi));
    17ea:	793b      	ldrb	r3, [r7, #4]
    17ec:	2101      	movs	r1, #1
    17ee:	fa01 f303 	lsl.w	r3, r1, r3
    p_reg->CHENSET = mask;
    17f2:	4a0c      	ldr	r2, [pc, #48]	; (1824 <sync_rtc_setup+0xe0>)
    17f4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		ppi_ipc_to_rtc(channels, true);
    17f8:	6878      	ldr	r0, [r7, #4]
    17fa:	f7ff ff65 	bl	16c8 <ppi_ipc_to_rtc>
	if (rv != 0) {
    17fe:	2c00      	cmp	r4, #0
    1800:	d0e1      	beq.n	17c6 <sync_rtc_setup+0x82>
    1802:	e7aa      	b.n	175a <sync_rtc_setup+0x16>
		nrfx_dppi_channel_free(channels.ch.ppi);
    1804:	7938      	ldrb	r0, [r7, #4]
    1806:	f003 ff9d 	bl	5744 <nrfx_dppi_channel_free>
		goto bail;
    180a:	e7f8      	b.n	17fe <sync_rtc_setup+0xba>
		LOG_ERR("Failed synchronized RTC setup (err: %d)", rv);
    180c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    1810:	e7aa      	b.n	1768 <sync_rtc_setup+0x24>
    1812:	f06f 0c1b 	mvn.w	ip, #27
    1816:	e7b4      	b.n	1782 <sync_rtc_setup+0x3e>
    1818:	0bad0000 	.word	0x0bad0000
    181c:	0000a8bc 	.word	0x0000a8bc
    1820:	0000a628 	.word	0x0000a628
    1824:	50017000 	.word	0x50017000

00001828 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1828:	f003 be1c 	b.w	5464 <SystemInit>

0000182c <msg_process>:
		return true;
	}
}

static void msg_process(union log_msg_generic *msg)
{
    182c:	b538      	push	{r3, r4, r5, lr}
    182e:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1830:	4c0b      	ldr	r4, [pc, #44]	; (1860 <msg_process+0x34>)
    1832:	e000      	b.n	1836 <msg_process+0xa>
    1834:	3410      	adds	r4, #16
    1836:	4b0b      	ldr	r3, [pc, #44]	; (1864 <msg_process+0x38>)
    1838:	429c      	cmp	r4, r3
    183a:	d20f      	bcs.n	185c <msg_process+0x30>
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    183c:	6863      	ldr	r3, [r4, #4]
    183e:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend) &&
    1840:	2b00      	cmp	r3, #0
    1842:	d0f7      	beq.n	1834 <msg_process+0x8>
		    msg_filter_check(backend, msg)) {
    1844:	4629      	mov	r1, r5
    1846:	4620      	mov	r0, r4
    1848:	f007 f8b7 	bl	89ba <msg_filter_check>
		if (log_backend_is_active(backend) &&
    184c:	2800      	cmp	r0, #0
    184e:	d0f1      	beq.n	1834 <msg_process+0x8>
	backend->api->process(backend, msg);
    1850:	6823      	ldr	r3, [r4, #0]
    1852:	681b      	ldr	r3, [r3, #0]
    1854:	4629      	mov	r1, r5
    1856:	4620      	mov	r0, r4
    1858:	4798      	blx	r3
}
    185a:	e7eb      	b.n	1834 <msg_process+0x8>
			log_backend_msg_process(backend, msg);
		}
	}
}
    185c:	bd38      	pop	{r3, r4, r5, pc}
    185e:	bf00      	nop
    1860:	0000a638 	.word	0x0000a638
    1864:	0000a648 	.word	0x0000a648

00001868 <log_backend_notify_all>:
	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_backend_notify_all(enum log_backend_evt event,
				   union log_backend_evt_arg *arg)
{
    1868:	b570      	push	{r4, r5, r6, lr}
    186a:	4606      	mov	r6, r0
    186c:	460d      	mov	r5, r1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    186e:	4c08      	ldr	r4, [pc, #32]	; (1890 <log_backend_notify_all+0x28>)
    1870:	e004      	b.n	187c <log_backend_notify_all+0x14>
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
		backend->api->notify(backend, event, arg);
    1872:	462a      	mov	r2, r5
    1874:	4631      	mov	r1, r6
    1876:	4620      	mov	r0, r4
    1878:	4798      	blx	r3
    187a:	3410      	adds	r4, #16
    187c:	4b05      	ldr	r3, [pc, #20]	; (1894 <log_backend_notify_all+0x2c>)
    187e:	429c      	cmp	r4, r3
    1880:	d204      	bcs.n	188c <log_backend_notify_all+0x24>
	if (backend->api->notify) {
    1882:	6823      	ldr	r3, [r4, #0]
    1884:	699b      	ldr	r3, [r3, #24]
    1886:	2b00      	cmp	r3, #0
    1888:	d1f3      	bne.n	1872 <log_backend_notify_all+0xa>
    188a:	e7f6      	b.n	187a <log_backend_notify_all+0x12>
		log_backend_notify(backend, event, arg);
	}
}
    188c:	bd70      	pop	{r4, r5, r6, pc}
    188e:	bf00      	nop
    1890:	0000a638 	.word	0x0000a638
    1894:	0000a648 	.word	0x0000a648

00001898 <activate_foreach_backend>:
{
    1898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    189c:	4607      	mov	r7, r0
	uint32_t mask_cpy = mask;
    189e:	4605      	mov	r5, r0
	while (mask_cpy) {
    18a0:	e00a      	b.n	18b8 <activate_foreach_backend+0x20>
			mask &= ~BIT(i);
    18a2:	ea07 0708 	and.w	r7, r7, r8
					   backend->cb->ctx,
    18a6:	4b14      	ldr	r3, [pc, #80]	; (18f8 <activate_foreach_backend+0x60>)
    18a8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    18ac:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    18ae:	2204      	movs	r2, #4
    18b0:	6819      	ldr	r1, [r3, #0]
    18b2:	4620      	mov	r0, r4
    18b4:	f000 fa8c 	bl	1dd0 <log_backend_enable>
	while (mask_cpy) {
    18b8:	b1d5      	cbz	r5, 18f0 <activate_foreach_backend+0x58>
		uint32_t i = __builtin_ctz(mask_cpy);
    18ba:	fa95 f6a5 	rbit	r6, r5
    18be:	fab6 f686 	clz	r6, r6
	STRUCT_SECTION_GET(log_backend, idx, &backend);
    18c2:	4c0d      	ldr	r4, [pc, #52]	; (18f8 <activate_foreach_backend+0x60>)
    18c4:	eb04 1406 	add.w	r4, r4, r6, lsl #4
		mask_cpy &= ~BIT(i);
    18c8:	2301      	movs	r3, #1
    18ca:	40b3      	lsls	r3, r6
    18cc:	ea6f 0803 	mvn.w	r8, r3
    18d0:	ea25 0503 	bic.w	r5, r5, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    18d4:	7b23      	ldrb	r3, [r4, #12]
    18d6:	2b00      	cmp	r3, #0
    18d8:	d0ee      	beq.n	18b8 <activate_foreach_backend+0x20>
	if (backend->api->is_ready != NULL) {
    18da:	0133      	lsls	r3, r6, #4
    18dc:	4a06      	ldr	r2, [pc, #24]	; (18f8 <activate_foreach_backend+0x60>)
    18de:	58d3      	ldr	r3, [r2, r3]
    18e0:	691b      	ldr	r3, [r3, #16]
    18e2:	2b00      	cmp	r3, #0
    18e4:	d0dd      	beq.n	18a2 <activate_foreach_backend+0xa>
		return backend->api->is_ready(backend);
    18e6:	4620      	mov	r0, r4
    18e8:	4798      	blx	r3
    18ea:	2800      	cmp	r0, #0
    18ec:	d1e4      	bne.n	18b8 <activate_foreach_backend+0x20>
    18ee:	e7d8      	b.n	18a2 <activate_foreach_backend+0xa>
}
    18f0:	4638      	mov	r0, r7
    18f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    18f6:	bf00      	nop
    18f8:	0000a638 	.word	0x0000a638

000018fc <z_log_init>:
{
    18fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1900:	4680      	mov	r8, r0
    1902:	460f      	mov	r7, r1
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1904:	4b1e      	ldr	r3, [pc, #120]	; (1980 <z_log_init+0x84>)
    1906:	e8d3 5fef 	ldaex	r5, [r3]
    190a:	1c6a      	adds	r2, r5, #1
    190c:	e8c3 2fe1 	stlex	r1, r2, [r3]
    1910:	2900      	cmp	r1, #0
    1912:	d1f8      	bne.n	1906 <z_log_init+0xa>
	if (atomic_inc(&initialized) != 0) {
    1914:	2d00      	cmp	r5, #0
    1916:	d12f      	bne.n	1978 <z_log_init+0x7c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1918:	4c1a      	ldr	r4, [pc, #104]	; (1984 <z_log_init+0x88>)
	int i = 0;
    191a:	2600      	movs	r6, #0
    191c:	e007      	b.n	192e <z_log_init+0x32>
						   backend->cb->ctx,
    191e:	6863      	ldr	r3, [r4, #4]
				log_backend_enable(backend,
    1920:	2204      	movs	r2, #4
    1922:	6819      	ldr	r1, [r3, #0]
    1924:	4620      	mov	r0, r4
    1926:	f000 fa53 	bl	1dd0 <log_backend_enable>
			i++;
    192a:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    192c:	3410      	adds	r4, #16
    192e:	4b16      	ldr	r3, [pc, #88]	; (1988 <z_log_init+0x8c>)
    1930:	429c      	cmp	r4, r3
    1932:	d213      	bcs.n	195c <z_log_init+0x60>
		if (backend->autostart) {
    1934:	7b23      	ldrb	r3, [r4, #12]
    1936:	2b00      	cmp	r3, #0
    1938:	d0f8      	beq.n	192c <z_log_init+0x30>
	if (backend->api->init) {
    193a:	6823      	ldr	r3, [r4, #0]
    193c:	68db      	ldr	r3, [r3, #12]
    193e:	b10b      	cbz	r3, 1944 <z_log_init+0x48>
		backend->api->init(backend);
    1940:	4620      	mov	r0, r4
    1942:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    1944:	6823      	ldr	r3, [r4, #0]
    1946:	691b      	ldr	r3, [r3, #16]
    1948:	2b00      	cmp	r3, #0
    194a:	d0e8      	beq.n	191e <z_log_init+0x22>
		return backend->api->is_ready(backend);
    194c:	4620      	mov	r0, r4
    194e:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    1950:	2800      	cmp	r0, #0
    1952:	d0e4      	beq.n	191e <z_log_init+0x22>
				mask |= BIT(i);
    1954:	2301      	movs	r3, #1
    1956:	40b3      	lsls	r3, r6
    1958:	431d      	orrs	r5, r3
    195a:	e7e6      	b.n	192a <z_log_init+0x2e>
	if (blocking) {
    195c:	f1b8 0f00 	cmp.w	r8, #0
    1960:	d00b      	beq.n	197a <z_log_init+0x7e>
		while (mask) {
    1962:	b155      	cbz	r5, 197a <z_log_init+0x7e>
			mask = activate_foreach_backend(mask);
    1964:	4628      	mov	r0, r5
    1966:	f7ff ff97 	bl	1898 <activate_foreach_backend>
    196a:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    196c:	2f00      	cmp	r7, #0
    196e:	d0f8      	beq.n	1962 <z_log_init+0x66>
				k_msleep(10);
    1970:	200a      	movs	r0, #10
    1972:	f007 f828 	bl	89c6 <k_msleep>
    1976:	e7f4      	b.n	1962 <z_log_init+0x66>
		return 0;
    1978:	2500      	movs	r5, #0
}
    197a:	4628      	mov	r0, r5
    197c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1980:	20000890 	.word	0x20000890
    1984:	0000a638 	.word	0x0000a638
    1988:	0000a648 	.word	0x0000a648

0000198c <thread_set>:
{
    198c:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    198e:	4b06      	ldr	r3, [pc, #24]	; (19a8 <thread_set+0x1c>)
    1990:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1992:	b118      	cbz	r0, 199c <thread_set+0x10>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1994:	4b05      	ldr	r3, [pc, #20]	; (19ac <thread_set+0x20>)
    1996:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    1998:	2b09      	cmp	r3, #9
    199a:	dc00      	bgt.n	199e <thread_set+0x12>
}
    199c:	bd08      	pop	{r3, pc}
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    199e:	4804      	ldr	r0, [pc, #16]	; (19b0 <thread_set+0x24>)
    19a0:	f005 f846 	bl	6a30 <z_impl_k_sem_give>
}
    19a4:	e7fa      	b.n	199c <thread_set+0x10>
    19a6:	bf00      	nop
    19a8:	20000884 	.word	0x20000884
    19ac:	2000088c 	.word	0x2000088c
    19b0:	200001d8 	.word	0x200001d8

000019b4 <log_process_thread_timer_expiry_fn>:

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    19b4:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    19b6:	4802      	ldr	r0, [pc, #8]	; (19c0 <log_process_thread_timer_expiry_fn+0xc>)
    19b8:	f005 f83a 	bl	6a30 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    19bc:	bd08      	pop	{r3, pc}
    19be:	bf00      	nop
    19c0:	200001d8 	.word	0x200001d8

000019c4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    19c4:	b530      	push	{r4, r5, lr}
    19c6:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    19c8:	2200      	movs	r2, #0
    19ca:	490f      	ldr	r1, [pc, #60]	; (1a08 <enable_logger+0x44>)
    19cc:	480f      	ldr	r0, [pc, #60]	; (1a0c <enable_logger+0x48>)
    19ce:	f008 fc43 	bl	a258 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    19d2:	4d0f      	ldr	r5, [pc, #60]	; (1a10 <enable_logger+0x4c>)
    19d4:	2200      	movs	r2, #0
    19d6:	2300      	movs	r3, #0
    19d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    19dc:	2400      	movs	r4, #0
    19de:	9404      	str	r4, [sp, #16]
    19e0:	230e      	movs	r3, #14
    19e2:	9303      	str	r3, [sp, #12]
    19e4:	9402      	str	r4, [sp, #8]
    19e6:	9401      	str	r4, [sp, #4]
    19e8:	9400      	str	r4, [sp, #0]
    19ea:	4b0a      	ldr	r3, [pc, #40]	; (1a14 <enable_logger+0x50>)
    19ec:	f44f 7240 	mov.w	r2, #768	; 0x300
    19f0:	4909      	ldr	r1, [pc, #36]	; (1a18 <enable_logger+0x54>)
    19f2:	4628      	mov	r0, r5
    19f4:	f008 fa14 	bl	9e20 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    19f8:	4908      	ldr	r1, [pc, #32]	; (1a1c <enable_logger+0x58>)
    19fa:	4628      	mov	r0, r5
    19fc:	f004 fe6a 	bl	66d4 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    1a00:	4620      	mov	r0, r4
    1a02:	b009      	add	sp, #36	; 0x24
    1a04:	bd30      	pop	{r4, r5, pc}
    1a06:	bf00      	nop
    1a08:	000019b5 	.word	0x000019b5
    1a0c:	200006a0 	.word	0x200006a0
    1a10:	200001e8 	.word	0x200001e8
    1a14:	00001d31 	.word	0x00001d31
    1a18:	200011a8 	.word	0x200011a8
    1a1c:	0000a8f0 	.word	0x0000a8f0

00001a20 <log_format_func_t_get>:
}
    1a20:	4b01      	ldr	r3, [pc, #4]	; (1a28 <log_format_func_t_get+0x8>)
    1a22:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1a26:	4770      	bx	lr
    1a28:	0000a90c 	.word	0x0000a90c

00001a2c <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    1a2c:	b148      	cbz	r0, 1a42 <log_set_timestamp_func+0x16>
{
    1a2e:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    1a30:	4a05      	ldr	r2, [pc, #20]	; (1a48 <log_set_timestamp_func+0x1c>)
    1a32:	6010      	str	r0, [r2, #0]
	timestamp_freq = freq;
    1a34:	4b05      	ldr	r3, [pc, #20]	; (1a4c <log_set_timestamp_func+0x20>)
    1a36:	6019      	str	r1, [r3, #0]
		log_output_timestamp_freq_set(freq);
    1a38:	4608      	mov	r0, r1
    1a3a:	f000 fbeb 	bl	2214 <log_output_timestamp_freq_set>
	return 0;
    1a3e:	2000      	movs	r0, #0
}
    1a40:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1a42:	f06f 0015 	mvn.w	r0, #21
}
    1a46:	4770      	bx	lr
    1a48:	20000004 	.word	0x20000004
    1a4c:	20000880 	.word	0x20000880

00001a50 <z_log_notify_backend_enabled>:
{
    1a50:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1a52:	4b05      	ldr	r3, [pc, #20]	; (1a68 <z_log_notify_backend_enabled+0x18>)
    1a54:	781b      	ldrb	r3, [r3, #0]
    1a56:	b11b      	cbz	r3, 1a60 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    1a58:	4b03      	ldr	r3, [pc, #12]	; (1a68 <z_log_notify_backend_enabled+0x18>)
    1a5a:	2201      	movs	r2, #1
    1a5c:	701a      	strb	r2, [r3, #0]
}
    1a5e:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    1a60:	4802      	ldr	r0, [pc, #8]	; (1a6c <z_log_notify_backend_enabled+0x1c>)
    1a62:	f004 ffe5 	bl	6a30 <z_impl_k_sem_give>
}
    1a66:	e7f7      	b.n	1a58 <z_log_notify_backend_enabled+0x8>
    1a68:	2000119c 	.word	0x2000119c
    1a6c:	200001d8 	.word	0x200001d8

00001a70 <z_log_dropped>:
    1a70:	4b09      	ldr	r3, [pc, #36]	; (1a98 <z_log_dropped+0x28>)
    1a72:	e8d3 1fef 	ldaex	r1, [r3]
    1a76:	3101      	adds	r1, #1
    1a78:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1a7c:	2a00      	cmp	r2, #0
    1a7e:	d1f8      	bne.n	1a72 <z_log_dropped+0x2>
	if (buffered) {
    1a80:	b900      	cbnz	r0, 1a84 <z_log_dropped+0x14>
}
    1a82:	4770      	bx	lr
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1a84:	4b05      	ldr	r3, [pc, #20]	; (1a9c <z_log_dropped+0x2c>)
    1a86:	e8d3 1fef 	ldaex	r1, [r3]
    1a8a:	3901      	subs	r1, #1
    1a8c:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1a90:	2a00      	cmp	r2, #0
    1a92:	d0f6      	beq.n	1a82 <z_log_dropped+0x12>
    1a94:	e7f7      	b.n	1a86 <z_log_dropped+0x16>
    1a96:	bf00      	nop
    1a98:	20000888 	.word	0x20000888
    1a9c:	2000088c 	.word	0x2000088c

00001aa0 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1aa0:	4b04      	ldr	r3, [pc, #16]	; (1ab4 <z_log_dropped_read_and_clear+0x14>)
}
    1aa2:	2000      	movs	r0, #0
    1aa4:	4601      	mov	r1, r0
    1aa6:	e8d3 0fef 	ldaex	r0, [r3]
    1aaa:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1aae:	2a00      	cmp	r2, #0
    1ab0:	d1f9      	bne.n	1aa6 <z_log_dropped_read_and_clear+0x6>
    1ab2:	4770      	bx	lr
    1ab4:	20000888 	.word	0x20000888

00001ab8 <dropped_notify>:
{
    1ab8:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    1aba:	f7ff fff1 	bl	1aa0 <z_log_dropped_read_and_clear>
    1abe:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1ac0:	4c09      	ldr	r4, [pc, #36]	; (1ae8 <dropped_notify+0x30>)
    1ac2:	e000      	b.n	1ac6 <dropped_notify+0xe>
    1ac4:	3410      	adds	r4, #16
    1ac6:	4b09      	ldr	r3, [pc, #36]	; (1aec <dropped_notify+0x34>)
    1ac8:	429c      	cmp	r4, r3
    1aca:	d20b      	bcs.n	1ae4 <dropped_notify+0x2c>
	return backend->cb->active;
    1acc:	6863      	ldr	r3, [r4, #4]
    1ace:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1ad0:	2b00      	cmp	r3, #0
    1ad2:	d0f7      	beq.n	1ac4 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    1ad4:	6823      	ldr	r3, [r4, #0]
    1ad6:	685b      	ldr	r3, [r3, #4]
    1ad8:	2b00      	cmp	r3, #0
    1ada:	d0f3      	beq.n	1ac4 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    1adc:	4629      	mov	r1, r5
    1ade:	4620      	mov	r0, r4
    1ae0:	4798      	blx	r3
    1ae2:	e7ef      	b.n	1ac4 <dropped_notify+0xc>
}
    1ae4:	bd38      	pop	{r3, r4, r5, pc}
    1ae6:	bf00      	nop
    1ae8:	0000a638 	.word	0x0000a638
    1aec:	0000a648 	.word	0x0000a648

00001af0 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    1af0:	4b03      	ldr	r3, [pc, #12]	; (1b00 <z_log_dropped_pending+0x10>)
    1af2:	6818      	ldr	r0, [r3, #0]
}
    1af4:	2800      	cmp	r0, #0
    1af6:	bfd4      	ite	le
    1af8:	2000      	movle	r0, #0
    1afa:	2001      	movgt	r0, #1
    1afc:	4770      	bx	lr
    1afe:	bf00      	nop
    1b00:	20000888 	.word	0x20000888

00001b04 <z_log_msg_init>:
{
    1b04:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1b06:	4c04      	ldr	r4, [pc, #16]	; (1b18 <z_log_msg_init+0x14>)
    1b08:	4904      	ldr	r1, [pc, #16]	; (1b1c <z_log_msg_init+0x18>)
    1b0a:	4620      	mov	r0, r4
    1b0c:	f006 fd6a 	bl	85e4 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    1b10:	4b03      	ldr	r3, [pc, #12]	; (1b20 <z_log_msg_init+0x1c>)
    1b12:	601c      	str	r4, [r3, #0]
}
    1b14:	bd10      	pop	{r4, pc}
    1b16:	bf00      	nop
    1b18:	2000014c 	.word	0x2000014c
    1b1c:	0000a8f8 	.word	0x0000a8f8
    1b20:	2000087c 	.word	0x2000087c

00001b24 <log_core_init>:
{
    1b24:	b508      	push	{r3, lr}
	panic_mode = false;
    1b26:	2300      	movs	r3, #0
    1b28:	4a05      	ldr	r2, [pc, #20]	; (1b40 <log_core_init+0x1c>)
    1b2a:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1b2c:	4a05      	ldr	r2, [pc, #20]	; (1b44 <log_core_init+0x20>)
    1b2e:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    1b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1b34:	4804      	ldr	r0, [pc, #16]	; (1b48 <log_core_init+0x24>)
    1b36:	f7ff ff79 	bl	1a2c <log_set_timestamp_func>
		z_log_msg_init();
    1b3a:	f7ff ffe3 	bl	1b04 <z_log_msg_init>
}
    1b3e:	bd08      	pop	{r3, pc}
    1b40:	2000119d 	.word	0x2000119d
    1b44:	20000888 	.word	0x20000888
    1b48:	000089bf 	.word	0x000089bf

00001b4c <z_log_msg_alloc>:
{
    1b4c:	b508      	push	{r3, lr}
    1b4e:	4601      	mov	r1, r0
	return msg_alloc(&log_buffer, wlen);
    1b50:	4801      	ldr	r0, [pc, #4]	; (1b58 <z_log_msg_alloc+0xc>)
    1b52:	f006 ff4e 	bl	89f2 <msg_alloc>
}
    1b56:	bd08      	pop	{r3, pc}
    1b58:	2000014c 	.word	0x2000014c

00001b5c <z_log_msg_local_claim>:
{
    1b5c:	b508      	push	{r3, lr}
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    1b5e:	4802      	ldr	r0, [pc, #8]	; (1b68 <z_log_msg_local_claim+0xc>)
    1b60:	f006 fe18 	bl	8794 <mpsc_pbuf_claim>
}
    1b64:	bd08      	pop	{r3, pc}
    1b66:	bf00      	nop
    1b68:	2000014c 	.word	0x2000014c

00001b6c <z_log_msg_free>:
{
    1b6c:	b508      	push	{r3, lr}
    1b6e:	4601      	mov	r1, r0
	msg_free(curr_log_buffer, msg);
    1b70:	4b02      	ldr	r3, [pc, #8]	; (1b7c <z_log_msg_free+0x10>)
    1b72:	6818      	ldr	r0, [r3, #0]
    1b74:	f006 ff43 	bl	89fe <msg_free>
}
    1b78:	bd08      	pop	{r3, pc}
    1b7a:	bf00      	nop
    1b7c:	2000087c 	.word	0x2000087c

00001b80 <z_log_msg_pending>:
{
    1b80:	b508      	push	{r3, lr}
		return msg_pending(&log_buffer);
    1b82:	4802      	ldr	r0, [pc, #8]	; (1b8c <z_log_msg_pending+0xc>)
    1b84:	f006 ff3f 	bl	8a06 <msg_pending>
}
    1b88:	bd08      	pop	{r3, pc}
    1b8a:	bf00      	nop
    1b8c:	2000014c 	.word	0x2000014c

00001b90 <z_impl_log_process>:
{
    1b90:	b510      	push	{r4, lr}
    1b92:	b082      	sub	sp, #8
	k_timeout_t backoff = K_NO_WAIT;
    1b94:	2200      	movs	r2, #0
    1b96:	2300      	movs	r3, #0
    1b98:	e9cd 2300 	strd	r2, r3, [sp]
	if (!backend_attached) {
    1b9c:	4b26      	ldr	r3, [pc, #152]	; (1c38 <z_impl_log_process+0xa8>)
    1b9e:	7818      	ldrb	r0, [r3, #0]
    1ba0:	b908      	cbnz	r0, 1ba6 <z_impl_log_process+0x16>
}
    1ba2:	b002      	add	sp, #8
    1ba4:	bd10      	pop	{r4, pc}
	msg = z_log_msg_claim(&backoff);
    1ba6:	4668      	mov	r0, sp
    1ba8:	f006 ff36 	bl	8a18 <z_log_msg_claim>
	if (msg) {
    1bac:	4604      	mov	r4, r0
    1bae:	b168      	cbz	r0, 1bcc <z_impl_log_process+0x3c>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1bb0:	4b22      	ldr	r3, [pc, #136]	; (1c3c <z_impl_log_process+0xac>)
    1bb2:	e8d3 1fef 	ldaex	r1, [r3]
    1bb6:	3901      	subs	r1, #1
    1bb8:	e8c3 1fe2 	stlex	r2, r1, [r3]
    1bbc:	2a00      	cmp	r2, #0
    1bbe:	d1f8      	bne.n	1bb2 <z_impl_log_process+0x22>
		msg_process(msg);
    1bc0:	4620      	mov	r0, r4
    1bc2:	f7ff fe33 	bl	182c <msg_process>
		z_log_msg_free(msg);
    1bc6:	4620      	mov	r0, r4
    1bc8:	f7ff ffd0 	bl	1b6c <z_log_msg_free>
		bool dropped_pend = z_log_dropped_pending();
    1bcc:	f7ff ff90 	bl	1af0 <z_log_dropped_pending>
		if ((dropped_pend || unordered_pend) &&
    1bd0:	b958      	cbnz	r0, 1bea <z_impl_log_process+0x5a>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    1bd2:	4a1b      	ldr	r2, [pc, #108]	; (1c40 <z_impl_log_process+0xb0>)
    1bd4:	6813      	ldr	r3, [r2, #0]
    1bd6:	6851      	ldr	r1, [r2, #4]
    1bd8:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    1bdc:	f141 0100 	adc.w	r1, r1, #0
    1be0:	6013      	str	r3, [r2, #0]
    1be2:	6051      	str	r1, [r2, #4]
	return z_log_msg_pending();
    1be4:	f7ff ffcc 	bl	1b80 <z_log_msg_pending>
    1be8:	e7db      	b.n	1ba2 <z_impl_log_process+0x12>
	return z_impl_k_uptime_ticks();
    1bea:	f008 fb1f 	bl	a22c <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    1bee:	014a      	lsls	r2, r1, #5
    1bf0:	ea42 62d0 	orr.w	r2, r2, r0, lsr #27
    1bf4:	0143      	lsls	r3, r0, #5
    1bf6:	1a1b      	subs	r3, r3, r0
    1bf8:	eb62 0201 	sbc.w	r2, r2, r1
    1bfc:	0092      	lsls	r2, r2, #2
    1bfe:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    1c02:	009b      	lsls	r3, r3, #2
    1c04:	181b      	adds	r3, r3, r0
    1c06:	eb42 0201 	adc.w	r2, r2, r1
    1c0a:	00d2      	lsls	r2, r2, #3
    1c0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    1c10:	f3c3 3310 	ubfx	r3, r3, #12, #17
    1c14:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
    1c18:	0bd2      	lsrs	r2, r2, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    1c1a:	4809      	ldr	r0, [pc, #36]	; (1c40 <z_impl_log_process+0xb0>)
    1c1c:	6801      	ldr	r1, [r0, #0]
    1c1e:	6840      	ldr	r0, [r0, #4]
    1c20:	1a5b      	subs	r3, r3, r1
    1c22:	eb62 0200 	sbc.w	r2, r2, r0
		if ((dropped_pend || unordered_pend) &&
    1c26:	f240 31e9 	movw	r1, #1001	; 0x3e9
    1c2a:	428b      	cmp	r3, r1
    1c2c:	f172 0200 	sbcs.w	r2, r2, #0
    1c30:	d3cf      	bcc.n	1bd2 <z_impl_log_process+0x42>
				dropped_notify();
    1c32:	f7ff ff41 	bl	1ab8 <dropped_notify>
			if (unordered_pend) {
    1c36:	e7cc      	b.n	1bd2 <z_impl_log_process+0x42>
    1c38:	2000119c 	.word	0x2000119c
    1c3c:	2000088c 	.word	0x2000088c
    1c40:	20000698 	.word	0x20000698

00001c44 <z_impl_log_panic>:
	if (panic_mode) {
    1c44:	4b0f      	ldr	r3, [pc, #60]	; (1c84 <z_impl_log_panic+0x40>)
    1c46:	781b      	ldrb	r3, [r3, #0]
    1c48:	b103      	cbz	r3, 1c4c <z_impl_log_panic+0x8>
    1c4a:	4770      	bx	lr
{
    1c4c:	b510      	push	{r4, lr}
	(void)z_log_init(true, false);
    1c4e:	2100      	movs	r1, #0
    1c50:	2001      	movs	r0, #1
    1c52:	f7ff fe53 	bl	18fc <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1c56:	4c0c      	ldr	r4, [pc, #48]	; (1c88 <z_impl_log_panic+0x44>)
    1c58:	e000      	b.n	1c5c <z_impl_log_panic+0x18>
    1c5a:	3410      	adds	r4, #16
    1c5c:	4b0b      	ldr	r3, [pc, #44]	; (1c8c <z_impl_log_panic+0x48>)
    1c5e:	429c      	cmp	r4, r3
    1c60:	d208      	bcs.n	1c74 <z_impl_log_panic+0x30>
	return backend->cb->active;
    1c62:	6863      	ldr	r3, [r4, #4]
    1c64:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1c66:	2b00      	cmp	r3, #0
    1c68:	d0f7      	beq.n	1c5a <z_impl_log_panic+0x16>
	backend->api->panic(backend);
    1c6a:	6823      	ldr	r3, [r4, #0]
    1c6c:	689b      	ldr	r3, [r3, #8]
    1c6e:	4620      	mov	r0, r4
    1c70:	4798      	blx	r3
}
    1c72:	e7f2      	b.n	1c5a <z_impl_log_panic+0x16>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    1c74:	f7ff ff8c 	bl	1b90 <z_impl_log_process>
		while (log_process() == true) {
    1c78:	2800      	cmp	r0, #0
    1c7a:	d1fb      	bne.n	1c74 <z_impl_log_panic+0x30>
	panic_mode = true;
    1c7c:	4b01      	ldr	r3, [pc, #4]	; (1c84 <z_impl_log_panic+0x40>)
    1c7e:	2201      	movs	r2, #1
    1c80:	701a      	strb	r2, [r3, #0]
}
    1c82:	bd10      	pop	{r4, pc}
    1c84:	2000119d 	.word	0x2000119d
    1c88:	0000a638 	.word	0x0000a638
    1c8c:	0000a648 	.word	0x0000a648

00001c90 <z_log_msg_post_finalize>:
{
    1c90:	b510      	push	{r4, lr}
    1c92:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1c94:	4b19      	ldr	r3, [pc, #100]	; (1cfc <z_log_msg_post_finalize+0x6c>)
    1c96:	e8d3 2fef 	ldaex	r2, [r3]
    1c9a:	1c51      	adds	r1, r2, #1
    1c9c:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1ca0:	2800      	cmp	r0, #0
    1ca2:	d1f8      	bne.n	1c96 <z_log_msg_post_finalize+0x6>
	if (panic_mode) {
    1ca4:	4b16      	ldr	r3, [pc, #88]	; (1d00 <z_log_msg_post_finalize+0x70>)
    1ca6:	781b      	ldrb	r3, [r3, #0]
    1ca8:	b963      	cbnz	r3, 1cc4 <z_log_msg_post_finalize+0x34>
	} else if (proc_tid != NULL) {
    1caa:	4b16      	ldr	r3, [pc, #88]	; (1d04 <z_log_msg_post_finalize+0x74>)
    1cac:	681b      	ldr	r3, [r3, #0]
    1cae:	b1bb      	cbz	r3, 1ce0 <z_log_msg_post_finalize+0x50>
		if (cnt == 0) {
    1cb0:	b1c2      	cbz	r2, 1ce4 <z_log_msg_post_finalize+0x54>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1cb2:	2a0a      	cmp	r2, #10
    1cb4:	d114      	bne.n	1ce0 <z_log_msg_post_finalize+0x50>
	z_impl_k_timer_stop(timer);
    1cb6:	4814      	ldr	r0, [pc, #80]	; (1d08 <z_log_msg_post_finalize+0x78>)
    1cb8:	f008 fada 	bl	a270 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1cbc:	4813      	ldr	r0, [pc, #76]	; (1d0c <z_log_msg_post_finalize+0x7c>)
    1cbe:	f004 feb7 	bl	6a30 <z_impl_k_sem_give>
}
    1cc2:	e00d      	b.n	1ce0 <z_log_msg_post_finalize+0x50>
	__asm__ volatile(
    1cc4:	f04f 0320 	mov.w	r3, #32
    1cc8:	f3ef 8411 	mrs	r4, BASEPRI
    1ccc:	f383 8812 	msr	BASEPRI_MAX, r3
    1cd0:	f3bf 8f6f 	isb	sy
    1cd4:	f7ff ff5c 	bl	1b90 <z_impl_log_process>
	__asm__ volatile(
    1cd8:	f384 8811 	msr	BASEPRI, r4
    1cdc:	f3bf 8f6f 	isb	sy
    1ce0:	b002      	add	sp, #8
    1ce2:	bd10      	pop	{r4, pc}
	z_impl_k_timer_start(timer, duration, period);
    1ce4:	2200      	movs	r2, #0
    1ce6:	2300      	movs	r3, #0
    1ce8:	e9cd 2300 	strd	r2, r3, [sp]
    1cec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1cf0:	2300      	movs	r3, #0
    1cf2:	4805      	ldr	r0, [pc, #20]	; (1d08 <z_log_msg_post_finalize+0x78>)
    1cf4:	f005 fcb0 	bl	7658 <z_impl_k_timer_start>
    1cf8:	e7f2      	b.n	1ce0 <z_log_msg_post_finalize+0x50>
    1cfa:	bf00      	nop
    1cfc:	2000088c 	.word	0x2000088c
    1d00:	2000119d 	.word	0x2000119d
    1d04:	20000884 	.word	0x20000884
    1d08:	200006a0 	.word	0x200006a0
    1d0c:	200001d8 	.word	0x200001d8

00001d10 <z_log_msg_commit>:
{
    1d10:	b510      	push	{r4, lr}
    1d12:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1d14:	4b04      	ldr	r3, [pc, #16]	; (1d28 <z_log_msg_commit+0x18>)
    1d16:	681b      	ldr	r3, [r3, #0]
    1d18:	4798      	blx	r3
    1d1a:	60a0      	str	r0, [r4, #8]
	msg_commit(&log_buffer, msg);
    1d1c:	4621      	mov	r1, r4
    1d1e:	4803      	ldr	r0, [pc, #12]	; (1d2c <z_log_msg_commit+0x1c>)
    1d20:	f006 fe7e 	bl	8a20 <msg_commit>
}
    1d24:	bd10      	pop	{r4, pc}
    1d26:	bf00      	nop
    1d28:	20000004 	.word	0x20000004
    1d2c:	2000014c 	.word	0x2000014c

00001d30 <log_process_thread_func>:
{
    1d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t activate_mask = z_log_init(false, false);
    1d34:	2100      	movs	r1, #0
    1d36:	4608      	mov	r0, r1
    1d38:	f7ff fde0 	bl	18fc <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1d3c:	4680      	mov	r8, r0
    1d3e:	b140      	cbz	r0, 1d52 <log_process_thread_func+0x22>
    1d40:	f240 6667 	movw	r6, #1639	; 0x667
    1d44:	2700      	movs	r7, #0
	return z_impl_z_current_get();
    1d46:	f005 fa6d 	bl	7224 <z_impl_z_current_get>
	thread_set(k_current_get());
    1d4a:	f7ff fe1f 	bl	198c <thread_set>
	bool processed_any = false;
    1d4e:	2500      	movs	r5, #0
    1d50:	e015      	b.n	1d7e <log_process_thread_func+0x4e>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1d52:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    1d56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1d5a:	e7f4      	b.n	1d46 <log_process_thread_func+0x16>
			activate_mask = activate_foreach_backend(activate_mask);
    1d5c:	4640      	mov	r0, r8
    1d5e:	f7ff fd9b 	bl	1898 <activate_foreach_backend>
			if (!activate_mask) {
    1d62:	4680      	mov	r8, r0
    1d64:	b970      	cbnz	r0, 1d84 <log_process_thread_func+0x54>
				timeout = K_FOREVER;
    1d66:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    1d6a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    1d6e:	e009      	b.n	1d84 <log_process_thread_func+0x54>
    1d70:	462c      	mov	r4, r5
	return z_impl_k_sem_take(sem, timeout);
    1d72:	4632      	mov	r2, r6
    1d74:	463b      	mov	r3, r7
    1d76:	4809      	ldr	r0, [pc, #36]	; (1d9c <log_process_thread_func+0x6c>)
    1d78:	f004 fe7e 	bl	6a78 <z_impl_k_sem_take>
{
    1d7c:	4625      	mov	r5, r4
		if (activate_mask) {
    1d7e:	f1b8 0f00 	cmp.w	r8, #0
    1d82:	d1eb      	bne.n	1d5c <log_process_thread_func+0x2c>
    1d84:	f7ff ff04 	bl	1b90 <z_impl_log_process>
		if (log_process() == false) {
    1d88:	4604      	mov	r4, r0
    1d8a:	2800      	cmp	r0, #0
    1d8c:	d1f6      	bne.n	1d7c <log_process_thread_func+0x4c>
			if (processed_any) {
    1d8e:	2d00      	cmp	r5, #0
    1d90:	d0ee      	beq.n	1d70 <log_process_thread_func+0x40>
				log_backend_notify_all(LOG_BACKEND_EVT_PROCESS_THREAD_DONE, NULL);
    1d92:	2100      	movs	r1, #0
    1d94:	4608      	mov	r0, r1
    1d96:	f7ff fd67 	bl	1868 <log_backend_notify_all>
    1d9a:	e7ea      	b.n	1d72 <log_process_thread_func+0x42>
    1d9c:	200001d8 	.word	0x200001d8

00001da0 <log_src_cnt_get>:
	if (z_log_is_local_domain(domain_id)) {
		return log_const_source_id(__log_const_end);
	}

	return link_source_count(domain_id);
}
    1da0:	4802      	ldr	r0, [pc, #8]	; (1dac <log_src_cnt_get+0xc>)
    1da2:	4b03      	ldr	r3, [pc, #12]	; (1db0 <log_src_cnt_get+0x10>)
    1da4:	1ac0      	subs	r0, r0, r3
    1da6:	08c0      	lsrs	r0, r0, #3
    1da8:	4770      	bx	lr
    1daa:	bf00      	nop
    1dac:	0000a638 	.word	0x0000a638
    1db0:	0000a5c8 	.word	0x0000a5c8

00001db4 <log_source_name_get>:

	return (const char *)cached;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
    1db4:	b510      	push	{r4, lr}
    1db6:	460c      	mov	r4, r1
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    1db8:	f7ff fff2 	bl	1da0 <log_src_cnt_get>
    1dbc:	42a0      	cmp	r0, r4
    1dbe:	d903      	bls.n	1dc8 <log_source_name_get+0x14>
			return __log_const_start[source_id].name;
    1dc0:	4b02      	ldr	r3, [pc, #8]	; (1dcc <log_source_name_get+0x18>)
    1dc2:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
			return NULL;
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    1dc6:	bd10      	pop	{r4, pc}
			return NULL;
    1dc8:	2000      	movs	r0, #0
    1dca:	e7fc      	b.n	1dc6 <log_source_name_get+0x12>
    1dcc:	0000a5c8 	.word	0x0000a5c8

00001dd0 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1dd0:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1dd2:	4b09      	ldr	r3, [pc, #36]	; (1df8 <log_backend_enable+0x28>)
    1dd4:	1ac3      	subs	r3, r0, r3
    1dd6:	111b      	asrs	r3, r3, #4
    1dd8:	3301      	adds	r3, #1
	backend->cb->id = id;
    1dda:	f8d0 c004 	ldr.w	ip, [r0, #4]
    1dde:	f88c 3004 	strb.w	r3, [ip, #4]

	log_backend_id_set(backend, id);
	backend->cb->level = level;
    1de2:	6843      	ldr	r3, [r0, #4]
    1de4:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    1de6:	6843      	ldr	r3, [r0, #4]
    1de8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1dea:	6843      	ldr	r3, [r0, #4]
    1dec:	2201      	movs	r2, #1
    1dee:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1df0:	f7ff fe2e 	bl	1a50 <z_log_notify_backend_enabled>
}
    1df4:	bd08      	pop	{r3, pc}
    1df6:	bf00      	nop
    1df8:	0000a638 	.word	0x0000a638

00001dfc <cbprintf_package_copy>:
{
    1dfc:	b500      	push	{lr}
    1dfe:	b089      	sub	sp, #36	; 0x24
	struct z_cbprintf_buf_desc buf_desc = {
    1e00:	9205      	str	r2, [sp, #20]
    1e02:	9306      	str	r3, [sp, #24]
    1e04:	2300      	movs	r3, #0
    1e06:	9307      	str	r3, [sp, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    1e08:	b162      	cbz	r2, 1e24 <cbprintf_package_copy+0x28>
    1e0a:	4a07      	ldr	r2, [pc, #28]	; (1e28 <cbprintf_package_copy+0x2c>)
    1e0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1e0e:	9302      	str	r3, [sp, #8]
    1e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1e12:	9301      	str	r3, [sp, #4]
    1e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e16:	9300      	str	r3, [sp, #0]
    1e18:	ab05      	add	r3, sp, #20
    1e1a:	f7fe fd25 	bl	868 <cbprintf_package_convert>
}
    1e1e:	b009      	add	sp, #36	; 0x24
    1e20:	f85d fb04 	ldr.w	pc, [sp], #4
	return cbprintf_package_convert(in_packaged, in_len,
    1e24:	2200      	movs	r2, #0
    1e26:	e7f1      	b.n	1e0c <cbprintf_package_copy+0x10>
    1e28:	00008a31 	.word	0x00008a31

00001e2c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1e2c:	b40e      	push	{r1, r2, r3}
    1e2e:	b500      	push	{lr}
    1e30:	b084      	sub	sp, #16
    1e32:	4601      	mov	r1, r0
    1e34:	ab05      	add	r3, sp, #20
    1e36:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1e3a:	9303      	str	r3, [sp, #12]
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1e3c:	2000      	movs	r0, #0
    1e3e:	9000      	str	r0, [sp, #0]
    1e40:	4803      	ldr	r0, [pc, #12]	; (1e50 <print_formatted+0x24>)
    1e42:	f7ff f8c7 	bl	fd4 <z_cbvprintf_impl>
	length = cbvprintf(out_func, (void *)output, fmt, args);
	va_end(args);

	return length;
}
    1e46:	b004      	add	sp, #16
    1e48:	f85d eb04 	ldr.w	lr, [sp], #4
    1e4c:	b003      	add	sp, #12
    1e4e:	4770      	bx	lr
    1e50:	00008bc9 	.word	0x00008bc9

00001e54 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    1e54:	b530      	push	{r4, r5, lr}
    1e56:	b085      	sub	sp, #20
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    1e58:	f011 0f44 	tst.w	r1, #68	; 0x44
    1e5c:	d005      	beq.n	1e6a <timestamp_print+0x16>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    1e5e:	4b1a      	ldr	r3, [pc, #104]	; (1ec8 <timestamp_print+0x74>)
    1e60:	681c      	ldr	r4, [r3, #0]
    1e62:	b934      	cbnz	r4, 1e72 <timestamp_print+0x1e>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    1e64:	2000      	movs	r0, #0
	}

	return length;
}
    1e66:	b005      	add	sp, #20
    1e68:	bd30      	pop	{r4, r5, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    1e6a:	4918      	ldr	r1, [pc, #96]	; (1ecc <timestamp_print+0x78>)
    1e6c:	f7ff ffde 	bl	1e2c <print_formatted>
    1e70:	e7f9      	b.n	1e66 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    1e72:	4b17      	ldr	r3, [pc, #92]	; (1ed0 <timestamp_print+0x7c>)
    1e74:	6819      	ldr	r1, [r3, #0]
    1e76:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    1e7a:	fbb1 fcf4 	udiv	ip, r1, r4
		hours = seconds / 3600U;
    1e7e:	4a15      	ldr	r2, [pc, #84]	; (1ed4 <timestamp_print+0x80>)
    1e80:	fba2 320c 	umull	r3, r2, r2, ip
    1e84:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    1e86:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    1e8a:	fb0e ce12 	mls	lr, lr, r2, ip
		mins = seconds / 60U;
    1e8e:	4b12      	ldr	r3, [pc, #72]	; (1ed8 <timestamp_print+0x84>)
    1e90:	fba3 530e 	umull	r5, r3, r3, lr
    1e94:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    1e96:	fb04 111c 	mls	r1, r4, ip, r1
		ms = (remainder * 1000U) / freq;
    1e9a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    1e9e:	fb0c f101 	mul.w	r1, ip, r1
    1ea2:	fbb1 f5f4 	udiv	r5, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1ea6:	fb04 1115 	mls	r1, r4, r5, r1
    1eaa:	fb0c f101 	mul.w	r1, ip, r1
    1eae:	fbb1 f1f4 	udiv	r1, r1, r4
				length = print_formatted(output,
    1eb2:	9102      	str	r1, [sp, #8]
    1eb4:	9501      	str	r5, [sp, #4]
    1eb6:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    1eba:	ebae 0181 	sub.w	r1, lr, r1, lsl #2
    1ebe:	9100      	str	r1, [sp, #0]
    1ec0:	4906      	ldr	r1, [pc, #24]	; (1edc <timestamp_print+0x88>)
    1ec2:	f7ff ffb3 	bl	1e2c <print_formatted>
    1ec6:	e7ce      	b.n	1e66 <timestamp_print+0x12>
    1ec8:	20000898 	.word	0x20000898
    1ecc:	0000a92c 	.word	0x0000a92c
    1ed0:	20000894 	.word	0x20000894
    1ed4:	91a2b3c5 	.word	0x91a2b3c5
    1ed8:	88888889 	.word	0x88888889
    1edc:	0000a938 	.word	0x0000a938

00001ee0 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    1ee0:	b161      	cbz	r1, 1efc <color_print+0x1c>
{
    1ee2:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1ee4:	b12a      	cbz	r2, 1ef2 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    1ee6:	4a06      	ldr	r2, [pc, #24]	; (1f00 <color_print+0x20>)
    1ee8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1eec:	b912      	cbnz	r2, 1ef4 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1eee:	4a05      	ldr	r2, [pc, #20]	; (1f04 <color_print+0x24>)
    1ef0:	e000      	b.n	1ef4 <color_print+0x14>
    1ef2:	4a04      	ldr	r2, [pc, #16]	; (1f04 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    1ef4:	4904      	ldr	r1, [pc, #16]	; (1f08 <color_print+0x28>)
    1ef6:	f7ff ff99 	bl	1e2c <print_formatted>
	}
}
    1efa:	bd08      	pop	{r3, pc}
    1efc:	4770      	bx	lr
    1efe:	bf00      	nop
    1f00:	0000a9d4 	.word	0x0000a9d4
    1f04:	0000a954 	.word	0x0000a954
    1f08:	0000a794 	.word	0x0000a794

00001f0c <ids_print>:
		     bool level_on,
		     bool func_on,
		     const char *domain,
		     const char *source,
		     uint32_t level)
{
    1f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f10:	4605      	mov	r5, r0
    1f12:	4690      	mov	r8, r2
    1f14:	461e      	mov	r6, r3
    1f16:	9f06      	ldr	r7, [sp, #24]
	int total = 0;

	if (level_on) {
    1f18:	b981      	cbnz	r1, 1f3c <ids_print+0x30>
	int total = 0;
    1f1a:	2400      	movs	r4, #0
		total += print_formatted(output, "<%s> ", severity[level]);
	}

	if (domain) {
    1f1c:	b12e      	cbz	r6, 1f2a <ids_print+0x1e>
		total += print_formatted(output, "%s/", domain);
    1f1e:	4632      	mov	r2, r6
    1f20:	4910      	ldr	r1, [pc, #64]	; (1f64 <ids_print+0x58>)
    1f22:	4628      	mov	r0, r5
    1f24:	f7ff ff82 	bl	1e2c <print_formatted>
    1f28:	4404      	add	r4, r0
	}

	if (source) {
    1f2a:	b1b7      	cbz	r7, 1f5a <ids_print+0x4e>
		total += print_formatted(output,
    1f2c:	f1b8 0f00 	cmp.w	r8, #0
    1f30:	d00d      	beq.n	1f4e <ids_print+0x42>
				(func_on &&
    1f32:	9b07      	ldr	r3, [sp, #28]
    1f34:	2b04      	cmp	r3, #4
    1f36:	d013      	beq.n	1f60 <ids_print+0x54>
		total += print_formatted(output,
    1f38:	490b      	ldr	r1, [pc, #44]	; (1f68 <ids_print+0x5c>)
    1f3a:	e009      	b.n	1f50 <ids_print+0x44>
		total += print_formatted(output, "<%s> ", severity[level]);
    1f3c:	4b0b      	ldr	r3, [pc, #44]	; (1f6c <ids_print+0x60>)
    1f3e:	9a07      	ldr	r2, [sp, #28]
    1f40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1f44:	490a      	ldr	r1, [pc, #40]	; (1f70 <ids_print+0x64>)
    1f46:	f7ff ff71 	bl	1e2c <print_formatted>
    1f4a:	4604      	mov	r4, r0
    1f4c:	e7e6      	b.n	1f1c <ids_print+0x10>
		total += print_formatted(output,
    1f4e:	4906      	ldr	r1, [pc, #24]	; (1f68 <ids_print+0x5c>)
    1f50:	463a      	mov	r2, r7
    1f52:	4628      	mov	r0, r5
    1f54:	f7ff ff6a 	bl	1e2c <print_formatted>
    1f58:	4404      	add	r4, r0
				"%s." : "%s: ",
				source);
	}

	return total;
}
    1f5a:	4620      	mov	r0, r4
    1f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    1f60:	4904      	ldr	r1, [pc, #16]	; (1f74 <ids_print+0x68>)
    1f62:	e7f5      	b.n	1f50 <ids_print+0x44>
    1f64:	0000a970 	.word	0x0000a970
    1f68:	0000a960 	.word	0x0000a960
    1f6c:	0000a9e8 	.word	0x0000a9e8
    1f70:	0000a968 	.word	0x0000a968
    1f74:	0000a95c 	.word	0x0000a95c

00001f78 <prefix_print>:
			     bool func_on,
			     log_timestamp_t timestamp,
			     const char *domain,
			     const char *source,
			     uint8_t level)
{
    1f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1f7c:	b085      	sub	sp, #20
    1f7e:	4605      	mov	r5, r0
    1f80:	460c      	mov	r4, r1
    1f82:	4616      	mov	r6, r2
    1f84:	9303      	str	r3, [sp, #12]
    1f86:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1f8a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1f8e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1f92:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    1f96:	f006 fd49 	bl	8a2c <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1f9a:	b1d8      	cbz	r0, 1fd4 <prefix_print+0x5c>
    1f9c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    1f9e:	4912      	ldr	r1, [pc, #72]	; (1fe8 <prefix_print+0x70>)
    1fa0:	4628      	mov	r0, r5
    1fa2:	f7ff ff43 	bl	1e2c <print_formatted>
    1fa6:	4607      	mov	r7, r0
	}

	if (stamp) {
    1fa8:	f1bb 0f00 	cmp.w	fp, #0
    1fac:	d114      	bne.n	1fd8 <prefix_print+0x60>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    1fae:	4642      	mov	r2, r8
    1fb0:	4651      	mov	r1, sl
    1fb2:	4628      	mov	r0, r5
    1fb4:	f006 fdc8 	bl	8b48 <color_prefix>
	}

	length += ids_print(output, level_on, func_on, domain, source, level);
    1fb8:	f8cd 8004 	str.w	r8, [sp, #4]
    1fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    1fbe:	9300      	str	r3, [sp, #0]
    1fc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1fc2:	4632      	mov	r2, r6
    1fc4:	4649      	mov	r1, r9
    1fc6:	4628      	mov	r0, r5
    1fc8:	f7ff ffa0 	bl	1f0c <ids_print>

	return length;
}
    1fcc:	4438      	add	r0, r7
    1fce:	b005      	add	sp, #20
    1fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1fd4:	2700      	movs	r7, #0
    1fd6:	e7e7      	b.n	1fa8 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    1fd8:	9a03      	ldr	r2, [sp, #12]
    1fda:	4621      	mov	r1, r4
    1fdc:	4628      	mov	r0, r5
    1fde:	f7ff ff39 	bl	1e54 <timestamp_print>
    1fe2:	4407      	add	r7, r0
    1fe4:	e7e3      	b.n	1fae <prefix_print+0x36>
    1fe6:	bf00      	nop
    1fe8:	0000a974 	.word	0x0000a974

00001fec <newline_print>:
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1fec:	f011 0f10 	tst.w	r1, #16
    1ff0:	d10b      	bne.n	200a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xa>
{
    1ff2:	b508      	push	{r3, lr}
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1ff4:	f011 0f20 	tst.w	r1, #32
    1ff8:	d003      	beq.n	2002 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x2>
		print_formatted(ctx, "\n");
    1ffa:	4904      	ldr	r1, [pc, #16]	; (200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>)
    1ffc:	f7ff ff16 	bl	1e2c <print_formatted>
}
    2000:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    2002:	4903      	ldr	r1, [pc, #12]	; (2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>)
    2004:	f7ff ff12 	bl	1e2c <print_formatted>
    2008:	e7fa      	b.n	2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>
    200a:	4770      	bx	lr
    200c:	0000b394 	.word	0x0000b394
    2010:	0000b400 	.word	0x0000b400

00002014 <hexdump_line_print>:
{
    2014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2018:	4605      	mov	r5, r0
    201a:	460f      	mov	r7, r1
    201c:	4616      	mov	r6, r2
    201e:	4698      	mov	r8, r3
	newline_print(output, flags);
    2020:	9906      	ldr	r1, [sp, #24]
    2022:	f7ff ffe3 	bl	1fec <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    2026:	2400      	movs	r4, #0
    2028:	4544      	cmp	r4, r8
    202a:	da05      	bge.n	2038 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    202c:	4923      	ldr	r1, [pc, #140]	; (20bc <hexdump_line_print+0xa8>)
    202e:	4628      	mov	r0, r5
    2030:	f7ff fefc 	bl	1e2c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2034:	3401      	adds	r4, #1
    2036:	e7f7      	b.n	2028 <hexdump_line_print+0x14>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2038:	2400      	movs	r4, #0
    203a:	e009      	b.n	2050 <hexdump_line_print+0x3c>
			print_formatted(output, " ");
    203c:	491f      	ldr	r1, [pc, #124]	; (20bc <hexdump_line_print+0xa8>)
    203e:	4628      	mov	r0, r5
    2040:	f7ff fef4 	bl	1e2c <print_formatted>
    2044:	e00b      	b.n	205e <hexdump_line_print+0x4a>
			print_formatted(output, "   ");
    2046:	491e      	ldr	r1, [pc, #120]	; (20c0 <hexdump_line_print+0xac>)
    2048:	4628      	mov	r0, r5
    204a:	f7ff feef 	bl	1e2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    204e:	3401      	adds	r4, #1
    2050:	2c0f      	cmp	r4, #15
    2052:	dc0c      	bgt.n	206e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    2054:	2c00      	cmp	r4, #0
    2056:	dd02      	ble.n	205e <hexdump_line_print+0x4a>
    2058:	f014 0f07 	tst.w	r4, #7
    205c:	d0ee      	beq.n	203c <hexdump_line_print+0x28>
		if (i < length) {
    205e:	42b4      	cmp	r4, r6
    2060:	d2f1      	bcs.n	2046 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    2062:	5d3a      	ldrb	r2, [r7, r4]
    2064:	4917      	ldr	r1, [pc, #92]	; (20c4 <hexdump_line_print+0xb0>)
    2066:	4628      	mov	r0, r5
    2068:	f7ff fee0 	bl	1e2c <print_formatted>
    206c:	e7ef      	b.n	204e <hexdump_line_print+0x3a>
	print_formatted(output, "|");
    206e:	4916      	ldr	r1, [pc, #88]	; (20c8 <hexdump_line_print+0xb4>)
    2070:	4628      	mov	r0, r5
    2072:	f7ff fedb 	bl	1e2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2076:	2400      	movs	r4, #0
    2078:	e009      	b.n	208e <hexdump_line_print+0x7a>
			print_formatted(output, " ");
    207a:	4910      	ldr	r1, [pc, #64]	; (20bc <hexdump_line_print+0xa8>)
    207c:	4628      	mov	r0, r5
    207e:	f7ff fed5 	bl	1e2c <print_formatted>
    2082:	e00b      	b.n	209c <hexdump_line_print+0x88>
			print_formatted(output, "%c",
    2084:	4911      	ldr	r1, [pc, #68]	; (20cc <hexdump_line_print+0xb8>)
    2086:	4628      	mov	r0, r5
    2088:	f7ff fed0 	bl	1e2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    208c:	3401      	adds	r4, #1
    208e:	2c0f      	cmp	r4, #15
    2090:	dc12      	bgt.n	20b8 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    2092:	2c00      	cmp	r4, #0
    2094:	dd02      	ble.n	209c <hexdump_line_print+0x88>
    2096:	f014 0f07 	tst.w	r4, #7
    209a:	d0ee      	beq.n	207a <hexdump_line_print+0x66>
		if (i < length) {
    209c:	42b4      	cmp	r4, r6
    209e:	d206      	bcs.n	20ae <hexdump_line_print+0x9a>
			unsigned char c = (unsigned char)data[i];
    20a0:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    20a2:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    20a6:	2b5e      	cmp	r3, #94	; 0x5e
    20a8:	d9ec      	bls.n	2084 <hexdump_line_print+0x70>
    20aa:	222e      	movs	r2, #46	; 0x2e
    20ac:	e7ea      	b.n	2084 <hexdump_line_print+0x70>
			print_formatted(output, " ");
    20ae:	4903      	ldr	r1, [pc, #12]	; (20bc <hexdump_line_print+0xa8>)
    20b0:	4628      	mov	r0, r5
    20b2:	f7ff febb 	bl	1e2c <print_formatted>
    20b6:	e7e9      	b.n	208c <hexdump_line_print+0x78>
}
    20b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    20bc:	0000a96c 	.word	0x0000a96c
    20c0:	0000a980 	.word	0x0000a980
    20c4:	0000a978 	.word	0x0000a978
    20c8:	0000a984 	.word	0x0000a984
    20cc:	0000a988 	.word	0x0000a988

000020d0 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    20d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    20d4:	b084      	sub	sp, #16
    20d6:	4604      	mov	r4, r0
    20d8:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
    20dc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    20de:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    20e0:	b995      	cbnz	r5, 2108 <log_output_process+0x38>
		prefix_offset = 0;
		/* source set to 1 indicates raw string and contrary to printk
		 * case it should not append anything to the output (printk is
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    20e2:	2b01      	cmp	r3, #1
    20e4:	d01b      	beq.n	211e <log_output_process+0x4e>
    20e6:	4817      	ldr	r0, [pc, #92]	; (2144 <log_output_process+0x74>)
		prefix_offset = 0;
    20e8:	f04f 0800 	mov.w	r8, #0
	}

	if (package) {
    20ec:	b127      	cbz	r7, 20f8 <log_output_process+0x28>
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    20ee:	463b      	mov	r3, r7
    20f0:	4622      	mov	r2, r4
    20f2:	4915      	ldr	r1, [pc, #84]	; (2148 <log_output_process+0x78>)
    20f4:	f005 fd43 	bl	7b7e <cbpprintf_external>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    20f8:	b9ae      	cbnz	r6, 2126 <log_output_process+0x56>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    20fa:	b9ed      	cbnz	r5, 2138 <log_output_process+0x68>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    20fc:	4620      	mov	r0, r4
    20fe:	f006 fd56 	bl	8bae <log_output_flush>
}
    2102:	b004      	add	sp, #16
    2104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		prefix_offset = prefix_print(output, flags, 0, timestamp, domain, source, level);
    2108:	9502      	str	r5, [sp, #8]
    210a:	9301      	str	r3, [sp, #4]
    210c:	9200      	str	r2, [sp, #0]
    210e:	460b      	mov	r3, r1
    2110:	2200      	movs	r2, #0
    2112:	990e      	ldr	r1, [sp, #56]	; 0x38
    2114:	f7ff ff30 	bl	1f78 <prefix_print>
    2118:	4680      	mov	r8, r0
		cb = out_func;
    211a:	480c      	ldr	r0, [pc, #48]	; (214c <log_output_process+0x7c>)
    211c:	e7e6      	b.n	20ec <log_output_process+0x1c>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    211e:	480b      	ldr	r0, [pc, #44]	; (214c <log_output_process+0x7c>)
		prefix_offset = 0;
    2120:	f04f 0800 	mov.w	r8, #0
    2124:	e7e2      	b.n	20ec <log_output_process+0x1c>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
    2126:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2128:	9300      	str	r3, [sp, #0]
    212a:	4643      	mov	r3, r8
    212c:	4632      	mov	r2, r6
    212e:	990c      	ldr	r1, [sp, #48]	; 0x30
    2130:	4620      	mov	r0, r4
    2132:	f006 fd21 	bl	8b78 <log_msg_hexdump>
    2136:	e7e0      	b.n	20fa <log_output_process+0x2a>
		postfix_print(output, flags, level);
    2138:	462a      	mov	r2, r5
    213a:	990e      	ldr	r1, [sp, #56]	; 0x38
    213c:	4620      	mov	r0, r4
    213e:	f006 fd0f 	bl	8b60 <postfix_print>
    2142:	e7db      	b.n	20fc <log_output_process+0x2c>
    2144:	00008bf9 	.word	0x00008bf9
    2148:	00008b39 	.word	0x00008b39
    214c:	00008bc9 	.word	0x00008bc9

00002150 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2154:	b086      	sub	sp, #24
    2156:	4605      	mov	r5, r0
    2158:	460c      	mov	r4, r1
    215a:	4617      	mov	r7, r2
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    215c:	f8d1 8008 	ldr.w	r8, [r1, #8]
	return msg->hdr.desc.level;
    2160:	880e      	ldrh	r6, [r1, #0]
    2162:	f3c6 1682 	ubfx	r6, r6, #6, #3
	return msg->hdr.desc.domain;
    2166:	7808      	ldrb	r0, [r1, #0]
    2168:	f3c0 00c2 	ubfx	r0, r0, #3, #3
	return msg->hdr.source;
    216c:	684b      	ldr	r3, [r1, #4]
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    216e:	b133      	cbz	r3, 217e <log_output_msg_process+0x2e>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2170:	4a11      	ldr	r2, [pc, #68]	; (21b8 <log_output_msg_process+0x68>)
    2172:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    2174:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2178:	2900      	cmp	r1, #0
    217a:	da18      	bge.n	21ae <log_output_msg_process+0x5e>
    217c:	2300      	movs	r3, #0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    217e:	4622      	mov	r2, r4
    2180:	f852 1b10 	ldr.w	r1, [r2], #16
    2184:	f3c1 2149 	ubfx	r1, r1, #9, #10
	*len = msg->hdr.desc.data_len;
    2188:	8860      	ldrh	r0, [r4, #2]
    218a:	f3c0 00cb 	ubfx	r0, r0, #3, #12
	return msg->data + msg->hdr.desc.package_len;
    218e:	1854      	adds	r4, r2, r1
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    2190:	b901      	cbnz	r1, 2194 <log_output_msg_process+0x44>
    2192:	2200      	movs	r2, #0
    2194:	9704      	str	r7, [sp, #16]
    2196:	9003      	str	r0, [sp, #12]
    2198:	9402      	str	r4, [sp, #8]
    219a:	9201      	str	r2, [sp, #4]
    219c:	9600      	str	r6, [sp, #0]
    219e:	2200      	movs	r2, #0
    21a0:	4641      	mov	r1, r8
    21a2:	4628      	mov	r0, r5
    21a4:	f7ff ff94 	bl	20d0 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    21a8:	b006      	add	sp, #24
    21aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    21ae:	f7ff fe01 	bl	1db4 <log_source_name_get>
    21b2:	4603      	mov	r3, r0
    21b4:	e7e3      	b.n	217e <log_output_msg_process+0x2e>
    21b6:	bf00      	nop
    21b8:	0000a5c8 	.word	0x0000a5c8

000021bc <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    21bc:	b570      	push	{r4, r5, r6, lr}
    21be:	b082      	sub	sp, #8
    21c0:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    21c2:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    21c4:	f242 730f 	movw	r3, #9999	; 0x270f
    21c8:	428b      	cmp	r3, r1
    21ca:	bf28      	it	cs
    21cc:	460b      	movcs	r3, r1
    21ce:	4a0e      	ldr	r2, [pc, #56]	; (2208 <log_output_dropped_process+0x4c>)
    21d0:	2105      	movs	r1, #5
    21d2:	4668      	mov	r0, sp
    21d4:	f005 fd52 	bl	7c7c <snprintk>
    21d8:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    21da:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    21dc:	685b      	ldr	r3, [r3, #4]
    21de:	220b      	movs	r2, #11
    21e0:	490a      	ldr	r1, [pc, #40]	; (220c <log_output_dropped_process+0x50>)
    21e2:	4628      	mov	r0, r5
    21e4:	f006 fc9b 	bl	8b1e <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    21e8:	6863      	ldr	r3, [r4, #4]
    21ea:	685b      	ldr	r3, [r3, #4]
    21ec:	4632      	mov	r2, r6
    21ee:	4669      	mov	r1, sp
    21f0:	4628      	mov	r0, r5
    21f2:	f006 fc94 	bl	8b1e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    21f6:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    21f8:	685b      	ldr	r3, [r3, #4]
    21fa:	221b      	movs	r2, #27
    21fc:	4904      	ldr	r1, [pc, #16]	; (2210 <log_output_dropped_process+0x54>)
    21fe:	4628      	mov	r0, r5
    2200:	f006 fc8d 	bl	8b1e <buffer_write>
}
    2204:	b002      	add	sp, #8
    2206:	bd70      	pop	{r4, r5, r6, pc}
    2208:	0000a86c 	.word	0x0000a86c
    220c:	0000a9a8 	.word	0x0000a9a8
    2210:	0000a98c 	.word	0x0000a98c

00002214 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2214:	4b07      	ldr	r3, [pc, #28]	; (2234 <log_output_timestamp_freq_set+0x20>)
    2216:	2201      	movs	r2, #1
    2218:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    221a:	e004      	b.n	2226 <log_output_timestamp_freq_set+0x12>
		frequency /= 2U;
    221c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    221e:	4a05      	ldr	r2, [pc, #20]	; (2234 <log_output_timestamp_freq_set+0x20>)
    2220:	6813      	ldr	r3, [r2, #0]
    2222:	005b      	lsls	r3, r3, #1
    2224:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2226:	4b04      	ldr	r3, [pc, #16]	; (2238 <log_output_timestamp_freq_set+0x24>)
    2228:	4298      	cmp	r0, r3
    222a:	d8f7      	bhi.n	221c <log_output_timestamp_freq_set+0x8>
	}

	freq = frequency;
    222c:	4b03      	ldr	r3, [pc, #12]	; (223c <log_output_timestamp_freq_set+0x28>)
    222e:	6018      	str	r0, [r3, #0]
}
    2230:	4770      	bx	lr
    2232:	bf00      	nop
    2234:	20000894 	.word	0x20000894
    2238:	000f4240 	.word	0x000f4240
    223c:	20000898 	.word	0x20000898

00002240 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    2240:	b570      	push	{r4, r5, r6, lr}
    2242:	4606      	mov	r6, r0
    2244:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    2246:	2400      	movs	r4, #0
    2248:	e005      	b.n	2256 <char_out+0x16>
			uart_poll_out(uart_dev, data[i]);
    224a:	5d31      	ldrb	r1, [r6, r4]
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    224c:	4804      	ldr	r0, [pc, #16]	; (2260 <char_out+0x20>)
    224e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2250:	685b      	ldr	r3, [r3, #4]
    2252:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2254:	3401      	adds	r4, #1
    2256:	42ac      	cmp	r4, r5
    2258:	d3f7      	bcc.n	224a <char_out+0xa>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    225a:	4628      	mov	r0, r5
    225c:	bd70      	pop	{r4, r5, r6, pc}
    225e:	bf00      	nop
    2260:	0000a350 	.word	0x0000a350

00002264 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2264:	4b01      	ldr	r3, [pc, #4]	; (226c <format_set+0x8>)
    2266:	6019      	str	r1, [r3, #0]
	return 0;
}
    2268:	2000      	movs	r0, #0
    226a:	4770      	bx	lr
    226c:	200008b4 	.word	0x200008b4

00002270 <panic>:
		}
	}
}

static void panic(struct log_backend const *const backend)
{
    2270:	b508      	push	{r3, lr}
	in_panic = true;
    2272:	4b03      	ldr	r3, [pc, #12]	; (2280 <panic+0x10>)
    2274:	2201      	movs	r2, #1
    2276:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2278:	4802      	ldr	r0, [pc, #8]	; (2284 <panic+0x14>)
    227a:	f006 fc98 	bl	8bae <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    227e:	bd08      	pop	{r3, pc}
    2280:	2000119e 	.word	0x2000119e
    2284:	0000aa38 	.word	0x0000aa38

00002288 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    2288:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    228a:	4802      	ldr	r0, [pc, #8]	; (2294 <dropped+0xc>)
    228c:	f7ff ff96 	bl	21bc <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    2290:	bd08      	pop	{r3, pc}
    2292:	bf00      	nop
    2294:	0000aa38 	.word	0x0000aa38

00002298 <process>:
{
    2298:	b510      	push	{r4, lr}
    229a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    229c:	4b04      	ldr	r3, [pc, #16]	; (22b0 <process+0x18>)
    229e:	6818      	ldr	r0, [r3, #0]
    22a0:	f7ff fbbe 	bl	1a20 <log_format_func_t_get>
    22a4:	4603      	mov	r3, r0
	log_output_func(&log_output_uart, &msg->log, flags);
    22a6:	220f      	movs	r2, #15
    22a8:	4621      	mov	r1, r4
    22aa:	4802      	ldr	r0, [pc, #8]	; (22b4 <process+0x1c>)
    22ac:	4798      	blx	r3
}
    22ae:	bd10      	pop	{r4, pc}
    22b0:	200008b4 	.word	0x200008b4
    22b4:	0000aa38 	.word	0x0000aa38

000022b8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    22b8:	b570      	push	{r4, r5, r6, lr}
    22ba:	4605      	mov	r5, r0
	__asm__ volatile(
    22bc:	f04f 0320 	mov.w	r3, #32
    22c0:	f3ef 8611 	mrs	r6, BASEPRI
    22c4:	f383 8812 	msr	BASEPRI_MAX, r3
    22c8:	f3bf 8f6f 	isb	sy
    22cc:	4b0e      	ldr	r3, [pc, #56]	; (2308 <pm_state_notify+0x50>)
    22ce:	681c      	ldr	r4, [r3, #0]
    22d0:	e00d      	b.n	22ee <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
    22d2:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
    22d4:	b13a      	cbz	r2, 22e6 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    22d6:	4b0d      	ldr	r3, [pc, #52]	; (230c <pm_state_notify+0x54>)
    22d8:	7d1b      	ldrb	r3, [r3, #20]
    22da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    22de:	490c      	ldr	r1, [pc, #48]	; (2310 <pm_state_notify+0x58>)
    22e0:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    22e4:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    22e6:	4623      	mov	r3, r4
	return node->next;
    22e8:	6824      	ldr	r4, [r4, #0]
    22ea:	b104      	cbz	r4, 22ee <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
    22ec:	b123      	cbz	r3, 22f8 <pm_state_notify+0x40>
    22ee:	b12c      	cbz	r4, 22fc <pm_state_notify+0x44>
		if (entering_state) {
    22f0:	2d00      	cmp	r5, #0
    22f2:	d0ee      	beq.n	22d2 <pm_state_notify+0x1a>
			callback = notifier->state_entry;
    22f4:	6862      	ldr	r2, [r4, #4]
    22f6:	e7ed      	b.n	22d4 <pm_state_notify+0x1c>
    22f8:	461c      	mov	r4, r3
    22fa:	e7f8      	b.n	22ee <pm_state_notify+0x36>
	__asm__ volatile(
    22fc:	f386 8811 	msr	BASEPRI, r6
    2300:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2304:	bd70      	pop	{r4, r5, r6, pc}
    2306:	bf00      	nop
    2308:	200008d0 	.word	0x200008d0
    230c:	20000f88 	.word	0x20000f88
    2310:	200008c4 	.word	0x200008c4

00002314 <pm_exit_pos_ops>:
{
    2314:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
    2316:	4b06      	ldr	r3, [pc, #24]	; (2330 <pm_exit_pos_ops+0x1c>)
    2318:	b123      	cbz	r3, 2324 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
    231a:	7841      	ldrb	r1, [r0, #1]
    231c:	7800      	ldrb	r0, [r0, #0]
    231e:	f006 faff 	bl	8920 <pm_state_exit_post_ops>
}
    2322:	bd08      	pop	{r3, pc}
    2324:	2300      	movs	r3, #0
    2326:	f383 8811 	msr	BASEPRI, r3
    232a:	f3bf 8f6f 	isb	sy
    232e:	e7f8      	b.n	2322 <pm_exit_pos_ops+0xe>
    2330:	00008921 	.word	0x00008921

00002334 <pm_system_resume>:

void pm_system_resume(void)
{
    2334:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    2336:	4b0e      	ldr	r3, [pc, #56]	; (2370 <pm_system_resume+0x3c>)
    2338:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    233a:	4621      	mov	r1, r4
    233c:	480d      	ldr	r0, [pc, #52]	; (2374 <pm_system_resume+0x40>)
    233e:	f006 fc6b 	bl	8c18 <atomic_test_and_clear_bit>
    2342:	b900      	cbnz	r0, 2346 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
    2344:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
    2346:	0065      	lsls	r5, r4, #1
    2348:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    234c:	4e0a      	ldr	r6, [pc, #40]	; (2378 <pm_system_resume+0x44>)
    234e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    2352:	f7ff ffdf 	bl	2314 <pm_exit_pos_ops>
		pm_state_notify(false);
    2356:	2000      	movs	r0, #0
    2358:	f7ff ffae 	bl	22b8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    235c:	192b      	adds	r3, r5, r4
    235e:	0099      	lsls	r1, r3, #2
    2360:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    2364:	2200      	movs	r2, #0
    2366:	5072      	str	r2, [r6, r1]
    2368:	605a      	str	r2, [r3, #4]
    236a:	609a      	str	r2, [r3, #8]
}
    236c:	e7ea      	b.n	2344 <pm_system_resume+0x10>
    236e:	bf00      	nop
    2370:	20000f88 	.word	0x20000f88
    2374:	200008d8 	.word	0x200008d8
    2378:	200008c4 	.word	0x200008c4

0000237c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    237e:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
    2380:	4b38      	ldr	r3, [pc, #224]	; (2464 <pm_system_suspend+0xe8>)
    2382:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
    2384:	f04f 0320 	mov.w	r3, #32
    2388:	f3ef 8611 	mrs	r6, BASEPRI
    238c:	f383 8812 	msr	BASEPRI_MAX, r3
    2390:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    2394:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2398:	4b33      	ldr	r3, [pc, #204]	; (2468 <pm_system_suspend+0xec>)
    239a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    239e:	2b00      	cmp	r3, #0
    23a0:	d039      	beq.n	2416 <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    23a2:	4b32      	ldr	r3, [pc, #200]	; (246c <pm_system_suspend+0xf0>)
    23a4:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
    23a8:	4f2f      	ldr	r7, [pc, #188]	; (2468 <pm_system_suspend+0xec>)
    23aa:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    23ae:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    23b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    23b6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    23ba:	2300      	movs	r3, #0
    23bc:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
    23c0:	f386 8811 	msr	BASEPRI, r6
    23c4:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    23c8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    23cc:	4a27      	ldr	r2, [pc, #156]	; (246c <pm_system_suspend+0xf0>)
    23ce:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    23d2:	2b00      	cmp	r3, #0
    23d4:	d044      	beq.n	2460 <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    23d6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    23da:	d12b      	bne.n	2434 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    23dc:	f004 fc06 	bl	6bec <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    23e0:	2001      	movs	r0, #1
    23e2:	f7ff ff69 	bl	22b8 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
    23e6:	4621      	mov	r1, r4
    23e8:	4821      	ldr	r0, [pc, #132]	; (2470 <pm_system_suspend+0xf4>)
    23ea:	f006 fc2d 	bl	8c48 <atomic_set_bit>
	if (pm_state_set != NULL) {
    23ee:	4b21      	ldr	r3, [pc, #132]	; (2474 <pm_system_suspend+0xf8>)
    23f0:	b15b      	cbz	r3, 240a <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
    23f2:	4a1e      	ldr	r2, [pc, #120]	; (246c <pm_system_suspend+0xf0>)
    23f4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    23f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    23fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    2400:	7859      	ldrb	r1, [r3, #1]
    2402:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
    2406:	f7ff f90f 	bl	1628 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    240a:	f7ff ff93 	bl	2334 <pm_system_resume>
	k_sched_unlock();
    240e:	f004 fdef 	bl	6ff0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    2412:	2001      	movs	r0, #1
}
    2414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    2416:	4601      	mov	r1, r0
    2418:	4620      	mov	r0, r4
    241a:	f000 f831 	bl	2480 <pm_policy_next_state>
		if (info != NULL) {
    241e:	2800      	cmp	r0, #0
    2420:	d0ce      	beq.n	23c0 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    2422:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2426:	4b11      	ldr	r3, [pc, #68]	; (246c <pm_system_suspend+0xf0>)
    2428:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    242c:	c807      	ldmia	r0, {r0, r1, r2}
    242e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    2432:	e7c5      	b.n	23c0 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    2434:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2438:	4b0c      	ldr	r3, [pc, #48]	; (246c <pm_system_suspend+0xf0>)
    243a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    243e:	6898      	ldr	r0, [r3, #8]
			return (uint32_t)((t * to_hz + off) / from_hz);
    2440:	0c41      	lsrs	r1, r0, #17
    2442:	03c0      	lsls	r0, r0, #15
    2444:	4b0c      	ldr	r3, [pc, #48]	; (2478 <pm_system_suspend+0xfc>)
    2446:	18c0      	adds	r0, r0, r3
    2448:	4a0c      	ldr	r2, [pc, #48]	; (247c <pm_system_suspend+0x100>)
    244a:	f04f 0300 	mov.w	r3, #0
    244e:	f141 0100 	adc.w	r1, r1, #0
    2452:	f7fd fe7f 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2456:	2101      	movs	r1, #1
    2458:	1a28      	subs	r0, r5, r0
    245a:	f007 feb8 	bl	a1ce <z_set_timeout_expiry>
    245e:	e7bd      	b.n	23dc <pm_system_suspend+0x60>
		return false;
    2460:	2000      	movs	r0, #0
    2462:	e7d7      	b.n	2414 <pm_system_suspend+0x98>
    2464:	20000f88 	.word	0x20000f88
    2468:	200008b8 	.word	0x200008b8
    246c:	200008c4 	.word	0x200008c4
    2470:	200008d8 	.word	0x200008d8
    2474:	00001629 	.word	0x00001629
    2478:	000f423f 	.word	0x000f423f
    247c:	000f4240 	.word	0x000f4240

00002480 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2484:	b082      	sub	sp, #8
    2486:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2488:	a901      	add	r1, sp, #4
    248a:	f000 f845 	bl	2518 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    248e:	1e44      	subs	r4, r0, #1
    2490:	b224      	sxth	r4, r4
    2492:	e007      	b.n	24a4 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    2494:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    2498:	d033      	beq.n	2502 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    249a:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    249c:	45b0      	cmp	r8, r6
    249e:	d930      	bls.n	2502 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    24a0:	3c01      	subs	r4, #1
    24a2:	b224      	sxth	r4, r4
    24a4:	2c00      	cmp	r4, #0
    24a6:	db2b      	blt.n	2500 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    24a8:	9b01      	ldr	r3, [sp, #4]
    24aa:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    24ae:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    24b2:	7869      	ldrb	r1, [r5, #1]
    24b4:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    24b8:	f006 fbd5 	bl	8c66 <pm_policy_state_lock_is_active>
    24bc:	2800      	cmp	r0, #0
    24be:	d1ef      	bne.n	24a0 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    24c0:	6868      	ldr	r0, [r5, #4]
    24c2:	0c41      	lsrs	r1, r0, #17
    24c4:	03c0      	lsls	r0, r0, #15
    24c6:	4f11      	ldr	r7, [pc, #68]	; (250c <pm_policy_next_state+0x8c>)
    24c8:	19c0      	adds	r0, r0, r7
    24ca:	4a11      	ldr	r2, [pc, #68]	; (2510 <pm_policy_next_state+0x90>)
    24cc:	f04f 0300 	mov.w	r3, #0
    24d0:	f141 0100 	adc.w	r1, r1, #0
    24d4:	f7fd fe3e 	bl	154 <__aeabi_uldivmod>
    24d8:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    24da:	68ab      	ldr	r3, [r5, #8]
    24dc:	0c59      	lsrs	r1, r3, #17
    24de:	03db      	lsls	r3, r3, #15
    24e0:	19d8      	adds	r0, r3, r7
    24e2:	4a0b      	ldr	r2, [pc, #44]	; (2510 <pm_policy_next_state+0x90>)
    24e4:	f04f 0300 	mov.w	r3, #0
    24e8:	f141 0100 	adc.w	r1, r1, #0
    24ec:	f7fd fe32 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    24f0:	4b08      	ldr	r3, [pc, #32]	; (2514 <pm_policy_next_state+0x94>)
    24f2:	681b      	ldr	r3, [r3, #0]
    24f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    24f8:	d0cc      	beq.n	2494 <pm_policy_next_state+0x14>
    24fa:	4283      	cmp	r3, r0
    24fc:	d8ca      	bhi.n	2494 <pm_policy_next_state+0x14>
    24fe:	e7cf      	b.n	24a0 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    2500:	2500      	movs	r5, #0
}
    2502:	4628      	mov	r0, r5
    2504:	b002      	add	sp, #8
    2506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    250a:	bf00      	nop
    250c:	000f423f 	.word	0x000f423f
    2510:	000f4240 	.word	0x000f4240
    2514:	20000008 	.word	0x20000008

00002518 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2518:	b908      	cbnz	r0, 251e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    251a:	4b02      	ldr	r3, [pc, #8]	; (2524 <pm_state_cpu_get_all+0xc>)
    251c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    251e:	2000      	movs	r0, #0
    2520:	4770      	bx	lr
    2522:	bf00      	nop
    2524:	0000aa4c 	.word	0x0000aa4c

00002528 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    2528:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    252a:	4802      	ldr	r0, [pc, #8]	; (2534 <nrf_cc3xx_platform_abort_init+0xc>)
    252c:	f005 f944 	bl	77b8 <nrf_cc3xx_platform_set_abort>
}
    2530:	bd08      	pop	{r3, pc}
    2532:	bf00      	nop
    2534:	0000aa4c 	.word	0x0000aa4c

00002538 <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
    2538:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    253c:	d017      	beq.n	256e <mutex_flags_unknown+0x36>
    253e:	d80c      	bhi.n	255a <mutex_flags_unknown+0x22>
    2540:	f640 63ba 	movw	r3, #3770	; 0xeba
    2544:	4298      	cmp	r0, r3
    2546:	d014      	beq.n	2572 <mutex_flags_unknown+0x3a>
    2548:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    254c:	d013      	beq.n	2576 <mutex_flags_unknown+0x3e>
    254e:	283a      	cmp	r0, #58	; 0x3a
    2550:	d001      	beq.n	2556 <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
    2552:	2001      	movs	r0, #1
    2554:	4770      	bx	lr
    switch(flags){
    2556:	2000      	movs	r0, #0
    2558:	4770      	bx	lr
    255a:	4b09      	ldr	r3, [pc, #36]	; (2580 <mutex_flags_unknown+0x48>)
    255c:	4298      	cmp	r0, r3
    255e:	d00c      	beq.n	257a <mutex_flags_unknown+0x42>
    2560:	4b08      	ldr	r3, [pc, #32]	; (2584 <mutex_flags_unknown+0x4c>)
    2562:	4298      	cmp	r0, r3
    2564:	d001      	beq.n	256a <mutex_flags_unknown+0x32>
            return true;
    2566:	2001      	movs	r0, #1
    }
}
    2568:	4770      	bx	lr
    switch(flags){
    256a:	2000      	movs	r0, #0
    256c:	4770      	bx	lr
    256e:	2000      	movs	r0, #0
    2570:	4770      	bx	lr
    2572:	2000      	movs	r0, #0
    2574:	4770      	bx	lr
    2576:	2000      	movs	r0, #0
    2578:	4770      	bx	lr
    257a:	2000      	movs	r0, #0
    257c:	4770      	bx	lr
    257e:	bf00      	nop
    2580:	3a00003a 	.word	0x3a00003a
    2584:	a95c5f2c 	.word	0xa95c5f2c

00002588 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2588:	b328      	cbz	r0, 25d6 <mutex_unlock_platform+0x4e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    258a:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    258c:	6843      	ldr	r3, [r0, #4]
    258e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    2592:	d00a      	beq.n	25aa <mutex_unlock_platform+0x22>
    2594:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    2598:	d014      	beq.n	25c4 <mutex_unlock_platform+0x3c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    259a:	4912      	ldr	r1, [pc, #72]	; (25e4 <mutex_unlock_platform+0x5c>)
    259c:	428b      	cmp	r3, r1
    259e:	d01f      	beq.n	25e0 <mutex_unlock_platform+0x58>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    25a0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    25a2:	f004 fa07 	bl	69b4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    25a6:	2000      	movs	r0, #0
    25a8:	e014      	b.n	25d4 <mutex_unlock_platform+0x4c>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    25aa:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    25ac:	2200      	movs	r2, #0
    25ae:	e8d3 1fef 	ldaex	r1, [r3]
    25b2:	2901      	cmp	r1, #1
    25b4:	d103      	bne.n	25be <mutex_unlock_platform+0x36>
    25b6:	e8c3 2fe0 	stlex	r0, r2, [r3]
    25ba:	2800      	cmp	r0, #0
    25bc:	d1f7      	bne.n	25ae <mutex_unlock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    25be:	d10d      	bne.n	25dc <mutex_unlock_platform+0x54>
    25c0:	4610      	mov	r0, r2
    25c2:	e007      	b.n	25d4 <mutex_unlock_platform+0x4c>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    25c4:	6803      	ldr	r3, [r0, #0]
    25c6:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    25c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
    25cc:	2000      	movs	r0, #0
    25ce:	4a06      	ldr	r2, [pc, #24]	; (25e8 <mutex_unlock_platform+0x60>)
    25d0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    25d4:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    25d6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    25da:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    25dc:	4803      	ldr	r0, [pc, #12]	; (25ec <mutex_unlock_platform+0x64>)
    25de:	e7f9      	b.n	25d4 <mutex_unlock_platform+0x4c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    25e0:	4803      	ldr	r0, [pc, #12]	; (25f0 <mutex_unlock_platform+0x68>)
    25e2:	e7f7      	b.n	25d4 <mutex_unlock_platform+0x4c>
    25e4:	a95c5f2c 	.word	0xa95c5f2c
    25e8:	50030000 	.word	0x50030000
    25ec:	ffff8fe9 	.word	0xffff8fe9
    25f0:	ffff8fea 	.word	0xffff8fea

000025f4 <mutex_lock_platform>:
    if(mutex == NULL) {
    25f4:	b388      	cbz	r0, 265a <mutex_lock_platform+0x66>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    25f6:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    25f8:	6843      	ldr	r3, [r0, #4]
    25fa:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    25fe:	d00f      	beq.n	2620 <mutex_lock_platform+0x2c>
    2600:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    2604:	d019      	beq.n	263a <mutex_lock_platform+0x46>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2606:	4916      	ldr	r1, [pc, #88]	; (2660 <mutex_lock_platform+0x6c>)
    2608:	428b      	cmp	r3, r1
    260a:	d024      	beq.n	2656 <mutex_lock_platform+0x62>
        p_mutex = (struct k_mutex *)mutex->mutex;
    260c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    260e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2616:	f004 f949 	bl	68ac <z_impl_k_mutex_lock>
        if (ret == 0) {
    261a:	b168      	cbz	r0, 2638 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    261c:	4811      	ldr	r0, [pc, #68]	; (2664 <mutex_lock_platform+0x70>)
    261e:	e00b      	b.n	2638 <mutex_lock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    2620:	6803      	ldr	r3, [r0, #0]
    2622:	2201      	movs	r2, #1
    2624:	e8d3 1fef 	ldaex	r1, [r3]
    2628:	2900      	cmp	r1, #0
    262a:	d103      	bne.n	2634 <mutex_lock_platform+0x40>
    262c:	e8c3 2fe0 	stlex	r0, r2, [r3]
    2630:	2800      	cmp	r0, #0
    2632:	d1f7      	bne.n	2624 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2634:	d10b      	bne.n	264e <mutex_lock_platform+0x5a>
    2636:	2000      	movs	r0, #0
}
    2638:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    263a:	6803      	ldr	r3, [r0, #0]
    263c:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    263e:	f503 7380 	add.w	r3, r3, #256	; 0x100
    2642:	4a09      	ldr	r2, [pc, #36]	; (2668 <mutex_lock_platform+0x74>)
    2644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2648:	b91b      	cbnz	r3, 2652 <mutex_lock_platform+0x5e>
    264a:	2000      	movs	r0, #0
    264c:	e7f4      	b.n	2638 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    264e:	4805      	ldr	r0, [pc, #20]	; (2664 <mutex_lock_platform+0x70>)
    2650:	e7f2      	b.n	2638 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2652:	4804      	ldr	r0, [pc, #16]	; (2664 <mutex_lock_platform+0x70>)
    2654:	e7f0      	b.n	2638 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2656:	4805      	ldr	r0, [pc, #20]	; (266c <mutex_lock_platform+0x78>)
    2658:	e7ee      	b.n	2638 <mutex_lock_platform+0x44>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    265a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    265e:	4770      	bx	lr
    2660:	a95c5f2c 	.word	0xa95c5f2c
    2664:	ffff8fe9 	.word	0xffff8fe9
    2668:	50030000 	.word	0x50030000
    266c:	ffff8fea 	.word	0xffff8fea

00002670 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2670:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2672:	4604      	mov	r4, r0
    2674:	b1a8      	cbz	r0, 26a2 <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2676:	6863      	ldr	r3, [r4, #4]
    2678:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    267c:	d010      	beq.n	26a0 <mutex_free_platform+0x30>
    267e:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    2682:	d00d      	beq.n	26a0 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2684:	4a0c      	ldr	r2, [pc, #48]	; (26b8 <mutex_free_platform+0x48>)
    2686:	4293      	cmp	r3, r2
    2688:	d00a      	beq.n	26a0 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    268a:	f413 6f68 	tst.w	r3, #3712	; 0xe80
    268e:	d00d      	beq.n	26ac <mutex_free_platform+0x3c>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2690:	4621      	mov	r1, r4
    2692:	480a      	ldr	r0, [pc, #40]	; (26bc <mutex_free_platform+0x4c>)
    2694:	f007 fb72 	bl	9d7c <k_mem_slab_free>
        mutex->mutex = NULL;
    2698:	2300      	movs	r3, #0
    269a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    269c:	4b06      	ldr	r3, [pc, #24]	; (26b8 <mutex_free_platform+0x48>)
    269e:	6063      	str	r3, [r4, #4]
}
    26a0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    26a2:	4b07      	ldr	r3, [pc, #28]	; (26c0 <mutex_free_platform+0x50>)
    26a4:	685b      	ldr	r3, [r3, #4]
    26a6:	4807      	ldr	r0, [pc, #28]	; (26c4 <mutex_free_platform+0x54>)
    26a8:	4798      	blx	r3
    26aa:	e7e4      	b.n	2676 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    26ac:	2214      	movs	r2, #20
    26ae:	2100      	movs	r1, #0
    26b0:	6820      	ldr	r0, [r4, #0]
    26b2:	f006 fbff 	bl	8eb4 <memset>
    26b6:	e7f1      	b.n	269c <mutex_free_platform+0x2c>
    26b8:	a95c5f2c 	.word	0xa95c5f2c
    26bc:	20000ddc 	.word	0x20000ddc
    26c0:	200000e0 	.word	0x200000e0
    26c4:	0000aa54 	.word	0x0000aa54

000026c8 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    26c8:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    26ca:	4604      	mov	r4, r0
    26cc:	b368      	cbz	r0, 272a <mutex_init_platform+0x62>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    26ce:	6860      	ldr	r0, [r4, #4]
    26d0:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    26d4:	d028      	beq.n	2728 <mutex_init_platform+0x60>
    26d6:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    26da:	d025      	beq.n	2728 <mutex_init_platform+0x60>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    26dc:	4b17      	ldr	r3, [pc, #92]	; (273c <mutex_init_platform+0x74>)
    26de:	4298      	cmp	r0, r3
    26e0:	d028      	beq.n	2734 <mutex_init_platform+0x6c>
        mutex_flags_unknown(mutex->flags)) {
    26e2:	f7ff ff29 	bl	2538 <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    26e6:	b1c0      	cbz	r0, 271a <mutex_init_platform+0x52>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    26e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    26ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    26f0:	4621      	mov	r1, r4
    26f2:	4813      	ldr	r0, [pc, #76]	; (2740 <mutex_init_platform+0x78>)
    26f4:	f003 ff9a 	bl	662c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    26f8:	b908      	cbnz	r0, 26fe <mutex_init_platform+0x36>
    26fa:	6823      	ldr	r3, [r4, #0]
    26fc:	b91b      	cbnz	r3, 2706 <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
    26fe:	4b11      	ldr	r3, [pc, #68]	; (2744 <mutex_init_platform+0x7c>)
    2700:	685b      	ldr	r3, [r3, #4]
    2702:	4811      	ldr	r0, [pc, #68]	; (2748 <mutex_init_platform+0x80>)
    2704:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2706:	2214      	movs	r2, #20
    2708:	2100      	movs	r1, #0
    270a:	6820      	ldr	r0, [r4, #0]
    270c:	f006 fbd2 	bl	8eb4 <memset>
        mutex->flags = 0;
    2710:	2300      	movs	r3, #0
    2712:	6063      	str	r3, [r4, #4]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2714:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    2718:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    271a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    271c:	f007 fbbe 	bl	9e9c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2720:	6863      	ldr	r3, [r4, #4]
    2722:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    2726:	6063      	str	r3, [r4, #4]
}
    2728:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    272a:	4b06      	ldr	r3, [pc, #24]	; (2744 <mutex_init_platform+0x7c>)
    272c:	685b      	ldr	r3, [r3, #4]
    272e:	4807      	ldr	r0, [pc, #28]	; (274c <mutex_init_platform+0x84>)
    2730:	4798      	blx	r3
    2732:	e7cc      	b.n	26ce <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    2734:	6823      	ldr	r3, [r4, #0]
    2736:	2b00      	cmp	r3, #0
    2738:	d1d3      	bne.n	26e2 <mutex_init_platform+0x1a>
    273a:	e7d5      	b.n	26e8 <mutex_init_platform+0x20>
    273c:	a95c5f2c 	.word	0xa95c5f2c
    2740:	20000ddc 	.word	0x20000ddc
    2744:	200000e0 	.word	0x200000e0
    2748:	0000aa7c 	.word	0x0000aa7c
    274c:	0000aa54 	.word	0x0000aa54

00002750 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    2750:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    2752:	2340      	movs	r3, #64	; 0x40
    2754:	2214      	movs	r2, #20
    2756:	4904      	ldr	r1, [pc, #16]	; (2768 <nrf_cc3xx_platform_mutex_init+0x18>)
    2758:	4804      	ldr	r0, [pc, #16]	; (276c <nrf_cc3xx_platform_mutex_init+0x1c>)
    275a:	f007 fb01 	bl	9d60 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    275e:	4904      	ldr	r1, [pc, #16]	; (2770 <nrf_cc3xx_platform_mutex_init+0x20>)
    2760:	4804      	ldr	r0, [pc, #16]	; (2774 <nrf_cc3xx_platform_mutex_init+0x24>)
    2762:	f005 f89b 	bl	789c <nrf_cc3xx_platform_set_mutexes>
}
    2766:	bd08      	pop	{r3, pc}
    2768:	200008dc 	.word	0x200008dc
    276c:	20000ddc 	.word	0x20000ddc
    2770:	0000aaac 	.word	0x0000aaac
    2774:	0000aac0 	.word	0x0000aac0

00002778 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2778:	4901      	ldr	r1, [pc, #4]	; (2780 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    277a:	2210      	movs	r2, #16
	str	r2, [r1]
    277c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    277e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2780:	e000ed10 	.word	0xe000ed10

00002784 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2784:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2786:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2788:	f380 8811 	msr	BASEPRI, r0
	isb
    278c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2790:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2794:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2796:	b662      	cpsie	i
	isb
    2798:	f3bf 8f6f 	isb	sy

	bx	lr
    279c:	4770      	bx	lr
    279e:	bf00      	nop

000027a0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    27a0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    27a2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    27a4:	f381 8811 	msr	BASEPRI, r1

	wfe
    27a8:	bf20      	wfe

	msr	BASEPRI, r0
    27aa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    27ae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    27b0:	4770      	bx	lr
    27b2:	bf00      	nop

000027b4 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    27b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27b8:	b082      	sub	sp, #8
    27ba:	af00      	add	r7, sp, #0
    27bc:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    27be:	f8d0 e000 	ldr.w	lr, [r0]
    27c2:	f8d0 c004 	ldr.w	ip, [r0, #4]
    27c6:	6886      	ldr	r6, [r0, #8]
    27c8:	466d      	mov	r5, sp
    27ca:	b08a      	sub	sp, #40	; 0x28
    27cc:	466b      	mov	r3, sp
    27ce:	f113 0210 	adds.w	r2, r3, #16
    27d2:	f000 80f3 	beq.w	29bc <esf_dump+0x208>
    27d6:	2114      	movs	r1, #20
    27d8:	b18a      	cbz	r2, 27fe <esf_dump+0x4a>
    27da:	4608      	mov	r0, r1
    27dc:	2904      	cmp	r1, #4
    27de:	dd03      	ble.n	27e8 <esf_dump+0x34>
    27e0:	f8df 8208 	ldr.w	r8, [pc, #520]	; 29ec <esf_dump+0x238>
    27e4:	f8c3 8014 	str.w	r8, [r3, #20]
    27e8:	2808      	cmp	r0, #8
    27ea:	dd01      	ble.n	27f0 <esf_dump+0x3c>
    27ec:	f8c3 e018 	str.w	lr, [r3, #24]
    27f0:	280c      	cmp	r0, #12
    27f2:	dd01      	ble.n	27f8 <esf_dump+0x44>
    27f4:	f8c3 c01c 	str.w	ip, [r3, #28]
    27f8:	2810      	cmp	r0, #16
    27fa:	dd00      	ble.n	27fe <esf_dump+0x4a>
    27fc:	621e      	str	r6, [r3, #32]
    27fe:	2913      	cmp	r1, #19
    2800:	f340 80df 	ble.w	29c2 <esf_dump+0x20e>
    2804:	f04f 0c14 	mov.w	ip, #20
    2808:	b13a      	cbz	r2, 281a <esf_dump+0x66>
    280a:	2105      	movs	r1, #5
    280c:	7139      	strb	r1, [r7, #4]
    280e:	2100      	movs	r1, #0
    2810:	7179      	strb	r1, [r7, #5]
    2812:	71b9      	strb	r1, [r7, #6]
    2814:	71f9      	strb	r1, [r7, #7]
    2816:	6878      	ldr	r0, [r7, #4]
    2818:	6118      	str	r0, [r3, #16]
    281a:	2100      	movs	r1, #0
    281c:	f36f 0100 	bfc	r1, #0, #1
    2820:	f36f 0141 	bfc	r1, #1, #1
    2824:	f36f 0182 	bfc	r1, #2, #1
    2828:	f36f 01c5 	bfc	r1, #3, #3
    282c:	2301      	movs	r3, #1
    282e:	f363 1188 	bfi	r1, r3, #6, #3
    2832:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
    2836:	f36c 2152 	bfi	r1, ip, #9, #10
    283a:	f36f 41de 	bfc	r1, #19, #12
    283e:	f36f 71df 	bfc	r1, #31, #1
    2842:	2300      	movs	r3, #0
    2844:	486a      	ldr	r0, [pc, #424]	; (29f0 <esf_dump+0x23c>)
    2846:	f006 f921 	bl	8a8c <z_impl_z_log_msg_static_create>
    284a:	46ad      	mov	sp, r5
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    284c:	f8d4 e00c 	ldr.w	lr, [r4, #12]
    2850:	f8d4 c010 	ldr.w	ip, [r4, #16]
    2854:	6966      	ldr	r6, [r4, #20]
    2856:	466d      	mov	r5, sp
    2858:	b08a      	sub	sp, #40	; 0x28
    285a:	466b      	mov	r3, sp
    285c:	f113 0210 	adds.w	r2, r3, #16
    2860:	f000 80b2 	beq.w	29c8 <esf_dump+0x214>
    2864:	2114      	movs	r1, #20
    2866:	b18a      	cbz	r2, 288c <esf_dump+0xd8>
    2868:	4608      	mov	r0, r1
    286a:	2904      	cmp	r1, #4
    286c:	dd03      	ble.n	2876 <esf_dump+0xc2>
    286e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 29f4 <esf_dump+0x240>
    2872:	f8c3 8014 	str.w	r8, [r3, #20]
    2876:	2808      	cmp	r0, #8
    2878:	dd01      	ble.n	287e <esf_dump+0xca>
    287a:	f8c3 e018 	str.w	lr, [r3, #24]
    287e:	280c      	cmp	r0, #12
    2880:	dd01      	ble.n	2886 <esf_dump+0xd2>
    2882:	f8c3 c01c 	str.w	ip, [r3, #28]
    2886:	2810      	cmp	r0, #16
    2888:	dd00      	ble.n	288c <esf_dump+0xd8>
    288a:	621e      	str	r6, [r3, #32]
    288c:	2913      	cmp	r1, #19
    288e:	f340 809e 	ble.w	29ce <esf_dump+0x21a>
    2892:	f04f 0c14 	mov.w	ip, #20
    2896:	b13a      	cbz	r2, 28a8 <esf_dump+0xf4>
    2898:	2105      	movs	r1, #5
    289a:	7139      	strb	r1, [r7, #4]
    289c:	2100      	movs	r1, #0
    289e:	7179      	strb	r1, [r7, #5]
    28a0:	71b9      	strb	r1, [r7, #6]
    28a2:	71f9      	strb	r1, [r7, #7]
    28a4:	6878      	ldr	r0, [r7, #4]
    28a6:	6118      	str	r0, [r3, #16]
    28a8:	2100      	movs	r1, #0
    28aa:	f36f 0100 	bfc	r1, #0, #1
    28ae:	f36f 0141 	bfc	r1, #1, #1
    28b2:	f36f 0182 	bfc	r1, #2, #1
    28b6:	f36f 01c5 	bfc	r1, #3, #3
    28ba:	2301      	movs	r3, #1
    28bc:	f363 1188 	bfi	r1, r3, #6, #3
    28c0:	f40c 7c7d 	and.w	ip, ip, #1012	; 0x3f4
    28c4:	f36c 2152 	bfi	r1, ip, #9, #10
    28c8:	f36f 41de 	bfc	r1, #19, #12
    28cc:	f36f 71df 	bfc	r1, #31, #1
    28d0:	2300      	movs	r3, #0
    28d2:	4847      	ldr	r0, [pc, #284]	; (29f0 <esf_dump+0x23c>)
    28d4:	f006 f8da 	bl	8a8c <z_impl_z_log_msg_static_create>
    28d8:	46ad      	mov	sp, r5
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    28da:	69e6      	ldr	r6, [r4, #28]
    28dc:	466d      	mov	r5, sp
    28de:	b088      	sub	sp, #32
    28e0:	466b      	mov	r3, sp
    28e2:	f113 0210 	adds.w	r2, r3, #16
    28e6:	d075      	beq.n	29d4 <esf_dump+0x220>
    28e8:	210c      	movs	r1, #12
    28ea:	b14a      	cbz	r2, 2900 <esf_dump+0x14c>
    28ec:	4608      	mov	r0, r1
    28ee:	2904      	cmp	r1, #4
    28f0:	dd03      	ble.n	28fa <esf_dump+0x146>
    28f2:	f8df c104 	ldr.w	ip, [pc, #260]	; 29f8 <esf_dump+0x244>
    28f6:	f8c3 c014 	str.w	ip, [r3, #20]
    28fa:	2808      	cmp	r0, #8
    28fc:	dd00      	ble.n	2900 <esf_dump+0x14c>
    28fe:	619e      	str	r6, [r3, #24]
    2900:	290b      	cmp	r1, #11
    2902:	dd6a      	ble.n	29da <esf_dump+0x226>
    2904:	f04f 0c0c 	mov.w	ip, #12
    2908:	b13a      	cbz	r2, 291a <esf_dump+0x166>
    290a:	2103      	movs	r1, #3
    290c:	7139      	strb	r1, [r7, #4]
    290e:	2100      	movs	r1, #0
    2910:	7179      	strb	r1, [r7, #5]
    2912:	71b9      	strb	r1, [r7, #6]
    2914:	71f9      	strb	r1, [r7, #7]
    2916:	6878      	ldr	r0, [r7, #4]
    2918:	6118      	str	r0, [r3, #16]
    291a:	2100      	movs	r1, #0
    291c:	f36f 0100 	bfc	r1, #0, #1
    2920:	f36f 0141 	bfc	r1, #1, #1
    2924:	f36f 0182 	bfc	r1, #2, #1
    2928:	f36f 01c5 	bfc	r1, #3, #3
    292c:	2301      	movs	r3, #1
    292e:	f363 1188 	bfi	r1, r3, #6, #3
    2932:	f40c 7c7b 	and.w	ip, ip, #1004	; 0x3ec
    2936:	f36c 2152 	bfi	r1, ip, #9, #10
    293a:	f36f 41de 	bfc	r1, #19, #12
    293e:	f36f 71df 	bfc	r1, #31, #1
    2942:	2300      	movs	r3, #0
    2944:	482a      	ldr	r0, [pc, #168]	; (29f0 <esf_dump+0x23c>)
    2946:	f006 f8a1 	bl	8a8c <z_impl_z_log_msg_static_create>
    294a:	46ad      	mov	sp, r5
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    294c:	69a4      	ldr	r4, [r4, #24]
    294e:	b088      	sub	sp, #32
    2950:	466b      	mov	r3, sp
    2952:	f113 0210 	adds.w	r2, r3, #16
    2956:	d043      	beq.n	29e0 <esf_dump+0x22c>
    2958:	210c      	movs	r1, #12
    295a:	b13a      	cbz	r2, 296c <esf_dump+0x1b8>
    295c:	4608      	mov	r0, r1
    295e:	2904      	cmp	r1, #4
    2960:	dd01      	ble.n	2966 <esf_dump+0x1b2>
    2962:	4d26      	ldr	r5, [pc, #152]	; (29fc <esf_dump+0x248>)
    2964:	615d      	str	r5, [r3, #20]
    2966:	2808      	cmp	r0, #8
    2968:	dd00      	ble.n	296c <esf_dump+0x1b8>
    296a:	619c      	str	r4, [r3, #24]
    296c:	290b      	cmp	r1, #11
    296e:	dd3a      	ble.n	29e6 <esf_dump+0x232>
    2970:	240c      	movs	r4, #12
    2972:	b13a      	cbz	r2, 2984 <esf_dump+0x1d0>
    2974:	2103      	movs	r1, #3
    2976:	7139      	strb	r1, [r7, #4]
    2978:	2100      	movs	r1, #0
    297a:	7179      	strb	r1, [r7, #5]
    297c:	71b9      	strb	r1, [r7, #6]
    297e:	71f9      	strb	r1, [r7, #7]
    2980:	6878      	ldr	r0, [r7, #4]
    2982:	6118      	str	r0, [r3, #16]
    2984:	2100      	movs	r1, #0
    2986:	f36f 0100 	bfc	r1, #0, #1
    298a:	f36f 0141 	bfc	r1, #1, #1
    298e:	f36f 0182 	bfc	r1, #2, #1
    2992:	f36f 01c5 	bfc	r1, #3, #3
    2996:	2301      	movs	r3, #1
    2998:	f363 1188 	bfi	r1, r3, #6, #3
    299c:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    29a0:	f364 2152 	bfi	r1, r4, #9, #10
    29a4:	f36f 41de 	bfc	r1, #19, #12
    29a8:	f36f 71df 	bfc	r1, #31, #1
    29ac:	2300      	movs	r3, #0
    29ae:	4810      	ldr	r0, [pc, #64]	; (29f0 <esf_dump+0x23c>)
    29b0:	f006 f86c 	bl	8a8c <z_impl_z_log_msg_static_create>
		esf->basic.pc);
}
    29b4:	3708      	adds	r7, #8
    29b6:	46bd      	mov	sp, r7
    29b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    29bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    29c0:	e70a      	b.n	27d8 <esf_dump+0x24>
    29c2:	f06f 0c1b 	mvn.w	ip, #27
    29c6:	e71f      	b.n	2808 <esf_dump+0x54>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    29c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    29cc:	e74b      	b.n	2866 <esf_dump+0xb2>
    29ce:	f06f 0c1b 	mvn.w	ip, #27
    29d2:	e760      	b.n	2896 <esf_dump+0xe2>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    29d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    29d8:	e787      	b.n	28ea <esf_dump+0x136>
    29da:	f06f 0c1b 	mvn.w	ip, #27
    29de:	e793      	b.n	2908 <esf_dump+0x154>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    29e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    29e4:	e7b9      	b.n	295a <esf_dump+0x1a6>
    29e6:	f06f 041b 	mvn.w	r4, #27
    29ea:	e7c2      	b.n	2972 <esf_dump+0x1be>
    29ec:	0000aad0 	.word	0x0000aad0
    29f0:	0000a610 	.word	0x0000a610
    29f4:	0000ab00 	.word	0x0000ab00
    29f8:	0000ab30 	.word	0x0000ab30
    29fc:	0000ab40 	.word	0x0000ab40

00002a00 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2a00:	2800      	cmp	r0, #0
    2a02:	db07      	blt.n	2a14 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a04:	f000 021f 	and.w	r2, r0, #31
    2a08:	0940      	lsrs	r0, r0, #5
    2a0a:	2301      	movs	r3, #1
    2a0c:	4093      	lsls	r3, r2
    2a0e:	4a02      	ldr	r2, [pc, #8]	; (2a18 <__NVIC_EnableIRQ+0x18>)
    2a10:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    2a14:	4770      	bx	lr
    2a16:	bf00      	nop
    2a18:	e000e100 	.word	0xe000e100

00002a1c <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2a1c:	2800      	cmp	r0, #0
    2a1e:	db0c      	blt.n	2a3a <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a20:	f000 021f 	and.w	r2, r0, #31
    2a24:	0940      	lsrs	r0, r0, #5
    2a26:	2301      	movs	r3, #1
    2a28:	4093      	lsls	r3, r2
    2a2a:	3020      	adds	r0, #32
    2a2c:	4a03      	ldr	r2, [pc, #12]	; (2a3c <__NVIC_DisableIRQ+0x20>)
    2a2e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2a32:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a36:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
    2a3a:	4770      	bx	lr
    2a3c:	e000e100 	.word	0xe000e100

00002a40 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2a40:	2800      	cmp	r0, #0
    2a42:	db08      	blt.n	2a56 <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a44:	0149      	lsls	r1, r1, #5
    2a46:	b2c9      	uxtb	r1, r1
    2a48:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    2a4c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    2a50:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    2a54:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a56:	f000 000f 	and.w	r0, r0, #15
    2a5a:	0149      	lsls	r1, r1, #5
    2a5c:	b2c9      	uxtb	r1, r1
    2a5e:	4b01      	ldr	r3, [pc, #4]	; (2a64 <__NVIC_SetPriority+0x24>)
    2a60:	5419      	strb	r1, [r3, r0]
  }
}
    2a62:	4770      	bx	lr
    2a64:	e000ed14 	.word	0xe000ed14

00002a68 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2a68:	0942      	lsrs	r2, r0, #5
    2a6a:	4b05      	ldr	r3, [pc, #20]	; (2a80 <arch_irq_is_enabled+0x18>)
    2a6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2a70:	f000 001f 	and.w	r0, r0, #31
    2a74:	2301      	movs	r3, #1
    2a76:	fa03 f000 	lsl.w	r0, r3, r0
}
    2a7a:	4010      	ands	r0, r2
    2a7c:	4770      	bx	lr
    2a7e:	bf00      	nop
    2a80:	e000e100 	.word	0xe000e100

00002a84 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2a84:	bf30      	wfi
    b z_SysNmiOnReset
    2a86:	f7ff bffd 	b.w	2a84 <z_SysNmiOnReset>
    2a8a:	bf00      	nop

00002a8c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2a8c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2a8e:	4b0b      	ldr	r3, [pc, #44]	; (2abc <z_arm_prep_c+0x30>)
    2a90:	4a0b      	ldr	r2, [pc, #44]	; (2ac0 <z_arm_prep_c+0x34>)
    2a92:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2a96:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2a98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a9c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2aa0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2aa4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2aa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2aac:	f003 fd08 	bl	64c0 <z_bss_zero>
	z_data_copy();
    2ab0:	f004 fbf6 	bl	72a0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2ab4:	f000 ffb6 	bl	3a24 <z_arm_interrupt_init>
	z_cstart();
    2ab8:	f003 fd5e 	bl	6578 <z_cstart>
    2abc:	e000ed00 	.word	0xe000ed00
    2ac0:	00000000 	.word	0x00000000

00002ac4 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2ac4:	4a0a      	ldr	r2, [pc, #40]	; (2af0 <arch_swap+0x2c>)
    2ac6:	6893      	ldr	r3, [r2, #8]
    2ac8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    2acc:	4909      	ldr	r1, [pc, #36]	; (2af4 <arch_swap+0x30>)
    2ace:	6809      	ldr	r1, [r1, #0]
    2ad0:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2ad4:	4908      	ldr	r1, [pc, #32]	; (2af8 <arch_swap+0x34>)
    2ad6:	684b      	ldr	r3, [r1, #4]
    2ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2adc:	604b      	str	r3, [r1, #4]
    2ade:	2300      	movs	r3, #0
    2ae0:	f383 8811 	msr	BASEPRI, r3
    2ae4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2ae8:	6893      	ldr	r3, [r2, #8]
}
    2aea:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    2aee:	4770      	bx	lr
    2af0:	20000f88 	.word	0x20000f88
    2af4:	0000b26c 	.word	0x0000b26c
    2af8:	e000ed00 	.word	0xe000ed00

00002afc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2afc:	4914      	ldr	r1, [pc, #80]	; (2b50 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2afe:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2b00:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2b04:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2b06:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2b0a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2b0e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2b10:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2b14:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2b18:	4f0e      	ldr	r7, [pc, #56]	; (2b54 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2b1a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2b1e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2b20:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2b22:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2b24:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    2b28:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2b2a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2b2e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2b32:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2b36:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2b3a:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    2b3e:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    2b42:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    2b44:	f006 f8c3 	bl	8cce <configure_builtin_stack_guard>
    pop {r2, lr}
    2b48:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2b4c:	4770      	bx	lr
    2b4e:	0000      	.short	0x0000
    ldr r1, =_kernel
    2b50:	20000f88 	.word	0x20000f88
    ldr v4, =_SCS_ICSR
    2b54:	e000ed04 	.word	0xe000ed04

00002b58 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2b58:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2b5c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2b5e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2b62:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2b66:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2b68:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2b6c:	2902      	cmp	r1, #2
    beq _oops
    2b6e:	d0ff      	beq.n	2b70 <_oops>

00002b70 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2b70:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2b72:	f006 f88a 	bl	8c8a <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    2b76:	bd01      	pop	{r0, pc}

00002b78 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    2b78:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2b7a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    2b7e:	490e      	ldr	r1, [pc, #56]	; (2bb8 <arch_new_thread+0x40>)
    2b80:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    2b84:	f021 0101 	bic.w	r1, r1, #1
    2b88:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    2b8c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2b90:	9b01      	ldr	r3, [sp, #4]
    2b92:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    2b96:	9b02      	ldr	r3, [sp, #8]
    2b98:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2b9c:	9b03      	ldr	r3, [sp, #12]
    2b9e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2ba2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2ba6:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    2baa:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2bac:	2300      	movs	r3, #0
    2bae:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2bb2:	bc10      	pop	{r4}
    2bb4:	4770      	bx	lr
    2bb6:	bf00      	nop
    2bb8:	00007c99 	.word	0x00007c99

00002bbc <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2bbc:	4b09      	ldr	r3, [pc, #36]	; (2be4 <arch_switch_to_main_thread+0x28>)
    2bbe:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    2bc0:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    2bc4:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2bc8:	4610      	mov	r0, r2
    2bca:	f381 8809 	msr	PSP, r1
    2bce:	2100      	movs	r1, #0
    2bd0:	b663      	cpsie	if
    2bd2:	f381 8811 	msr	BASEPRI, r1
    2bd6:	f3bf 8f6f 	isb	sy
    2bda:	2200      	movs	r2, #0
    2bdc:	2300      	movs	r3, #0
    2bde:	f005 f85b 	bl	7c98 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2be2:	bf00      	nop
    2be4:	20000f88 	.word	0x20000f88

00002be8 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2be8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2bea:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2bec:	4a0b      	ldr	r2, [pc, #44]	; (2c1c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2bee:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2bf0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2bf2:	bf1e      	ittt	ne
	movne	r1, #0
    2bf4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2bf6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2bf8:	f007 f934 	blne	9e64 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2bfc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2bfe:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2c02:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2c06:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2c0a:	4905      	ldr	r1, [pc, #20]	; (2c20 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2c0c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2c0e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2c10:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2c12:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2c16:	4903      	ldr	r1, [pc, #12]	; (2c24 <_isr_wrapper+0x3c>)
	bx r1
    2c18:	4708      	bx	r1
    2c1a:	0000      	.short	0x0000
	ldr r2, =_kernel
    2c1c:	20000f88 	.word	0x20000f88
	ldr r1, =_sw_isr_table
    2c20:	0000a380 	.word	0x0000a380
	ldr r1, =z_arm_int_exit
    2c24:	00002c29 	.word	0x00002c29

00002c28 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2c28:	4b04      	ldr	r3, [pc, #16]	; (2c3c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2c2a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2c2c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2c2e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2c30:	d003      	beq.n	2c3a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2c32:	4903      	ldr	r1, [pc, #12]	; (2c40 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2c34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2c38:	600a      	str	r2, [r1, #0]

00002c3a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2c3a:	4770      	bx	lr
	ldr r3, =_kernel
    2c3c:	20000f88 	.word	0x20000f88
	ldr r1, =_SCS_ICSR
    2c40:	e000ed04 	.word	0xe000ed04

00002c44 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    2c44:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    2c46:	4b0d      	ldr	r3, [pc, #52]	; (2c7c <z_arm_is_synchronous_svc+0x38>)
    2c48:	695a      	ldr	r2, [r3, #20]
    2c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    2c4e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2c50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c54:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    2c58:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    2c5c:	695a      	ldr	r2, [r3, #20]
    2c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    2c62:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    2c64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c68:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2c6c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2c70:	4299      	cmp	r1, r3
    2c72:	d001      	beq.n	2c78 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    2c74:	2000      	movs	r0, #0
    2c76:	4770      	bx	lr
		return true;
    2c78:	2001      	movs	r0, #1
}
    2c7a:	4770      	bx	lr
    2c7c:	e000ed00 	.word	0xe000ed00

00002c80 <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
    2c80:	b510      	push	{r4, lr}
    2c82:	b088      	sub	sp, #32
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
    2c84:	2400      	movs	r4, #0
    2c86:	701c      	strb	r4, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2c88:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
    2c8c:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
    2c90:	d134      	bne.n	2cfc <get_esf+0x7c>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2c92:	f002 040c 	and.w	r4, r2, #12
    2c96:	2c08      	cmp	r4, #8
    2c98:	d005      	beq.n	2ca6 <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2c9a:	f012 0f08 	tst.w	r2, #8
    2c9e:	d02a      	beq.n	2cf6 <get_esf+0x76>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
    2ca0:	4608      	mov	r0, r1
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
    2ca2:	b008      	add	sp, #32
    2ca4:	bd10      	pop	{r4, pc}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2ca6:	4b16      	ldr	r3, [pc, #88]	; (2d00 <get_esf+0x80>)
    2ca8:	9307      	str	r3, [sp, #28]
    2caa:	2302      	movs	r3, #2
    2cac:	f88d 3004 	strb.w	r3, [sp, #4]
    2cb0:	2400      	movs	r4, #0
    2cb2:	f88d 4005 	strb.w	r4, [sp, #5]
    2cb6:	f88d 4006 	strb.w	r4, [sp, #6]
    2cba:	f88d 4007 	strb.w	r4, [sp, #7]
    2cbe:	9b01      	ldr	r3, [sp, #4]
    2cc0:	9306      	str	r3, [sp, #24]
    2cc2:	4621      	mov	r1, r4
    2cc4:	f364 0100 	bfi	r1, r4, #0, #1
    2cc8:	f364 0141 	bfi	r1, r4, #1, #1
    2ccc:	f364 0182 	bfi	r1, r4, #2, #1
    2cd0:	f364 01c5 	bfi	r1, r4, #3, #3
    2cd4:	2301      	movs	r3, #1
    2cd6:	f363 1188 	bfi	r1, r3, #6, #3
    2cda:	2308      	movs	r3, #8
    2cdc:	f363 2152 	bfi	r1, r3, #9, #10
    2ce0:	f364 41de 	bfi	r1, r4, #19, #12
    2ce4:	f364 71df 	bfi	r1, r4, #31, #1
    2ce8:	4623      	mov	r3, r4
    2cea:	aa06      	add	r2, sp, #24
    2cec:	4805      	ldr	r0, [pc, #20]	; (2d04 <get_esf+0x84>)
    2cee:	f005 fecd 	bl	8a8c <z_impl_z_log_msg_static_create>
		return NULL;
    2cf2:	4620      	mov	r0, r4
    2cf4:	e7d5      	b.n	2ca2 <get_esf+0x22>
			*nested_exc = true;
    2cf6:	2201      	movs	r2, #1
    2cf8:	701a      	strb	r2, [r3, #0]
    2cfa:	e7d2      	b.n	2ca2 <get_esf+0x22>
		return NULL;
    2cfc:	2000      	movs	r0, #0
    2cfe:	e7d0      	b.n	2ca2 <get_esf+0x22>
    2d00:	0000ab70 	.word	0x0000ab70
    2d04:	0000a610 	.word	0x0000a610

00002d08 <mem_manage_fault>:
{
    2d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d0c:	b0a6      	sub	sp, #152	; 0x98
    2d0e:	af00      	add	r7, sp, #0
    2d10:	4605      	mov	r5, r0
    2d12:	460e      	mov	r6, r1
    2d14:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2d16:	4baf      	ldr	r3, [pc, #700]	; (2fd4 <mem_manage_fault+0x2cc>)
    2d18:	61fb      	str	r3, [r7, #28]
    2d1a:	2302      	movs	r3, #2
    2d1c:	713b      	strb	r3, [r7, #4]
    2d1e:	2300      	movs	r3, #0
    2d20:	717b      	strb	r3, [r7, #5]
    2d22:	71bb      	strb	r3, [r7, #6]
    2d24:	71fb      	strb	r3, [r7, #7]
    2d26:	687a      	ldr	r2, [r7, #4]
    2d28:	61ba      	str	r2, [r7, #24]
    2d2a:	4619      	mov	r1, r3
    2d2c:	f363 0100 	bfi	r1, r3, #0, #1
    2d30:	f363 0141 	bfi	r1, r3, #1, #1
    2d34:	f363 0182 	bfi	r1, r3, #2, #1
    2d38:	f363 01c5 	bfi	r1, r3, #3, #3
    2d3c:	2201      	movs	r2, #1
    2d3e:	f362 1188 	bfi	r1, r2, #6, #3
    2d42:	2208      	movs	r2, #8
    2d44:	f362 2152 	bfi	r1, r2, #9, #10
    2d48:	f363 41de 	bfi	r1, r3, #19, #12
    2d4c:	f363 71df 	bfi	r1, r3, #31, #1
    2d50:	f107 0218 	add.w	r2, r7, #24
    2d54:	48a0      	ldr	r0, [pc, #640]	; (2fd8 <mem_manage_fault+0x2d0>)
    2d56:	f005 fe99 	bl	8a8c <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2d5a:	4ba0      	ldr	r3, [pc, #640]	; (2fdc <mem_manage_fault+0x2d4>)
    2d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d5e:	f013 0f10 	tst.w	r3, #16
    2d62:	d135      	bne.n	2dd0 <mem_manage_fault+0xc8>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2d64:	4b9d      	ldr	r3, [pc, #628]	; (2fdc <mem_manage_fault+0x2d4>)
    2d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d68:	f013 0f08 	tst.w	r3, #8
    2d6c:	d153      	bne.n	2e16 <mem_manage_fault+0x10e>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2d6e:	4b9b      	ldr	r3, [pc, #620]	; (2fdc <mem_manage_fault+0x2d4>)
    2d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d72:	f013 0f02 	tst.w	r3, #2
    2d76:	d171      	bne.n	2e5c <mem_manage_fault+0x154>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2d78:	4b98      	ldr	r3, [pc, #608]	; (2fdc <mem_manage_fault+0x2d4>)
    2d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d7c:	f013 0f01 	tst.w	r3, #1
    2d80:	f040 80e0 	bne.w	2f44 <mem_manage_fault+0x23c>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2d84:	4b95      	ldr	r3, [pc, #596]	; (2fdc <mem_manage_fault+0x2d4>)
    2d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d88:	f013 0f20 	tst.w	r3, #32
    2d8c:	f040 80fd 	bne.w	2f8a <mem_manage_fault+0x282>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2d90:	4b92      	ldr	r3, [pc, #584]	; (2fdc <mem_manage_fault+0x2d4>)
    2d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d94:	f013 0f10 	tst.w	r3, #16
    2d98:	d101      	bne.n	2d9e <mem_manage_fault+0x96>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2d9a:	4b90      	ldr	r3, [pc, #576]	; (2fdc <mem_manage_fault+0x2d4>)
    2d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2d9e:	4b8f      	ldr	r3, [pc, #572]	; (2fdc <mem_manage_fault+0x2d4>)
    2da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2da2:	f013 0f20 	tst.w	r3, #32
    2da6:	d004      	beq.n	2db2 <mem_manage_fault+0xaa>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2da8:	4a8c      	ldr	r2, [pc, #560]	; (2fdc <mem_manage_fault+0x2d4>)
    2daa:	6a53      	ldr	r3, [r2, #36]	; 0x24
    2dac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2db0:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2db2:	4a8a      	ldr	r2, [pc, #552]	; (2fdc <mem_manage_fault+0x2d4>)
    2db4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2db6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2dba:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2dbc:	2101      	movs	r1, #1
    2dbe:	4628      	mov	r0, r5
    2dc0:	f005 ff8a 	bl	8cd8 <memory_fault_recoverable>
    2dc4:	7020      	strb	r0, [r4, #0]
}
    2dc6:	2000      	movs	r0, #0
    2dc8:	3798      	adds	r7, #152	; 0x98
    2dca:	46bd      	mov	sp, r7
    2dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    2dd0:	4b83      	ldr	r3, [pc, #524]	; (2fe0 <mem_manage_fault+0x2d8>)
    2dd2:	637b      	str	r3, [r7, #52]	; 0x34
    2dd4:	2302      	movs	r3, #2
    2dd6:	713b      	strb	r3, [r7, #4]
    2dd8:	2300      	movs	r3, #0
    2dda:	717b      	strb	r3, [r7, #5]
    2ddc:	71bb      	strb	r3, [r7, #6]
    2dde:	71fb      	strb	r3, [r7, #7]
    2de0:	687a      	ldr	r2, [r7, #4]
    2de2:	633a      	str	r2, [r7, #48]	; 0x30
    2de4:	4619      	mov	r1, r3
    2de6:	f363 0100 	bfi	r1, r3, #0, #1
    2dea:	f363 0141 	bfi	r1, r3, #1, #1
    2dee:	f363 0182 	bfi	r1, r3, #2, #1
    2df2:	f363 01c5 	bfi	r1, r3, #3, #3
    2df6:	2201      	movs	r2, #1
    2df8:	f362 1188 	bfi	r1, r2, #6, #3
    2dfc:	2208      	movs	r2, #8
    2dfe:	f362 2152 	bfi	r1, r2, #9, #10
    2e02:	f363 41de 	bfi	r1, r3, #19, #12
    2e06:	f363 71df 	bfi	r1, r3, #31, #1
    2e0a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    2e0e:	4872      	ldr	r0, [pc, #456]	; (2fd8 <mem_manage_fault+0x2d0>)
    2e10:	f005 fe3c 	bl	8a8c <z_impl_z_log_msg_static_create>
    2e14:	e7a6      	b.n	2d64 <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2e16:	4b73      	ldr	r3, [pc, #460]	; (2fe4 <mem_manage_fault+0x2dc>)
    2e18:	64fb      	str	r3, [r7, #76]	; 0x4c
    2e1a:	2302      	movs	r3, #2
    2e1c:	713b      	strb	r3, [r7, #4]
    2e1e:	2300      	movs	r3, #0
    2e20:	717b      	strb	r3, [r7, #5]
    2e22:	71bb      	strb	r3, [r7, #6]
    2e24:	71fb      	strb	r3, [r7, #7]
    2e26:	687a      	ldr	r2, [r7, #4]
    2e28:	64ba      	str	r2, [r7, #72]	; 0x48
    2e2a:	4619      	mov	r1, r3
    2e2c:	f363 0100 	bfi	r1, r3, #0, #1
    2e30:	f363 0141 	bfi	r1, r3, #1, #1
    2e34:	f363 0182 	bfi	r1, r3, #2, #1
    2e38:	f363 01c5 	bfi	r1, r3, #3, #3
    2e3c:	2201      	movs	r2, #1
    2e3e:	f362 1188 	bfi	r1, r2, #6, #3
    2e42:	2208      	movs	r2, #8
    2e44:	f362 2152 	bfi	r1, r2, #9, #10
    2e48:	f363 41de 	bfi	r1, r3, #19, #12
    2e4c:	f363 71df 	bfi	r1, r3, #31, #1
    2e50:	f107 0248 	add.w	r2, r7, #72	; 0x48
    2e54:	4860      	ldr	r0, [pc, #384]	; (2fd8 <mem_manage_fault+0x2d0>)
    2e56:	f005 fe19 	bl	8a8c <z_impl_z_log_msg_static_create>
    2e5a:	e788      	b.n	2d6e <mem_manage_fault+0x66>
		PR_FAULT_INFO("  Data Access Violation");
    2e5c:	4b62      	ldr	r3, [pc, #392]	; (2fe8 <mem_manage_fault+0x2e0>)
    2e5e:	667b      	str	r3, [r7, #100]	; 0x64
    2e60:	2302      	movs	r3, #2
    2e62:	713b      	strb	r3, [r7, #4]
    2e64:	2300      	movs	r3, #0
    2e66:	717b      	strb	r3, [r7, #5]
    2e68:	71bb      	strb	r3, [r7, #6]
    2e6a:	71fb      	strb	r3, [r7, #7]
    2e6c:	687a      	ldr	r2, [r7, #4]
    2e6e:	663a      	str	r2, [r7, #96]	; 0x60
    2e70:	4619      	mov	r1, r3
    2e72:	f363 0100 	bfi	r1, r3, #0, #1
    2e76:	f363 0141 	bfi	r1, r3, #1, #1
    2e7a:	f363 0182 	bfi	r1, r3, #2, #1
    2e7e:	f363 01c5 	bfi	r1, r3, #3, #3
    2e82:	2201      	movs	r2, #1
    2e84:	f362 1188 	bfi	r1, r2, #6, #3
    2e88:	2208      	movs	r2, #8
    2e8a:	f362 2152 	bfi	r1, r2, #9, #10
    2e8e:	f363 41de 	bfi	r1, r3, #19, #12
    2e92:	f363 71df 	bfi	r1, r3, #31, #1
    2e96:	f107 0260 	add.w	r2, r7, #96	; 0x60
    2e9a:	484f      	ldr	r0, [pc, #316]	; (2fd8 <mem_manage_fault+0x2d0>)
    2e9c:	f005 fdf6 	bl	8a8c <z_impl_z_log_msg_static_create>
		uint32_t temp = SCB->MMFAR;
    2ea0:	4b4e      	ldr	r3, [pc, #312]	; (2fdc <mem_manage_fault+0x2d4>)
    2ea2:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ea6:	f013 0f80 	tst.w	r3, #128	; 0x80
    2eaa:	f43f af65 	beq.w	2d78 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2eae:	46e8      	mov	r8, sp
    2eb0:	b088      	sub	sp, #32
    2eb2:	466b      	mov	r3, sp
    2eb4:	f113 0210 	adds.w	r2, r3, #16
    2eb8:	d011      	beq.n	2ede <mem_manage_fault+0x1d6>
    2eba:	210c      	movs	r1, #12
    2ebc:	b152      	cbz	r2, 2ed4 <mem_manage_fault+0x1cc>
    2ebe:	468c      	mov	ip, r1
    2ec0:	2904      	cmp	r1, #4
    2ec2:	dd03      	ble.n	2ecc <mem_manage_fault+0x1c4>
    2ec4:	f8df e124 	ldr.w	lr, [pc, #292]	; 2fec <mem_manage_fault+0x2e4>
    2ec8:	f8c3 e014 	str.w	lr, [r3, #20]
    2ecc:	f1bc 0f08 	cmp.w	ip, #8
    2ed0:	dd08      	ble.n	2ee4 <mem_manage_fault+0x1dc>
    2ed2:	6198      	str	r0, [r3, #24]
    2ed4:	290b      	cmp	r1, #11
    2ed6:	dd32      	ble.n	2f3e <mem_manage_fault+0x236>
    2ed8:	f04f 0c0c 	mov.w	ip, #12
    2edc:	e004      	b.n	2ee8 <mem_manage_fault+0x1e0>
    2ede:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    2ee2:	e7eb      	b.n	2ebc <mem_manage_fault+0x1b4>
    2ee4:	f06f 0c1b 	mvn.w	ip, #27
    2ee8:	b13a      	cbz	r2, 2efa <mem_manage_fault+0x1f2>
    2eea:	2103      	movs	r1, #3
    2eec:	7139      	strb	r1, [r7, #4]
    2eee:	2100      	movs	r1, #0
    2ef0:	7179      	strb	r1, [r7, #5]
    2ef2:	71b9      	strb	r1, [r7, #6]
    2ef4:	71f9      	strb	r1, [r7, #7]
    2ef6:	6878      	ldr	r0, [r7, #4]
    2ef8:	6118      	str	r0, [r3, #16]
    2efa:	2100      	movs	r1, #0
    2efc:	f36f 0100 	bfc	r1, #0, #1
    2f00:	f36f 0141 	bfc	r1, #1, #1
    2f04:	f36f 0182 	bfc	r1, #2, #1
    2f08:	f36f 01c5 	bfc	r1, #3, #3
    2f0c:	2301      	movs	r3, #1
    2f0e:	f363 1188 	bfi	r1, r3, #6, #3
    2f12:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    2f16:	f363 2152 	bfi	r1, r3, #9, #10
    2f1a:	f36f 41de 	bfc	r1, #19, #12
    2f1e:	f36f 71df 	bfc	r1, #31, #1
    2f22:	2300      	movs	r3, #0
    2f24:	482c      	ldr	r0, [pc, #176]	; (2fd8 <mem_manage_fault+0x2d0>)
    2f26:	f005 fdb1 	bl	8a8c <z_impl_z_log_msg_static_create>
    2f2a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2f2c:	2e00      	cmp	r6, #0
    2f2e:	f43f af23 	beq.w	2d78 <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2f32:	4a2a      	ldr	r2, [pc, #168]	; (2fdc <mem_manage_fault+0x2d4>)
    2f34:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2f3a:	6293      	str	r3, [r2, #40]	; 0x28
    2f3c:	e71c      	b.n	2d78 <mem_manage_fault+0x70>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2f3e:	f06f 0c1b 	mvn.w	ip, #27
    2f42:	e7d1      	b.n	2ee8 <mem_manage_fault+0x1e0>
		PR_FAULT_INFO("  Instruction Access Violation");
    2f44:	4b2a      	ldr	r3, [pc, #168]	; (2ff0 <mem_manage_fault+0x2e8>)
    2f46:	67fb      	str	r3, [r7, #124]	; 0x7c
    2f48:	2302      	movs	r3, #2
    2f4a:	713b      	strb	r3, [r7, #4]
    2f4c:	2300      	movs	r3, #0
    2f4e:	717b      	strb	r3, [r7, #5]
    2f50:	71bb      	strb	r3, [r7, #6]
    2f52:	71fb      	strb	r3, [r7, #7]
    2f54:	687a      	ldr	r2, [r7, #4]
    2f56:	67ba      	str	r2, [r7, #120]	; 0x78
    2f58:	4619      	mov	r1, r3
    2f5a:	f363 0100 	bfi	r1, r3, #0, #1
    2f5e:	f363 0141 	bfi	r1, r3, #1, #1
    2f62:	f363 0182 	bfi	r1, r3, #2, #1
    2f66:	f363 01c5 	bfi	r1, r3, #3, #3
    2f6a:	2201      	movs	r2, #1
    2f6c:	f362 1188 	bfi	r1, r2, #6, #3
    2f70:	2208      	movs	r2, #8
    2f72:	f362 2152 	bfi	r1, r2, #9, #10
    2f76:	f363 41de 	bfi	r1, r3, #19, #12
    2f7a:	f363 71df 	bfi	r1, r3, #31, #1
    2f7e:	f107 0278 	add.w	r2, r7, #120	; 0x78
    2f82:	4815      	ldr	r0, [pc, #84]	; (2fd8 <mem_manage_fault+0x2d0>)
    2f84:	f005 fd82 	bl	8a8c <z_impl_z_log_msg_static_create>
    2f88:	e6fc      	b.n	2d84 <mem_manage_fault+0x7c>
		PR_FAULT_INFO(
    2f8a:	4b1a      	ldr	r3, [pc, #104]	; (2ff4 <mem_manage_fault+0x2ec>)
    2f8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    2f90:	2302      	movs	r3, #2
    2f92:	713b      	strb	r3, [r7, #4]
    2f94:	2300      	movs	r3, #0
    2f96:	717b      	strb	r3, [r7, #5]
    2f98:	71bb      	strb	r3, [r7, #6]
    2f9a:	71fb      	strb	r3, [r7, #7]
    2f9c:	687a      	ldr	r2, [r7, #4]
    2f9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    2fa2:	4619      	mov	r1, r3
    2fa4:	f363 0100 	bfi	r1, r3, #0, #1
    2fa8:	f363 0141 	bfi	r1, r3, #1, #1
    2fac:	f363 0182 	bfi	r1, r3, #2, #1
    2fb0:	f363 01c5 	bfi	r1, r3, #3, #3
    2fb4:	2201      	movs	r2, #1
    2fb6:	f362 1188 	bfi	r1, r2, #6, #3
    2fba:	2208      	movs	r2, #8
    2fbc:	f362 2152 	bfi	r1, r2, #9, #10
    2fc0:	f363 41de 	bfi	r1, r3, #19, #12
    2fc4:	f363 71df 	bfi	r1, r3, #31, #1
    2fc8:	f107 0290 	add.w	r2, r7, #144	; 0x90
    2fcc:	4802      	ldr	r0, [pc, #8]	; (2fd8 <mem_manage_fault+0x2d0>)
    2fce:	f005 fd5d 	bl	8a8c <z_impl_z_log_msg_static_create>
    2fd2:	e6dd      	b.n	2d90 <mem_manage_fault+0x88>
    2fd4:	0000ab9c 	.word	0x0000ab9c
    2fd8:	0000a610 	.word	0x0000a610
    2fdc:	e000ed00 	.word	0xe000ed00
    2fe0:	0000abb4 	.word	0x0000abb4
    2fe4:	0000abe8 	.word	0x0000abe8
    2fe8:	0000abfc 	.word	0x0000abfc
    2fec:	0000ac14 	.word	0x0000ac14
    2ff0:	0000ac2c 	.word	0x0000ac2c
    2ff4:	0000ac4c 	.word	0x0000ac4c

00002ff8 <bus_fault>:
{
    2ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ffc:	b0ac      	sub	sp, #176	; 0xb0
    2ffe:	af00      	add	r7, sp, #0
    3000:	4605      	mov	r5, r0
    3002:	460e      	mov	r6, r1
    3004:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
    3006:	4bbc      	ldr	r3, [pc, #752]	; (32f8 <bus_fault+0x300>)
    3008:	61fb      	str	r3, [r7, #28]
    300a:	2302      	movs	r3, #2
    300c:	713b      	strb	r3, [r7, #4]
    300e:	2300      	movs	r3, #0
    3010:	717b      	strb	r3, [r7, #5]
    3012:	71bb      	strb	r3, [r7, #6]
    3014:	71fb      	strb	r3, [r7, #7]
    3016:	687a      	ldr	r2, [r7, #4]
    3018:	61ba      	str	r2, [r7, #24]
    301a:	4619      	mov	r1, r3
    301c:	f363 0100 	bfi	r1, r3, #0, #1
    3020:	f363 0141 	bfi	r1, r3, #1, #1
    3024:	f363 0182 	bfi	r1, r3, #2, #1
    3028:	f363 01c5 	bfi	r1, r3, #3, #3
    302c:	2201      	movs	r2, #1
    302e:	f362 1188 	bfi	r1, r2, #6, #3
    3032:	2208      	movs	r2, #8
    3034:	f362 2152 	bfi	r1, r2, #9, #10
    3038:	f363 41de 	bfi	r1, r3, #19, #12
    303c:	f363 71df 	bfi	r1, r3, #31, #1
    3040:	f107 0218 	add.w	r2, r7, #24
    3044:	48ad      	ldr	r0, [pc, #692]	; (32fc <bus_fault+0x304>)
    3046:	f005 fd21 	bl	8a8c <z_impl_z_log_msg_static_create>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    304a:	4bad      	ldr	r3, [pc, #692]	; (3300 <bus_fault+0x308>)
    304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    304e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    3052:	d12a      	bne.n	30aa <bus_fault+0xb2>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3054:	4baa      	ldr	r3, [pc, #680]	; (3300 <bus_fault+0x308>)
    3056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3058:	f413 6f00 	tst.w	r3, #2048	; 0x800
    305c:	d148      	bne.n	30f0 <bus_fault+0xf8>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    305e:	4ba8      	ldr	r3, [pc, #672]	; (3300 <bus_fault+0x308>)
    3060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3062:	f413 7f00 	tst.w	r3, #512	; 0x200
    3066:	d166      	bne.n	3136 <bus_fault+0x13e>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3068:	4ba5      	ldr	r3, [pc, #660]	; (3300 <bus_fault+0x308>)
    306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    306c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    3070:	f040 80d5 	bne.w	321e <bus_fault+0x226>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3074:	4ba2      	ldr	r3, [pc, #648]	; (3300 <bus_fault+0x308>)
    3076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3078:	f413 7f80 	tst.w	r3, #256	; 0x100
    307c:	f040 80f2 	bne.w	3264 <bus_fault+0x26c>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3080:	4b9f      	ldr	r3, [pc, #636]	; (3300 <bus_fault+0x308>)
    3082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3084:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    3088:	f040 8111 	bne.w	32ae <bus_fault+0x2b6>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    308c:	4a9c      	ldr	r2, [pc, #624]	; (3300 <bus_fault+0x308>)
    308e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3090:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3094:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3096:	2101      	movs	r1, #1
    3098:	4628      	mov	r0, r5
    309a:	f005 fe1d 	bl	8cd8 <memory_fault_recoverable>
    309e:	7020      	strb	r0, [r4, #0]
}
    30a0:	2000      	movs	r0, #0
    30a2:	37b0      	adds	r7, #176	; 0xb0
    30a4:	46bd      	mov	sp, r7
    30a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Stacking error");
    30aa:	4b96      	ldr	r3, [pc, #600]	; (3304 <bus_fault+0x30c>)
    30ac:	637b      	str	r3, [r7, #52]	; 0x34
    30ae:	2302      	movs	r3, #2
    30b0:	713b      	strb	r3, [r7, #4]
    30b2:	2300      	movs	r3, #0
    30b4:	717b      	strb	r3, [r7, #5]
    30b6:	71bb      	strb	r3, [r7, #6]
    30b8:	71fb      	strb	r3, [r7, #7]
    30ba:	687a      	ldr	r2, [r7, #4]
    30bc:	633a      	str	r2, [r7, #48]	; 0x30
    30be:	4619      	mov	r1, r3
    30c0:	f363 0100 	bfi	r1, r3, #0, #1
    30c4:	f363 0141 	bfi	r1, r3, #1, #1
    30c8:	f363 0182 	bfi	r1, r3, #2, #1
    30cc:	f363 01c5 	bfi	r1, r3, #3, #3
    30d0:	2201      	movs	r2, #1
    30d2:	f362 1188 	bfi	r1, r2, #6, #3
    30d6:	2208      	movs	r2, #8
    30d8:	f362 2152 	bfi	r1, r2, #9, #10
    30dc:	f363 41de 	bfi	r1, r3, #19, #12
    30e0:	f363 71df 	bfi	r1, r3, #31, #1
    30e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
    30e8:	4884      	ldr	r0, [pc, #528]	; (32fc <bus_fault+0x304>)
    30ea:	f005 fccf 	bl	8a8c <z_impl_z_log_msg_static_create>
    30ee:	e7b1      	b.n	3054 <bus_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    30f0:	4b85      	ldr	r3, [pc, #532]	; (3308 <bus_fault+0x310>)
    30f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    30f4:	2302      	movs	r3, #2
    30f6:	713b      	strb	r3, [r7, #4]
    30f8:	2300      	movs	r3, #0
    30fa:	717b      	strb	r3, [r7, #5]
    30fc:	71bb      	strb	r3, [r7, #6]
    30fe:	71fb      	strb	r3, [r7, #7]
    3100:	687a      	ldr	r2, [r7, #4]
    3102:	64ba      	str	r2, [r7, #72]	; 0x48
    3104:	4619      	mov	r1, r3
    3106:	f363 0100 	bfi	r1, r3, #0, #1
    310a:	f363 0141 	bfi	r1, r3, #1, #1
    310e:	f363 0182 	bfi	r1, r3, #2, #1
    3112:	f363 01c5 	bfi	r1, r3, #3, #3
    3116:	2201      	movs	r2, #1
    3118:	f362 1188 	bfi	r1, r2, #6, #3
    311c:	2208      	movs	r2, #8
    311e:	f362 2152 	bfi	r1, r2, #9, #10
    3122:	f363 41de 	bfi	r1, r3, #19, #12
    3126:	f363 71df 	bfi	r1, r3, #31, #1
    312a:	f107 0248 	add.w	r2, r7, #72	; 0x48
    312e:	4873      	ldr	r0, [pc, #460]	; (32fc <bus_fault+0x304>)
    3130:	f005 fcac 	bl	8a8c <z_impl_z_log_msg_static_create>
    3134:	e793      	b.n	305e <bus_fault+0x66>
		PR_FAULT_INFO("  Precise data bus error");
    3136:	4b75      	ldr	r3, [pc, #468]	; (330c <bus_fault+0x314>)
    3138:	667b      	str	r3, [r7, #100]	; 0x64
    313a:	2302      	movs	r3, #2
    313c:	713b      	strb	r3, [r7, #4]
    313e:	2300      	movs	r3, #0
    3140:	717b      	strb	r3, [r7, #5]
    3142:	71bb      	strb	r3, [r7, #6]
    3144:	71fb      	strb	r3, [r7, #7]
    3146:	687a      	ldr	r2, [r7, #4]
    3148:	663a      	str	r2, [r7, #96]	; 0x60
    314a:	4619      	mov	r1, r3
    314c:	f363 0100 	bfi	r1, r3, #0, #1
    3150:	f363 0141 	bfi	r1, r3, #1, #1
    3154:	f363 0182 	bfi	r1, r3, #2, #1
    3158:	f363 01c5 	bfi	r1, r3, #3, #3
    315c:	2201      	movs	r2, #1
    315e:	f362 1188 	bfi	r1, r2, #6, #3
    3162:	2208      	movs	r2, #8
    3164:	f362 2152 	bfi	r1, r2, #9, #10
    3168:	f363 41de 	bfi	r1, r3, #19, #12
    316c:	f363 71df 	bfi	r1, r3, #31, #1
    3170:	f107 0260 	add.w	r2, r7, #96	; 0x60
    3174:	4861      	ldr	r0, [pc, #388]	; (32fc <bus_fault+0x304>)
    3176:	f005 fc89 	bl	8a8c <z_impl_z_log_msg_static_create>
		STORE_xFAR(bfar, SCB->BFAR);
    317a:	4b61      	ldr	r3, [pc, #388]	; (3300 <bus_fault+0x308>)
    317c:	6b98      	ldr	r0, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3180:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    3184:	f43f af70 	beq.w	3068 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3188:	46e8      	mov	r8, sp
    318a:	b088      	sub	sp, #32
    318c:	466b      	mov	r3, sp
    318e:	f113 0210 	adds.w	r2, r3, #16
    3192:	d011      	beq.n	31b8 <bus_fault+0x1c0>
    3194:	210c      	movs	r1, #12
    3196:	b152      	cbz	r2, 31ae <bus_fault+0x1b6>
    3198:	468c      	mov	ip, r1
    319a:	2904      	cmp	r1, #4
    319c:	dd03      	ble.n	31a6 <bus_fault+0x1ae>
    319e:	f8df e170 	ldr.w	lr, [pc, #368]	; 3310 <bus_fault+0x318>
    31a2:	f8c3 e014 	str.w	lr, [r3, #20]
    31a6:	f1bc 0f08 	cmp.w	ip, #8
    31aa:	dd08      	ble.n	31be <bus_fault+0x1c6>
    31ac:	6198      	str	r0, [r3, #24]
    31ae:	290b      	cmp	r1, #11
    31b0:	dd32      	ble.n	3218 <bus_fault+0x220>
    31b2:	f04f 0c0c 	mov.w	ip, #12
    31b6:	e004      	b.n	31c2 <bus_fault+0x1ca>
    31b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    31bc:	e7eb      	b.n	3196 <bus_fault+0x19e>
    31be:	f06f 0c1b 	mvn.w	ip, #27
    31c2:	b13a      	cbz	r2, 31d4 <bus_fault+0x1dc>
    31c4:	2103      	movs	r1, #3
    31c6:	7139      	strb	r1, [r7, #4]
    31c8:	2100      	movs	r1, #0
    31ca:	7179      	strb	r1, [r7, #5]
    31cc:	71b9      	strb	r1, [r7, #6]
    31ce:	71f9      	strb	r1, [r7, #7]
    31d0:	6878      	ldr	r0, [r7, #4]
    31d2:	6118      	str	r0, [r3, #16]
    31d4:	2100      	movs	r1, #0
    31d6:	f36f 0100 	bfc	r1, #0, #1
    31da:	f36f 0141 	bfc	r1, #1, #1
    31de:	f36f 0182 	bfc	r1, #2, #1
    31e2:	f36f 01c5 	bfc	r1, #3, #3
    31e6:	2301      	movs	r3, #1
    31e8:	f363 1188 	bfi	r1, r3, #6, #3
    31ec:	f40c 737b 	and.w	r3, ip, #1004	; 0x3ec
    31f0:	f363 2152 	bfi	r1, r3, #9, #10
    31f4:	f36f 41de 	bfc	r1, #19, #12
    31f8:	f36f 71df 	bfc	r1, #31, #1
    31fc:	2300      	movs	r3, #0
    31fe:	483f      	ldr	r0, [pc, #252]	; (32fc <bus_fault+0x304>)
    3200:	f005 fc44 	bl	8a8c <z_impl_z_log_msg_static_create>
    3204:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    3206:	2e00      	cmp	r6, #0
    3208:	f43f af2e 	beq.w	3068 <bus_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    320c:	4a3c      	ldr	r2, [pc, #240]	; (3300 <bus_fault+0x308>)
    320e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3210:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3214:	6293      	str	r3, [r2, #40]	; 0x28
    3216:	e727      	b.n	3068 <bus_fault+0x70>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3218:	f06f 0c1b 	mvn.w	ip, #27
    321c:	e7d1      	b.n	31c2 <bus_fault+0x1ca>
		PR_FAULT_INFO("  Imprecise data bus error");
    321e:	4b3d      	ldr	r3, [pc, #244]	; (3314 <bus_fault+0x31c>)
    3220:	67fb      	str	r3, [r7, #124]	; 0x7c
    3222:	2302      	movs	r3, #2
    3224:	713b      	strb	r3, [r7, #4]
    3226:	2300      	movs	r3, #0
    3228:	717b      	strb	r3, [r7, #5]
    322a:	71bb      	strb	r3, [r7, #6]
    322c:	71fb      	strb	r3, [r7, #7]
    322e:	687a      	ldr	r2, [r7, #4]
    3230:	67ba      	str	r2, [r7, #120]	; 0x78
    3232:	4619      	mov	r1, r3
    3234:	f363 0100 	bfi	r1, r3, #0, #1
    3238:	f363 0141 	bfi	r1, r3, #1, #1
    323c:	f363 0182 	bfi	r1, r3, #2, #1
    3240:	f363 01c5 	bfi	r1, r3, #3, #3
    3244:	2201      	movs	r2, #1
    3246:	f362 1188 	bfi	r1, r2, #6, #3
    324a:	2208      	movs	r2, #8
    324c:	f362 2152 	bfi	r1, r2, #9, #10
    3250:	f363 41de 	bfi	r1, r3, #19, #12
    3254:	f363 71df 	bfi	r1, r3, #31, #1
    3258:	f107 0278 	add.w	r2, r7, #120	; 0x78
    325c:	4827      	ldr	r0, [pc, #156]	; (32fc <bus_fault+0x304>)
    325e:	f005 fc15 	bl	8a8c <z_impl_z_log_msg_static_create>
    3262:	e707      	b.n	3074 <bus_fault+0x7c>
		PR_FAULT_INFO("  Instruction bus error");
    3264:	4b2c      	ldr	r3, [pc, #176]	; (3318 <bus_fault+0x320>)
    3266:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    326a:	2302      	movs	r3, #2
    326c:	713b      	strb	r3, [r7, #4]
    326e:	2300      	movs	r3, #0
    3270:	717b      	strb	r3, [r7, #5]
    3272:	71bb      	strb	r3, [r7, #6]
    3274:	71fb      	strb	r3, [r7, #7]
    3276:	687a      	ldr	r2, [r7, #4]
    3278:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    327c:	4619      	mov	r1, r3
    327e:	f363 0100 	bfi	r1, r3, #0, #1
    3282:	f363 0141 	bfi	r1, r3, #1, #1
    3286:	f363 0182 	bfi	r1, r3, #2, #1
    328a:	f363 01c5 	bfi	r1, r3, #3, #3
    328e:	2201      	movs	r2, #1
    3290:	f362 1188 	bfi	r1, r2, #6, #3
    3294:	2208      	movs	r2, #8
    3296:	f362 2152 	bfi	r1, r2, #9, #10
    329a:	f363 41de 	bfi	r1, r3, #19, #12
    329e:	f363 71df 	bfi	r1, r3, #31, #1
    32a2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
    32a6:	4815      	ldr	r0, [pc, #84]	; (32fc <bus_fault+0x304>)
    32a8:	f005 fbf0 	bl	8a8c <z_impl_z_log_msg_static_create>
    32ac:	e6ee      	b.n	308c <bus_fault+0x94>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    32ae:	4b1b      	ldr	r3, [pc, #108]	; (331c <bus_fault+0x324>)
    32b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    32b4:	2302      	movs	r3, #2
    32b6:	713b      	strb	r3, [r7, #4]
    32b8:	2300      	movs	r3, #0
    32ba:	717b      	strb	r3, [r7, #5]
    32bc:	71bb      	strb	r3, [r7, #6]
    32be:	71fb      	strb	r3, [r7, #7]
    32c0:	687a      	ldr	r2, [r7, #4]
    32c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
    32c6:	4619      	mov	r1, r3
    32c8:	f363 0100 	bfi	r1, r3, #0, #1
    32cc:	f363 0141 	bfi	r1, r3, #1, #1
    32d0:	f363 0182 	bfi	r1, r3, #2, #1
    32d4:	f363 01c5 	bfi	r1, r3, #3, #3
    32d8:	2201      	movs	r2, #1
    32da:	f362 1188 	bfi	r1, r2, #6, #3
    32de:	2208      	movs	r2, #8
    32e0:	f362 2152 	bfi	r1, r2, #9, #10
    32e4:	f363 41de 	bfi	r1, r3, #19, #12
    32e8:	f363 71df 	bfi	r1, r3, #31, #1
    32ec:	f107 0290 	add.w	r2, r7, #144	; 0x90
    32f0:	4802      	ldr	r0, [pc, #8]	; (32fc <bus_fault+0x304>)
    32f2:	f005 fbcb 	bl	8a8c <z_impl_z_log_msg_static_create>
    32f6:	e6c9      	b.n	308c <bus_fault+0x94>
    32f8:	0000ac7c 	.word	0x0000ac7c
    32fc:	0000a610 	.word	0x0000a610
    3300:	e000ed00 	.word	0xe000ed00
    3304:	0000ac94 	.word	0x0000ac94
    3308:	0000abe8 	.word	0x0000abe8
    330c:	0000aca8 	.word	0x0000aca8
    3310:	0000acc4 	.word	0x0000acc4
    3314:	0000acdc 	.word	0x0000acdc
    3318:	0000acf8 	.word	0x0000acf8
    331c:	0000ac4c 	.word	0x0000ac4c

00003320 <usage_fault>:
{
    3320:	b510      	push	{r4, lr}
    3322:	b0b2      	sub	sp, #200	; 0xc8
	PR_FAULT_INFO("***** USAGE FAULT *****");
    3324:	4baf      	ldr	r3, [pc, #700]	; (35e4 <usage_fault+0x2c4>)
    3326:	9307      	str	r3, [sp, #28]
    3328:	2302      	movs	r3, #2
    332a:	f88d 3004 	strb.w	r3, [sp, #4]
    332e:	2300      	movs	r3, #0
    3330:	f88d 3005 	strb.w	r3, [sp, #5]
    3334:	f88d 3006 	strb.w	r3, [sp, #6]
    3338:	f88d 3007 	strb.w	r3, [sp, #7]
    333c:	9a01      	ldr	r2, [sp, #4]
    333e:	9206      	str	r2, [sp, #24]
    3340:	4619      	mov	r1, r3
    3342:	f363 0100 	bfi	r1, r3, #0, #1
    3346:	f363 0141 	bfi	r1, r3, #1, #1
    334a:	f363 0182 	bfi	r1, r3, #2, #1
    334e:	f363 01c5 	bfi	r1, r3, #3, #3
    3352:	2201      	movs	r2, #1
    3354:	f362 1188 	bfi	r1, r2, #6, #3
    3358:	2208      	movs	r2, #8
    335a:	f362 2152 	bfi	r1, r2, #9, #10
    335e:	f363 41de 	bfi	r1, r3, #19, #12
    3362:	f363 71df 	bfi	r1, r3, #31, #1
    3366:	aa06      	add	r2, sp, #24
    3368:	489f      	ldr	r0, [pc, #636]	; (35e8 <usage_fault+0x2c8>)
    336a:	f005 fb8f 	bl	8a8c <z_impl_z_log_msg_static_create>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    336e:	4b9f      	ldr	r3, [pc, #636]	; (35ec <usage_fault+0x2cc>)
    3370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3372:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    3376:	d12b      	bne.n	33d0 <usage_fault+0xb0>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3378:	4b9c      	ldr	r3, [pc, #624]	; (35ec <usage_fault+0x2cc>)
    337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    337c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    3380:	d14c      	bne.n	341c <usage_fault+0xfc>
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    3382:	4b9a      	ldr	r3, [pc, #616]	; (35ec <usage_fault+0x2cc>)
    3384:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    3386:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    338a:	d16d      	bne.n	3468 <usage_fault+0x148>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    338c:	4b97      	ldr	r3, [pc, #604]	; (35ec <usage_fault+0x2cc>)
    338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3390:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    3394:	f040 808e 	bne.w	34b4 <usage_fault+0x194>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3398:	4b94      	ldr	r3, [pc, #592]	; (35ec <usage_fault+0x2cc>)
    339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    339c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    33a0:	f040 80ae 	bne.w	3500 <usage_fault+0x1e0>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    33a4:	4b91      	ldr	r3, [pc, #580]	; (35ec <usage_fault+0x2cc>)
    33a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33a8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    33ac:	f040 80ce 	bne.w	354c <usage_fault+0x22c>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    33b0:	4b8e      	ldr	r3, [pc, #568]	; (35ec <usage_fault+0x2cc>)
    33b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33b4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    33b8:	f040 80ee 	bne.w	3598 <usage_fault+0x278>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    33bc:	4a8b      	ldr	r2, [pc, #556]	; (35ec <usage_fault+0x2cc>)
    33be:	6a93      	ldr	r3, [r2, #40]	; 0x28
    33c0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    33c4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    33c8:	6293      	str	r3, [r2, #40]	; 0x28
}
    33ca:	4620      	mov	r0, r4
    33cc:	b032      	add	sp, #200	; 0xc8
    33ce:	bd10      	pop	{r4, pc}
		PR_FAULT_INFO("  Division by zero");
    33d0:	4b87      	ldr	r3, [pc, #540]	; (35f0 <usage_fault+0x2d0>)
    33d2:	930d      	str	r3, [sp, #52]	; 0x34
    33d4:	2302      	movs	r3, #2
    33d6:	f88d 3004 	strb.w	r3, [sp, #4]
    33da:	2300      	movs	r3, #0
    33dc:	f88d 3005 	strb.w	r3, [sp, #5]
    33e0:	f88d 3006 	strb.w	r3, [sp, #6]
    33e4:	f88d 3007 	strb.w	r3, [sp, #7]
    33e8:	9a01      	ldr	r2, [sp, #4]
    33ea:	920c      	str	r2, [sp, #48]	; 0x30
    33ec:	4619      	mov	r1, r3
    33ee:	f363 0100 	bfi	r1, r3, #0, #1
    33f2:	f363 0141 	bfi	r1, r3, #1, #1
    33f6:	f363 0182 	bfi	r1, r3, #2, #1
    33fa:	f363 01c5 	bfi	r1, r3, #3, #3
    33fe:	2201      	movs	r2, #1
    3400:	f362 1188 	bfi	r1, r2, #6, #3
    3404:	2208      	movs	r2, #8
    3406:	f362 2152 	bfi	r1, r2, #9, #10
    340a:	f363 41de 	bfi	r1, r3, #19, #12
    340e:	f363 71df 	bfi	r1, r3, #31, #1
    3412:	aa0c      	add	r2, sp, #48	; 0x30
    3414:	4874      	ldr	r0, [pc, #464]	; (35e8 <usage_fault+0x2c8>)
    3416:	f005 fb39 	bl	8a8c <z_impl_z_log_msg_static_create>
    341a:	e7ad      	b.n	3378 <usage_fault+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    341c:	4b75      	ldr	r3, [pc, #468]	; (35f4 <usage_fault+0x2d4>)
    341e:	9313      	str	r3, [sp, #76]	; 0x4c
    3420:	2302      	movs	r3, #2
    3422:	f88d 3004 	strb.w	r3, [sp, #4]
    3426:	2300      	movs	r3, #0
    3428:	f88d 3005 	strb.w	r3, [sp, #5]
    342c:	f88d 3006 	strb.w	r3, [sp, #6]
    3430:	f88d 3007 	strb.w	r3, [sp, #7]
    3434:	9a01      	ldr	r2, [sp, #4]
    3436:	9212      	str	r2, [sp, #72]	; 0x48
    3438:	4619      	mov	r1, r3
    343a:	f363 0100 	bfi	r1, r3, #0, #1
    343e:	f363 0141 	bfi	r1, r3, #1, #1
    3442:	f363 0182 	bfi	r1, r3, #2, #1
    3446:	f363 01c5 	bfi	r1, r3, #3, #3
    344a:	2201      	movs	r2, #1
    344c:	f362 1188 	bfi	r1, r2, #6, #3
    3450:	2208      	movs	r2, #8
    3452:	f362 2152 	bfi	r1, r2, #9, #10
    3456:	f363 41de 	bfi	r1, r3, #19, #12
    345a:	f363 71df 	bfi	r1, r3, #31, #1
    345e:	aa12      	add	r2, sp, #72	; 0x48
    3460:	4861      	ldr	r0, [pc, #388]	; (35e8 <usage_fault+0x2c8>)
    3462:	f005 fb13 	bl	8a8c <z_impl_z_log_msg_static_create>
    3466:	e78c      	b.n	3382 <usage_fault+0x62>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    3468:	4b63      	ldr	r3, [pc, #396]	; (35f8 <usage_fault+0x2d8>)
    346a:	9319      	str	r3, [sp, #100]	; 0x64
    346c:	2402      	movs	r4, #2
    346e:	f88d 4004 	strb.w	r4, [sp, #4]
    3472:	2300      	movs	r3, #0
    3474:	f88d 3005 	strb.w	r3, [sp, #5]
    3478:	f88d 3006 	strb.w	r3, [sp, #6]
    347c:	f88d 3007 	strb.w	r3, [sp, #7]
    3480:	9a01      	ldr	r2, [sp, #4]
    3482:	9218      	str	r2, [sp, #96]	; 0x60
    3484:	4619      	mov	r1, r3
    3486:	f363 0100 	bfi	r1, r3, #0, #1
    348a:	f363 0141 	bfi	r1, r3, #1, #1
    348e:	f363 0182 	bfi	r1, r3, #2, #1
    3492:	f363 01c5 	bfi	r1, r3, #3, #3
    3496:	2201      	movs	r2, #1
    3498:	f362 1188 	bfi	r1, r2, #6, #3
    349c:	2208      	movs	r2, #8
    349e:	f362 2152 	bfi	r1, r2, #9, #10
    34a2:	f363 41de 	bfi	r1, r3, #19, #12
    34a6:	f363 71df 	bfi	r1, r3, #31, #1
    34aa:	aa18      	add	r2, sp, #96	; 0x60
    34ac:	484e      	ldr	r0, [pc, #312]	; (35e8 <usage_fault+0x2c8>)
    34ae:	f005 faed 	bl	8a8c <z_impl_z_log_msg_static_create>
		reason = K_ERR_STACK_CHK_FAIL;
    34b2:	e76b      	b.n	338c <usage_fault+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    34b4:	4b51      	ldr	r3, [pc, #324]	; (35fc <usage_fault+0x2dc>)
    34b6:	931f      	str	r3, [sp, #124]	; 0x7c
    34b8:	2302      	movs	r3, #2
    34ba:	f88d 3004 	strb.w	r3, [sp, #4]
    34be:	2300      	movs	r3, #0
    34c0:	f88d 3005 	strb.w	r3, [sp, #5]
    34c4:	f88d 3006 	strb.w	r3, [sp, #6]
    34c8:	f88d 3007 	strb.w	r3, [sp, #7]
    34cc:	9a01      	ldr	r2, [sp, #4]
    34ce:	921e      	str	r2, [sp, #120]	; 0x78
    34d0:	4619      	mov	r1, r3
    34d2:	f363 0100 	bfi	r1, r3, #0, #1
    34d6:	f363 0141 	bfi	r1, r3, #1, #1
    34da:	f363 0182 	bfi	r1, r3, #2, #1
    34de:	f363 01c5 	bfi	r1, r3, #3, #3
    34e2:	2201      	movs	r2, #1
    34e4:	f362 1188 	bfi	r1, r2, #6, #3
    34e8:	2208      	movs	r2, #8
    34ea:	f362 2152 	bfi	r1, r2, #9, #10
    34ee:	f363 41de 	bfi	r1, r3, #19, #12
    34f2:	f363 71df 	bfi	r1, r3, #31, #1
    34f6:	aa1e      	add	r2, sp, #120	; 0x78
    34f8:	483b      	ldr	r0, [pc, #236]	; (35e8 <usage_fault+0x2c8>)
    34fa:	f005 fac7 	bl	8a8c <z_impl_z_log_msg_static_create>
    34fe:	e74b      	b.n	3398 <usage_fault+0x78>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3500:	4b3f      	ldr	r3, [pc, #252]	; (3600 <usage_fault+0x2e0>)
    3502:	9325      	str	r3, [sp, #148]	; 0x94
    3504:	2302      	movs	r3, #2
    3506:	f88d 3004 	strb.w	r3, [sp, #4]
    350a:	2300      	movs	r3, #0
    350c:	f88d 3005 	strb.w	r3, [sp, #5]
    3510:	f88d 3006 	strb.w	r3, [sp, #6]
    3514:	f88d 3007 	strb.w	r3, [sp, #7]
    3518:	9a01      	ldr	r2, [sp, #4]
    351a:	9224      	str	r2, [sp, #144]	; 0x90
    351c:	4619      	mov	r1, r3
    351e:	f363 0100 	bfi	r1, r3, #0, #1
    3522:	f363 0141 	bfi	r1, r3, #1, #1
    3526:	f363 0182 	bfi	r1, r3, #2, #1
    352a:	f363 01c5 	bfi	r1, r3, #3, #3
    352e:	2201      	movs	r2, #1
    3530:	f362 1188 	bfi	r1, r2, #6, #3
    3534:	2208      	movs	r2, #8
    3536:	f362 2152 	bfi	r1, r2, #9, #10
    353a:	f363 41de 	bfi	r1, r3, #19, #12
    353e:	f363 71df 	bfi	r1, r3, #31, #1
    3542:	aa24      	add	r2, sp, #144	; 0x90
    3544:	4828      	ldr	r0, [pc, #160]	; (35e8 <usage_fault+0x2c8>)
    3546:	f005 faa1 	bl	8a8c <z_impl_z_log_msg_static_create>
    354a:	e72b      	b.n	33a4 <usage_fault+0x84>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    354c:	4b2d      	ldr	r3, [pc, #180]	; (3604 <usage_fault+0x2e4>)
    354e:	932b      	str	r3, [sp, #172]	; 0xac
    3550:	2302      	movs	r3, #2
    3552:	f88d 3004 	strb.w	r3, [sp, #4]
    3556:	2300      	movs	r3, #0
    3558:	f88d 3005 	strb.w	r3, [sp, #5]
    355c:	f88d 3006 	strb.w	r3, [sp, #6]
    3560:	f88d 3007 	strb.w	r3, [sp, #7]
    3564:	9a01      	ldr	r2, [sp, #4]
    3566:	922a      	str	r2, [sp, #168]	; 0xa8
    3568:	4619      	mov	r1, r3
    356a:	f363 0100 	bfi	r1, r3, #0, #1
    356e:	f363 0141 	bfi	r1, r3, #1, #1
    3572:	f363 0182 	bfi	r1, r3, #2, #1
    3576:	f363 01c5 	bfi	r1, r3, #3, #3
    357a:	2201      	movs	r2, #1
    357c:	f362 1188 	bfi	r1, r2, #6, #3
    3580:	2208      	movs	r2, #8
    3582:	f362 2152 	bfi	r1, r2, #9, #10
    3586:	f363 41de 	bfi	r1, r3, #19, #12
    358a:	f363 71df 	bfi	r1, r3, #31, #1
    358e:	aa2a      	add	r2, sp, #168	; 0xa8
    3590:	4815      	ldr	r0, [pc, #84]	; (35e8 <usage_fault+0x2c8>)
    3592:	f005 fa7b 	bl	8a8c <z_impl_z_log_msg_static_create>
    3596:	e70b      	b.n	33b0 <usage_fault+0x90>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3598:	4b1b      	ldr	r3, [pc, #108]	; (3608 <usage_fault+0x2e8>)
    359a:	9331      	str	r3, [sp, #196]	; 0xc4
    359c:	2302      	movs	r3, #2
    359e:	f88d 3004 	strb.w	r3, [sp, #4]
    35a2:	2300      	movs	r3, #0
    35a4:	f88d 3005 	strb.w	r3, [sp, #5]
    35a8:	f88d 3006 	strb.w	r3, [sp, #6]
    35ac:	f88d 3007 	strb.w	r3, [sp, #7]
    35b0:	9a01      	ldr	r2, [sp, #4]
    35b2:	9230      	str	r2, [sp, #192]	; 0xc0
    35b4:	4619      	mov	r1, r3
    35b6:	f363 0100 	bfi	r1, r3, #0, #1
    35ba:	f363 0141 	bfi	r1, r3, #1, #1
    35be:	f363 0182 	bfi	r1, r3, #2, #1
    35c2:	f363 01c5 	bfi	r1, r3, #3, #3
    35c6:	2201      	movs	r2, #1
    35c8:	f362 1188 	bfi	r1, r2, #6, #3
    35cc:	2208      	movs	r2, #8
    35ce:	f362 2152 	bfi	r1, r2, #9, #10
    35d2:	f363 41de 	bfi	r1, r3, #19, #12
    35d6:	f363 71df 	bfi	r1, r3, #31, #1
    35da:	aa30      	add	r2, sp, #192	; 0xc0
    35dc:	4802      	ldr	r0, [pc, #8]	; (35e8 <usage_fault+0x2c8>)
    35de:	f005 fa55 	bl	8a8c <z_impl_z_log_msg_static_create>
    35e2:	e6eb      	b.n	33bc <usage_fault+0x9c>
    35e4:	0000ad10 	.word	0x0000ad10
    35e8:	0000a610 	.word	0x0000a610
    35ec:	e000ed00 	.word	0xe000ed00
    35f0:	0000ad28 	.word	0x0000ad28
    35f4:	0000ad3c 	.word	0x0000ad3c
    35f8:	0000ad58 	.word	0x0000ad58
    35fc:	0000ad84 	.word	0x0000ad84
    3600:	0000ada4 	.word	0x0000ada4
    3604:	0000adcc 	.word	0x0000adcc
    3608:	0000ade8 	.word	0x0000ade8

0000360c <hard_fault>:
{
    360c:	b5f0      	push	{r4, r5, r6, r7, lr}
    360e:	b09b      	sub	sp, #108	; 0x6c
    3610:	af00      	add	r7, sp, #0
    3612:	4606      	mov	r6, r0
    3614:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    3616:	4b85      	ldr	r3, [pc, #532]	; (382c <hard_fault+0x220>)
    3618:	61fb      	str	r3, [r7, #28]
    361a:	2302      	movs	r3, #2
    361c:	713b      	strb	r3, [r7, #4]
    361e:	2400      	movs	r4, #0
    3620:	717c      	strb	r4, [r7, #5]
    3622:	71bc      	strb	r4, [r7, #6]
    3624:	71fc      	strb	r4, [r7, #7]
    3626:	687b      	ldr	r3, [r7, #4]
    3628:	61bb      	str	r3, [r7, #24]
    362a:	4621      	mov	r1, r4
    362c:	f364 0100 	bfi	r1, r4, #0, #1
    3630:	f364 0141 	bfi	r1, r4, #1, #1
    3634:	f364 0182 	bfi	r1, r4, #2, #1
    3638:	f364 01c5 	bfi	r1, r4, #3, #3
    363c:	2301      	movs	r3, #1
    363e:	f363 1188 	bfi	r1, r3, #6, #3
    3642:	2308      	movs	r3, #8
    3644:	f363 2152 	bfi	r1, r3, #9, #10
    3648:	f364 41de 	bfi	r1, r4, #19, #12
    364c:	f364 71df 	bfi	r1, r4, #31, #1
    3650:	4623      	mov	r3, r4
    3652:	f107 0218 	add.w	r2, r7, #24
    3656:	4876      	ldr	r0, [pc, #472]	; (3830 <hard_fault+0x224>)
    3658:	f005 fa18 	bl	8a8c <z_impl_z_log_msg_static_create>
	*recoverable = false;
    365c:	702c      	strb	r4, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    365e:	4b75      	ldr	r3, [pc, #468]	; (3834 <hard_fault+0x228>)
    3660:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3662:	f014 0402 	ands.w	r4, r4, #2
    3666:	d10c      	bne.n	3682 <hard_fault+0x76>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3668:	4b72      	ldr	r3, [pc, #456]	; (3834 <hard_fault+0x228>)
    366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    366c:	2b00      	cmp	r3, #0
    366e:	db2c      	blt.n	36ca <hard_fault+0xbe>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3670:	4b70      	ldr	r3, [pc, #448]	; (3834 <hard_fault+0x228>)
    3672:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    3674:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    3678:	d14a      	bne.n	3710 <hard_fault+0x104>
}
    367a:	4620      	mov	r0, r4
    367c:	376c      	adds	r7, #108	; 0x6c
    367e:	46bd      	mov	sp, r7
    3680:	bdf0      	pop	{r4, r5, r6, r7, pc}
		PR_EXC("  Bus fault on vector table read");
    3682:	4b6d      	ldr	r3, [pc, #436]	; (3838 <hard_fault+0x22c>)
    3684:	667b      	str	r3, [r7, #100]	; 0x64
    3686:	2302      	movs	r3, #2
    3688:	713b      	strb	r3, [r7, #4]
    368a:	2400      	movs	r4, #0
    368c:	717c      	strb	r4, [r7, #5]
    368e:	71bc      	strb	r4, [r7, #6]
    3690:	71fc      	strb	r4, [r7, #7]
    3692:	687b      	ldr	r3, [r7, #4]
    3694:	663b      	str	r3, [r7, #96]	; 0x60
    3696:	4621      	mov	r1, r4
    3698:	f364 0100 	bfi	r1, r4, #0, #1
    369c:	f364 0141 	bfi	r1, r4, #1, #1
    36a0:	f364 0182 	bfi	r1, r4, #2, #1
    36a4:	f364 01c5 	bfi	r1, r4, #3, #3
    36a8:	2301      	movs	r3, #1
    36aa:	f363 1188 	bfi	r1, r3, #6, #3
    36ae:	2308      	movs	r3, #8
    36b0:	f363 2152 	bfi	r1, r3, #9, #10
    36b4:	f364 41de 	bfi	r1, r4, #19, #12
    36b8:	f364 71df 	bfi	r1, r4, #31, #1
    36bc:	4623      	mov	r3, r4
    36be:	f107 0260 	add.w	r2, r7, #96	; 0x60
    36c2:	485b      	ldr	r0, [pc, #364]	; (3830 <hard_fault+0x224>)
    36c4:	f005 f9e2 	bl	8a8c <z_impl_z_log_msg_static_create>
    36c8:	e7d7      	b.n	367a <hard_fault+0x6e>
		PR_EXC("  Debug event");
    36ca:	4b5c      	ldr	r3, [pc, #368]	; (383c <hard_fault+0x230>)
    36cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    36ce:	2302      	movs	r3, #2
    36d0:	713b      	strb	r3, [r7, #4]
    36d2:	2300      	movs	r3, #0
    36d4:	717b      	strb	r3, [r7, #5]
    36d6:	71bb      	strb	r3, [r7, #6]
    36d8:	71fb      	strb	r3, [r7, #7]
    36da:	687a      	ldr	r2, [r7, #4]
    36dc:	64ba      	str	r2, [r7, #72]	; 0x48
    36de:	4619      	mov	r1, r3
    36e0:	f363 0100 	bfi	r1, r3, #0, #1
    36e4:	f363 0141 	bfi	r1, r3, #1, #1
    36e8:	f363 0182 	bfi	r1, r3, #2, #1
    36ec:	f363 01c5 	bfi	r1, r3, #3, #3
    36f0:	2201      	movs	r2, #1
    36f2:	f362 1188 	bfi	r1, r2, #6, #3
    36f6:	2208      	movs	r2, #8
    36f8:	f362 2152 	bfi	r1, r2, #9, #10
    36fc:	f363 41de 	bfi	r1, r3, #19, #12
    3700:	f363 71df 	bfi	r1, r3, #31, #1
    3704:	f107 0248 	add.w	r2, r7, #72	; 0x48
    3708:	4849      	ldr	r0, [pc, #292]	; (3830 <hard_fault+0x224>)
    370a:	f005 f9bf 	bl	8a8c <z_impl_z_log_msg_static_create>
    370e:	e7b4      	b.n	367a <hard_fault+0x6e>
		PR_EXC("  Fault escalation (see below)");
    3710:	4b4b      	ldr	r3, [pc, #300]	; (3840 <hard_fault+0x234>)
    3712:	637b      	str	r3, [r7, #52]	; 0x34
    3714:	2302      	movs	r3, #2
    3716:	713b      	strb	r3, [r7, #4]
    3718:	2300      	movs	r3, #0
    371a:	717b      	strb	r3, [r7, #5]
    371c:	71bb      	strb	r3, [r7, #6]
    371e:	71fb      	strb	r3, [r7, #7]
    3720:	687a      	ldr	r2, [r7, #4]
    3722:	633a      	str	r2, [r7, #48]	; 0x30
    3724:	4619      	mov	r1, r3
    3726:	f363 0100 	bfi	r1, r3, #0, #1
    372a:	f363 0141 	bfi	r1, r3, #1, #1
    372e:	f363 0182 	bfi	r1, r3, #2, #1
    3732:	f363 01c5 	bfi	r1, r3, #3, #3
    3736:	2201      	movs	r2, #1
    3738:	f362 1188 	bfi	r1, r2, #6, #3
    373c:	2208      	movs	r2, #8
    373e:	f362 2152 	bfi	r1, r2, #9, #10
    3742:	f363 41de 	bfi	r1, r3, #19, #12
    3746:	f363 71df 	bfi	r1, r3, #31, #1
    374a:	f107 0230 	add.w	r2, r7, #48	; 0x30
    374e:	4838      	ldr	r0, [pc, #224]	; (3830 <hard_fault+0x224>)
    3750:	f005 f99c 	bl	8a8c <z_impl_z_log_msg_static_create>
		if (z_arm_is_synchronous_svc(esf)) {
    3754:	4630      	mov	r0, r6
    3756:	f7ff fa75 	bl	2c44 <z_arm_is_synchronous_svc>
    375a:	2800      	cmp	r0, #0
    375c:	d042      	beq.n	37e4 <hard_fault+0x1d8>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    375e:	6834      	ldr	r4, [r6, #0]
    3760:	466d      	mov	r5, sp
    3762:	b088      	sub	sp, #32
    3764:	466b      	mov	r3, sp
    3766:	f113 0210 	adds.w	r2, r3, #16
    376a:	d00f      	beq.n	378c <hard_fault+0x180>
    376c:	210c      	movs	r1, #12
    376e:	b14a      	cbz	r2, 3784 <hard_fault+0x178>
    3770:	4608      	mov	r0, r1
    3772:	2904      	cmp	r1, #4
    3774:	dd03      	ble.n	377e <hard_fault+0x172>
    3776:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 3844 <hard_fault+0x238>
    377a:	f8c3 c014 	str.w	ip, [r3, #20]
    377e:	2808      	cmp	r0, #8
    3780:	dd07      	ble.n	3792 <hard_fault+0x186>
    3782:	619c      	str	r4, [r3, #24]
    3784:	290b      	cmp	r1, #11
    3786:	dd2a      	ble.n	37de <hard_fault+0x1d2>
    3788:	240c      	movs	r4, #12
    378a:	e004      	b.n	3796 <hard_fault+0x18a>
    378c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3790:	e7ed      	b.n	376e <hard_fault+0x162>
    3792:	f06f 041b 	mvn.w	r4, #27
    3796:	b13a      	cbz	r2, 37a8 <hard_fault+0x19c>
    3798:	2103      	movs	r1, #3
    379a:	7139      	strb	r1, [r7, #4]
    379c:	2100      	movs	r1, #0
    379e:	7179      	strb	r1, [r7, #5]
    37a0:	71b9      	strb	r1, [r7, #6]
    37a2:	71f9      	strb	r1, [r7, #7]
    37a4:	6878      	ldr	r0, [r7, #4]
    37a6:	6118      	str	r0, [r3, #16]
    37a8:	2100      	movs	r1, #0
    37aa:	f36f 0100 	bfc	r1, #0, #1
    37ae:	f36f 0141 	bfc	r1, #1, #1
    37b2:	f36f 0182 	bfc	r1, #2, #1
    37b6:	f36f 01c5 	bfc	r1, #3, #3
    37ba:	2301      	movs	r3, #1
    37bc:	f363 1188 	bfi	r1, r3, #6, #3
    37c0:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    37c4:	f363 2152 	bfi	r1, r3, #9, #10
    37c8:	f36f 41de 	bfc	r1, #19, #12
    37cc:	f36f 71df 	bfc	r1, #31, #1
    37d0:	2300      	movs	r3, #0
    37d2:	4817      	ldr	r0, [pc, #92]	; (3830 <hard_fault+0x224>)
    37d4:	f005 f95a 	bl	8a8c <z_impl_z_log_msg_static_create>
    37d8:	46ad      	mov	sp, r5
			reason = esf->basic.r0;
    37da:	6834      	ldr	r4, [r6, #0]
    37dc:	e74d      	b.n	367a <hard_fault+0x6e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    37de:	f06f 041b 	mvn.w	r4, #27
    37e2:	e7d8      	b.n	3796 <hard_fault+0x18a>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    37e4:	4b13      	ldr	r3, [pc, #76]	; (3834 <hard_fault+0x228>)
    37e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37e8:	f013 0fff 	tst.w	r3, #255	; 0xff
    37ec:	d10f      	bne.n	380e <hard_fault+0x202>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    37ee:	4b11      	ldr	r3, [pc, #68]	; (3834 <hard_fault+0x228>)
    37f0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    37f2:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
    37f6:	d111      	bne.n	381c <hard_fault+0x210>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    37f8:	4b0e      	ldr	r3, [pc, #56]	; (3834 <hard_fault+0x228>)
    37fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    37fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3800:	f4ff af3b 	bcc.w	367a <hard_fault+0x6e>
			reason = usage_fault(esf);
    3804:	4630      	mov	r0, r6
    3806:	f7ff fd8b 	bl	3320 <usage_fault>
    380a:	4604      	mov	r4, r0
	return reason;
    380c:	e735      	b.n	367a <hard_fault+0x6e>
			reason = mem_manage_fault(esf, 1, recoverable);
    380e:	462a      	mov	r2, r5
    3810:	2101      	movs	r1, #1
    3812:	4630      	mov	r0, r6
    3814:	f7ff fa78 	bl	2d08 <mem_manage_fault>
    3818:	4604      	mov	r4, r0
    381a:	e72e      	b.n	367a <hard_fault+0x6e>
			reason = bus_fault(esf, 1, recoverable);
    381c:	462a      	mov	r2, r5
    381e:	2101      	movs	r1, #1
    3820:	4630      	mov	r0, r6
    3822:	f7ff fbe9 	bl	2ff8 <bus_fault>
    3826:	4604      	mov	r4, r0
    3828:	e727      	b.n	367a <hard_fault+0x6e>
    382a:	bf00      	nop
    382c:	0000ae14 	.word	0x0000ae14
    3830:	0000a610 	.word	0x0000a610
    3834:	e000ed00 	.word	0xe000ed00
    3838:	0000ae2c 	.word	0x0000ae2c
    383c:	0000ae50 	.word	0x0000ae50
    3840:	0000ae60 	.word	0x0000ae60
    3844:	0000ae80 	.word	0x0000ae80

00003848 <debug_monitor>:
{
    3848:	b500      	push	{lr}
    384a:	b089      	sub	sp, #36	; 0x24
	*recoverable = false;
    384c:	2300      	movs	r3, #0
    384e:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
    3850:	4a13      	ldr	r2, [pc, #76]	; (38a0 <debug_monitor+0x58>)
    3852:	9207      	str	r2, [sp, #28]
    3854:	2202      	movs	r2, #2
    3856:	f88d 2004 	strb.w	r2, [sp, #4]
    385a:	f88d 3005 	strb.w	r3, [sp, #5]
    385e:	f88d 3006 	strb.w	r3, [sp, #6]
    3862:	f88d 3007 	strb.w	r3, [sp, #7]
    3866:	9a01      	ldr	r2, [sp, #4]
    3868:	9206      	str	r2, [sp, #24]
    386a:	4619      	mov	r1, r3
    386c:	f363 0100 	bfi	r1, r3, #0, #1
    3870:	f363 0141 	bfi	r1, r3, #1, #1
    3874:	f363 0182 	bfi	r1, r3, #2, #1
    3878:	f363 01c5 	bfi	r1, r3, #3, #3
    387c:	2201      	movs	r2, #1
    387e:	f362 1188 	bfi	r1, r2, #6, #3
    3882:	2208      	movs	r2, #8
    3884:	f362 2152 	bfi	r1, r2, #9, #10
    3888:	f363 41de 	bfi	r1, r3, #19, #12
    388c:	f363 71df 	bfi	r1, r3, #31, #1
    3890:	aa06      	add	r2, sp, #24
    3892:	4804      	ldr	r0, [pc, #16]	; (38a4 <debug_monitor+0x5c>)
    3894:	f005 f8fa 	bl	8a8c <z_impl_z_log_msg_static_create>
}
    3898:	b009      	add	sp, #36	; 0x24
    389a:	f85d fb04 	ldr.w	pc, [sp], #4
    389e:	bf00      	nop
    38a0:	0000ae9c 	.word	0x0000ae9c
    38a4:	0000a610 	.word	0x0000a610

000038a8 <reserved_exception>:
{
    38a8:	b590      	push	{r4, r7, lr}
    38aa:	b083      	sub	sp, #12
    38ac:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** %s %d) *****",
    38ae:	290f      	cmp	r1, #15
    38b0:	dc23      	bgt.n	38fa <reserved_exception+0x52>
    38b2:	4c30      	ldr	r4, [pc, #192]	; (3974 <reserved_exception+0xcc>)
    38b4:	3910      	subs	r1, #16
    38b6:	2300      	movs	r3, #0
    38b8:	713b      	strb	r3, [r7, #4]
    38ba:	2302      	movs	r3, #2
    38bc:	717b      	strb	r3, [r7, #5]
    38be:	b08a      	sub	sp, #40	; 0x28
    38c0:	46ec      	mov	ip, sp
    38c2:	f11c 0210 	adds.w	r2, ip, #16
    38c6:	d01a      	beq.n	38fe <reserved_exception+0x56>
    38c8:	2012      	movs	r0, #18
    38ca:	b122      	cbz	r2, 38d6 <reserved_exception+0x2e>
    38cc:	2804      	cmp	r0, #4
    38ce:	dd02      	ble.n	38d6 <reserved_exception+0x2e>
    38d0:	4b29      	ldr	r3, [pc, #164]	; (3978 <reserved_exception+0xd0>)
    38d2:	f8cc 3014 	str.w	r3, [ip, #20]
    38d6:	2300      	movs	r3, #0
    38d8:	703b      	strb	r3, [r7, #0]
    38da:	2302      	movs	r3, #2
    38dc:	707b      	strb	r3, [r7, #1]
    38de:	b1e2      	cbz	r2, 391a <reserved_exception+0x72>
    38e0:	4603      	mov	r3, r0
    38e2:	2808      	cmp	r0, #8
    38e4:	dd01      	ble.n	38ea <reserved_exception+0x42>
    38e6:	f8cc 4018 	str.w	r4, [ip, #24]
    38ea:	2b0c      	cmp	r3, #12
    38ec:	dd01      	ble.n	38f2 <reserved_exception+0x4a>
    38ee:	f8cc 101c 	str.w	r1, [ip, #28]
    38f2:	f10c 0320 	add.w	r3, ip, #32
    38f6:	2100      	movs	r1, #0
    38f8:	e00d      	b.n	3916 <reserved_exception+0x6e>
    38fa:	4c20      	ldr	r4, [pc, #128]	; (397c <reserved_exception+0xd4>)
    38fc:	e7da      	b.n	38b4 <reserved_exception+0xc>
    38fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3902:	e7e2      	b.n	38ca <reserved_exception+0x22>
    3904:	f101 0408 	add.w	r4, r1, #8
    3908:	eb04 0e07 	add.w	lr, r4, r7
    390c:	f81e ec08 	ldrb.w	lr, [lr, #-8]
    3910:	f803 eb01 	strb.w	lr, [r3], #1
    3914:	3101      	adds	r1, #1
    3916:	2901      	cmp	r1, #1
    3918:	d9f4      	bls.n	3904 <reserved_exception+0x5c>
    391a:	2811      	cmp	r0, #17
    391c:	dd26      	ble.n	396c <reserved_exception+0xc4>
    391e:	2312      	movs	r3, #18
    3920:	b14a      	cbz	r2, 3936 <reserved_exception+0x8e>
    3922:	2104      	movs	r1, #4
    3924:	7139      	strb	r1, [r7, #4]
    3926:	2100      	movs	r1, #0
    3928:	7179      	strb	r1, [r7, #5]
    392a:	71b9      	strb	r1, [r7, #6]
    392c:	2101      	movs	r1, #1
    392e:	71f9      	strb	r1, [r7, #7]
    3930:	6878      	ldr	r0, [r7, #4]
    3932:	f8cc 0010 	str.w	r0, [ip, #16]
    3936:	2100      	movs	r1, #0
    3938:	f36f 0100 	bfc	r1, #0, #1
    393c:	f36f 0141 	bfc	r1, #1, #1
    3940:	f36f 0182 	bfc	r1, #2, #1
    3944:	f36f 01c5 	bfc	r1, #3, #3
    3948:	2001      	movs	r0, #1
    394a:	f360 1188 	bfi	r1, r0, #6, #3
    394e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    3952:	f363 2152 	bfi	r1, r3, #9, #10
    3956:	f36f 41de 	bfc	r1, #19, #12
    395a:	f36f 71df 	bfc	r1, #31, #1
    395e:	2300      	movs	r3, #0
    3960:	4807      	ldr	r0, [pc, #28]	; (3980 <reserved_exception+0xd8>)
    3962:	f005 f893 	bl	8a8c <z_impl_z_log_msg_static_create>
}
    3966:	370c      	adds	r7, #12
    3968:	46bd      	mov	sp, r7
    396a:	bd90      	pop	{r4, r7, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    396c:	f06f 031b 	mvn.w	r3, #27
    3970:	e7d6      	b.n	3920 <reserved_exception+0x78>
    3972:	bf00      	nop
    3974:	0000aec0 	.word	0x0000aec0
    3978:	0000aef4 	.word	0x0000aef4
    397c:	0000aed8 	.word	0x0000aed8
    3980:	0000a610 	.word	0x0000a610

00003984 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3984:	b530      	push	{r4, r5, lr}
    3986:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3988:	4b1a      	ldr	r3, [pc, #104]	; (39f4 <z_arm_fault+0x70>)
    398a:	685c      	ldr	r4, [r3, #4]
    398c:	f3c4 0408 	ubfx	r4, r4, #0, #9
    3990:	2300      	movs	r3, #0
    3992:	f383 8811 	msr	BASEPRI, r3
    3996:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
    399a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    399e:	f7ff f96f 	bl	2c80 <get_esf>
    39a2:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    39a4:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    39a8:	4621      	mov	r1, r4
    39aa:	f005 f997 	bl	8cdc <fault_handle>
	if (recoverable) {
    39ae:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    39b2:	b10b      	cbz	r3, 39b8 <z_arm_fault+0x34>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    39b4:	b00b      	add	sp, #44	; 0x2c
    39b6:	bd30      	pop	{r4, r5, pc}
    39b8:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    39ba:	2220      	movs	r2, #32
    39bc:	4629      	mov	r1, r5
    39be:	a801      	add	r0, sp, #4
    39c0:	f005 fa49 	bl	8e56 <memcpy>
	if (nested_exc) {
    39c4:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    39c8:	b14b      	cbz	r3, 39de <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    39ca:	9b08      	ldr	r3, [sp, #32]
    39cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    39d0:	b95a      	cbnz	r2, 39ea <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    39d2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    39d6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    39da:	9308      	str	r3, [sp, #32]
    39dc:	e005      	b.n	39ea <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    39de:	9b08      	ldr	r3, [sp, #32]
    39e0:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    39e4:	f023 0301 	bic.w	r3, r3, #1
    39e8:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    39ea:	a901      	add	r1, sp, #4
    39ec:	4620      	mov	r0, r4
    39ee:	f005 f940 	bl	8c72 <z_arm_fatal_error>
    39f2:	e7df      	b.n	39b4 <z_arm_fault+0x30>
    39f4:	e000ed00 	.word	0xe000ed00

000039f8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    39f8:	4b04      	ldr	r3, [pc, #16]	; (3a0c <z_arm_fault_init+0x14>)
    39fa:	695a      	ldr	r2, [r3, #20]
    39fc:	f042 0210 	orr.w	r2, r2, #16
    3a00:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    3a02:	695a      	ldr	r2, [r3, #20]
    3a04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    3a08:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3a0a:	4770      	bx	lr
    3a0c:	e000ed00 	.word	0xe000ed00

00003a10 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    3a10:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3a14:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3a18:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3a1a:	4672      	mov	r2, lr
	bl z_arm_fault
    3a1c:	f7ff ffb2 	bl	3984 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    3a20:	bd01      	pop	{r0, pc}
    3a22:	bf00      	nop

00003a24 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3a24:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3a26:	e007      	b.n	3a38 <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a28:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3a2c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3a30:	2120      	movs	r1, #32
    3a32:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    3a36:	3201      	adds	r2, #1
    3a38:	2a44      	cmp	r2, #68	; 0x44
    3a3a:	dc09      	bgt.n	3a50 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    3a3c:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    3a3e:	2b00      	cmp	r3, #0
    3a40:	daf2      	bge.n	3a28 <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3a42:	f003 030f 	and.w	r3, r3, #15
    3a46:	4903      	ldr	r1, [pc, #12]	; (3a54 <z_arm_interrupt_init+0x30>)
    3a48:	4419      	add	r1, r3
    3a4a:	2320      	movs	r3, #32
    3a4c:	760b      	strb	r3, [r1, #24]
    3a4e:	e7f2      	b.n	3a36 <z_arm_interrupt_init+0x12>
	}
}
    3a50:	4770      	bx	lr
    3a52:	bf00      	nop
    3a54:	e000ecfc 	.word	0xe000ecfc

00003a58 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    3a58:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    3a5a:	4915      	ldr	r1, [pc, #84]	; (3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>)
    strb r0, [r1]
    3a5c:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3a5e:	2000      	movs	r0, #0
    msr CONTROL, r0
    3a60:	f380 8814 	msr	CONTROL, r0
    isb
    3a64:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    3a68:	2000      	movs	r0, #0
    msr MSPLIM, r0
    3a6a:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    3a6e:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3a72:	f7fd fed9 	bl	1828 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3a76:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3a78:	490e      	ldr	r1, [pc, #56]	; (3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>)
    str r0, [r1]
    3a7a:	6008      	str	r0, [r1, #0]
    dsb
    3a7c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3a80:	480d      	ldr	r0, [pc, #52]	; (3ab8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x20>)
    msr msp, r0
    3a82:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3a86:	f000 f841 	bl	3b0c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3a8a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3a8c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3a90:	480a      	ldr	r0, [pc, #40]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3a92:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    3a96:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3a98:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3a9c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3aa0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3aa2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3aa4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3aa8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3aac:	f7fe ffee 	bl	2a8c <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
    3ab0:	200011a2 	.word	0x200011a2
    ldr r1, =_SCS_MPU_CTRL
    3ab4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3ab8:	200021e8 	.word	0x200021e8
    ldr r0, =z_interrupt_stacks
    3abc:	200014a8 	.word	0x200014a8

00003ac0 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    3ac0:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3ac4:	4905      	ldr	r1, [pc, #20]	; (3adc <__NVIC_SystemReset+0x1c>)
    3ac6:	68ca      	ldr	r2, [r1, #12]
    3ac8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3acc:	4b04      	ldr	r3, [pc, #16]	; (3ae0 <__NVIC_SystemReset+0x20>)
    3ace:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3ad0:	60cb      	str	r3, [r1, #12]
    3ad2:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3ad6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3ad8:	e7fd      	b.n	3ad6 <__NVIC_SystemReset+0x16>
    3ada:	bf00      	nop
    3adc:	e000ed00 	.word	0xe000ed00
    3ae0:	05fa0004 	.word	0x05fa0004

00003ae4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3ae4:	4b08      	ldr	r3, [pc, #32]	; (3b08 <z_arm_clear_arm_mpu_config+0x24>)
    3ae6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    3aea:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    3aee:	2300      	movs	r3, #0
    3af0:	e006      	b.n	3b00 <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    3af2:	4a05      	ldr	r2, [pc, #20]	; (3b08 <z_arm_clear_arm_mpu_config+0x24>)
    3af4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
    3af8:	2100      	movs	r1, #0
    3afa:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    3afe:	3301      	adds	r3, #1
    3b00:	4283      	cmp	r3, r0
    3b02:	dbf6      	blt.n	3af2 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    3b04:	4770      	bx	lr
    3b06:	bf00      	nop
    3b08:	e000ed00 	.word	0xe000ed00

00003b0c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3b0c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3b0e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3b10:	2400      	movs	r4, #0
    3b12:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3b16:	f7ff ffe5 	bl	3ae4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3b1a:	4623      	mov	r3, r4
    3b1c:	e008      	b.n	3b30 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    3b1e:	f103 0120 	add.w	r1, r3, #32
    3b22:	4a0e      	ldr	r2, [pc, #56]	; (3b5c <z_arm_init_arch_hw_at_boot+0x50>)
    3b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3b28:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    3b2c:	3301      	adds	r3, #1
    3b2e:	b2db      	uxtb	r3, r3
    3b30:	2b0f      	cmp	r3, #15
    3b32:	d9f4      	bls.n	3b1e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3b34:	2300      	movs	r3, #0
    3b36:	e008      	b.n	3b4a <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3b38:	f103 0160 	add.w	r1, r3, #96	; 0x60
    3b3c:	4a07      	ldr	r2, [pc, #28]	; (3b5c <z_arm_init_arch_hw_at_boot+0x50>)
    3b3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3b42:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    3b46:	3301      	adds	r3, #1
    3b48:	b2db      	uxtb	r3, r3
    3b4a:	2b0f      	cmp	r3, #15
    3b4c:	d9f4      	bls.n	3b38 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    3b4e:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3b50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b54:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3b58:	bd10      	pop	{r4, pc}
    3b5a:	bf00      	nop
    3b5c:	e000e100 	.word	0xe000e100

00003b60 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    3b60:	b508      	push	{r3, lr}
	if (_current == thread) {
    3b62:	4b0a      	ldr	r3, [pc, #40]	; (3b8c <z_impl_k_thread_abort+0x2c>)
    3b64:	689b      	ldr	r3, [r3, #8]
    3b66:	4283      	cmp	r3, r0
    3b68:	d002      	beq.n	3b70 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    3b6a:	f003 fb61 	bl	7230 <z_thread_abort>
}
    3b6e:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3b70:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3b74:	2b00      	cmp	r3, #0
    3b76:	d0f8      	beq.n	3b6a <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3b78:	4b05      	ldr	r3, [pc, #20]	; (3b90 <z_impl_k_thread_abort+0x30>)
    3b7a:	685a      	ldr	r2, [r3, #4]
    3b7c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3b80:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3b82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3b84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3b88:	625a      	str	r2, [r3, #36]	; 0x24
    3b8a:	e7ee      	b.n	3b6a <z_impl_k_thread_abort+0xa>
    3b8c:	20000f88 	.word	0x20000f88
    3b90:	e000ed00 	.word	0xe000ed00

00003b94 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    3b94:	b510      	push	{r4, lr}
    3b96:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3b98:	4c0a      	ldr	r4, [pc, #40]	; (3bc4 <z_arm_configure_static_mpu_regions+0x30>)
    3b9a:	4623      	mov	r3, r4
    3b9c:	4a0a      	ldr	r2, [pc, #40]	; (3bc8 <z_arm_configure_static_mpu_regions+0x34>)
    3b9e:	2101      	movs	r1, #1
    3ba0:	480a      	ldr	r0, [pc, #40]	; (3bcc <z_arm_configure_static_mpu_regions+0x38>)
    3ba2:	f005 f923 	bl	8dec <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    3ba6:	2300      	movs	r3, #0
    3ba8:	9301      	str	r3, [sp, #4]
    3baa:	9302      	str	r3, [sp, #8]
    3bac:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    3bae:	4b08      	ldr	r3, [pc, #32]	; (3bd0 <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    3bb0:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    3bb2:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    3bb4:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    3bb6:	2101      	movs	r1, #1
    3bb8:	a801      	add	r0, sp, #4
    3bba:	f005 f91b 	bl	8df4 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    3bbe:	b004      	add	sp, #16
    3bc0:	bd10      	pop	{r4, pc}
    3bc2:	bf00      	nop
    3bc4:	20070000 	.word	0x20070000
    3bc8:	20000000 	.word	0x20000000
    3bcc:	0000af08 	.word	0x0000af08
    3bd0:	200001e8 	.word	0x200001e8

00003bd4 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
    3bd4:	4b02      	ldr	r3, [pc, #8]	; (3be0 <mpu_init+0xc>)
    3bd6:	4a03      	ldr	r2, [pc, #12]	; (3be4 <mpu_init+0x10>)
    3bd8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
    3bdc:	4770      	bx	lr
    3bde:	bf00      	nop
    3be0:	e000ed00 	.word	0xe000ed00
    3be4:	0044ffaa 	.word	0x0044ffaa

00003be8 <mpu_set_region>:
	MPU->RNR = rnr;
    3be8:	4b03      	ldr	r3, [pc, #12]	; (3bf8 <mpu_set_region+0x10>)
    3bea:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
    3bee:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
    3bf2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
    3bf6:	4770      	bx	lr
    3bf8:	e000ed00 	.word	0xe000ed00

00003bfc <mpu_region_get_conf>:
	MPU->RNR = rnr;
    3bfc:	4b0e      	ldr	r3, [pc, #56]	; (3c38 <mpu_region_get_conf+0x3c>)
    3bfe:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    3c02:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    3c06:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
    3c0a:	7a0a      	ldrb	r2, [r1, #8]
    3c0c:	f360 0204 	bfi	r2, r0, #0, #5
    3c10:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
    3c12:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    3c16:	f3c2 0242 	ubfx	r2, r2, #1, #3
    3c1a:	7a08      	ldrb	r0, [r1, #8]
    3c1c:	f362 1047 	bfi	r0, r2, #5, #3
    3c20:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
    3c22:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    3c26:	f022 021f 	bic.w	r2, r2, #31
    3c2a:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
    3c2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    3c30:	f023 031f 	bic.w	r3, r3, #31
    3c34:	60cb      	str	r3, [r1, #12]
}
    3c36:	4770      	bx	lr
    3c38:	e000ed00 	.word	0xe000ed00

00003c3c <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    3c3c:	b570      	push	{r4, r5, r6, lr}
    3c3e:	4605      	mov	r5, r0
    3c40:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    3c42:	2400      	movs	r4, #0
    3c44:	e000      	b.n	3c48 <mpu_mark_areas_for_dynamic_regions+0xc>
    3c46:	3401      	adds	r4, #1
    3c48:	42a6      	cmp	r6, r4
    3c4a:	dd1e      	ble.n	3c8a <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    3c4c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3c50:	009a      	lsls	r2, r3, #2
    3c52:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3c56:	6859      	ldr	r1, [r3, #4]
    3c58:	2900      	cmp	r1, #0
    3c5a:	d0f4      	beq.n	3c46 <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    3c5c:	58a8      	ldr	r0, [r5, r2]
    3c5e:	f005 f895 	bl	8d8c <get_region_index>
		dyn_reg_info[i].index =
    3c62:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3c66:	4a0b      	ldr	r2, [pc, #44]	; (3c94 <mpu_mark_areas_for_dynamic_regions+0x58>)
    3c68:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    3c6c:	f110 0f16 	cmn.w	r0, #22
    3c70:	d00c      	beq.n	3c8c <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    3c72:	4b09      	ldr	r3, [pc, #36]	; (3c98 <mpu_mark_areas_for_dynamic_regions+0x5c>)
    3c74:	781b      	ldrb	r3, [r3, #0]
    3c76:	4298      	cmp	r0, r3
    3c78:	da09      	bge.n	3c8e <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    3c7a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    3c7e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    3c82:	3104      	adds	r1, #4
    3c84:	f7ff ffba 	bl	3bfc <mpu_region_get_conf>
    3c88:	e7dd      	b.n	3c46 <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    3c8a:	2000      	movs	r0, #0
}
    3c8c:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    3c8e:	f06f 0015 	mvn.w	r0, #21
    3c92:	e7fb      	b.n	3c8c <mpu_mark_areas_for_dynamic_regions+0x50>
    3c94:	20000df8 	.word	0x20000df8
    3c98:	2000119f 	.word	0x2000119f

00003c9c <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    3c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c9e:	b083      	sub	sp, #12
    3ca0:	af00      	add	r7, sp, #0
    3ca2:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    3ca4:	2807      	cmp	r0, #7
    3ca6:	d805      	bhi.n	3cb4 <region_allocate_and_init+0x18>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    3ca8:	f005 f84a 	bl	8d40 <region_init>

	return index;
    3cac:	4620      	mov	r0, r4
}
    3cae:	370c      	adds	r7, #12
    3cb0:	46bd      	mov	sp, r7
    3cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3cb4:	466d      	mov	r5, sp
    3cb6:	b088      	sub	sp, #32
    3cb8:	466b      	mov	r3, sp
    3cba:	f113 0210 	adds.w	r2, r3, #16
    3cbe:	d031      	beq.n	3d24 <region_allocate_and_init+0x88>
    3cc0:	210c      	movs	r1, #12
    3cc2:	b13a      	cbz	r2, 3cd4 <region_allocate_and_init+0x38>
    3cc4:	4608      	mov	r0, r1
    3cc6:	2904      	cmp	r1, #4
    3cc8:	dd01      	ble.n	3cce <region_allocate_and_init+0x32>
    3cca:	4e19      	ldr	r6, [pc, #100]	; (3d30 <region_allocate_and_init+0x94>)
    3ccc:	615e      	str	r6, [r3, #20]
    3cce:	2808      	cmp	r0, #8
    3cd0:	dd00      	ble.n	3cd4 <region_allocate_and_init+0x38>
    3cd2:	619c      	str	r4, [r3, #24]
    3cd4:	290b      	cmp	r1, #11
    3cd6:	dd28      	ble.n	3d2a <region_allocate_and_init+0x8e>
    3cd8:	240c      	movs	r4, #12
    3cda:	b13a      	cbz	r2, 3cec <region_allocate_and_init+0x50>
    3cdc:	2103      	movs	r1, #3
    3cde:	7139      	strb	r1, [r7, #4]
    3ce0:	2100      	movs	r1, #0
    3ce2:	7179      	strb	r1, [r7, #5]
    3ce4:	71b9      	strb	r1, [r7, #6]
    3ce6:	71f9      	strb	r1, [r7, #7]
    3ce8:	6878      	ldr	r0, [r7, #4]
    3cea:	6118      	str	r0, [r3, #16]
    3cec:	2100      	movs	r1, #0
    3cee:	f36f 0100 	bfc	r1, #0, #1
    3cf2:	f36f 0141 	bfc	r1, #1, #1
    3cf6:	f36f 0182 	bfc	r1, #2, #1
    3cfa:	f36f 01c5 	bfc	r1, #3, #3
    3cfe:	2301      	movs	r3, #1
    3d00:	f363 1188 	bfi	r1, r3, #6, #3
    3d04:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    3d08:	f364 2152 	bfi	r1, r4, #9, #10
    3d0c:	f36f 41de 	bfc	r1, #19, #12
    3d10:	f36f 71df 	bfc	r1, #31, #1
    3d14:	2300      	movs	r3, #0
    3d16:	4807      	ldr	r0, [pc, #28]	; (3d34 <region_allocate_and_init+0x98>)
    3d18:	f004 feb8 	bl	8a8c <z_impl_z_log_msg_static_create>
    3d1c:	46ad      	mov	sp, r5
		return -EINVAL;
    3d1e:	f06f 0015 	mvn.w	r0, #21
    3d22:	e7c4      	b.n	3cae <region_allocate_and_init+0x12>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3d24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3d28:	e7cb      	b.n	3cc2 <region_allocate_and_init+0x26>
    3d2a:	f06f 041b 	mvn.w	r4, #27
    3d2e:	e7d4      	b.n	3cda <region_allocate_and_init+0x3e>
    3d30:	0000af18 	.word	0x0000af18
    3d34:	0000a608 	.word	0x0000a608

00003d38 <mpu_configure_regions_and_partition>:
{
    3d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d3c:	b089      	sub	sp, #36	; 0x24
    3d3e:	af00      	add	r7, sp, #0
    3d40:	4682      	mov	sl, r0
    3d42:	60b9      	str	r1, [r7, #8]
    3d44:	607b      	str	r3, [r7, #4]
	int reg_index = start_reg_index;
    3d46:	4614      	mov	r4, r2
	for (i = 0; i < regions_num; i++) {
    3d48:	f04f 0800 	mov.w	r8, #0
    3d4c:	e0b5      	b.n	3eba <mpu_configure_regions_and_partition+0x182>
			LOG_ERR("Partition %u: sanity check failed.", i);
    3d4e:	466d      	mov	r5, sp
    3d50:	b088      	sub	sp, #32
    3d52:	466b      	mov	r3, sp
    3d54:	f113 0210 	adds.w	r2, r3, #16
    3d58:	d032      	beq.n	3dc0 <mpu_configure_regions_and_partition+0x88>
    3d5a:	210c      	movs	r1, #12
    3d5c:	b142      	cbz	r2, 3d70 <mpu_configure_regions_and_partition+0x38>
    3d5e:	4608      	mov	r0, r1
    3d60:	2904      	cmp	r1, #4
    3d62:	dd01      	ble.n	3d68 <mpu_configure_regions_and_partition+0x30>
    3d64:	4c94      	ldr	r4, [pc, #592]	; (3fb8 <mpu_configure_regions_and_partition+0x280>)
    3d66:	615c      	str	r4, [r3, #20]
    3d68:	2808      	cmp	r0, #8
    3d6a:	dd01      	ble.n	3d70 <mpu_configure_regions_and_partition+0x38>
    3d6c:	f8c3 8018 	str.w	r8, [r3, #24]
    3d70:	290b      	cmp	r1, #11
    3d72:	dd28      	ble.n	3dc6 <mpu_configure_regions_and_partition+0x8e>
    3d74:	240c      	movs	r4, #12
    3d76:	b13a      	cbz	r2, 3d88 <mpu_configure_regions_and_partition+0x50>
    3d78:	2103      	movs	r1, #3
    3d7a:	7439      	strb	r1, [r7, #16]
    3d7c:	2100      	movs	r1, #0
    3d7e:	7479      	strb	r1, [r7, #17]
    3d80:	74b9      	strb	r1, [r7, #18]
    3d82:	74f9      	strb	r1, [r7, #19]
    3d84:	6938      	ldr	r0, [r7, #16]
    3d86:	6118      	str	r0, [r3, #16]
    3d88:	2100      	movs	r1, #0
    3d8a:	f36f 0100 	bfc	r1, #0, #1
    3d8e:	f36f 0141 	bfc	r1, #1, #1
    3d92:	f36f 0182 	bfc	r1, #2, #1
    3d96:	f36f 01c5 	bfc	r1, #3, #3
    3d9a:	2301      	movs	r3, #1
    3d9c:	f363 1188 	bfi	r1, r3, #6, #3
    3da0:	f404 747b 	and.w	r4, r4, #1004	; 0x3ec
    3da4:	f364 2152 	bfi	r1, r4, #9, #10
    3da8:	f36f 41de 	bfc	r1, #19, #12
    3dac:	f36f 71df 	bfc	r1, #31, #1
    3db0:	2300      	movs	r3, #0
    3db2:	4882      	ldr	r0, [pc, #520]	; (3fbc <mpu_configure_regions_and_partition+0x284>)
    3db4:	f004 fe6a 	bl	8a8c <z_impl_z_log_msg_static_create>
    3db8:	46ad      	mov	sp, r5
			return -EINVAL;
    3dba:	f06f 0415 	mvn.w	r4, #21
    3dbe:	e03c      	b.n	3e3a <mpu_configure_regions_and_partition+0x102>
			LOG_ERR("Partition %u: sanity check failed.", i);
    3dc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3dc4:	e7ca      	b.n	3d5c <mpu_configure_regions_and_partition+0x24>
    3dc6:	f06f 041b 	mvn.w	r4, #27
    3dca:	e7d4      	b.n	3d76 <mpu_configure_regions_and_partition+0x3e>
			LOG_ERR("Invalid underlying region index %u",
    3dcc:	466d      	mov	r5, sp
    3dce:	b088      	sub	sp, #32
    3dd0:	466b      	mov	r3, sp
    3dd2:	f113 0210 	adds.w	r2, r3, #16
    3dd6:	d035      	beq.n	3e44 <mpu_configure_regions_and_partition+0x10c>
    3dd8:	210c      	movs	r1, #12
    3dda:	b13a      	cbz	r2, 3dec <mpu_configure_regions_and_partition+0xb4>
    3ddc:	4608      	mov	r0, r1
    3dde:	2904      	cmp	r1, #4
    3de0:	dd01      	ble.n	3de6 <mpu_configure_regions_and_partition+0xae>
    3de2:	4c77      	ldr	r4, [pc, #476]	; (3fc0 <mpu_configure_regions_and_partition+0x288>)
    3de4:	615c      	str	r4, [r3, #20]
    3de6:	2808      	cmp	r0, #8
    3de8:	dd00      	ble.n	3dec <mpu_configure_regions_and_partition+0xb4>
    3dea:	619e      	str	r6, [r3, #24]
    3dec:	290b      	cmp	r1, #11
    3dee:	dd2c      	ble.n	3e4a <mpu_configure_regions_and_partition+0x112>
    3df0:	240c      	movs	r4, #12
    3df2:	b13a      	cbz	r2, 3e04 <mpu_configure_regions_and_partition+0xcc>
    3df4:	2103      	movs	r1, #3
    3df6:	7439      	strb	r1, [r7, #16]
    3df8:	2100      	movs	r1, #0
    3dfa:	7479      	strb	r1, [r7, #17]
    3dfc:	74b9      	strb	r1, [r7, #18]
    3dfe:	74f9      	strb	r1, [r7, #19]
    3e00:	6938      	ldr	r0, [r7, #16]
    3e02:	6118      	str	r0, [r3, #16]
    3e04:	2100      	movs	r1, #0
    3e06:	f36f 0100 	bfc	r1, #0, #1
    3e0a:	f36f 0141 	bfc	r1, #1, #1
    3e0e:	f36f 0182 	bfc	r1, #2, #1
    3e12:	f36f 01c5 	bfc	r1, #3, #3
    3e16:	2301      	movs	r3, #1
    3e18:	f363 1188 	bfi	r1, r3, #6, #3
    3e1c:	f404 737b 	and.w	r3, r4, #1004	; 0x3ec
    3e20:	f363 2152 	bfi	r1, r3, #9, #10
    3e24:	f36f 41de 	bfc	r1, #19, #12
    3e28:	f36f 71df 	bfc	r1, #31, #1
    3e2c:	2300      	movs	r3, #0
    3e2e:	4863      	ldr	r0, [pc, #396]	; (3fbc <mpu_configure_regions_and_partition+0x284>)
    3e30:	f004 fe2c 	bl	8a8c <z_impl_z_log_msg_static_create>
    3e34:	46ad      	mov	sp, r5
			return -EINVAL;
    3e36:	f06f 0415 	mvn.w	r4, #21
}
    3e3a:	4620      	mov	r0, r4
    3e3c:	3724      	adds	r7, #36	; 0x24
    3e3e:	46bd      	mov	sp, r7
    3e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LOG_ERR("Invalid underlying region index %u",
    3e44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    3e48:	e7c7      	b.n	3dda <mpu_configure_regions_and_partition+0xa2>
    3e4a:	f06f 041b 	mvn.w	r4, #27
    3e4e:	e7d0      	b.n	3df2 <mpu_configure_regions_and_partition+0xba>
		if ((regions[i].start == u_reg_base) &&
    3e50:	4581      	cmp	r9, r0
    3e52:	d168      	bne.n	3f26 <mpu_configure_regions_and_partition+0x1ee>
			mpu_configure_region(u_reg_index, &regions[i]);
    3e54:	4629      	mov	r1, r5
    3e56:	b2f0      	uxtb	r0, r6
    3e58:	f004 ffa9 	bl	8dae <mpu_configure_region>
    3e5c:	e02b      	b.n	3eb6 <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
    3e5e:	4a59      	ldr	r2, [pc, #356]	; (3fc4 <mpu_configure_regions_and_partition+0x28c>)
    3e60:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
    3e64:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    3e68:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    3e6c:	f021 011f 	bic.w	r1, r1, #31
    3e70:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
    3e72:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    3e76:	4629      	mov	r1, r5
    3e78:	b2e0      	uxtb	r0, r4
    3e7a:	f004 ff98 	bl	8dae <mpu_configure_region>
    3e7e:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    3e80:	f110 0f16 	cmn.w	r0, #22
    3e84:	d0d9      	beq.n	3e3a <mpu_configure_regions_and_partition+0x102>
			reg_index++;
    3e86:	3401      	adds	r4, #1
    3e88:	e015      	b.n	3eb6 <mpu_configure_regions_and_partition+0x17e>
				regions[i].start - 1);
    3e8a:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    3e8c:	494d      	ldr	r1, [pc, #308]	; (3fc4 <mpu_configure_regions_and_partition+0x28c>)
    3e8e:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    3e92:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    3e96:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    3e9a:	f023 031f 	bic.w	r3, r3, #31
    3e9e:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    3ea0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    3ea4:	4629      	mov	r1, r5
    3ea6:	b2e0      	uxtb	r0, r4
    3ea8:	f004 ff81 	bl	8dae <mpu_configure_region>
    3eac:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    3eae:	f110 0f16 	cmn.w	r0, #22
    3eb2:	d0c2      	beq.n	3e3a <mpu_configure_regions_and_partition+0x102>
			reg_index++;
    3eb4:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    3eb6:	f108 0801 	add.w	r8, r8, #1
    3eba:	68bb      	ldr	r3, [r7, #8]
    3ebc:	4598      	cmp	r8, r3
    3ebe:	dabc      	bge.n	3e3a <mpu_configure_regions_and_partition+0x102>
		if (regions[i].size == 0U) {
    3ec0:	eb08 0548 	add.w	r5, r8, r8, lsl #1
    3ec4:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    3ec8:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
    3ecc:	686e      	ldr	r6, [r5, #4]
    3ece:	2e00      	cmp	r6, #0
    3ed0:	d0f1      	beq.n	3eb6 <mpu_configure_regions_and_partition+0x17e>
		if (do_sanity_check &&
    3ed2:	687b      	ldr	r3, [r7, #4]
    3ed4:	b12b      	cbz	r3, 3ee2 <mpu_configure_regions_and_partition+0x1aa>
			(!mpu_partition_is_valid(&regions[i]))) {
    3ed6:	4628      	mov	r0, r5
    3ed8:	f004 ff46 	bl	8d68 <mpu_partition_is_valid>
		if (do_sanity_check &&
    3edc:	2800      	cmp	r0, #0
    3ede:	f43f af36 	beq.w	3d4e <mpu_configure_regions_and_partition+0x16>
			get_region_index(regions[i].start, regions[i].size);
    3ee2:	4631      	mov	r1, r6
    3ee4:	f85a 000b 	ldr.w	r0, [sl, fp]
    3ee8:	f004 ff50 	bl	8d8c <get_region_index>
    3eec:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
    3eee:	f110 0f16 	cmn.w	r0, #22
    3ef2:	f43f af6b 	beq.w	3dcc <mpu_configure_regions_and_partition+0x94>
    3ef6:	4284      	cmp	r4, r0
    3ef8:	f77f af68 	ble.w	3dcc <mpu_configure_regions_and_partition+0x94>
	MPU->RNR = rnr;
    3efc:	4b31      	ldr	r3, [pc, #196]	; (3fc4 <mpu_configure_regions_and_partition+0x28c>)
    3efe:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    3f02:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    3f06:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    3f0a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
    3f0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    3f12:	f043 091f 	orr.w	r9, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    3f16:	f85a 300b 	ldr.w	r3, [sl, fp]
    3f1a:	6869      	ldr	r1, [r5, #4]
    3f1c:	4419      	add	r1, r3
    3f1e:	1e48      	subs	r0, r1, #1
    3f20:	60f8      	str	r0, [r7, #12]
		if ((regions[i].start == u_reg_base) &&
    3f22:	4293      	cmp	r3, r2
    3f24:	d094      	beq.n	3e50 <mpu_configure_regions_and_partition+0x118>
		} else if (regions[i].start == u_reg_base) {
    3f26:	4293      	cmp	r3, r2
    3f28:	d099      	beq.n	3e5e <mpu_configure_regions_and_partition+0x126>
		} else if (reg_last == u_reg_last) {
    3f2a:	68fa      	ldr	r2, [r7, #12]
    3f2c:	4591      	cmp	r9, r2
    3f2e:	d0ac      	beq.n	3e8a <mpu_configure_regions_and_partition+0x152>
				regions[i].start - 1);
    3f30:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    3f32:	4924      	ldr	r1, [pc, #144]	; (3fc4 <mpu_configure_regions_and_partition+0x28c>)
    3f34:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    3f38:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    3f3c:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    3f40:	f023 031f 	bic.w	r3, r3, #31
    3f44:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    3f46:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    3f4a:	4629      	mov	r1, r5
    3f4c:	b2e0      	uxtb	r0, r4
    3f4e:	f004 ff2e 	bl	8dae <mpu_configure_region>
    3f52:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    3f54:	f110 0f16 	cmn.w	r0, #22
    3f58:	f43f af6f 	beq.w	3e3a <mpu_configure_regions_and_partition+0x102>
			reg_index++;
    3f5c:	3001      	adds	r0, #1
	MPU->RNR = rnr;
    3f5e:	4b19      	ldr	r3, [pc, #100]	; (3fc4 <mpu_configure_regions_and_partition+0x28c>)
    3f60:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    3f64:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    3f68:	7e3a      	ldrb	r2, [r7, #24]
    3f6a:	f361 0204 	bfi	r2, r1, #0, #5
    3f6e:	763a      	strb	r2, [r7, #24]
	return MPU->RLAR;
    3f70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    3f74:	f3c3 0342 	ubfx	r3, r3, #1, #3
    3f78:	b2d2      	uxtb	r2, r2
    3f7a:	f363 1247 	bfi	r2, r3, #5, #3
    3f7e:	763a      	strb	r2, [r7, #24]
			fill_region.base = regions[i].start +
    3f80:	f85a 300b 	ldr.w	r3, [sl, fp]
				regions[i].size;
    3f84:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    3f86:	4413      	add	r3, r2
    3f88:	613b      	str	r3, [r7, #16]
			REGION_LIMIT_ADDR((regions[i].start +
    3f8a:	f023 031f 	bic.w	r3, r3, #31
    3f8e:	68fa      	ldr	r2, [r7, #12]
    3f90:	eba9 0902 	sub.w	r9, r9, r2
    3f94:	444b      	add	r3, r9
    3f96:	3b01      	subs	r3, #1
    3f98:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    3f9c:	61fb      	str	r3, [r7, #28]
				region_allocate_and_init(reg_index,
    3f9e:	f107 0110 	add.w	r1, r7, #16
    3fa2:	b2c0      	uxtb	r0, r0
    3fa4:	f7ff fe7a 	bl	3c9c <region_allocate_and_init>
    3fa8:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    3faa:	f110 0f16 	cmn.w	r0, #22
    3fae:	f43f af44 	beq.w	3e3a <mpu_configure_regions_and_partition+0x102>
			reg_index++;
    3fb2:	3401      	adds	r4, #1
    3fb4:	e77f      	b.n	3eb6 <mpu_configure_regions_and_partition+0x17e>
    3fb6:	bf00      	nop
    3fb8:	0000af40 	.word	0x0000af40
    3fbc:	0000a608 	.word	0x0000a608
    3fc0:	0000af64 	.word	0x0000af64
    3fc4:	e000ed00 	.word	0xe000ed00

00003fc8 <mpu_configure_static_mpu_regions>:
{
    3fc8:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    3fca:	4c03      	ldr	r4, [pc, #12]	; (3fd8 <mpu_configure_static_mpu_regions+0x10>)
	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    3fcc:	2301      	movs	r3, #1
    3fce:	7822      	ldrb	r2, [r4, #0]
    3fd0:	f7ff feb2 	bl	3d38 <mpu_configure_regions_and_partition>
	static_regions_num = mpu_reg_index;
    3fd4:	7020      	strb	r0, [r4, #0]
}
    3fd6:	bd10      	pop	{r4, pc}
    3fd8:	2000119f 	.word	0x2000119f

00003fdc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3fdc:	4b04      	ldr	r3, [pc, #16]	; (3ff0 <arm_core_mpu_enable+0x14>)
    3fde:	2205      	movs	r2, #5
    3fe0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3fe4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3fe8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3fec:	4770      	bx	lr
    3fee:	bf00      	nop
    3ff0:	e000ed00 	.word	0xe000ed00

00003ff4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3ff4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3ff8:	4b02      	ldr	r3, [pc, #8]	; (4004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
    3ffa:	2200      	movs	r2, #0
    3ffc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4000:	4770      	bx	lr
    4002:	bf00      	nop
    4004:	e000ed00 	.word	0xe000ed00

00004008 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4008:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    400a:	4b0e      	ldr	r3, [pc, #56]	; (4044 <z_arm_mpu_init+0x3c>)
    400c:	681d      	ldr	r5, [r3, #0]
    400e:	2d08      	cmp	r5, #8
    4010:	d815      	bhi.n	403e <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4012:	f7ff ffef 	bl	3ff4 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    4016:	f7ff fddd 	bl	3bd4 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    401a:	2400      	movs	r4, #0
    401c:	e007      	b.n	402e <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    401e:	4b09      	ldr	r3, [pc, #36]	; (4044 <z_arm_mpu_init+0x3c>)
    4020:	6859      	ldr	r1, [r3, #4]
    4022:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    4026:	4620      	mov	r0, r4
    4028:	f004 fe8a 	bl	8d40 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    402c:	3401      	adds	r4, #1
    402e:	42a5      	cmp	r5, r4
    4030:	d8f5      	bhi.n	401e <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4032:	4b05      	ldr	r3, [pc, #20]	; (4048 <z_arm_mpu_init+0x40>)
    4034:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4036:	f7ff ffd1 	bl	3fdc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    403a:	2000      	movs	r0, #0
}
    403c:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    403e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4042:	e7fb      	b.n	403c <z_arm_mpu_init+0x34>
    4044:	0000af88 	.word	0x0000af88
    4048:	2000119f 	.word	0x2000119f

0000404c <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    404c:	4b01      	ldr	r3, [pc, #4]	; (4054 <__stdout_hook_install+0x8>)
    404e:	6018      	str	r0, [r3, #0]
}
    4050:	4770      	bx	lr
    4052:	bf00      	nop
    4054:	2000002c 	.word	0x2000002c

00004058 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    4058:	4800      	ldr	r0, [pc, #0]	; (405c <get_hf_flags+0x4>)
    405a:	4770      	bx	lr
    405c:	20000e98 	.word	0x20000e98

00004060 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4060:	4b03      	ldr	r3, [pc, #12]	; (4070 <get_subsys+0x10>)
    4062:	1ac0      	subs	r0, r0, r3
    4064:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    4066:	4b03      	ldr	r3, [pc, #12]	; (4074 <get_subsys+0x14>)
    4068:	fb03 f000 	mul.w	r0, r3, r0
    406c:	4770      	bx	lr
    406e:	bf00      	nop
    4070:	20000e20 	.word	0x20000e20
    4074:	b6db6db7 	.word	0xb6db6db7

00004078 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4078:	b538      	push	{r3, r4, r5, lr}
    407a:	4605      	mov	r5, r0
    407c:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    407e:	f7ff ffef 	bl	4060 <get_subsys>
    4082:	4601      	mov	r1, r0
    4084:	2240      	movs	r2, #64	; 0x40
    4086:	4803      	ldr	r0, [pc, #12]	; (4094 <onoff_stop+0x1c>)
    4088:	f004 ffe6 	bl	9058 <stop>
    408c:	4601      	mov	r1, r0
	notify(mgr, res);
    408e:	4628      	mov	r0, r5
    4090:	47a0      	blx	r4
}
    4092:	bd38      	pop	{r3, r4, r5, pc}
    4094:	0000a308 	.word	0x0000a308

00004098 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4098:	b530      	push	{r4, r5, lr}
    409a:	b083      	sub	sp, #12
    409c:	4605      	mov	r5, r0
    409e:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    40a0:	f7ff ffde 	bl	4060 <get_subsys>
    40a4:	4601      	mov	r1, r0
    40a6:	2340      	movs	r3, #64	; 0x40
    40a8:	9300      	str	r3, [sp, #0]
    40aa:	4623      	mov	r3, r4
    40ac:	4a05      	ldr	r2, [pc, #20]	; (40c4 <onoff_start+0x2c>)
    40ae:	4806      	ldr	r0, [pc, #24]	; (40c8 <onoff_start+0x30>)
    40b0:	f004 ffec 	bl	908c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    40b4:	1e01      	subs	r1, r0, #0
    40b6:	db01      	blt.n	40bc <onoff_start+0x24>
		notify(mgr, err);
	}
}
    40b8:	b003      	add	sp, #12
    40ba:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    40bc:	4628      	mov	r0, r5
    40be:	47a0      	blx	r4
}
    40c0:	e7fa      	b.n	40b8 <onoff_start+0x20>
    40c2:	bf00      	nop
    40c4:	000090d5 	.word	0x000090d5
    40c8:	0000a308 	.word	0x0000a308

000040cc <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    40cc:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    40ce:	2805      	cmp	r0, #5
    40d0:	d815      	bhi.n	40fe <clock_event_handler+0x32>
    40d2:	e8df f000 	tbb	[pc, r0]
    40d6:	1a03      	.short	0x1a03
    40d8:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    40dc:	2100      	movs	r1, #0
    40de:	480d      	ldr	r0, [pc, #52]	; (4114 <clock_event_handler+0x48>)
    40e0:	f004 ff43 	bl	8f6a <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    40e4:	6883      	ldr	r3, [r0, #8]
    40e6:	f013 0f07 	tst.w	r3, #7
    40ea:	d108      	bne.n	40fe <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    40ec:	2100      	movs	r1, #0
    40ee:	4809      	ldr	r0, [pc, #36]	; (4114 <clock_event_handler+0x48>)
    40f0:	f004 ffa0 	bl	9034 <clkstarted_handle>
    40f4:	e003      	b.n	40fe <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    40f6:	2102      	movs	r1, #2
    40f8:	4806      	ldr	r0, [pc, #24]	; (4114 <clock_event_handler+0x48>)
    40fa:	f004 ff9b 	bl	9034 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    40fe:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    4100:	2103      	movs	r1, #3
    4102:	4804      	ldr	r0, [pc, #16]	; (4114 <clock_event_handler+0x48>)
    4104:	f004 ff96 	bl	9034 <clkstarted_handle>
		break;
    4108:	e7f9      	b.n	40fe <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    410a:	2101      	movs	r1, #1
    410c:	4801      	ldr	r0, [pc, #4]	; (4114 <clock_event_handler+0x48>)
    410e:	f004 ff91 	bl	9034 <clkstarted_handle>
}
    4112:	e7f4      	b.n	40fe <clock_event_handler+0x32>
    4114:	0000a308 	.word	0x0000a308

00004118 <generic_hfclk_start>:
{
    4118:	b510      	push	{r4, lr}
    411a:	b082      	sub	sp, #8
	__asm__ volatile(
    411c:	f04f 0320 	mov.w	r3, #32
    4120:	f3ef 8411 	mrs	r4, BASEPRI
    4124:	f383 8812 	msr	BASEPRI_MAX, r3
    4128:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    412c:	4a14      	ldr	r2, [pc, #80]	; (4180 <generic_hfclk_start+0x68>)
    412e:	6813      	ldr	r3, [r2, #0]
    4130:	f043 0102 	orr.w	r1, r3, #2
    4134:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4136:	f013 0f01 	tst.w	r3, #1
    413a:	d109      	bne.n	4150 <generic_hfclk_start+0x38>
	bool already_started = false;
    413c:	2300      	movs	r3, #0
	__asm__ volatile(
    413e:	f384 8811 	msr	BASEPRI, r4
    4142:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4146:	b9b3      	cbnz	r3, 4176 <generic_hfclk_start+0x5e>
	hfclk_start();
    4148:	f004 ffcc 	bl	90e4 <hfclk_start>
}
    414c:	b002      	add	sp, #8
    414e:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    4150:	f10d 0207 	add.w	r2, sp, #7
    4154:	2101      	movs	r1, #1
    4156:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    415a:	f004 fecc 	bl	8ef6 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    415e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4162:	2b01      	cmp	r3, #1
    4164:	d001      	beq.n	416a <generic_hfclk_start+0x52>
	bool already_started = false;
    4166:	2300      	movs	r3, #0
    4168:	e7e9      	b.n	413e <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    416a:	f7ff ff75 	bl	4058 <get_hf_flags>
    416e:	f004 ff4e 	bl	900e <set_on_state>
			already_started = true;
    4172:	2301      	movs	r3, #1
    4174:	e7e3      	b.n	413e <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    4176:	2100      	movs	r1, #0
    4178:	4802      	ldr	r0, [pc, #8]	; (4184 <generic_hfclk_start+0x6c>)
    417a:	f004 ff5b 	bl	9034 <clkstarted_handle>
		return;
    417e:	e7e5      	b.n	414c <generic_hfclk_start+0x34>
    4180:	20000ec0 	.word	0x20000ec0
    4184:	0000a308 	.word	0x0000a308

00004188 <generic_hfclk_stop>:
{
    4188:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    418a:	4b08      	ldr	r3, [pc, #32]	; (41ac <generic_hfclk_stop+0x24>)
    418c:	e8d3 2fef 	ldaex	r2, [r3]
    4190:	f022 0102 	bic.w	r1, r2, #2
    4194:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4198:	2800      	cmp	r0, #0
    419a:	d1f7      	bne.n	418c <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    419c:	f012 0f01 	tst.w	r2, #1
    41a0:	d000      	beq.n	41a4 <generic_hfclk_stop+0x1c>
}
    41a2:	bd08      	pop	{r3, pc}
	hfclk_stop();
    41a4:	f004 ffb2 	bl	910c <hfclk_stop>
    41a8:	e7fb      	b.n	41a2 <generic_hfclk_stop+0x1a>
    41aa:	bf00      	nop
    41ac:	20000ec0 	.word	0x20000ec0

000041b0 <lfclk_spinwait>:
{
    41b0:	b570      	push	{r4, r5, r6, lr}
    41b2:	b082      	sub	sp, #8
    41b4:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    41b6:	2801      	cmp	r0, #1
    41b8:	d107      	bne.n	41ca <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    41ba:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    41be:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    41c2:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    41c6:	2b02      	cmp	r3, #2
    41c8:	d037      	beq.n	423a <lfclk_spinwait+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    41ca:	f005 fe12 	bl	9df2 <k_is_in_isr>
    41ce:	4604      	mov	r4, r0
    41d0:	b910      	cbnz	r0, 41d8 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    41d2:	4b2b      	ldr	r3, [pc, #172]	; (4280 <lfclk_spinwait+0xd0>)
    41d4:	781b      	ldrb	r3, [r3, #0]
    41d6:	b97b      	cbnz	r3, 41f8 <lfclk_spinwait+0x48>
	__asm__ volatile(
    41d8:	f04f 0320 	mov.w	r3, #32
    41dc:	f3ef 8611 	mrs	r6, BASEPRI
    41e0:	f383 8812 	msr	BASEPRI_MAX, r3
    41e4:	f3bf 8f6f 	isb	sy
    41e8:	2401      	movs	r4, #1
	if (!isr_mode) {
    41ea:	b994      	cbnz	r4, 4212 <lfclk_spinwait+0x62>
    p_reg->INTENCLR = mask;
    41ec:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    41f0:	2202      	movs	r2, #2
    41f2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    41f6:	e00c      	b.n	4212 <lfclk_spinwait+0x62>
	int key = isr_mode ? irq_lock() : 0;
    41f8:	2600      	movs	r6, #0
    41fa:	e7f6      	b.n	41ea <lfclk_spinwait+0x3a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    41fc:	b1fc      	cbz	r4, 423e <lfclk_spinwait+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    41fe:	4630      	mov	r0, r6
    4200:	f7fe face 	bl	27a0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4204:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4208:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    420c:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    420e:	2b01      	cmp	r3, #1
    4210:	d019      	beq.n	4246 <lfclk_spinwait+0x96>
    4212:	f10d 0207 	add.w	r2, sp, #7
    4216:	2100      	movs	r1, #0
    4218:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    421c:	f004 fe6b 	bl	8ef6 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4220:	2800      	cmp	r0, #0
    4222:	d0eb      	beq.n	41fc <lfclk_spinwait+0x4c>
		 && ((type == target_type)
    4224:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4228:	2b02      	cmp	r3, #2
    422a:	d001      	beq.n	4230 <lfclk_spinwait+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    422c:	2d01      	cmp	r5, #1
    422e:	d1e5      	bne.n	41fc <lfclk_spinwait+0x4c>
	if (isr_mode) {
    4230:	b304      	cbz	r4, 4274 <lfclk_spinwait+0xc4>
	__asm__ volatile(
    4232:	f386 8811 	msr	BASEPRI, r6
    4236:	f3bf 8f6f 	isb	sy
}
    423a:	b002      	add	sp, #8
    423c:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
    423e:	2001      	movs	r0, #1
    4240:	f004 ff78 	bl	9134 <k_msleep>
    4244:	e7de      	b.n	4204 <lfclk_spinwait+0x54>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4246:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    424a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    424e:	2b00      	cmp	r3, #0
    4250:	d0df      	beq.n	4212 <lfclk_spinwait+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4252:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4256:	2200      	movs	r2, #0
    4258:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    425c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    4260:	2202      	movs	r2, #2
    4262:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4266:	4a07      	ldr	r2, [pc, #28]	; (4284 <lfclk_spinwait+0xd4>)
    4268:	2120      	movs	r1, #32
    426a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    426e:	2201      	movs	r2, #1
    4270:	609a      	str	r2, [r3, #8]
}
    4272:	e7ce      	b.n	4212 <lfclk_spinwait+0x62>
    p_reg->INTENSET = mask;
    4274:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4278:	2202      	movs	r2, #2
    427a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    427e:	e7dc      	b.n	423a <lfclk_spinwait+0x8a>
    4280:	200011a2 	.word	0x200011a2
    4284:	e000e100 	.word	0xe000e100

00004288 <api_blocking_start>:
{
    4288:	b500      	push	{lr}
    428a:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    428c:	f8cd d000 	str.w	sp, [sp]
    4290:	f8cd d004 	str.w	sp, [sp, #4]
    4294:	2300      	movs	r3, #0
    4296:	9302      	str	r3, [sp, #8]
    4298:	2301      	movs	r3, #1
    429a:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    429c:	466b      	mov	r3, sp
    429e:	4a07      	ldr	r2, [pc, #28]	; (42bc <api_blocking_start+0x34>)
    42a0:	f004 ff10 	bl	90c4 <api_start>
	if (err < 0) {
    42a4:	2800      	cmp	r0, #0
    42a6:	db05      	blt.n	42b4 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    42a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    42ac:	2300      	movs	r3, #0
    42ae:	4668      	mov	r0, sp
    42b0:	f002 fbe2 	bl	6a78 <z_impl_k_sem_take>
}
    42b4:	b005      	add	sp, #20
    42b6:	f85d fb04 	ldr.w	pc, [sp], #4
    42ba:	bf00      	nop
    42bc:	00009161 	.word	0x00009161

000042c0 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    42c0:	b570      	push	{r4, r5, r6, lr}
    42c2:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    42c4:	2200      	movs	r2, #0
    42c6:	2101      	movs	r1, #1
    42c8:	2005      	movs	r0, #5
    42ca:	f004 fcee 	bl	8caa <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    42ce:	4811      	ldr	r0, [pc, #68]	; (4314 <clk_init+0x54>)
    42d0:	f001 f9ba 	bl	5648 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    42d4:	4b10      	ldr	r3, [pc, #64]	; (4318 <clk_init+0x58>)
    42d6:	4298      	cmp	r0, r3
    42d8:	d119      	bne.n	430e <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    42da:	f005 fc12 	bl	9b02 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    42de:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    42e0:	2c03      	cmp	r4, #3
    42e2:	d812      	bhi.n	430a <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    42e4:	4621      	mov	r1, r4
    42e6:	4630      	mov	r0, r6
    42e8:	f004 fe3f 	bl	8f6a <get_sub_data>
    42ec:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    42ee:	4621      	mov	r1, r4
    42f0:	4630      	mov	r0, r6
    42f2:	f004 fe47 	bl	8f84 <get_onoff_manager>
    42f6:	4909      	ldr	r1, [pc, #36]	; (431c <clk_init+0x5c>)
    42f8:	f003 fdb9 	bl	7e6e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    42fc:	2800      	cmp	r0, #0
    42fe:	db05      	blt.n	430c <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4300:	2301      	movs	r3, #1
    4302:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    4304:	441c      	add	r4, r3
    4306:	b2e4      	uxtb	r4, r4
    4308:	e7ea      	b.n	42e0 <clk_init+0x20>
	}

	return 0;
    430a:	2000      	movs	r0, #0
}
    430c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    430e:	f06f 0004 	mvn.w	r0, #4
    4312:	e7fb      	b.n	430c <clk_init+0x4c>
    4314:	000040cd 	.word	0x000040cd
    4318:	0bad0000 	.word	0x0bad0000
    431c:	0000afc0 	.word	0x0000afc0

00004320 <z_nrf_clock_control_lf_on>:
{
    4320:	b510      	push	{r4, lr}
    4322:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4324:	4b0e      	ldr	r3, [pc, #56]	; (4360 <z_nrf_clock_control_lf_on+0x40>)
    4326:	2101      	movs	r1, #1
    4328:	e8d3 2fef 	ldaex	r2, [r3]
    432c:	e8c3 1fe0 	stlex	r0, r1, [r3]
    4330:	2800      	cmp	r0, #0
    4332:	d1f9      	bne.n	4328 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    4334:	b11a      	cbz	r2, 433e <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    4336:	1e63      	subs	r3, r4, #1
    4338:	2b01      	cmp	r3, #1
    433a:	d90d      	bls.n	4358 <z_nrf_clock_control_lf_on+0x38>
}
    433c:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    433e:	4809      	ldr	r0, [pc, #36]	; (4364 <z_nrf_clock_control_lf_on+0x44>)
    4340:	f004 fe20 	bl	8f84 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4344:	4908      	ldr	r1, [pc, #32]	; (4368 <z_nrf_clock_control_lf_on+0x48>)
    4346:	2300      	movs	r3, #0
    4348:	604b      	str	r3, [r1, #4]
    434a:	608b      	str	r3, [r1, #8]
    434c:	60cb      	str	r3, [r1, #12]
    434e:	2301      	movs	r3, #1
    4350:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    4352:	f003 fda9 	bl	7ea8 <onoff_request>
    4356:	e7ee      	b.n	4336 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    4358:	4620      	mov	r0, r4
    435a:	f7ff ff29 	bl	41b0 <lfclk_spinwait>
		break;
    435e:	e7ed      	b.n	433c <z_nrf_clock_control_lf_on+0x1c>
    4360:	20000e1c 	.word	0x20000e1c
    4364:	0000a308 	.word	0x0000a308
    4368:	20000e0c 	.word	0x20000e0c

0000436c <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    436c:	b510      	push	{r4, lr}
    436e:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4370:	280a      	cmp	r0, #10
    4372:	d006      	beq.n	4382 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    4374:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    4376:	4806      	ldr	r0, [pc, #24]	; (4390 <console_out+0x24>)
    4378:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    437a:	685b      	ldr	r3, [r3, #4]
    437c:	4798      	blx	r3

	return c;
}
    437e:	4620      	mov	r0, r4
    4380:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    4382:	4803      	ldr	r0, [pc, #12]	; (4390 <console_out+0x24>)
    4384:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    4386:	685b      	ldr	r3, [r3, #4]
    4388:	210d      	movs	r1, #13
    438a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    438c:	e7f2      	b.n	4374 <console_out+0x8>
    438e:	bf00      	nop
    4390:	0000a350 	.word	0x0000a350

00004394 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    4394:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    4396:	4c04      	ldr	r4, [pc, #16]	; (43a8 <uart_console_hook_install+0x14>)
    4398:	4620      	mov	r0, r4
    439a:	f7ff fe57 	bl	404c <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    439e:	4620      	mov	r0, r4
    43a0:	f7fc fcd4 	bl	d4c <__printk_hook_install>
#endif
}
    43a4:	bd10      	pop	{r4, pc}
    43a6:	bf00      	nop
    43a8:	0000436d 	.word	0x0000436d

000043ac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    43ac:	b508      	push	{r3, lr}
    43ae:	4805      	ldr	r0, [pc, #20]	; (43c4 <uart_console_init+0x18>)
    43b0:	f005 fca7 	bl	9d02 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    43b4:	b118      	cbz	r0, 43be <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    43b6:	f7ff ffed 	bl	4394 <uart_console_hook_install>

	return 0;
    43ba:	2000      	movs	r0, #0
}
    43bc:	bd08      	pop	{r3, pc}
		return -ENODEV;
    43be:	f06f 0012 	mvn.w	r0, #18
    43c2:	e7fb      	b.n	43bc <uart_console_init+0x10>
    43c4:	0000a350 	.word	0x0000a350

000043c8 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    43c8:	b128      	cbz	r0, 43d6 <get_dev+0xe>
    43ca:	2801      	cmp	r0, #1
    43cc:	d101      	bne.n	43d2 <get_dev+0xa>
    43ce:	4803      	ldr	r0, [pc, #12]	; (43dc <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    43d0:	4770      	bx	lr
	const struct device *dev = NULL;
    43d2:	2000      	movs	r0, #0
    43d4:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    43d6:	4802      	ldr	r0, [pc, #8]	; (43e0 <get_dev+0x18>)
    43d8:	4770      	bx	lr
    43da:	bf00      	nop
    43dc:	0000a320 	.word	0x0000a320
    43e0:	0000a338 	.word	0x0000a338

000043e4 <gpio_nrfx_pin_interrupt_configure>:
{
    43e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    43e6:	b085      	sub	sp, #20
    43e8:	460e      	mov	r6, r1
    43ea:	4619      	mov	r1, r3
	return port->config;
    43ec:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    43ee:	7b1b      	ldrb	r3, [r3, #12]
    43f0:	f006 051f 	and.w	r5, r6, #31
    43f4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    43f8:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    43fc:	d022      	beq.n	4444 <gpio_nrfx_pin_interrupt_configure+0x60>
    43fe:	4607      	mov	r7, r0
    4400:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    4402:	2300      	movs	r3, #0
    4404:	9301      	str	r3, [sp, #4]
    4406:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    4408:	4610      	mov	r0, r2
    440a:	f004 ff83 	bl	9314 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    440e:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    4412:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4414:	6899      	ldr	r1, [r3, #8]
    4416:	40f1      	lsrs	r1, r6
    4418:	f011 0f01 	tst.w	r1, #1
    441c:	d102      	bne.n	4424 <gpio_nrfx_pin_interrupt_configure+0x40>
    441e:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    4422:	d014      	beq.n	444e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4424:	2300      	movs	r3, #0
    4426:	aa01      	add	r2, sp, #4
    4428:	4619      	mov	r1, r3
    442a:	4628      	mov	r0, r5
    442c:	f001 fc08 	bl	5c40 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4430:	4b1a      	ldr	r3, [pc, #104]	; (449c <gpio_nrfx_pin_interrupt_configure+0xb8>)
    4432:	4298      	cmp	r0, r3
    4434:	d12f      	bne.n	4496 <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4436:	2101      	movs	r1, #1
    4438:	4628      	mov	r0, r5
    443a:	f001 fd65 	bl	5f08 <nrfx_gpiote_trigger_enable>
	return 0;
    443e:	2000      	movs	r0, #0
}
    4440:	b005      	add	sp, #20
    4442:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    4444:	4628      	mov	r0, r5
    4446:	f001 fd91 	bl	5f6c <nrfx_gpiote_trigger_disable>
		return 0;
    444a:	2000      	movs	r0, #0
    444c:	e7f8      	b.n	4440 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    444e:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    4452:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4454:	2a01      	cmp	r2, #1
    4456:	d012      	beq.n	447e <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    4458:	4a11      	ldr	r2, [pc, #68]	; (44a0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    445a:	3380      	adds	r3, #128	; 0x80
    445c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4460:	f013 0f01 	tst.w	r3, #1
    4464:	d1de      	bne.n	4424 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4466:	f10d 010f 	add.w	r1, sp, #15
    446a:	4628      	mov	r0, r5
    446c:	f001 fcf0 	bl	5e50 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4470:	4b0c      	ldr	r3, [pc, #48]	; (44a4 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    4472:	4298      	cmp	r0, r3
    4474:	d005      	beq.n	4482 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    4476:	f10d 030f 	add.w	r3, sp, #15
    447a:	9302      	str	r3, [sp, #8]
    447c:	e7d2      	b.n	4424 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    447e:	4a0a      	ldr	r2, [pc, #40]	; (44a8 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    4480:	e7eb      	b.n	445a <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    4482:	f10d 000f 	add.w	r0, sp, #15
    4486:	f001 fd37 	bl	5ef8 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    448a:	4b04      	ldr	r3, [pc, #16]	; (449c <gpio_nrfx_pin_interrupt_configure+0xb8>)
    448c:	4298      	cmp	r0, r3
    448e:	d0f2      	beq.n	4476 <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    4490:	f06f 000b 	mvn.w	r0, #11
    4494:	e7d4      	b.n	4440 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    4496:	f06f 0015 	mvn.w	r0, #21
    449a:	e7d1      	b.n	4440 <gpio_nrfx_pin_interrupt_configure+0x5c>
    449c:	0bad0000 	.word	0x0bad0000
    44a0:	50842500 	.word	0x50842500
    44a4:	0bad0004 	.word	0x0bad0004
    44a8:	50842800 	.word	0x50842800

000044ac <gpio_nrfx_pin_configure>:
{
    44ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44b0:	b086      	sub	sp, #24
    44b2:	460e      	mov	r6, r1
    44b4:	4614      	mov	r4, r2
	return port->config;
    44b6:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    44ba:	f898 300c 	ldrb.w	r3, [r8, #12]
    44be:	f001 051f 	and.w	r5, r1, #31
    44c2:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    44c6:	f10d 0117 	add.w	r1, sp, #23
    44ca:	4628      	mov	r0, r5
    44cc:	f001 fcc0 	bl	5e50 <nrfx_gpiote_channel_get>
    44d0:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    44d2:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    44d6:	d039      	beq.n	454c <gpio_nrfx_pin_configure+0xa0>
	nrfx_gpiote_trigger_config_t trigger_config = {
    44d8:	2100      	movs	r1, #0
    44da:	9103      	str	r1, [sp, #12]
    44dc:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    44de:	460b      	mov	r3, r1
    44e0:	aa03      	add	r2, sp, #12
    44e2:	4628      	mov	r0, r5
    44e4:	f001 fbac 	bl	5c40 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    44e8:	4b32      	ldr	r3, [pc, #200]	; (45b4 <gpio_nrfx_pin_configure+0x108>)
    44ea:	4298      	cmp	r0, r3
    44ec:	d15f      	bne.n	45ae <gpio_nrfx_pin_configure+0x102>
	if (free_ch) {
    44ee:	429f      	cmp	r7, r3
    44f0:	d03c      	beq.n	456c <gpio_nrfx_pin_configure+0xc0>
	if (flags & GPIO_OUTPUT) {
    44f2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    44f6:	d047      	beq.n	4588 <gpio_nrfx_pin_configure+0xdc>
		int rv = get_drive(flags, &drive);
    44f8:	f10d 0103 	add.w	r1, sp, #3
    44fc:	4620      	mov	r0, r4
    44fe:	f004 fe96 	bl	922e <get_drive>
		if (rv != 0) {
    4502:	4607      	mov	r7, r0
    4504:	bb48      	cbnz	r0, 455a <gpio_nrfx_pin_configure+0xae>
		nrfx_gpiote_output_config_t output_config = {
    4506:	f89d 3003 	ldrb.w	r3, [sp, #3]
    450a:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    450e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    4512:	bf0c      	ite	eq
    4514:	2301      	moveq	r3, #1
    4516:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    4518:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    451c:	4620      	mov	r0, r4
    451e:	f004 fec9 	bl	92b4 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    4522:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4526:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    452a:	d024      	beq.n	4576 <gpio_nrfx_pin_configure+0xca>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    452c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4530:	2301      	movs	r3, #1
    4532:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    4534:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4536:	2200      	movs	r2, #0
    4538:	a901      	add	r1, sp, #4
    453a:	4628      	mov	r0, r5
    453c:	f001 fc16 	bl	5d6c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4540:	4b1c      	ldr	r3, [pc, #112]	; (45b4 <gpio_nrfx_pin_configure+0x108>)
    4542:	4298      	cmp	r0, r3
    4544:	d009      	beq.n	455a <gpio_nrfx_pin_configure+0xae>
    4546:	f06f 0715 	mvn.w	r7, #21
    454a:	e006      	b.n	455a <gpio_nrfx_pin_configure+0xae>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    454c:	4628      	mov	r0, r5
    454e:	f001 fd2f 	bl	5fb0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    4552:	4b18      	ldr	r3, [pc, #96]	; (45b4 <gpio_nrfx_pin_configure+0x108>)
    4554:	429f      	cmp	r7, r3
    4556:	d004      	beq.n	4562 <gpio_nrfx_pin_configure+0xb6>
		return 0;
    4558:	2700      	movs	r7, #0
}
    455a:	4638      	mov	r0, r7
    455c:	b006      	add	sp, #24
    455e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    4562:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4566:	f001 fcbf 	bl	5ee8 <nrfx_gpiote_channel_free>
    456a:	e7f5      	b.n	4558 <gpio_nrfx_pin_configure+0xac>
		err = nrfx_gpiote_channel_free(ch);
    456c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    4570:	f001 fcba 	bl	5ee8 <nrfx_gpiote_channel_free>
    4574:	e7bd      	b.n	44f2 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4576:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    457a:	d0dc      	beq.n	4536 <gpio_nrfx_pin_configure+0x8a>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    457c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4580:	2301      	movs	r3, #1
    4582:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    4584:	60d3      	str	r3, [r2, #12]
}
    4586:	e7d6      	b.n	4536 <gpio_nrfx_pin_configure+0x8a>
		.pull = get_pull(flags)
    4588:	4620      	mov	r0, r4
    458a:	f004 fe93 	bl	92b4 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    458e:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4592:	2300      	movs	r3, #0
    4594:	461a      	mov	r2, r3
    4596:	a902      	add	r1, sp, #8
    4598:	4628      	mov	r0, r5
    459a:	f001 fb51 	bl	5c40 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    459e:	4b05      	ldr	r3, [pc, #20]	; (45b4 <gpio_nrfx_pin_configure+0x108>)
    45a0:	4298      	cmp	r0, r3
    45a2:	d101      	bne.n	45a8 <gpio_nrfx_pin_configure+0xfc>
    45a4:	2700      	movs	r7, #0
    45a6:	e7d8      	b.n	455a <gpio_nrfx_pin_configure+0xae>
    45a8:	f06f 0715 	mvn.w	r7, #21
    45ac:	e7d5      	b.n	455a <gpio_nrfx_pin_configure+0xae>
		return -EINVAL;
    45ae:	f06f 0715 	mvn.w	r7, #21
    45b2:	e7d2      	b.n	455a <gpio_nrfx_pin_configure+0xae>
    45b4:	0bad0000 	.word	0x0bad0000

000045b8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    45b8:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    45ba:	f001 fc8b 	bl	5ed4 <nrfx_gpiote_is_init>
    45be:	b108      	cbz	r0, 45c4 <gpio_nrfx_init+0xc>
		return 0;
    45c0:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    45c2:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    45c4:	f001 fc5c 	bl	5e80 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    45c8:	4b08      	ldr	r3, [pc, #32]	; (45ec <gpio_nrfx_init+0x34>)
    45ca:	4298      	cmp	r0, r3
    45cc:	d10a      	bne.n	45e4 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    45ce:	2100      	movs	r1, #0
    45d0:	4807      	ldr	r0, [pc, #28]	; (45f0 <gpio_nrfx_init+0x38>)
    45d2:	f001 fc37 	bl	5e44 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    45d6:	2200      	movs	r2, #0
    45d8:	2105      	movs	r1, #5
    45da:	200d      	movs	r0, #13
    45dc:	f004 fb65 	bl	8caa <z_arm_irq_priority_set>
	return 0;
    45e0:	2000      	movs	r0, #0
    45e2:	e7ee      	b.n	45c2 <gpio_nrfx_init+0xa>
		return -EIO;
    45e4:	f06f 0004 	mvn.w	r0, #4
    45e8:	e7eb      	b.n	45c2 <gpio_nrfx_init+0xa>
    45ea:	bf00      	nop
    45ec:	0bad0000 	.word	0x0bad0000
    45f0:	0000934d 	.word	0x0000934d

000045f4 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    45f4:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    45f6:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    45f8:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    45fc:	d06f      	beq.n	46de <baudrate_set+0xea>
    45fe:	d83a      	bhi.n	4676 <baudrate_set+0x82>
    4600:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    4604:	d06e      	beq.n	46e4 <baudrate_set+0xf0>
    4606:	d90a      	bls.n	461e <baudrate_set+0x2a>
    4608:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    460c:	d075      	beq.n	46fa <baudrate_set+0x106>
    460e:	d924      	bls.n	465a <baudrate_set+0x66>
    4610:	f647 2312 	movw	r3, #31250	; 0x7a12
    4614:	4299      	cmp	r1, r3
    4616:	d12b      	bne.n	4670 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4618:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    461c:	e013      	b.n	4646 <baudrate_set+0x52>
	switch (baudrate) {
    461e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    4622:	d061      	beq.n	46e8 <baudrate_set+0xf4>
    4624:	d907      	bls.n	4636 <baudrate_set+0x42>
    4626:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    462a:	d063      	beq.n	46f4 <baudrate_set+0x100>
    462c:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    4630:	d110      	bne.n	4654 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4632:	4b3c      	ldr	r3, [pc, #240]	; (4724 <baudrate_set+0x130>)
    4634:	e007      	b.n	4646 <baudrate_set+0x52>
	switch (baudrate) {
    4636:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    463a:	d058      	beq.n	46ee <baudrate_set+0xfa>
    463c:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    4640:	d105      	bne.n	464e <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    4642:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4646:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    464a:	2000      	movs	r0, #0
    464c:	4770      	bx	lr
	switch (baudrate) {
    464e:	f06f 0015 	mvn.w	r0, #21
    4652:	4770      	bx	lr
    4654:	f06f 0015 	mvn.w	r0, #21
    4658:	4770      	bx	lr
    465a:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    465e:	d04e      	beq.n	46fe <baudrate_set+0x10a>
    4660:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    4664:	d101      	bne.n	466a <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4666:	4b30      	ldr	r3, [pc, #192]	; (4728 <baudrate_set+0x134>)
    4668:	e7ed      	b.n	4646 <baudrate_set+0x52>
	switch (baudrate) {
    466a:	f06f 0015 	mvn.w	r0, #21
    466e:	4770      	bx	lr
    4670:	f06f 0015 	mvn.w	r0, #21
    4674:	4770      	bx	lr
    4676:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    467a:	d042      	beq.n	4702 <baudrate_set+0x10e>
    467c:	d909      	bls.n	4692 <baudrate_set+0x9e>
    467e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    4682:	d046      	beq.n	4712 <baudrate_set+0x11e>
    4684:	d91f      	bls.n	46c6 <baudrate_set+0xd2>
    4686:	4b29      	ldr	r3, [pc, #164]	; (472c <baudrate_set+0x138>)
    4688:	4299      	cmp	r1, r3
    468a:	d148      	bne.n	471e <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    468c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4690:	e7d9      	b.n	4646 <baudrate_set+0x52>
	switch (baudrate) {
    4692:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    4696:	d037      	beq.n	4708 <baudrate_set+0x114>
    4698:	d905      	bls.n	46a6 <baudrate_set+0xb2>
    469a:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    469e:	d10f      	bne.n	46c0 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    46a0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    46a4:	e7cf      	b.n	4646 <baudrate_set+0x52>
	switch (baudrate) {
    46a6:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    46aa:	4299      	cmp	r1, r3
    46ac:	d02e      	beq.n	470c <baudrate_set+0x118>
    46ae:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    46b2:	d102      	bne.n	46ba <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    46b4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    46b8:	e7c5      	b.n	4646 <baudrate_set+0x52>
	switch (baudrate) {
    46ba:	f06f 0015 	mvn.w	r0, #21
    46be:	4770      	bx	lr
    46c0:	f06f 0015 	mvn.w	r0, #21
    46c4:	4770      	bx	lr
    46c6:	4b1a      	ldr	r3, [pc, #104]	; (4730 <baudrate_set+0x13c>)
    46c8:	4299      	cmp	r1, r3
    46ca:	d025      	beq.n	4718 <baudrate_set+0x124>
    46cc:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    46d0:	d102      	bne.n	46d8 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    46d2:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    46d6:	e7b6      	b.n	4646 <baudrate_set+0x52>
	switch (baudrate) {
    46d8:	f06f 0015 	mvn.w	r0, #21
    46dc:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    46de:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    46e2:	e7b0      	b.n	4646 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    46e4:	4b13      	ldr	r3, [pc, #76]	; (4734 <baudrate_set+0x140>)
    46e6:	e7ae      	b.n	4646 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    46e8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    46ec:	e7ab      	b.n	4646 <baudrate_set+0x52>
	switch (baudrate) {
    46ee:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    46f2:	e7a8      	b.n	4646 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    46f4:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    46f8:	e7a5      	b.n	4646 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    46fa:	4b0f      	ldr	r3, [pc, #60]	; (4738 <baudrate_set+0x144>)
    46fc:	e7a3      	b.n	4646 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    46fe:	4b0f      	ldr	r3, [pc, #60]	; (473c <baudrate_set+0x148>)
    4700:	e7a1      	b.n	4646 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4702:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4706:	e79e      	b.n	4646 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4708:	4b0d      	ldr	r3, [pc, #52]	; (4740 <baudrate_set+0x14c>)
    470a:	e79c      	b.n	4646 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    470c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4710:	e799      	b.n	4646 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4712:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4716:	e796      	b.n	4646 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4718:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    471c:	e793      	b.n	4646 <baudrate_set+0x52>
	switch (baudrate) {
    471e:	f06f 0015 	mvn.w	r0, #21
}
    4722:	4770      	bx	lr
    4724:	0013b000 	.word	0x0013b000
    4728:	004ea000 	.word	0x004ea000
    472c:	000f4240 	.word	0x000f4240
    4730:	0003d090 	.word	0x0003d090
    4734:	00275000 	.word	0x00275000
    4738:	0075c000 	.word	0x0075c000
    473c:	003af000 	.word	0x003af000
    4740:	013a9000 	.word	0x013a9000

00004744 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    4744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4746:	4605      	mov	r5, r0
    4748:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    474a:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    474c:	f005 fb51 	bl	9df2 <k_is_in_isr>
    4750:	b910      	cbnz	r0, 4758 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    4752:	4b12      	ldr	r3, [pc, #72]	; (479c <uarte_nrfx_poll_out+0x58>)
    4754:	781b      	ldrb	r3, [r3, #0]
    4756:	b983      	cbnz	r3, 477a <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    4758:	f04f 0320 	mov.w	r3, #32
    475c:	f3ef 8411 	mrs	r4, BASEPRI
    4760:	f383 8812 	msr	BASEPRI_MAX, r3
    4764:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    4768:	4628      	mov	r0, r5
    476a:	f004 feb2 	bl	94d2 <is_tx_ready>
    476e:	b940      	cbnz	r0, 4782 <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    4770:	f384 8811 	msr	BASEPRI, r4
    4774:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    4778:	e7ee      	b.n	4758 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    477a:	4628      	mov	r0, r5
    477c:	f004 ff0e 	bl	959c <wait_tx_ready>
    4780:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    4782:	693b      	ldr	r3, [r7, #16]
    4784:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    4786:	2201      	movs	r2, #1
    4788:	6939      	ldr	r1, [r7, #16]
    478a:	4628      	mov	r0, r5
    478c:	f004 febb 	bl	9506 <tx_start>
	__asm__ volatile(
    4790:	f384 8811 	msr	BASEPRI, r4
    4794:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    4798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    479a:	bf00      	nop
    479c:	200011a2 	.word	0x200011a2

000047a0 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    47a0:	b530      	push	{r4, r5, lr}
    47a2:	b089      	sub	sp, #36	; 0x24
    47a4:	4605      	mov	r5, r0
    47a6:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    47a8:	f101 0018 	add.w	r0, r1, #24
    47ac:	f000 ffc2 	bl	5734 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    47b0:	4b1d      	ldr	r3, [pc, #116]	; (4828 <endtx_stoptx_ppi_init+0x88>)
    47b2:	4298      	cmp	r0, r3
    47b4:	d10f      	bne.n	47d6 <endtx_stoptx_ppi_init+0x36>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    47b6:	7e23      	ldrb	r3, [r4, #24]
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    47b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    47bc:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    47c0:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    47c4:	7e22      	ldrb	r2, [r4, #24]
    47c6:	2301      	movs	r3, #1
    47c8:	4093      	lsls	r3, r2
    47ca:	4a18      	ldr	r2, [pc, #96]	; (482c <endtx_stoptx_ppi_init+0x8c>)
    47cc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    47d0:	2000      	movs	r0, #0
}
    47d2:	b009      	add	sp, #36	; 0x24
    47d4:	bd30      	pop	{r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    47d6:	4b16      	ldr	r3, [pc, #88]	; (4830 <endtx_stoptx_ppi_init+0x90>)
    47d8:	9307      	str	r3, [sp, #28]
    47da:	2302      	movs	r3, #2
    47dc:	f88d 3004 	strb.w	r3, [sp, #4]
    47e0:	2300      	movs	r3, #0
    47e2:	f88d 3005 	strb.w	r3, [sp, #5]
    47e6:	f88d 3006 	strb.w	r3, [sp, #6]
    47ea:	f88d 3007 	strb.w	r3, [sp, #7]
    47ee:	9a01      	ldr	r2, [sp, #4]
    47f0:	9206      	str	r2, [sp, #24]
    47f2:	4619      	mov	r1, r3
    47f4:	f363 0100 	bfi	r1, r3, #0, #1
    47f8:	f363 0141 	bfi	r1, r3, #1, #1
    47fc:	f363 0182 	bfi	r1, r3, #2, #1
    4800:	f363 01c5 	bfi	r1, r3, #3, #3
    4804:	2201      	movs	r2, #1
    4806:	f362 1188 	bfi	r1, r2, #6, #3
    480a:	2208      	movs	r2, #8
    480c:	f362 2152 	bfi	r1, r2, #9, #10
    4810:	f363 41de 	bfi	r1, r3, #19, #12
    4814:	f363 71df 	bfi	r1, r3, #31, #1
    4818:	aa06      	add	r2, sp, #24
    481a:	4806      	ldr	r0, [pc, #24]	; (4834 <endtx_stoptx_ppi_init+0x94>)
    481c:	f004 f936 	bl	8a8c <z_impl_z_log_msg_static_create>
		return -EIO;
    4820:	f06f 0004 	mvn.w	r0, #4
    4824:	e7d5      	b.n	47d2 <endtx_stoptx_ppi_init+0x32>
    4826:	bf00      	nop
    4828:	0bad0000 	.word	0x0bad0000
    482c:	50017000 	.word	0x50017000
    4830:	0000b0b8 	.word	0x0000b0b8
    4834:	0000a630 	.word	0x0000a630

00004838 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4838:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    483c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4840:	4b01      	ldr	r3, [pc, #4]	; (4848 <set_comparator+0x10>)
    4842:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    4846:	4770      	bx	lr
    4848:	50015000 	.word	0x50015000

0000484c <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    484c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4850:	4b01      	ldr	r3, [pc, #4]	; (4858 <get_comparator+0xc>)
    4852:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    4856:	4770      	bx	lr
    4858:	50015000 	.word	0x50015000

0000485c <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    485c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4860:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4862:	4a02      	ldr	r2, [pc, #8]	; (486c <event_enable+0x10>)
    4864:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    4868:	4770      	bx	lr
    486a:	bf00      	nop
    486c:	50015000 	.word	0x50015000

00004870 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4870:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4874:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4876:	4a02      	ldr	r2, [pc, #8]	; (4880 <event_disable+0x10>)
    4878:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    487c:	4770      	bx	lr
    487e:	bf00      	nop
    4880:	50015000 	.word	0x50015000

00004884 <counter>:
     return p_reg->COUNTER;
    4884:	4b01      	ldr	r3, [pc, #4]	; (488c <counter+0x8>)
    4886:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    488a:	4770      	bx	lr
    488c:	50015000 	.word	0x50015000

00004890 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    4890:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4892:	2301      	movs	r3, #1
    4894:	4083      	lsls	r3, r0
    4896:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    489a:	4a0c      	ldr	r2, [pc, #48]	; (48cc <compare_int_lock+0x3c>)
    489c:	e8d2 1fef 	ldaex	r1, [r2]
    48a0:	ea01 0e0c 	and.w	lr, r1, ip
    48a4:	e8c2 efe4 	stlex	r4, lr, [r2]
    48a8:	2c00      	cmp	r4, #0
    48aa:	d1f7      	bne.n	489c <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    48ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    48b0:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    48b2:	4807      	ldr	r0, [pc, #28]	; (48d0 <compare_int_lock+0x40>)
    48b4:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    48b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    48bc:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    48c0:	420b      	tst	r3, r1
}
    48c2:	bf14      	ite	ne
    48c4:	2001      	movne	r0, #1
    48c6:	2000      	moveq	r0, #0
    48c8:	bd10      	pop	{r4, pc}
    48ca:	bf00      	nop
    48cc:	20000ee4 	.word	0x20000ee4
    48d0:	50015000 	.word	0x50015000

000048d4 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    48d4:	b538      	push	{r3, r4, r5, lr}
    48d6:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    48d8:	f004 ff0b 	bl	96f2 <full_int_lock>
    48dc:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    48de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    48e2:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    48e4:	4a14      	ldr	r2, [pc, #80]	; (4938 <channel_processing_check_and_clear+0x64>)
    48e6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    48ea:	4213      	tst	r3, r2
    48ec:	d105      	bne.n	48fa <channel_processing_check_and_clear+0x26>
	bool result = false;
    48ee:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    48f0:	4628      	mov	r0, r5
    48f2:	f004 ff07 	bl	9704 <full_int_unlock>

	return result;
}
    48f6:	4620      	mov	r0, r4
    48f8:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    48fa:	2301      	movs	r3, #1
    48fc:	40a3      	lsls	r3, r4
    48fe:	43db      	mvns	r3, r3
    4900:	4a0e      	ldr	r2, [pc, #56]	; (493c <channel_processing_check_and_clear+0x68>)
    4902:	e8d2 1fef 	ldaex	r1, [r2]
    4906:	ea01 0003 	and.w	r0, r1, r3
    490a:	e8c2 0fec 	stlex	ip, r0, [r2]
    490e:	f1bc 0f00 	cmp.w	ip, #0
    4912:	d1f6      	bne.n	4902 <channel_processing_check_and_clear+0x2e>
    4914:	b949      	cbnz	r1, 492a <channel_processing_check_and_clear+0x56>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4916:	f104 0350 	add.w	r3, r4, #80	; 0x50
    491a:	009b      	lsls	r3, r3, #2
    491c:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    491e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    4922:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    4926:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4928:	b123      	cbz	r3, 4934 <channel_processing_check_and_clear+0x60>
			event_clear(chan);
    492a:	4620      	mov	r0, r4
    492c:	f004 fed2 	bl	96d4 <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4930:	2401      	movs	r4, #1
    4932:	e7dd      	b.n	48f0 <channel_processing_check_and_clear+0x1c>
    4934:	2400      	movs	r4, #0
    4936:	e7db      	b.n	48f0 <channel_processing_check_and_clear+0x1c>
    4938:	50015000 	.word	0x50015000
    493c:	20000edc 	.word	0x20000edc

00004940 <compare_int_unlock>:
	if (key) {
    4940:	b901      	cbnz	r1, 4944 <compare_int_unlock+0x4>
}
    4942:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    4944:	2301      	movs	r3, #1
    4946:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4948:	4a0d      	ldr	r2, [pc, #52]	; (4980 <compare_int_unlock+0x40>)
    494a:	e8d2 cfef 	ldaex	ip, [r2]
    494e:	ea4c 0c03 	orr.w	ip, ip, r3
    4952:	e8c2 cfe1 	stlex	r1, ip, [r2]
    4956:	2900      	cmp	r1, #0
    4958:	d1f7      	bne.n	494a <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    495a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    495e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    4960:	4a08      	ldr	r2, [pc, #32]	; (4984 <compare_int_unlock+0x44>)
    4962:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4966:	4b08      	ldr	r3, [pc, #32]	; (4988 <compare_int_unlock+0x48>)
    4968:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    496c:	40c3      	lsrs	r3, r0
    496e:	f013 0f01 	tst.w	r3, #1
    4972:	d0e6      	beq.n	4942 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4974:	4b05      	ldr	r3, [pc, #20]	; (498c <compare_int_unlock+0x4c>)
    4976:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    497a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    497e:	e7e0      	b.n	4942 <compare_int_unlock+0x2>
    4980:	20000ee4 	.word	0x20000ee4
    4984:	50015000 	.word	0x50015000
    4988:	20000edc 	.word	0x20000edc
    498c:	e000e100 	.word	0xe000e100

00004990 <sys_clock_timeout_handler>:
{
    4990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4994:	4607      	mov	r7, r0
    4996:	4614      	mov	r4, r2
    4998:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    499a:	4610      	mov	r0, r2
    499c:	4619      	mov	r1, r3
    499e:	f004 fea5 	bl	96ec <absolute_time_to_cc>
    49a2:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    49a4:	4b15      	ldr	r3, [pc, #84]	; (49fc <sys_clock_timeout_handler+0x6c>)
    49a6:	681a      	ldr	r2, [r3, #0]
    49a8:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    49aa:	601c      	str	r4, [r3, #0]
    49ac:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    49ae:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    49b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    49b6:	d309      	bcc.n	49cc <sys_clock_timeout_handler+0x3c>
	return false;
    49b8:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    49ba:	f002 fd5d 	bl	7478 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    49be:	4638      	mov	r0, r7
    49c0:	f7ff ff44 	bl	484c <get_comparator>
    49c4:	42a8      	cmp	r0, r5
    49c6:	d00e      	beq.n	49e6 <sys_clock_timeout_handler+0x56>
}
    49c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    49cc:	4b0c      	ldr	r3, [pc, #48]	; (4a00 <sys_clock_timeout_handler+0x70>)
    49ce:	681b      	ldr	r3, [r3, #0]
    49d0:	0a1a      	lsrs	r2, r3, #8
    49d2:	061b      	lsls	r3, r3, #24
    49d4:	eb15 0803 	adds.w	r8, r5, r3
    49d8:	f142 0900 	adc.w	r9, r2, #0
    49dc:	4b09      	ldr	r3, [pc, #36]	; (4a04 <sys_clock_timeout_handler+0x74>)
    49de:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    49e2:	2401      	movs	r4, #1
    49e4:	e7e9      	b.n	49ba <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    49e6:	b11c      	cbz	r4, 49f0 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    49e8:	4638      	mov	r0, r7
    49ea:	f7ff ff37 	bl	485c <event_enable>
}
    49ee:	e7eb      	b.n	49c8 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    49f0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    49f4:	4638      	mov	r0, r7
    49f6:	f7ff ff1f 	bl	4838 <set_comparator>
    49fa:	e7f5      	b.n	49e8 <sys_clock_timeout_handler+0x58>
    49fc:	200006f8 	.word	0x200006f8
    4a00:	20000ee8 	.word	0x20000ee8
    4a04:	20000700 	.word	0x20000700

00004a08 <z_nrf_rtc_timer_compare_evt_address_get>:
}

NRF_STATIC_INLINE nrf_rtc_event_t nrf_rtc_compare_event_get(uint8_t index)
{
    return (nrf_rtc_event_t)NRFX_OFFSETOF(NRF_RTC_Type, EVENTS_COMPARE[index]);
    4a08:	b2c3      	uxtb	r3, r0
    4a0a:	009b      	lsls	r3, r3, #2
}
    4a0c:	4801      	ldr	r0, [pc, #4]	; (4a14 <z_nrf_rtc_timer_compare_evt_address_get+0xc>)
    4a0e:	4418      	add	r0, r3
    4a10:	4770      	bx	lr
    4a12:	bf00      	nop
    4a14:	50015140 	.word	0x50015140

00004a18 <z_nrf_rtc_timer_compare_read>:
    return p_reg->CC[ch];
    4a18:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    4a1c:	4b01      	ldr	r3, [pc, #4]	; (4a24 <z_nrf_rtc_timer_compare_read+0xc>)
    4a1e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
    4a22:	4770      	bx	lr
    4a24:	50015000 	.word	0x50015000

00004a28 <z_nrf_rtc_timer_read>:
{
    4a28:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4a2a:	4b0d      	ldr	r3, [pc, #52]	; (4a60 <z_nrf_rtc_timer_read+0x38>)
    4a2c:	681c      	ldr	r4, [r3, #0]
    4a2e:	0a25      	lsrs	r5, r4, #8
    4a30:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4a32:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    4a36:	f7ff ff25 	bl	4884 <counter>
    4a3a:	4603      	mov	r3, r0
	val += cntr;
    4a3c:	1900      	adds	r0, r0, r4
    4a3e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4a42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4a46:	d20a      	bcs.n	4a5e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    4a48:	4b06      	ldr	r3, [pc, #24]	; (4a64 <z_nrf_rtc_timer_read+0x3c>)
    4a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    4a4e:	4290      	cmp	r0, r2
    4a50:	eb71 0303 	sbcs.w	r3, r1, r3
    4a54:	d203      	bcs.n	4a5e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    4a56:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4a5a:	f141 0100 	adc.w	r1, r1, #0
}
    4a5e:	bd38      	pop	{r3, r4, r5, pc}
    4a60:	20000ee8 	.word	0x20000ee8
    4a64:	20000700 	.word	0x20000700

00004a68 <compare_set_nolocks>:
{
    4a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a6a:	4606      	mov	r6, r0
    4a6c:	4614      	mov	r4, r2
    4a6e:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    4a70:	4610      	mov	r0, r2
    4a72:	4619      	mov	r1, r3
    4a74:	f004 fe3a 	bl	96ec <absolute_time_to_cc>
    4a78:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4a7a:	f7ff ffd5 	bl	4a28 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4a7e:	42a0      	cmp	r0, r4
    4a80:	eb71 0305 	sbcs.w	r3, r1, r5
    4a84:	d21d      	bcs.n	4ac2 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    4a86:	1a20      	subs	r0, r4, r0
    4a88:	eb65 0101 	sbc.w	r1, r5, r1
    4a8c:	4b19      	ldr	r3, [pc, #100]	; (4af4 <compare_set_nolocks+0x8c>)
    4a8e:	4298      	cmp	r0, r3
    4a90:	f171 0100 	sbcs.w	r1, r1, #0
    4a94:	d22b      	bcs.n	4aee <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
    4a96:	4b18      	ldr	r3, [pc, #96]	; (4af8 <compare_set_nolocks+0x90>)
    4a98:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    4a9c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    4aa0:	42ab      	cmp	r3, r5
    4aa2:	bf08      	it	eq
    4aa4:	42a2      	cmpeq	r2, r4
    4aa6:	d016      	beq.n	4ad6 <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    4aa8:	4639      	mov	r1, r7
    4aaa:	4630      	mov	r0, r6
    4aac:	f004 fe2f 	bl	970e <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    4ab0:	4639      	mov	r1, r7
    4ab2:	f004 fe0b 	bl	96cc <counter_sub>
    4ab6:	1900      	adds	r0, r0, r4
    4ab8:	f145 0300 	adc.w	r3, r5, #0
    4abc:	4604      	mov	r4, r0
    4abe:	461d      	mov	r5, r3
    4ac0:	e009      	b.n	4ad6 <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
    4ac2:	2301      	movs	r3, #1
    4ac4:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4ac6:	4a0d      	ldr	r2, [pc, #52]	; (4afc <compare_set_nolocks+0x94>)
    4ac8:	e8d2 0fef 	ldaex	r0, [r2]
    4acc:	4318      	orrs	r0, r3
    4ace:	e8c2 0fe1 	stlex	r1, r0, [r2]
    4ad2:	2900      	cmp	r1, #0
    4ad4:	d1f8      	bne.n	4ac8 <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
    4ad6:	4b08      	ldr	r3, [pc, #32]	; (4af8 <compare_set_nolocks+0x90>)
    4ad8:	0132      	lsls	r2, r6, #4
    4ada:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    4ade:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    4ae2:	9906      	ldr	r1, [sp, #24]
    4ae4:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    4ae6:	9b07      	ldr	r3, [sp, #28]
    4ae8:	6073      	str	r3, [r6, #4]
	return ret;
    4aea:	2000      	movs	r0, #0
}
    4aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    4aee:	f06f 0015 	mvn.w	r0, #21
    4af2:	e7fb      	b.n	4aec <compare_set_nolocks+0x84>
    4af4:	01000001 	.word	0x01000001
    4af8:	200006d8 	.word	0x200006d8
    4afc:	20000edc 	.word	0x20000edc

00004b00 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4b00:	b530      	push	{r4, r5, lr}
    4b02:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    4b04:	2300      	movs	r3, #0
    4b06:	4a1f      	ldr	r2, [pc, #124]	; (4b84 <sys_clock_driver_init+0x84>)
    4b08:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4b0c:	e00f      	b.n	4b2e <sys_clock_driver_init+0x2e>
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4b0e:	4a1e      	ldr	r2, [pc, #120]	; (4b88 <sys_clock_driver_init+0x88>)
    4b10:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    4b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4b1c:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4b20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4b24:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    4b26:	4917      	ldr	r1, [pc, #92]	; (4b84 <sys_clock_driver_init+0x84>)
    4b28:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4b2c:	3301      	adds	r3, #1
    4b2e:	2b01      	cmp	r3, #1
    4b30:	dded      	ble.n	4b0e <sys_clock_driver_init+0xe>
    4b32:	4c14      	ldr	r4, [pc, #80]	; (4b84 <sys_clock_driver_init+0x84>)
    4b34:	2502      	movs	r5, #2
    4b36:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4b3a:	4b14      	ldr	r3, [pc, #80]	; (4b8c <sys_clock_driver_init+0x8c>)
    4b3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4b40:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4b44:	2200      	movs	r2, #0
    4b46:	2101      	movs	r1, #1
    4b48:	2015      	movs	r0, #21
    4b4a:	f004 f8ae 	bl	8caa <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4b4e:	2015      	movs	r0, #21
    4b50:	f004 f8a1 	bl	8c96 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4b54:	2301      	movs	r3, #1
    4b56:	60a3      	str	r3, [r4, #8]
    4b58:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4b5a:	4b0d      	ldr	r3, [pc, #52]	; (4b90 <sys_clock_driver_init+0x90>)
    4b5c:	2203      	movs	r2, #3
    4b5e:	601a      	str	r2, [r3, #0]
	if (CONFIG_NRF_RTC_TIMER_USER_CHAN_COUNT) {
		alloc_mask = BIT_MASK(EXT_CHAN_COUNT) << 1;
    4b60:	4b0c      	ldr	r3, [pc, #48]	; (4b94 <sys_clock_driver_init+0x94>)
    4b62:	601d      	str	r5, [r3, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4b64:	2400      	movs	r4, #0
    4b66:	9401      	str	r4, [sp, #4]
    4b68:	4b0b      	ldr	r3, [pc, #44]	; (4b98 <sys_clock_driver_init+0x98>)
    4b6a:	9300      	str	r3, [sp, #0]
    4b6c:	4a0b      	ldr	r2, [pc, #44]	; (4b9c <sys_clock_driver_init+0x9c>)
    4b6e:	2300      	movs	r3, #0
    4b70:	4620      	mov	r0, r4
    4b72:	f004 fe12 	bl	979a <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4b76:	4628      	mov	r0, r5
    4b78:	f7ff fbd2 	bl	4320 <z_nrf_clock_control_lf_on>

	return 0;
}
    4b7c:	4620      	mov	r0, r4
    4b7e:	b003      	add	sp, #12
    4b80:	bd30      	pop	{r4, r5, pc}
    4b82:	bf00      	nop
    4b84:	50015000 	.word	0x50015000
    4b88:	200006d8 	.word	0x200006d8
    4b8c:	e000e100 	.word	0xe000e100
    4b90:	20000ee4 	.word	0x20000ee4
    4b94:	20000ee0 	.word	0x20000ee0
    4b98:	00004991 	.word	0x00004991
    4b9c:	007fffff 	.word	0x007fffff

00004ba0 <process_channel>:
{
    4ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ba4:	b082      	sub	sp, #8
    4ba6:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    4ba8:	f7ff fe94 	bl	48d4 <channel_processing_check_and_clear>
    4bac:	b910      	cbnz	r0, 4bb4 <process_channel+0x14>
}
    4bae:	b002      	add	sp, #8
    4bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    4bb4:	f7ff ff38 	bl	4a28 <z_nrf_rtc_timer_read>
    4bb8:	4682      	mov	sl, r0
    4bba:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    4bbc:	f004 fd99 	bl	96f2 <full_int_lock>
    4bc0:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    4bc2:	4b13      	ldr	r3, [pc, #76]	; (4c10 <process_channel+0x70>)
    4bc4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    4bc8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    4bcc:	45c2      	cmp	sl, r8
    4bce:	eb75 0509 	sbcs.w	r5, r5, r9
    4bd2:	d20b      	bcs.n	4bec <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    4bd4:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    4bd6:	4630      	mov	r0, r6
    4bd8:	f004 fd94 	bl	9704 <full_int_unlock>
		if (handler) {
    4bdc:	2d00      	cmp	r5, #0
    4bde:	d0e6      	beq.n	4bae <process_channel+0xe>
			handler(chan, expire_time, user_context);
    4be0:	9700      	str	r7, [sp, #0]
    4be2:	4642      	mov	r2, r8
    4be4:	464b      	mov	r3, r9
    4be6:	4620      	mov	r0, r4
    4be8:	47a8      	blx	r5
}
    4bea:	e7e0      	b.n	4bae <process_channel+0xe>
			handler = cc_data[chan].callback;
    4bec:	4a08      	ldr	r2, [pc, #32]	; (4c10 <process_channel+0x70>)
    4bee:	0123      	lsls	r3, r4, #4
    4bf0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    4bf4:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    4bf6:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    4bf8:	2000      	movs	r0, #0
    4bfa:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4bfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4c00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4c04:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    4c08:	4620      	mov	r0, r4
    4c0a:	f7ff fe31 	bl	4870 <event_disable>
    4c0e:	e7e2      	b.n	4bd6 <process_channel+0x36>
    4c10:	200006d8 	.word	0x200006d8

00004c14 <rtc_nrf_isr>:
{
    4c14:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    4c16:	4b0e      	ldr	r3, [pc, #56]	; (4c50 <rtc_nrf_isr+0x3c>)
    4c18:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4c1c:	f013 0f02 	tst.w	r3, #2
    4c20:	d00d      	beq.n	4c3e <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c22:	4b0b      	ldr	r3, [pc, #44]	; (4c50 <rtc_nrf_isr+0x3c>)
    4c24:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    4c28:	b14b      	cbz	r3, 4c3e <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4c2a:	4b09      	ldr	r3, [pc, #36]	; (4c50 <rtc_nrf_isr+0x3c>)
    4c2c:	2200      	movs	r2, #0
    4c2e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4c32:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    4c36:	4a07      	ldr	r2, [pc, #28]	; (4c54 <rtc_nrf_isr+0x40>)
    4c38:	6813      	ldr	r3, [r2, #0]
    4c3a:	3301      	adds	r3, #1
    4c3c:	6013      	str	r3, [r2, #0]
{
    4c3e:	2400      	movs	r4, #0
    4c40:	e003      	b.n	4c4a <rtc_nrf_isr+0x36>
		process_channel(chan);
    4c42:	4620      	mov	r0, r4
    4c44:	f7ff ffac 	bl	4ba0 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    4c48:	3401      	adds	r4, #1
    4c4a:	2c01      	cmp	r4, #1
    4c4c:	ddf9      	ble.n	4c42 <rtc_nrf_isr+0x2e>
}
    4c4e:	bd10      	pop	{r4, pc}
    4c50:	50015000 	.word	0x50015000
    4c54:	20000ee8 	.word	0x20000ee8

00004c58 <z_nrf_rtc_timer_chan_alloc>:
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    4c58:	4b12      	ldr	r3, [pc, #72]	; (4ca4 <z_nrf_rtc_timer_chan_alloc+0x4c>)
    4c5a:	6818      	ldr	r0, [r3, #0]
    4c5c:	b1f0      	cbz	r0, 4c9c <z_nrf_rtc_timer_chan_alloc+0x44>
{
    4c5e:	b500      	push	{lr}
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    4c60:	fab0 f080 	clz	r0, r0
    4c64:	f1c0 001f 	rsb	r0, r0, #31
		prev = atomic_and(&alloc_mask, ~BIT(chan));
    4c68:	2301      	movs	r3, #1
    4c6a:	4083      	lsls	r3, r0
    4c6c:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4c6e:	490d      	ldr	r1, [pc, #52]	; (4ca4 <z_nrf_rtc_timer_chan_alloc+0x4c>)
    4c70:	e8d1 2fef 	ldaex	r2, [r1]
    4c74:	ea02 0c03 	and.w	ip, r2, r3
    4c78:	e8c1 cfee 	stlex	lr, ip, [r1]
    4c7c:	f1be 0f00 	cmp.w	lr, #0
    4c80:	d1f6      	bne.n	4c70 <z_nrf_rtc_timer_chan_alloc+0x18>
	} while (!(prev & BIT(chan)));
    4c82:	fa22 f300 	lsr.w	r3, r2, r0
    4c86:	f013 0f01 	tst.w	r3, #1
    4c8a:	d105      	bne.n	4c98 <z_nrf_rtc_timer_chan_alloc+0x40>
		chan = alloc_mask ? 31 - __builtin_clz(alloc_mask) : -1;
    4c8c:	4b05      	ldr	r3, [pc, #20]	; (4ca4 <z_nrf_rtc_timer_chan_alloc+0x4c>)
    4c8e:	6818      	ldr	r0, [r3, #0]
    4c90:	2800      	cmp	r0, #0
    4c92:	d1e5      	bne.n	4c60 <z_nrf_rtc_timer_chan_alloc+0x8>
			return -ENOMEM;
    4c94:	f06f 000b 	mvn.w	r0, #11
}
    4c98:	f85d fb04 	ldr.w	pc, [sp], #4
			return -ENOMEM;
    4c9c:	f06f 000b 	mvn.w	r0, #11
}
    4ca0:	4770      	bx	lr
    4ca2:	bf00      	nop
    4ca4:	20000ee0 	.word	0x20000ee0

00004ca8 <z_nrf_rtc_timer_chan_free>:
	atomic_or(&alloc_mask, BIT(chan));
    4ca8:	2301      	movs	r3, #1
    4caa:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4cac:	4a04      	ldr	r2, [pc, #16]	; (4cc0 <z_nrf_rtc_timer_chan_free+0x18>)
    4cae:	e8d2 0fef 	ldaex	r0, [r2]
    4cb2:	4318      	orrs	r0, r3
    4cb4:	e8c2 0fe1 	stlex	r1, r0, [r2]
    4cb8:	2900      	cmp	r1, #0
    4cba:	d1f8      	bne.n	4cae <z_nrf_rtc_timer_chan_free+0x6>
}
    4cbc:	4770      	bx	lr
    4cbe:	bf00      	nop
    4cc0:	20000ee0 	.word	0x20000ee0

00004cc4 <sys_clock_set_timeout>:
{
    4cc4:	b510      	push	{r4, lr}
    4cc6:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4cc8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4ccc:	d006      	beq.n	4cdc <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4cce:	2801      	cmp	r0, #1
    4cd0:	dd06      	ble.n	4ce0 <sys_clock_set_timeout+0x1c>
    4cd2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4cd6:	da05      	bge.n	4ce4 <sys_clock_set_timeout+0x20>
    4cd8:	1e44      	subs	r4, r0, #1
    4cda:	e004      	b.n	4ce6 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4cdc:	480f      	ldr	r0, [pc, #60]	; (4d1c <sys_clock_set_timeout+0x58>)
    4cde:	e7f8      	b.n	4cd2 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4ce0:	2400      	movs	r4, #0
    4ce2:	e000      	b.n	4ce6 <sys_clock_set_timeout+0x22>
    4ce4:	4c0d      	ldr	r4, [pc, #52]	; (4d1c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4ce6:	f7ff fe9f 	bl	4a28 <z_nrf_rtc_timer_read>
    4cea:	4b0d      	ldr	r3, [pc, #52]	; (4d20 <sys_clock_set_timeout+0x5c>)
    4cec:	681a      	ldr	r2, [r3, #0]
    4cee:	685b      	ldr	r3, [r3, #4]
    4cf0:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    4cf2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4cf6:	d300      	bcc.n	4cfa <sys_clock_set_timeout+0x36>
		ticks = 0;
    4cf8:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4cfa:	4420      	add	r0, r4
    4cfc:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
    4cfe:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    4d02:	d300      	bcc.n	4d06 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    4d04:	4905      	ldr	r1, [pc, #20]	; (4d1c <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    4d06:	2000      	movs	r0, #0
    4d08:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4d0a:	9001      	str	r0, [sp, #4]
    4d0c:	4905      	ldr	r1, [pc, #20]	; (4d24 <sys_clock_set_timeout+0x60>)
    4d0e:	9100      	str	r1, [sp, #0]
    4d10:	f143 0300 	adc.w	r3, r3, #0
    4d14:	f004 fd41 	bl	979a <compare_set>
}
    4d18:	b002      	add	sp, #8
    4d1a:	bd10      	pop	{r4, pc}
    4d1c:	007fffff 	.word	0x007fffff
    4d20:	200006f8 	.word	0x200006f8
    4d24:	00004991 	.word	0x00004991

00004d28 <sys_clock_elapsed>:
{
    4d28:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4d2a:	f7ff fe7d 	bl	4a28 <z_nrf_rtc_timer_read>
    4d2e:	4b02      	ldr	r3, [pc, #8]	; (4d38 <sys_clock_elapsed+0x10>)
    4d30:	681b      	ldr	r3, [r3, #0]
}
    4d32:	1ac0      	subs	r0, r0, r3
    4d34:	bd08      	pop	{r3, pc}
    4d36:	bf00      	nop
    4d38:	200006f8 	.word	0x200006f8

00004d3c <nrf_gpio_cfg>:
{
    4d3c:	b430      	push	{r4, r5}
    *p_pin = pin_number & 0x1F;
    4d3e:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    4d42:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d44:	2801      	cmp	r0, #1
    4d46:	d018      	beq.n	4d7a <nrf_gpio_cfg+0x3e>
        case 0: return NRF_P0;
    4d48:	4d0d      	ldr	r5, [pc, #52]	; (4d80 <nrf_gpio_cfg+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    4d4a:	f10c 0080 	add.w	r0, ip, #128	; 0x80
    4d4e:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
    4d52:	f004 4ce0 	and.w	ip, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4d56:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    4d5a:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4d5e:	f89d 2008 	ldrb.w	r2, [sp, #8]
    4d62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    4d66:	f89d 200c 	ldrb.w	r2, [sp, #12]
    4d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    4d6e:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
    4d72:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
    4d76:	bc30      	pop	{r4, r5}
    4d78:	4770      	bx	lr
        case 1: return NRF_P1;
    4d7a:	4d02      	ldr	r5, [pc, #8]	; (4d84 <nrf_gpio_cfg+0x48>)
    4d7c:	e7e5      	b.n	4d4a <nrf_gpio_cfg+0xe>
    4d7e:	bf00      	nop
    4d80:	50842500 	.word	0x50842500
    4d84:	50842800 	.word	0x50842800

00004d88 <nrf_gpio_pin_write>:
    if (value == 0)
    4d88:	b959      	cbnz	r1, 4da2 <nrf_gpio_pin_write+0x1a>
    *p_pin = pin_number & 0x1F;
    4d8a:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    4d8e:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4d90:	2801      	cmp	r0, #1
    4d92:	d004      	beq.n	4d9e <nrf_gpio_pin_write+0x16>
        case 0: return NRF_P0;
    4d94:	4a09      	ldr	r2, [pc, #36]	; (4dbc <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4d96:	2301      	movs	r3, #1
    4d98:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    4d9a:	60d3      	str	r3, [r2, #12]
}
    4d9c:	4770      	bx	lr
        case 1: return NRF_P1;
    4d9e:	4a08      	ldr	r2, [pc, #32]	; (4dc0 <nrf_gpio_pin_write+0x38>)
    4da0:	e7f9      	b.n	4d96 <nrf_gpio_pin_write+0xe>
    *p_pin = pin_number & 0x1F;
    4da2:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    4da6:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4da8:	2801      	cmp	r0, #1
    4daa:	d004      	beq.n	4db6 <nrf_gpio_pin_write+0x2e>
        case 0: return NRF_P0;
    4dac:	4a03      	ldr	r2, [pc, #12]	; (4dbc <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4dae:	2301      	movs	r3, #1
    4db0:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    4db2:	6093      	str	r3, [r2, #8]
}
    4db4:	4770      	bx	lr
        case 1: return NRF_P1;
    4db6:	4a02      	ldr	r2, [pc, #8]	; (4dc0 <nrf_gpio_pin_write+0x38>)
    4db8:	e7f9      	b.n	4dae <nrf_gpio_pin_write+0x26>
    4dba:	bf00      	nop
    4dbc:	50842500 	.word	0x50842500
    4dc0:	50842800 	.word	0x50842800

00004dc4 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4dc8:	b085      	sub	sp, #20
    4dca:	4607      	mov	r7, r0
    4dcc:	468b      	mov	fp, r1
    4dce:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4dd0:	2400      	movs	r4, #0
    4dd2:	e022      	b.n	4e1a <pinctrl_configure_pins+0x56>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    4dd4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    4dd8:	e02c      	b.n	4e34 <pinctrl_configure_pins+0x70>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    4dda:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4dde:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4de0:	9603      	str	r6, [sp, #12]
			write = 1U;
    4de2:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    4de4:	2d7f      	cmp	r5, #127	; 0x7f
    4de6:	d016      	beq.n	4e16 <pinctrl_configure_pins+0x52>
			if (write != NO_WRITE) {
    4de8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4dec:	f040 810e 	bne.w	500c <pinctrl_configure_pins+0x248>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    4df0:	f857 300a 	ldr.w	r3, [r7, sl]
    4df4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4df8:	d002      	beq.n	4e00 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4dfa:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    4dfc:	2200      	movs	r2, #0
    4dfe:	9203      	str	r2, [sp, #12]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    4e00:	2200      	movs	r2, #0
    4e02:	9201      	str	r2, [sp, #4]
    4e04:	f8cd 9000 	str.w	r9, [sp]
    4e08:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    4e0c:	4632      	mov	r2, r6
    4e0e:	9903      	ldr	r1, [sp, #12]
    4e10:	4628      	mov	r0, r5
    4e12:	f7ff ff93 	bl	4d3c <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4e16:	3401      	adds	r4, #1
    4e18:	b2e4      	uxtb	r4, r4
    4e1a:	455c      	cmp	r4, fp
    4e1c:	f080 80fa 	bcs.w	5014 <pinctrl_configure_pins+0x250>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4e20:	ea4f 0a84 	mov.w	sl, r4, lsl #2
    4e24:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    4e28:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    4e2c:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    4e30:	2d7f      	cmp	r5, #127	; 0x7f
    4e32:	d0cf      	beq.n	4dd4 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    4e34:	0c1b      	lsrs	r3, r3, #16
    4e36:	2b22      	cmp	r3, #34	; 0x22
    4e38:	f200 80ee 	bhi.w	5018 <pinctrl_configure_pins+0x254>
    4e3c:	a201      	add	r2, pc, #4	; (adr r2, 4e44 <pinctrl_configure_pins+0x80>)
    4e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4e42:	bf00      	nop
    4e44:	00004ddb 	.word	0x00004ddb
    4e48:	00004ed1 	.word	0x00004ed1
    4e4c:	00004edf 	.word	0x00004edf
    4e50:	00004eeb 	.word	0x00004eeb
    4e54:	00004ef9 	.word	0x00004ef9
    4e58:	00004f07 	.word	0x00004f07
    4e5c:	00004f13 	.word	0x00004f13
    4e60:	00005019 	.word	0x00005019
    4e64:	00005019 	.word	0x00005019
    4e68:	00005019 	.word	0x00005019
    4e6c:	00005019 	.word	0x00005019
    4e70:	00004f21 	.word	0x00004f21
    4e74:	00004f35 	.word	0x00004f35
    4e78:	00005019 	.word	0x00005019
    4e7c:	00005019 	.word	0x00005019
    4e80:	00005019 	.word	0x00005019
    4e84:	00005019 	.word	0x00005019
    4e88:	00005019 	.word	0x00005019
    4e8c:	00005019 	.word	0x00005019
    4e90:	00005019 	.word	0x00005019
    4e94:	00005019 	.word	0x00005019
    4e98:	00005019 	.word	0x00005019
    4e9c:	00004f49 	.word	0x00004f49
    4ea0:	00004f5b 	.word	0x00004f5b
    4ea4:	00004f6d 	.word	0x00004f6d
    4ea8:	00004f7f 	.word	0x00004f7f
    4eac:	00005019 	.word	0x00005019
    4eb0:	00005019 	.word	0x00005019
    4eb4:	00005019 	.word	0x00005019
    4eb8:	00004f91 	.word	0x00004f91
    4ebc:	00004fa1 	.word	0x00004fa1
    4ec0:	00004fad 	.word	0x00004fad
    4ec4:	00004fbd 	.word	0x00004fbd
    4ec8:	00004fcd 	.word	0x00004fcd
    4ecc:	00004fdd 	.word	0x00004fdd
			NRF_PSEL_UART(reg, RXD) = pin;
    4ed0:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4ed4:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4ed6:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    4ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    4edc:	e782      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
    4ede:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4ee2:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4ee4:	9603      	str	r6, [sp, #12]
			write = 1U;
    4ee6:	4631      	mov	r1, r6
			break;
    4ee8:	e77c      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
    4eea:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4eee:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4ef0:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    4ef2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    4ef6:	e775      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    4ef8:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4efc:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4efe:	2301      	movs	r3, #1
    4f00:	9303      	str	r3, [sp, #12]
			write = 0U;
    4f02:	4631      	mov	r1, r6
			break;
    4f04:	e76e      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    4f06:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4f0a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4f0c:	9603      	str	r6, [sp, #12]
			write = 0U;
    4f0e:	2100      	movs	r1, #0
			break;
    4f10:	e768      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    4f12:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4f16:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4f18:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    4f1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    4f1e:	e761      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    4f20:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    4f24:	f1b9 0f00 	cmp.w	r9, #0
    4f28:	d060      	beq.n	4fec <pinctrl_configure_pins+0x228>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4f2a:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4f2c:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    4f2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4f32:	e757      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    4f34:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    4f38:	f1b9 0f00 	cmp.w	r9, #0
    4f3c:	d05e      	beq.n	4ffc <pinctrl_configure_pins+0x238>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4f3e:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4f40:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    4f42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4f46:	e74d      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    4f48:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    4f4c:	f857 100a 	ldr.w	r1, [r7, sl]
    4f50:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4f54:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4f56:	9603      	str	r6, [sp, #12]
			break;
    4f58:	e744      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    4f5a:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    4f5e:	f857 100a 	ldr.w	r1, [r7, sl]
    4f62:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4f66:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4f68:	9603      	str	r6, [sp, #12]
			break;
    4f6a:	e73b      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    4f6c:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    4f70:	f857 100a 	ldr.w	r1, [r7, sl]
    4f74:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4f78:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4f7a:	9603      	str	r6, [sp, #12]
			break;
    4f7c:	e732      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    4f7e:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    4f82:	f857 100a 	ldr.w	r1, [r7, sl]
    4f86:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4f8a:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4f8c:	9603      	str	r6, [sp, #12]
			break;
    4f8e:	e729      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    4f90:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4f94:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4f96:	2300      	movs	r3, #0
    4f98:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    4f9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    4f9e:	e721      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    4fa0:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4fa4:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4fa6:	9603      	str	r6, [sp, #12]
			write = 1U;
    4fa8:	4631      	mov	r1, r6
			break;
    4faa:	e71b      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    4fac:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4fb0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4fb2:	2300      	movs	r3, #0
    4fb4:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    4fb6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    4fba:	e713      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    4fbc:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4fc0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4fc2:	2300      	movs	r3, #0
    4fc4:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    4fc6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    4fca:	e70b      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    4fcc:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4fd0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4fd2:	2300      	movs	r3, #0
    4fd4:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    4fd6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    4fda:	e703      	b.n	4de4 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    4fdc:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4fe0:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4fe2:	2300      	movs	r3, #0
    4fe4:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    4fe6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    4fea:	e6fb      	b.n	4de4 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4fec:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4fee:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    4ff2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
    4ff6:	f04f 0906 	mov.w	r9, #6
    4ffa:	e6f3      	b.n	4de4 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    4ffc:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    4ffe:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    5002:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
    5006:	f04f 0906 	mov.w	r9, #6
    500a:	e6eb      	b.n	4de4 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
    500c:	4628      	mov	r0, r5
    500e:	f7ff febb 	bl	4d88 <nrf_gpio_pin_write>
    5012:	e6ed      	b.n	4df0 <pinctrl_configure_pins+0x2c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    5014:	2000      	movs	r0, #0
    5016:	e001      	b.n	501c <pinctrl_configure_pins+0x258>
		switch (NRF_GET_FUN(pins[i])) {
    5018:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    501c:	b005      	add	sp, #20
    501e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5022:	bf00      	nop

00005024 <mbox_nrf_set_enabled>:
{
	return IPC_CONF_NUM;
}

static int mbox_nrf_set_enabled(const struct device *dev, uint32_t channel, bool enable)
{
    5024:	b530      	push	{r4, r5, lr}
    5026:	b089      	sub	sp, #36	; 0x24
    5028:	460c      	mov	r4, r1
	struct mbox_nrf_data *data = dev->data;
    502a:	6905      	ldr	r5, [r0, #16]
	const struct mbox_nrf_conf *conf = dev->config;
    502c:	6843      	ldr	r3, [r0, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    502e:	290f      	cmp	r1, #15
    5030:	d806      	bhi.n	5040 <mbox_nrf_set_enabled+0x1c>
    5032:	681b      	ldr	r3, [r3, #0]
    5034:	40cb      	lsrs	r3, r1
    5036:	f013 0f01 	tst.w	r3, #1
    503a:	d11d      	bne.n	5078 <mbox_nrf_set_enabled+0x54>
    503c:	2300      	movs	r3, #0
    503e:	e000      	b.n	5042 <mbox_nrf_set_enabled+0x1e>
    5040:	2300      	movs	r3, #0

	if (!is_rx_channel_valid(dev, channel)) {
    5042:	2b00      	cmp	r3, #0
    5044:	d061      	beq.n	510a <mbox_nrf_set_enabled+0xe6>
		return -EINVAL;
	}

	if ((enable == 0 && (!(data->enabled_mask & BIT(channel)))) ||
    5046:	b9ca      	cbnz	r2, 507c <mbox_nrf_set_enabled+0x58>
    5048:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    504c:	40e3      	lsrs	r3, r4
    504e:	f013 0f01 	tst.w	r3, #1
    5052:	d05d      	beq.n	5110 <mbox_nrf_set_enabled+0xec>
	if (enable) {
		data->enabled_mask |= BIT(channel);
		compiler_barrier();
		nrfx_ipc_receive_event_enable(channel);
	} else {
		nrfx_ipc_receive_event_disable(channel);
    5054:	b2e0      	uxtb	r0, r4
    5056:	f001 f837 	bl	60c8 <nrfx_ipc_receive_event_disable>
		compiler_barrier();
		data->enabled_mask &= ~BIT(channel);
    505a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    505e:	2201      	movs	r2, #1
    5060:	40a2      	lsls	r2, r4
    5062:	ea23 0302 	bic.w	r3, r3, r2
    5066:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
	}

	if (data->enabled_mask == 0) {
    506a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    506e:	2b00      	cmp	r3, #0
    5070:	d046      	beq.n	5100 <mbox_nrf_set_enabled+0xdc>
		irq_disable(DT_INST_IRQN(0));
	}

	return 0;
    5072:	2000      	movs	r0, #0
}
    5074:	b009      	add	sp, #36	; 0x24
    5076:	bd30      	pop	{r4, r5, pc}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    5078:	2301      	movs	r3, #1
    507a:	e7e2      	b.n	5042 <mbox_nrf_set_enabled+0x1e>
	    (enable != 0 &&   (data->enabled_mask & BIT(channel)))) {
    507c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    5080:	40e3      	lsrs	r3, r4
    5082:	f013 0f01 	tst.w	r3, #1
    5086:	d146      	bne.n	5116 <mbox_nrf_set_enabled+0xf2>
	if (enable && (data->cb[channel] == NULL)) {
    5088:	2a00      	cmp	r2, #0
    508a:	d0e3      	beq.n	5054 <mbox_nrf_set_enabled+0x30>
    508c:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    5090:	b16b      	cbz	r3, 50ae <mbox_nrf_set_enabled+0x8a>
	if (enable && data->enabled_mask == 0) {
    5092:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    5096:	b37b      	cbz	r3, 50f8 <mbox_nrf_set_enabled+0xd4>
		data->enabled_mask |= BIT(channel);
    5098:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    509c:	2201      	movs	r2, #1
    509e:	40a2      	lsls	r2, r4
    50a0:	4313      	orrs	r3, r2
    50a2:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
		nrfx_ipc_receive_event_enable(channel);
    50a6:	b2e0      	uxtb	r0, r4
    50a8:	f001 f806 	bl	60b8 <nrfx_ipc_receive_event_enable>
    50ac:	e7dd      	b.n	506a <mbox_nrf_set_enabled+0x46>
		LOG_WRN("Enabling channel without a registered callback\n");
    50ae:	4b1b      	ldr	r3, [pc, #108]	; (511c <mbox_nrf_set_enabled+0xf8>)
    50b0:	9307      	str	r3, [sp, #28]
    50b2:	2202      	movs	r2, #2
    50b4:	f88d 2004 	strb.w	r2, [sp, #4]
    50b8:	2300      	movs	r3, #0
    50ba:	f88d 3005 	strb.w	r3, [sp, #5]
    50be:	f88d 3006 	strb.w	r3, [sp, #6]
    50c2:	f88d 3007 	strb.w	r3, [sp, #7]
    50c6:	9901      	ldr	r1, [sp, #4]
    50c8:	9106      	str	r1, [sp, #24]
    50ca:	4619      	mov	r1, r3
    50cc:	f363 0100 	bfi	r1, r3, #0, #1
    50d0:	f363 0141 	bfi	r1, r3, #1, #1
    50d4:	f363 0182 	bfi	r1, r3, #2, #1
    50d8:	f363 01c5 	bfi	r1, r3, #3, #3
    50dc:	f362 1188 	bfi	r1, r2, #6, #3
    50e0:	2208      	movs	r2, #8
    50e2:	f362 2152 	bfi	r1, r2, #9, #10
    50e6:	f363 41de 	bfi	r1, r3, #19, #12
    50ea:	f363 71df 	bfi	r1, r3, #31, #1
    50ee:	aa06      	add	r2, sp, #24
    50f0:	480b      	ldr	r0, [pc, #44]	; (5120 <mbox_nrf_set_enabled+0xfc>)
    50f2:	f003 fccb 	bl	8a8c <z_impl_z_log_msg_static_create>
    50f6:	e7cc      	b.n	5092 <mbox_nrf_set_enabled+0x6e>
		irq_enable(DT_INST_IRQN(0));
    50f8:	202a      	movs	r0, #42	; 0x2a
    50fa:	f003 fdcc 	bl	8c96 <arch_irq_enable>
    50fe:	e7cb      	b.n	5098 <mbox_nrf_set_enabled+0x74>
		irq_disable(DT_INST_IRQN(0));
    5100:	202a      	movs	r0, #42	; 0x2a
    5102:	f003 fdcd 	bl	8ca0 <arch_irq_disable>
	return 0;
    5106:	2000      	movs	r0, #0
    5108:	e7b4      	b.n	5074 <mbox_nrf_set_enabled+0x50>
		return -EINVAL;
    510a:	f06f 0015 	mvn.w	r0, #21
    510e:	e7b1      	b.n	5074 <mbox_nrf_set_enabled+0x50>
		return -EALREADY;
    5110:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5114:	e7ae      	b.n	5074 <mbox_nrf_set_enabled+0x50>
    5116:	f06f 0077 	mvn.w	r0, #119	; 0x77
    511a:	e7ab      	b.n	5074 <mbox_nrf_set_enabled+0x50>
    511c:	0000b13c 	.word	0x0000b13c
    5120:	0000a600 	.word	0x0000a600

00005124 <mbox_nrf_send>:
{
    5124:	b530      	push	{r4, r5, lr}
    5126:	b089      	sub	sp, #36	; 0x24
    5128:	4605      	mov	r5, r0
    512a:	460c      	mov	r4, r1
	if (msg) {
    512c:	b31a      	cbz	r2, 5176 <mbox_nrf_send+0x52>
		LOG_WRN("Sending data not supported");
    512e:	4b20      	ldr	r3, [pc, #128]	; (51b0 <mbox_nrf_send+0x8c>)
    5130:	9307      	str	r3, [sp, #28]
    5132:	2202      	movs	r2, #2
    5134:	f88d 2004 	strb.w	r2, [sp, #4]
    5138:	2300      	movs	r3, #0
    513a:	f88d 3005 	strb.w	r3, [sp, #5]
    513e:	f88d 3006 	strb.w	r3, [sp, #6]
    5142:	f88d 3007 	strb.w	r3, [sp, #7]
    5146:	9901      	ldr	r1, [sp, #4]
    5148:	9106      	str	r1, [sp, #24]
    514a:	4619      	mov	r1, r3
    514c:	f363 0100 	bfi	r1, r3, #0, #1
    5150:	f363 0141 	bfi	r1, r3, #1, #1
    5154:	f363 0182 	bfi	r1, r3, #2, #1
    5158:	f363 01c5 	bfi	r1, r3, #3, #3
    515c:	f362 1188 	bfi	r1, r2, #6, #3
    5160:	2208      	movs	r2, #8
    5162:	f362 2152 	bfi	r1, r2, #9, #10
    5166:	f363 41de 	bfi	r1, r3, #19, #12
    516a:	f363 71df 	bfi	r1, r3, #31, #1
    516e:	aa06      	add	r2, sp, #24
    5170:	4810      	ldr	r0, [pc, #64]	; (51b4 <mbox_nrf_send+0x90>)
    5172:	f003 fc8b 	bl	8a8c <z_impl_z_log_msg_static_create>
	const struct mbox_nrf_conf *conf = dev->config;
    5176:	686b      	ldr	r3, [r5, #4]
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
    5178:	2c0f      	cmp	r4, #15
    517a:	d806      	bhi.n	518a <mbox_nrf_send+0x66>
    517c:	685b      	ldr	r3, [r3, #4]
    517e:	40e3      	lsrs	r3, r4
    5180:	f013 0f01 	tst.w	r3, #1
    5184:	d10f      	bne.n	51a6 <mbox_nrf_send+0x82>
    5186:	2300      	movs	r3, #0
    5188:	e000      	b.n	518c <mbox_nrf_send+0x68>
    518a:	2300      	movs	r3, #0
	if (!is_tx_channel_valid(dev, channel)) {
    518c:	b16b      	cbz	r3, 51aa <mbox_nrf_send+0x86>
	nrfx_ipc_signal(channel);
    518e:	b2e1      	uxtb	r1, r4
    return (nrf_ipc_task_t)(NRFX_OFFSETOF(NRF_IPC_Type, TASKS_SEND[index]));
    5190:	0089      	lsls	r1, r1, #2
    5192:	b2c9      	uxtb	r1, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5194:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    5198:	f501 3128 	add.w	r1, r1, #172032	; 0x2a000
    519c:	2301      	movs	r3, #1
    519e:	600b      	str	r3, [r1, #0]
	return 0;
    51a0:	2000      	movs	r0, #0
}
    51a2:	b009      	add	sp, #36	; 0x24
    51a4:	bd30      	pop	{r4, r5, pc}
	return ((ch < IPC_CONF_NUM) && (conf->tx_mask & BIT(ch)));
    51a6:	2301      	movs	r3, #1
    51a8:	e7f0      	b.n	518c <mbox_nrf_send+0x68>
		return -EINVAL;
    51aa:	f06f 0015 	mvn.w	r0, #21
    51ae:	e7f8      	b.n	51a2 <mbox_nrf_send+0x7e>
    51b0:	0000b16c 	.word	0x0000b16c
    51b4:	0000a600 	.word	0x0000a600

000051b8 <mbox_dispatcher>:
{
    51b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    51ba:	b08f      	sub	sp, #60	; 0x3c
    51bc:	4604      	mov	r4, r0
    51be:	460d      	mov	r5, r1
	const struct device *dev = data->dev;
    51c0:	f8d1 6080 	ldr.w	r6, [r1, #128]	; 0x80
	const struct mbox_nrf_conf *conf = dev->config;
    51c4:	6873      	ldr	r3, [r6, #4]
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    51c6:	280f      	cmp	r0, #15
    51c8:	d806      	bhi.n	51d8 <mbox_dispatcher+0x20>
    51ca:	681b      	ldr	r3, [r3, #0]
    51cc:	40c3      	lsrs	r3, r0
    51ce:	f013 0f01 	tst.w	r3, #1
    51d2:	d116      	bne.n	5202 <mbox_dispatcher+0x4a>
    51d4:	2300      	movs	r3, #0
    51d6:	e000      	b.n	51da <mbox_dispatcher+0x22>
    51d8:	2300      	movs	r3, #0
	if (!is_rx_channel_valid(dev, channel)) {
    51da:	b1a3      	cbz	r3, 5206 <mbox_dispatcher+0x4e>
	if (!(data->enabled_mask & BIT(channel))) {
    51dc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    51e0:	40e3      	lsrs	r3, r4
    51e2:	f013 0f01 	tst.w	r3, #1
    51e6:	d033      	beq.n	5250 <mbox_dispatcher+0x98>
	if (data->cb[channel] != NULL) {
    51e8:	f855 7024 	ldr.w	r7, [r5, r4, lsl #2]
    51ec:	b13f      	cbz	r7, 51fe <mbox_dispatcher+0x46>
		data->cb[channel](dev, channel, data->user_data[channel], NULL);
    51ee:	f104 0210 	add.w	r2, r4, #16
    51f2:	2300      	movs	r3, #0
    51f4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    51f8:	4621      	mov	r1, r4
    51fa:	4630      	mov	r0, r6
    51fc:	47b8      	blx	r7
}
    51fe:	b00f      	add	sp, #60	; 0x3c
    5200:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return ((ch < IPC_CONF_NUM) && (conf->rx_mask & BIT(ch)));
    5202:	2301      	movs	r3, #1
    5204:	e7e9      	b.n	51da <mbox_dispatcher+0x22>
		LOG_WRN("RX event on illegal channel");
    5206:	4b25      	ldr	r3, [pc, #148]	; (529c <mbox_dispatcher+0xe4>)
    5208:	9307      	str	r3, [sp, #28]
    520a:	2202      	movs	r2, #2
    520c:	f88d 2004 	strb.w	r2, [sp, #4]
    5210:	2300      	movs	r3, #0
    5212:	f88d 3005 	strb.w	r3, [sp, #5]
    5216:	f88d 3006 	strb.w	r3, [sp, #6]
    521a:	f88d 3007 	strb.w	r3, [sp, #7]
    521e:	9901      	ldr	r1, [sp, #4]
    5220:	9106      	str	r1, [sp, #24]
    5222:	4619      	mov	r1, r3
    5224:	f363 0100 	bfi	r1, r3, #0, #1
    5228:	f363 0141 	bfi	r1, r3, #1, #1
    522c:	f363 0182 	bfi	r1, r3, #2, #1
    5230:	f363 01c5 	bfi	r1, r3, #3, #3
    5234:	f362 1188 	bfi	r1, r2, #6, #3
    5238:	2208      	movs	r2, #8
    523a:	f362 2152 	bfi	r1, r2, #9, #10
    523e:	f363 41de 	bfi	r1, r3, #19, #12
    5242:	f363 71df 	bfi	r1, r3, #31, #1
    5246:	aa06      	add	r2, sp, #24
    5248:	4815      	ldr	r0, [pc, #84]	; (52a0 <mbox_dispatcher+0xe8>)
    524a:	f003 fc1f 	bl	8a8c <z_impl_z_log_msg_static_create>
    524e:	e7c5      	b.n	51dc <mbox_dispatcher+0x24>
		LOG_WRN("RX event on disabled channel");
    5250:	4b14      	ldr	r3, [pc, #80]	; (52a4 <mbox_dispatcher+0xec>)
    5252:	930d      	str	r3, [sp, #52]	; 0x34
    5254:	2202      	movs	r2, #2
    5256:	f88d 2004 	strb.w	r2, [sp, #4]
    525a:	2300      	movs	r3, #0
    525c:	f88d 3005 	strb.w	r3, [sp, #5]
    5260:	f88d 3006 	strb.w	r3, [sp, #6]
    5264:	f88d 3007 	strb.w	r3, [sp, #7]
    5268:	9901      	ldr	r1, [sp, #4]
    526a:	910c      	str	r1, [sp, #48]	; 0x30
    526c:	4619      	mov	r1, r3
    526e:	f363 0100 	bfi	r1, r3, #0, #1
    5272:	f363 0141 	bfi	r1, r3, #1, #1
    5276:	f363 0182 	bfi	r1, r3, #2, #1
    527a:	f363 01c5 	bfi	r1, r3, #3, #3
    527e:	f362 1188 	bfi	r1, r2, #6, #3
    5282:	2208      	movs	r2, #8
    5284:	f362 2152 	bfi	r1, r2, #9, #10
    5288:	f363 41de 	bfi	r1, r3, #19, #12
    528c:	f363 71df 	bfi	r1, r3, #31, #1
    5290:	aa0c      	add	r2, sp, #48	; 0x30
    5292:	4803      	ldr	r0, [pc, #12]	; (52a0 <mbox_dispatcher+0xe8>)
    5294:	f003 fbfa 	bl	8a8c <z_impl_z_log_msg_static_create>
    5298:	e7a6      	b.n	51e8 <mbox_dispatcher+0x30>
    529a:	bf00      	nop
    529c:	0000b188 	.word	0x0000b188
    52a0:	0000a600 	.word	0x0000a600
    52a4:	0000b1a4 	.word	0x0000b1a4

000052a8 <enable_dt_channels>:

static void enable_dt_channels(const struct device *dev)
{
    52a8:	b510      	push	{r4, lr}
    52aa:	b0ae      	sub	sp, #184	; 0xb8
	const struct mbox_nrf_conf *conf = dev->config;
    52ac:	6844      	ldr	r4, [r0, #4]
	nrfx_ipc_config_t ch_config = { 0 };
    52ae:	2284      	movs	r2, #132	; 0x84
    52b0:	2100      	movs	r1, #0
    52b2:	a801      	add	r0, sp, #4
    52b4:	f003 fdfe 	bl	8eb4 <memset>

	if (conf->tx_mask >= BIT(IPC_CONF_NUM)) {
    52b8:	6863      	ldr	r3, [r4, #4]
    52ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    52be:	d206      	bcs.n	52ce <enable_dt_channels+0x26>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
	}

	if (conf->rx_mask >= BIT(IPC_CONF_NUM)) {
    52c0:	6823      	ldr	r3, [r4, #0]
    52c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    52c6:	d227      	bcs.n	5318 <enable_dt_channels+0x70>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
	}

	/* Enable the interrupts on .set_enabled() only */
	ch_config.receive_events_enabled = 0;
    52c8:	2300      	movs	r3, #0
    52ca:	9321      	str	r3, [sp, #132]	; 0x84

	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    52cc:	e04a      	b.n	5364 <enable_dt_channels+0xbc>
		LOG_WRN("tx_mask too big (or IPC_CONF_NUM too small)");
    52ce:	4b36      	ldr	r3, [pc, #216]	; (53a8 <enable_dt_channels+0x100>)
    52d0:	9327      	str	r3, [sp, #156]	; 0x9c
    52d2:	2202      	movs	r2, #2
    52d4:	f88d 2000 	strb.w	r2, [sp]
    52d8:	2300      	movs	r3, #0
    52da:	f88d 3001 	strb.w	r3, [sp, #1]
    52de:	f88d 3002 	strb.w	r3, [sp, #2]
    52e2:	f88d 3003 	strb.w	r3, [sp, #3]
    52e6:	9900      	ldr	r1, [sp, #0]
    52e8:	9126      	str	r1, [sp, #152]	; 0x98
    52ea:	4619      	mov	r1, r3
    52ec:	f363 0100 	bfi	r1, r3, #0, #1
    52f0:	f363 0141 	bfi	r1, r3, #1, #1
    52f4:	f363 0182 	bfi	r1, r3, #2, #1
    52f8:	f363 01c5 	bfi	r1, r3, #3, #3
    52fc:	f362 1188 	bfi	r1, r2, #6, #3
    5300:	2208      	movs	r2, #8
    5302:	f362 2152 	bfi	r1, r2, #9, #10
    5306:	f363 41de 	bfi	r1, r3, #19, #12
    530a:	f363 71df 	bfi	r1, r3, #31, #1
    530e:	aa26      	add	r2, sp, #152	; 0x98
    5310:	4826      	ldr	r0, [pc, #152]	; (53ac <enable_dt_channels+0x104>)
    5312:	f003 fbbb 	bl	8a8c <z_impl_z_log_msg_static_create>
    5316:	e7d3      	b.n	52c0 <enable_dt_channels+0x18>
		LOG_WRN("rx_mask too big (or IPC_CONF_NUM too small)");
    5318:	4b25      	ldr	r3, [pc, #148]	; (53b0 <enable_dt_channels+0x108>)
    531a:	932d      	str	r3, [sp, #180]	; 0xb4
    531c:	2202      	movs	r2, #2
    531e:	f88d 2000 	strb.w	r2, [sp]
    5322:	2300      	movs	r3, #0
    5324:	f88d 3001 	strb.w	r3, [sp, #1]
    5328:	f88d 3002 	strb.w	r3, [sp, #2]
    532c:	f88d 3003 	strb.w	r3, [sp, #3]
    5330:	9900      	ldr	r1, [sp, #0]
    5332:	912c      	str	r1, [sp, #176]	; 0xb0
    5334:	4619      	mov	r1, r3
    5336:	f363 0100 	bfi	r1, r3, #0, #1
    533a:	f363 0141 	bfi	r1, r3, #1, #1
    533e:	f363 0182 	bfi	r1, r3, #2, #1
    5342:	f363 01c5 	bfi	r1, r3, #3, #3
    5346:	f362 1188 	bfi	r1, r2, #6, #3
    534a:	2208      	movs	r2, #8
    534c:	f362 2152 	bfi	r1, r2, #9, #10
    5350:	f363 41de 	bfi	r1, r3, #19, #12
    5354:	f363 71df 	bfi	r1, r3, #31, #1
    5358:	aa2c      	add	r2, sp, #176	; 0xb0
    535a:	4814      	ldr	r0, [pc, #80]	; (53ac <enable_dt_channels+0x104>)
    535c:	f003 fb96 	bl	8a8c <z_impl_z_log_msg_static_create>
    5360:	e7b2      	b.n	52c8 <enable_dt_channels+0x20>
	for (size_t ch = 0; ch < IPC_CONF_NUM; ch++) {
    5362:	3301      	adds	r3, #1
    5364:	2b0f      	cmp	r3, #15
    5366:	d81a      	bhi.n	539e <enable_dt_channels+0xf6>
		if (conf->tx_mask & BIT(ch)) {
    5368:	6862      	ldr	r2, [r4, #4]
    536a:	40da      	lsrs	r2, r3
    536c:	f012 0f01 	tst.w	r2, #1
    5370:	d006      	beq.n	5380 <enable_dt_channels+0xd8>
			ch_config.send_task_config[ch] = BIT(ch);
    5372:	2201      	movs	r2, #1
    5374:	409a      	lsls	r2, r3
    5376:	a92e      	add	r1, sp, #184	; 0xb8
    5378:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    537c:	f841 2cb4 	str.w	r2, [r1, #-180]
		}

		if (conf->rx_mask & BIT(ch)) {
    5380:	6822      	ldr	r2, [r4, #0]
    5382:	40da      	lsrs	r2, r3
    5384:	f012 0f01 	tst.w	r2, #1
    5388:	d0eb      	beq.n	5362 <enable_dt_channels+0xba>
			ch_config.receive_event_config[ch] = BIT(ch);
    538a:	2101      	movs	r1, #1
    538c:	4099      	lsls	r1, r3
    538e:	f103 0210 	add.w	r2, r3, #16
    5392:	a82e      	add	r0, sp, #184	; 0xb8
    5394:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5398:	f842 1cb4 	str.w	r1, [r2, #-180]
    539c:	e7e1      	b.n	5362 <enable_dt_channels+0xba>
		}
	}

	nrfx_ipc_config_load(&ch_config);
    539e:	a801      	add	r0, sp, #4
    53a0:	f000 fe64 	bl	606c <nrfx_ipc_config_load>
}
    53a4:	b02e      	add	sp, #184	; 0xb8
    53a6:	bd10      	pop	{r4, pc}
    53a8:	0000b1c4 	.word	0x0000b1c4
    53ac:	0000a600 	.word	0x0000a600
    53b0:	0000b1f0 	.word	0x0000b1f0

000053b4 <mbox_nrf_init>:

static int mbox_nrf_init(const struct device *dev)
{
    53b4:	b510      	push	{r4, lr}
    53b6:	4604      	mov	r4, r0
	struct mbox_nrf_data *data = dev->data;
    53b8:	6902      	ldr	r2, [r0, #16]

	data->dev = dev;
    53ba:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80

	nrfx_ipc_init(0, mbox_dispatcher, (void *) data);
    53be:	4907      	ldr	r1, [pc, #28]	; (53dc <mbox_nrf_init+0x28>)
    53c0:	2000      	movs	r0, #0
    53c2:	f000 fe3b 	bl	603c <nrfx_ipc_init>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    53c6:	2200      	movs	r2, #0
    53c8:	2101      	movs	r1, #1
    53ca:	202a      	movs	r0, #42	; 0x2a
    53cc:	f003 fc6d 	bl	8caa <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_ipc_irq_handler, 0);

	enable_dt_channels(dev);
    53d0:	4620      	mov	r0, r4
    53d2:	f7ff ff69 	bl	52a8 <enable_dt_channels>

	return 0;
}
    53d6:	2000      	movs	r0, #0
    53d8:	bd10      	pop	{r4, pc}
    53da:	bf00      	nop
    53dc:	000051b9 	.word	0x000051b9

000053e0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    53e0:	b510      	push	{r4, lr}
    53e2:	b088      	sub	sp, #32
	z_impl_log_panic();
    53e4:	f7fc fc2e 	bl	1c44 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    53e8:	4b14      	ldr	r3, [pc, #80]	; (543c <k_sys_fatal_error_handler+0x5c>)
    53ea:	9307      	str	r3, [sp, #28]
    53ec:	2302      	movs	r3, #2
    53ee:	f88d 3004 	strb.w	r3, [sp, #4]
    53f2:	2400      	movs	r4, #0
    53f4:	f88d 4005 	strb.w	r4, [sp, #5]
    53f8:	f88d 4006 	strb.w	r4, [sp, #6]
    53fc:	f88d 4007 	strb.w	r4, [sp, #7]
    5400:	9b01      	ldr	r3, [sp, #4]
    5402:	9306      	str	r3, [sp, #24]
    5404:	4621      	mov	r1, r4
    5406:	f364 0100 	bfi	r1, r4, #0, #1
    540a:	f364 0141 	bfi	r1, r4, #1, #1
    540e:	f364 0182 	bfi	r1, r4, #2, #1
    5412:	f364 01c5 	bfi	r1, r4, #3, #3
    5416:	2301      	movs	r3, #1
    5418:	f363 1188 	bfi	r1, r3, #6, #3
    541c:	2308      	movs	r3, #8
    541e:	f363 2152 	bfi	r1, r3, #9, #10
    5422:	f364 41de 	bfi	r1, r4, #19, #12
    5426:	f364 71df 	bfi	r1, r4, #31, #1
    542a:	4623      	mov	r3, r4
    542c:	aa06      	add	r2, sp, #24
    542e:	4804      	ldr	r0, [pc, #16]	; (5440 <k_sys_fatal_error_handler+0x60>)
    5430:	f003 fb2c 	bl	8a8c <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    5434:	4620      	mov	r0, r4
    5436:	f003 fc76 	bl	8d26 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    543a:	bf00      	nop
    543c:	0000b24c 	.word	0x0000b24c
    5440:	0000a5e0 	.word	0x0000a5e0

00005444 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    5444:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5448:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    544c:	f002 0203 	and.w	r2, r2, #3
    5450:	4b02      	ldr	r3, [pc, #8]	; (545c <SystemCoreClockUpdate+0x18>)
    5452:	40d3      	lsrs	r3, r2
    5454:	4a02      	ldr	r2, [pc, #8]	; (5460 <SystemCoreClockUpdate+0x1c>)
    5456:	6013      	str	r3, [r2, #0]
#endif
}
    5458:	4770      	bx	lr
    545a:	bf00      	nop
    545c:	07a12000 	.word	0x07a12000
    5460:	20000054 	.word	0x20000054

00005464 <SystemInit>:

void SystemInit(void)
{
    5464:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    5466:	f004 fa6d 	bl	9944 <nrf53_errata_97>
    546a:	b168      	cbz	r0, 5488 <SystemInit+0x24>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    546c:	4b4e      	ldr	r3, [pc, #312]	; (55a8 <SystemInit+0x144>)
    546e:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
    5472:	b94b      	cbnz	r3, 5488 <SystemInit+0x24>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    5474:	4b4c      	ldr	r3, [pc, #304]	; (55a8 <SystemInit+0x144>)
    5476:	220d      	movs	r2, #13
    5478:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    547c:	2201      	movs	r2, #1
    547e:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    5482:	2200      	movs	r2, #0
    5484:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    5488:	2200      	movs	r2, #0
    548a:	e00b      	b.n	54a4 <SystemInit+0x40>
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    548c:	f102 0360 	add.w	r3, r2, #96	; 0x60
    5490:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    5494:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    5498:	00db      	lsls	r3, r3, #3
    549a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    549e:	685b      	ldr	r3, [r3, #4]
    54a0:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    54a2:	3201      	adds	r2, #1
    54a4:	2a1f      	cmp	r2, #31
    54a6:	d808      	bhi.n	54ba <SystemInit+0x56>
    54a8:	f102 0360 	add.w	r3, r2, #96	; 0x60
    54ac:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    54b0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    54b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    54b8:	d1e8      	bne.n	548c <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    54ba:	f004 fa1b 	bl	98f4 <nrf53_errata_64>
    54be:	b130      	cbz	r0, 54ce <SystemInit+0x6a>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    54c0:	4b39      	ldr	r3, [pc, #228]	; (55a8 <SystemInit+0x144>)
    54c2:	2229      	movs	r2, #41	; 0x29
    54c4:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    54c8:	2203      	movs	r2, #3
    54ca:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    54ce:	f004 f9c5 	bl	985c <nrf53_errata_42>
    54d2:	b140      	cbz	r0, 54e6 <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    54d4:	4b35      	ldr	r3, [pc, #212]	; (55ac <SystemInit+0x148>)
    54d6:	4a36      	ldr	r2, [pc, #216]	; (55b0 <SystemInit+0x14c>)
    54d8:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    54dc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    54e0:	2201      	movs	r2, #1
    54e2:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    54e6:	f004 f9cd 	bl	9884 <nrf53_errata_46>
    54ea:	b118      	cbz	r0, 54f4 <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    54ec:	4b31      	ldr	r3, [pc, #196]	; (55b4 <SystemInit+0x150>)
    54ee:	2200      	movs	r2, #0
    54f0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    54f4:	f004 f9de 	bl	98b4 <nrf53_errata_49>
    54f8:	b168      	cbz	r0, 5516 <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    54fa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    54fe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5502:	f013 0f01 	tst.w	r3, #1
    5506:	d006      	beq.n	5516 <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    5508:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    550c:	2200      	movs	r2, #0
    550e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    5512:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    5516:	f004 f9e1 	bl	98dc <nrf53_errata_55>
    551a:	b160      	cbz	r0, 5536 <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    551c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5520:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    5524:	f013 0f01 	tst.w	r3, #1
    5528:	d005      	beq.n	5536 <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    552a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    552e:	f06f 0201 	mvn.w	r2, #1
    5532:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    5536:	f004 f9f1 	bl	991c <nrf53_errata_69>
    553a:	b118      	cbz	r0, 5544 <SystemInit+0xe0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    553c:	4b1a      	ldr	r3, [pc, #104]	; (55a8 <SystemInit+0x144>)
    553e:	2265      	movs	r2, #101	; 0x65
    5540:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        }

        if (nrf53_errata_140())
    5544:	f004 fa12 	bl	996c <nrf53_errata_140>
    5548:	b120      	cbz	r0, 5554 <SystemInit+0xf0>
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    554a:	4b1a      	ldr	r3, [pc, #104]	; (55b4 <SystemInit+0x150>)
    554c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    5550:	2b00      	cmp	r3, #0
    5552:	db11      	blt.n	5578 <SystemInit+0x114>

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    5554:	4a18      	ldr	r2, [pc, #96]	; (55b8 <SystemInit+0x154>)
    5556:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    555a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    555e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    5562:	4a16      	ldr	r2, [pc, #88]	; (55bc <SystemInit+0x158>)
    5564:	6811      	ldr	r1, [r2, #0]
    5566:	4b16      	ldr	r3, [pc, #88]	; (55c0 <SystemInit+0x15c>)
    5568:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    556c:	69d2      	ldr	r2, [r2, #28]
    556e:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    5572:	f7ff ff67 	bl	5444 <SystemCoreClockUpdate>
}
    5576:	bd08      	pop	{r3, pc}
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    5578:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    557c:	2203      	movs	r2, #3
    557e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    5582:	2201      	movs	r2, #1
    5584:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    5586:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    558a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    558e:	2b00      	cmp	r3, #0
    5590:	d0f9      	beq.n	5586 <SystemInit+0x122>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    5592:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5596:	2200      	movs	r2, #0
    5598:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    559c:	2201      	movs	r2, #1
    559e:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    55a0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    55a4:	e7d6      	b.n	5554 <SystemInit+0xf0>
    55a6:	bf00      	nop
    55a8:	50004000 	.word	0x50004000
    55ac:	50039000 	.word	0x50039000
    55b0:	beef0044 	.word	0xbeef0044
    55b4:	50032000 	.word	0x50032000
    55b8:	e000ed00 	.word	0xe000ed00
    55bc:	00ff8000 	.word	0x00ff8000
    55c0:	50006000 	.word	0x50006000

000055c4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    55c4:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    55c6:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    55c8:	fab4 f384 	clz	r3, r4
    55cc:	f1c3 031f 	rsb	r3, r3, #31
    55d0:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    55d4:	2b00      	cmp	r3, #0
    55d6:	db12      	blt.n	55fe <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    55d8:	2201      	movs	r2, #1
    55da:	fa02 f303 	lsl.w	r3, r2, r3
    55de:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    55e2:	e8d0 2fef 	ldaex	r2, [r0]
    55e6:	42a2      	cmp	r2, r4
    55e8:	d104      	bne.n	55f4 <nrfx_flag32_alloc+0x30>
    55ea:	e8c0 3fee 	stlex	lr, r3, [r0]
    55ee:	f1be 0f00 	cmp.w	lr, #0
    55f2:	d1f6      	bne.n	55e2 <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    55f4:	d1e7      	bne.n	55c6 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    55f6:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    55fa:	4802      	ldr	r0, [pc, #8]	; (5604 <nrfx_flag32_alloc+0x40>)
}
    55fc:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    55fe:	4802      	ldr	r0, [pc, #8]	; (5608 <nrfx_flag32_alloc+0x44>)
    5600:	e7fc      	b.n	55fc <nrfx_flag32_alloc+0x38>
    5602:	bf00      	nop
    5604:	0bad0000 	.word	0x0bad0000
    5608:	0bad0002 	.word	0x0bad0002

0000560c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    560c:	6803      	ldr	r3, [r0, #0]
    560e:	40cb      	lsrs	r3, r1
    5610:	f013 0f01 	tst.w	r3, #1
    5614:	d111      	bne.n	563a <nrfx_flag32_free+0x2e>
{
    5616:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    5618:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    561a:	2301      	movs	r3, #1
    561c:	408b      	lsls	r3, r1
    561e:	4313      	orrs	r3, r2
    5620:	e8d0 cfef 	ldaex	ip, [r0]
    5624:	4594      	cmp	ip, r2
    5626:	d104      	bne.n	5632 <nrfx_flag32_free+0x26>
    5628:	e8c0 3fee 	stlex	lr, r3, [r0]
    562c:	f1be 0f00 	cmp.w	lr, #0
    5630:	d1f6      	bne.n	5620 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5632:	d1f1      	bne.n	5618 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    5634:	4802      	ldr	r0, [pc, #8]	; (5640 <nrfx_flag32_free+0x34>)
}
    5636:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    563a:	4802      	ldr	r0, [pc, #8]	; (5644 <nrfx_flag32_free+0x38>)
}
    563c:	4770      	bx	lr
    563e:	bf00      	nop
    5640:	0bad0000 	.word	0x0bad0000
    5644:	0bad0004 	.word	0x0bad0004

00005648 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    5648:	4b05      	ldr	r3, [pc, #20]	; (5660 <nrfx_clock_init+0x18>)
    564a:	791b      	ldrb	r3, [r3, #4]
    564c:	b92b      	cbnz	r3, 565a <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    564e:	4b04      	ldr	r3, [pc, #16]	; (5660 <nrfx_clock_init+0x18>)
    5650:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    5652:	2201      	movs	r2, #1
    5654:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    5656:	4803      	ldr	r0, [pc, #12]	; (5664 <nrfx_clock_init+0x1c>)
    5658:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    565a:	4803      	ldr	r0, [pc, #12]	; (5668 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    565c:	4770      	bx	lr
    565e:	bf00      	nop
    5660:	20000f74 	.word	0x20000f74
    5664:	0bad0000 	.word	0x0bad0000
    5668:	0bad000c 	.word	0x0bad000c

0000566c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    566c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    566e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5672:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5676:	b163      	cbz	r3, 5692 <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5678:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    567c:	2000      	movs	r0, #0
    567e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    5682:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    5686:	2201      	movs	r2, #1
    5688:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    568c:	4b28      	ldr	r3, [pc, #160]	; (5730 <nrfx_power_clock_irq_handler+0xc4>)
    568e:	681b      	ldr	r3, [r3, #0]
    5690:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5692:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5696:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    569a:	b1bb      	cbz	r3, 56cc <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    569c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    56a0:	2200      	movs	r2, #0
    56a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    56a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    56aa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    56ae:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    56b2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    56b6:	2a01      	cmp	r2, #1
    56b8:	d031      	beq.n	571e <nrfx_power_clock_irq_handler+0xb2>
    p_reg->INTENCLR = mask;
    56ba:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    56be:	2202      	movs	r2, #2
    56c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    56c4:	4b1a      	ldr	r3, [pc, #104]	; (5730 <nrfx_power_clock_irq_handler+0xc4>)
    56c6:	681b      	ldr	r3, [r3, #0]
    56c8:	2001      	movs	r0, #1
    56ca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    56cc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    56d0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    56d4:	b173      	cbz	r3, 56f4 <nrfx_power_clock_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    56d6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    56da:	2200      	movs	r2, #0
    56dc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    56e0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    56e4:	f44f 7280 	mov.w	r2, #256	; 0x100
    56e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    56ec:	4b10      	ldr	r3, [pc, #64]	; (5730 <nrfx_power_clock_irq_handler+0xc4>)
    56ee:	681b      	ldr	r3, [r3, #0]
    56f0:	2004      	movs	r0, #4
    56f2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    56f4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    56f8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    56fc:	b173      	cbz	r3, 571c <nrfx_power_clock_irq_handler+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    56fe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5702:	2200      	movs	r2, #0
    5704:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    5708:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    570c:	f44f 7200 	mov.w	r2, #512	; 0x200
    5710:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    5714:	4b06      	ldr	r3, [pc, #24]	; (5730 <nrfx_power_clock_irq_handler+0xc4>)
    5716:	681b      	ldr	r3, [r3, #0]
    5718:	2005      	movs	r0, #5
    571a:	4798      	blx	r3
    }
#endif
}
    571c:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    571e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    5722:	2202      	movs	r2, #2
    5724:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5728:	2201      	movs	r2, #1
    572a:	609a      	str	r2, [r3, #8]
}
    572c:	e7ce      	b.n	56cc <nrfx_power_clock_irq_handler+0x60>
    572e:	bf00      	nop
    5730:	20000f74 	.word	0x20000f74

00005734 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    5734:	b508      	push	{r3, lr}
    5736:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    5738:	4801      	ldr	r0, [pc, #4]	; (5740 <nrfx_dppi_channel_alloc+0xc>)
    573a:	f7ff ff43 	bl	55c4 <nrfx_flag32_alloc>
}
    573e:	bd08      	pop	{r3, pc}
    5740:	20000058 	.word	0x20000058

00005744 <nrfx_dppi_channel_free>:

nrfx_err_t nrfx_dppi_channel_free(uint8_t channel)
{
    5744:	b508      	push	{r3, lr}
    5746:	4601      	mov	r1, r0
    nrf_dppi_channels_disable(NRF_DPPIC, NRFX_BIT(channel));
    5748:	2301      	movs	r3, #1
    574a:	4083      	lsls	r3, r0
    p_reg->CHENCLR = mask;
    574c:	4a03      	ldr	r2, [pc, #12]	; (575c <nrfx_dppi_channel_free+0x18>)
    574e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return nrfx_flag32_free(&m_allocated_channels, channel);
    5752:	4803      	ldr	r0, [pc, #12]	; (5760 <nrfx_dppi_channel_free+0x1c>)
    5754:	f7ff ff5a 	bl	560c <nrfx_flag32_free>
}
    5758:	bd08      	pop	{r3, pc}
    575a:	bf00      	nop
    575c:	50017000 	.word	0x50017000
    5760:	20000058 	.word	0x20000058

00005764 <nrf_gpio_reconfigure>:
{
    5764:	b5f0      	push	{r4, r5, r6, r7, lr}
    5766:	461c      	mov	r4, r3
    5768:	9f05      	ldr	r7, [sp, #20]
    576a:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    576c:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    5770:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5772:	2801      	cmp	r0, #1
    5774:	d034      	beq.n	57e0 <nrf_gpio_reconfigure+0x7c>
        case 0: return NRF_P0;
    5776:	4d27      	ldr	r5, [pc, #156]	; (5814 <nrf_gpio_reconfigure+0xb0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5778:	f10c 0380 	add.w	r3, ip, #128	; 0x80
    577c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    5780:	b381      	cbz	r1, 57e4 <nrf_gpio_reconfigure+0x80>
    5782:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5784:	b382      	cbz	r2, 57e8 <nrf_gpio_reconfigure+0x84>
    5786:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    578a:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    578e:	b374      	cbz	r4, 57ee <nrf_gpio_reconfigure+0x8a>
    5790:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    5794:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    5798:	b367      	cbz	r7, 57f4 <nrf_gpio_reconfigure+0x90>
    579a:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    579e:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    57a2:	b356      	cbz	r6, 57fa <nrf_gpio_reconfigure+0x96>
    57a4:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    57a8:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    57ac:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    57b0:	b331      	cbz	r1, 5800 <nrf_gpio_reconfigure+0x9c>
    57b2:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    57b4:	b332      	cbz	r2, 5804 <nrf_gpio_reconfigure+0xa0>
    57b6:	7812      	ldrb	r2, [r2, #0]
    57b8:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    57ba:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    57bc:	b324      	cbz	r4, 5808 <nrf_gpio_reconfigure+0xa4>
    57be:	7822      	ldrb	r2, [r4, #0]
    57c0:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    57c2:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    57c4:	b317      	cbz	r7, 580c <nrf_gpio_reconfigure+0xa8>
    57c6:	783a      	ldrb	r2, [r7, #0]
    57c8:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    57ca:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    57cc:	b306      	cbz	r6, 5810 <nrf_gpio_reconfigure+0xac>
    57ce:	7832      	ldrb	r2, [r6, #0]
    57d0:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    57d2:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    57d4:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    57d6:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    57da:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    57de:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    57e0:	4d0d      	ldr	r5, [pc, #52]	; (5818 <nrf_gpio_reconfigure+0xb4>)
    57e2:	e7c9      	b.n	5778 <nrf_gpio_reconfigure+0x14>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    57e4:	2000      	movs	r0, #0
    57e6:	e7cd      	b.n	5784 <nrf_gpio_reconfigure+0x20>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    57e8:	f04f 0e00 	mov.w	lr, #0
    57ec:	e7cd      	b.n	578a <nrf_gpio_reconfigure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    57ee:	f04f 0e00 	mov.w	lr, #0
    57f2:	e7cf      	b.n	5794 <nrf_gpio_reconfigure+0x30>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    57f4:	f04f 0e00 	mov.w	lr, #0
    57f8:	e7d1      	b.n	579e <nrf_gpio_reconfigure+0x3a>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    57fa:	f04f 0e00 	mov.w	lr, #0
    57fe:	e7d3      	b.n	57a8 <nrf_gpio_reconfigure+0x44>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5800:	2300      	movs	r3, #0
    5802:	e7d7      	b.n	57b4 <nrf_gpio_reconfigure+0x50>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5804:	2200      	movs	r2, #0
    5806:	e7d8      	b.n	57ba <nrf_gpio_reconfigure+0x56>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5808:	2200      	movs	r2, #0
    580a:	e7da      	b.n	57c2 <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    580c:	2200      	movs	r2, #0
    580e:	e7dc      	b.n	57ca <nrf_gpio_reconfigure+0x66>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    5810:	2200      	movs	r2, #0
    5812:	e7de      	b.n	57d2 <nrf_gpio_reconfigure+0x6e>
    5814:	50842500 	.word	0x50842500
    5818:	50842800 	.word	0x50842800

0000581c <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
    581c:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    5820:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5822:	2801      	cmp	r0, #1
    5824:	d00a      	beq.n	583c <nrf_gpio_cfg_default+0x20>
        case 0: return NRF_P0;
    5826:	4906      	ldr	r1, [pc, #24]	; (5840 <nrf_gpio_cfg_default+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    5828:	3280      	adds	r2, #128	; 0x80
    582a:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    582e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    5832:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    5836:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    583a:	4770      	bx	lr
        case 1: return NRF_P1;
    583c:	4901      	ldr	r1, [pc, #4]	; (5844 <nrf_gpio_cfg_default+0x28>)
    583e:	e7f3      	b.n	5828 <nrf_gpio_cfg_default+0xc>
    5840:	50842500 	.word	0x50842500
    5844:	50842800 	.word	0x50842800

00005848 <nrf_gpio_latches_read_and_clear>:
{
    5848:	b500      	push	{lr}
    584a:	b083      	sub	sp, #12
    584c:	4684      	mov	ip, r0
    584e:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    5850:	4b0c      	ldr	r3, [pc, #48]	; (5884 <nrf_gpio_latches_read_and_clear+0x3c>)
    5852:	e893 0003 	ldmia.w	r3, {r0, r1}
    5856:	ab02      	add	r3, sp, #8
    5858:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    585c:	4663      	mov	r3, ip
    585e:	e009      	b.n	5874 <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
    5860:	a902      	add	r1, sp, #8
    5862:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    5866:	f851 1c08 	ldr.w	r1, [r1, #-8]
    586a:	6a08      	ldr	r0, [r1, #32]
    586c:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    5870:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
    5872:	3301      	adds	r3, #1
    5874:	eb0c 000e 	add.w	r0, ip, lr
    5878:	4298      	cmp	r0, r3
    587a:	d8f1      	bhi.n	5860 <nrf_gpio_latches_read_and_clear+0x18>
}
    587c:	b003      	add	sp, #12
    587e:	f85d fb04 	ldr.w	pc, [sp], #4
    5882:	bf00      	nop
    5884:	0000a6a0 	.word	0x0000a6a0

00005888 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5888:	3008      	adds	r0, #8
    588a:	4b03      	ldr	r3, [pc, #12]	; (5898 <pin_in_use+0x10>)
    588c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5890:	f000 0001 	and.w	r0, r0, #1
    5894:	4770      	bx	lr
    5896:	bf00      	nop
    5898:	2000005c 	.word	0x2000005c

0000589c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    589c:	3008      	adds	r0, #8
    589e:	4b03      	ldr	r3, [pc, #12]	; (58ac <pin_in_use_by_te+0x10>)
    58a0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    58a4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    58a8:	4770      	bx	lr
    58aa:	bf00      	nop
    58ac:	2000005c 	.word	0x2000005c

000058b0 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    58b0:	3008      	adds	r0, #8
    58b2:	4b04      	ldr	r3, [pc, #16]	; (58c4 <pin_has_trigger+0x14>)
    58b4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    58b8:	f010 001c 	ands.w	r0, r0, #28
    58bc:	bf18      	it	ne
    58be:	2001      	movne	r0, #1
    58c0:	4770      	bx	lr
    58c2:	bf00      	nop
    58c4:	2000005c 	.word	0x2000005c

000058c8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    58c8:	3008      	adds	r0, #8
    58ca:	4b03      	ldr	r3, [pc, #12]	; (58d8 <pin_is_output+0x10>)
    58cc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    58d0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    58d4:	4770      	bx	lr
    58d6:	bf00      	nop
    58d8:	2000005c 	.word	0x2000005c

000058dc <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    58dc:	3008      	adds	r0, #8
    58de:	4b02      	ldr	r3, [pc, #8]	; (58e8 <pin_te_get+0xc>)
    58e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    58e4:	0b40      	lsrs	r0, r0, #13
    58e6:	4770      	bx	lr
    58e8:	2000005c 	.word	0x2000005c

000058ec <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    58ec:	2200      	movs	r2, #0
    58ee:	e004      	b.n	58fa <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    58f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    58f4:	4283      	cmp	r3, r0
    58f6:	d00f      	beq.n	5918 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    58f8:	3201      	adds	r2, #1
    58fa:	2a2f      	cmp	r2, #47	; 0x2f
    58fc:	d80a      	bhi.n	5914 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    58fe:	f102 0308 	add.w	r3, r2, #8
    5902:	4906      	ldr	r1, [pc, #24]	; (591c <handler_in_use+0x30>)
    5904:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    5908:	f413 7f80 	tst.w	r3, #256	; 0x100
    590c:	d0f0      	beq.n	58f0 <handler_in_use+0x4>
    590e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    5912:	e7ef      	b.n	58f4 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    5914:	2000      	movs	r0, #0
    5916:	4770      	bx	lr
            return true;
    5918:	2001      	movs	r0, #1
}
    591a:	4770      	bx	lr
    591c:	2000005c 	.word	0x2000005c

00005920 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    5920:	2300      	movs	r3, #0
    5922:	b113      	cbz	r3, 592a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    5924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5928:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    592a:	4a07      	ldr	r2, [pc, #28]	; (5948 <find_handler+0x28>)
    592c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    5930:	4282      	cmp	r2, r0
    5932:	d001      	beq.n	5938 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    5934:	3301      	adds	r3, #1
    5936:	e7f4      	b.n	5922 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5938:	4a03      	ldr	r2, [pc, #12]	; (5948 <find_handler+0x28>)
    593a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    593e:	6852      	ldr	r2, [r2, #4]
    5940:	428a      	cmp	r2, r1
    5942:	d1f7      	bne.n	5934 <find_handler+0x14>
            return i;
    5944:	4618      	mov	r0, r3
    5946:	4770      	bx	lr
    5948:	2000005c 	.word	0x2000005c

0000594c <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    594c:	f100 0208 	add.w	r2, r0, #8
    5950:	4b0e      	ldr	r3, [pc, #56]	; (598c <get_initial_sense+0x40>)
    5952:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    5956:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    595a:	2b04      	cmp	r3, #4
    595c:	d010      	beq.n	5980 <get_initial_sense+0x34>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    595e:	2b05      	cmp	r3, #5
    5960:	d010      	beq.n	5984 <get_initial_sense+0x38>
    *p_pin = pin_number & 0x1F;
    5962:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    5966:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5968:	2801      	cmp	r0, #1
    596a:	d007      	beq.n	597c <get_initial_sense+0x30>
        case 0: return NRF_P0;
    596c:	4b08      	ldr	r3, [pc, #32]	; (5990 <get_initial_sense+0x44>)
    return p_reg->IN;
    596e:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5970:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5972:	f013 0f01 	tst.w	r3, #1
    5976:	d007      	beq.n	5988 <get_initial_sense+0x3c>
    5978:	2003      	movs	r0, #3
    597a:	4770      	bx	lr
        case 1: return NRF_P1;
    597c:	4b05      	ldr	r3, [pc, #20]	; (5994 <get_initial_sense+0x48>)
    597e:	e7f6      	b.n	596e <get_initial_sense+0x22>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5980:	2003      	movs	r0, #3
    5982:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5984:	2002      	movs	r0, #2
    5986:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5988:	2002      	movs	r0, #2
    }

    return sense;
}
    598a:	4770      	bx	lr
    598c:	2000005c 	.word	0x2000005c
    5990:	50842500 	.word	0x50842500
    5994:	50842800 	.word	0x50842800

00005998 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5998:	3008      	adds	r0, #8
    599a:	4b06      	ldr	r3, [pc, #24]	; (59b4 <channel_handler_get+0x1c>)
    599c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    59a0:	f410 7f80 	tst.w	r0, #256	; 0x100
    59a4:	d004      	beq.n	59b0 <channel_handler_get+0x18>
    59a6:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    59aa:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    59ae:	4770      	bx	lr
        return NULL;
    59b0:	2000      	movs	r0, #0
}
    59b2:	4770      	bx	lr
    59b4:	2000005c 	.word	0x2000005c

000059b8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    59b8:	b570      	push	{r4, r5, r6, lr}
    59ba:	4604      	mov	r4, r0
    59bc:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    59be:	f7ff ffeb 	bl	5998 <channel_handler_get>

    if (handler)
    59c2:	b120      	cbz	r0, 59ce <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    59c4:	6806      	ldr	r6, [r0, #0]
    59c6:	6842      	ldr	r2, [r0, #4]
    59c8:	4629      	mov	r1, r5
    59ca:	4620      	mov	r0, r4
    59cc:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    59ce:	4b04      	ldr	r3, [pc, #16]	; (59e0 <call_handler+0x28>)
    59d0:	689b      	ldr	r3, [r3, #8]
    59d2:	b123      	cbz	r3, 59de <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    59d4:	4a02      	ldr	r2, [pc, #8]	; (59e0 <call_handler+0x28>)
    59d6:	68d2      	ldr	r2, [r2, #12]
    59d8:	4629      	mov	r1, r5
    59da:	4620      	mov	r0, r4
    59dc:	4798      	blx	r3
    }
}
    59de:	bd70      	pop	{r4, r5, r6, pc}
    59e0:	2000005c 	.word	0x2000005c

000059e4 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    59e4:	b570      	push	{r4, r5, r6, lr}
    59e6:	4606      	mov	r6, r0
    59e8:	460c      	mov	r4, r1
    59ea:	4615      	mov	r5, r2
    if (is_level(trigger))
    59ec:	4608      	mov	r0, r1
    59ee:	f004 f970 	bl	9cd2 <is_level>
    59f2:	b960      	cbnz	r0, 5a0e <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    59f4:	2d02      	cmp	r5, #2
    59f6:	d026      	beq.n	5a46 <next_sense_cond_call_handler+0x62>
    59f8:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    59fa:	4630      	mov	r0, r6
    59fc:	f004 f941 	bl	9c82 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5a00:	2c03      	cmp	r4, #3
    5a02:	d024      	beq.n	5a4e <next_sense_cond_call_handler+0x6a>
    5a04:	2d02      	cmp	r5, #2
    5a06:	d020      	beq.n	5a4a <next_sense_cond_call_handler+0x66>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5a08:	2d03      	cmp	r5, #3
    5a0a:	d025      	beq.n	5a58 <next_sense_cond_call_handler+0x74>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    5a0c:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    5a0e:	4621      	mov	r1, r4
    5a10:	4630      	mov	r0, r6
    5a12:	f7ff ffd1 	bl	59b8 <call_handler>
    *p_pin = pin_number & 0x1F;
    5a16:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    5a1a:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5a1c:	2a01      	cmp	r2, #1
    5a1e:	d010      	beq.n	5a42 <next_sense_cond_call_handler+0x5e>
        case 0: return NRF_P0;
    5a20:	4a0f      	ldr	r2, [pc, #60]	; (5a60 <next_sense_cond_call_handler+0x7c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5a22:	3380      	adds	r3, #128	; 0x80
    5a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    5a28:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5a2c:	429d      	cmp	r5, r3
    5a2e:	d1ed      	bne.n	5a0c <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5a30:	2100      	movs	r1, #0
    5a32:	4630      	mov	r0, r6
    5a34:	f004 f925 	bl	9c82 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5a38:	4629      	mov	r1, r5
    5a3a:	4630      	mov	r0, r6
    5a3c:	f004 f921 	bl	9c82 <nrf_gpio_cfg_sense_set>
    5a40:	e7e4      	b.n	5a0c <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    5a42:	4a08      	ldr	r2, [pc, #32]	; (5a64 <next_sense_cond_call_handler+0x80>)
    5a44:	e7ed      	b.n	5a22 <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5a46:	2103      	movs	r1, #3
    5a48:	e7d7      	b.n	59fa <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5a4a:	2c01      	cmp	r4, #1
    5a4c:	d1dc      	bne.n	5a08 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    5a4e:	4621      	mov	r1, r4
    5a50:	4630      	mov	r0, r6
    5a52:	f7ff ffb1 	bl	59b8 <call_handler>
}
    5a56:	e7d9      	b.n	5a0c <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5a58:	2c02      	cmp	r4, #2
    5a5a:	d1d7      	bne.n	5a0c <next_sense_cond_call_handler+0x28>
    5a5c:	e7f7      	b.n	5a4e <next_sense_cond_call_handler+0x6a>
    5a5e:	bf00      	nop
    5a60:	50842500 	.word	0x50842500
    5a64:	50842800 	.word	0x50842800

00005a68 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5a68:	f100 0208 	add.w	r2, r0, #8
    5a6c:	4b0e      	ldr	r3, [pc, #56]	; (5aa8 <release_handler+0x40>)
    5a6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    5a72:	f413 7f80 	tst.w	r3, #256	; 0x100
    5a76:	d016      	beq.n	5aa6 <release_handler+0x3e>
{
    5a78:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5a7a:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5a7e:	4610      	mov	r0, r2
    5a80:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5a84:	4a08      	ldr	r2, [pc, #32]	; (5aa8 <release_handler+0x40>)
    5a86:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    5a8a:	4620      	mov	r0, r4
    5a8c:	f7ff ff2e 	bl	58ec <handler_in_use>
    5a90:	b100      	cbz	r0, 5a94 <release_handler+0x2c>
}
    5a92:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    5a94:	4804      	ldr	r0, [pc, #16]	; (5aa8 <release_handler+0x40>)
    5a96:	2300      	movs	r3, #0
    5a98:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5a9c:	4621      	mov	r1, r4
    5a9e:	3074      	adds	r0, #116	; 0x74
    5aa0:	f7ff fdb4 	bl	560c <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5aa4:	e7f5      	b.n	5a92 <release_handler+0x2a>
    5aa6:	4770      	bx	lr
    5aa8:	2000005c 	.word	0x2000005c

00005aac <pin_handler_trigger_uninit>:
{
    5aac:	b510      	push	{r4, lr}
    5aae:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    5ab0:	f7ff fef4 	bl	589c <pin_in_use_by_te>
    5ab4:	b150      	cbz	r0, 5acc <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5ab6:	4620      	mov	r0, r4
    5ab8:	f7ff ff10 	bl	58dc <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5abc:	4b08      	ldr	r3, [pc, #32]	; (5ae0 <pin_handler_trigger_uninit+0x34>)
    5abe:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    5ac2:	2200      	movs	r2, #0
    5ac4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    5ac8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    5acc:	4620      	mov	r0, r4
    5ace:	f7ff ffcb 	bl	5a68 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5ad2:	3408      	adds	r4, #8
    5ad4:	4b03      	ldr	r3, [pc, #12]	; (5ae4 <pin_handler_trigger_uninit+0x38>)
    5ad6:	2200      	movs	r2, #0
    5ad8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    5adc:	bd10      	pop	{r4, pc}
    5ade:	bf00      	nop
    5ae0:	5000d000 	.word	0x5000d000
    5ae4:	2000005c 	.word	0x2000005c

00005ae8 <pin_handler_set>:
{
    5ae8:	b570      	push	{r4, r5, r6, lr}
    5aea:	b082      	sub	sp, #8
    5aec:	4605      	mov	r5, r0
    5aee:	460e      	mov	r6, r1
    5af0:	4614      	mov	r4, r2
    release_handler(pin);
    5af2:	f7ff ffb9 	bl	5a68 <release_handler>
    if (!handler)
    5af6:	b326      	cbz	r6, 5b42 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    5af8:	4621      	mov	r1, r4
    5afa:	4630      	mov	r0, r6
    5afc:	f7ff ff10 	bl	5920 <find_handler>
    if (handler_id < 0)
    5b00:	1e03      	subs	r3, r0, #0
    5b02:	db13      	blt.n	5b2c <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    5b04:	4910      	ldr	r1, [pc, #64]	; (5b48 <pin_handler_set+0x60>)
    5b06:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5b0a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    5b0e:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5b10:	f105 0008 	add.w	r0, r5, #8
    5b14:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    5b18:	025b      	lsls	r3, r3, #9
    5b1a:	b29b      	uxth	r3, r3
    5b1c:	4313      	orrs	r3, r2
    5b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5b22:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    5b26:	4809      	ldr	r0, [pc, #36]	; (5b4c <pin_handler_set+0x64>)
}
    5b28:	b002      	add	sp, #8
    5b2a:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5b2c:	f10d 0107 	add.w	r1, sp, #7
    5b30:	4807      	ldr	r0, [pc, #28]	; (5b50 <pin_handler_set+0x68>)
    5b32:	f7ff fd47 	bl	55c4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5b36:	4b05      	ldr	r3, [pc, #20]	; (5b4c <pin_handler_set+0x64>)
    5b38:	4298      	cmp	r0, r3
    5b3a:	d1f5      	bne.n	5b28 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    5b3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5b40:	e7e0      	b.n	5b04 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    5b42:	4802      	ldr	r0, [pc, #8]	; (5b4c <pin_handler_set+0x64>)
    5b44:	e7f0      	b.n	5b28 <pin_handler_set+0x40>
    5b46:	bf00      	nop
    5b48:	2000005c 	.word	0x2000005c
    5b4c:	0bad0000 	.word	0x0bad0000
    5b50:	200000d0 	.word	0x200000d0

00005b54 <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    5b54:	b570      	push	{r4, r5, r6, lr}
    5b56:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    5b58:	466a      	mov	r2, sp
    5b5a:	2102      	movs	r1, #2
    5b5c:	2000      	movs	r0, #0
    5b5e:	f7ff fe73 	bl	5848 <nrf_gpio_latches_read_and_clear>
    5b62:	e03e      	b.n	5be2 <port_event_handle+0x8e>
    5b64:	4e21      	ldr	r6, [pc, #132]	; (5bec <port_event_handle+0x98>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5b66:	f105 0380 	add.w	r3, r5, #128	; 0x80
    5b6a:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    5b6e:	f3c2 4201 	ubfx	r2, r2, #16, #2
    5b72:	f7ff ff37 	bl	59e4 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    5b76:	2301      	movs	r3, #1
    5b78:	40ab      	lsls	r3, r5
    5b7a:	6233      	str	r3, [r6, #32]
            while (latch[i])
    5b7c:	ab02      	add	r3, sp, #8
    5b7e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5b82:	f853 0c08 	ldr.w	r0, [r3, #-8]
    5b86:	b1f8      	cbz	r0, 5bc8 <port_event_handle+0x74>
                uint32_t pin = NRF_CTZ(latch[i]);
    5b88:	fa90 f0a0 	rbit	r0, r0
    5b8c:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    5b90:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5b94:	f100 0208 	add.w	r2, r0, #8
    5b98:	4b15      	ldr	r3, [pc, #84]	; (5bf0 <port_event_handle+0x9c>)
    5b9a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    5b9e:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5ba2:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    5ba4:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    5ba8:	f81d 2005 	ldrb.w	r2, [sp, r5]
    5bac:	2301      	movs	r3, #1
    5bae:	40b3      	lsls	r3, r6
    5bb0:	43db      	mvns	r3, r3
    5bb2:	b25b      	sxtb	r3, r3
    5bb4:	4013      	ands	r3, r2
    5bb6:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    5bba:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    5bbe:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5bc0:	2b01      	cmp	r3, #1
    5bc2:	d0cf      	beq.n	5b64 <port_event_handle+0x10>
        case 0: return NRF_P0;
    5bc4:	4e0b      	ldr	r6, [pc, #44]	; (5bf4 <port_event_handle+0xa0>)
    5bc6:	e7ce      	b.n	5b66 <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5bc8:	3401      	adds	r4, #1
    5bca:	2c01      	cmp	r4, #1
    5bcc:	d9d6      	bls.n	5b7c <port_event_handle+0x28>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5bce:	4b0a      	ldr	r3, [pc, #40]	; (5bf8 <port_event_handle+0xa4>)
    5bd0:	2200      	movs	r2, #0
    5bd2:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    5bd6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    5bda:	4668      	mov	r0, sp
    5bdc:	f004 f87e 	bl	9cdc <latch_pending_read_and_check>
    5be0:	b108      	cbz	r0, 5be6 <port_event_handle+0x92>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5be2:	2400      	movs	r4, #0
    5be4:	e7f1      	b.n	5bca <port_event_handle+0x76>
}
    5be6:	b002      	add	sp, #8
    5be8:	bd70      	pop	{r4, r5, r6, pc}
    5bea:	bf00      	nop
    5bec:	50842800 	.word	0x50842800
    5bf0:	2000005c 	.word	0x2000005c
    5bf4:	50842500 	.word	0x50842500
    5bf8:	5000d000 	.word	0x5000d000

00005bfc <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    5bfc:	b538      	push	{r3, r4, r5, lr}
    5bfe:	4604      	mov	r4, r0
    while (mask)
    5c00:	e018      	b.n	5c34 <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    5c02:	fa94 f3a4 	rbit	r3, r4
    5c06:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5c0a:	2201      	movs	r2, #1
    5c0c:	409a      	lsls	r2, r3
    5c0e:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5c12:	4a0a      	ldr	r2, [pc, #40]	; (5c3c <gpiote_evt_handle+0x40>)
    5c14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5c18:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    5c1c:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5c20:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5c24:	f3c0 4001 	ubfx	r0, r0, #16, #2
    5c28:	f004 f851 	bl	9cce <gpiote_polarity_to_trigger>
    5c2c:	4601      	mov	r1, r0
    5c2e:	4628      	mov	r0, r5
    5c30:	f7ff fec2 	bl	59b8 <call_handler>
    while (mask)
    5c34:	2c00      	cmp	r4, #0
    5c36:	d1e4      	bne.n	5c02 <gpiote_evt_handle+0x6>
    }
}
    5c38:	bd38      	pop	{r3, r4, r5, pc}
    5c3a:	bf00      	nop
    5c3c:	5000d000 	.word	0x5000d000

00005c40 <nrfx_gpiote_input_configure>:
{
    5c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c44:	b084      	sub	sp, #16
    5c46:	4604      	mov	r4, r0
    5c48:	4615      	mov	r5, r2
    5c4a:	461e      	mov	r6, r3
    if (p_input_config)
    5c4c:	b309      	cbz	r1, 5c92 <nrfx_gpiote_input_configure+0x52>
    5c4e:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    5c50:	f004 f827 	bl	9ca2 <pin_is_task_output>
    5c54:	2800      	cmp	r0, #0
    5c56:	d13f      	bne.n	5cd8 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5c58:	2300      	movs	r3, #0
    5c5a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    5c5e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5c62:	9301      	str	r3, [sp, #4]
    5c64:	9300      	str	r3, [sp, #0]
    5c66:	463b      	mov	r3, r7
    5c68:	f10d 020f 	add.w	r2, sp, #15
    5c6c:	f10d 010e 	add.w	r1, sp, #14
    5c70:	4620      	mov	r0, r4
    5c72:	f7ff fd77 	bl	5764 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5c76:	4a39      	ldr	r2, [pc, #228]	; (5d5c <nrfx_gpiote_input_configure+0x11c>)
    5c78:	f104 0108 	add.w	r1, r4, #8
    5c7c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5c80:	f023 0302 	bic.w	r3, r3, #2
    5c84:	b29b      	uxth	r3, r3
    5c86:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5c8a:	f043 0301 	orr.w	r3, r3, #1
    5c8e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    5c92:	b1bd      	cbz	r5, 5cc4 <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5c94:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5c96:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    5c9a:	4620      	mov	r0, r4
    5c9c:	f7ff fe14 	bl	58c8 <pin_is_output>
    5ca0:	b1e0      	cbz	r0, 5cdc <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    5ca2:	f1b8 0f00 	cmp.w	r8, #0
    5ca6:	d153      	bne.n	5d50 <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5ca8:	4a2c      	ldr	r2, [pc, #176]	; (5d5c <nrfx_gpiote_input_configure+0x11c>)
    5caa:	f104 0108 	add.w	r1, r4, #8
    5cae:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5cb2:	f023 031c 	bic.w	r3, r3, #28
    5cb6:	b29b      	uxth	r3, r3
    5cb8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5cbc:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    5cc0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    5cc4:	2e00      	cmp	r6, #0
    5cc6:	d047      	beq.n	5d58 <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5cc8:	6872      	ldr	r2, [r6, #4]
    5cca:	6831      	ldr	r1, [r6, #0]
    5ccc:	4620      	mov	r0, r4
    5cce:	f7ff ff0b 	bl	5ae8 <pin_handler_set>
}
    5cd2:	b004      	add	sp, #16
    5cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    5cd8:	4821      	ldr	r0, [pc, #132]	; (5d60 <nrfx_gpiote_input_configure+0x120>)
    5cda:	e7fa      	b.n	5cd2 <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5cdc:	4a1f      	ldr	r2, [pc, #124]	; (5d5c <nrfx_gpiote_input_configure+0x11c>)
    5cde:	f104 0108 	add.w	r1, r4, #8
    5ce2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5ce6:	f023 0320 	bic.w	r3, r3, #32
    5cea:	04db      	lsls	r3, r3, #19
    5cec:	0cdb      	lsrs	r3, r3, #19
    5cee:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    5cf2:	f1b8 0f00 	cmp.w	r8, #0
    5cf6:	d0d7      	beq.n	5ca8 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    5cf8:	2f03      	cmp	r7, #3
    5cfa:	d82b      	bhi.n	5d54 <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5cfc:	686b      	ldr	r3, [r5, #4]
    5cfe:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5d00:	b947      	cbnz	r7, 5d14 <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
    5d02:	4b18      	ldr	r3, [pc, #96]	; (5d64 <nrfx_gpiote_input_configure+0x124>)
    5d04:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    5d08:	2200      	movs	r2, #0
    5d0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    5d0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    5d12:	e7c9      	b.n	5ca8 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    5d14:	4638      	mov	r0, r7
    5d16:	f003 ffdb 	bl	9cd0 <gpiote_trigger_to_polarity>
    5d1a:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5d1c:	4811      	ldr	r0, [pc, #68]	; (5d64 <nrfx_gpiote_input_configure+0x124>)
    5d1e:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    5d22:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    5d26:	f022 0203 	bic.w	r2, r2, #3
    5d2a:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    5d2e:	4622      	mov	r2, r4
    5d30:	4629      	mov	r1, r5
    5d32:	f003 ff6e 	bl	9c12 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5d36:	4a09      	ldr	r2, [pc, #36]	; (5d5c <nrfx_gpiote_input_configure+0x11c>)
    5d38:	f104 0108 	add.w	r1, r4, #8
    5d3c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5d40:	036d      	lsls	r5, r5, #13
    5d42:	b2ad      	uxth	r5, r5
    5d44:	432b      	orrs	r3, r5
    5d46:	f043 0320 	orr.w	r3, r3, #32
    5d4a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    5d4e:	e7ab      	b.n	5ca8 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    5d50:	4803      	ldr	r0, [pc, #12]	; (5d60 <nrfx_gpiote_input_configure+0x120>)
    5d52:	e7be      	b.n	5cd2 <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    5d54:	4802      	ldr	r0, [pc, #8]	; (5d60 <nrfx_gpiote_input_configure+0x120>)
    5d56:	e7bc      	b.n	5cd2 <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    5d58:	4803      	ldr	r0, [pc, #12]	; (5d68 <nrfx_gpiote_input_configure+0x128>)
    5d5a:	e7ba      	b.n	5cd2 <nrfx_gpiote_input_configure+0x92>
    5d5c:	2000005c 	.word	0x2000005c
    5d60:	0bad0004 	.word	0x0bad0004
    5d64:	5000d000 	.word	0x5000d000
    5d68:	0bad0000 	.word	0x0bad0000

00005d6c <nrfx_gpiote_output_configure>:
{
    5d6c:	b570      	push	{r4, r5, r6, lr}
    5d6e:	b084      	sub	sp, #16
    5d70:	4604      	mov	r4, r0
    5d72:	4615      	mov	r5, r2
    if (p_config)
    5d74:	b329      	cbz	r1, 5dc2 <nrfx_gpiote_output_configure+0x56>
    5d76:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5d78:	f003 ffa2 	bl	9cc0 <pin_is_input>
    5d7c:	b120      	cbz	r0, 5d88 <nrfx_gpiote_output_configure+0x1c>
    5d7e:	4620      	mov	r0, r4
    5d80:	f7ff fd8c 	bl	589c <pin_in_use_by_te>
    5d84:	2800      	cmp	r0, #0
    5d86:	d13a      	bne.n	5dfe <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5d88:	4620      	mov	r0, r4
    5d8a:	f7ff fd91 	bl	58b0 <pin_has_trigger>
    5d8e:	b110      	cbz	r0, 5d96 <nrfx_gpiote_output_configure+0x2a>
    5d90:	7873      	ldrb	r3, [r6, #1]
    5d92:	2b01      	cmp	r3, #1
    5d94:	d033      	beq.n	5dfe <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    5d96:	2301      	movs	r3, #1
    5d98:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    5d9c:	2300      	movs	r3, #0
    5d9e:	9301      	str	r3, [sp, #4]
    5da0:	9600      	str	r6, [sp, #0]
    5da2:	1cb3      	adds	r3, r6, #2
    5da4:	1c72      	adds	r2, r6, #1
    5da6:	f10d 010f 	add.w	r1, sp, #15
    5daa:	4620      	mov	r0, r4
    5dac:	f7ff fcda 	bl	5764 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5db0:	4a20      	ldr	r2, [pc, #128]	; (5e34 <nrfx_gpiote_output_configure+0xc8>)
    5db2:	f104 0108 	add.w	r1, r4, #8
    5db6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5dba:	f043 0303 	orr.w	r3, r3, #3
    5dbe:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    5dc2:	b395      	cbz	r5, 5e2a <nrfx_gpiote_output_configure+0xbe>
        if (pin_is_input(pin))
    5dc4:	4620      	mov	r0, r4
    5dc6:	f003 ff7b 	bl	9cc0 <pin_is_input>
    5dca:	bb80      	cbnz	r0, 5e2e <nrfx_gpiote_output_configure+0xc2>
        uint32_t ch = p_task_config->task_ch;
    5dcc:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    5dce:	4b1a      	ldr	r3, [pc, #104]	; (5e38 <nrfx_gpiote_output_configure+0xcc>)
    5dd0:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    5dd4:	2100      	movs	r1, #0
    5dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
    5dda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5dde:	4a15      	ldr	r2, [pc, #84]	; (5e34 <nrfx_gpiote_output_configure+0xc8>)
    5de0:	f104 0108 	add.w	r1, r4, #8
    5de4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5de8:	f023 0320 	bic.w	r3, r3, #32
    5dec:	04db      	lsls	r3, r3, #19
    5dee:	0cdb      	lsrs	r3, r3, #19
    5df0:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5df4:	786b      	ldrb	r3, [r5, #1]
    5df6:	b923      	cbnz	r3, 5e02 <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
    5df8:	4810      	ldr	r0, [pc, #64]	; (5e3c <nrfx_gpiote_output_configure+0xd0>)
}
    5dfa:	b004      	add	sp, #16
    5dfc:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    5dfe:	4810      	ldr	r0, [pc, #64]	; (5e40 <nrfx_gpiote_output_configure+0xd4>)
    5e00:	e7fb      	b.n	5dfa <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
    5e02:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    5e04:	9200      	str	r2, [sp, #0]
    5e06:	4622      	mov	r2, r4
    5e08:	4631      	mov	r1, r6
    5e0a:	480b      	ldr	r0, [pc, #44]	; (5e38 <nrfx_gpiote_output_configure+0xcc>)
    5e0c:	f003 ff1a 	bl	9c44 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5e10:	4a08      	ldr	r2, [pc, #32]	; (5e34 <nrfx_gpiote_output_configure+0xc8>)
    5e12:	3408      	adds	r4, #8
    5e14:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    5e18:	0376      	lsls	r6, r6, #13
    5e1a:	b2b6      	uxth	r6, r6
    5e1c:	4333      	orrs	r3, r6
    5e1e:	f043 0320 	orr.w	r3, r3, #32
    5e22:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    5e26:	4805      	ldr	r0, [pc, #20]	; (5e3c <nrfx_gpiote_output_configure+0xd0>)
    5e28:	e7e7      	b.n	5dfa <nrfx_gpiote_output_configure+0x8e>
    5e2a:	4804      	ldr	r0, [pc, #16]	; (5e3c <nrfx_gpiote_output_configure+0xd0>)
    5e2c:	e7e5      	b.n	5dfa <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
    5e2e:	4804      	ldr	r0, [pc, #16]	; (5e40 <nrfx_gpiote_output_configure+0xd4>)
    5e30:	e7e3      	b.n	5dfa <nrfx_gpiote_output_configure+0x8e>
    5e32:	bf00      	nop
    5e34:	2000005c 	.word	0x2000005c
    5e38:	5000d000 	.word	0x5000d000
    5e3c:	0bad0000 	.word	0x0bad0000
    5e40:	0bad0004 	.word	0x0bad0004

00005e44 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5e44:	4b01      	ldr	r3, [pc, #4]	; (5e4c <nrfx_gpiote_global_callback_set+0x8>)
    5e46:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    5e48:	60d9      	str	r1, [r3, #12]
}
    5e4a:	4770      	bx	lr
    5e4c:	2000005c 	.word	0x2000005c

00005e50 <nrfx_gpiote_channel_get>:
{
    5e50:	b538      	push	{r3, r4, r5, lr}
    5e52:	4604      	mov	r4, r0
    5e54:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    5e56:	f7ff fd21 	bl	589c <pin_in_use_by_te>
    5e5a:	b140      	cbz	r0, 5e6e <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5e5c:	f104 0008 	add.w	r0, r4, #8
    5e60:	4b04      	ldr	r3, [pc, #16]	; (5e74 <nrfx_gpiote_channel_get+0x24>)
    5e62:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    5e66:	0b5b      	lsrs	r3, r3, #13
    5e68:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    5e6a:	4803      	ldr	r0, [pc, #12]	; (5e78 <nrfx_gpiote_channel_get+0x28>)
}
    5e6c:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5e6e:	4803      	ldr	r0, [pc, #12]	; (5e7c <nrfx_gpiote_channel_get+0x2c>)
    5e70:	e7fc      	b.n	5e6c <nrfx_gpiote_channel_get+0x1c>
    5e72:	bf00      	nop
    5e74:	2000005c 	.word	0x2000005c
    5e78:	0bad0000 	.word	0x0bad0000
    5e7c:	0bad0004 	.word	0x0bad0004

00005e80 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5e80:	4b0f      	ldr	r3, [pc, #60]	; (5ec0 <nrfx_gpiote_init+0x40>)
    5e82:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5e86:	b10b      	cbz	r3, 5e8c <nrfx_gpiote_init+0xc>
        return err_code;
    5e88:	480e      	ldr	r0, [pc, #56]	; (5ec4 <nrfx_gpiote_init+0x44>)
}
    5e8a:	4770      	bx	lr
{
    5e8c:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5e8e:	4c0e      	ldr	r4, [pc, #56]	; (5ec8 <nrfx_gpiote_init+0x48>)
    5e90:	2260      	movs	r2, #96	; 0x60
    5e92:	2100      	movs	r1, #0
    5e94:	4620      	mov	r0, r4
    5e96:	f003 f80d 	bl	8eb4 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5e9a:	200d      	movs	r0, #13
    5e9c:	f002 fefb 	bl	8c96 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5ea0:	4b0a      	ldr	r3, [pc, #40]	; (5ecc <nrfx_gpiote_init+0x4c>)
    5ea2:	2200      	movs	r2, #0
    5ea4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    5ea8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    5eac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5eb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5eb4:	2301      	movs	r3, #1
    5eb6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5eba:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
    5ebc:	4804      	ldr	r0, [pc, #16]	; (5ed0 <nrfx_gpiote_init+0x50>)
}
    5ebe:	bd10      	pop	{r4, pc}
    5ec0:	2000005c 	.word	0x2000005c
    5ec4:	0bad0005 	.word	0x0bad0005
    5ec8:	2000006c 	.word	0x2000006c
    5ecc:	5000d000 	.word	0x5000d000
    5ed0:	0bad0000 	.word	0x0bad0000

00005ed4 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5ed4:	4b03      	ldr	r3, [pc, #12]	; (5ee4 <nrfx_gpiote_is_init+0x10>)
    5ed6:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5eda:	3800      	subs	r0, #0
    5edc:	bf18      	it	ne
    5ede:	2001      	movne	r0, #1
    5ee0:	4770      	bx	lr
    5ee2:	bf00      	nop
    5ee4:	2000005c 	.word	0x2000005c

00005ee8 <nrfx_gpiote_channel_free>:
{
    5ee8:	b508      	push	{r3, lr}
    5eea:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5eec:	4801      	ldr	r0, [pc, #4]	; (5ef4 <nrfx_gpiote_channel_free+0xc>)
    5eee:	f7ff fb8d 	bl	560c <nrfx_flag32_free>
}
    5ef2:	bd08      	pop	{r3, pc}
    5ef4:	200000cc 	.word	0x200000cc

00005ef8 <nrfx_gpiote_channel_alloc>:
{
    5ef8:	b508      	push	{r3, lr}
    5efa:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5efc:	4801      	ldr	r0, [pc, #4]	; (5f04 <nrfx_gpiote_channel_alloc+0xc>)
    5efe:	f7ff fb61 	bl	55c4 <nrfx_flag32_alloc>
}
    5f02:	bd08      	pop	{r3, pc}
    5f04:	200000cc 	.word	0x200000cc

00005f08 <nrfx_gpiote_trigger_enable>:
{
    5f08:	b538      	push	{r3, r4, r5, lr}
    5f0a:	4604      	mov	r4, r0
    5f0c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5f0e:	f7ff fcc5 	bl	589c <pin_in_use_by_te>
    5f12:	b300      	cbz	r0, 5f56 <nrfx_gpiote_trigger_enable+0x4e>
    5f14:	4620      	mov	r0, r4
    5f16:	f003 fed3 	bl	9cc0 <pin_is_input>
    5f1a:	b1e0      	cbz	r0, 5f56 <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    5f1c:	4620      	mov	r0, r4
    5f1e:	f7ff fcdd 	bl	58dc <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    5f22:	0083      	lsls	r3, r0, #2
    5f24:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    5f28:	b29b      	uxth	r3, r3
    5f2a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    5f2e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5f32:	2200      	movs	r2, #0
    5f34:	601a      	str	r2, [r3, #0]
    5f36:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5f38:	4a0b      	ldr	r2, [pc, #44]	; (5f68 <nrfx_gpiote_trigger_enable+0x60>)
    5f3a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    5f3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    5f42:	f043 0301 	orr.w	r3, r3, #1
    5f46:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    5f4a:	b15d      	cbz	r5, 5f64 <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5f4c:	2301      	movs	r3, #1
    5f4e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    5f50:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5f54:	e006      	b.n	5f64 <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5f56:	4620      	mov	r0, r4
    5f58:	f7ff fcf8 	bl	594c <get_initial_sense>
    5f5c:	4601      	mov	r1, r0
    5f5e:	4620      	mov	r0, r4
    5f60:	f003 fe8f 	bl	9c82 <nrf_gpio_cfg_sense_set>
}
    5f64:	bd38      	pop	{r3, r4, r5, pc}
    5f66:	bf00      	nop
    5f68:	5000d000 	.word	0x5000d000

00005f6c <nrfx_gpiote_trigger_disable>:
{
    5f6c:	b510      	push	{r4, lr}
    5f6e:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5f70:	f7ff fc94 	bl	589c <pin_in_use_by_te>
    5f74:	b1a0      	cbz	r0, 5fa0 <nrfx_gpiote_trigger_disable+0x34>
    5f76:	4620      	mov	r0, r4
    5f78:	f003 fea2 	bl	9cc0 <pin_is_input>
    5f7c:	b180      	cbz	r0, 5fa0 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    5f7e:	4620      	mov	r0, r4
    5f80:	f7ff fcac 	bl	58dc <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5f84:	2201      	movs	r2, #1
    5f86:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    5f88:	4b08      	ldr	r3, [pc, #32]	; (5fac <nrfx_gpiote_trigger_disable+0x40>)
    5f8a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5f8e:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    5f92:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    5f96:	f022 0203 	bic.w	r2, r2, #3
    5f9a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    5f9e:	e003      	b.n	5fa8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5fa0:	2100      	movs	r1, #0
    5fa2:	4620      	mov	r0, r4
    5fa4:	f003 fe6d 	bl	9c82 <nrf_gpio_cfg_sense_set>
}
    5fa8:	bd10      	pop	{r4, pc}
    5faa:	bf00      	nop
    5fac:	5000d000 	.word	0x5000d000

00005fb0 <nrfx_gpiote_pin_uninit>:
{
    5fb0:	b510      	push	{r4, lr}
    5fb2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5fb4:	f7ff fc68 	bl	5888 <pin_in_use>
    5fb8:	b908      	cbnz	r0, 5fbe <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    5fba:	4806      	ldr	r0, [pc, #24]	; (5fd4 <nrfx_gpiote_pin_uninit+0x24>)
}
    5fbc:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    5fbe:	4620      	mov	r0, r4
    5fc0:	f7ff ffd4 	bl	5f6c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5fc4:	4620      	mov	r0, r4
    5fc6:	f7ff fd71 	bl	5aac <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
    5fca:	4620      	mov	r0, r4
    5fcc:	f7ff fc26 	bl	581c <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
    5fd0:	4801      	ldr	r0, [pc, #4]	; (5fd8 <nrfx_gpiote_pin_uninit+0x28>)
    5fd2:	e7f3      	b.n	5fbc <nrfx_gpiote_pin_uninit+0xc>
    5fd4:	0bad0004 	.word	0x0bad0004
    5fd8:	0bad0000 	.word	0x0bad0000

00005fdc <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    5fdc:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5fde:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    5fe0:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5fe4:	2100      	movs	r1, #0
    uint32_t status = 0;
    5fe6:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5fe8:	e003      	b.n	5ff2 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    5fea:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    5fec:	3304      	adds	r3, #4
    5fee:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5ff0:	3101      	adds	r1, #1
    5ff2:	2907      	cmp	r1, #7
    5ff4:	d814      	bhi.n	6020 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ff6:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    5ffa:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    5ffe:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6000:	2a00      	cmp	r2, #0
    6002:	d0f2      	beq.n	5fea <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    6004:	4a0c      	ldr	r2, [pc, #48]	; (6038 <nrfx_gpiote_irq_handler+0x5c>)
    6006:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    600a:	4210      	tst	r0, r2
    600c:	d0ed      	beq.n	5fea <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    600e:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    6012:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6016:	2500      	movs	r5, #0
    6018:	6015      	str	r5, [r2, #0]
    601a:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    601c:	4304      	orrs	r4, r0
    601e:	e7e4      	b.n	5fea <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6020:	4b05      	ldr	r3, [pc, #20]	; (6038 <nrfx_gpiote_irq_handler+0x5c>)
    6022:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6026:	b91b      	cbnz	r3, 6030 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    6028:	4620      	mov	r0, r4
    602a:	f7ff fde7 	bl	5bfc <gpiote_evt_handle>
}
    602e:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    6030:	f7ff fd90 	bl	5b54 <port_event_handle>
    6034:	e7f8      	b.n	6028 <nrfx_gpiote_irq_handler+0x4c>
    6036:	bf00      	nop
    6038:	5000d000 	.word	0x5000d000

0000603c <nrfx_ipc_init>:
} ipc_control_block_t;

static ipc_control_block_t m_ipc_cb;

nrfx_err_t nrfx_ipc_init(uint8_t irq_priority, nrfx_ipc_handler_t handler, void * p_context)
{
    603c:	b538      	push	{r3, r4, r5, lr}
    if (m_ipc_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    603e:	4b08      	ldr	r3, [pc, #32]	; (6060 <nrfx_ipc_init+0x24>)
    6040:	791b      	ldrb	r3, [r3, #4]
    6042:	b10b      	cbz	r3, 6048 <nrfx_ipc_init+0xc>
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    6044:	4807      	ldr	r0, [pc, #28]	; (6064 <nrfx_ipc_init+0x28>)
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    m_ipc_cb.handler = handler;
    m_ipc_cb.p_context = p_context;

    return NRFX_SUCCESS;
}
    6046:	bd38      	pop	{r3, r4, r5, pc}
    6048:	460d      	mov	r5, r1
    604a:	4614      	mov	r4, r2
    NRFX_IRQ_ENABLE(IPC_IRQn);
    604c:	202a      	movs	r0, #42	; 0x2a
    604e:	f002 fe22 	bl	8c96 <arch_irq_enable>
    m_ipc_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6052:	4b03      	ldr	r3, [pc, #12]	; (6060 <nrfx_ipc_init+0x24>)
    6054:	2201      	movs	r2, #1
    6056:	711a      	strb	r2, [r3, #4]
    m_ipc_cb.handler = handler;
    6058:	601d      	str	r5, [r3, #0]
    m_ipc_cb.p_context = p_context;
    605a:	609c      	str	r4, [r3, #8]
    return NRFX_SUCCESS;
    605c:	4802      	ldr	r0, [pc, #8]	; (6068 <nrfx_ipc_init+0x2c>)
    605e:	e7f2      	b.n	6046 <nrfx_ipc_init+0xa>
    6060:	20000f7c 	.word	0x20000f7c
    6064:	0bad000c 	.word	0x0bad000c
    6068:	0bad0000 	.word	0x0bad0000

0000606c <nrfx_ipc_config_load>:

void nrfx_ipc_config_load(const nrfx_ipc_config_t * p_config)
{
    606c:	b410      	push	{r4}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);

    uint32_t i;
    for (i = 0; i < IPC_CONF_NUM; ++i)
    606e:	2300      	movs	r3, #0
    6070:	e008      	b.n	6084 <nrfx_ipc_config_load+0x18>
    {
        nrf_ipc_send_config_set(NRF_IPC, i, p_config->send_task_config[i]);
    6072:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    p_reg->SEND_CNF[index] = channels_mask;
    6076:	b2da      	uxtb	r2, r3
    6078:	f502 72a2 	add.w	r2, r2, #324	; 0x144
    607c:	490d      	ldr	r1, [pc, #52]	; (60b4 <nrfx_ipc_config_load+0x48>)
    607e:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
    6082:	3301      	adds	r3, #1
    6084:	2b0f      	cmp	r3, #15
    6086:	d9f4      	bls.n	6072 <nrfx_ipc_config_load+0x6>
    }

    for (i = 0; i < IPC_CONF_NUM; ++i)
    6088:	2300      	movs	r3, #0
    608a:	e00a      	b.n	60a2 <nrfx_ipc_config_load+0x36>
    {
        nrf_ipc_receive_config_set(NRF_IPC, i, p_config->receive_event_config[i]);
    608c:	f103 0210 	add.w	r2, r3, #16
    6090:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    p_reg->RECEIVE_CNF[index] = channels_mask;
    6094:	b2da      	uxtb	r2, r3
    6096:	f502 72b2 	add.w	r2, r2, #356	; 0x164
    609a:	4906      	ldr	r1, [pc, #24]	; (60b4 <nrfx_ipc_config_load+0x48>)
    609c:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    for (i = 0; i < IPC_CONF_NUM; ++i)
    60a0:	3301      	adds	r3, #1
    60a2:	2b0f      	cmp	r3, #15
    60a4:	d9f2      	bls.n	608c <nrfx_ipc_config_load+0x20>
    }

    nrf_ipc_int_enable(NRF_IPC, p_config->receive_events_enabled);
    60a6:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
    p_reg->INTENSET = mask;
    60aa:	4b02      	ldr	r3, [pc, #8]	; (60b4 <nrfx_ipc_config_load+0x48>)
    60ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    60b0:	bc10      	pop	{r4}
    60b2:	4770      	bx	lr
    60b4:	5002a000 	.word	0x5002a000

000060b8 <nrfx_ipc_receive_event_enable>:
}

void nrfx_ipc_receive_event_enable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_enable(NRF_IPC, (1UL << event_index));
    60b8:	2301      	movs	r3, #1
    60ba:	4083      	lsls	r3, r0
    60bc:	4a01      	ldr	r2, [pc, #4]	; (60c4 <nrfx_ipc_receive_event_enable+0xc>)
    60be:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    60c2:	4770      	bx	lr
    60c4:	5002a000 	.word	0x5002a000

000060c8 <nrfx_ipc_receive_event_disable>:

void nrfx_ipc_receive_event_disable(uint8_t event_index)
{
    NRFX_ASSERT(m_ipc_cb.state == NRFX_DRV_STATE_INITIALIZED);
    nrf_ipc_int_disable(NRF_IPC, (1UL << event_index));
    60c8:	2301      	movs	r3, #1
    60ca:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    60cc:	4a01      	ldr	r2, [pc, #4]	; (60d4 <nrfx_ipc_receive_event_disable+0xc>)
    60ce:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    60d2:	4770      	bx	lr
    60d4:	5002a000 	.word	0x5002a000

000060d8 <nrfx_ipc_irq_handler>:
    channel_bitmask |= nrf_ipc_send_config_get(NRF_IPC, send_index);
    nrf_ipc_send_config_set(NRF_IPC, send_index, channel_bitmask);
}

void nrfx_ipc_irq_handler(void)
{
    60d8:	b510      	push	{r4, lr}
    return p_reg->INTPEND;
    60da:	4b0d      	ldr	r3, [pc, #52]	; (6110 <nrfx_ipc_irq_handler+0x38>)
    60dc:	f8d3 430c 	ldr.w	r4, [r3, #780]	; 0x30c
    // Get the information about events that fire this interrupt
    uint32_t events_map = nrf_ipc_int_pending_get(NRF_IPC);
    // Clear these events
    uint32_t bitmask = events_map;

    while (bitmask)
    60e0:	e002      	b.n	60e8 <nrfx_ipc_irq_handler+0x10>
        bitmask &= ~(1UL << event_idx);
        nrf_ipc_event_clear(NRF_IPC, nrf_ipc_receive_event_get(event_idx));
#if NRFX_CHECK(NRFX_CONFIG_API_VER_2_10)
        if (m_ipc_cb.handler)
        {
            m_ipc_cb.handler(event_idx, m_ipc_cb.p_context);
    60e2:	4a0c      	ldr	r2, [pc, #48]	; (6114 <nrfx_ipc_irq_handler+0x3c>)
    60e4:	6891      	ldr	r1, [r2, #8]
    60e6:	4798      	blx	r3
    while (bitmask)
    60e8:	b18c      	cbz	r4, 610e <nrfx_ipc_irq_handler+0x36>
        uint8_t event_idx = NRF_CTZ(bitmask);
    60ea:	fa94 f0a4 	rbit	r0, r4
    60ee:	fab0 f080 	clz	r0, r0
        bitmask &= ~(1UL << event_idx);
    60f2:	2301      	movs	r3, #1
    60f4:	4083      	lsls	r3, r0
    60f6:	ea24 0403 	bic.w	r4, r4, r3
    return (nrf_ipc_event_t)(NRFX_OFFSETOF(NRF_IPC_Type, EVENTS_RECEIVE[index]));
    60fa:	0082      	lsls	r2, r0, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    60fc:	4b06      	ldr	r3, [pc, #24]	; (6118 <nrfx_ipc_irq_handler+0x40>)
    60fe:	4413      	add	r3, r2
    6100:	2200      	movs	r2, #0
    6102:	601a      	str	r2, [r3, #0]
        if (m_ipc_cb.handler)
    6104:	4b03      	ldr	r3, [pc, #12]	; (6114 <nrfx_ipc_irq_handler+0x3c>)
    6106:	681b      	ldr	r3, [r3, #0]
    6108:	2b00      	cmp	r3, #0
    610a:	d1ea      	bne.n	60e2 <nrfx_ipc_irq_handler+0xa>
    610c:	e7ec      	b.n	60e8 <nrfx_ipc_irq_handler+0x10>
    if (m_ipc_cb.handler)
    {
        m_ipc_cb.handler(events_map, m_ipc_cb.p_context);
#endif
    }
}
    610e:	bd10      	pop	{r4, pc}
    6110:	5002a000 	.word	0x5002a000
    6114:	20000f7c 	.word	0x20000f7c
    6118:	5002a100 	.word	0x5002a100

0000611c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    611c:	4b03      	ldr	r3, [pc, #12]	; (612c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    611e:	e000      	b.n	6122 <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    6120:	3318      	adds	r3, #24
	while (dev < __device_end) {
    6122:	4a03      	ldr	r2, [pc, #12]	; (6130 <z_device_state_init+0x14>)
    6124:	4293      	cmp	r3, r2
    6126:	d3fb      	bcc.n	6120 <z_device_state_init+0x4>
	}
}
    6128:	4770      	bx	lr
    612a:	bf00      	nop
    612c:	0000a308 	.word	0x0000a308
    6130:	0000a380 	.word	0x0000a380

00006134 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    6134:	2804      	cmp	r0, #4
    6136:	d80c      	bhi.n	6152 <reason_to_str+0x1e>
    6138:	e8df f000 	tbb	[pc, r0]
    613c:	07050d03 	.word	0x07050d03
    6140:	09          	.byte	0x09
    6141:	00          	.byte	0x00
    6142:	4806      	ldr	r0, [pc, #24]	; (615c <reason_to_str+0x28>)
    6144:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    6146:	4806      	ldr	r0, [pc, #24]	; (6160 <reason_to_str+0x2c>)
    6148:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    614a:	4806      	ldr	r0, [pc, #24]	; (6164 <reason_to_str+0x30>)
    614c:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    614e:	4806      	ldr	r0, [pc, #24]	; (6168 <reason_to_str+0x34>)
    6150:	4770      	bx	lr
	default:
		return "Unknown error";
    6152:	4806      	ldr	r0, [pc, #24]	; (616c <reason_to_str+0x38>)
    6154:	4770      	bx	lr
		return "Unhandled interrupt";
    6156:	4806      	ldr	r0, [pc, #24]	; (6170 <reason_to_str+0x3c>)
	}
}
    6158:	4770      	bx	lr
    615a:	bf00      	nop
    615c:	0000b270 	.word	0x0000b270
    6160:	0000b294 	.word	0x0000b294
    6164:	0000b2a4 	.word	0x0000b2a4
    6168:	0000b2b0 	.word	0x0000b2b0
    616c:	0000b2c0 	.word	0x0000b2c0
    6170:	0000b280 	.word	0x0000b280

00006174 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    6174:	b130      	cbz	r0, 6184 <thread_name_get+0x10>
{
    6176:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    6178:	f003 fe41 	bl	9dfe <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    617c:	b120      	cbz	r0, 6188 <thread_name_get+0x14>
    617e:	7803      	ldrb	r3, [r0, #0]
    6180:	b123      	cbz	r3, 618c <thread_name_get+0x18>
}
    6182:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    6184:	4802      	ldr	r0, [pc, #8]	; (6190 <thread_name_get+0x1c>)
}
    6186:	4770      	bx	lr
		thread_name = "unknown";
    6188:	4801      	ldr	r0, [pc, #4]	; (6190 <thread_name_get+0x1c>)
    618a:	e7fa      	b.n	6182 <thread_name_get+0xe>
    618c:	4800      	ldr	r0, [pc, #0]	; (6190 <thread_name_get+0x1c>)
	return thread_name;
    618e:	e7f8      	b.n	6182 <thread_name_get+0xe>
    6190:	0000b2d0 	.word	0x0000b2d0

00006194 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6198:	b089      	sub	sp, #36	; 0x24
    619a:	af00      	add	r7, sp, #0
    619c:	4606      	mov	r6, r0
    619e:	460c      	mov	r4, r1
	__asm__ volatile(
    61a0:	f04f 0320 	mov.w	r3, #32
    61a4:	f3ef 8811 	mrs	r8, BASEPRI
    61a8:	f383 8812 	msr	BASEPRI_MAX, r3
    61ac:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    61b0:	f001 f838 	bl	7224 <z_impl_z_current_get>
    61b4:	4605      	mov	r5, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    61b6:	4630      	mov	r0, r6
    61b8:	f7ff ffbc 	bl	6134 <reason_to_str>
    61bc:	46e9      	mov	r9, sp
    61be:	2301      	movs	r3, #1
    61c0:	713b      	strb	r3, [r7, #4]
    61c2:	2303      	movs	r3, #3
    61c4:	717b      	strb	r3, [r7, #5]
    61c6:	b08a      	sub	sp, #40	; 0x28
    61c8:	46ec      	mov	ip, sp
    61ca:	f11c 0210 	adds.w	r2, ip, #16
    61ce:	d021      	beq.n	6214 <z_fatal_error+0x80>
    61d0:	f04f 0e16 	mov.w	lr, #22
    61d4:	b152      	cbz	r2, 61ec <z_fatal_error+0x58>
    61d6:	4673      	mov	r3, lr
    61d8:	f1be 0f04 	cmp.w	lr, #4
    61dc:	dd02      	ble.n	61e4 <z_fatal_error+0x50>
    61de:	4976      	ldr	r1, [pc, #472]	; (63b8 <z_fatal_error+0x224>)
    61e0:	f8cc 1014 	str.w	r1, [ip, #20]
    61e4:	2b08      	cmp	r3, #8
    61e6:	dd01      	ble.n	61ec <z_fatal_error+0x58>
    61e8:	f8cc 6018 	str.w	r6, [ip, #24]
    61ec:	2301      	movs	r3, #1
    61ee:	703b      	strb	r3, [r7, #0]
    61f0:	2303      	movs	r3, #3
    61f2:	707b      	strb	r3, [r7, #1]
    61f4:	b1da      	cbz	r2, 622e <z_fatal_error+0x9a>
    61f6:	4673      	mov	r3, lr
    61f8:	f1be 0f0c 	cmp.w	lr, #12
    61fc:	dd01      	ble.n	6202 <z_fatal_error+0x6e>
    61fe:	f8cc 001c 	str.w	r0, [ip, #28]
    6202:	2b10      	cmp	r3, #16
    6204:	dd02      	ble.n	620c <z_fatal_error+0x78>
    6206:	2300      	movs	r3, #0
    6208:	f8cc 3020 	str.w	r3, [ip, #32]
    620c:	f10c 0324 	add.w	r3, ip, #36	; 0x24
    6210:	2100      	movs	r1, #0
    6212:	e00a      	b.n	622a <z_fatal_error+0x96>
    6214:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    6218:	e7dc      	b.n	61d4 <z_fatal_error+0x40>
    621a:	f101 0020 	add.w	r0, r1, #32
    621e:	4438      	add	r0, r7
    6220:	f810 0c20 	ldrb.w	r0, [r0, #-32]
    6224:	f803 0b01 	strb.w	r0, [r3], #1
    6228:	3101      	adds	r1, #1
    622a:	2901      	cmp	r1, #1
    622c:	d9f5      	bls.n	621a <z_fatal_error+0x86>
    622e:	f1be 0f15 	cmp.w	lr, #21
    6232:	dd53      	ble.n	62dc <z_fatal_error+0x148>
    6234:	2316      	movs	r3, #22
    6236:	b14a      	cbz	r2, 624c <z_fatal_error+0xb8>
    6238:	2105      	movs	r1, #5
    623a:	7139      	strb	r1, [r7, #4]
    623c:	2100      	movs	r1, #0
    623e:	7179      	strb	r1, [r7, #5]
    6240:	71b9      	strb	r1, [r7, #6]
    6242:	2101      	movs	r1, #1
    6244:	71f9      	strb	r1, [r7, #7]
    6246:	6878      	ldr	r0, [r7, #4]
    6248:	f8cc 0010 	str.w	r0, [ip, #16]
    624c:	2100      	movs	r1, #0
    624e:	f36f 0100 	bfc	r1, #0, #1
    6252:	f36f 0141 	bfc	r1, #1, #1
    6256:	f36f 0182 	bfc	r1, #2, #1
    625a:	f36f 01c5 	bfc	r1, #3, #3
    625e:	2001      	movs	r0, #1
    6260:	f360 1188 	bfi	r1, r0, #6, #3
    6264:	f3c3 0309 	ubfx	r3, r3, #0, #10
    6268:	f363 2152 	bfi	r1, r3, #9, #10
    626c:	f36f 41de 	bfc	r1, #19, #12
    6270:	f36f 71df 	bfc	r1, #31, #1
    6274:	2300      	movs	r3, #0
    6276:	4851      	ldr	r0, [pc, #324]	; (63bc <z_fatal_error+0x228>)
    6278:	f002 fc08 	bl	8a8c <z_impl_z_log_msg_static_create>
    627c:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    627e:	b11c      	cbz	r4, 6288 <z_fatal_error+0xf4>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    6280:	69e3      	ldr	r3, [r4, #28]
    6282:	f3c3 0308 	ubfx	r3, r3, #0, #9
    6286:	bb63      	cbnz	r3, 62e2 <z_fatal_error+0x14e>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    6288:	4628      	mov	r0, r5
    628a:	f7ff ff73 	bl	6174 <thread_name_get>
    628e:	46e9      	mov	r9, sp
    6290:	2301      	movs	r3, #1
    6292:	713b      	strb	r3, [r7, #4]
    6294:	2303      	movs	r3, #3
    6296:	717b      	strb	r3, [r7, #5]
    6298:	b08a      	sub	sp, #40	; 0x28
    629a:	46ec      	mov	ip, sp
    629c:	f11c 0210 	adds.w	r2, ip, #16
    62a0:	d042      	beq.n	6328 <z_fatal_error+0x194>
    62a2:	f04f 0e12 	mov.w	lr, #18
    62a6:	b152      	cbz	r2, 62be <z_fatal_error+0x12a>
    62a8:	4673      	mov	r3, lr
    62aa:	f1be 0f04 	cmp.w	lr, #4
    62ae:	dd02      	ble.n	62b6 <z_fatal_error+0x122>
    62b0:	4943      	ldr	r1, [pc, #268]	; (63c0 <z_fatal_error+0x22c>)
    62b2:	f8cc 1014 	str.w	r1, [ip, #20]
    62b6:	2b08      	cmp	r3, #8
    62b8:	dd01      	ble.n	62be <z_fatal_error+0x12a>
    62ba:	f8cc 5018 	str.w	r5, [ip, #24]
    62be:	2301      	movs	r3, #1
    62c0:	703b      	strb	r3, [r7, #0]
    62c2:	2303      	movs	r3, #3
    62c4:	707b      	strb	r3, [r7, #1]
    62c6:	2a00      	cmp	r2, #0
    62c8:	d03b      	beq.n	6342 <z_fatal_error+0x1ae>
    62ca:	f1be 0f0c 	cmp.w	lr, #12
    62ce:	dd01      	ble.n	62d4 <z_fatal_error+0x140>
    62d0:	f8cc 001c 	str.w	r0, [ip, #28]
    62d4:	f10c 0320 	add.w	r3, ip, #32
    62d8:	2100      	movs	r1, #0
    62da:	e030      	b.n	633e <z_fatal_error+0x1aa>
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    62dc:	f06f 031b 	mvn.w	r3, #27
    62e0:	e7a9      	b.n	6236 <z_fatal_error+0xa2>
		LOG_ERR("Fault during interrupt handling\n");
    62e2:	4b38      	ldr	r3, [pc, #224]	; (63c4 <z_fatal_error+0x230>)
    62e4:	61fb      	str	r3, [r7, #28]
    62e6:	2302      	movs	r3, #2
    62e8:	713b      	strb	r3, [r7, #4]
    62ea:	2300      	movs	r3, #0
    62ec:	717b      	strb	r3, [r7, #5]
    62ee:	71bb      	strb	r3, [r7, #6]
    62f0:	71fb      	strb	r3, [r7, #7]
    62f2:	687a      	ldr	r2, [r7, #4]
    62f4:	61ba      	str	r2, [r7, #24]
    62f6:	4619      	mov	r1, r3
    62f8:	f363 0100 	bfi	r1, r3, #0, #1
    62fc:	f363 0141 	bfi	r1, r3, #1, #1
    6300:	f363 0182 	bfi	r1, r3, #2, #1
    6304:	f363 01c5 	bfi	r1, r3, #3, #3
    6308:	2201      	movs	r2, #1
    630a:	f362 1188 	bfi	r1, r2, #6, #3
    630e:	2208      	movs	r2, #8
    6310:	f362 2152 	bfi	r1, r2, #9, #10
    6314:	f363 41de 	bfi	r1, r3, #19, #12
    6318:	f363 71df 	bfi	r1, r3, #31, #1
    631c:	f107 0218 	add.w	r2, r7, #24
    6320:	4826      	ldr	r0, [pc, #152]	; (63bc <z_fatal_error+0x228>)
    6322:	f002 fbb3 	bl	8a8c <z_impl_z_log_msg_static_create>
    6326:	e7af      	b.n	6288 <z_fatal_error+0xf4>
	LOG_ERR("Current thread: %p (%s)", thread,
    6328:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    632c:	e7bb      	b.n	62a6 <z_fatal_error+0x112>
    632e:	f101 0020 	add.w	r0, r1, #32
    6332:	4438      	add	r0, r7
    6334:	f810 0c20 	ldrb.w	r0, [r0, #-32]
    6338:	f803 0b01 	strb.w	r0, [r3], #1
    633c:	3101      	adds	r1, #1
    633e:	2901      	cmp	r1, #1
    6340:	d9f5      	bls.n	632e <z_fatal_error+0x19a>
    6342:	f1be 0f11 	cmp.w	lr, #17
    6346:	dd33      	ble.n	63b0 <z_fatal_error+0x21c>
    6348:	2312      	movs	r3, #18
    634a:	b14a      	cbz	r2, 6360 <z_fatal_error+0x1cc>
    634c:	2104      	movs	r1, #4
    634e:	7139      	strb	r1, [r7, #4]
    6350:	2100      	movs	r1, #0
    6352:	7179      	strb	r1, [r7, #5]
    6354:	71b9      	strb	r1, [r7, #6]
    6356:	2101      	movs	r1, #1
    6358:	71f9      	strb	r1, [r7, #7]
    635a:	6878      	ldr	r0, [r7, #4]
    635c:	f8cc 0010 	str.w	r0, [ip, #16]
    6360:	2100      	movs	r1, #0
    6362:	f36f 0100 	bfc	r1, #0, #1
    6366:	f36f 0141 	bfc	r1, #1, #1
    636a:	f36f 0182 	bfc	r1, #2, #1
    636e:	f36f 01c5 	bfc	r1, #3, #3
    6372:	2001      	movs	r0, #1
    6374:	f360 1188 	bfi	r1, r0, #6, #3
    6378:	f3c3 0309 	ubfx	r3, r3, #0, #10
    637c:	f363 2152 	bfi	r1, r3, #9, #10
    6380:	f36f 41de 	bfc	r1, #19, #12
    6384:	f36f 71df 	bfc	r1, #31, #1
    6388:	2300      	movs	r3, #0
    638a:	480c      	ldr	r0, [pc, #48]	; (63bc <z_fatal_error+0x228>)
    638c:	f002 fb7e 	bl	8a8c <z_impl_z_log_msg_static_create>
    6390:	46cd      	mov	sp, r9

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    6392:	4621      	mov	r1, r4
    6394:	4630      	mov	r0, r6
    6396:	f7ff f823 	bl	53e0 <k_sys_fatal_error_handler>
	__asm__ volatile(
    639a:	f388 8811 	msr	BASEPRI, r8
    639e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    63a2:	4628      	mov	r0, r5
    63a4:	f7fd fbdc 	bl	3b60 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    63a8:	3724      	adds	r7, #36	; 0x24
    63aa:	46bd      	mov	sp, r7
    63ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_ERR("Current thread: %p (%s)", thread,
    63b0:	f06f 031b 	mvn.w	r3, #27
    63b4:	e7c9      	b.n	634a <z_fatal_error+0x1b6>
    63b6:	bf00      	nop
    63b8:	0000b2d8 	.word	0x0000b2d8
    63bc:	0000a610 	.word	0x0000a610
    63c0:	0000b324 	.word	0x0000b324
    63c4:	0000b300 	.word	0x0000b300

000063c8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    63c8:	b570      	push	{r4, r5, r6, lr}
    63ca:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    63cc:	4b11      	ldr	r3, [pc, #68]	; (6414 <z_sys_init_run_level+0x4c>)
    63ce:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    63d2:	e009      	b.n	63e8 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    63d4:	4240      	negs	r0, r0
    63d6:	e017      	b.n	6408 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    63d8:	68eb      	ldr	r3, [r5, #12]
    63da:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    63dc:	68ea      	ldr	r2, [r5, #12]
    63de:	7853      	ldrb	r3, [r2, #1]
    63e0:	f043 0301 	orr.w	r3, r3, #1
    63e4:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    63e6:	3408      	adds	r4, #8
    63e8:	1c73      	adds	r3, r6, #1
    63ea:	4a0a      	ldr	r2, [pc, #40]	; (6414 <z_sys_init_run_level+0x4c>)
    63ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    63f0:	42a3      	cmp	r3, r4
    63f2:	d90d      	bls.n	6410 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    63f4:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    63f6:	6823      	ldr	r3, [r4, #0]
    63f8:	4628      	mov	r0, r5
    63fa:	4798      	blx	r3
		if (dev != NULL) {
    63fc:	2d00      	cmp	r5, #0
    63fe:	d0f2      	beq.n	63e6 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    6400:	2800      	cmp	r0, #0
    6402:	d0eb      	beq.n	63dc <z_sys_init_run_level+0x14>
				if (rc < 0) {
    6404:	2800      	cmp	r0, #0
    6406:	dbe5      	blt.n	63d4 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    6408:	28ff      	cmp	r0, #255	; 0xff
    640a:	dde5      	ble.n	63d8 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    640c:	20ff      	movs	r0, #255	; 0xff
    640e:	e7e3      	b.n	63d8 <z_sys_init_run_level+0x10>
		}
	}
}
    6410:	bd70      	pop	{r4, r5, r6, pc}
    6412:	bf00      	nop
    6414:	0000b34c 	.word	0x0000b34c

00006418 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    6418:	b510      	push	{r4, lr}
    641a:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    641c:	23b0      	movs	r3, #176	; 0xb0
    641e:	4c11      	ldr	r4, [pc, #68]	; (6464 <init_idle_thread+0x4c>)
    6420:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    6424:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    6428:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    642c:	4b0e      	ldr	r3, [pc, #56]	; (6468 <init_idle_thread+0x50>)
    642e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
    6432:	4a0e      	ldr	r2, [pc, #56]	; (646c <init_idle_thread+0x54>)
    6434:	9205      	str	r2, [sp, #20]
    6436:	2201      	movs	r2, #1
    6438:	9204      	str	r2, [sp, #16]
    643a:	220f      	movs	r2, #15
    643c:	9203      	str	r2, [sp, #12]
    643e:	2200      	movs	r2, #0
    6440:	9202      	str	r2, [sp, #8]
    6442:	9201      	str	r2, [sp, #4]
    6444:	9300      	str	r3, [sp, #0]
    6446:	4b0a      	ldr	r3, [pc, #40]	; (6470 <init_idle_thread+0x58>)
    6448:	f44f 72a0 	mov.w	r2, #320	; 0x140
    644c:	4909      	ldr	r1, [pc, #36]	; (6474 <init_idle_thread+0x5c>)
    644e:	eb01 118c 	add.w	r1, r1, ip, lsl #6
    6452:	4620      	mov	r0, r4
    6454:	f000 f95e 	bl	6714 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6458:	7b63      	ldrb	r3, [r4, #13]
    645a:	f023 0304 	bic.w	r3, r3, #4
    645e:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    6460:	b006      	add	sp, #24
    6462:	bd10      	pop	{r4, pc}
    6464:	20000708 	.word	0x20000708
    6468:	20000f88 	.word	0x20000f88
    646c:	0000b33c 	.word	0x0000b33c
    6470:	00006871 	.word	0x00006871
    6474:	20001ca8 	.word	0x20001ca8

00006478 <bg_thread_main>:
{
    6478:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    647a:	4b0a      	ldr	r3, [pc, #40]	; (64a4 <bg_thread_main+0x2c>)
    647c:	2201      	movs	r2, #1
    647e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    6480:	2003      	movs	r0, #3
    6482:	f7ff ffa1 	bl	63c8 <z_sys_init_run_level>
	boot_banner();
    6486:	f001 f93f 	bl	7708 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    648a:	2004      	movs	r0, #4
    648c:	f7ff ff9c 	bl	63c8 <z_sys_init_run_level>
	z_init_static_threads();
    6490:	f000 f9a4 	bl	67dc <z_init_static_threads>
	main();
    6494:	f7fa f85e 	bl	554 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    6498:	4a03      	ldr	r2, [pc, #12]	; (64a8 <bg_thread_main+0x30>)
    649a:	7b13      	ldrb	r3, [r2, #12]
    649c:	f023 0301 	bic.w	r3, r3, #1
    64a0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    64a2:	bd08      	pop	{r3, pc}
    64a4:	200011a2 	.word	0x200011a2
    64a8:	200007b8 	.word	0x200007b8

000064ac <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    64ac:	b508      	push	{r3, lr}
    64ae:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    64b0:	4a01      	ldr	r2, [pc, #4]	; (64b8 <switch_to_main_thread+0xc>)
    64b2:	4802      	ldr	r0, [pc, #8]	; (64bc <switch_to_main_thread+0x10>)
    64b4:	f7fc fb82 	bl	2bbc <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    64b8:	00006479 	.word	0x00006479
    64bc:	200007b8 	.word	0x200007b8

000064c0 <z_bss_zero>:
{
    64c0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    64c2:	4803      	ldr	r0, [pc, #12]	; (64d0 <z_bss_zero+0x10>)
    64c4:	4a03      	ldr	r2, [pc, #12]	; (64d4 <z_bss_zero+0x14>)
    64c6:	1a12      	subs	r2, r2, r0
    64c8:	2100      	movs	r1, #0
    64ca:	f003 fc2a 	bl	9d22 <z_early_memset>
}
    64ce:	bd08      	pop	{r3, pc}
    64d0:	200001e8 	.word	0x200001e8
    64d4:	200011a4 	.word	0x200011a4

000064d8 <z_init_cpu>:
{
    64d8:	b510      	push	{r4, lr}
    64da:	4604      	mov	r4, r0
	init_idle_thread(id);
    64dc:	f7ff ff9c 	bl	6418 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    64e0:	23b0      	movs	r3, #176	; 0xb0
    64e2:	490a      	ldr	r1, [pc, #40]	; (650c <z_init_cpu+0x34>)
    64e4:	fb03 1104 	mla	r1, r3, r4, r1
    64e8:	4a09      	ldr	r2, [pc, #36]	; (6510 <z_init_cpu+0x38>)
    64ea:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    64ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    64f2:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    64f4:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    64f6:	4b07      	ldr	r3, [pc, #28]	; (6514 <z_init_cpu+0x3c>)
    64f8:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    64fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    6500:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6504:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    6508:	6053      	str	r3, [r2, #4]
}
    650a:	bd10      	pop	{r4, pc}
    650c:	20000708 	.word	0x20000708
    6510:	20000f88 	.word	0x20000f88
    6514:	200014a8 	.word	0x200014a8

00006518 <prepare_multithreading>:
{
    6518:	b570      	push	{r4, r5, r6, lr}
    651a:	b086      	sub	sp, #24
	z_sched_init();
    651c:	f000 fdba 	bl	7094 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    6520:	4d10      	ldr	r5, [pc, #64]	; (6564 <prepare_multithreading+0x4c>)
    6522:	4b11      	ldr	r3, [pc, #68]	; (6568 <prepare_multithreading+0x50>)
    6524:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6526:	4b11      	ldr	r3, [pc, #68]	; (656c <prepare_multithreading+0x54>)
    6528:	9305      	str	r3, [sp, #20]
    652a:	2301      	movs	r3, #1
    652c:	9304      	str	r3, [sp, #16]
    652e:	2400      	movs	r4, #0
    6530:	9403      	str	r4, [sp, #12]
    6532:	9402      	str	r4, [sp, #8]
    6534:	9401      	str	r4, [sp, #4]
    6536:	9400      	str	r4, [sp, #0]
    6538:	4b0d      	ldr	r3, [pc, #52]	; (6570 <prepare_multithreading+0x58>)
    653a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    653e:	490d      	ldr	r1, [pc, #52]	; (6574 <prepare_multithreading+0x5c>)
    6540:	4628      	mov	r0, r5
    6542:	f000 f8e7 	bl	6714 <z_setup_new_thread>
    6546:	4606      	mov	r6, r0
    6548:	7b6b      	ldrb	r3, [r5, #13]
    654a:	f023 0304 	bic.w	r3, r3, #4
    654e:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    6550:	4628      	mov	r0, r5
    6552:	f003 fd15 	bl	9f80 <z_ready_thread>
	z_init_cpu(0);
    6556:	4620      	mov	r0, r4
    6558:	f7ff ffbe 	bl	64d8 <z_init_cpu>
}
    655c:	4630      	mov	r0, r6
    655e:	b006      	add	sp, #24
    6560:	bd70      	pop	{r4, r5, r6, pc}
    6562:	bf00      	nop
    6564:	200007b8 	.word	0x200007b8
    6568:	20000f88 	.word	0x20000f88
    656c:	0000b344 	.word	0x0000b344
    6570:	00006479 	.word	0x00006479
    6574:	20001de8 	.word	0x20001de8

00006578 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    6578:	b500      	push	{lr}
    657a:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    657c:	2000      	movs	r0, #0
    657e:	f7ff ff23 	bl	63c8 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    6582:	4b1e      	ldr	r3, [pc, #120]	; (65fc <z_cstart+0x84>)
	uint32_t msp =
    6584:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    6588:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    658c:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6590:	4c1b      	ldr	r4, [pc, #108]	; (6600 <z_cstart+0x88>)
    6592:	23e0      	movs	r3, #224	; 0xe0
    6594:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    6598:	2500      	movs	r5, #0
    659a:	77e5      	strb	r5, [r4, #31]
    659c:	7625      	strb	r5, [r4, #24]
    659e:	7665      	strb	r5, [r4, #25]
    65a0:	76a5      	strb	r5, [r4, #26]
    65a2:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    65a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    65a8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    65ac:	6263      	str	r3, [r4, #36]	; 0x24
    65ae:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    65b2:	f7fd fa21 	bl	39f8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    65b6:	f7fc f8df 	bl	2778 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    65ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    65be:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    65c0:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    65c2:	f7fd fd21 	bl	4008 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    65c6:	f7fd fae5 	bl	3b94 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    65ca:	f7fb faab 	bl	1b24 <log_core_init>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    65ce:	2401      	movs	r4, #1
    65d0:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    65d4:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    65d8:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    65da:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    65dc:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    65de:	4b09      	ldr	r3, [pc, #36]	; (6604 <z_cstart+0x8c>)
    65e0:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    65e4:	f7ff fd9a 	bl	611c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    65e8:	4620      	mov	r0, r4
    65ea:	f7ff feed 	bl	63c8 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    65ee:	2002      	movs	r0, #2
    65f0:	f7ff feea 	bl	63c8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    65f4:	f7ff ff90 	bl	6518 <prepare_multithreading>
    65f8:	f7ff ff58 	bl	64ac <switch_to_main_thread>
    65fc:	200014a8 	.word	0x200014a8
    6600:	e000ed00 	.word	0xe000ed00
    6604:	20000f88 	.word	0x20000f88

00006608 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    6608:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    660a:	4c06      	ldr	r4, [pc, #24]	; (6624 <init_mem_slab_module+0x1c>)
	int rc = 0;
    660c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    660e:	e000      	b.n	6612 <init_mem_slab_module+0xa>
    6610:	341c      	adds	r4, #28
    6612:	4b05      	ldr	r3, [pc, #20]	; (6628 <init_mem_slab_module+0x20>)
    6614:	429c      	cmp	r4, r3
    6616:	d204      	bcs.n	6622 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    6618:	4620      	mov	r0, r4
    661a:	f003 fb8a 	bl	9d32 <create_free_list>
		if (rc < 0) {
    661e:	2800      	cmp	r0, #0
    6620:	daf6      	bge.n	6610 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    6622:	bd10      	pop	{r4, pc}
    6624:	20000188 	.word	0x20000188
    6628:	20000188 	.word	0x20000188

0000662c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    662c:	b530      	push	{r4, r5, lr}
    662e:	b083      	sub	sp, #12
    6630:	460d      	mov	r5, r1
	__asm__ volatile(
    6632:	f04f 0120 	mov.w	r1, #32
    6636:	f3ef 8c11 	mrs	ip, BASEPRI
    663a:	f381 8812 	msr	BASEPRI_MAX, r1
    663e:	f3bf 8f6f 	isb	sy
    6642:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    6644:	6944      	ldr	r4, [r0, #20]
    6646:	b164      	cbz	r4, 6662 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    6648:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    664a:	6823      	ldr	r3, [r4, #0]
    664c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    664e:	6983      	ldr	r3, [r0, #24]
    6650:	3301      	adds	r3, #1
    6652:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    6654:	2000      	movs	r0, #0
	__asm__ volatile(
    6656:	f381 8811 	msr	BASEPRI, r1
    665a:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    665e:	b003      	add	sp, #12
    6660:	bd30      	pop	{r4, r5, pc}
    6662:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    6666:	ea53 0402 	orrs.w	r4, r3, r2
    666a:	d104      	bne.n	6676 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    666c:	2300      	movs	r3, #0
    666e:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    6670:	f06f 000b 	mvn.w	r0, #11
    6674:	e7ef      	b.n	6656 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    6676:	9200      	str	r2, [sp, #0]
    6678:	9301      	str	r3, [sp, #4]
    667a:	4602      	mov	r2, r0
    667c:	4670      	mov	r0, lr
    667e:	f000 fc03 	bl	6e88 <z_pend_curr>
		if (result == 0) {
    6682:	2800      	cmp	r0, #0
    6684:	d1eb      	bne.n	665e <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    6686:	4b02      	ldr	r3, [pc, #8]	; (6690 <k_mem_slab_alloc+0x64>)
    6688:	689b      	ldr	r3, [r3, #8]
    668a:	695b      	ldr	r3, [r3, #20]
    668c:	602b      	str	r3, [r5, #0]
		return result;
    668e:	e7e6      	b.n	665e <k_mem_slab_alloc+0x32>
    6690:	20000f88 	.word	0x20000f88

00006694 <z_thread_monitor_exit>:
	__asm__ volatile(
    6694:	f04f 0320 	mov.w	r3, #32
    6698:	f3ef 8111 	mrs	r1, BASEPRI
    669c:	f383 8812 	msr	BASEPRI_MAX, r3
    66a0:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    66a4:	4b0a      	ldr	r3, [pc, #40]	; (66d0 <z_thread_monitor_exit+0x3c>)
    66a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    66a8:	4283      	cmp	r3, r0
    66aa:	d104      	bne.n	66b6 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    66ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    66ae:	4b08      	ldr	r3, [pc, #32]	; (66d0 <z_thread_monitor_exit+0x3c>)
    66b0:	629a      	str	r2, [r3, #40]	; 0x28
    66b2:	e007      	b.n	66c4 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    66b4:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    66b6:	b113      	cbz	r3, 66be <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    66b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    66ba:	4282      	cmp	r2, r0
    66bc:	d1fa      	bne.n	66b4 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    66be:	b10b      	cbz	r3, 66c4 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    66c0:	6f02      	ldr	r2, [r0, #112]	; 0x70
    66c2:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    66c4:	f381 8811 	msr	BASEPRI, r1
    66c8:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    66cc:	4770      	bx	lr
    66ce:	bf00      	nop
    66d0:	20000f88 	.word	0x20000f88

000066d4 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    66d4:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    66d6:	4604      	mov	r4, r0
    66d8:	b140      	cbz	r0, 66ec <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN - 1);
    66da:	221f      	movs	r2, #31
    66dc:	f104 0074 	add.w	r0, r4, #116	; 0x74
    66e0:	f002 fb8c 	bl	8dfc <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    66e4:	2000      	movs	r0, #0
    66e6:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    66ea:	bd10      	pop	{r4, pc}
		thread = _current;
    66ec:	4b01      	ldr	r3, [pc, #4]	; (66f4 <z_impl_k_thread_name_set+0x20>)
    66ee:	689c      	ldr	r4, [r3, #8]
    66f0:	e7f3      	b.n	66da <z_impl_k_thread_name_set+0x6>
    66f2:	bf00      	nop
    66f4:	20000f88 	.word	0x20000f88

000066f8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    66f8:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    66fa:	ea53 0102 	orrs.w	r1, r3, r2
    66fe:	d102      	bne.n	6706 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    6700:	f003 fb7f 	bl	9e02 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    6704:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6706:	4902      	ldr	r1, [pc, #8]	; (6710 <schedule_new_thread+0x18>)
    6708:	3018      	adds	r0, #24
    670a:	f000 fe2b 	bl	7364 <z_add_timeout>
    670e:	e7f9      	b.n	6704 <schedule_new_thread+0xc>
    6710:	00009fb9 	.word	0x00009fb9

00006714 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6718:	b085      	sub	sp, #20
    671a:	4604      	mov	r4, r0
    671c:	460f      	mov	r7, r1
    671e:	4615      	mov	r5, r2
    6720:	461e      	mov	r6, r3
    6722:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    6726:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    672a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    672e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    6732:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    6736:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    6738:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    673a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    673c:	2204      	movs	r2, #4
    673e:	9911      	ldr	r1, [sp, #68]	; 0x44
    6740:	f003 fb63 	bl	9e0a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    6744:	462a      	mov	r2, r5
    6746:	4639      	mov	r1, r7
    6748:	4620      	mov	r0, r4
    674a:	f003 fb46 	bl	9dda <setup_thread_stack>
    674e:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6750:	f8cd 8008 	str.w	r8, [sp, #8]
    6754:	f8cd 9004 	str.w	r9, [sp, #4]
    6758:	f8cd a000 	str.w	sl, [sp]
    675c:	4633      	mov	r3, r6
    675e:	4602      	mov	r2, r0
    6760:	4639      	mov	r1, r7
    6762:	4620      	mov	r0, r4
    6764:	f7fc fa08 	bl	2b78 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    6768:	2300      	movs	r3, #0
    676a:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    676c:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    676e:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    6772:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    6776:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    677a:	f04f 0320 	mov.w	r3, #32
    677e:	f3ef 8211 	mrs	r2, BASEPRI
    6782:	f383 8812 	msr	BASEPRI_MAX, r3
    6786:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    678a:	4b13      	ldr	r3, [pc, #76]	; (67d8 <z_setup_new_thread+0xc4>)
    678c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    678e:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    6790:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    6792:	f382 8811 	msr	BASEPRI, r2
    6796:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    679a:	f1bb 0f00 	cmp.w	fp, #0
    679e:	d013      	beq.n	67c8 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    67a0:	221f      	movs	r2, #31
    67a2:	4659      	mov	r1, fp
    67a4:	f104 0074 	add.w	r0, r4, #116	; 0x74
    67a8:	f002 fb28 	bl	8dfc <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    67ac:	2300      	movs	r3, #0
    67ae:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    67b2:	4b09      	ldr	r3, [pc, #36]	; (67d8 <z_setup_new_thread+0xc4>)
    67b4:	689b      	ldr	r3, [r3, #8]
    67b6:	b15b      	cbz	r3, 67d0 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    67b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    67bc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    67c0:	4628      	mov	r0, r5
    67c2:	b005      	add	sp, #20
    67c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    67c8:	2300      	movs	r3, #0
    67ca:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    67ce:	e7f0      	b.n	67b2 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    67d0:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    67d4:	e7f4      	b.n	67c0 <z_setup_new_thread+0xac>
    67d6:	bf00      	nop
    67d8:	20000f88 	.word	0x20000f88

000067dc <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    67dc:	b530      	push	{r4, r5, lr}
    67de:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    67e0:	4c21      	ldr	r4, [pc, #132]	; (6868 <z_init_static_threads+0x8c>)
    67e2:	e014      	b.n	680e <z_init_static_threads+0x32>
		z_setup_new_thread(
    67e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    67e6:	9305      	str	r3, [sp, #20]
    67e8:	6a23      	ldr	r3, [r4, #32]
    67ea:	9304      	str	r3, [sp, #16]
    67ec:	69e3      	ldr	r3, [r4, #28]
    67ee:	9303      	str	r3, [sp, #12]
    67f0:	69a3      	ldr	r3, [r4, #24]
    67f2:	9302      	str	r3, [sp, #8]
    67f4:	6963      	ldr	r3, [r4, #20]
    67f6:	9301      	str	r3, [sp, #4]
    67f8:	6923      	ldr	r3, [r4, #16]
    67fa:	9300      	str	r3, [sp, #0]
    67fc:	68e3      	ldr	r3, [r4, #12]
    67fe:	68a2      	ldr	r2, [r4, #8]
    6800:	6861      	ldr	r1, [r4, #4]
    6802:	6820      	ldr	r0, [r4, #0]
    6804:	f7ff ff86 	bl	6714 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    6808:	6823      	ldr	r3, [r4, #0]
    680a:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    680c:	3430      	adds	r4, #48	; 0x30
    680e:	4b17      	ldr	r3, [pc, #92]	; (686c <z_init_static_threads+0x90>)
    6810:	429c      	cmp	r4, r3
    6812:	d3e7      	bcc.n	67e4 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    6814:	f000 f9ea 	bl	6bec <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    6818:	4c13      	ldr	r4, [pc, #76]	; (6868 <z_init_static_threads+0x8c>)
    681a:	e000      	b.n	681e <z_init_static_threads+0x42>
    681c:	3430      	adds	r4, #48	; 0x30
    681e:	4b13      	ldr	r3, [pc, #76]	; (686c <z_init_static_threads+0x90>)
    6820:	429c      	cmp	r4, r3
    6822:	d21c      	bcs.n	685e <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6824:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6826:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    682a:	d0f7      	beq.n	681c <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    682c:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    682e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6832:	17c1      	asrs	r1, r0, #31
			return ((t * to_hz + off) / from_hz);
    6834:	03c9      	lsls	r1, r1, #15
    6836:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    683a:	03c0      	lsls	r0, r0, #15
    683c:	f240 33e7 	movw	r3, #999	; 0x3e7
    6840:	18c0      	adds	r0, r0, r3
    6842:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6846:	f04f 0300 	mov.w	r3, #0
    684a:	f141 0100 	adc.w	r1, r1, #0
    684e:	f7f9 fc81 	bl	154 <__aeabi_uldivmod>
    6852:	4602      	mov	r2, r0
    6854:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    6856:	4628      	mov	r0, r5
    6858:	f7ff ff4e 	bl	66f8 <schedule_new_thread>
    685c:	e7de      	b.n	681c <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    685e:	f000 fbc7 	bl	6ff0 <k_sched_unlock>
}
    6862:	b007      	add	sp, #28
    6864:	bd30      	pop	{r4, r5, pc}
    6866:	bf00      	nop
    6868:	0000a5a8 	.word	0x0000a5a8
    686c:	0000a5a8 	.word	0x0000a5a8

00006870 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    6870:	b508      	push	{r3, lr}
    6872:	e001      	b.n	6878 <idle+0x8>
	arch_cpu_idle();
    6874:	f7fb ff86 	bl	2784 <arch_cpu_idle>
	__asm__ volatile(
    6878:	f04f 0220 	mov.w	r2, #32
    687c:	f3ef 8311 	mrs	r3, BASEPRI
    6880:	f382 8812 	msr	BASEPRI_MAX, r2
    6884:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    6888:	f003 fc8a 	bl	a1a0 <z_get_next_timeout_expiry>
    688c:	4b05      	ldr	r3, [pc, #20]	; (68a4 <idle+0x34>)
    688e:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    6890:	4b05      	ldr	r3, [pc, #20]	; (68a8 <idle+0x38>)
    6892:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    6894:	2b00      	cmp	r3, #0
    6896:	d0ed      	beq.n	6874 <idle+0x4>
    6898:	f7fb fd70 	bl	237c <pm_system_suspend>
    689c:	2800      	cmp	r0, #0
    689e:	d1eb      	bne.n	6878 <idle+0x8>
    68a0:	e7e8      	b.n	6874 <idle+0x4>
    68a2:	bf00      	nop
    68a4:	20000f88 	.word	0x20000f88
    68a8:	200011a2 	.word	0x200011a2

000068ac <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    68ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68b0:	b082      	sub	sp, #8
    68b2:	4604      	mov	r4, r0
    68b4:	461e      	mov	r6, r3
    68b6:	f04f 0320 	mov.w	r3, #32
    68ba:	f3ef 8511 	mrs	r5, BASEPRI
    68be:	f383 8812 	msr	BASEPRI_MAX, r3
    68c2:	f3bf 8f6f 	isb	sy
    68c6:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    68c8:	68c1      	ldr	r1, [r0, #12]
    68ca:	b999      	cbnz	r1, 68f4 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    68cc:	2900      	cmp	r1, #0
    68ce:	d151      	bne.n	6974 <z_impl_k_mutex_lock+0xc8>
    68d0:	4a36      	ldr	r2, [pc, #216]	; (69ac <z_impl_k_mutex_lock+0x100>)
    68d2:	6892      	ldr	r2, [r2, #8]
    68d4:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    68d8:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    68da:	3101      	adds	r1, #1
    68dc:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    68de:	4a33      	ldr	r2, [pc, #204]	; (69ac <z_impl_k_mutex_lock+0x100>)
    68e0:	6892      	ldr	r2, [r2, #8]
    68e2:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    68e4:	f383 8811 	msr	BASEPRI, r3
    68e8:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    68ec:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    68ee:	b002      	add	sp, #8
    68f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    68f4:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    68f6:	6880      	ldr	r0, [r0, #8]
    68f8:	4a2c      	ldr	r2, [pc, #176]	; (69ac <z_impl_k_mutex_lock+0x100>)
    68fa:	6892      	ldr	r2, [r2, #8]
    68fc:	4290      	cmp	r0, r2
    68fe:	d0e5      	beq.n	68cc <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6900:	ea56 0107 	orrs.w	r1, r6, r7
    6904:	d038      	beq.n	6978 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
    6906:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    690a:	4641      	mov	r1, r8
    690c:	f992 000e 	ldrsb.w	r0, [r2, #14]
    6910:	f003 faae 	bl	9e70 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6914:	4580      	cmp	r8, r0
    6916:	dc36      	bgt.n	6986 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
    6918:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    691c:	9700      	str	r7, [sp, #0]
    691e:	9601      	str	r6, [sp, #4]
    6920:	4622      	mov	r2, r4
    6922:	4629      	mov	r1, r5
    6924:	4822      	ldr	r0, [pc, #136]	; (69b0 <z_impl_k_mutex_lock+0x104>)
    6926:	f000 faaf 	bl	6e88 <z_pend_curr>
	if (got_mutex == 0) {
    692a:	2800      	cmp	r0, #0
    692c:	d0df      	beq.n	68ee <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    692e:	f04f 0320 	mov.w	r3, #32
    6932:	f3ef 8511 	mrs	r5, BASEPRI
    6936:	f383 8812 	msr	BASEPRI_MAX, r3
    693a:	f3bf 8f6f 	isb	sy
    693e:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    6940:	68a3      	ldr	r3, [r4, #8]
    6942:	b343      	cbz	r3, 6996 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6944:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6946:	429c      	cmp	r4, r3
    6948:	d023      	beq.n	6992 <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    694a:	b313      	cbz	r3, 6992 <z_impl_k_mutex_lock+0xe6>
    694c:	6921      	ldr	r1, [r4, #16]
    694e:	f993 000e 	ldrsb.w	r0, [r3, #14]
    6952:	f003 fa8d 	bl	9e70 <new_prio_for_inheritance>
    6956:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    6958:	4620      	mov	r0, r4
    695a:	f003 fa94 	bl	9e86 <adjust_owner_prio>
    695e:	b9e8      	cbnz	r0, 699c <z_impl_k_mutex_lock+0xf0>
    6960:	f1b8 0f00 	cmp.w	r8, #0
    6964:	d11a      	bne.n	699c <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
    6966:	f386 8811 	msr	BASEPRI, r6
    696a:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    696e:	f06f 000a 	mvn.w	r0, #10
    6972:	e7bc      	b.n	68ee <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    6974:	6922      	ldr	r2, [r4, #16]
    6976:	e7af      	b.n	68d8 <z_impl_k_mutex_lock+0x2c>
    6978:	f385 8811 	msr	BASEPRI, r5
    697c:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    6980:	f06f 000f 	mvn.w	r0, #15
    6984:	e7b3      	b.n	68ee <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    6986:	4601      	mov	r1, r0
    6988:	4620      	mov	r0, r4
    698a:	f003 fa7c 	bl	9e86 <adjust_owner_prio>
    698e:	4680      	mov	r8, r0
    6990:	e7c4      	b.n	691c <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6992:	6921      	ldr	r1, [r4, #16]
    6994:	e7e0      	b.n	6958 <z_impl_k_mutex_lock+0xac>
	if (resched) {
    6996:	f1b8 0f00 	cmp.w	r8, #0
    699a:	d0e4      	beq.n	6966 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
    699c:	4629      	mov	r1, r5
    699e:	4804      	ldr	r0, [pc, #16]	; (69b0 <z_impl_k_mutex_lock+0x104>)
    69a0:	f000 f90e 	bl	6bc0 <z_reschedule>
	return -EAGAIN;
    69a4:	f06f 000a 	mvn.w	r0, #10
    69a8:	e7a1      	b.n	68ee <z_impl_k_mutex_lock+0x42>
    69aa:	bf00      	nop
    69ac:	20000f88 	.word	0x20000f88
    69b0:	20000fb4 	.word	0x20000fb4

000069b4 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    69b4:	6883      	ldr	r3, [r0, #8]
    69b6:	b38b      	cbz	r3, 6a1c <z_impl_k_mutex_unlock+0x68>
{
    69b8:	b570      	push	{r4, r5, r6, lr}
    69ba:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    69bc:	4a1a      	ldr	r2, [pc, #104]	; (6a28 <z_impl_k_mutex_unlock+0x74>)
    69be:	6892      	ldr	r2, [r2, #8]
    69c0:	4293      	cmp	r3, r2
    69c2:	d12e      	bne.n	6a22 <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    69c4:	68c3      	ldr	r3, [r0, #12]
    69c6:	2b01      	cmp	r3, #1
    69c8:	d903      	bls.n	69d2 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    69ca:	3b01      	subs	r3, #1
    69cc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    69ce:	2000      	movs	r0, #0
}
    69d0:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    69d2:	f04f 0320 	mov.w	r3, #32
    69d6:	f3ef 8511 	mrs	r5, BASEPRI
    69da:	f383 8812 	msr	BASEPRI_MAX, r3
    69de:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    69e2:	6901      	ldr	r1, [r0, #16]
    69e4:	f003 fa4f 	bl	9e86 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    69e8:	4620      	mov	r0, r4
    69ea:	f003 fb7e 	bl	a0ea <z_unpend_first_thread>
	mutex->owner = new_owner;
    69ee:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    69f0:	b168      	cbz	r0, 6a0e <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    69f2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    69f6:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    69f8:	2400      	movs	r4, #0
    69fa:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    69fe:	f003 fabf 	bl	9f80 <z_ready_thread>
		z_reschedule(&lock, key);
    6a02:	4629      	mov	r1, r5
    6a04:	4809      	ldr	r0, [pc, #36]	; (6a2c <z_impl_k_mutex_unlock+0x78>)
    6a06:	f000 f8db 	bl	6bc0 <z_reschedule>
	return 0;
    6a0a:	4620      	mov	r0, r4
    6a0c:	e7e0      	b.n	69d0 <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    6a0e:	2000      	movs	r0, #0
    6a10:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    6a12:	f385 8811 	msr	BASEPRI, r5
    6a16:	f3bf 8f6f 	isb	sy
    6a1a:	e7d9      	b.n	69d0 <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    6a1c:	f06f 0015 	mvn.w	r0, #21
}
    6a20:	4770      	bx	lr
		return -EPERM;
    6a22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6a26:	e7d3      	b.n	69d0 <z_impl_k_mutex_unlock+0x1c>
    6a28:	20000f88 	.word	0x20000f88
    6a2c:	20000fb4 	.word	0x20000fb4

00006a30 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6a30:	b538      	push	{r3, r4, r5, lr}
    6a32:	4604      	mov	r4, r0
	__asm__ volatile(
    6a34:	f04f 0320 	mov.w	r3, #32
    6a38:	f3ef 8511 	mrs	r5, BASEPRI
    6a3c:	f383 8812 	msr	BASEPRI_MAX, r3
    6a40:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6a44:	f003 fb51 	bl	a0ea <z_unpend_first_thread>

	if (thread != NULL) {
    6a48:	b148      	cbz	r0, 6a5e <z_impl_k_sem_give+0x2e>
    6a4a:	2200      	movs	r2, #0
    6a4c:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6a50:	f003 fa96 	bl	9f80 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6a54:	4629      	mov	r1, r5
    6a56:	4807      	ldr	r0, [pc, #28]	; (6a74 <z_impl_k_sem_give+0x44>)
    6a58:	f000 f8b2 	bl	6bc0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6a5c:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6a5e:	68a3      	ldr	r3, [r4, #8]
    6a60:	68e2      	ldr	r2, [r4, #12]
    6a62:	4293      	cmp	r3, r2
    6a64:	d003      	beq.n	6a6e <z_impl_k_sem_give+0x3e>
    6a66:	2201      	movs	r2, #1
    6a68:	4413      	add	r3, r2
    6a6a:	60a3      	str	r3, [r4, #8]
}
    6a6c:	e7f2      	b.n	6a54 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6a6e:	2200      	movs	r2, #0
    6a70:	e7fa      	b.n	6a68 <z_impl_k_sem_give+0x38>
    6a72:	bf00      	nop
    6a74:	20000fb4 	.word	0x20000fb4

00006a78 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6a78:	b510      	push	{r4, lr}
    6a7a:	b082      	sub	sp, #8
    6a7c:	f04f 0420 	mov.w	r4, #32
    6a80:	f3ef 8111 	mrs	r1, BASEPRI
    6a84:	f384 8812 	msr	BASEPRI_MAX, r4
    6a88:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6a8c:	6884      	ldr	r4, [r0, #8]
    6a8e:	b144      	cbz	r4, 6aa2 <z_impl_k_sem_take+0x2a>
		sem->count--;
    6a90:	3c01      	subs	r4, #1
    6a92:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    6a94:	f381 8811 	msr	BASEPRI, r1
    6a98:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    6a9c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    6a9e:	b002      	add	sp, #8
    6aa0:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6aa2:	ea53 0402 	orrs.w	r4, r3, r2
    6aa6:	d006      	beq.n	6ab6 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6aa8:	9200      	str	r2, [sp, #0]
    6aaa:	9301      	str	r3, [sp, #4]
    6aac:	4602      	mov	r2, r0
    6aae:	4805      	ldr	r0, [pc, #20]	; (6ac4 <z_impl_k_sem_take+0x4c>)
    6ab0:	f000 f9ea 	bl	6e88 <z_pend_curr>
	return ret;
    6ab4:	e7f3      	b.n	6a9e <z_impl_k_sem_take+0x26>
    6ab6:	f381 8811 	msr	BASEPRI, r1
    6aba:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6abe:	f06f 000f 	mvn.w	r0, #15
    6ac2:	e7ec      	b.n	6a9e <z_impl_k_sem_take+0x26>
    6ac4:	20000fb4 	.word	0x20000fb4

00006ac8 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    6ac8:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
    6aca:	2b7f      	cmp	r3, #127	; 0x7f
    6acc:	d80e      	bhi.n	6aec <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
    6ace:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    6ad0:	f013 0f1f 	tst.w	r3, #31
    6ad4:	d10c      	bne.n	6af0 <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6ad6:	f990 200e 	ldrsb.w	r2, [r0, #14]
    6ada:	4b08      	ldr	r3, [pc, #32]	; (6afc <sliceable+0x34>)
    6adc:	681b      	ldr	r3, [r3, #0]
    6ade:	429a      	cmp	r2, r3
    6ae0:	db08      	blt.n	6af4 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    6ae2:	4b07      	ldr	r3, [pc, #28]	; (6b00 <sliceable+0x38>)
    6ae4:	4298      	cmp	r0, r3
    6ae6:	d007      	beq.n	6af8 <sliceable+0x30>
    6ae8:	2001      	movs	r0, #1
    6aea:	4770      	bx	lr
    6aec:	2000      	movs	r0, #0
    6aee:	4770      	bx	lr
    6af0:	2000      	movs	r0, #0
    6af2:	4770      	bx	lr
    6af4:	2000      	movs	r0, #0
    6af6:	4770      	bx	lr
    6af8:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    6afa:	4770      	bx	lr
    6afc:	20000fb8 	.word	0x20000fb8
    6b00:	20000708 	.word	0x20000708

00006b04 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6b04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    6b08:	bf08      	it	eq
    6b0a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    6b0e:	d100      	bne.n	6b12 <add_thread_timeout+0xe>
    6b10:	4770      	bx	lr
{
    6b12:	b508      	push	{r3, lr}
    6b14:	4902      	ldr	r1, [pc, #8]	; (6b20 <add_thread_timeout+0x1c>)
    6b16:	3018      	adds	r0, #24
    6b18:	f000 fc24 	bl	7364 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    6b1c:	bd08      	pop	{r3, pc}
    6b1e:	bf00      	nop
    6b20:	00009fb9 	.word	0x00009fb9

00006b24 <z_reset_time_slice>:
{
    6b24:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    6b26:	4b07      	ldr	r3, [pc, #28]	; (6b44 <z_reset_time_slice+0x20>)
    6b28:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    6b2a:	b904      	cbnz	r4, 6b2e <z_reset_time_slice+0xa>
}
    6b2c:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    6b2e:	f7fe f8fb 	bl	4d28 <sys_clock_elapsed>
    6b32:	4404      	add	r4, r0
    6b34:	4b04      	ldr	r3, [pc, #16]	; (6b48 <z_reset_time_slice+0x24>)
    6b36:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    6b38:	2100      	movs	r1, #0
    6b3a:	4b02      	ldr	r3, [pc, #8]	; (6b44 <z_reset_time_slice+0x20>)
    6b3c:	6818      	ldr	r0, [r3, #0]
    6b3e:	f003 fb46 	bl	a1ce <z_set_timeout_expiry>
}
    6b42:	e7f3      	b.n	6b2c <z_reset_time_slice+0x8>
    6b44:	20000fbc 	.word	0x20000fbc
    6b48:	20000f88 	.word	0x20000f88

00006b4c <k_sched_time_slice_set>:
{
    6b4c:	b570      	push	{r4, r5, r6, lr}
    6b4e:	4604      	mov	r4, r0
    6b50:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    6b52:	2300      	movs	r3, #0
	__asm__ volatile(
    6b54:	f04f 0220 	mov.w	r2, #32
    6b58:	f3ef 8511 	mrs	r5, BASEPRI
    6b5c:	f382 8812 	msr	BASEPRI_MAX, r2
    6b60:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    6b64:	e00e      	b.n	6b84 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    6b66:	2802      	cmp	r0, #2
    6b68:	bfb8      	it	lt
    6b6a:	2002      	movlt	r0, #2
    6b6c:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    6b6e:	4b11      	ldr	r3, [pc, #68]	; (6bb4 <k_sched_time_slice_set+0x68>)
    6b70:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
    6b72:	4b11      	ldr	r3, [pc, #68]	; (6bb8 <k_sched_time_slice_set+0x6c>)
    6b74:	6898      	ldr	r0, [r3, #8]
    6b76:	f7ff ffd5 	bl	6b24 <z_reset_time_slice>
	__asm__ volatile(
    6b7a:	f385 8811 	msr	BASEPRI, r5
    6b7e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6b82:	2301      	movs	r3, #1
    6b84:	b9a3      	cbnz	r3, 6bb0 <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    6b86:	4b0c      	ldr	r3, [pc, #48]	; (6bb8 <k_sched_time_slice_set+0x6c>)
    6b88:	2200      	movs	r2, #0
    6b8a:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    6b8c:	0c61      	lsrs	r1, r4, #17
    6b8e:	03e0      	lsls	r0, r4, #15
    6b90:	f240 33e7 	movw	r3, #999	; 0x3e7
    6b94:	18c0      	adds	r0, r0, r3
    6b96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6b9a:	f04f 0300 	mov.w	r3, #0
    6b9e:	f141 0100 	adc.w	r1, r1, #0
    6ba2:	f7f9 fad7 	bl	154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    6ba6:	4b05      	ldr	r3, [pc, #20]	; (6bbc <k_sched_time_slice_set+0x70>)
    6ba8:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    6baa:	2c00      	cmp	r4, #0
    6bac:	dcdb      	bgt.n	6b66 <k_sched_time_slice_set+0x1a>
    6bae:	e7de      	b.n	6b6e <k_sched_time_slice_set+0x22>
}
    6bb0:	bd70      	pop	{r4, r5, r6, pc}
    6bb2:	bf00      	nop
    6bb4:	20000fb8 	.word	0x20000fb8
    6bb8:	20000f88 	.word	0x20000f88
    6bbc:	20000fbc 	.word	0x20000fbc

00006bc0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    6bc0:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    6bc2:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6bc4:	b959      	cbnz	r1, 6bde <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6bc6:	f3ef 8205 	mrs	r2, IPSR
    6bca:	b942      	cbnz	r2, 6bde <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    6bcc:	4a06      	ldr	r2, [pc, #24]	; (6be8 <z_reschedule+0x28>)
    6bce:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
    6bd0:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    6bd2:	4290      	cmp	r0, r2
    6bd4:	d003      	beq.n	6bde <z_reschedule+0x1e>
	ret = arch_swap(key);
    6bd6:	4608      	mov	r0, r1
    6bd8:	f7fb ff74 	bl	2ac4 <arch_swap>
		z_swap(lock, key);
    6bdc:	e003      	b.n	6be6 <z_reschedule+0x26>
    6bde:	f383 8811 	msr	BASEPRI, r3
    6be2:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    6be6:	bd08      	pop	{r3, pc}
    6be8:	20000f88 	.word	0x20000f88

00006bec <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    6bec:	2300      	movs	r3, #0
	__asm__ volatile(
    6bee:	f04f 0220 	mov.w	r2, #32
    6bf2:	f3ef 8111 	mrs	r1, BASEPRI
    6bf6:	f382 8812 	msr	BASEPRI_MAX, r2
    6bfa:	f3bf 8f6f 	isb	sy
    6bfe:	e009      	b.n	6c14 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    6c00:	4b06      	ldr	r3, [pc, #24]	; (6c1c <k_sched_lock+0x30>)
    6c02:	689a      	ldr	r2, [r3, #8]
    6c04:	7bd3      	ldrb	r3, [r2, #15]
    6c06:	3b01      	subs	r3, #1
    6c08:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    6c0a:	f381 8811 	msr	BASEPRI, r1
    6c0e:	f3bf 8f6f 	isb	sy
    6c12:	2301      	movs	r3, #1
    6c14:	2b00      	cmp	r3, #0
    6c16:	d0f3      	beq.n	6c00 <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    6c18:	4770      	bx	lr
    6c1a:	bf00      	nop
    6c1c:	20000f88 	.word	0x20000f88

00006c20 <update_cache>:
{
    6c20:	b538      	push	{r3, r4, r5, lr}
    6c22:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    6c24:	4810      	ldr	r0, [pc, #64]	; (6c68 <update_cache+0x48>)
    6c26:	f003 f9a4 	bl	9f72 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6c2a:	4605      	mov	r5, r0
    6c2c:	b170      	cbz	r0, 6c4c <update_cache+0x2c>
	if (preempt_ok != 0) {
    6c2e:	b984      	cbnz	r4, 6c52 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    6c30:	4b0e      	ldr	r3, [pc, #56]	; (6c6c <update_cache+0x4c>)
    6c32:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    6c34:	7b5a      	ldrb	r2, [r3, #13]
    6c36:	f012 0f1f 	tst.w	r2, #31
    6c3a:	d10a      	bne.n	6c52 <update_cache+0x32>
	return node->next != NULL;
    6c3c:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6c3e:	b942      	cbnz	r2, 6c52 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    6c40:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    6c42:	2a7f      	cmp	r2, #127	; 0x7f
    6c44:	d905      	bls.n	6c52 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    6c46:	4a09      	ldr	r2, [pc, #36]	; (6c6c <update_cache+0x4c>)
    6c48:	61d3      	str	r3, [r2, #28]
    6c4a:	e00b      	b.n	6c64 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6c4c:	4b07      	ldr	r3, [pc, #28]	; (6c6c <update_cache+0x4c>)
    6c4e:	68dd      	ldr	r5, [r3, #12]
    6c50:	e7ed      	b.n	6c2e <update_cache+0xe>
		if (thread != _current) {
    6c52:	4b06      	ldr	r3, [pc, #24]	; (6c6c <update_cache+0x4c>)
    6c54:	689b      	ldr	r3, [r3, #8]
    6c56:	42ab      	cmp	r3, r5
    6c58:	d002      	beq.n	6c60 <update_cache+0x40>
			z_reset_time_slice(thread);
    6c5a:	4628      	mov	r0, r5
    6c5c:	f7ff ff62 	bl	6b24 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    6c60:	4b02      	ldr	r3, [pc, #8]	; (6c6c <update_cache+0x4c>)
    6c62:	61dd      	str	r5, [r3, #28]
}
    6c64:	bd38      	pop	{r3, r4, r5, pc}
    6c66:	bf00      	nop
    6c68:	20000fa8 	.word	0x20000fa8
    6c6c:	20000f88 	.word	0x20000f88

00006c70 <move_thread_to_end_of_prio_q>:
{
    6c70:	b538      	push	{r3, r4, r5, lr}
    6c72:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    6c74:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    6c76:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	db0a      	blt.n	6c94 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    6c7e:	7b6b      	ldrb	r3, [r5, #13]
    6c80:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6c84:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    6c86:	4b1b      	ldr	r3, [pc, #108]	; (6cf4 <move_thread_to_end_of_prio_q+0x84>)
    6c88:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c8c:	429c      	cmp	r4, r3
    6c8e:	d110      	bne.n	6cb2 <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c90:	2400      	movs	r4, #0
    6c92:	e00e      	b.n	6cb2 <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6c94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6c98:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6c9a:	4601      	mov	r1, r0
    6c9c:	4816      	ldr	r0, [pc, #88]	; (6cf8 <move_thread_to_end_of_prio_q+0x88>)
    6c9e:	f003 f952 	bl	9f46 <z_priq_dumb_remove>
}
    6ca2:	e7ec      	b.n	6c7e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    6ca4:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    6ca6:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6ca8:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6caa:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6cac:	6065      	str	r5, [r4, #4]
}
    6cae:	e017      	b.n	6ce0 <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6cb0:	2400      	movs	r4, #0
    6cb2:	b16c      	cbz	r4, 6cd0 <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6cb4:	4621      	mov	r1, r4
    6cb6:	4628      	mov	r0, r5
    6cb8:	f003 f90a 	bl	9ed0 <z_sched_prio_cmp>
    6cbc:	2800      	cmp	r0, #0
    6cbe:	dcf1      	bgt.n	6ca4 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6cc0:	2c00      	cmp	r4, #0
    6cc2:	d0f6      	beq.n	6cb2 <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    6cc4:	4b0b      	ldr	r3, [pc, #44]	; (6cf4 <move_thread_to_end_of_prio_q+0x84>)
    6cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6cc8:	429c      	cmp	r4, r3
    6cca:	d0f1      	beq.n	6cb0 <move_thread_to_end_of_prio_q+0x40>
    6ccc:	6824      	ldr	r4, [r4, #0]
    6cce:	e7f0      	b.n	6cb2 <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    6cd0:	4b08      	ldr	r3, [pc, #32]	; (6cf4 <move_thread_to_end_of_prio_q+0x84>)
    6cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6cd4:	f103 0120 	add.w	r1, r3, #32
    6cd8:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    6cda:	606a      	str	r2, [r5, #4]
	tail->next = node;
    6cdc:	6015      	str	r5, [r2, #0]
	list->tail = node;
    6cde:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    6ce0:	4b04      	ldr	r3, [pc, #16]	; (6cf4 <move_thread_to_end_of_prio_q+0x84>)
    6ce2:	6898      	ldr	r0, [r3, #8]
    6ce4:	42a8      	cmp	r0, r5
    6ce6:	bf14      	ite	ne
    6ce8:	2000      	movne	r0, #0
    6cea:	2001      	moveq	r0, #1
    6cec:	f7ff ff98 	bl	6c20 <update_cache>
}
    6cf0:	bd38      	pop	{r3, r4, r5, pc}
    6cf2:	bf00      	nop
    6cf4:	20000f88 	.word	0x20000f88
    6cf8:	20000fa8 	.word	0x20000fa8

00006cfc <slice_expired_locked>:
{
    6cfc:	b538      	push	{r3, r4, r5, lr}
    6cfe:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    6d00:	4b07      	ldr	r3, [pc, #28]	; (6d20 <slice_expired_locked+0x24>)
    6d02:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    6d04:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    6d06:	f013 0f1f 	tst.w	r3, #31
    6d0a:	d004      	beq.n	6d16 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    6d0c:	4628      	mov	r0, r5
    6d0e:	f7ff ff09 	bl	6b24 <z_reset_time_slice>
}
    6d12:	4620      	mov	r0, r4
    6d14:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    6d16:	4628      	mov	r0, r5
    6d18:	f7ff ffaa 	bl	6c70 <move_thread_to_end_of_prio_q>
    6d1c:	e7f6      	b.n	6d0c <slice_expired_locked+0x10>
    6d1e:	bf00      	nop
    6d20:	20000f88 	.word	0x20000f88

00006d24 <z_time_slice>:
{
    6d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d26:	4605      	mov	r5, r0
	__asm__ volatile(
    6d28:	f04f 0320 	mov.w	r3, #32
    6d2c:	f3ef 8611 	mrs	r6, BASEPRI
    6d30:	f383 8812 	msr	BASEPRI_MAX, r3
    6d34:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    6d38:	4b15      	ldr	r3, [pc, #84]	; (6d90 <z_time_slice+0x6c>)
    6d3a:	6898      	ldr	r0, [r3, #8]
    6d3c:	4b15      	ldr	r3, [pc, #84]	; (6d94 <z_time_slice+0x70>)
    6d3e:	681b      	ldr	r3, [r3, #0]
    6d40:	4298      	cmp	r0, r3
    6d42:	d011      	beq.n	6d68 <z_time_slice+0x44>
    6d44:	4634      	mov	r4, r6
	pending_current = NULL;
    6d46:	4b13      	ldr	r3, [pc, #76]	; (6d94 <z_time_slice+0x70>)
    6d48:	2200      	movs	r2, #0
    6d4a:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
    6d4c:	4b12      	ldr	r3, [pc, #72]	; (6d98 <z_time_slice+0x74>)
    6d4e:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
    6d50:	b1b3      	cbz	r3, 6d80 <z_time_slice+0x5c>
    6d52:	f7ff feb9 	bl	6ac8 <sliceable>
    6d56:	b198      	cbz	r0, 6d80 <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
    6d58:	4b0d      	ldr	r3, [pc, #52]	; (6d90 <z_time_slice+0x6c>)
    6d5a:	691b      	ldr	r3, [r3, #16]
    6d5c:	42ab      	cmp	r3, r5
    6d5e:	dd0a      	ble.n	6d76 <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
    6d60:	1b5b      	subs	r3, r3, r5
    6d62:	4a0b      	ldr	r2, [pc, #44]	; (6d90 <z_time_slice+0x6c>)
    6d64:	6113      	str	r3, [r2, #16]
    6d66:	e00e      	b.n	6d86 <z_time_slice+0x62>
		z_reset_time_slice(_current);
    6d68:	f7ff fedc 	bl	6b24 <z_reset_time_slice>
	__asm__ volatile(
    6d6c:	f386 8811 	msr	BASEPRI, r6
    6d70:	f3bf 8f6f 	isb	sy
		return;
    6d74:	e00b      	b.n	6d8e <z_time_slice+0x6a>
			key = slice_expired_locked(key);
    6d76:	4630      	mov	r0, r6
    6d78:	f7ff ffc0 	bl	6cfc <slice_expired_locked>
    6d7c:	4604      	mov	r4, r0
    6d7e:	e002      	b.n	6d86 <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
    6d80:	4b03      	ldr	r3, [pc, #12]	; (6d90 <z_time_slice+0x6c>)
    6d82:	2200      	movs	r2, #0
    6d84:	611a      	str	r2, [r3, #16]
    6d86:	f384 8811 	msr	BASEPRI, r4
    6d8a:	f3bf 8f6f 	isb	sy
}
    6d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d90:	20000f88 	.word	0x20000f88
    6d94:	20000fb4 	.word	0x20000fb4
    6d98:	20000fbc 	.word	0x20000fbc

00006d9c <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    6d9c:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6d9e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6da2:	2b00      	cmp	r3, #0
    6da4:	db33      	blt.n	6e0e <ready_thread+0x72>
{
    6da6:	b570      	push	{r4, r5, r6, lr}
    6da8:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6daa:	f012 0f1f 	tst.w	r2, #31
    6dae:	d101      	bne.n	6db4 <ready_thread+0x18>
	return node->next != NULL;
    6db0:	6986      	ldr	r6, [r0, #24]
    6db2:	b106      	cbz	r6, 6db6 <ready_thread+0x1a>
}
    6db4:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    6db6:	f062 027f 	orn	r2, r2, #127	; 0x7f
    6dba:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    6dbc:	4b14      	ldr	r3, [pc, #80]	; (6e10 <ready_thread+0x74>)
    6dbe:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6dc2:	429d      	cmp	r5, r3
    6dc4:	d108      	bne.n	6dd8 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6dc6:	4635      	mov	r5, r6
    6dc8:	e006      	b.n	6dd8 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    6dca:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    6dcc:	6063      	str	r3, [r4, #4]
	node->next = successor;
    6dce:	6025      	str	r5, [r4, #0]
	prev->next = node;
    6dd0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    6dd2:	606c      	str	r4, [r5, #4]
}
    6dd4:	e017      	b.n	6e06 <ready_thread+0x6a>
    6dd6:	4635      	mov	r5, r6
    6dd8:	b16d      	cbz	r5, 6df6 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6dda:	4629      	mov	r1, r5
    6ddc:	4620      	mov	r0, r4
    6dde:	f003 f877 	bl	9ed0 <z_sched_prio_cmp>
    6de2:	2800      	cmp	r0, #0
    6de4:	dcf1      	bgt.n	6dca <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6de6:	2d00      	cmp	r5, #0
    6de8:	d0f6      	beq.n	6dd8 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    6dea:	4b09      	ldr	r3, [pc, #36]	; (6e10 <ready_thread+0x74>)
    6dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6dee:	429d      	cmp	r5, r3
    6df0:	d0f1      	beq.n	6dd6 <ready_thread+0x3a>
    6df2:	682d      	ldr	r5, [r5, #0]
    6df4:	e7f0      	b.n	6dd8 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    6df6:	4b06      	ldr	r3, [pc, #24]	; (6e10 <ready_thread+0x74>)
    6df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6dfa:	f103 0120 	add.w	r1, r3, #32
    6dfe:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    6e00:	6062      	str	r2, [r4, #4]
	tail->next = node;
    6e02:	6014      	str	r4, [r2, #0]
	list->tail = node;
    6e04:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    6e06:	2000      	movs	r0, #0
    6e08:	f7ff ff0a 	bl	6c20 <update_cache>
}
    6e0c:	e7d2      	b.n	6db4 <ready_thread+0x18>
    6e0e:	4770      	bx	lr
    6e10:	20000f88 	.word	0x20000f88

00006e14 <z_sched_start>:
{
    6e14:	b510      	push	{r4, lr}
	__asm__ volatile(
    6e16:	f04f 0320 	mov.w	r3, #32
    6e1a:	f3ef 8411 	mrs	r4, BASEPRI
    6e1e:	f383 8812 	msr	BASEPRI_MAX, r3
    6e22:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    6e26:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    6e28:	f013 0f04 	tst.w	r3, #4
    6e2c:	d104      	bne.n	6e38 <z_sched_start+0x24>
	__asm__ volatile(
    6e2e:	f384 8811 	msr	BASEPRI, r4
    6e32:	f3bf 8f6f 	isb	sy
}
    6e36:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6e38:	f023 0304 	bic.w	r3, r3, #4
    6e3c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    6e3e:	f7ff ffad 	bl	6d9c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6e42:	4621      	mov	r1, r4
    6e44:	4801      	ldr	r0, [pc, #4]	; (6e4c <z_sched_start+0x38>)
    6e46:	f7ff febb 	bl	6bc0 <z_reschedule>
    6e4a:	e7f4      	b.n	6e36 <z_sched_start+0x22>
    6e4c:	20000fc0 	.word	0x20000fc0

00006e50 <unready_thread>:
{
    6e50:	b510      	push	{r4, lr}
    6e52:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    6e54:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    6e56:	f990 300d 	ldrsb.w	r3, [r0, #13]
    6e5a:	2b00      	cmp	r3, #0
    6e5c:	db08      	blt.n	6e70 <unready_thread+0x20>
	update_cache(thread == _current);
    6e5e:	4b08      	ldr	r3, [pc, #32]	; (6e80 <unready_thread+0x30>)
    6e60:	6898      	ldr	r0, [r3, #8]
    6e62:	42a0      	cmp	r0, r4
    6e64:	bf14      	ite	ne
    6e66:	2000      	movne	r0, #0
    6e68:	2001      	moveq	r0, #1
    6e6a:	f7ff fed9 	bl	6c20 <update_cache>
}
    6e6e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6e70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6e74:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6e76:	4601      	mov	r1, r0
    6e78:	4802      	ldr	r0, [pc, #8]	; (6e84 <unready_thread+0x34>)
    6e7a:	f003 f864 	bl	9f46 <z_priq_dumb_remove>
}
    6e7e:	e7ee      	b.n	6e5e <unready_thread+0xe>
    6e80:	20000f88 	.word	0x20000f88
    6e84:	20000fa8 	.word	0x20000fa8

00006e88 <z_pend_curr>:
{
    6e88:	b510      	push	{r4, lr}
    6e8a:	460c      	mov	r4, r1
    6e8c:	4611      	mov	r1, r2
	pending_current = _current;
    6e8e:	480a      	ldr	r0, [pc, #40]	; (6eb8 <z_pend_curr+0x30>)
    6e90:	6882      	ldr	r2, [r0, #8]
    6e92:	4b0a      	ldr	r3, [pc, #40]	; (6ebc <z_pend_curr+0x34>)
    6e94:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    6e96:	f04f 0220 	mov.w	r2, #32
    6e9a:	f3ef 8311 	mrs	r3, BASEPRI
    6e9e:	f382 8812 	msr	BASEPRI_MAX, r2
    6ea2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    6ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6eaa:	6880      	ldr	r0, [r0, #8]
    6eac:	f003 f8f3 	bl	a096 <pend_locked>
    6eb0:	4620      	mov	r0, r4
    6eb2:	f7fb fe07 	bl	2ac4 <arch_swap>
}
    6eb6:	bd10      	pop	{r4, pc}
    6eb8:	20000f88 	.word	0x20000f88
    6ebc:	20000fb4 	.word	0x20000fb4

00006ec0 <z_set_prio>:
{
    6ec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6ec4:	4605      	mov	r5, r0
    6ec6:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    6ec8:	2300      	movs	r3, #0
    6eca:	f04f 0220 	mov.w	r2, #32
    6ece:	f3ef 8611 	mrs	r6, BASEPRI
    6ed2:	f382 8812 	msr	BASEPRI_MAX, r2
    6ed6:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    6eda:	4618      	mov	r0, r3
    6edc:	e029      	b.n	6f32 <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    6ede:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6ee0:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6ee2:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6ee4:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6ee6:	6065      	str	r5, [r4, #4]
}
    6ee8:	e017      	b.n	6f1a <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6eea:	4644      	mov	r4, r8
    6eec:	b16c      	cbz	r4, 6f0a <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6eee:	4621      	mov	r1, r4
    6ef0:	4628      	mov	r0, r5
    6ef2:	f002 ffed 	bl	9ed0 <z_sched_prio_cmp>
    6ef6:	2800      	cmp	r0, #0
    6ef8:	dcf1      	bgt.n	6ede <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6efa:	2c00      	cmp	r4, #0
    6efc:	d0f6      	beq.n	6eec <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    6efe:	4b1d      	ldr	r3, [pc, #116]	; (6f74 <z_set_prio+0xb4>)
    6f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6f02:	429c      	cmp	r4, r3
    6f04:	d0f1      	beq.n	6eea <z_set_prio+0x2a>
    6f06:	6824      	ldr	r4, [r4, #0]
    6f08:	e7f0      	b.n	6eec <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    6f0a:	4b1a      	ldr	r3, [pc, #104]	; (6f74 <z_set_prio+0xb4>)
    6f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    6f0e:	f103 0120 	add.w	r1, r3, #32
    6f12:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    6f14:	606a      	str	r2, [r5, #4]
	tail->next = node;
    6f16:	6015      	str	r5, [r2, #0]
	list->tail = node;
    6f18:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
    6f1a:	2001      	movs	r0, #1
    6f1c:	f7ff fe80 	bl	6c20 <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6f20:	2001      	movs	r0, #1
    6f22:	e001      	b.n	6f28 <z_set_prio+0x68>
			thread->base.prio = prio;
    6f24:	73af      	strb	r7, [r5, #14]
    6f26:	2000      	movs	r0, #0
	__asm__ volatile(
    6f28:	f386 8811 	msr	BASEPRI, r6
    6f2c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6f30:	2301      	movs	r3, #1
    6f32:	b9e3      	cbnz	r3, 6f6e <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    6f34:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6f36:	f013 0f1f 	tst.w	r3, #31
    6f3a:	d1f3      	bne.n	6f24 <z_set_prio+0x64>
	return node->next != NULL;
    6f3c:	f8d5 8018 	ldr.w	r8, [r5, #24]
    6f40:	f1b8 0f00 	cmp.w	r8, #0
    6f44:	d1ee      	bne.n	6f24 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6f4a:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6f4c:	f8df 9028 	ldr.w	r9, [pc, #40]	; 6f78 <z_set_prio+0xb8>
    6f50:	4629      	mov	r1, r5
    6f52:	4648      	mov	r0, r9
    6f54:	f002 fff7 	bl	9f46 <z_priq_dumb_remove>
				thread->base.prio = prio;
    6f58:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6f5a:	7b6b      	ldrb	r3, [r5, #13]
    6f5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6f60:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    6f62:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f66:	454c      	cmp	r4, r9
    6f68:	d1c0      	bne.n	6eec <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6f6a:	4644      	mov	r4, r8
    6f6c:	e7be      	b.n	6eec <z_set_prio+0x2c>
}
    6f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6f72:	bf00      	nop
    6f74:	20000f88 	.word	0x20000f88
    6f78:	20000fa8 	.word	0x20000fa8

00006f7c <z_impl_k_thread_suspend>:
{
    6f7c:	b538      	push	{r3, r4, r5, lr}
    6f7e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6f80:	3018      	adds	r0, #24
    6f82:	f003 f8ef 	bl	a164 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    6f86:	2300      	movs	r3, #0
	__asm__ volatile(
    6f88:	f04f 0220 	mov.w	r2, #32
    6f8c:	f3ef 8511 	mrs	r5, BASEPRI
    6f90:	f382 8812 	msr	BASEPRI_MAX, r2
    6f94:	f3bf 8f6f 	isb	sy
    6f98:	e010      	b.n	6fbc <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6f9a:	7b63      	ldrb	r3, [r4, #13]
    6f9c:	f043 0310 	orr.w	r3, r3, #16
    6fa0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    6fa2:	4b11      	ldr	r3, [pc, #68]	; (6fe8 <z_impl_k_thread_suspend+0x6c>)
    6fa4:	6898      	ldr	r0, [r3, #8]
    6fa6:	42a0      	cmp	r0, r4
    6fa8:	bf14      	ite	ne
    6faa:	2000      	movne	r0, #0
    6fac:	2001      	moveq	r0, #1
    6fae:	f7ff fe37 	bl	6c20 <update_cache>
	__asm__ volatile(
    6fb2:	f385 8811 	msr	BASEPRI, r5
    6fb6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6fba:	2301      	movs	r3, #1
    6fbc:	b963      	cbnz	r3, 6fd8 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    6fbe:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    6fc0:	f994 300d 	ldrsb.w	r3, [r4, #13]
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	dae8      	bge.n	6f9a <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6fc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    6fcc:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6fce:	4621      	mov	r1, r4
    6fd0:	4806      	ldr	r0, [pc, #24]	; (6fec <z_impl_k_thread_suspend+0x70>)
    6fd2:	f002 ffb8 	bl	9f46 <z_priq_dumb_remove>
}
    6fd6:	e7e0      	b.n	6f9a <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    6fd8:	4b03      	ldr	r3, [pc, #12]	; (6fe8 <z_impl_k_thread_suspend+0x6c>)
    6fda:	689b      	ldr	r3, [r3, #8]
    6fdc:	42a3      	cmp	r3, r4
    6fde:	d000      	beq.n	6fe2 <z_impl_k_thread_suspend+0x66>
}
    6fe0:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    6fe2:	f002 ffa4 	bl	9f2e <z_reschedule_unlocked>
}
    6fe6:	e7fb      	b.n	6fe0 <z_impl_k_thread_suspend+0x64>
    6fe8:	20000f88 	.word	0x20000f88
    6fec:	20000fa8 	.word	0x20000fa8

00006ff0 <k_sched_unlock>:

void k_sched_unlock(void)
{
    6ff0:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    6ff2:	2300      	movs	r3, #0
	__asm__ volatile(
    6ff4:	f04f 0220 	mov.w	r2, #32
    6ff8:	f3ef 8411 	mrs	r4, BASEPRI
    6ffc:	f382 8812 	msr	BASEPRI_MAX, r2
    7000:	f3bf 8f6f 	isb	sy
    7004:	e00c      	b.n	7020 <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    7006:	4b09      	ldr	r3, [pc, #36]	; (702c <k_sched_unlock+0x3c>)
    7008:	689a      	ldr	r2, [r3, #8]
    700a:	7bd3      	ldrb	r3, [r2, #15]
    700c:	3301      	adds	r3, #1
    700e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    7010:	2000      	movs	r0, #0
    7012:	f7ff fe05 	bl	6c20 <update_cache>
	__asm__ volatile(
    7016:	f384 8811 	msr	BASEPRI, r4
    701a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    701e:	2301      	movs	r3, #1
    7020:	2b00      	cmp	r3, #0
    7022:	d0f0      	beq.n	7006 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    7024:	f002 ff83 	bl	9f2e <z_reschedule_unlocked>
}
    7028:	bd10      	pop	{r4, pc}
    702a:	bf00      	nop
    702c:	20000f88 	.word	0x20000f88

00007030 <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    7030:	7b43      	ldrb	r3, [r0, #13]
    7032:	f013 0f08 	tst.w	r3, #8
    7036:	d12a      	bne.n	708e <end_thread+0x5e>
{
    7038:	b510      	push	{r4, lr}
    703a:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    703c:	f043 0208 	orr.w	r2, r3, #8
    7040:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7042:	f023 0220 	bic.w	r2, r3, #32
    7046:	f042 0208 	orr.w	r2, r2, #8
    704a:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    704c:	f012 0f80 	tst.w	r2, #128	; 0x80
    7050:	d113      	bne.n	707a <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    7052:	68a3      	ldr	r3, [r4, #8]
    7054:	b113      	cbz	r3, 705c <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    7056:	4620      	mov	r0, r4
    7058:	f002 ff7d 	bl	9f56 <unpend_thread_no_timeout>
    705c:	f104 0018 	add.w	r0, r4, #24
    7060:	f003 f880 	bl	a164 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    7064:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7068:	f002 ffd5 	bl	a016 <unpend_all>
		update_cache(1);
    706c:	2001      	movs	r0, #1
    706e:	f7ff fdd7 	bl	6c20 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    7072:	4620      	mov	r0, r4
    7074:	f7ff fb0e 	bl	6694 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    7078:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    707a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    707e:	f043 0308 	orr.w	r3, r3, #8
    7082:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7084:	4601      	mov	r1, r0
    7086:	4802      	ldr	r0, [pc, #8]	; (7090 <end_thread+0x60>)
    7088:	f002 ff5d 	bl	9f46 <z_priq_dumb_remove>
}
    708c:	e7e1      	b.n	7052 <end_thread+0x22>
    708e:	4770      	bx	lr
    7090:	20000fa8 	.word	0x20000fa8

00007094 <z_sched_init>:
{
    7094:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    7096:	4804      	ldr	r0, [pc, #16]	; (70a8 <z_sched_init+0x14>)
    7098:	f003 f849 	bl	a12e <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    709c:	2100      	movs	r1, #0
    709e:	4608      	mov	r0, r1
    70a0:	f7ff fd54 	bl	6b4c <k_sched_time_slice_set>
}
    70a4:	bd08      	pop	{r3, pc}
    70a6:	bf00      	nop
    70a8:	20000fa4 	.word	0x20000fa4

000070ac <z_impl_k_yield>:
{
    70ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    70ae:	f04f 0320 	mov.w	r3, #32
    70b2:	f3ef 8611 	mrs	r6, BASEPRI
    70b6:	f383 8812 	msr	BASEPRI_MAX, r3
    70ba:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    70be:	4c1d      	ldr	r4, [pc, #116]	; (7134 <z_impl_k_yield+0x88>)
    70c0:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    70c2:	7b4b      	ldrb	r3, [r1, #13]
    70c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    70c8:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    70ca:	f104 0720 	add.w	r7, r4, #32
    70ce:	4638      	mov	r0, r7
    70d0:	f002 ff39 	bl	9f46 <z_priq_dumb_remove>
	queue_thread(_current);
    70d4:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    70d6:	7b6b      	ldrb	r3, [r5, #13]
    70d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    70dc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    70de:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    70e0:	42bc      	cmp	r4, r7
    70e2:	d108      	bne.n	70f6 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70e4:	2400      	movs	r4, #0
    70e6:	e006      	b.n	70f6 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    70e8:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    70ea:	606b      	str	r3, [r5, #4]
	node->next = successor;
    70ec:	602c      	str	r4, [r5, #0]
	prev->next = node;
    70ee:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    70f0:	6065      	str	r5, [r4, #4]
}
    70f2:	e017      	b.n	7124 <z_impl_k_yield+0x78>
    70f4:	2400      	movs	r4, #0
    70f6:	b16c      	cbz	r4, 7114 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    70f8:	4621      	mov	r1, r4
    70fa:	4628      	mov	r0, r5
    70fc:	f002 fee8 	bl	9ed0 <z_sched_prio_cmp>
    7100:	2800      	cmp	r0, #0
    7102:	dcf1      	bgt.n	70e8 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7104:	2c00      	cmp	r4, #0
    7106:	d0f6      	beq.n	70f6 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    7108:	4b0a      	ldr	r3, [pc, #40]	; (7134 <z_impl_k_yield+0x88>)
    710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    710c:	429c      	cmp	r4, r3
    710e:	d0f1      	beq.n	70f4 <z_impl_k_yield+0x48>
    7110:	6824      	ldr	r4, [r4, #0]
    7112:	e7f0      	b.n	70f6 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    7114:	4b07      	ldr	r3, [pc, #28]	; (7134 <z_impl_k_yield+0x88>)
    7116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    7118:	f103 0120 	add.w	r1, r3, #32
    711c:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    711e:	606a      	str	r2, [r5, #4]
	tail->next = node;
    7120:	6015      	str	r5, [r2, #0]
	list->tail = node;
    7122:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    7124:	2001      	movs	r0, #1
    7126:	f7ff fd7b 	bl	6c20 <update_cache>
    712a:	4630      	mov	r0, r6
    712c:	f7fb fcca 	bl	2ac4 <arch_swap>
}
    7130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7132:	bf00      	nop
    7134:	20000f88 	.word	0x20000f88

00007138 <z_tick_sleep>:
{
    7138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    713c:	ea50 0301 	orrs.w	r3, r0, r1
    7140:	d038      	beq.n	71b4 <z_tick_sleep+0x7c>
    7142:	4604      	mov	r4, r0
    7144:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    7146:	f06f 0301 	mvn.w	r3, #1
    714a:	1a1b      	subs	r3, r3, r0
    714c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7150:	eb62 0201 	sbc.w	r2, r2, r1
    7154:	2b01      	cmp	r3, #1
    7156:	f172 0200 	sbcs.w	r2, r2, #0
    715a:	db2f      	blt.n	71bc <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    715c:	f06f 0501 	mvn.w	r5, #1
    7160:	1a2d      	subs	r5, r5, r0
    7162:	f04f 0320 	mov.w	r3, #32
    7166:	f3ef 8811 	mrs	r8, BASEPRI
    716a:	f383 8812 	msr	BASEPRI_MAX, r3
    716e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    7172:	4f14      	ldr	r7, [pc, #80]	; (71c4 <z_tick_sleep+0x8c>)
    7174:	68b8      	ldr	r0, [r7, #8]
    7176:	4b14      	ldr	r3, [pc, #80]	; (71c8 <z_tick_sleep+0x90>)
    7178:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    717a:	f7ff fe69 	bl	6e50 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    717e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7180:	4622      	mov	r2, r4
    7182:	4633      	mov	r3, r6
    7184:	4911      	ldr	r1, [pc, #68]	; (71cc <z_tick_sleep+0x94>)
    7186:	3018      	adds	r0, #24
    7188:	f000 f8ec 	bl	7364 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    718c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    718e:	7b53      	ldrb	r3, [r2, #13]
    7190:	f043 0310 	orr.w	r3, r3, #16
    7194:	7353      	strb	r3, [r2, #13]
    7196:	4640      	mov	r0, r8
    7198:	f7fb fc94 	bl	2ac4 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    719c:	f003 f842 	bl	a224 <sys_clock_tick_get_32>
    71a0:	1a28      	subs	r0, r5, r0
    71a2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    71a6:	2801      	cmp	r0, #1
    71a8:	f173 0300 	sbcs.w	r3, r3, #0
    71ac:	da00      	bge.n	71b0 <z_tick_sleep+0x78>
	return 0;
    71ae:	2000      	movs	r0, #0
}
    71b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    71b4:	f7ff ff7a 	bl	70ac <z_impl_k_yield>
		return 0;
    71b8:	2000      	movs	r0, #0
    71ba:	e7f9      	b.n	71b0 <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    71bc:	f003 f832 	bl	a224 <sys_clock_tick_get_32>
    71c0:	1905      	adds	r5, r0, r4
    71c2:	e7ce      	b.n	7162 <z_tick_sleep+0x2a>
    71c4:	20000f88 	.word	0x20000f88
    71c8:	20000fb4 	.word	0x20000fb4
    71cc:	00009fb9 	.word	0x00009fb9

000071d0 <z_impl_k_sleep>:
{
    71d0:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    71d2:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    71d6:	bf08      	it	eq
    71d8:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    71dc:	d018      	beq.n	7210 <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    71de:	f7ff ffab 	bl	7138 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    71e2:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    71e4:	0151      	lsls	r1, r2, #5
    71e6:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    71ea:	0143      	lsls	r3, r0, #5
    71ec:	1a1b      	subs	r3, r3, r0
    71ee:	eb61 0102 	sbc.w	r1, r1, r2
    71f2:	0089      	lsls	r1, r1, #2
    71f4:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    71f8:	009b      	lsls	r3, r3, #2
    71fa:	181b      	adds	r3, r3, r0
    71fc:	eb42 0201 	adc.w	r2, r2, r1
    7200:	00d2      	lsls	r2, r2, #3
    7202:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    7206:	f3c3 3310 	ubfx	r3, r3, #12, #17
    720a:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    720e:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    7210:	4b03      	ldr	r3, [pc, #12]	; (7220 <z_impl_k_sleep+0x50>)
    7212:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    7214:	f7ff feb2 	bl	6f7c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    7218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    721c:	e7f7      	b.n	720e <z_impl_k_sleep+0x3e>
    721e:	bf00      	nop
    7220:	20000f88 	.word	0x20000f88

00007224 <z_impl_z_current_get>:
}
    7224:	4b01      	ldr	r3, [pc, #4]	; (722c <z_impl_z_current_get+0x8>)
    7226:	6898      	ldr	r0, [r3, #8]
    7228:	4770      	bx	lr
    722a:	bf00      	nop
    722c:	20000f88 	.word	0x20000f88

00007230 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    7230:	b570      	push	{r4, r5, r6, lr}
    7232:	f04f 0320 	mov.w	r3, #32
    7236:	f3ef 8511 	mrs	r5, BASEPRI
    723a:	f383 8812 	msr	BASEPRI_MAX, r3
    723e:	f3bf 8f6f 	isb	sy
    7242:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    7244:	7b03      	ldrb	r3, [r0, #12]
    7246:	f013 0f01 	tst.w	r3, #1
    724a:	d109      	bne.n	7260 <z_thread_abort+0x30>
    724c:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    724e:	7b43      	ldrb	r3, [r0, #13]
    7250:	f013 0f08 	tst.w	r3, #8
    7254:	d00f      	beq.n	7276 <z_thread_abort+0x46>
	__asm__ volatile(
    7256:	f385 8811 	msr	BASEPRI, r5
    725a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    725e:	e009      	b.n	7274 <z_thread_abort+0x44>
    7260:	f385 8811 	msr	BASEPRI, r5
    7264:	f3bf 8f6f 	isb	sy
		k_panic();
    7268:	4040      	eors	r0, r0
    726a:	f380 8811 	msr	BASEPRI, r0
    726e:	f04f 0004 	mov.w	r0, #4
    7272:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    7274:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    7276:	f7ff fedb 	bl	7030 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    727a:	4b08      	ldr	r3, [pc, #32]	; (729c <z_thread_abort+0x6c>)
    727c:	689b      	ldr	r3, [r3, #8]
    727e:	42a3      	cmp	r3, r4
    7280:	d004      	beq.n	728c <z_thread_abort+0x5c>
    7282:	f386 8811 	msr	BASEPRI, r6
    7286:	f3bf 8f6f 	isb	sy
    728a:	e7f3      	b.n	7274 <z_thread_abort+0x44>
    728c:	f3ef 8305 	mrs	r3, IPSR
    7290:	2b00      	cmp	r3, #0
    7292:	d1f6      	bne.n	7282 <z_thread_abort+0x52>
    7294:	4628      	mov	r0, r5
    7296:	f7fb fc15 	bl	2ac4 <arch_swap>
	return ret;
    729a:	e7f2      	b.n	7282 <z_thread_abort+0x52>
    729c:	20000f88 	.word	0x20000f88

000072a0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    72a0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    72a2:	4806      	ldr	r0, [pc, #24]	; (72bc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    72a4:	4a06      	ldr	r2, [pc, #24]	; (72c0 <z_data_copy+0x20>)
    72a6:	1a12      	subs	r2, r2, r0
    72a8:	4906      	ldr	r1, [pc, #24]	; (72c4 <z_data_copy+0x24>)
    72aa:	f002 fd3e 	bl	9d2a <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    72ae:	4a06      	ldr	r2, [pc, #24]	; (72c8 <z_data_copy+0x28>)
    72b0:	4906      	ldr	r1, [pc, #24]	; (72cc <z_data_copy+0x2c>)
    72b2:	4807      	ldr	r0, [pc, #28]	; (72d0 <z_data_copy+0x30>)
    72b4:	f002 fd39 	bl	9d2a <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    72b8:	bd08      	pop	{r3, pc}
    72ba:	bf00      	nop
    72bc:	20000000 	.word	0x20000000
    72c0:	200001e8 	.word	0x200001e8
    72c4:	0000b424 	.word	0x0000b424
    72c8:	00000000 	.word	0x00000000
    72cc:	0000b424 	.word	0x0000b424
    72d0:	20000000 	.word	0x20000000

000072d4 <first>:
	return list->head == list;
    72d4:	4b03      	ldr	r3, [pc, #12]	; (72e4 <first+0x10>)
    72d6:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    72d8:	4298      	cmp	r0, r3
    72da:	d000      	beq.n	72de <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    72dc:	4770      	bx	lr
    72de:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    72e0:	e7fc      	b.n	72dc <first+0x8>
    72e2:	bf00      	nop
    72e4:	200000d8 	.word	0x200000d8

000072e8 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    72e8:	b130      	cbz	r0, 72f8 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    72ea:	4a04      	ldr	r2, [pc, #16]	; (72fc <next+0x14>)
    72ec:	6852      	ldr	r2, [r2, #4]
    72ee:	4290      	cmp	r0, r2
    72f0:	d001      	beq.n	72f6 <next+0xe>
    72f2:	6800      	ldr	r0, [r0, #0]
    72f4:	4770      	bx	lr
    72f6:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    72f8:	4770      	bx	lr
    72fa:	bf00      	nop
    72fc:	200000d8 	.word	0x200000d8

00007300 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    7300:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7302:	4b04      	ldr	r3, [pc, #16]	; (7314 <elapsed+0x14>)
    7304:	681b      	ldr	r3, [r3, #0]
    7306:	b10b      	cbz	r3, 730c <elapsed+0xc>
    7308:	2000      	movs	r0, #0
}
    730a:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    730c:	f7fd fd0c 	bl	4d28 <sys_clock_elapsed>
    7310:	e7fb      	b.n	730a <elapsed+0xa>
    7312:	bf00      	nop
    7314:	20000fc0 	.word	0x20000fc0

00007318 <next_timeout>:

static int32_t next_timeout(void)
{
    7318:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    731a:	f7ff ffdb 	bl	72d4 <first>
    731e:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    7320:	f7ff ffee 	bl	7300 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    7324:	b17c      	cbz	r4, 7346 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    7326:	6923      	ldr	r3, [r4, #16]
    7328:	6962      	ldr	r2, [r4, #20]
    732a:	1a1b      	subs	r3, r3, r0
    732c:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    7330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    7334:	f172 0100 	sbcs.w	r1, r2, #0
    7338:	da08      	bge.n	734c <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    733a:	2a00      	cmp	r2, #0
    733c:	db01      	blt.n	7342 <next_timeout+0x2a>
    733e:	4618      	mov	r0, r3
    7340:	e006      	b.n	7350 <next_timeout+0x38>
    7342:	2300      	movs	r3, #0
    7344:	e7fb      	b.n	733e <next_timeout+0x26>
		ret = MAX_WAIT;
    7346:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    734a:	e001      	b.n	7350 <next_timeout+0x38>
    734c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7350:	4b03      	ldr	r3, [pc, #12]	; (7360 <next_timeout+0x48>)
    7352:	691b      	ldr	r3, [r3, #16]
    7354:	b113      	cbz	r3, 735c <next_timeout+0x44>
    7356:	4283      	cmp	r3, r0
    7358:	da00      	bge.n	735c <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    735a:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    735c:	bd10      	pop	{r4, pc}
    735e:	bf00      	nop
    7360:	20000f88 	.word	0x20000f88

00007364 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7368:	bf08      	it	eq
    736a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    736e:	d07b      	beq.n	7468 <z_add_timeout+0x104>
{
    7370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7374:	4604      	mov	r4, r0
    7376:	4692      	mov	sl, r2
    7378:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    737a:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    737c:	2300      	movs	r3, #0
	__asm__ volatile(
    737e:	f04f 0220 	mov.w	r2, #32
    7382:	f3ef 8711 	mrs	r7, BASEPRI
    7386:	f382 8812 	msr	BASEPRI_MAX, r2
    738a:	f3bf 8f6f 	isb	sy
    738e:	e026      	b.n	73de <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    7390:	f11a 0801 	adds.w	r8, sl, #1
    7394:	f145 0900 	adc.w	r9, r5, #0
    7398:	f7ff ffb2 	bl	7300 <elapsed>
    739c:	eb18 0300 	adds.w	r3, r8, r0
    73a0:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    73a4:	6123      	str	r3, [r4, #16]
    73a6:	6160      	str	r0, [r4, #20]
    73a8:	e03b      	b.n	7422 <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    73aa:	1a52      	subs	r2, r2, r1
    73ac:	eb66 0303 	sbc.w	r3, r6, r3
    73b0:	6102      	str	r2, [r0, #16]
    73b2:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    73b4:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    73b6:	6063      	str	r3, [r4, #4]
	node->next = successor;
    73b8:	6020      	str	r0, [r4, #0]
	prev->next = node;
    73ba:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    73bc:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    73be:	e005      	b.n	73cc <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    73c0:	4b2a      	ldr	r3, [pc, #168]	; (746c <z_add_timeout+0x108>)
    73c2:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    73c4:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    73c6:	6062      	str	r2, [r4, #4]
	tail->next = node;
    73c8:	6014      	str	r4, [r2, #0]
	list->tail = node;
    73ca:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    73cc:	f7ff ff82 	bl	72d4 <first>
    73d0:	4284      	cmp	r4, r0
    73d2:	d03a      	beq.n	744a <z_add_timeout+0xe6>
	__asm__ volatile(
    73d4:	f387 8811 	msr	BASEPRI, r7
    73d8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    73dc:	2301      	movs	r3, #1
    73de:	2b00      	cmp	r3, #0
    73e0:	d140      	bne.n	7464 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    73e2:	4653      	mov	r3, sl
    73e4:	f06f 0101 	mvn.w	r1, #1
    73e8:	ebb1 010a 	subs.w	r1, r1, sl
    73ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    73f0:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    73f4:	2a00      	cmp	r2, #0
    73f6:	dbcb      	blt.n	7390 <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    73f8:	4a1d      	ldr	r2, [pc, #116]	; (7470 <z_add_timeout+0x10c>)
    73fa:	6811      	ldr	r1, [r2, #0]
    73fc:	6852      	ldr	r2, [r2, #4]
    73fe:	185b      	adds	r3, r3, r1
    7400:	eb42 0205 	adc.w	r2, r2, r5
    7404:	f06f 0101 	mvn.w	r1, #1
    7408:	1ac9      	subs	r1, r1, r3
    740a:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    740e:	4608      	mov	r0, r1
    7410:	461a      	mov	r2, r3
    7412:	2901      	cmp	r1, #1
    7414:	f173 0300 	sbcs.w	r3, r3, #0
    7418:	da01      	bge.n	741e <z_add_timeout+0xba>
    741a:	2001      	movs	r0, #1
    741c:	2200      	movs	r2, #0
    741e:	6120      	str	r0, [r4, #16]
    7420:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    7422:	f7ff ff57 	bl	72d4 <first>
    7426:	2800      	cmp	r0, #0
    7428:	d0ca      	beq.n	73c0 <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    742a:	6902      	ldr	r2, [r0, #16]
    742c:	6946      	ldr	r6, [r0, #20]
    742e:	6921      	ldr	r1, [r4, #16]
    7430:	6963      	ldr	r3, [r4, #20]
    7432:	4291      	cmp	r1, r2
    7434:	eb73 0e06 	sbcs.w	lr, r3, r6
    7438:	dbb7      	blt.n	73aa <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    743a:	1a89      	subs	r1, r1, r2
    743c:	eb63 0306 	sbc.w	r3, r3, r6
    7440:	6121      	str	r1, [r4, #16]
    7442:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    7444:	f7ff ff50 	bl	72e8 <next>
    7448:	e7ed      	b.n	7426 <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    744a:	f7ff ff65 	bl	7318 <next_timeout>

			if (next_time == 0 ||
    744e:	4603      	mov	r3, r0
    7450:	b118      	cbz	r0, 745a <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
    7452:	4a08      	ldr	r2, [pc, #32]	; (7474 <z_add_timeout+0x110>)
    7454:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    7456:	4282      	cmp	r2, r0
    7458:	d0bc      	beq.n	73d4 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
    745a:	2100      	movs	r1, #0
    745c:	4618      	mov	r0, r3
    745e:	f7fd fc31 	bl	4cc4 <sys_clock_set_timeout>
    7462:	e7b7      	b.n	73d4 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7468:	4770      	bx	lr
    746a:	bf00      	nop
    746c:	200000d8 	.word	0x200000d8
    7470:	20000868 	.word	0x20000868
    7474:	20000f88 	.word	0x20000f88

00007478 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    7478:	b570      	push	{r4, r5, r6, lr}
    747a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    747c:	f7ff fc52 	bl	6d24 <z_time_slice>
	__asm__ volatile(
    7480:	f04f 0320 	mov.w	r3, #32
    7484:	f3ef 8611 	mrs	r6, BASEPRI
    7488:	f383 8812 	msr	BASEPRI_MAX, r3
    748c:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    7490:	4b28      	ldr	r3, [pc, #160]	; (7534 <sys_clock_announce+0xbc>)
    7492:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    7494:	e021      	b.n	74da <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    7496:	4a28      	ldr	r2, [pc, #160]	; (7538 <sys_clock_announce+0xc0>)
    7498:	6813      	ldr	r3, [r2, #0]
    749a:	6851      	ldr	r1, [r2, #4]
    749c:	195b      	adds	r3, r3, r5
    749e:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    74a2:	6013      	str	r3, [r2, #0]
    74a4:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    74a6:	2200      	movs	r2, #0
    74a8:	2300      	movs	r3, #0
    74aa:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    74ae:	4620      	mov	r0, r4
    74b0:	f002 fe41 	bl	a136 <remove_timeout>
	__asm__ volatile(
    74b4:	f386 8811 	msr	BASEPRI, r6
    74b8:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    74bc:	68a3      	ldr	r3, [r4, #8]
    74be:	4620      	mov	r0, r4
    74c0:	4798      	blx	r3
	__asm__ volatile(
    74c2:	f04f 0320 	mov.w	r3, #32
    74c6:	f3ef 8611 	mrs	r6, BASEPRI
    74ca:	f383 8812 	msr	BASEPRI_MAX, r3
    74ce:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    74d2:	4a18      	ldr	r2, [pc, #96]	; (7534 <sys_clock_announce+0xbc>)
    74d4:	6813      	ldr	r3, [r2, #0]
    74d6:	1b5b      	subs	r3, r3, r5
    74d8:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    74da:	f7ff fefb 	bl	72d4 <first>
    74de:	4604      	mov	r4, r0
    74e0:	b138      	cbz	r0, 74f2 <sys_clock_announce+0x7a>
    74e2:	6905      	ldr	r5, [r0, #16]
    74e4:	6941      	ldr	r1, [r0, #20]
    74e6:	4b13      	ldr	r3, [pc, #76]	; (7534 <sys_clock_announce+0xbc>)
    74e8:	681a      	ldr	r2, [r3, #0]
    74ea:	17d3      	asrs	r3, r2, #31
    74ec:	42aa      	cmp	r2, r5
    74ee:	418b      	sbcs	r3, r1
    74f0:	dad1      	bge.n	7496 <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
    74f2:	b144      	cbz	r4, 7506 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    74f4:	6923      	ldr	r3, [r4, #16]
    74f6:	6962      	ldr	r2, [r4, #20]
    74f8:	490e      	ldr	r1, [pc, #56]	; (7534 <sys_clock_announce+0xbc>)
    74fa:	6809      	ldr	r1, [r1, #0]
    74fc:	1a5b      	subs	r3, r3, r1
    74fe:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    7502:	6123      	str	r3, [r4, #16]
    7504:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    7506:	4a0c      	ldr	r2, [pc, #48]	; (7538 <sys_clock_announce+0xc0>)
    7508:	4d0a      	ldr	r5, [pc, #40]	; (7534 <sys_clock_announce+0xbc>)
    750a:	6828      	ldr	r0, [r5, #0]
    750c:	6813      	ldr	r3, [r2, #0]
    750e:	6851      	ldr	r1, [r2, #4]
    7510:	181b      	adds	r3, r3, r0
    7512:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    7516:	6013      	str	r3, [r2, #0]
    7518:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    751a:	2400      	movs	r4, #0
    751c:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    751e:	f7ff fefb 	bl	7318 <next_timeout>
    7522:	4621      	mov	r1, r4
    7524:	f7fd fbce 	bl	4cc4 <sys_clock_set_timeout>
	__asm__ volatile(
    7528:	f386 8811 	msr	BASEPRI, r6
    752c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7530:	bd70      	pop	{r4, r5, r6, pc}
    7532:	bf00      	nop
    7534:	20000fc0 	.word	0x20000fc0
    7538:	20000868 	.word	0x20000868

0000753c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    753c:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    753e:	2200      	movs	r2, #0
	__asm__ volatile(
    7540:	f04f 0320 	mov.w	r3, #32
    7544:	f3ef 8411 	mrs	r4, BASEPRI
    7548:	f383 8812 	msr	BASEPRI_MAX, r3
    754c:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    7550:	4613      	mov	r3, r2
    7552:	4611      	mov	r1, r2
    7554:	e00c      	b.n	7570 <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    7556:	f7ff fed3 	bl	7300 <elapsed>
    755a:	4a07      	ldr	r2, [pc, #28]	; (7578 <sys_clock_tick_get+0x3c>)
    755c:	6813      	ldr	r3, [r2, #0]
    755e:	6851      	ldr	r1, [r2, #4]
    7560:	18c3      	adds	r3, r0, r3
    7562:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    7566:	f384 8811 	msr	BASEPRI, r4
    756a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    756e:	2201      	movs	r2, #1
    7570:	2a00      	cmp	r2, #0
    7572:	d0f0      	beq.n	7556 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    7574:	4618      	mov	r0, r3
    7576:	bd10      	pop	{r4, pc}
    7578:	20000868 	.word	0x20000868

0000757c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    757c:	b538      	push	{r3, r4, r5, lr}
    757e:	4604      	mov	r4, r0
	__asm__ volatile(
    7580:	f04f 0320 	mov.w	r3, #32
    7584:	f3ef 8511 	mrs	r5, BASEPRI
    7588:	f383 8812 	msr	BASEPRI_MAX, r3
    758c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    7590:	6a82      	ldr	r2, [r0, #40]	; 0x28
    7592:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    7594:	ea52 0103 	orrs.w	r1, r2, r3
    7598:	d005      	beq.n	75a6 <z_timer_expiration_handler+0x2a>
    759a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    759e:	bf08      	it	eq
    75a0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    75a4:	d128      	bne.n	75f8 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    75a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    75a8:	3301      	adds	r3, #1
    75aa:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    75ac:	6a23      	ldr	r3, [r4, #32]
    75ae:	b173      	cbz	r3, 75ce <z_timer_expiration_handler+0x52>
	__asm__ volatile(
    75b0:	f385 8811 	msr	BASEPRI, r5
    75b4:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    75b8:	6a23      	ldr	r3, [r4, #32]
    75ba:	4620      	mov	r0, r4
    75bc:	4798      	blx	r3
	__asm__ volatile(
    75be:	f04f 0320 	mov.w	r3, #32
    75c2:	f3ef 8511 	mrs	r5, BASEPRI
    75c6:	f383 8812 	msr	BASEPRI_MAX, r3
    75ca:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    75ce:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    75d2:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    75d4:	42a3      	cmp	r3, r4
    75d6:	d038      	beq.n	764a <z_timer_expiration_handler+0xce>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    75d8:	2c00      	cmp	r4, #0
    75da:	d036      	beq.n	764a <z_timer_expiration_handler+0xce>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    75dc:	4620      	mov	r0, r4
    75de:	f002 fc81 	bl	9ee4 <z_unpend_thread_no_timeout>
    75e2:	2300      	movs	r3, #0
    75e4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    75e8:	f385 8811 	msr	BASEPRI, r5
    75ec:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    75f0:	4620      	mov	r0, r4
    75f2:	f002 fcc5 	bl	9f80 <z_ready_thread>
}
    75f6:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_ticks();
    75f8:	f002 fe18 	bl	a22c <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    75fc:	3001      	adds	r0, #1
    75fe:	f141 0100 	adc.w	r1, r1, #0
    7602:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7604:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7606:	18c0      	adds	r0, r0, r3
    7608:	eb41 0102 	adc.w	r1, r1, r2
    760c:	2801      	cmp	r0, #1
    760e:	f171 0100 	sbcs.w	r1, r1, #0
    7612:	da08      	bge.n	7626 <z_timer_expiration_handler+0xaa>
    7614:	f06f 0201 	mvn.w	r2, #1
    7618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    761c:	490d      	ldr	r1, [pc, #52]	; (7654 <z_timer_expiration_handler+0xd8>)
    761e:	4620      	mov	r0, r4
    7620:	f7ff fea0 	bl	7364 <z_add_timeout>
    7624:	e7bf      	b.n	75a6 <z_timer_expiration_handler+0x2a>
    7626:	f002 fe01 	bl	a22c <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    762a:	3001      	adds	r0, #1
    762c:	f141 0300 	adc.w	r3, r1, #0
    7630:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    7632:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    7634:	1880      	adds	r0, r0, r2
    7636:	eb43 0301 	adc.w	r3, r3, r1
    763a:	f06f 0201 	mvn.w	r2, #1
    763e:	1a12      	subs	r2, r2, r0
    7640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    7644:	eb61 0303 	sbc.w	r3, r1, r3
    7648:	e7e8      	b.n	761c <z_timer_expiration_handler+0xa0>
    764a:	f385 8811 	msr	BASEPRI, r5
    764e:	f3bf 8f6f 	isb	sy
		return;
    7652:	e7d0      	b.n	75f6 <z_timer_expiration_handler+0x7a>
    7654:	0000757d 	.word	0x0000757d

00007658 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    7658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    765c:	461e      	mov	r6, r3
    765e:	9f06      	ldr	r7, [sp, #24]
    7660:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    7668:	bf08      	it	eq
    766a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    766e:	d02f      	beq.n	76d0 <z_impl_k_timer_start+0x78>
    7670:	4605      	mov	r5, r0
    7672:	4614      	mov	r4, r2
    7674:	4613      	mov	r3, r2
    7676:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    7678:	4640      	mov	r0, r8
    767a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    767e:	bf08      	it	eq
    7680:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    7684:	d00d      	beq.n	76a2 <z_impl_k_timer_start+0x4a>
    7686:	ea57 0c08 	orrs.w	ip, r7, r8
    768a:	d00a      	beq.n	76a2 <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
    768c:	f06f 0c01 	mvn.w	ip, #1
    7690:	ebbc 0c07 	subs.w	ip, ip, r7
    7694:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    7698:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    769c:	f1bc 0f00 	cmp.w	ip, #0
    76a0:	db18      	blt.n	76d4 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    76a2:	f06f 0201 	mvn.w	r2, #1
    76a6:	1ad2      	subs	r2, r2, r3
    76a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    76ac:	eb62 0201 	sbc.w	r2, r2, r1
    76b0:	2a00      	cmp	r2, #0
    76b2:	db1a      	blt.n	76ea <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    76b4:	4628      	mov	r0, r5
    76b6:	f002 fd55 	bl	a164 <z_abort_timeout>
	timer->period = period;
    76ba:	62af      	str	r7, [r5, #40]	; 0x28
    76bc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    76c0:	2300      	movs	r3, #0
    76c2:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    76c4:	4622      	mov	r2, r4
    76c6:	4633      	mov	r3, r6
    76c8:	490e      	ldr	r1, [pc, #56]	; (7704 <z_impl_k_timer_start+0xac>)
    76ca:	4628      	mov	r0, r5
    76cc:	f7ff fe4a 	bl	7364 <z_add_timeout>
		     duration);
}
    76d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    76d4:	2f02      	cmp	r7, #2
    76d6:	f170 0000 	sbcs.w	r0, r0, #0
    76da:	da02      	bge.n	76e2 <z_impl_k_timer_start+0x8a>
    76dc:	2702      	movs	r7, #2
    76de:	f04f 0800 	mov.w	r8, #0
    76e2:	3f01      	subs	r7, #1
    76e4:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    76e8:	e7db      	b.n	76a2 <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
    76ea:	461c      	mov	r4, r3
    76ec:	460e      	mov	r6, r1
    76ee:	2b01      	cmp	r3, #1
    76f0:	f171 0100 	sbcs.w	r1, r1, #0
    76f4:	da01      	bge.n	76fa <z_impl_k_timer_start+0xa2>
    76f6:	2401      	movs	r4, #1
    76f8:	2600      	movs	r6, #0
    76fa:	3c01      	subs	r4, #1
    76fc:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    7700:	e7d8      	b.n	76b4 <z_impl_k_timer_start+0x5c>
    7702:	bf00      	nop
    7704:	0000757d 	.word	0x0000757d

00007708 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    7708:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    770a:	4802      	ldr	r0, [pc, #8]	; (7714 <boot_banner+0xc>)
    770c:	f000 faa8 	bl	7c60 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    7710:	bd08      	pop	{r3, pc}
    7712:	bf00      	nop
    7714:	0000b368 	.word	0x0000b368

00007718 <nrf_cc3xx_platform_init_no_rng>:
    7718:	b510      	push	{r4, lr}
    771a:	4c0a      	ldr	r4, [pc, #40]	; (7744 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    771c:	6823      	ldr	r3, [r4, #0]
    771e:	b11b      	cbz	r3, 7728 <nrf_cc3xx_platform_init_no_rng+0x10>
    7720:	2301      	movs	r3, #1
    7722:	2000      	movs	r0, #0
    7724:	6023      	str	r3, [r4, #0]
    7726:	bd10      	pop	{r4, pc}
    7728:	f000 f8f4 	bl	7914 <CC_LibInitNoRng>
    772c:	2800      	cmp	r0, #0
    772e:	d0f7      	beq.n	7720 <nrf_cc3xx_platform_init_no_rng+0x8>
    7730:	3801      	subs	r0, #1
    7732:	2807      	cmp	r0, #7
    7734:	d803      	bhi.n	773e <nrf_cc3xx_platform_init_no_rng+0x26>
    7736:	4b04      	ldr	r3, [pc, #16]	; (7748 <nrf_cc3xx_platform_init_no_rng+0x30>)
    7738:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    773c:	bd10      	pop	{r4, pc}
    773e:	4803      	ldr	r0, [pc, #12]	; (774c <nrf_cc3xx_platform_init_no_rng+0x34>)
    7740:	bd10      	pop	{r4, pc}
    7742:	bf00      	nop
    7744:	20000fc4 	.word	0x20000fc4
    7748:	0000b398 	.word	0x0000b398
    774c:	ffff8ffe 	.word	0xffff8ffe

00007750 <nrf_cc3xx_platform_abort>:
    7750:	f3bf 8f4f 	dsb	sy
    7754:	4905      	ldr	r1, [pc, #20]	; (776c <nrf_cc3xx_platform_abort+0x1c>)
    7756:	4b06      	ldr	r3, [pc, #24]	; (7770 <nrf_cc3xx_platform_abort+0x20>)
    7758:	68ca      	ldr	r2, [r1, #12]
    775a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    775e:	4313      	orrs	r3, r2
    7760:	60cb      	str	r3, [r1, #12]
    7762:	f3bf 8f4f 	dsb	sy
    7766:	bf00      	nop
    7768:	e7fd      	b.n	7766 <nrf_cc3xx_platform_abort+0x16>
    776a:	bf00      	nop
    776c:	e000ed00 	.word	0xe000ed00
    7770:	05fa0004 	.word	0x05fa0004

00007774 <CC_PalAbort>:
    7774:	b430      	push	{r4, r5}
    7776:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    777a:	2500      	movs	r5, #0
    777c:	4b0b      	ldr	r3, [pc, #44]	; (77ac <CC_PalAbort+0x38>)
    777e:	4c0c      	ldr	r4, [pc, #48]	; (77b0 <CC_PalAbort+0x3c>)
    7780:	490c      	ldr	r1, [pc, #48]	; (77b4 <CC_PalAbort+0x40>)
    7782:	6849      	ldr	r1, [r1, #4]
    7784:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    7788:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    778c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    7790:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    7794:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    7798:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    779c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    77a0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    77a4:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    77a8:	bc30      	pop	{r4, r5}
    77aa:	4708      	bx	r1
    77ac:	50845000 	.word	0x50845000
    77b0:	50844000 	.word	0x50844000
    77b4:	200000e0 	.word	0x200000e0

000077b8 <nrf_cc3xx_platform_set_abort>:
    77b8:	4b02      	ldr	r3, [pc, #8]	; (77c4 <nrf_cc3xx_platform_set_abort+0xc>)
    77ba:	e9d0 1200 	ldrd	r1, r2, [r0]
    77be:	e9c3 1200 	strd	r1, r2, [r3]
    77c2:	4770      	bx	lr
    77c4:	200000e0 	.word	0x200000e0

000077c8 <mutex_free>:
    77c8:	b510      	push	{r4, lr}
    77ca:	4604      	mov	r4, r0
    77cc:	b150      	cbz	r0, 77e4 <mutex_free+0x1c>
    77ce:	6863      	ldr	r3, [r4, #4]
    77d0:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    77d4:	d005      	beq.n	77e2 <mutex_free+0x1a>
    77d6:	4a06      	ldr	r2, [pc, #24]	; (77f0 <mutex_free+0x28>)
    77d8:	4293      	cmp	r3, r2
    77da:	d002      	beq.n	77e2 <mutex_free+0x1a>
    77dc:	2300      	movs	r3, #0
    77de:	6062      	str	r2, [r4, #4]
    77e0:	6023      	str	r3, [r4, #0]
    77e2:	bd10      	pop	{r4, pc}
    77e4:	4b03      	ldr	r3, [pc, #12]	; (77f4 <mutex_free+0x2c>)
    77e6:	4804      	ldr	r0, [pc, #16]	; (77f8 <mutex_free+0x30>)
    77e8:	685b      	ldr	r3, [r3, #4]
    77ea:	4798      	blx	r3
    77ec:	e7ef      	b.n	77ce <mutex_free+0x6>
    77ee:	bf00      	nop
    77f0:	a95c5f2c 	.word	0xa95c5f2c
    77f4:	200000e0 	.word	0x200000e0
    77f8:	0000b3b8 	.word	0x0000b3b8

000077fc <mutex_lock>:
    77fc:	b1c8      	cbz	r0, 7832 <mutex_lock+0x36>
    77fe:	6843      	ldr	r3, [r0, #4]
    7800:	4a0d      	ldr	r2, [pc, #52]	; (7838 <mutex_lock+0x3c>)
    7802:	4293      	cmp	r3, r2
    7804:	d013      	beq.n	782e <mutex_lock+0x32>
    7806:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    780a:	d00e      	beq.n	782a <mutex_lock+0x2e>
    780c:	2301      	movs	r3, #1
    780e:	e850 2f00 	ldrex	r2, [r0]
    7812:	4619      	mov	r1, r3
    7814:	e840 1c00 	strex	ip, r1, [r0]
    7818:	f09c 0f00 	teq	ip, #0
    781c:	d1f7      	bne.n	780e <mutex_lock+0x12>
    781e:	2a01      	cmp	r2, #1
    7820:	d0f5      	beq.n	780e <mutex_lock+0x12>
    7822:	f3bf 8f5f 	dmb	sy
    7826:	2000      	movs	r0, #0
    7828:	4770      	bx	lr
    782a:	4804      	ldr	r0, [pc, #16]	; (783c <mutex_lock+0x40>)
    782c:	4770      	bx	lr
    782e:	4804      	ldr	r0, [pc, #16]	; (7840 <mutex_lock+0x44>)
    7830:	4770      	bx	lr
    7832:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    7836:	4770      	bx	lr
    7838:	a95c5f2c 	.word	0xa95c5f2c
    783c:	ffff8fe9 	.word	0xffff8fe9
    7840:	ffff8fea 	.word	0xffff8fea

00007844 <mutex_unlock>:
    7844:	4603      	mov	r3, r0
    7846:	b180      	cbz	r0, 786a <mutex_unlock+0x26>
    7848:	6842      	ldr	r2, [r0, #4]
    784a:	4909      	ldr	r1, [pc, #36]	; (7870 <mutex_unlock+0x2c>)
    784c:	428a      	cmp	r2, r1
    784e:	d00a      	beq.n	7866 <mutex_unlock+0x22>
    7850:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    7854:	d005      	beq.n	7862 <mutex_unlock+0x1e>
    7856:	f3bf 8f5f 	dmb	sy
    785a:	2200      	movs	r2, #0
    785c:	4610      	mov	r0, r2
    785e:	601a      	str	r2, [r3, #0]
    7860:	4770      	bx	lr
    7862:	4804      	ldr	r0, [pc, #16]	; (7874 <mutex_unlock+0x30>)
    7864:	4770      	bx	lr
    7866:	4804      	ldr	r0, [pc, #16]	; (7878 <mutex_unlock+0x34>)
    7868:	4770      	bx	lr
    786a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    786e:	4770      	bx	lr
    7870:	a95c5f2c 	.word	0xa95c5f2c
    7874:	ffff8fe9 	.word	0xffff8fe9
    7878:	ffff8fea 	.word	0xffff8fea

0000787c <mutex_init>:
    787c:	b510      	push	{r4, lr}
    787e:	4604      	mov	r4, r0
    7880:	b120      	cbz	r0, 788c <mutex_init+0x10>
    7882:	2300      	movs	r3, #0
    7884:	4a03      	ldr	r2, [pc, #12]	; (7894 <mutex_init+0x18>)
    7886:	6023      	str	r3, [r4, #0]
    7888:	6062      	str	r2, [r4, #4]
    788a:	bd10      	pop	{r4, pc}
    788c:	4802      	ldr	r0, [pc, #8]	; (7898 <mutex_init+0x1c>)
    788e:	f7ff ff71 	bl	7774 <CC_PalAbort>
    7892:	e7f6      	b.n	7882 <mutex_init+0x6>
    7894:	3a00003a 	.word	0x3a00003a
    7898:	0000b3e0 	.word	0x0000b3e0

0000789c <nrf_cc3xx_platform_set_mutexes>:
    789c:	b570      	push	{r4, r5, r6, lr}
    789e:	4c19      	ldr	r4, [pc, #100]	; (7904 <nrf_cc3xx_platform_set_mutexes+0x68>)
    78a0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    78a4:	6806      	ldr	r6, [r0, #0]
    78a6:	f8c4 c004 	str.w	ip, [r4, #4]
    78aa:	f8d0 c008 	ldr.w	ip, [r0, #8]
    78ae:	68c0      	ldr	r0, [r0, #12]
    78b0:	f8c4 c008 	str.w	ip, [r4, #8]
    78b4:	60e0      	str	r0, [r4, #12]
    78b6:	6026      	str	r6, [r4, #0]
    78b8:	6808      	ldr	r0, [r1, #0]
    78ba:	4b13      	ldr	r3, [pc, #76]	; (7908 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    78bc:	4d13      	ldr	r5, [pc, #76]	; (790c <nrf_cc3xx_platform_set_mutexes+0x70>)
    78be:	6018      	str	r0, [r3, #0]
    78c0:	6848      	ldr	r0, [r1, #4]
    78c2:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    78c6:	6058      	str	r0, [r3, #4]
    78c8:	6888      	ldr	r0, [r1, #8]
    78ca:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    78ce:	6098      	str	r0, [r3, #8]
    78d0:	68c8      	ldr	r0, [r1, #12]
    78d2:	6909      	ldr	r1, [r1, #16]
    78d4:	60d8      	str	r0, [r3, #12]
    78d6:	6119      	str	r1, [r3, #16]
    78d8:	d012      	beq.n	7900 <nrf_cc3xx_platform_set_mutexes+0x64>
    78da:	2300      	movs	r3, #0
    78dc:	4a0c      	ldr	r2, [pc, #48]	; (7910 <nrf_cc3xx_platform_set_mutexes+0x74>)
    78de:	f505 708a 	add.w	r0, r5, #276	; 0x114
    78e2:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    78e6:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    78ea:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    78ee:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    78f2:	47b0      	blx	r6
    78f4:	6823      	ldr	r3, [r4, #0]
    78f6:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    78fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    78fe:	4718      	bx	r3
    7900:	bd70      	pop	{r4, r5, r6, pc}
    7902:	bf00      	nop
    7904:	200000f0 	.word	0x200000f0
    7908:	20000100 	.word	0x20000100
    790c:	20000fdc 	.word	0x20000fdc
    7910:	a95c5f2c 	.word	0xa95c5f2c

00007914 <CC_LibInitNoRng>:
    7914:	b508      	push	{r3, lr}
    7916:	f000 f811 	bl	793c <CC_HalInit>
    791a:	b930      	cbnz	r0, 792a <CC_LibInitNoRng+0x16>
    791c:	f000 f810 	bl	7940 <CC_PalInit>
    7920:	b938      	cbnz	r0, 7932 <CC_LibInitNoRng+0x1e>
    7922:	4a05      	ldr	r2, [pc, #20]	; (7938 <CC_LibInitNoRng+0x24>)
    7924:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    7928:	bd08      	pop	{r3, pc}
    792a:	f000 f837 	bl	799c <CC_PalTerminate>
    792e:	2003      	movs	r0, #3
    7930:	bd08      	pop	{r3, pc}
    7932:	2004      	movs	r0, #4
    7934:	bd08      	pop	{r3, pc}
    7936:	bf00      	nop
    7938:	50845000 	.word	0x50845000

0000793c <CC_HalInit>:
    793c:	2000      	movs	r0, #0
    793e:	4770      	bx	lr

00007940 <CC_PalInit>:
    7940:	b510      	push	{r4, lr}
    7942:	4811      	ldr	r0, [pc, #68]	; (7988 <CC_PalInit+0x48>)
    7944:	f000 f848 	bl	79d8 <CC_PalMutexCreate>
    7948:	b100      	cbz	r0, 794c <CC_PalInit+0xc>
    794a:	bd10      	pop	{r4, pc}
    794c:	480f      	ldr	r0, [pc, #60]	; (798c <CC_PalInit+0x4c>)
    794e:	f000 f843 	bl	79d8 <CC_PalMutexCreate>
    7952:	2800      	cmp	r0, #0
    7954:	d1f9      	bne.n	794a <CC_PalInit+0xa>
    7956:	4c0e      	ldr	r4, [pc, #56]	; (7990 <CC_PalInit+0x50>)
    7958:	4620      	mov	r0, r4
    795a:	f000 f83d 	bl	79d8 <CC_PalMutexCreate>
    795e:	2800      	cmp	r0, #0
    7960:	d1f3      	bne.n	794a <CC_PalInit+0xa>
    7962:	4b0c      	ldr	r3, [pc, #48]	; (7994 <CC_PalInit+0x54>)
    7964:	480c      	ldr	r0, [pc, #48]	; (7998 <CC_PalInit+0x58>)
    7966:	601c      	str	r4, [r3, #0]
    7968:	f000 f836 	bl	79d8 <CC_PalMutexCreate>
    796c:	4601      	mov	r1, r0
    796e:	2800      	cmp	r0, #0
    7970:	d1eb      	bne.n	794a <CC_PalInit+0xa>
    7972:	f000 f82d 	bl	79d0 <CC_PalDmaInit>
    7976:	4604      	mov	r4, r0
    7978:	b108      	cbz	r0, 797e <CC_PalInit+0x3e>
    797a:	4620      	mov	r0, r4
    797c:	bd10      	pop	{r4, pc}
    797e:	f000 f83f 	bl	7a00 <CC_PalPowerSaveModeInit>
    7982:	4620      	mov	r0, r4
    7984:	e7fa      	b.n	797c <CC_PalInit+0x3c>
    7986:	bf00      	nop
    7988:	20000138 	.word	0x20000138
    798c:	2000012c 	.word	0x2000012c
    7990:	20000134 	.word	0x20000134
    7994:	2000013c 	.word	0x2000013c
    7998:	20000130 	.word	0x20000130

0000799c <CC_PalTerminate>:
    799c:	b508      	push	{r3, lr}
    799e:	4808      	ldr	r0, [pc, #32]	; (79c0 <CC_PalTerminate+0x24>)
    79a0:	f000 f824 	bl	79ec <CC_PalMutexDestroy>
    79a4:	4807      	ldr	r0, [pc, #28]	; (79c4 <CC_PalTerminate+0x28>)
    79a6:	f000 f821 	bl	79ec <CC_PalMutexDestroy>
    79aa:	4807      	ldr	r0, [pc, #28]	; (79c8 <CC_PalTerminate+0x2c>)
    79ac:	f000 f81e 	bl	79ec <CC_PalMutexDestroy>
    79b0:	4806      	ldr	r0, [pc, #24]	; (79cc <CC_PalTerminate+0x30>)
    79b2:	f000 f81b 	bl	79ec <CC_PalMutexDestroy>
    79b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    79ba:	f000 b80b 	b.w	79d4 <CC_PalDmaTerminate>
    79be:	bf00      	nop
    79c0:	20000138 	.word	0x20000138
    79c4:	2000012c 	.word	0x2000012c
    79c8:	20000134 	.word	0x20000134
    79cc:	20000130 	.word	0x20000130

000079d0 <CC_PalDmaInit>:
    79d0:	2000      	movs	r0, #0
    79d2:	4770      	bx	lr

000079d4 <CC_PalDmaTerminate>:
    79d4:	4770      	bx	lr
    79d6:	bf00      	nop

000079d8 <CC_PalMutexCreate>:
    79d8:	b508      	push	{r3, lr}
    79da:	4b03      	ldr	r3, [pc, #12]	; (79e8 <CC_PalMutexCreate+0x10>)
    79dc:	6802      	ldr	r2, [r0, #0]
    79de:	681b      	ldr	r3, [r3, #0]
    79e0:	6810      	ldr	r0, [r2, #0]
    79e2:	4798      	blx	r3
    79e4:	2000      	movs	r0, #0
    79e6:	bd08      	pop	{r3, pc}
    79e8:	200000f0 	.word	0x200000f0

000079ec <CC_PalMutexDestroy>:
    79ec:	b508      	push	{r3, lr}
    79ee:	4b03      	ldr	r3, [pc, #12]	; (79fc <CC_PalMutexDestroy+0x10>)
    79f0:	6802      	ldr	r2, [r0, #0]
    79f2:	685b      	ldr	r3, [r3, #4]
    79f4:	6810      	ldr	r0, [r2, #0]
    79f6:	4798      	blx	r3
    79f8:	2000      	movs	r0, #0
    79fa:	bd08      	pop	{r3, pc}
    79fc:	200000f0 	.word	0x200000f0

00007a00 <CC_PalPowerSaveModeInit>:
    7a00:	b570      	push	{r4, r5, r6, lr}
    7a02:	4c09      	ldr	r4, [pc, #36]	; (7a28 <CC_PalPowerSaveModeInit+0x28>)
    7a04:	4d09      	ldr	r5, [pc, #36]	; (7a2c <CC_PalPowerSaveModeInit+0x2c>)
    7a06:	6920      	ldr	r0, [r4, #16]
    7a08:	68ab      	ldr	r3, [r5, #8]
    7a0a:	4798      	blx	r3
    7a0c:	b118      	cbz	r0, 7a16 <CC_PalPowerSaveModeInit+0x16>
    7a0e:	4b08      	ldr	r3, [pc, #32]	; (7a30 <CC_PalPowerSaveModeInit+0x30>)
    7a10:	4808      	ldr	r0, [pc, #32]	; (7a34 <CC_PalPowerSaveModeInit+0x34>)
    7a12:	685b      	ldr	r3, [r3, #4]
    7a14:	4798      	blx	r3
    7a16:	2100      	movs	r1, #0
    7a18:	4a07      	ldr	r2, [pc, #28]	; (7a38 <CC_PalPowerSaveModeInit+0x38>)
    7a1a:	68eb      	ldr	r3, [r5, #12]
    7a1c:	6011      	str	r1, [r2, #0]
    7a1e:	6920      	ldr	r0, [r4, #16]
    7a20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a24:	4718      	bx	r3
    7a26:	bf00      	nop
    7a28:	20000100 	.word	0x20000100
    7a2c:	200000f0 	.word	0x200000f0
    7a30:	200000e0 	.word	0x200000e0
    7a34:	0000b404 	.word	0x0000b404
    7a38:	20000fd8 	.word	0x20000fd8

00007a3c <z_impl_gpio_pin_interrupt_configure>:
{
    7a3c:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
    7a3e:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
    7a40:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    7a42:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    7a46:	d006      	beq.n	7a56 <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    7a48:	6825      	ldr	r5, [r4, #0]
    7a4a:	2401      	movs	r4, #1
    7a4c:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    7a4e:	4225      	tst	r5, r4
    7a50:	d001      	beq.n	7a56 <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    7a52:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    7a56:	699c      	ldr	r4, [r3, #24]
    7a58:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    7a5c:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
    7a60:	47a0      	blx	r4
}
    7a62:	bd38      	pop	{r3, r4, r5, pc}

00007a64 <z_impl_gpio_pin_configure>:
{
    7a64:	b538      	push	{r3, r4, r5, lr}
    7a66:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    7a68:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    7a6a:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    7a6c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    7a70:	d007      	beq.n	7a82 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    7a72:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    7a76:	d004      	beq.n	7a82 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    7a78:	f012 0f01 	tst.w	r2, #1
    7a7c:	d001      	beq.n	7a82 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    7a7e:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    7a82:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    7a86:	f013 0f01 	tst.w	r3, #1
    7a8a:	d00a      	beq.n	7aa2 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    7a8c:	6823      	ldr	r3, [r4, #0]
    7a8e:	f04f 0c01 	mov.w	ip, #1
    7a92:	fa0c fc01 	lsl.w	ip, ip, r1
    7a96:	ea43 030c 	orr.w	r3, r3, ip
    7a9a:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    7a9c:	682b      	ldr	r3, [r5, #0]
    7a9e:	4798      	blx	r3
}
    7aa0:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    7aa2:	6823      	ldr	r3, [r4, #0]
    7aa4:	f04f 0c01 	mov.w	ip, #1
    7aa8:	fa0c fc01 	lsl.w	ip, ip, r1
    7aac:	ea23 030c 	bic.w	r3, r3, ip
    7ab0:	6023      	str	r3, [r4, #0]
    7ab2:	e7f3      	b.n	7a9c <z_impl_gpio_pin_configure+0x38>

00007ab4 <gpio_pin_configure_dt>:
{
    7ab4:	b508      	push	{r3, lr}
    7ab6:	4603      	mov	r3, r0
    7ab8:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    7aba:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    7abc:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    7abe:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    7ac0:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    7ac4:	f7ff ffce 	bl	7a64 <z_impl_gpio_pin_configure>
}
    7ac8:	bd08      	pop	{r3, pc}

00007aca <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
    7aca:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
    7acc:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    7ace:	69db      	ldr	r3, [r3, #28]
    7ad0:	b113      	cbz	r3, 7ad8 <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    7ad2:	2201      	movs	r2, #1
    7ad4:	4798      	blx	r3
}
    7ad6:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
    7ad8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7adc:	e7fb      	b.n	7ad6 <gpio_add_callback+0xc>

00007ade <k_msleep>:
{
    7ade:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    7ae0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    7ae4:	17c1      	asrs	r1, r0, #31
    7ae6:	03c9      	lsls	r1, r1, #15
    7ae8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    7aec:	03c0      	lsls	r0, r0, #15
    7aee:	f240 33e7 	movw	r3, #999	; 0x3e7
    7af2:	18c0      	adds	r0, r0, r3
    7af4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7af8:	f04f 0300 	mov.w	r3, #0
    7afc:	f141 0100 	adc.w	r1, r1, #0
    7b00:	f7f8 fb28 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    7b04:	f7ff fb64 	bl	71d0 <z_impl_k_sleep>
}
    7b08:	bd08      	pop	{r3, pc}

00007b0a <cbprintf_via_va_list>:
{
    7b0a:	b510      	push	{r4, lr}
    7b0c:	460c      	mov	r4, r1
    7b0e:	4611      	mov	r1, r2
    7b10:	461a      	mov	r2, r3
	return formatter(out, ctx, fmt, u.ap);
    7b12:	9b02      	ldr	r3, [sp, #8]
    7b14:	47a0      	blx	r4
}
    7b16:	bd10      	pop	{r4, pc}

00007b18 <is_fmt_spec>:
	return (c >= 64) && (c <= 122);
    7b18:	3840      	subs	r0, #64	; 0x40
    7b1a:	b2c0      	uxtb	r0, r0
}
    7b1c:	283a      	cmp	r0, #58	; 0x3a
    7b1e:	bf8c      	ite	hi
    7b20:	2000      	movhi	r0, #0
    7b22:	2001      	movls	r0, #1
    7b24:	4770      	bx	lr

00007b26 <get_package_len>:
{
    7b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b28:	4606      	mov	r6, r0
	args_size = buf[0] * sizeof(int);
    7b2a:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    7b2c:	7845      	ldrb	r5, [r0, #1]
	ros_nbr   = buf[2];
    7b2e:	7884      	ldrb	r4, [r0, #2]
	buf += ros_nbr;
    7b30:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    7b34:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
    7b36:	2700      	movs	r7, #0
    7b38:	e006      	b.n	7b48 <get_package_len+0x22>
		buf++;
    7b3a:	3401      	adds	r4, #1
		buf += strlen((const char *)buf) + 1;
    7b3c:	4620      	mov	r0, r4
    7b3e:	f001 f977 	bl	8e30 <strlen>
    7b42:	3001      	adds	r0, #1
    7b44:	4404      	add	r4, r0
	for (int i = 0; i < s_nbr; i++) {
    7b46:	3701      	adds	r7, #1
    7b48:	42af      	cmp	r7, r5
    7b4a:	d3f6      	bcc.n	7b3a <get_package_len+0x14>
}
    7b4c:	1ba0      	subs	r0, r4, r6
    7b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007b50 <append_string>:
{
    7b50:	b570      	push	{r4, r5, r6, lr}
    7b52:	4614      	mov	r4, r2
	if (cb == NULL) {
    7b54:	b138      	cbz	r0, 7b66 <append_string+0x16>
    7b56:	460d      	mov	r5, r1
    7b58:	4619      	mov	r1, r3
    7b5a:	4606      	mov	r6, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    7b5c:	b143      	cbz	r3, 7b70 <append_string+0x20>
	return cb(str, strl, ctx);
    7b5e:	462a      	mov	r2, r5
    7b60:	4620      	mov	r0, r4
    7b62:	47b0      	blx	r6
}
    7b64:	bd70      	pop	{r4, r5, r6, pc}
		return 1 + strlen(str);
    7b66:	4610      	mov	r0, r2
    7b68:	f001 f962 	bl	8e30 <strlen>
    7b6c:	3001      	adds	r0, #1
    7b6e:	e7f9      	b.n	7b64 <append_string+0x14>
	strl = strl > 0 ? strl : strlen(str) + 1;
    7b70:	4610      	mov	r0, r2
    7b72:	f001 f95d 	bl	8e30 <strlen>
    7b76:	b283      	uxth	r3, r0
    7b78:	3301      	adds	r3, #1
    7b7a:	b299      	uxth	r1, r3
    7b7c:	e7ef      	b.n	7b5e <append_string+0xe>

00007b7e <cbpprintf_external>:
	if (buf == NULL) {
    7b7e:	b35b      	cbz	r3, 7bd8 <cbpprintf_external+0x5a>
{
    7b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7b84:	b082      	sub	sp, #8
    7b86:	4607      	mov	r7, r0
    7b88:	4688      	mov	r8, r1
    7b8a:	4691      	mov	r9, r2
    7b8c:	461d      	mov	r5, r3
	args_size = hdr->hdr.desc.len * sizeof(int);
    7b8e:	781a      	ldrb	r2, [r3, #0]
	s_nbr     = hdr->hdr.desc.str_cnt;
    7b90:	785e      	ldrb	r6, [r3, #1]
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    7b92:	789c      	ldrb	r4, [r3, #2]
	rws_nbr   = hdr->hdr.desc.rw_str_cnt;
    7b94:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    7b96:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    7b9a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
    7b9e:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    7ba0:	f04f 0a00 	mov.w	sl, #0
    7ba4:	e00a      	b.n	7bbc <cbpprintf_external+0x3e>
		s_idx = *(uint8_t *)s++;
    7ba6:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    7baa:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    7bae:	4620      	mov	r0, r4
    7bb0:	f001 f93e 	bl	8e30 <strlen>
    7bb4:	3001      	adds	r0, #1
    7bb6:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    7bb8:	f10a 0a01 	add.w	sl, sl, #1
    7bbc:	45b2      	cmp	sl, r6
    7bbe:	d3f2      	bcc.n	7ba6 <cbpprintf_external+0x28>
	buf += sizeof(*hdr);
    7bc0:	f105 0308 	add.w	r3, r5, #8
	return cbprintf_via_va_list(out, formatter, ctx, hdr->fmt, buf);
    7bc4:	9300      	str	r3, [sp, #0]
    7bc6:	686b      	ldr	r3, [r5, #4]
    7bc8:	464a      	mov	r2, r9
    7bca:	4641      	mov	r1, r8
    7bcc:	4638      	mov	r0, r7
    7bce:	f7ff ff9c 	bl	7b0a <cbprintf_via_va_list>
}
    7bd2:	b002      	add	sp, #8
    7bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EINVAL;
    7bd8:	f06f 0015 	mvn.w	r0, #21
}
    7bdc:	4770      	bx	lr

00007bde <is_ptr>:
{
    7bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7be2:	4604      	mov	r4, r0
    7be4:	4688      	mov	r8, r1
	int cnt = 0;
    7be6:	2700      	movs	r7, #0
	bool mod = false;
    7be8:	463e      	mov	r6, r7
	while ((c = *fmt++) != '\0') {
    7bea:	e007      	b.n	7bfc <is_ptr+0x1e>
				if (c == 'p') {
    7bec:	2d70      	cmp	r5, #112	; 0x70
    7bee:	d018      	beq.n	7c22 <is_ptr+0x44>
				} else if (is_fmt_spec(c)) {
    7bf0:	4628      	mov	r0, r5
    7bf2:	f7ff ff91 	bl	7b18 <is_fmt_spec>
    7bf6:	b9b8      	cbnz	r0, 7c28 <is_ptr+0x4a>
		if (c == '%') {
    7bf8:	2d25      	cmp	r5, #37	; 0x25
    7bfa:	d00e      	beq.n	7c1a <is_ptr+0x3c>
	while ((c = *fmt++) != '\0') {
    7bfc:	f814 5b01 	ldrb.w	r5, [r4], #1
    7c00:	b175      	cbz	r5, 7c20 <is_ptr+0x42>
		if (mod) {
    7c02:	2e00      	cmp	r6, #0
    7c04:	d0f8      	beq.n	7bf8 <is_ptr+0x1a>
			if (cnt == n) {
    7c06:	4547      	cmp	r7, r8
    7c08:	d0f0      	beq.n	7bec <is_ptr+0xe>
			} else if (is_fmt_spec(c)) {
    7c0a:	4628      	mov	r0, r5
    7c0c:	f7ff ff84 	bl	7b18 <is_fmt_spec>
    7c10:	2800      	cmp	r0, #0
    7c12:	d0f1      	beq.n	7bf8 <is_ptr+0x1a>
				cnt++;
    7c14:	3701      	adds	r7, #1
				mod = false;
    7c16:	2600      	movs	r6, #0
    7c18:	e7ee      	b.n	7bf8 <is_ptr+0x1a>
			mod = !mod;
    7c1a:	f086 0601 	eor.w	r6, r6, #1
    7c1e:	e7ed      	b.n	7bfc <is_ptr+0x1e>
	return false;
    7c20:	2600      	movs	r6, #0
}
    7c22:	4630      	mov	r0, r6
    7c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					return false;
    7c28:	2600      	movs	r6, #0
    7c2a:	e7fa      	b.n	7c22 <is_ptr+0x44>

00007c2c <arch_printk_char_out>:
}
    7c2c:	2000      	movs	r0, #0
    7c2e:	4770      	bx	lr

00007c30 <str_out>:
{
    7c30:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    7c32:	680c      	ldr	r4, [r1, #0]
    7c34:	b154      	cbz	r4, 7c4c <str_out+0x1c>
    7c36:	688a      	ldr	r2, [r1, #8]
    7c38:	684b      	ldr	r3, [r1, #4]
    7c3a:	429a      	cmp	r2, r3
    7c3c:	da06      	bge.n	7c4c <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    7c3e:	3b01      	subs	r3, #1
    7c40:	429a      	cmp	r2, r3
    7c42:	d008      	beq.n	7c56 <str_out+0x26>
		ctx->str[ctx->count++] = c;
    7c44:	1c53      	adds	r3, r2, #1
    7c46:	608b      	str	r3, [r1, #8]
    7c48:	54a0      	strb	r0, [r4, r2]
    7c4a:	e002      	b.n	7c52 <str_out+0x22>
		ctx->count++;
    7c4c:	688b      	ldr	r3, [r1, #8]
    7c4e:	3301      	adds	r3, #1
    7c50:	608b      	str	r3, [r1, #8]
}
    7c52:	bc10      	pop	{r4}
    7c54:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    7c56:	1c53      	adds	r3, r2, #1
    7c58:	608b      	str	r3, [r1, #8]
    7c5a:	2300      	movs	r3, #0
    7c5c:	54a3      	strb	r3, [r4, r2]
    7c5e:	e7f8      	b.n	7c52 <str_out+0x22>

00007c60 <printk>:
{
    7c60:	b40f      	push	{r0, r1, r2, r3}
    7c62:	b500      	push	{lr}
    7c64:	b083      	sub	sp, #12
    7c66:	a904      	add	r1, sp, #16
    7c68:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    7c6c:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    7c6e:	f7f9 f873 	bl	d58 <vprintk>
}
    7c72:	b003      	add	sp, #12
    7c74:	f85d eb04 	ldr.w	lr, [sp], #4
    7c78:	b004      	add	sp, #16
    7c7a:	4770      	bx	lr

00007c7c <snprintk>:
{
    7c7c:	b40c      	push	{r2, r3}
    7c7e:	b500      	push	{lr}
    7c80:	b083      	sub	sp, #12
    7c82:	ab04      	add	r3, sp, #16
    7c84:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    7c88:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    7c8a:	f7f9 f873 	bl	d74 <vsnprintk>
}
    7c8e:	b003      	add	sp, #12
    7c90:	f85d eb04 	ldr.w	lr, [sp], #4
    7c94:	b002      	add	sp, #8
    7c96:	4770      	bx	lr

00007c98 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7c98:	b508      	push	{r3, lr}
    7c9a:	4604      	mov	r4, r0
    7c9c:	4608      	mov	r0, r1
    7c9e:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7ca0:	461a      	mov	r2, r3
    7ca2:	47a0      	blx	r4
	return z_impl_z_current_get();
    7ca4:	f7ff fabe 	bl	7224 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    7ca8:	f7fb ff5a 	bl	3b60 <z_impl_k_thread_abort>

00007cac <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    7cac:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    7cb0:	8b03      	ldrh	r3, [r0, #24]
    7cb2:	f023 0307 	bic.w	r3, r3, #7
    7cb6:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    7cb8:	8303      	strh	r3, [r0, #24]
}
    7cba:	4770      	bx	lr

00007cbc <notify_monitors>:
{
    7cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7cc0:	4606      	mov	r6, r0
    7cc2:	460f      	mov	r7, r1
    7cc4:	4690      	mov	r8, r2
	return list->head;
    7cc6:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    7cc8:	b121      	cbz	r1, 7cd4 <notify_monitors+0x18>
	return node->next;
    7cca:	680c      	ldr	r4, [r1, #0]
    7ccc:	b13c      	cbz	r4, 7cde <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7cce:	b931      	cbnz	r1, 7cde <notify_monitors+0x22>
    7cd0:	460c      	mov	r4, r1
    7cd2:	e004      	b.n	7cde <notify_monitors+0x22>
    7cd4:	460c      	mov	r4, r1
    7cd6:	e002      	b.n	7cde <notify_monitors+0x22>
    7cd8:	4623      	mov	r3, r4
    7cda:	4621      	mov	r1, r4
    7cdc:	461c      	mov	r4, r3
    7cde:	b169      	cbz	r1, 7cfc <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    7ce0:	684d      	ldr	r5, [r1, #4]
    7ce2:	4643      	mov	r3, r8
    7ce4:	463a      	mov	r2, r7
    7ce6:	4630      	mov	r0, r6
    7ce8:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    7cea:	2c00      	cmp	r4, #0
    7cec:	d0f4      	beq.n	7cd8 <notify_monitors+0x1c>
	return node->next;
    7cee:	6823      	ldr	r3, [r4, #0]
    7cf0:	2b00      	cmp	r3, #0
    7cf2:	d0f2      	beq.n	7cda <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7cf4:	2c00      	cmp	r4, #0
    7cf6:	d1f0      	bne.n	7cda <notify_monitors+0x1e>
    7cf8:	4623      	mov	r3, r4
    7cfa:	e7ee      	b.n	7cda <notify_monitors+0x1e>
}
    7cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007d00 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7d00:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    7d02:	f013 0307 	ands.w	r3, r3, #7
    7d06:	d103      	bne.n	7d10 <process_recheck+0x10>
	return list->head;
    7d08:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    7d0a:	b10a      	cbz	r2, 7d10 <process_recheck+0x10>
		evt = EVT_START;
    7d0c:	2003      	movs	r0, #3
    7d0e:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7d10:	2b02      	cmp	r3, #2
    7d12:	d003      	beq.n	7d1c <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    7d14:	2b01      	cmp	r3, #1
    7d16:	d006      	beq.n	7d26 <process_recheck+0x26>
	int evt = EVT_NOP;
    7d18:	2000      	movs	r0, #0
    7d1a:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    7d1c:	8b42      	ldrh	r2, [r0, #26]
    7d1e:	2a00      	cmp	r2, #0
    7d20:	d1f8      	bne.n	7d14 <process_recheck+0x14>
		evt = EVT_STOP;
    7d22:	2004      	movs	r0, #4
    7d24:	4770      	bx	lr
    7d26:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    7d28:	b10b      	cbz	r3, 7d2e <process_recheck+0x2e>
		evt = EVT_RESET;
    7d2a:	2005      	movs	r0, #5
}
    7d2c:	4770      	bx	lr
	int evt = EVT_NOP;
    7d2e:	2000      	movs	r0, #0
    7d30:	4770      	bx	lr

00007d32 <process_complete>:
{
    7d32:	b510      	push	{r4, lr}
    7d34:	4604      	mov	r4, r0
    7d36:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7d38:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    7d3a:	2a00      	cmp	r2, #0
    7d3c:	db07      	blt.n	7d4e <process_complete+0x1c>
    7d3e:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    7d42:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    7d44:	2a01      	cmp	r2, #1
    7d46:	d90e      	bls.n	7d66 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    7d48:	2b04      	cmp	r3, #4
    7d4a:	d036      	beq.n	7dba <process_complete+0x88>
}
    7d4c:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    7d4e:	e9d0 0100 	ldrd	r0, r1, [r0]
    7d52:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    7d56:	2300      	movs	r3, #0
    7d58:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    7d5a:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    7d5c:	2101      	movs	r1, #1
    7d5e:	4620      	mov	r0, r4
    7d60:	f7ff ffa4 	bl	7cac <set_state>
    7d64:	e7f2      	b.n	7d4c <process_complete+0x1a>
		*clients = mgr->clients;
    7d66:	e9d0 0100 	ldrd	r0, r1, [r0]
    7d6a:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    7d6e:	2200      	movs	r2, #0
    7d70:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    7d72:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    7d74:	2b06      	cmp	r3, #6
    7d76:	d11b      	bne.n	7db0 <process_complete+0x7e>
	return list->head;
    7d78:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    7d7c:	b153      	cbz	r3, 7d94 <process_complete+0x62>
				mgr->refs += 1U;
    7d7e:	8b62      	ldrh	r2, [r4, #26]
    7d80:	3201      	adds	r2, #1
    7d82:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    7d84:	461a      	mov	r2, r3
	return node->next;
    7d86:	681b      	ldr	r3, [r3, #0]
    7d88:	2b00      	cmp	r3, #0
    7d8a:	d0f7      	beq.n	7d7c <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    7d8c:	2a00      	cmp	r2, #0
    7d8e:	d1f5      	bne.n	7d7c <process_complete+0x4a>
    7d90:	4613      	mov	r3, r2
    7d92:	e7f3      	b.n	7d7c <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    7d94:	2102      	movs	r1, #2
    7d96:	4620      	mov	r0, r4
    7d98:	f7ff ff88 	bl	7cac <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    7d9c:	4620      	mov	r0, r4
    7d9e:	f7ff ffaf 	bl	7d00 <process_recheck>
    7da2:	2800      	cmp	r0, #0
    7da4:	d0d2      	beq.n	7d4c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    7da6:	8b23      	ldrh	r3, [r4, #24]
    7da8:	f043 0320 	orr.w	r3, r3, #32
    7dac:	8323      	strh	r3, [r4, #24]
    7dae:	e7cd      	b.n	7d4c <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    7db0:	2100      	movs	r1, #0
    7db2:	4620      	mov	r0, r4
    7db4:	f7ff ff7a 	bl	7cac <set_state>
    7db8:	e7f0      	b.n	7d9c <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    7dba:	2100      	movs	r1, #0
    7dbc:	f7ff ff76 	bl	7cac <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    7dc0:	4620      	mov	r0, r4
    7dc2:	f7ff ff9d 	bl	7d00 <process_recheck>
    7dc6:	2800      	cmp	r0, #0
    7dc8:	d0c0      	beq.n	7d4c <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    7dca:	8b23      	ldrh	r3, [r4, #24]
    7dcc:	f043 0320 	orr.w	r3, r3, #32
    7dd0:	8323      	strh	r3, [r4, #24]
}
    7dd2:	e7bb      	b.n	7d4c <process_complete+0x1a>

00007dd4 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    7dd4:	b150      	cbz	r0, 7dec <validate_args+0x18>
{
    7dd6:	b510      	push	{r4, lr}
    7dd8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7dda:	b151      	cbz	r1, 7df2 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    7ddc:	1d08      	adds	r0, r1, #4
    7dde:	f000 f8c4 	bl	7f6a <sys_notify_validate>
	if ((rv == 0)
    7de2:	b910      	cbnz	r0, 7dea <validate_args+0x16>
	    && ((cli->notify.flags
    7de4:	68a3      	ldr	r3, [r4, #8]
    7de6:	2b03      	cmp	r3, #3
    7de8:	d806      	bhi.n	7df8 <validate_args+0x24>
}
    7dea:	bd10      	pop	{r4, pc}
		return -EINVAL;
    7dec:	f06f 0015 	mvn.w	r0, #21
}
    7df0:	4770      	bx	lr
		return -EINVAL;
    7df2:	f06f 0015 	mvn.w	r0, #21
    7df6:	e7f8      	b.n	7dea <validate_args+0x16>
		rv = -EINVAL;
    7df8:	f06f 0015 	mvn.w	r0, #21
    7dfc:	e7f5      	b.n	7dea <validate_args+0x16>

00007dfe <notify_one>:
{
    7dfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e02:	4607      	mov	r7, r0
    7e04:	460c      	mov	r4, r1
    7e06:	4616      	mov	r6, r2
    7e08:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7e0a:	4619      	mov	r1, r3
    7e0c:	1d20      	adds	r0, r4, #4
    7e0e:	f000 f8c3 	bl	7f98 <sys_notify_finalize>
	if (cb) {
    7e12:	b128      	cbz	r0, 7e20 <notify_one+0x22>
    7e14:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    7e16:	462b      	mov	r3, r5
    7e18:	4632      	mov	r2, r6
    7e1a:	4621      	mov	r1, r4
    7e1c:	4638      	mov	r0, r7
    7e1e:	47c0      	blx	r8
}
    7e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007e24 <notify_all>:
{
    7e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e28:	4680      	mov	r8, r0
    7e2a:	460c      	mov	r4, r1
    7e2c:	4617      	mov	r7, r2
    7e2e:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    7e30:	e004      	b.n	7e3c <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    7e32:	4633      	mov	r3, r6
    7e34:	463a      	mov	r2, r7
    7e36:	4640      	mov	r0, r8
    7e38:	f7ff ffe1 	bl	7dfe <notify_one>
	return list->head;
    7e3c:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    7e3e:	b131      	cbz	r1, 7e4e <notify_all+0x2a>
	return node->next;
    7e40:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    7e42:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7e44:	6863      	ldr	r3, [r4, #4]
    7e46:	428b      	cmp	r3, r1
    7e48:	d1f3      	bne.n	7e32 <notify_all+0xe>
	list->tail = node;
    7e4a:	6065      	str	r5, [r4, #4]
}
    7e4c:	e7f1      	b.n	7e32 <notify_all+0xe>
}
    7e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007e52 <transition_complete>:
{
    7e52:	b508      	push	{r3, lr}
	__asm__ volatile(
    7e54:	f04f 0c20 	mov.w	ip, #32
    7e58:	f3ef 8211 	mrs	r2, BASEPRI
    7e5c:	f38c 8812 	msr	BASEPRI_MAX, ip
    7e60:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    7e64:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    7e66:	2101      	movs	r1, #1
    7e68:	f7f8 ff9c 	bl	da4 <process_event>
}
    7e6c:	bd08      	pop	{r3, pc}

00007e6e <onoff_manager_init>:
	if ((mgr == NULL)
    7e6e:	4603      	mov	r3, r0
    7e70:	b170      	cbz	r0, 7e90 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    7e72:	b181      	cbz	r1, 7e96 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    7e74:	680a      	ldr	r2, [r1, #0]
    7e76:	b18a      	cbz	r2, 7e9c <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    7e78:	684a      	ldr	r2, [r1, #4]
    7e7a:	b192      	cbz	r2, 7ea2 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7e7c:	2000      	movs	r0, #0
    7e7e:	6018      	str	r0, [r3, #0]
    7e80:	6058      	str	r0, [r3, #4]
    7e82:	6098      	str	r0, [r3, #8]
    7e84:	60d8      	str	r0, [r3, #12]
    7e86:	6118      	str	r0, [r3, #16]
    7e88:	6158      	str	r0, [r3, #20]
    7e8a:	6198      	str	r0, [r3, #24]
    7e8c:	6119      	str	r1, [r3, #16]
	return 0;
    7e8e:	4770      	bx	lr
		return -EINVAL;
    7e90:	f06f 0015 	mvn.w	r0, #21
    7e94:	4770      	bx	lr
    7e96:	f06f 0015 	mvn.w	r0, #21
    7e9a:	4770      	bx	lr
    7e9c:	f06f 0015 	mvn.w	r0, #21
    7ea0:	4770      	bx	lr
    7ea2:	f06f 0015 	mvn.w	r0, #21
}
    7ea6:	4770      	bx	lr

00007ea8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    7ea8:	b570      	push	{r4, r5, r6, lr}
    7eaa:	4605      	mov	r5, r0
    7eac:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    7eae:	f7ff ff91 	bl	7dd4 <validate_args>

	if (rv < 0) {
    7eb2:	1e04      	subs	r4, r0, #0
    7eb4:	db30      	blt.n	7f18 <onoff_request+0x70>
    7eb6:	f04f 0320 	mov.w	r3, #32
    7eba:	f3ef 8211 	mrs	r2, BASEPRI
    7ebe:	f383 8812 	msr	BASEPRI_MAX, r3
    7ec2:	f3bf 8f6f 	isb	sy
    7ec6:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7ec8:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    7ecc:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    7ed0:	8b6b      	ldrh	r3, [r5, #26]
    7ed2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7ed6:	428b      	cmp	r3, r1
    7ed8:	d02c      	beq.n	7f34 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    7eda:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    7edc:	f1bc 0f02 	cmp.w	ip, #2
    7ee0:	d008      	beq.n	7ef4 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    7ee2:	f1bc 0f06 	cmp.w	ip, #6
    7ee6:	d819      	bhi.n	7f1c <onoff_request+0x74>
    7ee8:	e8df f00c 	tbb	[pc, ip]
    7eec:	1818181e 	.word	0x1818181e
    7ef0:	2a1e      	.short	0x2a1e
    7ef2:	1e          	.byte	0x1e
    7ef3:	00          	.byte	0x00
		mgr->refs += 1U;
    7ef4:	3301      	adds	r3, #1
    7ef6:	836b      	strh	r3, [r5, #26]
		notify = true;
    7ef8:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    7efa:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    7efc:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    7efe:	b128      	cbz	r0, 7f0c <onoff_request+0x64>
	parent->next = child;
    7f00:	2000      	movs	r0, #0
    7f02:	6030      	str	r0, [r6, #0]
	return list->tail;
    7f04:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    7f06:	b308      	cbz	r0, 7f4c <onoff_request+0xa4>
	parent->next = child;
    7f08:	6006      	str	r6, [r0, #0]
	list->tail = node;
    7f0a:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    7f0c:	bb09      	cbnz	r1, 7f52 <onoff_request+0xaa>
	__asm__ volatile(
    7f0e:	f38e 8811 	msr	BASEPRI, lr
    7f12:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    7f16:	bb0b      	cbnz	r3, 7f5c <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    7f18:	4620      	mov	r0, r4
    7f1a:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    7f1c:	f06f 0404 	mvn.w	r4, #4
    7f20:	2300      	movs	r3, #0
    7f22:	4619      	mov	r1, r3
    7f24:	4618      	mov	r0, r3
    7f26:	e7ea      	b.n	7efe <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    7f28:	fabc f18c 	clz	r1, ip
    7f2c:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    7f2e:	2300      	movs	r3, #0
		add_client = true;
    7f30:	2001      	movs	r0, #1
    7f32:	e7e4      	b.n	7efe <onoff_request+0x56>
		rv = -EAGAIN;
    7f34:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    7f38:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    7f3a:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    7f3c:	4618      	mov	r0, r3
    7f3e:	e7de      	b.n	7efe <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    7f40:	f06f 0485 	mvn.w	r4, #133	; 0x85
    7f44:	2300      	movs	r3, #0
    7f46:	4619      	mov	r1, r3
    7f48:	4618      	mov	r0, r3
    7f4a:	e7d8      	b.n	7efe <onoff_request+0x56>
    7f4c:	606e      	str	r6, [r5, #4]
	list->head = node;
    7f4e:	602e      	str	r6, [r5, #0]
}
    7f50:	e7dc      	b.n	7f0c <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    7f52:	2102      	movs	r1, #2
    7f54:	4628      	mov	r0, r5
    7f56:	f7f8 ff25 	bl	da4 <process_event>
    7f5a:	e7dd      	b.n	7f18 <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    7f5c:	2300      	movs	r3, #0
    7f5e:	4662      	mov	r2, ip
    7f60:	4631      	mov	r1, r6
    7f62:	4628      	mov	r0, r5
    7f64:	f7ff ff4b 	bl	7dfe <notify_one>
    7f68:	e7d6      	b.n	7f18 <onoff_request+0x70>

00007f6a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    7f6a:	4602      	mov	r2, r0
    7f6c:	b158      	cbz	r0, 7f86 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7f6e:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7f70:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    7f74:	2b01      	cmp	r3, #1
    7f76:	d003      	beq.n	7f80 <sys_notify_validate+0x16>
    7f78:	2b03      	cmp	r3, #3
    7f7a:	d107      	bne.n	7f8c <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    7f7c:	6803      	ldr	r3, [r0, #0]
    7f7e:	b143      	cbz	r3, 7f92 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    7f80:	2000      	movs	r0, #0
    7f82:	6090      	str	r0, [r2, #8]
    7f84:	4770      	bx	lr
		return -EINVAL;
    7f86:	f06f 0015 	mvn.w	r0, #21
    7f8a:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    7f8c:	f06f 0015 	mvn.w	r0, #21
    7f90:	4770      	bx	lr
			rv = -EINVAL;
    7f92:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    7f96:	4770      	bx	lr

00007f98 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    7f98:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7f9a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7f9c:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    7fa0:	6081      	str	r1, [r0, #8]
	switch (method) {
    7fa2:	2a03      	cmp	r2, #3
    7fa4:	d103      	bne.n	7fae <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    7fa6:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7fa8:	2200      	movs	r2, #0
    7faa:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    7fac:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    7fae:	2000      	movs	r0, #0
    7fb0:	e7fa      	b.n	7fa8 <sys_notify_finalize+0x10>

00007fb2 <extract_decimal>:
{
    7fb2:	4684      	mov	ip, r0
	const char *sp = *str;
    7fb4:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    7fb6:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    7fb8:	e006      	b.n	7fc8 <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    7fba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    7fbe:	3201      	adds	r2, #1
    7fc0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    7fc4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    7fc8:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    7fca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    7fce:	2909      	cmp	r1, #9
    7fd0:	d9f3      	bls.n	7fba <extract_decimal+0x8>
	*str = sp;
    7fd2:	f8cc 2000 	str.w	r2, [ip]
}
    7fd6:	4770      	bx	lr

00007fd8 <extract_width>:
{
    7fd8:	b530      	push	{r4, r5, lr}
    7fda:	b083      	sub	sp, #12
    7fdc:	4604      	mov	r4, r0
    7fde:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    7fe0:	7803      	ldrb	r3, [r0, #0]
    7fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7fe6:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    7fe8:	460d      	mov	r5, r1
    7fea:	780b      	ldrb	r3, [r1, #0]
    7fec:	2b2a      	cmp	r3, #42	; 0x2a
    7fee:	d018      	beq.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
	size_t width = extract_decimal(&sp);
    7ff0:	a801      	add	r0, sp, #4
    7ff2:	f7ff ffde 	bl	7fb2 <extract_decimal>
	if (sp != wp) {
    7ff6:	9b01      	ldr	r3, [sp, #4]
    7ff8:	429d      	cmp	r5, r3
    7ffa:	d00f      	beq.n	801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
		conv->width_present = true;
    7ffc:	7823      	ldrb	r3, [r4, #0]
    7ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8002:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    8004:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    8006:	b2db      	uxtb	r3, r3
    8008:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    800c:	2800      	cmp	r0, #0
    800e:	db10      	blt.n	8032 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x32>
    8010:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    8012:	4313      	orrs	r3, r2
    8014:	7822      	ldrb	r2, [r4, #0]
    8016:	f363 0241 	bfi	r2, r3, #1, #1
    801a:	7022      	strb	r2, [r4, #0]
	return sp;
    801c:	9801      	ldr	r0, [sp, #4]
}
    801e:	b003      	add	sp, #12
    8020:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    8022:	7843      	ldrb	r3, [r0, #1]
    8024:	f043 0301 	orr.w	r3, r3, #1
    8028:	7043      	strb	r3, [r0, #1]
		return ++sp;
    802a:	4608      	mov	r0, r1
    802c:	3001      	adds	r0, #1
    802e:	9001      	str	r0, [sp, #4]
    8030:	e7f5      	b.n	801e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e>
				      || (width != (size_t)conv->width_value));
    8032:	2201      	movs	r2, #1
    8034:	e7ed      	b.n	8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>

00008036 <extract_prec>:
{
    8036:	b510      	push	{r4, lr}
    8038:	b082      	sub	sp, #8
    803a:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    803c:	780b      	ldrb	r3, [r1, #0]
    803e:	2b2e      	cmp	r3, #46	; 0x2e
    8040:	bf14      	ite	ne
    8042:	2300      	movne	r3, #0
    8044:	2301      	moveq	r3, #1
    8046:	7842      	ldrb	r2, [r0, #1]
    8048:	f363 0241 	bfi	r2, r3, #1, #1
    804c:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    804e:	b1c3      	cbz	r3, 8082 <extract_prec+0x4c>
    8050:	4604      	mov	r4, r0
	++sp;
    8052:	9b01      	ldr	r3, [sp, #4]
    8054:	1c5a      	adds	r2, r3, #1
    8056:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    8058:	785b      	ldrb	r3, [r3, #1]
    805a:	2b2a      	cmp	r3, #42	; 0x2a
    805c:	d013      	beq.n	8086 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    805e:	a801      	add	r0, sp, #4
    8060:	f7ff ffa7 	bl	7fb2 <extract_decimal>
	conv->prec_value = prec;
    8064:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    8066:	7823      	ldrb	r3, [r4, #0]
    8068:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    806c:	2800      	cmp	r0, #0
    806e:	db12      	blt.n	8096 <extract_prec+0x60>
    8070:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    8072:	4313      	orrs	r3, r2
    8074:	7822      	ldrb	r2, [r4, #0]
    8076:	f363 0241 	bfi	r2, r3, #1, #1
    807a:	7022      	strb	r2, [r4, #0]
	return sp;
    807c:	9801      	ldr	r0, [sp, #4]
}
    807e:	b002      	add	sp, #8
    8080:	bd10      	pop	{r4, pc}
		return sp;
    8082:	4608      	mov	r0, r1
    8084:	e7fb      	b.n	807e <extract_prec+0x48>
		conv->prec_star = true;
    8086:	7843      	ldrb	r3, [r0, #1]
    8088:	f043 0304 	orr.w	r3, r3, #4
    808c:	7043      	strb	r3, [r0, #1]
		return ++sp;
    808e:	4610      	mov	r0, r2
    8090:	3001      	adds	r0, #1
    8092:	9001      	str	r0, [sp, #4]
    8094:	e7f3      	b.n	807e <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    8096:	2201      	movs	r2, #1
    8098:	e7eb      	b.n	8072 <extract_prec+0x3c>

0000809a <extract_length>:
{
    809a:	4602      	mov	r2, r0
	switch (*sp) {
    809c:	780b      	ldrb	r3, [r1, #0]
    809e:	3b4c      	subs	r3, #76	; 0x4c
    80a0:	2b2e      	cmp	r3, #46	; 0x2e
    80a2:	d85b      	bhi.n	815c <extract_length+0xc2>
    80a4:	e8df f003 	tbb	[pc, r3]
    80a8:	5a5a5a4f 	.word	0x5a5a5a4f
    80ac:	5a5a5a5a 	.word	0x5a5a5a5a
    80b0:	5a5a5a5a 	.word	0x5a5a5a5a
    80b4:	5a5a5a5a 	.word	0x5a5a5a5a
    80b8:	5a5a5a5a 	.word	0x5a5a5a5a
    80bc:	5a5a5a5a 	.word	0x5a5a5a5a
    80c0:	5a5a5a5a 	.word	0x5a5a5a5a
    80c4:	5a3a5a18 	.word	0x5a3a5a18
    80c8:	5a5a5a29 	.word	0x5a5a5a29
    80cc:	5a5a5a5a 	.word	0x5a5a5a5a
    80d0:	5a5a5a48 	.word	0x5a5a5a48
    80d4:	5a5a      	.short	0x5a5a
    80d6:	41          	.byte	0x41
    80d7:	00          	.byte	0x00
		if (*++sp == 'h') {
    80d8:	1c48      	adds	r0, r1, #1
    80da:	784b      	ldrb	r3, [r1, #1]
    80dc:	2b68      	cmp	r3, #104	; 0x68
    80de:	d005      	beq.n	80ec <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    80e0:	7853      	ldrb	r3, [r2, #1]
    80e2:	2102      	movs	r1, #2
    80e4:	f361 03c6 	bfi	r3, r1, #3, #4
    80e8:	7053      	strb	r3, [r2, #1]
    80ea:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    80ec:	7853      	ldrb	r3, [r2, #1]
    80ee:	2001      	movs	r0, #1
    80f0:	f360 03c6 	bfi	r3, r0, #3, #4
    80f4:	7053      	strb	r3, [r2, #1]
			++sp;
    80f6:	1c88      	adds	r0, r1, #2
    80f8:	4770      	bx	lr
		if (*++sp == 'l') {
    80fa:	1c48      	adds	r0, r1, #1
    80fc:	784b      	ldrb	r3, [r1, #1]
    80fe:	2b6c      	cmp	r3, #108	; 0x6c
    8100:	d005      	beq.n	810e <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    8102:	7853      	ldrb	r3, [r2, #1]
    8104:	2103      	movs	r1, #3
    8106:	f361 03c6 	bfi	r3, r1, #3, #4
    810a:	7053      	strb	r3, [r2, #1]
    810c:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    810e:	7853      	ldrb	r3, [r2, #1]
    8110:	2004      	movs	r0, #4
    8112:	f360 03c6 	bfi	r3, r0, #3, #4
    8116:	7053      	strb	r3, [r2, #1]
			++sp;
    8118:	1c88      	adds	r0, r1, #2
    811a:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    811c:	7853      	ldrb	r3, [r2, #1]
    811e:	2005      	movs	r0, #5
    8120:	f360 03c6 	bfi	r3, r0, #3, #4
    8124:	7053      	strb	r3, [r2, #1]
		++sp;
    8126:	1c48      	adds	r0, r1, #1
		break;
    8128:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    812a:	7853      	ldrb	r3, [r2, #1]
    812c:	2006      	movs	r0, #6
    812e:	f360 03c6 	bfi	r3, r0, #3, #4
    8132:	7053      	strb	r3, [r2, #1]
		++sp;
    8134:	1c48      	adds	r0, r1, #1
		break;
    8136:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    8138:	7853      	ldrb	r3, [r2, #1]
    813a:	2007      	movs	r0, #7
    813c:	f360 03c6 	bfi	r3, r0, #3, #4
    8140:	7053      	strb	r3, [r2, #1]
		++sp;
    8142:	1c48      	adds	r0, r1, #1
		break;
    8144:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    8146:	7853      	ldrb	r3, [r2, #1]
    8148:	2008      	movs	r0, #8
    814a:	f360 03c6 	bfi	r3, r0, #3, #4
    814e:	7053      	strb	r3, [r2, #1]
		++sp;
    8150:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    8152:	7813      	ldrb	r3, [r2, #0]
    8154:	f043 0302 	orr.w	r3, r3, #2
    8158:	7013      	strb	r3, [r2, #0]
		break;
    815a:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    815c:	7853      	ldrb	r3, [r2, #1]
    815e:	f36f 03c6 	bfc	r3, #3, #4
    8162:	7053      	strb	r3, [r2, #1]
		break;
    8164:	4608      	mov	r0, r1
}
    8166:	4770      	bx	lr

00008168 <extract_specifier>:
{
    8168:	b500      	push	{lr}
    816a:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    816c:	4608      	mov	r0, r1
    816e:	f810 3b01 	ldrb.w	r3, [r0], #1
    8172:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    8174:	2b78      	cmp	r3, #120	; 0x78
    8176:	d817      	bhi.n	81a8 <extract_specifier+0x40>
    8178:	2b6e      	cmp	r3, #110	; 0x6e
    817a:	d229      	bcs.n	81d0 <extract_specifier+0x68>
    817c:	2b69      	cmp	r3, #105	; 0x69
    817e:	d813      	bhi.n	81a8 <extract_specifier+0x40>
    8180:	2b58      	cmp	r3, #88	; 0x58
    8182:	d317      	bcc.n	81b4 <extract_specifier+0x4c>
    8184:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    8188:	fa5f fc8c 	uxtb.w	ip, ip
    818c:	2101      	movs	r1, #1
    818e:	fa01 f10c 	lsl.w	r1, r1, ip
    8192:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    8196:	d114      	bne.n	81c2 <extract_specifier+0x5a>
    8198:	f640 0c01 	movw	ip, #2049	; 0x801
    819c:	ea11 0f0c 	tst.w	r1, ip
    81a0:	d155      	bne.n	824e <extract_specifier+0xe6>
    81a2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    81a6:	d13a      	bne.n	821e <extract_specifier+0xb6>
		conv->invalid = true;
    81a8:	7813      	ldrb	r3, [r2, #0]
    81aa:	f043 0301 	orr.w	r3, r3, #1
    81ae:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    81b0:	2100      	movs	r1, #0
		break;
    81b2:	e042      	b.n	823a <extract_specifier+0xd2>
	switch (conv->specifier) {
    81b4:	2b41      	cmp	r3, #65	; 0x41
    81b6:	d004      	beq.n	81c2 <extract_specifier+0x5a>
    81b8:	d3f6      	bcc.n	81a8 <extract_specifier+0x40>
    81ba:	3b45      	subs	r3, #69	; 0x45
    81bc:	b2db      	uxtb	r3, r3
    81be:	2b02      	cmp	r3, #2
    81c0:	d8f2      	bhi.n	81a8 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    81c2:	7893      	ldrb	r3, [r2, #2]
    81c4:	2104      	movs	r1, #4
    81c6:	f361 0302 	bfi	r3, r1, #0, #3
    81ca:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    81cc:	2101      	movs	r1, #1
			break;
    81ce:	e034      	b.n	823a <extract_specifier+0xd2>
	switch (conv->specifier) {
    81d0:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    81d4:	b2c9      	uxtb	r1, r1
    81d6:	f04f 0c01 	mov.w	ip, #1
    81da:	fa0c fc01 	lsl.w	ip, ip, r1
    81de:	f240 4182 	movw	r1, #1154	; 0x482
    81e2:	ea1c 0f01 	tst.w	ip, r1
    81e6:	bf14      	ite	ne
    81e8:	f04f 0e01 	movne.w	lr, #1
    81ec:	f04f 0e00 	moveq.w	lr, #0
    81f0:	d12d      	bne.n	824e <extract_specifier+0xe6>
    81f2:	f01c 0f24 	tst.w	ip, #36	; 0x24
    81f6:	bf14      	ite	ne
    81f8:	2101      	movne	r1, #1
    81fa:	2100      	moveq	r1, #0
    81fc:	d139      	bne.n	8272 <extract_specifier+0x10a>
    81fe:	f01c 0c01 	ands.w	ip, ip, #1
    8202:	d0d1      	beq.n	81a8 <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    8204:	7893      	ldrb	r3, [r2, #2]
    8206:	f04f 0e03 	mov.w	lr, #3
    820a:	f36e 0302 	bfi	r3, lr, #0, #3
    820e:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    8210:	7853      	ldrb	r3, [r2, #1]
    8212:	f003 0378 	and.w	r3, r3, #120	; 0x78
    8216:	2b40      	cmp	r3, #64	; 0x40
    8218:	d10f      	bne.n	823a <extract_specifier+0xd2>
			unsupported = true;
    821a:	4661      	mov	r1, ip
    821c:	e00d      	b.n	823a <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    821e:	7891      	ldrb	r1, [r2, #2]
    8220:	f04f 0c01 	mov.w	ip, #1
    8224:	f36c 0102 	bfi	r1, ip, #0, #3
    8228:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    822a:	7851      	ldrb	r1, [r2, #1]
    822c:	f001 0178 	and.w	r1, r1, #120	; 0x78
    8230:	2940      	cmp	r1, #64	; 0x40
    8232:	d013      	beq.n	825c <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    8234:	2b63      	cmp	r3, #99	; 0x63
    8236:	d018      	beq.n	826a <extract_specifier+0x102>
	bool unsupported = false;
    8238:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    823a:	7813      	ldrb	r3, [r2, #0]
    823c:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    8240:	ea41 010c 	orr.w	r1, r1, ip
    8244:	f361 0341 	bfi	r3, r1, #1, #1
    8248:	7013      	strb	r3, [r2, #0]
}
    824a:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    824e:	7891      	ldrb	r1, [r2, #2]
    8250:	f04f 0c02 	mov.w	ip, #2
    8254:	f36c 0102 	bfi	r1, ip, #0, #3
    8258:	7091      	strb	r1, [r2, #2]
    825a:	e7e6      	b.n	822a <extract_specifier+0xc2>
			conv->invalid = true;
    825c:	f892 c000 	ldrb.w	ip, [r2]
    8260:	f04c 0c01 	orr.w	ip, ip, #1
    8264:	f882 c000 	strb.w	ip, [r2]
    8268:	e7e4      	b.n	8234 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    826a:	3900      	subs	r1, #0
    826c:	bf18      	it	ne
    826e:	2101      	movne	r1, #1
    8270:	e7e3      	b.n	823a <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    8272:	7893      	ldrb	r3, [r2, #2]
    8274:	f04f 0c03 	mov.w	ip, #3
    8278:	f36c 0302 	bfi	r3, ip, #0, #3
    827c:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    827e:	7853      	ldrb	r3, [r2, #1]
    8280:	f013 0f78 	tst.w	r3, #120	; 0x78
    8284:	d1d9      	bne.n	823a <extract_specifier+0xd2>
	bool unsupported = false;
    8286:	4671      	mov	r1, lr
    8288:	e7d7      	b.n	823a <extract_specifier+0xd2>

0000828a <extract_conversion>:
{
    828a:	b510      	push	{r4, lr}
    828c:	4604      	mov	r4, r0
    828e:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    8290:	2300      	movs	r3, #0
    8292:	6023      	str	r3, [r4, #0]
    8294:	6063      	str	r3, [r4, #4]
    8296:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    8298:	784b      	ldrb	r3, [r1, #1]
    829a:	2b25      	cmp	r3, #37	; 0x25
    829c:	d014      	beq.n	82c8 <extract_conversion+0x3e>
    829e:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    82a0:	4620      	mov	r0, r4
    82a2:	f7f8 fe35 	bl	f10 <extract_flags>
    82a6:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    82a8:	4620      	mov	r0, r4
    82aa:	f7ff fe95 	bl	7fd8 <extract_width>
    82ae:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    82b0:	4620      	mov	r0, r4
    82b2:	f7ff fec0 	bl	8036 <extract_prec>
    82b6:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    82b8:	4620      	mov	r0, r4
    82ba:	f7ff feee 	bl	809a <extract_length>
    82be:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    82c0:	4620      	mov	r0, r4
    82c2:	f7ff ff51 	bl	8168 <extract_specifier>
}
    82c6:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    82c8:	3002      	adds	r0, #2
    82ca:	70e3      	strb	r3, [r4, #3]
		return sp;
    82cc:	e7fb      	b.n	82c6 <extract_conversion+0x3c>

000082ce <conversion_radix>:
	switch (specifier) {
    82ce:	286f      	cmp	r0, #111	; 0x6f
    82d0:	d00c      	beq.n	82ec <conversion_radix+0x1e>
    82d2:	d905      	bls.n	82e0 <conversion_radix+0x12>
    82d4:	2870      	cmp	r0, #112	; 0x70
    82d6:	d00b      	beq.n	82f0 <conversion_radix+0x22>
    82d8:	2878      	cmp	r0, #120	; 0x78
    82da:	d10b      	bne.n	82f4 <conversion_radix+0x26>
		return 16;
    82dc:	2010      	movs	r0, #16
    82de:	4770      	bx	lr
	switch (specifier) {
    82e0:	2858      	cmp	r0, #88	; 0x58
    82e2:	d001      	beq.n	82e8 <conversion_radix+0x1a>
    82e4:	200a      	movs	r0, #10
    82e6:	4770      	bx	lr
		return 16;
    82e8:	2010      	movs	r0, #16
    82ea:	4770      	bx	lr
		return 8;
    82ec:	2008      	movs	r0, #8
    82ee:	4770      	bx	lr
		return 16;
    82f0:	2010      	movs	r0, #16
    82f2:	4770      	bx	lr
	switch (specifier) {
    82f4:	200a      	movs	r0, #10
}
    82f6:	4770      	bx	lr

000082f8 <encode_uint>:
{
    82f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    82fc:	4605      	mov	r5, r0
    82fe:	460c      	mov	r4, r1
    8300:	4693      	mov	fp, r2
    8302:	4699      	mov	r9, r3
    8304:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
    8306:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8308:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    830c:	f7ff ffdf 	bl	82ce <conversion_radix>
    8310:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    8312:	e015      	b.n	8340 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8314:	f1ba 0f19 	cmp.w	sl, #25
    8318:	d820      	bhi.n	835c <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    831a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    831c:	3237      	adds	r2, #55	; 0x37
    831e:	b2d2      	uxtb	r2, r2
    8320:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    8324:	4632      	mov	r2, r6
    8326:	4643      	mov	r3, r8
    8328:	4628      	mov	r0, r5
    832a:	4621      	mov	r1, r4
    832c:	f7f7 ff12 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    8330:	42b5      	cmp	r5, r6
    8332:	f174 0400 	sbcs.w	r4, r4, #0
    8336:	d315      	bcc.n	8364 <encode_uint+0x6c>
    8338:	454f      	cmp	r7, r9
    833a:	d913      	bls.n	8364 <encode_uint+0x6c>
		value /= radix;
    833c:	4605      	mov	r5, r0
    833e:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    8340:	f04f 0800 	mov.w	r8, #0
    8344:	4632      	mov	r2, r6
    8346:	4643      	mov	r3, r8
    8348:	4628      	mov	r0, r5
    834a:	4621      	mov	r1, r4
    834c:	f7f7 ff02 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8350:	2a09      	cmp	r2, #9
    8352:	d8df      	bhi.n	8314 <encode_uint+0x1c>
    8354:	b2d2      	uxtb	r2, r2
    8356:	3230      	adds	r2, #48	; 0x30
    8358:	b2d2      	uxtb	r2, r2
    835a:	e7e1      	b.n	8320 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    835c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    835e:	3257      	adds	r2, #87	; 0x57
    8360:	b2d2      	uxtb	r2, r2
    8362:	e7dd      	b.n	8320 <encode_uint+0x28>
	if (conv->flag_hash) {
    8364:	f89b 3000 	ldrb.w	r3, [fp]
    8368:	f013 0f20 	tst.w	r3, #32
    836c:	d003      	beq.n	8376 <encode_uint+0x7e>
		if (radix == 8) {
    836e:	2e08      	cmp	r6, #8
    8370:	d004      	beq.n	837c <encode_uint+0x84>
		} else if (radix == 16) {
    8372:	2e10      	cmp	r6, #16
    8374:	d009      	beq.n	838a <encode_uint+0x92>
}
    8376:	4638      	mov	r0, r7
    8378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    837c:	f89b 3002 	ldrb.w	r3, [fp, #2]
    8380:	f043 0308 	orr.w	r3, r3, #8
    8384:	f88b 3002 	strb.w	r3, [fp, #2]
    8388:	e7f5      	b.n	8376 <encode_uint+0x7e>
			conv->altform_0c = true;
    838a:	f89b 3002 	ldrb.w	r3, [fp, #2]
    838e:	f043 0310 	orr.w	r3, r3, #16
    8392:	f88b 3002 	strb.w	r3, [fp, #2]
    8396:	e7ee      	b.n	8376 <encode_uint+0x7e>

00008398 <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    8398:	7843      	ldrb	r3, [r0, #1]
    839a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    839e:	2b07      	cmp	r3, #7
    83a0:	d818      	bhi.n	83d4 <store_count+0x3c>
    83a2:	e8df f003 	tbb	[pc, r3]
    83a6:	0604      	.short	0x0604
    83a8:	100c0a08 	.word	0x100c0a08
    83ac:	1614      	.short	0x1614
		*(int *)dp = count;
    83ae:	600a      	str	r2, [r1, #0]
		break;
    83b0:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    83b2:	700a      	strb	r2, [r1, #0]
		break;
    83b4:	4770      	bx	lr
		*(short *)dp = (short)count;
    83b6:	800a      	strh	r2, [r1, #0]
		break;
    83b8:	4770      	bx	lr
		*(long *)dp = (long)count;
    83ba:	600a      	str	r2, [r1, #0]
		break;
    83bc:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    83be:	17d3      	asrs	r3, r2, #31
    83c0:	600a      	str	r2, [r1, #0]
    83c2:	604b      	str	r3, [r1, #4]
		break;
    83c4:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    83c6:	17d3      	asrs	r3, r2, #31
    83c8:	600a      	str	r2, [r1, #0]
    83ca:	604b      	str	r3, [r1, #4]
		break;
    83cc:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    83ce:	600a      	str	r2, [r1, #0]
		break;
    83d0:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    83d2:	600a      	str	r2, [r1, #0]
}
    83d4:	4770      	bx	lr

000083d6 <outs>:
{
    83d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    83da:	4607      	mov	r7, r0
    83dc:	460e      	mov	r6, r1
    83de:	4614      	mov	r4, r2
    83e0:	4698      	mov	r8, r3
	size_t count = 0;
    83e2:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    83e4:	e006      	b.n	83f4 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    83e6:	4631      	mov	r1, r6
    83e8:	f814 0b01 	ldrb.w	r0, [r4], #1
    83ec:	47b8      	blx	r7
		if (rc < 0) {
    83ee:	2800      	cmp	r0, #0
    83f0:	db09      	blt.n	8406 <outs+0x30>
		++count;
    83f2:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    83f4:	4544      	cmp	r4, r8
    83f6:	d3f6      	bcc.n	83e6 <outs+0x10>
    83f8:	f1b8 0f00 	cmp.w	r8, #0
    83fc:	d102      	bne.n	8404 <outs+0x2e>
    83fe:	7823      	ldrb	r3, [r4, #0]
    8400:	2b00      	cmp	r3, #0
    8402:	d1f0      	bne.n	83e6 <outs+0x10>
	return (int)count;
    8404:	4628      	mov	r0, r5
}
    8406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000840a <free_space>:
	ARG_UNUSED(err);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    840a:	68c3      	ldr	r3, [r0, #12]
    840c:	6802      	ldr	r2, [r0, #0]
    840e:	4293      	cmp	r3, r2
    8410:	d805      	bhi.n	841e <free_space+0x14>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;

		return false;
	} else if (!buffer->rd_idx) {
    8412:	b14b      	cbz	r3, 8428 <free_space+0x1e>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
		return false;
	}

	*res = buffer->size - buffer->tmp_wr_idx;
    8414:	6a03      	ldr	r3, [r0, #32]
    8416:	1a9b      	subs	r3, r3, r2
    8418:	600b      	str	r3, [r1, #0]

	return true;
    841a:	2001      	movs	r0, #1
}
    841c:	4770      	bx	lr
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    841e:	1a9b      	subs	r3, r3, r2
    8420:	3b01      	subs	r3, #1
    8422:	600b      	str	r3, [r1, #0]
		return false;
    8424:	2000      	movs	r0, #0
    8426:	4770      	bx	lr
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    8428:	6a03      	ldr	r3, [r0, #32]
    842a:	1a9b      	subs	r3, r3, r2
    842c:	3b01      	subs	r3, #1
    842e:	600b      	str	r3, [r1, #0]
		return false;
    8430:	2000      	movs	r0, #0
    8432:	4770      	bx	lr

00008434 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    8434:	b510      	push	{r4, lr}
    8436:	b082      	sub	sp, #8
    8438:	4604      	mov	r4, r0
	uint32_t f;

	if (free_space(buffer, &f)) {
    843a:	a901      	add	r1, sp, #4
    843c:	f7ff ffe5 	bl	840a <free_space>
    8440:	b120      	cbz	r0, 844c <get_usage+0x18>
		f += (buffer->rd_idx - 1);
    8442:	68e3      	ldr	r3, [r4, #12]
    8444:	9a01      	ldr	r2, [sp, #4]
    8446:	4413      	add	r3, r2
    8448:	3b01      	subs	r3, #1
    844a:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    844c:	6a20      	ldr	r0, [r4, #32]
    844e:	9b01      	ldr	r3, [sp, #4]
    8450:	1ac0      	subs	r0, r0, r3
}
    8452:	3801      	subs	r0, #1
    8454:	b002      	add	sp, #8
    8456:	bd10      	pop	{r4, pc}

00008458 <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
    8458:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    845a:	6903      	ldr	r3, [r0, #16]
    845c:	f013 0f04 	tst.w	r3, #4
    8460:	d100      	bne.n	8464 <max_utilization_update+0xc>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
}
    8462:	bd38      	pop	{r3, r4, r5, pc}
    8464:	4604      	mov	r4, r0
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    8466:	6a45      	ldr	r5, [r0, #36]	; 0x24
    8468:	f7ff ffe4 	bl	8434 <get_usage>
    846c:	4285      	cmp	r5, r0
    846e:	d902      	bls.n	8476 <max_utilization_update+0x1e>
    8470:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8472:	6260      	str	r0, [r4, #36]	; 0x24
    8474:	e7f5      	b.n	8462 <max_utilization_update+0xa>
    8476:	4620      	mov	r0, r4
    8478:	f7ff ffdc 	bl	8434 <get_usage>
    847c:	e7f9      	b.n	8472 <max_utilization_update+0x1a>

0000847e <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    847e:	b410      	push	{r4}
	union mpsc_pbuf_generic skip = {
    8480:	2300      	movs	r3, #0
    8482:	f36f 0300 	bfc	r3, #0, #1
    8486:	f043 0302 	orr.w	r3, r3, #2
    848a:	f361 039f 	bfi	r3, r1, #2, #30
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    848e:	69c2      	ldr	r2, [r0, #28]
    8490:	6804      	ldr	r4, [r0, #0]
    8492:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    8496:	6803      	ldr	r3, [r0, #0]
	uint32_t i = idx + val;
    8498:	440b      	add	r3, r1
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    849a:	6902      	ldr	r2, [r0, #16]
    849c:	f012 0201 	ands.w	r2, r2, #1
    84a0:	d104      	bne.n	84ac <add_skip_item+0x2e>
	return (i >= buffer->size) ? i - buffer->size : i;
    84a2:	6a04      	ldr	r4, [r0, #32]
    84a4:	42a3      	cmp	r3, r4
    84a6:	d304      	bcc.n	84b2 <add_skip_item+0x34>
    84a8:	1b1b      	subs	r3, r3, r4
    84aa:	e002      	b.n	84b2 <add_skip_item+0x34>
		return i & (buffer->size - 1);
    84ac:	6a04      	ldr	r4, [r0, #32]
    84ae:	3c01      	subs	r4, #1
    84b0:	4023      	ands	r3, r4
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    84b2:	6003      	str	r3, [r0, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    84b4:	6843      	ldr	r3, [r0, #4]
	uint32_t i = idx + val;
    84b6:	4419      	add	r1, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    84b8:	b922      	cbnz	r2, 84c4 <add_skip_item+0x46>
	return (i >= buffer->size) ? i - buffer->size : i;
    84ba:	6a03      	ldr	r3, [r0, #32]
    84bc:	4299      	cmp	r1, r3
    84be:	d304      	bcc.n	84ca <add_skip_item+0x4c>
    84c0:	1ac9      	subs	r1, r1, r3
    84c2:	e002      	b.n	84ca <add_skip_item+0x4c>
		return i & (buffer->size - 1);
    84c4:	6a03      	ldr	r3, [r0, #32]
    84c6:	3b01      	subs	r3, #1
    84c8:	4019      	ands	r1, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    84ca:	6041      	str	r1, [r0, #4]
}
    84cc:	bc10      	pop	{r4}
    84ce:	4770      	bx	lr

000084d0 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    84d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    84d4:	b083      	sub	sp, #12
    84d6:	4604      	mov	r4, r0
    84d8:	9101      	str	r1, [sp, #4]
    84da:	4615      	mov	r5, r2
    84dc:	461e      	mov	r6, r3
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
    84de:	2300      	movs	r3, #0
    84e0:	7033      	strb	r3, [r6, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    84e2:	f8d0 801c 	ldr.w	r8, [r0, #28]
    84e6:	f8d0 900c 	ldr.w	r9, [r0, #12]
    84ea:	eb08 0a89 	add.w	sl, r8, r9, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    84ee:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
    84f2:	f003 0303 	and.w	r3, r3, #3
    84f6:	2b02      	cmp	r3, #2
    84f8:	d012      	beq.n	8520 <drop_item_locked+0x50>
	return 0;
    84fa:	f04f 0b00 	mov.w	fp, #0
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    84fe:	69a3      	ldr	r3, [r4, #24]
    8500:	4650      	mov	r0, sl
    8502:	4798      	blx	r3
    8504:	4607      	mov	r7, r0
	if (skip_wlen) {
    8506:	f1bb 0f00 	cmp.w	fp, #0
    850a:	d152      	bne.n	85b2 <drop_item_locked+0xe2>
		allow_drop = true;
	} else if (allow_drop) {
    850c:	2d00      	cmp	r5, #0
    850e:	d05d      	beq.n	85cc <drop_item_locked+0xfc>
		if (item->hdr.busy) {
    8510:	f818 3029 	ldrb.w	r3, [r8, r9, lsl #2]
    8514:	f013 0f02 	tst.w	r3, #2
    8518:	d10a      	bne.n	8530 <drop_item_locked+0x60>
			} else {
				rd_wlen += buffer->get_wlen(item);
				*user_packet = true;
			}
		} else {
			*user_packet = true;
    851a:	2301      	movs	r3, #1
    851c:	7033      	strb	r3, [r6, #0]
    851e:	e049      	b.n	85b4 <drop_item_locked+0xe4>
		return item->skip.len;
    8520:	f858 3029 	ldr.w	r3, [r8, r9, lsl #2]
	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    8524:	ea5f 0b93 	movs.w	fp, r3, lsr #2
    8528:	d0e9      	beq.n	84fe <drop_item_locked+0x2e>
		return item->skip.len;
    852a:	465f      	mov	r7, fp
		allow_drop = true;
    852c:	2501      	movs	r5, #1
    852e:	e041      	b.n	85b4 <drop_item_locked+0xe4>
			add_skip_item(buffer, free_wlen + 1);
    8530:	9901      	ldr	r1, [sp, #4]
    8532:	3101      	adds	r1, #1
    8534:	4620      	mov	r0, r4
    8536:	f7ff ffa2 	bl	847e <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    853a:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
    853c:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    853e:	6922      	ldr	r2, [r4, #16]
    8540:	f012 0201 	ands.w	r2, r2, #1
    8544:	d104      	bne.n	8550 <drop_item_locked+0x80>
	return (i >= buffer->size) ? i - buffer->size : i;
    8546:	6a21      	ldr	r1, [r4, #32]
    8548:	428b      	cmp	r3, r1
    854a:	d304      	bcc.n	8556 <drop_item_locked+0x86>
    854c:	1a5b      	subs	r3, r3, r1
    854e:	e002      	b.n	8556 <drop_item_locked+0x86>
		return i & (buffer->size - 1);
    8550:	6a21      	ldr	r1, [r4, #32]
    8552:	3901      	subs	r1, #1
    8554:	400b      	ands	r3, r1
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    8556:	6063      	str	r3, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    8558:	6823      	ldr	r3, [r4, #0]
	uint32_t i = idx + val;
    855a:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    855c:	b922      	cbnz	r2, 8568 <drop_item_locked+0x98>
	return (i >= buffer->size) ? i - buffer->size : i;
    855e:	6a21      	ldr	r1, [r4, #32]
    8560:	428b      	cmp	r3, r1
    8562:	d304      	bcc.n	856e <drop_item_locked+0x9e>
    8564:	1a5b      	subs	r3, r3, r1
    8566:	e002      	b.n	856e <drop_item_locked+0x9e>
		return i & (buffer->size - 1);
    8568:	6a21      	ldr	r1, [r4, #32]
    856a:	3901      	subs	r1, #1
    856c:	400b      	ands	r3, r1
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    856e:	6023      	str	r3, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    8570:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
    8572:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    8574:	b922      	cbnz	r2, 8580 <drop_item_locked+0xb0>
	return (i >= buffer->size) ? i - buffer->size : i;
    8576:	6a22      	ldr	r2, [r4, #32]
    8578:	4293      	cmp	r3, r2
    857a:	d304      	bcc.n	8586 <drop_item_locked+0xb6>
    857c:	1a9b      	subs	r3, r3, r2
    857e:	e002      	b.n	8586 <drop_item_locked+0xb6>
		return i & (buffer->size - 1);
    8580:	6a22      	ldr	r2, [r4, #32]
    8582:	3a01      	subs	r2, #1
    8584:	4013      	ands	r3, r2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    8586:	69e1      	ldr	r1, [r4, #28]
    8588:	eb01 0a83 	add.w	sl, r1, r3, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    858c:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
    8590:	f002 0203 	and.w	r2, r2, #3
    8594:	2a02      	cmp	r2, #2
    8596:	d006      	beq.n	85a6 <drop_item_locked+0xd6>
				rd_wlen += buffer->get_wlen(item);
    8598:	69a3      	ldr	r3, [r4, #24]
    859a:	4650      	mov	r0, sl
    859c:	4798      	blx	r3
    859e:	4407      	add	r7, r0
				*user_packet = true;
    85a0:	2301      	movs	r3, #1
    85a2:	7033      	strb	r3, [r6, #0]
    85a4:	e006      	b.n	85b4 <drop_item_locked+0xe4>
		return item->skip.len;
    85a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if (skip_wlen) {
    85aa:	089b      	lsrs	r3, r3, #2
    85ac:	d0f4      	beq.n	8598 <drop_item_locked+0xc8>
				rd_wlen += skip_wlen;
    85ae:	441f      	add	r7, r3
    85b0:	e000      	b.n	85b4 <drop_item_locked+0xe4>
		allow_drop = true;
    85b2:	2501      	movs	r5, #1
		}
	} else {
		item = NULL;
	}

	if (allow_drop) {
    85b4:	b195      	cbz	r5, 85dc <drop_item_locked+0x10c>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    85b6:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
    85b8:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    85ba:	6922      	ldr	r2, [r4, #16]
    85bc:	f012 0f01 	tst.w	r2, #1
    85c0:	d107      	bne.n	85d2 <drop_item_locked+0x102>
	return (i >= buffer->size) ? i - buffer->size : i;
    85c2:	6a22      	ldr	r2, [r4, #32]
    85c4:	4293      	cmp	r3, r2
    85c6:	d307      	bcc.n	85d8 <drop_item_locked+0x108>
    85c8:	1a9b      	subs	r3, r3, r2
    85ca:	e005      	b.n	85d8 <drop_item_locked+0x108>
		item = NULL;
    85cc:	f04f 0a00 	mov.w	sl, #0
    85d0:	e7f0      	b.n	85b4 <drop_item_locked+0xe4>
		return i & (buffer->size - 1);
    85d2:	6a22      	ldr	r2, [r4, #32]
    85d4:	3a01      	subs	r2, #1
    85d6:	4013      	ands	r3, r2
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    85d8:	60e3      	str	r3, [r4, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
    85da:	60a3      	str	r3, [r4, #8]
	}

	return item;
}
    85dc:	4650      	mov	r0, sl
    85de:	b003      	add	sp, #12
    85e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000085e4 <mpsc_pbuf_init>:
{
    85e4:	b538      	push	{r3, r4, r5, lr}
    85e6:	4604      	mov	r4, r0
    85e8:	460d      	mov	r5, r1
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    85ea:	221c      	movs	r2, #28
    85ec:	2100      	movs	r1, #0
    85ee:	f000 fc61 	bl	8eb4 <memset>
	buffer->get_wlen = cfg->get_wlen;
    85f2:	68eb      	ldr	r3, [r5, #12]
    85f4:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    85f6:	68ab      	ldr	r3, [r5, #8]
    85f8:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    85fa:	682b      	ldr	r3, [r5, #0]
    85fc:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    85fe:	686b      	ldr	r3, [r5, #4]
    8600:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    8602:	2200      	movs	r2, #0
    8604:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    8606:	692a      	ldr	r2, [r5, #16]
    8608:	6122      	str	r2, [r4, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    860a:	b12b      	cbz	r3, 8618 <mpsc_pbuf_init+0x34>
    860c:	1e59      	subs	r1, r3, #1
    860e:	420b      	tst	r3, r1
    8610:	d102      	bne.n	8618 <mpsc_pbuf_init+0x34>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    8612:	f042 0201 	orr.w	r2, r2, #1
    8616:	6122      	str	r2, [r4, #16]
	err = k_sem_init(&buffer->sem, 0, 1);
    8618:	f104 0028 	add.w	r0, r4, #40	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    861c:	2201      	movs	r2, #1
    861e:	2100      	movs	r1, #0
    8620:	f001 fc43 	bl	9eaa <z_impl_k_sem_init>
}
    8624:	bd38      	pop	{r3, r4, r5, pc}

00008626 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    8626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    862a:	b085      	sub	sp, #20
    862c:	469a      	mov	sl, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    862e:	6a03      	ldr	r3, [r0, #32]
    8630:	3b01      	subs	r3, #1
    8632:	428b      	cmp	r3, r1
    8634:	d37f      	bcc.n	8736 <mpsc_pbuf_alloc+0x110>
    8636:	4605      	mov	r5, r0
    8638:	460f      	mov	r7, r1
    863a:	4691      	mov	r9, r2
	union mpsc_pbuf_generic *dropped_item = NULL;
    863c:	f04f 0800 	mov.w	r8, #0
	union mpsc_pbuf_generic *item = NULL;
    8640:	46c3      	mov	fp, r8
    8642:	e019      	b.n	8678 <mpsc_pbuf_alloc+0x52>
		return i & (buffer->size - 1);
    8644:	6a2a      	ldr	r2, [r5, #32]
    8646:	3a01      	subs	r2, #1
    8648:	4013      	ands	r3, r2
		if (free_wlen >= wlen) {
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
			item->hdr.valid = 0;
			item->hdr.busy = 0;
			buffer->tmp_wr_idx = idx_inc(buffer,
    864a:	602b      	str	r3, [r5, #0]
		cont = false;
    864c:	2400      	movs	r4, #0
    864e:	f386 8811 	msr	BASEPRI, r6
    8652:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    8656:	b16c      	cbz	r4, 8674 <mpsc_pbuf_alloc+0x4e>
    8658:	f1b8 0f00 	cmp.w	r8, #0
    865c:	d00a      	beq.n	8674 <mpsc_pbuf_alloc+0x4e>
    865e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    8662:	b13b      	cbz	r3, 8674 <mpsc_pbuf_alloc+0x4e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    8664:	696b      	ldr	r3, [r5, #20]
    8666:	2b00      	cmp	r3, #0
    8668:	d062      	beq.n	8730 <mpsc_pbuf_alloc+0x10a>
				buffer->notify_drop(buffer, dropped_item);
    866a:	4641      	mov	r1, r8
    866c:	4628      	mov	r0, r5
    866e:	4798      	blx	r3
			}
			dropped_item = NULL;
    8670:	f04f 0800 	mov.w	r8, #0
		}
	} while (cont);
    8674:	2c00      	cmp	r4, #0
    8676:	d060      	beq.n	873a <mpsc_pbuf_alloc+0x114>
	__asm__ volatile(
    8678:	f04f 0320 	mov.w	r3, #32
    867c:	f3ef 8611 	mrs	r6, BASEPRI
    8680:	f383 8812 	msr	BASEPRI_MAX, r3
    8684:	f3bf 8f6f 	isb	sy
    8688:	9601      	str	r6, [sp, #4]
		wrap = free_space(buffer, &free_wlen);
    868a:	a903      	add	r1, sp, #12
    868c:	4628      	mov	r0, r5
    868e:	f7ff febc 	bl	840a <free_space>
    8692:	4604      	mov	r4, r0
		if (free_wlen >= wlen) {
    8694:	9903      	ldr	r1, [sp, #12]
    8696:	42b9      	cmp	r1, r7
    8698:	d319      	bcc.n	86ce <mpsc_pbuf_alloc+0xa8>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    869a:	69eb      	ldr	r3, [r5, #28]
    869c:	682a      	ldr	r2, [r5, #0]
			item =
    869e:	eb03 0b82 	add.w	fp, r3, r2, lsl #2
			item->hdr.valid = 0;
    86a2:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    86a6:	f36f 0100 	bfc	r1, #0, #1
    86aa:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item->hdr.busy = 0;
    86ae:	b2c9      	uxtb	r1, r1
    86b0:	f36f 0141 	bfc	r1, #1, #1
    86b4:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    86b8:	682b      	ldr	r3, [r5, #0]
	uint32_t i = idx + val;
    86ba:	443b      	add	r3, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    86bc:	692a      	ldr	r2, [r5, #16]
    86be:	f012 0f01 	tst.w	r2, #1
    86c2:	d1bf      	bne.n	8644 <mpsc_pbuf_alloc+0x1e>
	return (i >= buffer->size) ? i - buffer->size : i;
    86c4:	6a2a      	ldr	r2, [r5, #32]
    86c6:	4293      	cmp	r3, r2
    86c8:	d3bf      	bcc.n	864a <mpsc_pbuf_alloc+0x24>
    86ca:	1a9b      	subs	r3, r3, r2
    86cc:	e7bd      	b.n	864a <mpsc_pbuf_alloc+0x24>
		} else if (wrap) {
    86ce:	b9a0      	cbnz	r0, 86fa <mpsc_pbuf_alloc+0xd4>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    86d0:	ea5a 0309 	orrs.w	r3, sl, r9
    86d4:	d003      	beq.n	86de <mpsc_pbuf_alloc+0xb8>
			   !k_is_in_isr()) {
    86d6:	f001 fb8c 	bl	9df2 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    86da:	4604      	mov	r4, r0
    86dc:	b188      	cbz	r0, 8702 <mpsc_pbuf_alloc+0xdc>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    86de:	692a      	ldr	r2, [r5, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    86e0:	f10d 030b 	add.w	r3, sp, #11
    86e4:	f3c2 0240 	ubfx	r2, r2, #1, #1
    86e8:	9903      	ldr	r1, [sp, #12]
    86ea:	4628      	mov	r0, r5
    86ec:	f7ff fef0 	bl	84d0 <drop_item_locked>
			cont = dropped_item != NULL;
    86f0:	4680      	mov	r8, r0
    86f2:	1e04      	subs	r4, r0, #0
    86f4:	bf18      	it	ne
    86f6:	2401      	movne	r4, #1
    86f8:	e7a9      	b.n	864e <mpsc_pbuf_alloc+0x28>
			add_skip_item(buffer, free_wlen);
    86fa:	4628      	mov	r0, r5
    86fc:	f7ff febf 	bl	847e <add_skip_item>
			cont = true;
    8700:	e7a5      	b.n	864e <mpsc_pbuf_alloc+0x28>
	__asm__ volatile(
    8702:	9b01      	ldr	r3, [sp, #4]
    8704:	f383 8811 	msr	BASEPRI, r3
    8708:	f3bf 8f6f 	isb	sy
			err = k_sem_take(&buffer->sem, timeout);
    870c:	f105 0028 	add.w	r0, r5, #40	; 0x28
	return z_impl_k_sem_take(sem, timeout);
    8710:	464a      	mov	r2, r9
    8712:	4653      	mov	r3, sl
    8714:	f7fe f9b0 	bl	6a78 <z_impl_k_sem_take>
	__asm__ volatile(
    8718:	f04f 0320 	mov.w	r3, #32
    871c:	f3ef 8611 	mrs	r6, BASEPRI
    8720:	f383 8812 	msr	BASEPRI_MAX, r3
    8724:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    8728:	2800      	cmp	r0, #0
    872a:	d190      	bne.n	864e <mpsc_pbuf_alloc+0x28>
				cont = true;
    872c:	2401      	movs	r4, #1
    872e:	e78e      	b.n	864e <mpsc_pbuf_alloc+0x28>
			dropped_item = NULL;
    8730:	f04f 0800 	mov.w	r8, #0
    8734:	e79e      	b.n	8674 <mpsc_pbuf_alloc+0x4e>
		return NULL;
    8736:	f04f 0b00 	mov.w	fp, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    873a:	4658      	mov	r0, fp
    873c:	b005      	add	sp, #20
    873e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008742 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    8742:	b570      	push	{r4, r5, r6, lr}
    8744:	4604      	mov	r4, r0
    8746:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    8748:	6983      	ldr	r3, [r0, #24]
    874a:	4608      	mov	r0, r1
    874c:	4798      	blx	r3
    874e:	f04f 0320 	mov.w	r3, #32
    8752:	f3ef 8611 	mrs	r6, BASEPRI
    8756:	f383 8812 	msr	BASEPRI_MAX, r3
    875a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    875e:	782b      	ldrb	r3, [r5, #0]
    8760:	f043 0301 	orr.w	r3, r3, #1
    8764:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    8766:	6863      	ldr	r3, [r4, #4]
	uint32_t i = idx + val;
    8768:	4418      	add	r0, r3
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    876a:	6923      	ldr	r3, [r4, #16]
    876c:	f013 0f01 	tst.w	r3, #1
    8770:	d104      	bne.n	877c <mpsc_pbuf_commit+0x3a>
	return (i >= buffer->size) ? i - buffer->size : i;
    8772:	6a23      	ldr	r3, [r4, #32]
    8774:	4298      	cmp	r0, r3
    8776:	d304      	bcc.n	8782 <mpsc_pbuf_commit+0x40>
    8778:	1ac0      	subs	r0, r0, r3
    877a:	e002      	b.n	8782 <mpsc_pbuf_commit+0x40>
		return i & (buffer->size - 1);
    877c:	6a23      	ldr	r3, [r4, #32]
    877e:	3b01      	subs	r3, #1
    8780:	4018      	ands	r0, r3
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    8782:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    8784:	4620      	mov	r0, r4
    8786:	f7ff fe67 	bl	8458 <max_utilization_update>
	__asm__ volatile(
    878a:	f386 8811 	msr	BASEPRI, r6
    878e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    8792:	bd70      	pop	{r4, r5, r6, pc}

00008794 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    8794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8796:	4604      	mov	r4, r0
    8798:	e039      	b.n	880e <mpsc_pbuf_claim+0x7a>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    879a:	1a9b      	subs	r3, r3, r2
		return false;
    879c:	e045      	b.n	882a <mpsc_pbuf_claim+0x96>
		return item->skip.len;
    879e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    87a2:	0880      	lsrs	r0, r0, #2
    87a4:	d157      	bne.n	8856 <mpsc_pbuf_claim+0xc2>
    87a6:	e04d      	b.n	8844 <mpsc_pbuf_claim+0xb0>
		return i & (buffer->size - 1);
    87a8:	6a21      	ldr	r1, [r4, #32]
    87aa:	3901      	subs	r1, #1
    87ac:	400b      	ands	r3, r1
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);

				buffer->tmp_rd_idx =
    87ae:	60a3      	str	r3, [r4, #8]
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    87b0:	68e3      	ldr	r3, [r4, #12]
	uint32_t i = idx + val;
    87b2:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    87b4:	b922      	cbnz	r2, 87c0 <mpsc_pbuf_claim+0x2c>
	return (i >= buffer->size) ? i - buffer->size : i;
    87b6:	6a22      	ldr	r2, [r4, #32]
    87b8:	4293      	cmp	r3, r2
    87ba:	d304      	bcc.n	87c6 <mpsc_pbuf_claim+0x32>
    87bc:	1a9b      	subs	r3, r3, r2
    87be:	e002      	b.n	87c6 <mpsc_pbuf_claim+0x32>
		return i & (buffer->size - 1);
    87c0:	6a22      	ldr	r2, [r4, #32]
    87c2:	3a01      	subs	r2, #1
    87c4:	4013      	ands	r3, r2
				buffer->rd_idx =
    87c6:	60e3      	str	r3, [r4, #12]
				cont = true;
    87c8:	2301      	movs	r3, #1
			if (skip || !is_valid(item)) {
    87ca:	e01b      	b.n	8804 <mpsc_pbuf_claim+0x70>
			} else {
				item->hdr.busy = 1;
    87cc:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
    87d0:	f043 0302 	orr.w	r3, r3, #2
    87d4:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    87d8:	68a7      	ldr	r7, [r4, #8]
						buffer->get_wlen(item));
    87da:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    87dc:	4630      	mov	r0, r6
    87de:	4798      	blx	r3
	uint32_t i = idx + val;
    87e0:	4438      	add	r0, r7
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    87e2:	6923      	ldr	r3, [r4, #16]
    87e4:	f013 0f01 	tst.w	r3, #1
    87e8:	d104      	bne.n	87f4 <mpsc_pbuf_claim+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
    87ea:	6a23      	ldr	r3, [r4, #32]
    87ec:	4298      	cmp	r0, r3
    87ee:	d304      	bcc.n	87fa <mpsc_pbuf_claim+0x66>
    87f0:	1ac0      	subs	r0, r0, r3
    87f2:	e002      	b.n	87fa <mpsc_pbuf_claim+0x66>
		return i & (buffer->size - 1);
    87f4:	6a23      	ldr	r3, [r4, #32]
    87f6:	3b01      	subs	r3, #1
    87f8:	4018      	ands	r0, r3
				buffer->tmp_rd_idx =
    87fa:	60a0      	str	r0, [r4, #8]
		cont = false;
    87fc:	2300      	movs	r3, #0
    87fe:	e001      	b.n	8804 <mpsc_pbuf_claim+0x70>
    8800:	2300      	movs	r3, #0
			item = NULL;
    8802:	461e      	mov	r6, r3
    8804:	f385 8811 	msr	BASEPRI, r5
    8808:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    880c:	b38b      	cbz	r3, 8872 <mpsc_pbuf_claim+0xde>
	__asm__ volatile(
    880e:	f04f 0320 	mov.w	r3, #32
    8812:	f3ef 8511 	mrs	r5, BASEPRI
    8816:	f383 8812 	msr	BASEPRI_MAX, r3
    881a:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    881e:	68a2      	ldr	r2, [r4, #8]
    8820:	6863      	ldr	r3, [r4, #4]
    8822:	429a      	cmp	r2, r3
    8824:	d9b9      	bls.n	879a <mpsc_pbuf_claim+0x6>
	*res = buffer->size - buffer->tmp_rd_idx;
    8826:	6a23      	ldr	r3, [r4, #32]
    8828:	1a9b      	subs	r3, r3, r2
			&buffer->buf[buffer->tmp_rd_idx];
    882a:	69e1      	ldr	r1, [r4, #28]
		item = (union mpsc_pbuf_generic *)
    882c:	eb01 0682 	add.w	r6, r1, r2, lsl #2
		if (!a || is_invalid(item)) {
    8830:	2b00      	cmp	r3, #0
    8832:	d0e5      	beq.n	8800 <mpsc_pbuf_claim+0x6c>
	return !item->hdr.valid && !item->hdr.busy;
    8834:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
		if (!a || is_invalid(item)) {
    8838:	f013 0303 	ands.w	r3, r3, #3
    883c:	d016      	beq.n	886c <mpsc_pbuf_claim+0xd8>
	if (item->hdr.busy && !item->hdr.valid) {
    883e:	2b02      	cmp	r3, #2
    8840:	d0ad      	beq.n	879e <mpsc_pbuf_claim+0xa>
	return 0;
    8842:	2000      	movs	r0, #0
	return item->hdr.valid;
    8844:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
			if (skip || !is_valid(item)) {
    8848:	f013 0f01 	tst.w	r3, #1
    884c:	d1be      	bne.n	87cc <mpsc_pbuf_claim+0x38>
					skip ? skip : buffer->get_wlen(item);
    884e:	b910      	cbnz	r0, 8856 <mpsc_pbuf_claim+0xc2>
    8850:	69a3      	ldr	r3, [r4, #24]
    8852:	4630      	mov	r0, r6
    8854:	4798      	blx	r3
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    8856:	68a3      	ldr	r3, [r4, #8]
	uint32_t i = idx + val;
    8858:	4403      	add	r3, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    885a:	6922      	ldr	r2, [r4, #16]
    885c:	f012 0201 	ands.w	r2, r2, #1
    8860:	d1a2      	bne.n	87a8 <mpsc_pbuf_claim+0x14>
	return (i >= buffer->size) ? i - buffer->size : i;
    8862:	6a21      	ldr	r1, [r4, #32]
    8864:	428b      	cmp	r3, r1
    8866:	d3a2      	bcc.n	87ae <mpsc_pbuf_claim+0x1a>
    8868:	1a5b      	subs	r3, r3, r1
    886a:	e7a0      	b.n	87ae <mpsc_pbuf_claim+0x1a>
		cont = false;
    886c:	2300      	movs	r3, #0
			item = NULL;
    886e:	461e      	mov	r6, r3
    8870:	e7c8      	b.n	8804 <mpsc_pbuf_claim+0x70>

	return item;
}
    8872:	4630      	mov	r0, r6
    8874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008876 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    8876:	b538      	push	{r3, r4, r5, lr}
    8878:	4604      	mov	r4, r0
    887a:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    887c:	6983      	ldr	r3, [r0, #24]
    887e:	4608      	mov	r0, r1
    8880:	4798      	blx	r3
    8882:	f04f 0220 	mov.w	r2, #32
    8886:	f3ef 8311 	mrs	r3, BASEPRI
    888a:	f382 8812 	msr	BASEPRI_MAX, r2
    888e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    8892:	782a      	ldrb	r2, [r5, #0]
    8894:	f36f 0200 	bfc	r2, #0, #1
    8898:	702a      	strb	r2, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    889a:	6922      	ldr	r2, [r4, #16]
    889c:	f012 0f02 	tst.w	r2, #2
    88a0:	d00a      	beq.n	88b8 <mpsc_pbuf_free+0x42>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    88a2:	69e2      	ldr	r2, [r4, #28]
    88a4:	68e1      	ldr	r1, [r4, #12]
    88a6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    88aa:	42aa      	cmp	r2, r5
    88ac:	d004      	beq.n	88b8 <mpsc_pbuf_free+0x42>
		witem->hdr.busy = 0;
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
	} else {
		witem->skip.len = wlen;
    88ae:	682a      	ldr	r2, [r5, #0]
    88b0:	f360 029f 	bfi	r2, r0, #2, #30
    88b4:	602a      	str	r2, [r5, #0]
    88b6:	e012      	b.n	88de <mpsc_pbuf_free+0x68>
		witem->hdr.busy = 0;
    88b8:	782a      	ldrb	r2, [r5, #0]
    88ba:	f36f 0241 	bfc	r2, #1, #1
    88be:	702a      	strb	r2, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    88c0:	68e2      	ldr	r2, [r4, #12]
	uint32_t i = idx + val;
    88c2:	4402      	add	r2, r0
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    88c4:	6921      	ldr	r1, [r4, #16]
    88c6:	f011 0f01 	tst.w	r1, #1
    88ca:	d104      	bne.n	88d6 <mpsc_pbuf_free+0x60>
	return (i >= buffer->size) ? i - buffer->size : i;
    88cc:	6a21      	ldr	r1, [r4, #32]
    88ce:	428a      	cmp	r2, r1
    88d0:	d304      	bcc.n	88dc <mpsc_pbuf_free+0x66>
    88d2:	1a52      	subs	r2, r2, r1
    88d4:	e002      	b.n	88dc <mpsc_pbuf_free+0x66>
		return i & (buffer->size - 1);
    88d6:	6a21      	ldr	r1, [r4, #32]
    88d8:	3901      	subs	r1, #1
    88da:	400a      	ands	r2, r1
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    88dc:	60e2      	str	r2, [r4, #12]
	__asm__ volatile(
    88de:	f383 8811 	msr	BASEPRI, r3
    88e2:	f3bf 8f6f 	isb	sy
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
    88e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
	z_impl_k_sem_give(sem);
    88ea:	f7fe f8a1 	bl	6a30 <z_impl_k_sem_give>
}
    88ee:	bd38      	pop	{r3, r4, r5, pc}

000088f0 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    88f0:	6883      	ldr	r3, [r0, #8]
    88f2:	6842      	ldr	r2, [r0, #4]
    88f4:	4293      	cmp	r3, r2
    88f6:	d905      	bls.n	8904 <mpsc_pbuf_is_pending+0x14>
	*res = buffer->size - buffer->tmp_rd_idx;
    88f8:	6a00      	ldr	r0, [r0, #32]
    88fa:	1ac0      	subs	r0, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    88fc:	3800      	subs	r0, #0
    88fe:	bf18      	it	ne
    8900:	2001      	movne	r0, #1
    8902:	4770      	bx	lr
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    8904:	1ad0      	subs	r0, r2, r3
		return false;
    8906:	e7f9      	b.n	88fc <mpsc_pbuf_is_pending+0xc>

00008908 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    8908:	4770      	bx	lr

0000890a <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
    890a:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
    890c:	f7f8 fe42 	bl	1594 <nrfx_coredep_delay_us>
}
    8910:	bd08      	pop	{r3, pc}

00008912 <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    8912:	2301      	movs	r3, #1
    8914:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    8918:	f3bf 8f4f 	dsb	sy
        __WFE();
    891c:	bf20      	wfe
    while (true)
    891e:	e7fd      	b.n	891c <nrf_regulators_system_off+0xa>

00008920 <pm_state_exit_post_ops>:
    8920:	2300      	movs	r3, #0
    8922:	f383 8811 	msr	BASEPRI, r3
    8926:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    892a:	4770      	bx	lr

0000892c <mbox_register_callback>:
 * @retval 0 On success, negative value on error.
 */
static inline int mbox_register_callback(const struct mbox_channel *channel,
					 mbox_callback_t cb,
					 void *user_data)
{
    892c:	b510      	push	{r4, lr}
    892e:	4684      	mov	ip, r0
    8930:	4613      	mov	r3, r2
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
    8932:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
    8934:	6882      	ldr	r2, [r0, #8]

	if (api->register_callback == NULL) {
    8936:	6854      	ldr	r4, [r2, #4]
    8938:	b124      	cbz	r4, 8944 <mbox_register_callback+0x18>
		return -ENOSYS;
	}

	return api->register_callback(channel->dev, channel->id, cb, user_data);
    893a:	460a      	mov	r2, r1
    893c:	f8dc 1004 	ldr.w	r1, [ip, #4]
    8940:	47a0      	blx	r4
}
    8942:	bd10      	pop	{r4, pc}
		return -ENOSYS;
    8944:	f06f 0057 	mvn.w	r0, #87	; 0x57
    8948:	e7fb      	b.n	8942 <mbox_register_callback+0x16>

0000894a <z_impl_mbox_set_enabled>:
 * @retval -EINVAL If it isn't an inbound channel.
 */
__syscall int mbox_set_enabled(const struct mbox_channel *channel, bool enable);

static inline int z_impl_mbox_set_enabled(const struct mbox_channel *channel, bool enable)
{
    894a:	b510      	push	{r4, lr}
    894c:	4603      	mov	r3, r0
    894e:	460a      	mov	r2, r1
	const struct mbox_driver_api *api =
		(const struct mbox_driver_api *)channel->dev->api;
    8950:	6800      	ldr	r0, [r0, #0]
	const struct mbox_driver_api *api =
    8952:	6881      	ldr	r1, [r0, #8]

	if (api->set_enabled == NULL) {
    8954:	690c      	ldr	r4, [r1, #16]
    8956:	b114      	cbz	r4, 895e <z_impl_mbox_set_enabled+0x14>
		return -ENOSYS;
	}

	return api->set_enabled(channel->dev, channel->id, enable);
    8958:	6859      	ldr	r1, [r3, #4]
    895a:	47a0      	blx	r4
}
    895c:	bd10      	pop	{r4, pc}
		return -ENOSYS;
    895e:	f06f 0057 	mvn.w	r0, #87	; 0x57
    8962:	e7fb      	b.n	895c <z_impl_mbox_set_enabled+0x12>

00008964 <rtc_cb>:
{
    8964:	b510      	push	{r4, lr}
    8966:	9c02      	ldr	r4, [sp, #8]
	ppi_rtc_to_ipc(channels, false);
    8968:	2100      	movs	r1, #0
    896a:	4620      	mov	r0, r4
    896c:	f7f8 fe90 	bl	1690 <ppi_rtc_to_ipc>
		free_resources(channels);
    8970:	4620      	mov	r0, r4
    8972:	f7f8 fe7b 	bl	166c <free_resources>
}
    8976:	bd10      	pop	{r4, pc}

00008978 <mbox_callback>:
{
    8978:	b510      	push	{r4, lr}
    897a:	b082      	sub	sp, #8
    897c:	4614      	mov	r4, r2
	channel->dev = dev;
    897e:	9000      	str	r0, [sp, #0]
	channel->id = ch_id;
    8980:	9101      	str	r1, [sp, #4]
    8982:	2100      	movs	r1, #0
    8984:	4668      	mov	r0, sp
    8986:	f7ff ffe0 	bl	894a <z_impl_mbox_set_enabled>
	remote_callback(user_data);
    898a:	4620      	mov	r0, r4
    898c:	f7f8 feba 	bl	1704 <remote_callback>
}
    8990:	b002      	add	sp, #8
    8992:	bd10      	pop	{r4, pc}

00008994 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    8994:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    8996:	f013 0f04 	tst.w	r3, #4
    899a:	d001      	beq.n	89a0 <log_msg_generic_get_wlen+0xc>
	return 0;
    899c:	2000      	movs	r0, #0
}
    899e:	4770      	bx	lr
		return log_msg_get_total_wlen(msg->hdr.desc);
    89a0:	6803      	ldr	r3, [r0, #0]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    89a2:	f3c3 2049 	ubfx	r0, r3, #9, #10
    89a6:	f3c3 43cb 	ubfx	r3, r3, #19, #12
    89aa:	4418      	add	r0, r3
    89ac:	3017      	adds	r0, #23
    89ae:	f020 0007 	bic.w	r0, r0, #7
    89b2:	0880      	lsrs	r0, r0, #2
		return log_msg_get_total_wlen(msg->hdr.desc);
    89b4:	4770      	bx	lr

000089b6 <dummy_timestamp>:
}
    89b6:	2000      	movs	r0, #0
    89b8:	4770      	bx	lr

000089ba <msg_filter_check>:
}
    89ba:	2001      	movs	r0, #1
    89bc:	4770      	bx	lr

000089be <default_get_timestamp>:
{
    89be:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    89c0:	f000 ff0f 	bl	97e2 <sys_clock_cycle_get_32>
}
    89c4:	bd08      	pop	{r3, pc}

000089c6 <k_msleep>:
{
    89c6:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    89c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    89cc:	17c1      	asrs	r1, r0, #31
    89ce:	03c9      	lsls	r1, r1, #15
    89d0:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    89d4:	03c0      	lsls	r0, r0, #15
    89d6:	f240 33e7 	movw	r3, #999	; 0x3e7
    89da:	18c0      	adds	r0, r0, r3
    89dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    89e0:	f04f 0300 	mov.w	r3, #0
    89e4:	f141 0100 	adc.w	r1, r1, #0
    89e8:	f7f7 fbb4 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    89ec:	f7fe fbf0 	bl	71d0 <z_impl_k_sleep>
}
    89f0:	bd08      	pop	{r3, pc}

000089f2 <msg_alloc>:
{
    89f2:	b508      	push	{r3, lr}
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    89f4:	2200      	movs	r2, #0
    89f6:	2300      	movs	r3, #0
    89f8:	f7ff fe15 	bl	8626 <mpsc_pbuf_alloc>
}
    89fc:	bd08      	pop	{r3, pc}

000089fe <msg_free>:
{
    89fe:	b508      	push	{r3, lr}
	mpsc_pbuf_free(buffer, &msg->buf);
    8a00:	f7ff ff39 	bl	8876 <mpsc_pbuf_free>
}
    8a04:	bd08      	pop	{r3, pc}

00008a06 <msg_pending>:
{
    8a06:	b508      	push	{r3, lr}
	return mpsc_pbuf_is_pending(buffer);
    8a08:	f7ff ff72 	bl	88f0 <mpsc_pbuf_is_pending>
}
    8a0c:	bd08      	pop	{r3, pc}

00008a0e <z_log_notify_drop>:
 */
bool z_log_msg_pending(void);

static inline void z_log_notify_drop(const struct mpsc_pbuf_buffer *buffer,
				     const union mpsc_pbuf_generic *item)
{
    8a0e:	b508      	push	{r3, lr}
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    8a10:	2001      	movs	r0, #1
    8a12:	f7f9 f82d 	bl	1a70 <z_log_dropped>
}
    8a16:	bd08      	pop	{r3, pc}

00008a18 <z_log_msg_claim>:
{
    8a18:	b508      	push	{r3, lr}
	return z_log_msg_local_claim();
    8a1a:	f7f9 f89f 	bl	1b5c <z_log_msg_local_claim>
}
    8a1e:	bd08      	pop	{r3, pc}

00008a20 <msg_commit>:
{
    8a20:	b508      	push	{r3, lr}
	mpsc_pbuf_commit(buffer, &m->buf);
    8a22:	f7ff fe8e 	bl	8742 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
    8a26:	f7f9 f933 	bl	1c90 <z_log_msg_post_finalize>
}
    8a2a:	bd08      	pop	{r3, pc}

00008a2c <z_log_get_tag>:
}
    8a2c:	2000      	movs	r0, #0
    8a2e:	4770      	bx	lr

00008a30 <z_cbprintf_cpy>:
{
    8a30:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    8a32:	6853      	ldr	r3, [r2, #4]
    8a34:	6896      	ldr	r6, [r2, #8]
    8a36:	1b9b      	subs	r3, r3, r6
    8a38:	428b      	cmp	r3, r1
    8a3a:	d30c      	bcc.n	8a56 <z_cbprintf_cpy+0x26>
    8a3c:	460c      	mov	r4, r1
    8a3e:	4615      	mov	r5, r2
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    8a40:	6813      	ldr	r3, [r2, #0]
    8a42:	460a      	mov	r2, r1
    8a44:	4601      	mov	r1, r0
    8a46:	1998      	adds	r0, r3, r6
    8a48:	f000 fa05 	bl	8e56 <memcpy>
	desc->off += len;
    8a4c:	68ab      	ldr	r3, [r5, #8]
    8a4e:	4423      	add	r3, r4
    8a50:	60ab      	str	r3, [r5, #8]
	return len;
    8a52:	4620      	mov	r0, r4
}
    8a54:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    8a56:	f06f 001b 	mvn.w	r0, #27
    8a5a:	e7fb      	b.n	8a54 <z_cbprintf_cpy+0x24>

00008a5c <z_log_msg_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg_finalize(struct log_msg *msg, const void *source,
			 const struct log_msg_desc desc, const void *data)
{
    8a5c:	b570      	push	{r4, r5, r6, lr}
	if (!msg) {
    8a5e:	b190      	cbz	r0, 8a86 <z_log_msg_finalize+0x2a>
    8a60:	460e      	mov	r6, r1
    8a62:	4614      	mov	r4, r2
    8a64:	4619      	mov	r1, r3
    8a66:	4605      	mov	r5, r0
		z_log_dropped(false);

		return;
	}

	if (data) {
    8a68:	b13b      	cbz	r3, 8a7a <z_log_msg_finalize+0x1e>
		uint8_t *d = msg->data + desc.package_len;
    8a6a:	3010      	adds	r0, #16
    8a6c:	f3c2 2349 	ubfx	r3, r2, #9, #10

		memcpy(d, data, desc.data_len);
    8a70:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    8a74:	4418      	add	r0, r3
    8a76:	f000 f9ee 	bl	8e56 <memcpy>
	}

	msg->hdr.desc = desc;
    8a7a:	602c      	str	r4, [r5, #0]
	msg->hdr.source = source;
    8a7c:	606e      	str	r6, [r5, #4]
	z_log_msg_commit(msg);
    8a7e:	4628      	mov	r0, r5
    8a80:	f7f9 f946 	bl	1d10 <z_log_msg_commit>
}
    8a84:	bd70      	pop	{r4, r5, r6, pc}
		z_log_dropped(false);
    8a86:	f7f8 fff3 	bl	1a70 <z_log_dropped>
		return;
    8a8a:	e7fb      	b.n	8a84 <z_log_msg_finalize+0x28>

00008a8c <z_impl_z_log_msg_static_create>:

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    8a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8a90:	b08a      	sub	sp, #40	; 0x28
    8a92:	4605      	mov	r5, r0
    8a94:	461e      	mov	r6, r3

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    8a96:	460f      	mov	r7, r1
	int inlen = desc.package_len;
    8a98:	f3c1 2449 	ubfx	r4, r1, #9, #10
	struct log_msg *msg;

	if (inlen > 0) {
    8a9c:	b364      	cbz	r4, 8af8 <z_impl_z_log_msg_static_create+0x6c>
    8a9e:	4690      	mov	r8, r2
	struct z_cbprintf_buf_desc buf_desc = {
    8aa0:	2200      	movs	r2, #0
    8aa2:	9207      	str	r2, [sp, #28]
    8aa4:	9208      	str	r2, [sp, #32]
    8aa6:	9209      	str	r2, [sp, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    8aa8:	2304      	movs	r3, #4
    8aaa:	9302      	str	r3, [sp, #8]
    8aac:	ab05      	add	r3, sp, #20
    8aae:	9301      	str	r3, [sp, #4]
    8ab0:	230a      	movs	r3, #10
    8ab2:	9300      	str	r3, [sp, #0]
    8ab4:	ab07      	add	r3, sp, #28
    8ab6:	4621      	mov	r1, r4
    8ab8:	4640      	mov	r0, r8
    8aba:	f7f7 fed5 	bl	868 <cbprintf_package_convert>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    8abe:	f360 2752 	bfi	r7, r0, #9, #10
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    8ac2:	f3c0 0909 	ubfx	r9, r0, #0, #10
    8ac6:	f3c7 41cb 	ubfx	r1, r7, #19, #12
    8aca:	4449      	add	r1, r9
    8acc:	3117      	adds	r1, #23
    8ace:	f021 0107 	bic.w	r1, r1, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    8ad2:	0888      	lsrs	r0, r1, #2
    8ad4:	f7f9 f83a 	bl	1b4c <z_log_msg_alloc>
		if (msg) {
    8ad8:	4682      	mov	sl, r0
    8ada:	b1b8      	cbz	r0, 8b0c <z_impl_z_log_msg_static_create+0x80>
			len = cbprintf_package_copy(package, inlen,
    8adc:	2304      	movs	r3, #4
    8ade:	9302      	str	r3, [sp, #8]
    8ae0:	ab05      	add	r3, sp, #20
    8ae2:	9301      	str	r3, [sp, #4]
    8ae4:	230a      	movs	r3, #10
    8ae6:	9300      	str	r3, [sp, #0]
    8ae8:	464b      	mov	r3, r9
    8aea:	f100 0210 	add.w	r2, r0, #16
    8aee:	4621      	mov	r1, r4
    8af0:	4640      	mov	r0, r8
    8af2:	f7f9 f983 	bl	1dfc <cbprintf_package_copy>
						    msg->data, out_desc.package_len,
						    flags, strl, ARRAY_SIZE(strl));
			__ASSERT_NO_MSG(len >= 0);
    8af6:	e009      	b.n	8b0c <z_impl_z_log_msg_static_create+0x80>
    8af8:	f3c1 41cb 	ubfx	r1, r1, #19, #12
    8afc:	440c      	add	r4, r1
    8afe:	3417      	adds	r4, #23
    8b00:	f024 0407 	bic.w	r4, r4, #7
		}
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    8b04:	08a0      	lsrs	r0, r4, #2
    8b06:	f7f9 f821 	bl	1b4c <z_log_msg_alloc>
    8b0a:	4682      	mov	sl, r0
	}

	z_log_msg_finalize(msg, source, out_desc, data);
    8b0c:	4633      	mov	r3, r6
    8b0e:	463a      	mov	r2, r7
    8b10:	4629      	mov	r1, r5
    8b12:	4650      	mov	r0, sl
    8b14:	f7ff ffa2 	bl	8a5c <z_log_msg_finalize>
}
    8b18:	b00a      	add	sp, #40	; 0x28
    8b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008b1e <buffer_write>:
{
    8b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8b20:	4607      	mov	r7, r0
    8b22:	460d      	mov	r5, r1
    8b24:	4614      	mov	r4, r2
    8b26:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    8b28:	4632      	mov	r2, r6
    8b2a:	4621      	mov	r1, r4
    8b2c:	4628      	mov	r0, r5
    8b2e:	47b8      	blx	r7
		buf += processed;
    8b30:	4405      	add	r5, r0
	} while (len != 0);
    8b32:	1a24      	subs	r4, r4, r0
    8b34:	d1f8      	bne.n	8b28 <buffer_write+0xa>
}
    8b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008b38 <cbvprintf>:
{
    8b38:	b510      	push	{r4, lr}
    8b3a:	b082      	sub	sp, #8
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    8b3c:	2400      	movs	r4, #0
    8b3e:	9400      	str	r4, [sp, #0]
    8b40:	f7f8 fa48 	bl	fd4 <z_cbvprintf_impl>
}
    8b44:	b002      	add	sp, #8
    8b46:	bd10      	pop	{r4, pc}

00008b48 <color_prefix>:
{
    8b48:	b508      	push	{r3, lr}
    8b4a:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    8b4c:	2201      	movs	r2, #1
    8b4e:	f7f9 f9c7 	bl	1ee0 <color_print>
}
    8b52:	bd08      	pop	{r3, pc}

00008b54 <color_postfix>:
{
    8b54:	b508      	push	{r3, lr}
    8b56:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    8b58:	2200      	movs	r2, #0
    8b5a:	f7f9 f9c1 	bl	1ee0 <color_print>
}
    8b5e:	bd08      	pop	{r3, pc}

00008b60 <postfix_print>:
{
    8b60:	b538      	push	{r3, r4, r5, lr}
    8b62:	4605      	mov	r5, r0
    8b64:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    8b66:	f001 0101 	and.w	r1, r1, #1
    8b6a:	f7ff fff3 	bl	8b54 <color_postfix>
	newline_print(output, flags);
    8b6e:	4621      	mov	r1, r4
    8b70:	4628      	mov	r0, r5
    8b72:	f7f9 fa3b 	bl	1fec <newline_print>
}
    8b76:	bd38      	pop	{r3, r4, r5, pc}

00008b78 <log_msg_hexdump>:
{
    8b78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8b7c:	b083      	sub	sp, #12
    8b7e:	4680      	mov	r8, r0
    8b80:	460e      	mov	r6, r1
    8b82:	4615      	mov	r5, r2
    8b84:	461f      	mov	r7, r3
    8b86:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    8b8a:	462c      	mov	r4, r5
    8b8c:	2d10      	cmp	r5, #16
    8b8e:	bf28      	it	cs
    8b90:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    8b92:	f8cd 9000 	str.w	r9, [sp]
    8b96:	463b      	mov	r3, r7
    8b98:	4622      	mov	r2, r4
    8b9a:	4631      	mov	r1, r6
    8b9c:	4640      	mov	r0, r8
    8b9e:	f7f9 fa39 	bl	2014 <hexdump_line_print>
		data += length;
    8ba2:	4426      	add	r6, r4
	} while (len);
    8ba4:	1b2d      	subs	r5, r5, r4
    8ba6:	d1f0      	bne.n	8b8a <log_msg_hexdump+0x12>
}
    8ba8:	b003      	add	sp, #12
    8baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00008bae <log_output_flush>:
{
    8bae:	b510      	push	{r4, lr}
    8bb0:	4604      	mov	r4, r0
		     output->control_block->offset,
    8bb2:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    8bb4:	6853      	ldr	r3, [r2, #4]
    8bb6:	6812      	ldr	r2, [r2, #0]
    8bb8:	6881      	ldr	r1, [r0, #8]
    8bba:	6800      	ldr	r0, [r0, #0]
    8bbc:	f7ff ffaf 	bl	8b1e <buffer_write>
	output->control_block->offset = 0;
    8bc0:	6863      	ldr	r3, [r4, #4]
    8bc2:	2200      	movs	r2, #0
    8bc4:	601a      	str	r2, [r3, #0]
}
    8bc6:	bd10      	pop	{r4, pc}

00008bc8 <out_func>:
{
    8bc8:	b538      	push	{r3, r4, r5, lr}
    8bca:	4605      	mov	r5, r0
    8bcc:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    8bce:	684b      	ldr	r3, [r1, #4]
    8bd0:	681a      	ldr	r2, [r3, #0]
    8bd2:	68cb      	ldr	r3, [r1, #12]
    8bd4:	429a      	cmp	r2, r3
    8bd6:	d00b      	beq.n	8bf0 <out_func+0x28>
	idx = atomic_inc(&out_ctx->control_block->offset);
    8bd8:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    8bda:	e8d3 2fef 	ldaex	r2, [r3]
    8bde:	1c51      	adds	r1, r2, #1
    8be0:	e8c3 1fe0 	stlex	r0, r1, [r3]
    8be4:	2800      	cmp	r0, #0
    8be6:	d1f8      	bne.n	8bda <out_func+0x12>
	out_ctx->buf[idx] = (uint8_t)c;
    8be8:	68a3      	ldr	r3, [r4, #8]
    8bea:	549d      	strb	r5, [r3, r2]
}
    8bec:	2000      	movs	r0, #0
    8bee:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    8bf0:	4608      	mov	r0, r1
    8bf2:	f7ff ffdc 	bl	8bae <log_output_flush>
    8bf6:	e7ef      	b.n	8bd8 <out_func+0x10>

00008bf8 <cr_out_func>:
{
    8bf8:	b538      	push	{r3, r4, r5, lr}
    8bfa:	4604      	mov	r4, r0
    8bfc:	460d      	mov	r5, r1
	if (c == '\n') {
    8bfe:	280a      	cmp	r0, #10
    8c00:	d005      	beq.n	8c0e <cr_out_func+0x16>
	out_func(c, ctx);
    8c02:	4629      	mov	r1, r5
    8c04:	4620      	mov	r0, r4
    8c06:	f7ff ffdf 	bl	8bc8 <out_func>
}
    8c0a:	2000      	movs	r0, #0
    8c0c:	bd38      	pop	{r3, r4, r5, pc}
		out_func((int)'\r', ctx);
    8c0e:	200d      	movs	r0, #13
    8c10:	f7ff ffda 	bl	8bc8 <out_func>
    8c14:	e7f5      	b.n	8c02 <cr_out_func+0xa>

00008c16 <log_backend_uart_init>:
}
    8c16:	4770      	bx	lr

00008c18 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    8c18:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    8c1a:	f001 021f 	and.w	r2, r1, #31
    8c1e:	2301      	movs	r3, #1
    8c20:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8c22:	0949      	lsrs	r1, r1, #5
    8c24:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    8c28:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8c2a:	e8d0 2fef 	ldaex	r2, [r0]
    8c2e:	ea02 0c01 	and.w	ip, r2, r1
    8c32:	e8c0 cfee 	stlex	lr, ip, [r0]
    8c36:	f1be 0f00 	cmp.w	lr, #0
    8c3a:	d1f6      	bne.n	8c2a <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
    8c3c:	4213      	tst	r3, r2
}
    8c3e:	bf14      	ite	ne
    8c40:	2001      	movne	r0, #1
    8c42:	2000      	moveq	r0, #0
    8c44:	f85d fb04 	ldr.w	pc, [sp], #4

00008c48 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    8c48:	f001 021f 	and.w	r2, r1, #31
    8c4c:	2301      	movs	r3, #1
    8c4e:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8c50:	0949      	lsrs	r1, r1, #5
    8c52:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8c56:	e8d0 2fef 	ldaex	r2, [r0]
    8c5a:	431a      	orrs	r2, r3
    8c5c:	e8c0 2fe1 	stlex	r1, r2, [r0]
    8c60:	2900      	cmp	r1, #0
    8c62:	d1f8      	bne.n	8c56 <atomic_set_bit+0xe>
}
    8c64:	4770      	bx	lr

00008c66 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    8c66:	2000      	movs	r0, #0
    8c68:	4770      	bx	lr

00008c6a <abort_function>:
{
    8c6a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    8c6c:	2000      	movs	r0, #0
    8c6e:	f7f8 fc7d 	bl	156c <sys_reboot>

00008c72 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8c72:	b538      	push	{r3, r4, r5, lr}
    8c74:	4604      	mov	r4, r0

	if (esf != NULL) {
    8c76:	460d      	mov	r5, r1
    8c78:	b111      	cbz	r1, 8c80 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    8c7a:	4608      	mov	r0, r1
    8c7c:	f7f9 fd9a 	bl	27b4 <esf_dump>
	}
	z_fatal_error(reason, esf);
    8c80:	4629      	mov	r1, r5
    8c82:	4620      	mov	r0, r4
    8c84:	f7fd fa86 	bl	6194 <z_fatal_error>
}
    8c88:	bd38      	pop	{r3, r4, r5, pc}

00008c8a <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    8c8a:	b508      	push	{r3, lr}
    8c8c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    8c8e:	6800      	ldr	r0, [r0, #0]
    8c90:	f7ff ffef 	bl	8c72 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    8c94:	bd08      	pop	{r3, pc}

00008c96 <arch_irq_enable>:
{
    8c96:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    8c98:	b240      	sxtb	r0, r0
    8c9a:	f7f9 feb1 	bl	2a00 <__NVIC_EnableIRQ>
}
    8c9e:	bd08      	pop	{r3, pc}

00008ca0 <arch_irq_disable>:
{
    8ca0:	b508      	push	{r3, lr}
	NVIC_DisableIRQ((IRQn_Type)irq);
    8ca2:	b240      	sxtb	r0, r0
    8ca4:	f7f9 feba 	bl	2a1c <__NVIC_DisableIRQ>
}
    8ca8:	bd08      	pop	{r3, pc}

00008caa <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    8caa:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    8cac:	3101      	adds	r1, #1
    8cae:	b240      	sxtb	r0, r0
    8cb0:	f7f9 fec6 	bl	2a40 <__NVIC_SetPriority>
}
    8cb4:	bd08      	pop	{r3, pc}

00008cb6 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    8cb6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8cb8:	2100      	movs	r1, #0
    8cba:	2001      	movs	r0, #1
    8cbc:	f7ff ffd9 	bl	8c72 <z_arm_fatal_error>
}
    8cc0:	bd08      	pop	{r3, pc}

00008cc2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    8cc2:	b508      	push	{r3, lr}
	handler();
    8cc4:	f7f9 fede 	bl	2a84 <z_SysNmiOnReset>
	z_arm_int_exit();
    8cc8:	f7f9 ffae 	bl	2c28 <z_arm_exc_exit>
}
    8ccc:	bd08      	pop	{r3, pc}

00008cce <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    8cce:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    8cd2:	f383 880b 	msr	PSPLIM, r3
}
    8cd6:	4770      	bx	lr

00008cd8 <memory_fault_recoverable>:
}
    8cd8:	2000      	movs	r0, #0
    8cda:	4770      	bx	lr

00008cdc <fault_handle>:
{
    8cdc:	b508      	push	{r3, lr}
	*recoverable = false;
    8cde:	2300      	movs	r3, #0
    8ce0:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    8ce2:	1ecb      	subs	r3, r1, #3
    8ce4:	2b09      	cmp	r3, #9
    8ce6:	d81a      	bhi.n	8d1e <fault_handle+0x42>
    8ce8:	e8df f003 	tbb	[pc, r3]
    8cec:	110d0905 	.word	0x110d0905
    8cf0:	19191919 	.word	0x19191919
    8cf4:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    8cf6:	4611      	mov	r1, r2
    8cf8:	f7fa fc88 	bl	360c <hard_fault>
}
    8cfc:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    8cfe:	2100      	movs	r1, #0
    8d00:	f7fa f802 	bl	2d08 <mem_manage_fault>
		break;
    8d04:	e7fa      	b.n	8cfc <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    8d06:	2100      	movs	r1, #0
    8d08:	f7fa f976 	bl	2ff8 <bus_fault>
		break;
    8d0c:	e7f6      	b.n	8cfc <fault_handle+0x20>
		reason = usage_fault(esf);
    8d0e:	f7fa fb07 	bl	3320 <usage_fault>
		break;
    8d12:	e7f3      	b.n	8cfc <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    8d14:	4611      	mov	r1, r2
    8d16:	f7fa fd97 	bl	3848 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    8d1a:	2000      	movs	r0, #0
		break;
    8d1c:	e7ee      	b.n	8cfc <fault_handle+0x20>
		reserved_exception(esf, fault);
    8d1e:	f7fa fdc3 	bl	38a8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    8d22:	2000      	movs	r0, #0
	return reason;
    8d24:	e7ea      	b.n	8cfc <fault_handle+0x20>

00008d26 <sys_arch_reboot>:
{
    8d26:	b508      	push	{r3, lr}
	NVIC_SystemReset();
    8d28:	f7fa feca 	bl	3ac0 <__NVIC_SystemReset>

00008d2c <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    8d2c:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    8d30:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    8d34:	d001      	beq.n	8d3a <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    8d36:	b2c0      	uxtb	r0, r0
    8d38:	4770      	bx	lr
	}

	return -EINVAL;
    8d3a:	f06f 0015 	mvn.w	r0, #21
}
    8d3e:	4770      	bx	lr

00008d40 <region_init>:
{
    8d40:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
    8d42:	680b      	ldr	r3, [r1, #0]
    8d44:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
    8d48:	7a0b      	ldrb	r3, [r1, #8]
    8d4a:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    8d4e:	68ca      	ldr	r2, [r1, #12]
    8d50:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    8d54:	095b      	lsrs	r3, r3, #5
    8d56:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
    8d5a:	f042 0201 	orr.w	r2, r2, #1
    8d5e:	ea4c 010e 	orr.w	r1, ip, lr
    8d62:	f7fa ff41 	bl	3be8 <mpu_set_region>
}
    8d66:	bd08      	pop	{r3, pc}

00008d68 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    8d68:	6843      	ldr	r3, [r0, #4]
		&&
    8d6a:	2b1f      	cmp	r3, #31
    8d6c:	d908      	bls.n	8d80 <mpu_partition_is_valid+0x18>
		&&
    8d6e:	f013 0f1f 	tst.w	r3, #31
    8d72:	d107      	bne.n	8d84 <mpu_partition_is_valid+0x1c>
		((part->start &
    8d74:	6803      	ldr	r3, [r0, #0]
		&&
    8d76:	f013 0f1f 	tst.w	r3, #31
    8d7a:	d005      	beq.n	8d88 <mpu_partition_is_valid+0x20>
    8d7c:	2000      	movs	r0, #0
    8d7e:	4770      	bx	lr
    8d80:	2000      	movs	r0, #0
    8d82:	4770      	bx	lr
    8d84:	2000      	movs	r0, #0
    8d86:	4770      	bx	lr
    8d88:	2001      	movs	r0, #1
}
    8d8a:	4770      	bx	lr

00008d8c <get_region_index>:
{
    8d8c:	b570      	push	{r4, r5, r6, lr}
    8d8e:	4604      	mov	r4, r0
    8d90:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    8d92:	f7ff ffcb 	bl	8d2c <arm_cmse_mpu_region_get>
    8d96:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    8d98:	4434      	add	r4, r6
    8d9a:	1e60      	subs	r0, r4, #1
    8d9c:	f7ff ffc6 	bl	8d2c <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    8da0:	4285      	cmp	r5, r0
    8da2:	d101      	bne.n	8da8 <get_region_index+0x1c>
}
    8da4:	4628      	mov	r0, r5
    8da6:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
    8da8:	f06f 0515 	mvn.w	r5, #21
    8dac:	e7fa      	b.n	8da4 <get_region_index+0x18>

00008dae <mpu_configure_region>:
{
    8dae:	b510      	push	{r4, lr}
    8db0:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
    8db2:	680b      	ldr	r3, [r1, #0]
    8db4:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
    8db6:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    8db8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    8dbc:	f89d 2008 	ldrb.w	r2, [sp, #8]
    8dc0:	f36c 0204 	bfi	r2, ip, #0, #5
    8dc4:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
    8dc8:	8949      	ldrh	r1, [r1, #10]
    8dca:	b2d2      	uxtb	r2, r2
    8dcc:	f361 1247 	bfi	r2, r1, #5, #3
    8dd0:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    8dd4:	f023 031f 	bic.w	r3, r3, #31
    8dd8:	4423      	add	r3, r4
    8dda:	3b01      	subs	r3, #1
    8ddc:	f023 031f 	bic.w	r3, r3, #31
    8de0:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    8de2:	4669      	mov	r1, sp
    8de4:	f7fa ff5a 	bl	3c9c <region_allocate_and_init>
}
    8de8:	b004      	add	sp, #16
    8dea:	bd10      	pop	{r4, pc}

00008dec <arm_core_mpu_configure_static_mpu_regions>:
{
    8dec:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    8dee:	f7fb f8eb 	bl	3fc8 <mpu_configure_static_mpu_regions>
}
    8df2:	bd08      	pop	{r3, pc}

00008df4 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    8df4:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    8df6:	f7fa ff21 	bl	3c3c <mpu_mark_areas_for_dynamic_regions>
}
    8dfa:	bd08      	pop	{r3, pc}

00008dfc <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    8dfc:	4603      	mov	r3, r0
    8dfe:	b1a2      	cbz	r2, 8e2a <strncpy+0x2e>
{
    8e00:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    8e02:	780c      	ldrb	r4, [r1, #0]
    8e04:	b12c      	cbz	r4, 8e12 <strncpy+0x16>
		*d = *s;
    8e06:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    8e0a:	3101      	adds	r1, #1
		d++;
		n--;
    8e0c:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    8e0e:	2a00      	cmp	r2, #0
    8e10:	d1f7      	bne.n	8e02 <strncpy+0x6>
	}

	while (n > 0) {
    8e12:	b122      	cbz	r2, 8e1e <strncpy+0x22>
		*d = '\0';
    8e14:	2100      	movs	r1, #0
    8e16:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    8e1a:	3a01      	subs	r2, #1
    8e1c:	e7f9      	b.n	8e12 <strncpy+0x16>
	}

	return dest;
}
    8e1e:	bc10      	pop	{r4}
    8e20:	4770      	bx	lr
		*d = '\0';
    8e22:	2100      	movs	r1, #0
    8e24:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    8e28:	3a01      	subs	r2, #1
	while (n > 0) {
    8e2a:	2a00      	cmp	r2, #0
    8e2c:	d1f9      	bne.n	8e22 <strncpy+0x26>
    8e2e:	4770      	bx	lr

00008e30 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    8e30:	4603      	mov	r3, r0
	size_t n = 0;
    8e32:	2000      	movs	r0, #0

	while (*s != '\0') {
    8e34:	e001      	b.n	8e3a <strlen+0xa>
		s++;
    8e36:	3301      	adds	r3, #1
		n++;
    8e38:	3001      	adds	r0, #1
	while (*s != '\0') {
    8e3a:	781a      	ldrb	r2, [r3, #0]
    8e3c:	2a00      	cmp	r2, #0
    8e3e:	d1fa      	bne.n	8e36 <strlen+0x6>
	}

	return n;
}
    8e40:	4770      	bx	lr

00008e42 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    8e42:	4603      	mov	r3, r0
	size_t n = 0;
    8e44:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    8e46:	e001      	b.n	8e4c <strnlen+0xa>
		s++;
    8e48:	3301      	adds	r3, #1
		n++;
    8e4a:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    8e4c:	781a      	ldrb	r2, [r3, #0]
    8e4e:	b10a      	cbz	r2, 8e54 <strnlen+0x12>
    8e50:	4288      	cmp	r0, r1
    8e52:	d3f9      	bcc.n	8e48 <strnlen+0x6>
	}

	return n;
}
    8e54:	4770      	bx	lr

00008e56 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    8e56:	ea80 0301 	eor.w	r3, r0, r1
    8e5a:	f013 0f03 	tst.w	r3, #3
    8e5e:	d001      	beq.n	8e64 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    8e60:	4603      	mov	r3, r0
    8e62:	e023      	b.n	8eac <memcpy+0x56>
    8e64:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    8e66:	f013 0f03 	tst.w	r3, #3
    8e6a:	d00f      	beq.n	8e8c <memcpy+0x36>
			if (n == 0) {
    8e6c:	b30a      	cbz	r2, 8eb2 <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    8e6e:	f811 cb01 	ldrb.w	ip, [r1], #1
    8e72:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    8e76:	3a01      	subs	r2, #1
    8e78:	e7f5      	b.n	8e66 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    8e7a:	f811 cb01 	ldrb.w	ip, [r1], #1
    8e7e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    8e82:	3a01      	subs	r2, #1
	while (n > 0) {
    8e84:	2a00      	cmp	r2, #0
    8e86:	d1f8      	bne.n	8e7a <memcpy+0x24>
	}

	return d;
}
    8e88:	bc10      	pop	{r4}
    8e8a:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    8e8c:	2a03      	cmp	r2, #3
    8e8e:	d90d      	bls.n	8eac <memcpy+0x56>
{
    8e90:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    8e92:	f851 4b04 	ldr.w	r4, [r1], #4
    8e96:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    8e9a:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    8e9c:	2a03      	cmp	r2, #3
    8e9e:	d8f8      	bhi.n	8e92 <memcpy+0x3c>
    8ea0:	e7f0      	b.n	8e84 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    8ea2:	f811 cb01 	ldrb.w	ip, [r1], #1
    8ea6:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    8eaa:	3a01      	subs	r2, #1
	while (n > 0) {
    8eac:	2a00      	cmp	r2, #0
    8eae:	d1f8      	bne.n	8ea2 <memcpy+0x4c>
    8eb0:	4770      	bx	lr
}
    8eb2:	4770      	bx	lr

00008eb4 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    8eb4:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    8eb8:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    8eba:	e002      	b.n	8ec2 <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    8ebc:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    8ec0:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    8ec2:	f013 0f03 	tst.w	r3, #3
    8ec6:	d002      	beq.n	8ece <memset+0x1a>
		if (n == 0) {
    8ec8:	2a00      	cmp	r2, #0
    8eca:	d1f7      	bne.n	8ebc <memset+0x8>
    8ecc:	e00f      	b.n	8eee <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    8ece:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    8ed0:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    8ed4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    8ed8:	2a03      	cmp	r2, #3
    8eda:	d906      	bls.n	8eea <memset+0x36>
		*(d_word++) = c_word;
    8edc:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    8ee0:	3a04      	subs	r2, #4
    8ee2:	e7f9      	b.n	8ed8 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    8ee4:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    8ee8:	3a01      	subs	r2, #1
	while (n > 0) {
    8eea:	2a00      	cmp	r2, #0
    8eec:	d1fa      	bne.n	8ee4 <memset+0x30>
	}

	return buf;
}
    8eee:	4770      	bx	lr

00008ef0 <_stdout_hook_default>:
}
    8ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8ef4:	4770      	bx	lr

00008ef6 <nrf_clock_is_running>:
    switch (domain)
    8ef6:	2903      	cmp	r1, #3
    8ef8:	d82f      	bhi.n	8f5a <nrf_clock_is_running+0x64>
    8efa:	e8df f001 	tbb	[pc, r1]
    8efe:	0f02      	.short	0x0f02
    8f00:	291c      	.short	0x291c
            if (p_clk_src != NULL)
    8f02:	b122      	cbz	r2, 8f0e <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8f04:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    8f08:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8f0c:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8f0e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    8f12:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8f16:	d122      	bne.n	8f5e <nrf_clock_is_running+0x68>
    return false;
    8f18:	2000      	movs	r0, #0
    8f1a:	4770      	bx	lr
            if (p_clk_src != NULL)
    8f1c:	b122      	cbz	r2, 8f28 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8f1e:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    8f22:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    8f26:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8f28:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    8f2c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8f30:	d117      	bne.n	8f62 <nrf_clock_is_running+0x6c>
    return false;
    8f32:	2000      	movs	r0, #0
    8f34:	4770      	bx	lr
            if (p_clk_src != NULL)
    8f36:	b122      	cbz	r2, 8f42 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    8f38:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    8f3c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    8f40:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    8f42:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    8f46:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8f4a:	d10c      	bne.n	8f66 <nrf_clock_is_running+0x70>
    return false;
    8f4c:	2000      	movs	r0, #0
    8f4e:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    8f50:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    8f54:	f3c0 4000 	ubfx	r0, r0, #16, #1
    8f58:	4770      	bx	lr
    switch (domain)
    8f5a:	2000      	movs	r0, #0
    8f5c:	4770      	bx	lr
                return true;
    8f5e:	2001      	movs	r0, #1
    8f60:	4770      	bx	lr
                return true;
    8f62:	2001      	movs	r0, #1
    8f64:	4770      	bx	lr
                return true;
    8f66:	2001      	movs	r0, #1
}
    8f68:	4770      	bx	lr

00008f6a <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    8f6a:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    8f6c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    8f70:	0089      	lsls	r1, r1, #2
    8f72:	3170      	adds	r1, #112	; 0x70
}
    8f74:	4408      	add	r0, r1
    8f76:	4770      	bx	lr

00008f78 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    8f78:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    8f7a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    8f7e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    8f82:	4770      	bx	lr

00008f84 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    8f84:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    8f86:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    8f8a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    8f8e:	4770      	bx	lr

00008f90 <get_status>:
{
    8f90:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    8f92:	b2c9      	uxtb	r1, r1
    8f94:	f7ff ffe9 	bl	8f6a <get_sub_data>
    8f98:	6880      	ldr	r0, [r0, #8]
}
    8f9a:	f000 0007 	and.w	r0, r0, #7
    8f9e:	bd08      	pop	{r3, pc}

00008fa0 <set_off_state>:
	__asm__ volatile(
    8fa0:	f04f 0320 	mov.w	r3, #32
    8fa4:	f3ef 8211 	mrs	r2, BASEPRI
    8fa8:	f383 8812 	msr	BASEPRI_MAX, r3
    8fac:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8fb0:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    8fb2:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    8fb6:	d001      	beq.n	8fbc <set_off_state+0x1c>
    8fb8:	428b      	cmp	r3, r1
    8fba:	d107      	bne.n	8fcc <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    8fbc:	2301      	movs	r3, #1
    8fbe:	6003      	str	r3, [r0, #0]
	int err = 0;
    8fc0:	2000      	movs	r0, #0
	__asm__ volatile(
    8fc2:	f382 8811 	msr	BASEPRI, r2
    8fc6:	f3bf 8f6f 	isb	sy
}
    8fca:	4770      	bx	lr
		err = -EPERM;
    8fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8fd0:	e7f7      	b.n	8fc2 <set_off_state+0x22>

00008fd2 <set_starting_state>:
	__asm__ volatile(
    8fd2:	f04f 0320 	mov.w	r3, #32
    8fd6:	f3ef 8211 	mrs	r2, BASEPRI
    8fda:	f383 8812 	msr	BASEPRI_MAX, r3
    8fde:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    8fe2:	6803      	ldr	r3, [r0, #0]
    8fe4:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8fe8:	f003 0307 	and.w	r3, r3, #7
    8fec:	2b01      	cmp	r3, #1
    8fee:	d008      	beq.n	9002 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    8ff0:	458c      	cmp	ip, r1
    8ff2:	d009      	beq.n	9008 <set_starting_state+0x36>
		err = -EPERM;
    8ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    8ff8:	f382 8811 	msr	BASEPRI, r2
    8ffc:	f3bf 8f6f 	isb	sy
}
    9000:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    9002:	6001      	str	r1, [r0, #0]
	int err = 0;
    9004:	2000      	movs	r0, #0
    9006:	e7f7      	b.n	8ff8 <set_starting_state+0x26>
		err = -EALREADY;
    9008:	f06f 0077 	mvn.w	r0, #119	; 0x77
    900c:	e7f4      	b.n	8ff8 <set_starting_state+0x26>

0000900e <set_on_state>:
	__asm__ volatile(
    900e:	f04f 0320 	mov.w	r3, #32
    9012:	f3ef 8211 	mrs	r2, BASEPRI
    9016:	f383 8812 	msr	BASEPRI_MAX, r3
    901a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    901e:	6803      	ldr	r3, [r0, #0]
    9020:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9024:	f043 0302 	orr.w	r3, r3, #2
    9028:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    902a:	f382 8811 	msr	BASEPRI, r2
    902e:	f3bf 8f6f 	isb	sy
}
    9032:	4770      	bx	lr

00009034 <clkstarted_handle>:
{
    9034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9036:	4606      	mov	r6, r0
    9038:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    903a:	f7ff ff96 	bl	8f6a <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    903e:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    9040:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    9042:	2300      	movs	r3, #0
    9044:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    9048:	f7ff ffe1 	bl	900e <set_on_state>
	if (callback) {
    904c:	b11d      	cbz	r5, 9056 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    904e:	463a      	mov	r2, r7
    9050:	4621      	mov	r1, r4
    9052:	4630      	mov	r0, r6
    9054:	47a8      	blx	r5
}
    9056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009058 <stop>:
{
    9058:	b570      	push	{r4, r5, r6, lr}
    905a:	4606      	mov	r6, r0
    905c:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    905e:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    9060:	4621      	mov	r1, r4
    9062:	f7ff ff82 	bl	8f6a <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    9066:	4629      	mov	r1, r5
    9068:	3008      	adds	r0, #8
    906a:	f7ff ff99 	bl	8fa0 <set_off_state>
	if (err < 0) {
    906e:	2800      	cmp	r0, #0
    9070:	db06      	blt.n	9080 <stop+0x28>
	get_sub_config(dev, type)->stop();
    9072:	4621      	mov	r1, r4
    9074:	4630      	mov	r0, r6
    9076:	f7ff ff7f 	bl	8f78 <get_sub_config>
    907a:	6843      	ldr	r3, [r0, #4]
    907c:	4798      	blx	r3
	return 0;
    907e:	2000      	movs	r0, #0
}
    9080:	bd70      	pop	{r4, r5, r6, pc}

00009082 <api_stop>:
{
    9082:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    9084:	2280      	movs	r2, #128	; 0x80
    9086:	f7ff ffe7 	bl	9058 <stop>
}
    908a:	bd08      	pop	{r3, pc}

0000908c <async_start>:
{
    908c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9090:	4606      	mov	r6, r0
    9092:	4690      	mov	r8, r2
    9094:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    9096:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    9098:	4629      	mov	r1, r5
    909a:	f7ff ff66 	bl	8f6a <get_sub_data>
    909e:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    90a0:	9906      	ldr	r1, [sp, #24]
    90a2:	3008      	adds	r0, #8
    90a4:	f7ff ff95 	bl	8fd2 <set_starting_state>
	if (err < 0) {
    90a8:	2800      	cmp	r0, #0
    90aa:	db09      	blt.n	90c0 <async_start+0x34>
	subdata->cb = cb;
    90ac:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    90b0:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    90b2:	4629      	mov	r1, r5
    90b4:	4630      	mov	r0, r6
    90b6:	f7ff ff5f 	bl	8f78 <get_sub_config>
    90ba:	6803      	ldr	r3, [r0, #0]
    90bc:	4798      	blx	r3
	return 0;
    90be:	2000      	movs	r0, #0
}
    90c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000090c4 <api_start>:
{
    90c4:	b510      	push	{r4, lr}
    90c6:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    90c8:	2480      	movs	r4, #128	; 0x80
    90ca:	9400      	str	r4, [sp, #0]
    90cc:	f7ff ffde 	bl	908c <async_start>
}
    90d0:	b002      	add	sp, #8
    90d2:	bd10      	pop	{r4, pc}

000090d4 <onoff_started_callback>:
{
    90d4:	b510      	push	{r4, lr}
    90d6:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    90d8:	b2c9      	uxtb	r1, r1
    90da:	f7ff ff53 	bl	8f84 <get_onoff_manager>
	notify(mgr, 0);
    90de:	2100      	movs	r1, #0
    90e0:	47a0      	blx	r4
}
    90e2:	bd10      	pop	{r4, pc}

000090e4 <hfclk_start>:
{
    90e4:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    90e6:	2001      	movs	r0, #1
    90e8:	f000 fd1a 	bl	9b20 <nrfx_clock_start>
}
    90ec:	bd08      	pop	{r3, pc}

000090ee <hfclkaudio_start>:
{
    90ee:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    90f0:	2003      	movs	r0, #3
    90f2:	f000 fd15 	bl	9b20 <nrfx_clock_start>
}
    90f6:	bd08      	pop	{r3, pc}

000090f8 <hfclk192m_start>:
{
    90f8:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    90fa:	2002      	movs	r0, #2
    90fc:	f000 fd10 	bl	9b20 <nrfx_clock_start>
}
    9100:	bd08      	pop	{r3, pc}

00009102 <lfclk_start>:
{
    9102:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9104:	2000      	movs	r0, #0
    9106:	f000 fd0b 	bl	9b20 <nrfx_clock_start>
}
    910a:	bd08      	pop	{r3, pc}

0000910c <hfclk_stop>:
{
    910c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    910e:	2001      	movs	r0, #1
    9110:	f000 fd7b 	bl	9c0a <nrfx_clock_stop>
}
    9114:	bd08      	pop	{r3, pc}

00009116 <hfclkaudio_stop>:
{
    9116:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    9118:	2003      	movs	r0, #3
    911a:	f000 fd76 	bl	9c0a <nrfx_clock_stop>
}
    911e:	bd08      	pop	{r3, pc}

00009120 <hfclk192m_stop>:
{
    9120:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    9122:	2002      	movs	r0, #2
    9124:	f000 fd71 	bl	9c0a <nrfx_clock_stop>
}
    9128:	bd08      	pop	{r3, pc}

0000912a <lfclk_stop>:
{
    912a:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    912c:	2000      	movs	r0, #0
    912e:	f000 fd6c 	bl	9c0a <nrfx_clock_stop>
}
    9132:	bd08      	pop	{r3, pc}

00009134 <k_msleep>:
{
    9134:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    9136:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    913a:	17c1      	asrs	r1, r0, #31
    913c:	03c9      	lsls	r1, r1, #15
    913e:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    9142:	03c0      	lsls	r0, r0, #15
    9144:	f240 33e7 	movw	r3, #999	; 0x3e7
    9148:	18c0      	adds	r0, r0, r3
    914a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    914e:	f04f 0300 	mov.w	r3, #0
    9152:	f141 0100 	adc.w	r1, r1, #0
    9156:	f7f6 fffd 	bl	154 <__aeabi_uldivmod>
    915a:	f7fe f839 	bl	71d0 <z_impl_k_sleep>
}
    915e:	bd08      	pop	{r3, pc}

00009160 <blocking_start_callback>:
{
    9160:	b508      	push	{r3, lr}
    9162:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    9164:	f7fd fc64 	bl	6a30 <z_impl_k_sem_give>
}
    9168:	bd08      	pop	{r3, pc}

0000916a <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    916a:	460b      	mov	r3, r1
    916c:	b139      	cbz	r1, 917e <sys_slist_remove+0x14>
	return node->next;
    916e:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    9170:	6019      	str	r1, [r3, #0]
	return list->tail;
    9172:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    9174:	428a      	cmp	r2, r1
    9176:	d009      	beq.n	918c <sys_slist_remove+0x22>
	parent->next = child;
    9178:	2300      	movs	r3, #0
    917a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    917c:	4770      	bx	lr
	return node->next;
    917e:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    9180:	6003      	str	r3, [r0, #0]
	return list->tail;
    9182:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    9184:	428a      	cmp	r2, r1
    9186:	d1f7      	bne.n	9178 <sys_slist_remove+0xe>
	list->tail = node;
    9188:	6043      	str	r3, [r0, #4]
}
    918a:	e7f5      	b.n	9178 <sys_slist_remove+0xe>
	list->tail = node;
    918c:	6043      	str	r3, [r0, #4]
}
    918e:	e7f3      	b.n	9178 <sys_slist_remove+0xe>

00009190 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9190:	b508      	push	{r3, lr}
    9192:	460a      	mov	r2, r1
	return list->head;
    9194:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9196:	2100      	movs	r1, #0
    9198:	e001      	b.n	919e <sys_slist_find_and_remove+0xe>
    919a:	4619      	mov	r1, r3
    919c:	681b      	ldr	r3, [r3, #0]
    919e:	b12b      	cbz	r3, 91ac <sys_slist_find_and_remove+0x1c>
    91a0:	4293      	cmp	r3, r2
    91a2:	d1fa      	bne.n	919a <sys_slist_find_and_remove+0xa>
    91a4:	f7ff ffe1 	bl	916a <sys_slist_remove>
    91a8:	2001      	movs	r0, #1
    91aa:	e000      	b.n	91ae <sys_slist_find_and_remove+0x1e>
    91ac:	2000      	movs	r0, #0
    91ae:	bd08      	pop	{r3, pc}

000091b0 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    91b0:	b570      	push	{r4, r5, r6, lr}
    91b2:	4604      	mov	r4, r0
    91b4:	460d      	mov	r5, r1
    91b6:	4616      	mov	r6, r2
	return list->head;
    91b8:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    91ba:	b133      	cbz	r3, 91ca <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    91bc:	f7ff ffe8 	bl	9190 <sys_slist_find_and_remove>
    91c0:	b970      	cbnz	r0, 91e0 <gpio_manage_callback+0x30>
			if (!set) {
    91c2:	b91e      	cbnz	r6, 91cc <gpio_manage_callback+0x1c>
				return -EINVAL;
    91c4:	f06f 0015 	mvn.w	r0, #21
    91c8:	e006      	b.n	91d8 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    91ca:	b132      	cbz	r2, 91da <gpio_manage_callback+0x2a>
    91cc:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    91ce:	602b      	str	r3, [r5, #0]
	list->head = node;
    91d0:	6025      	str	r5, [r4, #0]
	return list->tail;
    91d2:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    91d4:	b143      	cbz	r3, 91e8 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    91d6:	2000      	movs	r0, #0
}
    91d8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    91da:	f06f 0015 	mvn.w	r0, #21
    91de:	e7fb      	b.n	91d8 <gpio_manage_callback+0x28>
	if (set) {
    91e0:	2e00      	cmp	r6, #0
    91e2:	d1f3      	bne.n	91cc <gpio_manage_callback+0x1c>
	return 0;
    91e4:	2000      	movs	r0, #0
    91e6:	e7f7      	b.n	91d8 <gpio_manage_callback+0x28>
	list->tail = node;
    91e8:	6065      	str	r5, [r4, #4]
    91ea:	2000      	movs	r0, #0
}
    91ec:	e7f4      	b.n	91d8 <gpio_manage_callback+0x28>

000091ee <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    91ee:	b570      	push	{r4, r5, r6, lr}
    91f0:	460e      	mov	r6, r1
    91f2:	4615      	mov	r5, r2
	return list->head;
    91f4:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    91f6:	b121      	cbz	r1, 9202 <gpio_fire_callbacks+0x14>
	return node->next;
    91f8:	680c      	ldr	r4, [r1, #0]
    91fa:	b13c      	cbz	r4, 920c <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    91fc:	b931      	cbnz	r1, 920c <gpio_fire_callbacks+0x1e>
    91fe:	460c      	mov	r4, r1
    9200:	e004      	b.n	920c <gpio_fire_callbacks+0x1e>
    9202:	460c      	mov	r4, r1
    9204:	e002      	b.n	920c <gpio_fire_callbacks+0x1e>
    9206:	4623      	mov	r3, r4
    9208:	4621      	mov	r1, r4
    920a:	461c      	mov	r4, r3
    920c:	b171      	cbz	r1, 922c <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    920e:	688a      	ldr	r2, [r1, #8]
    9210:	402a      	ands	r2, r5
    9212:	d002      	beq.n	921a <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    9214:	684b      	ldr	r3, [r1, #4]
    9216:	4630      	mov	r0, r6
    9218:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    921a:	2c00      	cmp	r4, #0
    921c:	d0f3      	beq.n	9206 <gpio_fire_callbacks+0x18>
	return node->next;
    921e:	6823      	ldr	r3, [r4, #0]
    9220:	2b00      	cmp	r3, #0
    9222:	d0f1      	beq.n	9208 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    9224:	2c00      	cmp	r4, #0
    9226:	d1ef      	bne.n	9208 <gpio_fire_callbacks+0x1a>
    9228:	4623      	mov	r3, r4
    922a:	e7ed      	b.n	9208 <gpio_fire_callbacks+0x1a>
		}
	}
}
    922c:	bd70      	pop	{r4, r5, r6, pc}

0000922e <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    922e:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    9232:	0580      	lsls	r0, r0, #22
    9234:	0d80      	lsrs	r0, r0, #22
    9236:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    923a:	d033      	beq.n	92a4 <get_drive+0x76>
    923c:	d816      	bhi.n	926c <get_drive+0x3e>
    923e:	2806      	cmp	r0, #6
    9240:	d02c      	beq.n	929c <get_drive+0x6e>
    9242:	d906      	bls.n	9252 <get_drive+0x24>
    9244:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    9248:	d10d      	bne.n	9266 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    924a:	2301      	movs	r3, #1
    924c:	700b      	strb	r3, [r1, #0]
	return 0;
    924e:	2000      	movs	r0, #0
		break;
    9250:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    9252:	b300      	cbz	r0, 9296 <get_drive+0x68>
    9254:	2802      	cmp	r0, #2
    9256:	d103      	bne.n	9260 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    9258:	2304      	movs	r3, #4
    925a:	700b      	strb	r3, [r1, #0]
	return 0;
    925c:	2000      	movs	r0, #0
		break;
    925e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    9260:	f06f 0015 	mvn.w	r0, #21
    9264:	4770      	bx	lr
    9266:	f06f 0015 	mvn.w	r0, #21
    926a:	4770      	bx	lr
    926c:	f240 2302 	movw	r3, #514	; 0x202
    9270:	4298      	cmp	r0, r3
    9272:	d01b      	beq.n	92ac <get_drive+0x7e>
    9274:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    9278:	d103      	bne.n	9282 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    927a:	2303      	movs	r3, #3
    927c:	700b      	strb	r3, [r1, #0]
	return 0;
    927e:	2000      	movs	r0, #0
		break;
    9280:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    9282:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    9286:	d103      	bne.n	9290 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    9288:	2302      	movs	r3, #2
    928a:	700b      	strb	r3, [r1, #0]
	return 0;
    928c:	2000      	movs	r0, #0
		break;
    928e:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    9290:	f06f 0015 	mvn.w	r0, #21
    9294:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    9296:	2000      	movs	r0, #0
    9298:	7008      	strb	r0, [r1, #0]
		break;
    929a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    929c:	2306      	movs	r3, #6
    929e:	700b      	strb	r3, [r1, #0]
	return 0;
    92a0:	2000      	movs	r0, #0
		break;
    92a2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    92a4:	2307      	movs	r3, #7
    92a6:	700b      	strb	r3, [r1, #0]
	return 0;
    92a8:	2000      	movs	r0, #0
		break;
    92aa:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    92ac:	2305      	movs	r3, #5
    92ae:	700b      	strb	r3, [r1, #0]
	return 0;
    92b0:	2000      	movs	r0, #0
}
    92b2:	4770      	bx	lr

000092b4 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    92b4:	f010 0f10 	tst.w	r0, #16
    92b8:	d104      	bne.n	92c4 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    92ba:	f010 0f20 	tst.w	r0, #32
    92be:	d103      	bne.n	92c8 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    92c0:	2000      	movs	r0, #0
    92c2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    92c4:	2003      	movs	r0, #3
    92c6:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    92c8:	2001      	movs	r0, #1
}
    92ca:	4770      	bx	lr

000092cc <gpio_nrfx_port_get_raw>:
	return port->config;
    92cc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    92ce:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    92d0:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    92d2:	600b      	str	r3, [r1, #0]
}
    92d4:	2000      	movs	r0, #0
    92d6:	4770      	bx	lr

000092d8 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    92d8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    92da:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    92dc:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    92e0:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    92e4:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
    92e6:	60d9      	str	r1, [r3, #12]
}
    92e8:	2000      	movs	r0, #0
    92ea:	4770      	bx	lr

000092ec <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    92ec:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    92ee:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    92f0:	6099      	str	r1, [r3, #8]
}
    92f2:	2000      	movs	r0, #0
    92f4:	4770      	bx	lr

000092f6 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    92f6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    92f8:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    92fa:	60d9      	str	r1, [r3, #12]
}
    92fc:	2000      	movs	r0, #0
    92fe:	4770      	bx	lr

00009300 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    9300:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9302:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    9304:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    9306:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    930a:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    930c:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
    930e:	60d3      	str	r3, [r2, #12]
}
    9310:	2000      	movs	r0, #0
    9312:	4770      	bx	lr

00009314 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    9314:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    9318:	d007      	beq.n	932a <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    931a:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    931e:	d00d      	beq.n	933c <get_trigger+0x28>
    9320:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    9324:	d008      	beq.n	9338 <get_trigger+0x24>
    9326:	2001      	movs	r0, #1
}
    9328:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    932a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    932e:	d001      	beq.n	9334 <get_trigger+0x20>
    9330:	2005      	movs	r0, #5
    9332:	4770      	bx	lr
    9334:	2004      	movs	r0, #4
    9336:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    9338:	2002      	movs	r0, #2
    933a:	4770      	bx	lr
    933c:	2003      	movs	r0, #3
    933e:	4770      	bx	lr

00009340 <gpio_nrfx_manage_callback>:
{
    9340:	b508      	push	{r3, lr}
	return port->data;
    9342:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    9344:	3004      	adds	r0, #4
    9346:	f7ff ff33 	bl	91b0 <gpio_manage_callback>
}
    934a:	bd08      	pop	{r3, pc}

0000934c <nrfx_gpio_handler>:
{
    934c:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    934e:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    9352:	0940      	lsrs	r0, r0, #5
    9354:	f7fb f838 	bl	43c8 <get_dev>
	if (port == NULL) {
    9358:	b130      	cbz	r0, 9368 <nrfx_gpio_handler+0x1c>
    935a:	4601      	mov	r1, r0
	return port->data;
    935c:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    935e:	2201      	movs	r2, #1
    9360:	40a2      	lsls	r2, r4
    9362:	3004      	adds	r0, #4
    9364:	f7ff ff43 	bl	91ee <gpio_fire_callbacks>
}
    9368:	bd10      	pop	{r4, pc}

0000936a <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    936a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    936c:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    936e:	f04f 0120 	mov.w	r1, #32
    9372:	f3ef 8311 	mrs	r3, BASEPRI
    9376:	f381 8812 	msr	BASEPRI_MAX, r1
    937a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    937e:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    9382:	b131      	cbz	r1, 9392 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9384:	2100      	movs	r1, #0
    9386:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    938a:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    938e:	2101      	movs	r1, #1
    9390:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    9392:	f383 8811 	msr	BASEPRI, r3
    9396:	f3bf 8f6f 	isb	sy
}
    939a:	4770      	bx	lr

0000939c <uarte_nrfx_isr_int>:
{
    939c:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    939e:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    93a0:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    93a2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    93a6:	f413 7f80 	tst.w	r3, #256	; 0x100
    93aa:	d002      	beq.n	93b2 <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    93ac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    93b0:	b9d3      	cbnz	r3, 93e8 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    93b2:	686b      	ldr	r3, [r5, #4]
    93b4:	f013 0f10 	tst.w	r3, #16
    93b8:	d015      	beq.n	93e6 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    93ba:	f04f 0220 	mov.w	r2, #32
    93be:	f3ef 8311 	mrs	r3, BASEPRI
    93c2:	f382 8812 	msr	BASEPRI_MAX, r2
    93c6:	f3bf 8f6f 	isb	sy
    93ca:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    93ce:	b112      	cbz	r2, 93d6 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    93d0:	2200      	movs	r2, #0
    93d2:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    93d6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    93da:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    93de:	f383 8811 	msr	BASEPRI, r3
    93e2:	f3bf 8f6f 	isb	sy
}
    93e6:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    93e8:	f7ff ffbf 	bl	936a <endtx_isr>
    93ec:	e7e1      	b.n	93b2 <uarte_nrfx_isr_int+0x16>

000093ee <uarte_nrfx_configure>:
{
    93ee:	b570      	push	{r4, r5, r6, lr}
    93f0:	b082      	sub	sp, #8
    93f2:	4605      	mov	r5, r0
    93f4:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    93f6:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    93f8:	794b      	ldrb	r3, [r1, #5]
    93fa:	2b01      	cmp	r3, #1
    93fc:	d006      	beq.n	940c <uarte_nrfx_configure+0x1e>
    93fe:	2b03      	cmp	r3, #3
    9400:	d011      	beq.n	9426 <uarte_nrfx_configure+0x38>
    9402:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    9406:	4610      	mov	r0, r2
    9408:	b002      	add	sp, #8
    940a:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    940c:	2300      	movs	r3, #0
    940e:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    9412:	79a3      	ldrb	r3, [r4, #6]
    9414:	2b03      	cmp	r3, #3
    9416:	d146      	bne.n	94a6 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    9418:	79e3      	ldrb	r3, [r4, #7]
    941a:	b143      	cbz	r3, 942e <uarte_nrfx_configure+0x40>
    941c:	2b01      	cmp	r3, #1
    941e:	d015      	beq.n	944c <uarte_nrfx_configure+0x5e>
    9420:	f06f 0285 	mvn.w	r2, #133	; 0x85
    9424:	e7ef      	b.n	9406 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    9426:	2310      	movs	r3, #16
    9428:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    942c:	e7f1      	b.n	9412 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    942e:	2300      	movs	r3, #0
    9430:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    9434:	2300      	movs	r3, #0
    9436:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    943a:	7923      	ldrb	r3, [r4, #4]
    943c:	2b01      	cmp	r3, #1
    943e:	d02a      	beq.n	9496 <uarte_nrfx_configure+0xa8>
    9440:	2b02      	cmp	r3, #2
    9442:	d024      	beq.n	948e <uarte_nrfx_configure+0xa0>
    9444:	b133      	cbz	r3, 9454 <uarte_nrfx_configure+0x66>
    9446:	f06f 0285 	mvn.w	r2, #133	; 0x85
    944a:	e7dc      	b.n	9406 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    944c:	2301      	movs	r3, #1
    944e:	f88d 3000 	strb.w	r3, [sp]
		break;
    9452:	e7ef      	b.n	9434 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    9454:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    9458:	6821      	ldr	r1, [r4, #0]
    945a:	4628      	mov	r0, r5
    945c:	f7fb f8ca 	bl	45f4 <baudrate_set>
    9460:	4602      	mov	r2, r0
    9462:	bb18      	cbnz	r0, 94ac <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    9464:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    9466:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    9468:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    946c:	f89d 0002 	ldrb.w	r0, [sp, #2]
    9470:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    9472:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    9476:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    9478:	f89d 0000 	ldrb.w	r0, [sp]
    947c:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    947e:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    9482:	3604      	adds	r6, #4
    9484:	e894 0003 	ldmia.w	r4, {r0, r1}
    9488:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    948c:	e7bb      	b.n	9406 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    948e:	230e      	movs	r3, #14
    9490:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    9494:	e7e0      	b.n	9458 <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    9496:	230e      	movs	r3, #14
    9498:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    949c:	f44f 7380 	mov.w	r3, #256	; 0x100
    94a0:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    94a4:	e7d8      	b.n	9458 <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    94a6:	f06f 0285 	mvn.w	r2, #133	; 0x85
    94aa:	e7ac      	b.n	9406 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    94ac:	f06f 0285 	mvn.w	r2, #133	; 0x85
    94b0:	e7a9      	b.n	9406 <uarte_nrfx_configure+0x18>

000094b2 <uarte_nrfx_config_get>:
{
    94b2:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    94b4:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    94b6:	3304      	adds	r3, #4
    94b8:	e893 0003 	ldmia.w	r3, {r0, r1}
    94bc:	e882 0003 	stmia.w	r2, {r0, r1}
}
    94c0:	2000      	movs	r0, #0
    94c2:	4770      	bx	lr

000094c4 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    94c4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    94c6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    94c8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    94cc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    94d0:	4770      	bx	lr

000094d2 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    94d2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    94d4:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    94d6:	685b      	ldr	r3, [r3, #4]
    94d8:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    94dc:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    94e0:	b929      	cbnz	r1, 94ee <is_tx_ready+0x1c>
    94e2:	b933      	cbnz	r3, 94f2 <is_tx_ready+0x20>
    94e4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    94e8:	b92b      	cbnz	r3, 94f6 <is_tx_ready+0x24>
    94ea:	2000      	movs	r0, #0
    94ec:	4770      	bx	lr
    94ee:	2001      	movs	r0, #1
    94f0:	4770      	bx	lr
    94f2:	2000      	movs	r0, #0
    94f4:	4770      	bx	lr
    94f6:	2001      	movs	r0, #1
}
    94f8:	4770      	bx	lr

000094fa <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    94fa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    94fc:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    94fe:	2208      	movs	r2, #8
    9500:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    9504:	4770      	bx	lr

00009506 <tx_start>:
{
    9506:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    9508:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    950a:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    950c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9510:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9514:	2200      	movs	r2, #0
    9516:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    951a:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    951e:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    9522:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9526:	685b      	ldr	r3, [r3, #4]
    9528:	f013 0f10 	tst.w	r3, #16
    952c:	d102      	bne.n	9534 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    952e:	2301      	movs	r3, #1
    9530:	60a3      	str	r3, [r4, #8]
}
    9532:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    9534:	2101      	movs	r1, #1
    9536:	f7ff ffe0 	bl	94fa <uarte_enable>
    p_reg->INTENSET = mask;
    953a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    953e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    9542:	e7f4      	b.n	952e <tx_start+0x28>

00009544 <uarte_nrfx_poll_in>:
{
    9544:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    9546:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    9548:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    954a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    954c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9550:	b15a      	cbz	r2, 956a <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    9552:	6962      	ldr	r2, [r4, #20]
    9554:	7812      	ldrb	r2, [r2, #0]
    9556:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9558:	2000      	movs	r0, #0
    955a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    955e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9562:	2201      	movs	r2, #1
    9564:	601a      	str	r2, [r3, #0]
}
    9566:	bc10      	pop	{r4}
    9568:	4770      	bx	lr
		return -1;
    956a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    956e:	e7fa      	b.n	9566 <uarte_nrfx_poll_in+0x22>

00009570 <k_msleep>:
{
    9570:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    9572:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    9576:	17c1      	asrs	r1, r0, #31
    9578:	03c9      	lsls	r1, r1, #15
    957a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    957e:	03c0      	lsls	r0, r0, #15
    9580:	f240 33e7 	movw	r3, #999	; 0x3e7
    9584:	18c0      	adds	r0, r0, r3
    9586:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    958a:	f04f 0300 	mov.w	r3, #0
    958e:	f141 0100 	adc.w	r1, r1, #0
    9592:	f7f6 fddf 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    9596:	f7fd fe1b 	bl	71d0 <z_impl_k_sleep>
}
    959a:	bd08      	pop	{r3, pc}

0000959c <wait_tx_ready>:
{
    959c:	b570      	push	{r4, r5, r6, lr}
    959e:	4606      	mov	r6, r0
    95a0:	e013      	b.n	95ca <wait_tx_ready+0x2e>
		if (res) {
    95a2:	b17d      	cbz	r5, 95c4 <wait_tx_ready+0x28>
	__asm__ volatile(
    95a4:	f04f 0320 	mov.w	r3, #32
    95a8:	f3ef 8411 	mrs	r4, BASEPRI
    95ac:	f383 8812 	msr	BASEPRI_MAX, r3
    95b0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    95b4:	4630      	mov	r0, r6
    95b6:	f7ff ff8c 	bl	94d2 <is_tx_ready>
    95ba:	b998      	cbnz	r0, 95e4 <wait_tx_ready+0x48>
	__asm__ volatile(
    95bc:	f384 8811 	msr	BASEPRI, r4
    95c0:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    95c4:	2001      	movs	r0, #1
    95c6:	f7ff ffd3 	bl	9570 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    95ca:	2464      	movs	r4, #100	; 0x64
    95cc:	4630      	mov	r0, r6
    95ce:	f7ff ff80 	bl	94d2 <is_tx_ready>
    95d2:	4605      	mov	r5, r0
    95d4:	2800      	cmp	r0, #0
    95d6:	d1e4      	bne.n	95a2 <wait_tx_ready+0x6>
    95d8:	2001      	movs	r0, #1
    95da:	f000 f9d6 	bl	998a <nrfx_busy_wait>
    95de:	3c01      	subs	r4, #1
    95e0:	d1f4      	bne.n	95cc <wait_tx_ready+0x30>
    95e2:	e7de      	b.n	95a2 <wait_tx_ready+0x6>
}
    95e4:	4620      	mov	r0, r4
    95e6:	bd70      	pop	{r4, r5, r6, pc}

000095e8 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    95e8:	b510      	push	{r4, lr}
    95ea:	b082      	sub	sp, #8
    95ec:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    95ee:	aa01      	add	r2, sp, #4
    95f0:	f000 f8fb 	bl	97ea <pinctrl_lookup_state>
	if (ret < 0) {
    95f4:	2800      	cmp	r0, #0
    95f6:	db05      	blt.n	9604 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    95f8:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    95fa:	6822      	ldr	r2, [r4, #0]
    95fc:	7919      	ldrb	r1, [r3, #4]
    95fe:	6818      	ldr	r0, [r3, #0]
    9600:	f7fb fbe0 	bl	4dc4 <pinctrl_configure_pins>
}
    9604:	b002      	add	sp, #8
    9606:	bd10      	pop	{r4, pc}

00009608 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    9608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    960c:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    960e:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    9610:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    9612:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9616:	2100      	movs	r1, #0
    9618:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    961c:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    9620:	68f8      	ldr	r0, [r7, #12]
    9622:	f7ff ffe1 	bl	95e8 <pinctrl_apply_state>
	if (err < 0) {
    9626:	1e05      	subs	r5, r0, #0
    9628:	db35      	blt.n	9696 <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    962a:	f108 0104 	add.w	r1, r8, #4
    962e:	4620      	mov	r0, r4
    9630:	f7ff fedd 	bl	93ee <uarte_nrfx_configure>
	if (err) {
    9634:	4605      	mov	r5, r0
    9636:	bb70      	cbnz	r0, 9696 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    9638:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    963a:	f013 0f02 	tst.w	r3, #2
    963e:	d12d      	bne.n	969c <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    9640:	2308      	movs	r3, #8
    9642:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    9646:	7a3b      	ldrb	r3, [r7, #8]
    9648:	b95b      	cbnz	r3, 9662 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    964a:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    964e:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    9652:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    9656:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    965a:	2301      	movs	r3, #1
    965c:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9660:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    9662:	687b      	ldr	r3, [r7, #4]
    9664:	f013 0f02 	tst.w	r3, #2
    9668:	d103      	bne.n	9672 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    966a:	f44f 7380 	mov.w	r3, #256	; 0x100
    966e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9672:	687b      	ldr	r3, [r7, #4]
    9674:	f013 0f10 	tst.w	r3, #16
    9678:	d003      	beq.n	9682 <uarte_instance_init+0x7a>
    967a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    967e:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    9682:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9686:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    968a:	2300      	movs	r3, #0
    968c:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9690:	2301      	movs	r3, #1
    9692:	60b3      	str	r3, [r6, #8]
    9694:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    9696:	4628      	mov	r0, r5
    9698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    969c:	4641      	mov	r1, r8
    969e:	4630      	mov	r0, r6
    96a0:	f7fb f87e 	bl	47a0 <endtx_stoptx_ppi_init>
		if (err < 0) {
    96a4:	2800      	cmp	r0, #0
    96a6:	dacb      	bge.n	9640 <uarte_instance_init+0x38>
			return err;
    96a8:	4605      	mov	r5, r0
    96aa:	e7f4      	b.n	9696 <uarte_instance_init+0x8e>

000096ac <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    96ac:	b510      	push	{r4, lr}
    96ae:	4604      	mov	r4, r0
    96b0:	2200      	movs	r2, #0
    96b2:	2101      	movs	r1, #1
    96b4:	2008      	movs	r0, #8
    96b6:	f7ff faf8 	bl	8caa <z_arm_irq_priority_set>
    96ba:	2008      	movs	r0, #8
    96bc:	f7ff faeb 	bl	8c96 <arch_irq_enable>
    96c0:	2100      	movs	r1, #0
    96c2:	4620      	mov	r0, r4
    96c4:	f7ff ffa0 	bl	9608 <uarte_instance_init>
    96c8:	bd10      	pop	{r4, pc}

000096ca <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    96ca:	4770      	bx	lr

000096cc <counter_sub>:
	return (a - b) & COUNTER_MAX;
    96cc:	1a40      	subs	r0, r0, r1
}
    96ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    96d2:	4770      	bx	lr

000096d4 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    96d4:	f100 0350 	add.w	r3, r0, #80	; 0x50
    96d8:	009b      	lsls	r3, r3, #2
    96da:	b29b      	uxth	r3, r3
    96dc:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    96e0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    96e4:	2200      	movs	r2, #0
    96e6:	601a      	str	r2, [r3, #0]
    96e8:	681b      	ldr	r3, [r3, #0]
}
    96ea:	4770      	bx	lr

000096ec <absolute_time_to_cc>:
}
    96ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    96f0:	4770      	bx	lr

000096f2 <full_int_lock>:
	__asm__ volatile(
    96f2:	f04f 0320 	mov.w	r3, #32
    96f6:	f3ef 8011 	mrs	r0, BASEPRI
    96fa:	f383 8812 	msr	BASEPRI_MAX, r3
    96fe:	f3bf 8f6f 	isb	sy
}
    9702:	4770      	bx	lr

00009704 <full_int_unlock>:
	__asm__ volatile(
    9704:	f380 8811 	msr	BASEPRI, r0
    9708:	f3bf 8f6f 	isb	sy
}
    970c:	4770      	bx	lr

0000970e <set_absolute_alarm>:
{
    970e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9710:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    9712:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    9716:	f7fb f899 	bl	484c <get_comparator>
    971a:	4607      	mov	r7, r0
    971c:	e019      	b.n	9752 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    971e:	2013      	movs	r0, #19
    9720:	f000 fd88 	bl	a234 <z_impl_k_busy_wait>
}
    9724:	e022      	b.n	976c <set_absolute_alarm+0x5e>
		event_clear(chan);
    9726:	4630      	mov	r0, r6
    9728:	f7ff ffd4 	bl	96d4 <event_clear>
		event_enable(chan);
    972c:	4630      	mov	r0, r6
    972e:	f7fb f895 	bl	485c <event_enable>
		set_comparator(chan, cc_val);
    9732:	4629      	mov	r1, r5
    9734:	4630      	mov	r0, r6
    9736:	f7fb f87f 	bl	4838 <set_comparator>
		now2 = counter();
    973a:	f7fb f8a3 	bl	4884 <counter>
	} while ((now2 != now) &&
    973e:	4284      	cmp	r4, r0
    9740:	d01e      	beq.n	9780 <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    9742:	1c81      	adds	r1, r0, #2
    9744:	4628      	mov	r0, r5
    9746:	f7ff ffc1 	bl	96cc <counter_sub>
	} while ((now2 != now) &&
    974a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    974e:	d917      	bls.n	9780 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    9750:	462f      	mov	r7, r5
		now = counter();
    9752:	f7fb f897 	bl	4884 <counter>
    9756:	4604      	mov	r4, r0
		set_comparator(chan, now);
    9758:	4601      	mov	r1, r0
    975a:	4630      	mov	r0, r6
    975c:	f7fb f86c 	bl	4838 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    9760:	4621      	mov	r1, r4
    9762:	4638      	mov	r0, r7
    9764:	f7ff ffb2 	bl	96cc <counter_sub>
    9768:	2801      	cmp	r0, #1
    976a:	d0d8      	beq.n	971e <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    976c:	1ca7      	adds	r7, r4, #2
    976e:	4639      	mov	r1, r7
    9770:	4628      	mov	r0, r5
    9772:	f7ff ffab 	bl	96cc <counter_sub>
    9776:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    977a:	d9d4      	bls.n	9726 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    977c:	463d      	mov	r5, r7
    977e:	e7d2      	b.n	9726 <set_absolute_alarm+0x18>
}
    9780:	4628      	mov	r0, r5
    9782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009784 <z_nrf_rtc_timer_capture_task_address_get>:
	if (chan == 0) {
    9784:	b138      	cbz	r0, 9796 <z_nrf_rtc_timer_capture_task_address_get+0x12>
	nrf_rtc_task_t task = offsetof(NRF_RTC_Type, TASKS_CAPTURE[chan]);
    9786:	3010      	adds	r0, #16
    9788:	0080      	lsls	r0, r0, #2
    978a:	b2c0      	uxtb	r0, r0
    return (uint32_t)p_reg + task;
    978c:	f100 2050 	add.w	r0, r0, #1342197760	; 0x50005000
    9790:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
	return nrf_rtc_task_address_get(RTC, task);
    9794:	4770      	bx	lr
		return 0;
    9796:	2000      	movs	r0, #0
}
    9798:	4770      	bx	lr

0000979a <compare_set>:
{
    979a:	b5f0      	push	{r4, r5, r6, r7, lr}
    979c:	b083      	sub	sp, #12
    979e:	4604      	mov	r4, r0
    97a0:	4617      	mov	r7, r2
    97a2:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    97a4:	f7fb f874 	bl	4890 <compare_int_lock>
    97a8:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    97aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    97ac:	9301      	str	r3, [sp, #4]
    97ae:	9b08      	ldr	r3, [sp, #32]
    97b0:	9300      	str	r3, [sp, #0]
    97b2:	463a      	mov	r2, r7
    97b4:	462b      	mov	r3, r5
    97b6:	4620      	mov	r0, r4
    97b8:	f7fb f956 	bl	4a68 <compare_set_nolocks>
    97bc:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    97be:	4631      	mov	r1, r6
    97c0:	4620      	mov	r0, r4
    97c2:	f7fb f8bd 	bl	4940 <compare_int_unlock>
}
    97c6:	4628      	mov	r0, r5
    97c8:	b003      	add	sp, #12
    97ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000097cc <z_nrf_rtc_timer_set>:
{
    97cc:	b500      	push	{lr}
    97ce:	b083      	sub	sp, #12
	return compare_set(chan, target_time, handler, user_data);
    97d0:	9905      	ldr	r1, [sp, #20]
    97d2:	9101      	str	r1, [sp, #4]
    97d4:	9904      	ldr	r1, [sp, #16]
    97d6:	9100      	str	r1, [sp, #0]
    97d8:	f7ff ffdf 	bl	979a <compare_set>
}
    97dc:	b003      	add	sp, #12
    97de:	f85d fb04 	ldr.w	pc, [sp], #4

000097e2 <sys_clock_cycle_get_32>:
{
    97e2:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    97e4:	f7fb f920 	bl	4a28 <z_nrf_rtc_timer_read>
}
    97e8:	bd08      	pop	{r3, pc}

000097ea <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    97ea:	b410      	push	{r4}
	*state = &config->states[0];
    97ec:	6843      	ldr	r3, [r0, #4]
    97ee:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    97f0:	e001      	b.n	97f6 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    97f2:	3408      	adds	r4, #8
    97f4:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    97f6:	6814      	ldr	r4, [r2, #0]
    97f8:	7a03      	ldrb	r3, [r0, #8]
    97fa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    97fe:	3b01      	subs	r3, #1
    9800:	f8d0 c004 	ldr.w	ip, [r0, #4]
    9804:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    9808:	429c      	cmp	r4, r3
    980a:	d804      	bhi.n	9816 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    980c:	7963      	ldrb	r3, [r4, #5]
    980e:	428b      	cmp	r3, r1
    9810:	d1ef      	bne.n	97f2 <pinctrl_lookup_state+0x8>
			return 0;
    9812:	2000      	movs	r0, #0
    9814:	e001      	b.n	981a <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    9816:	f06f 0001 	mvn.w	r0, #1
}
    981a:	bc10      	pop	{r4}
    981c:	4770      	bx	lr

0000981e <mbox_nrf_register_callback>:
	struct mbox_nrf_data *data = dev->data;
    981e:	6900      	ldr	r0, [r0, #16]
	if (channel >= IPC_CONF_NUM) {
    9820:	290f      	cmp	r1, #15
    9822:	d806      	bhi.n	9832 <mbox_nrf_register_callback+0x14>
	data->cb[channel] = cb;
    9824:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
	data->user_data[channel] = user_data;
    9828:	3110      	adds	r1, #16
    982a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	return 0;
    982e:	2000      	movs	r0, #0
    9830:	4770      	bx	lr
		return -EINVAL;
    9832:	f06f 0015 	mvn.w	r0, #21
}
    9836:	4770      	bx	lr

00009838 <mbox_nrf_mtu_get>:
}
    9838:	2000      	movs	r0, #0
    983a:	4770      	bx	lr

0000983c <mbox_nrf_max_channels_get>:
}
    983c:	2010      	movs	r0, #16
    983e:	4770      	bx	lr

00009840 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    9840:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    9842:	f7fd ff69 	bl	7718 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    9846:	bd08      	pop	{r3, pc}

00009848 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    9848:	b510      	push	{r4, lr}
    984a:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    984c:	f7f8 fe6c 	bl	2528 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    9850:	f7f8 ff7e 	bl	2750 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    9854:	4620      	mov	r0, r4
    9856:	f7ff fff3 	bl	9840 <hw_cc3xx_init_internal>
	return res;
}
    985a:	bd10      	pop	{r4, pc}

0000985c <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    985c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    9860:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    9864:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    9868:	2a07      	cmp	r2, #7
    986a:	d001      	beq.n	9870 <nrf53_errata_42+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    986c:	2000      	movs	r0, #0
    986e:	4770      	bx	lr
                    switch(var2)
    9870:	3b02      	subs	r3, #2
    9872:	2b00      	cmp	r3, #0
    9874:	d804      	bhi.n	9880 <nrf53_errata_42+0x24>
    9876:	e8df f003 	tbb	[pc, r3]
    987a:	01          	.byte	0x01
    987b:	00          	.byte	0x00
    987c:	2001      	movs	r0, #1
    987e:	4770      	bx	lr
                            return false;
    9880:	2000      	movs	r0, #0
    #endif
}
    9882:	4770      	bx	lr

00009884 <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    9884:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    9888:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    988c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    9890:	2a07      	cmp	r2, #7
    9892:	d001      	beq.n	9898 <nrf53_errata_46+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    9894:	2000      	movs	r0, #0
    9896:	4770      	bx	lr
                    switch(var2)
    9898:	2b04      	cmp	r3, #4
    989a:	d007      	beq.n	98ac <nrf53_errata_46+0x28>
    989c:	d808      	bhi.n	98b0 <nrf53_errata_46+0x2c>
    989e:	3b02      	subs	r3, #2
    98a0:	2b01      	cmp	r3, #1
    98a2:	d801      	bhi.n	98a8 <nrf53_errata_46+0x24>
    98a4:	2001      	movs	r0, #1
    #endif
}
    98a6:	4770      	bx	lr
                            return false;
    98a8:	2000      	movs	r0, #0
    98aa:	4770      	bx	lr
                            return false;
    98ac:	2000      	movs	r0, #0
    98ae:	4770      	bx	lr
                            return false;
    98b0:	2000      	movs	r0, #0
    98b2:	4770      	bx	lr

000098b4 <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    98b4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    98b8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    98bc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    98c0:	2a07      	cmp	r2, #7
    98c2:	d001      	beq.n	98c8 <nrf53_errata_49+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    98c4:	2000      	movs	r0, #0
    98c6:	4770      	bx	lr
                    switch(var2)
    98c8:	3b02      	subs	r3, #2
    98ca:	2b00      	cmp	r3, #0
    98cc:	d804      	bhi.n	98d8 <nrf53_errata_49+0x24>
    98ce:	e8df f003 	tbb	[pc, r3]
    98d2:	01          	.byte	0x01
    98d3:	00          	.byte	0x00
    98d4:	2001      	movs	r0, #1
    98d6:	4770      	bx	lr
                            return false;
    98d8:	2000      	movs	r0, #0
    #endif
}
    98da:	4770      	bx	lr

000098dc <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    98dc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    98e0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    98e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    98e8:	2a07      	cmp	r2, #7
    98ea:	d001      	beq.n	98f0 <nrf53_errata_55+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    98ec:	2000      	movs	r0, #0
    98ee:	4770      	bx	lr
                            return true;
    98f0:	2001      	movs	r0, #1
    #endif
}
    98f2:	4770      	bx	lr

000098f4 <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    98f4:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    98f8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    98fc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    9900:	2a07      	cmp	r2, #7
    9902:	d001      	beq.n	9908 <nrf53_errata_64+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    9904:	2000      	movs	r0, #0
    9906:	4770      	bx	lr
                    switch(var2)
    9908:	3b02      	subs	r3, #2
    990a:	2b00      	cmp	r3, #0
    990c:	d804      	bhi.n	9918 <nrf53_errata_64+0x24>
    990e:	e8df f003 	tbb	[pc, r3]
    9912:	01          	.byte	0x01
    9913:	00          	.byte	0x00
    9914:	2001      	movs	r0, #1
    9916:	4770      	bx	lr
                            return false;
    9918:	2000      	movs	r0, #0
    #endif
}
    991a:	4770      	bx	lr

0000991c <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    991c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    9920:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    9924:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    9928:	2a07      	cmp	r2, #7
    992a:	d001      	beq.n	9930 <nrf53_errata_69+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    992c:	2000      	movs	r0, #0
    992e:	4770      	bx	lr
                    switch(var2)
    9930:	3b02      	subs	r3, #2
    9932:	2b00      	cmp	r3, #0
    9934:	d804      	bhi.n	9940 <nrf53_errata_69+0x24>
    9936:	e8df f003 	tbb	[pc, r3]
    993a:	01          	.byte	0x01
    993b:	00          	.byte	0x00
    993c:	2001      	movs	r0, #1
    993e:	4770      	bx	lr
                            return false;
    9940:	2000      	movs	r0, #0
    #endif
}
    9942:	4770      	bx	lr

00009944 <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    9944:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    9948:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    994c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    9950:	2a07      	cmp	r2, #7
    9952:	d001      	beq.n	9958 <nrf53_errata_97+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    9954:	2000      	movs	r0, #0
    9956:	4770      	bx	lr
                    switch(var2)
    9958:	3b02      	subs	r3, #2
    995a:	2b00      	cmp	r3, #0
    995c:	d804      	bhi.n	9968 <nrf53_errata_97+0x24>
    995e:	e8df f003 	tbb	[pc, r3]
    9962:	01          	.byte	0x01
    9963:	00          	.byte	0x00
    9964:	2001      	movs	r0, #1
    9966:	4770      	bx	lr
                            return false;
    9968:	2000      	movs	r0, #0
    #endif
}
    996a:	4770      	bx	lr

0000996c <nrf53_errata_140>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    996c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    9970:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    9974:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    9978:	2a07      	cmp	r2, #7
    997a:	d001      	beq.n	9980 <nrf53_errata_140+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    997c:	2000      	movs	r0, #0
    997e:	4770      	bx	lr
                            return true;
    9980:	2001      	movs	r0, #1
    #endif
}
    9982:	4770      	bx	lr

00009984 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    9984:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    9986:	4780      	blx	r0
}
    9988:	bd08      	pop	{r3, pc}

0000998a <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    998a:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    998c:	f000 fc52 	bl	a234 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    9990:	bd08      	pop	{r3, pc}

00009992 <nrf_clock_is_running>:
    switch (domain)
    9992:	2903      	cmp	r1, #3
    9994:	d82f      	bhi.n	99f6 <nrf_clock_is_running+0x64>
    9996:	e8df f001 	tbb	[pc, r1]
    999a:	0f02      	.short	0x0f02
    999c:	291c      	.short	0x291c
            if (p_clk_src != NULL)
    999e:	b122      	cbz	r2, 99aa <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    99a0:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    99a4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    99a8:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    99aa:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    99ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    99b2:	d122      	bne.n	99fa <nrf_clock_is_running+0x68>
    return false;
    99b4:	2000      	movs	r0, #0
    99b6:	4770      	bx	lr
            if (p_clk_src != NULL)
    99b8:	b122      	cbz	r2, 99c4 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    99ba:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    99be:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    99c2:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    99c4:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    99c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    99cc:	d117      	bne.n	99fe <nrf_clock_is_running+0x6c>
    return false;
    99ce:	2000      	movs	r0, #0
    99d0:	4770      	bx	lr
            if (p_clk_src != NULL)
    99d2:	b122      	cbz	r2, 99de <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    99d4:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    99d8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    99dc:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    99de:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    99e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    99e6:	d10c      	bne.n	9a02 <nrf_clock_is_running+0x70>
    return false;
    99e8:	2000      	movs	r0, #0
    99ea:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    99ec:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    99f0:	f3c0 4000 	ubfx	r0, r0, #16, #1
    99f4:	4770      	bx	lr
    switch (domain)
    99f6:	2000      	movs	r0, #0
    99f8:	4770      	bx	lr
                return true;
    99fa:	2001      	movs	r0, #1
    99fc:	4770      	bx	lr
                return true;
    99fe:	2001      	movs	r0, #1
    9a00:	4770      	bx	lr
                return true;
    9a02:	2001      	movs	r0, #1
}
    9a04:	4770      	bx	lr

00009a06 <clock_initial_lfclksrc_get>:
}
    9a06:	2001      	movs	r0, #1
    9a08:	4770      	bx	lr

00009a0a <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    9a0a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    9a0c:	2005      	movs	r0, #5
    9a0e:	f7f9 f82b 	bl	2a68 <arch_irq_is_enabled>
    9a12:	b100      	cbz	r0, 9a16 <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    9a14:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    9a16:	2005      	movs	r0, #5
    9a18:	f7ff f93d 	bl	8c96 <arch_irq_enable>
}
    9a1c:	e7fa      	b.n	9a14 <nrfx_power_clock_irq_init+0xa>

00009a1e <clock_stop>:
{
    9a1e:	b570      	push	{r4, r5, r6, lr}
    9a20:	b082      	sub	sp, #8
    9a22:	4606      	mov	r6, r0
    switch (domain)
    9a24:	2803      	cmp	r0, #3
    9a26:	d855      	bhi.n	9ad4 <clock_stop+0xb6>
    9a28:	e8df f000 	tbb	[pc, r0]
    9a2c:	31231702 	.word	0x31231702
    p_reg->INTENCLR = mask;
    9a30:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9a34:	2202      	movs	r2, #2
    9a36:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a3a:	2200      	movs	r2, #0
    9a3c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    9a40:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9a44:	2201      	movs	r2, #1
    9a46:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    9a48:	2301      	movs	r3, #1
    9a4a:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    9a4e:	429e      	cmp	r6, r3
    9a50:	d02b      	beq.n	9aaa <clock_stop+0x8c>
    9a52:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    9a54:	f242 7410 	movw	r4, #10000	; 0x2710
    9a58:	e02f      	b.n	9aba <clock_stop+0x9c>
    p_reg->INTENCLR = mask;
    9a5a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9a5e:	2201      	movs	r2, #1
    9a60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a64:	2100      	movs	r1, #0
    9a66:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    9a6a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9a6e:	605a      	str	r2, [r3, #4]
}
    9a70:	e7ea      	b.n	9a48 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    9a72:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9a76:	f44f 7200 	mov.w	r2, #512	; 0x200
    9a7a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a7e:	2200      	movs	r2, #0
    9a80:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    9a84:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9a88:	2201      	movs	r2, #1
    9a8a:	625a      	str	r2, [r3, #36]	; 0x24
}
    9a8c:	e7dc      	b.n	9a48 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    9a8e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9a92:	f44f 7280 	mov.w	r2, #256	; 0x100
    9a96:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9a9a:	2200      	movs	r2, #0
    9a9c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    9aa0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9aa4:	2201      	movs	r2, #1
    9aa6:	61da      	str	r2, [r3, #28]
}
    9aa8:	e7ce      	b.n	9a48 <clock_stop+0x2a>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    9aaa:	f10d 0507 	add.w	r5, sp, #7
    9aae:	e7d1      	b.n	9a54 <clock_stop+0x36>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    9ab0:	2001      	movs	r0, #1
    9ab2:	f7ff ff6a 	bl	998a <nrfx_busy_wait>
    9ab6:	3c01      	subs	r4, #1
    9ab8:	d00c      	beq.n	9ad4 <clock_stop+0xb6>
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    9aba:	462a      	mov	r2, r5
    9abc:	4631      	mov	r1, r6
    9abe:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    9ac2:	f7ff ff66 	bl	9992 <nrf_clock_is_running>
    9ac6:	b128      	cbz	r0, 9ad4 <clock_stop+0xb6>
    9ac8:	2d00      	cmp	r5, #0
    9aca:	d0f1      	beq.n	9ab0 <clock_stop+0x92>
    9acc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9ad0:	2b01      	cmp	r3, #1
    9ad2:	d0ed      	beq.n	9ab0 <clock_stop+0x92>
}
    9ad4:	b002      	add	sp, #8
    9ad6:	bd70      	pop	{r4, r5, r6, pc}

00009ad8 <clock_lfclksrc_tweak>:
{
    9ad8:	b538      	push	{r3, r4, r5, lr}
    9ada:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    9adc:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9ade:	2b02      	cmp	r3, #2
    9ae0:	d006      	beq.n	9af0 <clock_lfclksrc_tweak+0x18>
    9ae2:	2b01      	cmp	r3, #1
    9ae4:	d000      	beq.n	9ae8 <clock_lfclksrc_tweak+0x10>
    9ae6:	2300      	movs	r3, #0
    if (!is_correct_clk)
    9ae8:	461d      	mov	r5, r3
    9aea:	b11b      	cbz	r3, 9af4 <clock_lfclksrc_tweak+0x1c>
}
    9aec:	4628      	mov	r0, r5
    9aee:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    9af0:	2301      	movs	r3, #1
    9af2:	e7f9      	b.n	9ae8 <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9af4:	2000      	movs	r0, #0
    9af6:	f7ff ff92 	bl	9a1e <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    9afa:	f7ff ff84 	bl	9a06 <clock_initial_lfclksrc_get>
    9afe:	7020      	strb	r0, [r4, #0]
    9b00:	e7f4      	b.n	9aec <clock_lfclksrc_tweak+0x14>

00009b02 <nrfx_clock_enable>:
{
    9b02:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    9b04:	f7ff ff81 	bl	9a0a <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    9b08:	f7ff ff7d 	bl	9a06 <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    9b0c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9b10:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    9b14:	2201      	movs	r2, #1
    9b16:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    9b1a:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    9b1e:	bd08      	pop	{r3, pc}

00009b20 <nrfx_clock_start>:
    switch (domain)
    9b20:	2803      	cmp	r0, #3
    9b22:	d871      	bhi.n	9c08 <nrfx_clock_start+0xe8>
    9b24:	e8df f000 	tbb	[pc, r0]
    9b28:	62544802 	.word	0x62544802
{
    9b2c:	b500      	push	{lr}
    9b2e:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9b30:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    9b34:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    9b38:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    9b3c:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9b40:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    9b44:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9b48:	d11d      	bne.n	9b86 <nrfx_clock_start+0x66>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    9b4a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9b4e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    9b52:	f013 0f01 	tst.w	r3, #1
    9b56:	d11b      	bne.n	9b90 <nrfx_clock_start+0x70>
                    lfclksrc = clock_initial_lfclksrc_get();
    9b58:	f7ff ff55 	bl	9a06 <clock_initial_lfclksrc_get>
    9b5c:	f88d 0007 	strb.w	r0, [sp, #7]
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
    9b60:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
    9b64:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9b68:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9b6c:	2200      	movs	r2, #0
    9b6e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    9b72:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    9b76:	2202      	movs	r2, #2
    9b78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9b7c:	2201      	movs	r2, #1
    9b7e:	609a      	str	r2, [r3, #8]
}
    9b80:	b003      	add	sp, #12
    9b82:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    9b86:	f10d 0007 	add.w	r0, sp, #7
    9b8a:	f7ff ffa5 	bl	9ad8 <clock_lfclksrc_tweak>
    9b8e:	e7e7      	b.n	9b60 <nrfx_clock_start+0x40>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    9b90:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9b94:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    9b98:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    9b9c:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    9ba0:	f10d 0007 	add.w	r0, sp, #7
    9ba4:	f7ff ff98 	bl	9ad8 <clock_lfclksrc_tweak>
    9ba8:	2800      	cmp	r0, #0
    9baa:	d0d9      	beq.n	9b60 <nrfx_clock_start+0x40>
    p_reg->INTENSET = mask;
    9bac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9bb0:	2202      	movs	r2, #2
    9bb2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    9bb6:	e7e3      	b.n	9b80 <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9bb8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9bbc:	2200      	movs	r2, #0
    9bbe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    9bc2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    9bc6:	2201      	movs	r2, #1
    9bc8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9bcc:	601a      	str	r2, [r3, #0]
}
    9bce:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9bd0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9bd4:	2200      	movs	r2, #0
    9bd6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    9bda:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    9bde:	f44f 7200 	mov.w	r2, #512	; 0x200
    9be2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9be6:	2201      	movs	r2, #1
    9be8:	621a      	str	r2, [r3, #32]
}
    9bea:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9bec:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    9bf0:	2200      	movs	r2, #0
    9bf2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    9bf6:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    9bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
    9bfe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9c02:	2201      	movs	r2, #1
    9c04:	619a      	str	r2, [r3, #24]
}
    9c06:	4770      	bx	lr
    9c08:	4770      	bx	lr

00009c0a <nrfx_clock_stop>:
{
    9c0a:	b508      	push	{r3, lr}
    clock_stop(domain);
    9c0c:	f7ff ff07 	bl	9a1e <clock_stop>
}
    9c10:	bd08      	pop	{r3, pc}

00009c12 <nrf_gpiote_event_configure>:
{
    9c12:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    9c14:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    9c18:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    9c1c:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    9c20:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    9c24:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9c28:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    9c2c:	0212      	lsls	r2, r2, #8
    9c2e:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    9c32:	041b      	lsls	r3, r3, #16
    9c34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9c38:	431a      	orrs	r2, r3
    9c3a:	4314      	orrs	r4, r2
    9c3c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    9c40:	bc10      	pop	{r4}
    9c42:	4770      	bx	lr

00009c44 <nrf_gpiote_task_configure>:
{
    9c44:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    9c46:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    9c4a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    9c4e:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    9c52:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    9c56:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9c5a:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    9c5e:	0212      	lsls	r2, r2, #8
    9c60:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    9c64:	041b      	lsls	r3, r3, #16
    9c66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9c6a:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    9c6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9c70:	051b      	lsls	r3, r3, #20
    9c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    9c76:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9c78:	4314      	orrs	r4, r2
    9c7a:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    9c7e:	bc10      	pop	{r4}
    9c80:	4770      	bx	lr

00009c82 <nrf_gpio_cfg_sense_set>:
{
    9c82:	b500      	push	{lr}
    9c84:	b085      	sub	sp, #20
    9c86:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9c8a:	f10d 030f 	add.w	r3, sp, #15
    9c8e:	9301      	str	r3, [sp, #4]
    9c90:	2100      	movs	r1, #0
    9c92:	9100      	str	r1, [sp, #0]
    9c94:	460b      	mov	r3, r1
    9c96:	460a      	mov	r2, r1
    9c98:	f7fb fd64 	bl	5764 <nrf_gpio_reconfigure>
}
    9c9c:	b005      	add	sp, #20
    9c9e:	f85d fb04 	ldr.w	pc, [sp], #4

00009ca2 <pin_is_task_output>:
{
    9ca2:	b510      	push	{r4, lr}
    9ca4:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    9ca6:	f7fb fe0f 	bl	58c8 <pin_is_output>
    9caa:	b128      	cbz	r0, 9cb8 <pin_is_task_output+0x16>
    9cac:	4620      	mov	r0, r4
    9cae:	f7fb fdf5 	bl	589c <pin_in_use_by_te>
    9cb2:	b118      	cbz	r0, 9cbc <pin_is_task_output+0x1a>
    9cb4:	2001      	movs	r0, #1
    9cb6:	e000      	b.n	9cba <pin_is_task_output+0x18>
    9cb8:	2000      	movs	r0, #0
}
    9cba:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    9cbc:	2000      	movs	r0, #0
    9cbe:	e7fc      	b.n	9cba <pin_is_task_output+0x18>

00009cc0 <pin_is_input>:
{
    9cc0:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    9cc2:	f7fb fe01 	bl	58c8 <pin_is_output>
    9cc6:	f080 0001 	eor.w	r0, r0, #1
}
    9cca:	b2c0      	uxtb	r0, r0
    9ccc:	bd08      	pop	{r3, pc}

00009cce <gpiote_polarity_to_trigger>:
}
    9cce:	4770      	bx	lr

00009cd0 <gpiote_trigger_to_polarity>:
}
    9cd0:	4770      	bx	lr

00009cd2 <is_level>:
}
    9cd2:	2803      	cmp	r0, #3
    9cd4:	bf94      	ite	ls
    9cd6:	2000      	movls	r0, #0
    9cd8:	2001      	movhi	r0, #1
    9cda:	4770      	bx	lr

00009cdc <latch_pending_read_and_check>:
{
    9cdc:	b510      	push	{r4, lr}
    9cde:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    9ce0:	4602      	mov	r2, r0
    9ce2:	2102      	movs	r1, #2
    9ce4:	2000      	movs	r0, #0
    9ce6:	f7fb fdaf 	bl	5848 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    9cea:	2300      	movs	r3, #0
    9cec:	2b01      	cmp	r3, #1
    9cee:	d804      	bhi.n	9cfa <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    9cf0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    9cf4:	b91a      	cbnz	r2, 9cfe <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    9cf6:	3301      	adds	r3, #1
    9cf8:	e7f8      	b.n	9cec <latch_pending_read_and_check+0x10>
    return false;
    9cfa:	2000      	movs	r0, #0
}
    9cfc:	bd10      	pop	{r4, pc}
            return true;
    9cfe:	2001      	movs	r0, #1
    9d00:	e7fc      	b.n	9cfc <latch_pending_read_and_check+0x20>

00009d02 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    9d02:	b160      	cbz	r0, 9d1e <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    9d04:	68c3      	ldr	r3, [r0, #12]
    9d06:	785a      	ldrb	r2, [r3, #1]
    9d08:	f012 0f01 	tst.w	r2, #1
    9d0c:	d003      	beq.n	9d16 <z_device_is_ready+0x14>
    9d0e:	781b      	ldrb	r3, [r3, #0]
    9d10:	b11b      	cbz	r3, 9d1a <z_device_is_ready+0x18>
    9d12:	2000      	movs	r0, #0
    9d14:	4770      	bx	lr
    9d16:	2000      	movs	r0, #0
    9d18:	4770      	bx	lr
    9d1a:	2001      	movs	r0, #1
    9d1c:	4770      	bx	lr
		return false;
    9d1e:	2000      	movs	r0, #0
}
    9d20:	4770      	bx	lr

00009d22 <z_early_memset>:
{
    9d22:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    9d24:	f7ff f8c6 	bl	8eb4 <memset>
}
    9d28:	bd08      	pop	{r3, pc}

00009d2a <z_early_memcpy>:
{
    9d2a:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    9d2c:	f7ff f893 	bl	8e56 <memcpy>
}
    9d30:	bd08      	pop	{r3, pc}

00009d32 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9d32:	68c2      	ldr	r2, [r0, #12]
    9d34:	6903      	ldr	r3, [r0, #16]
    9d36:	431a      	orrs	r2, r3
    9d38:	f012 0203 	ands.w	r2, r2, #3
    9d3c:	d10d      	bne.n	9d5a <create_free_list+0x28>
	slab->free_list = NULL;
    9d3e:	2100      	movs	r1, #0
    9d40:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    9d42:	e005      	b.n	9d50 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    9d44:	6941      	ldr	r1, [r0, #20]
    9d46:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    9d48:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    9d4a:	68c1      	ldr	r1, [r0, #12]
    9d4c:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    9d4e:	3201      	adds	r2, #1
    9d50:	6881      	ldr	r1, [r0, #8]
    9d52:	4291      	cmp	r1, r2
    9d54:	d8f6      	bhi.n	9d44 <create_free_list+0x12>
	return 0;
    9d56:	2000      	movs	r0, #0
    9d58:	4770      	bx	lr
		return -EINVAL;
    9d5a:	f06f 0015 	mvn.w	r0, #21
}
    9d5e:	4770      	bx	lr

00009d60 <k_mem_slab_init>:
{
    9d60:	b510      	push	{r4, lr}
    9d62:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    9d64:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    9d66:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    9d68:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    9d6a:	2300      	movs	r3, #0
    9d6c:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    9d6e:	f7ff ffe0 	bl	9d32 <create_free_list>
	if (rc < 0) {
    9d72:	2800      	cmp	r0, #0
    9d74:	db01      	blt.n	9d7a <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    9d76:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    9d78:	6064      	str	r4, [r4, #4]
}
    9d7a:	bd10      	pop	{r4, pc}

00009d7c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    9d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d80:	4604      	mov	r4, r0
    9d82:	460d      	mov	r5, r1
	__asm__ volatile(
    9d84:	f04f 0320 	mov.w	r3, #32
    9d88:	f3ef 8611 	mrs	r6, BASEPRI
    9d8c:	f383 8812 	msr	BASEPRI_MAX, r3
    9d90:	f3bf 8f6f 	isb	sy
    9d94:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    9d96:	6943      	ldr	r3, [r0, #20]
    9d98:	b16b      	cbz	r3, 9db6 <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    9d9a:	682b      	ldr	r3, [r5, #0]
    9d9c:	6962      	ldr	r2, [r4, #20]
    9d9e:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    9da0:	682b      	ldr	r3, [r5, #0]
    9da2:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    9da4:	69a3      	ldr	r3, [r4, #24]
    9da6:	3b01      	subs	r3, #1
    9da8:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    9daa:	f387 8811 	msr	BASEPRI, r7
    9dae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    9db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9db6:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    9dba:	f000 f996 	bl	a0ea <z_unpend_first_thread>
		if (pending_thread != NULL) {
    9dbe:	2800      	cmp	r0, #0
    9dc0:	d0eb      	beq.n	9d9a <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    9dc2:	682a      	ldr	r2, [r5, #0]
    9dc4:	2100      	movs	r1, #0
    9dc6:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    9dca:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    9dcc:	f000 f8d8 	bl	9f80 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    9dd0:	4631      	mov	r1, r6
    9dd2:	4640      	mov	r0, r8
    9dd4:	f7fc fef4 	bl	6bc0 <z_reschedule>
			return;
    9dd8:	e7eb      	b.n	9db2 <k_mem_slab_free+0x36>

00009dda <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    9dda:	3207      	adds	r2, #7
    9ddc:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    9de0:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    9de4:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    9de8:	2300      	movs	r3, #0
    9dea:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    9dee:	1888      	adds	r0, r1, r2
    9df0:	4770      	bx	lr

00009df2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9df2:	f3ef 8005 	mrs	r0, IPSR
}
    9df6:	3800      	subs	r0, #0
    9df8:	bf18      	it	ne
    9dfa:	2001      	movne	r0, #1
    9dfc:	4770      	bx	lr

00009dfe <k_thread_name_get>:
}
    9dfe:	3074      	adds	r0, #116	; 0x74
    9e00:	4770      	bx	lr

00009e02 <z_impl_k_thread_start>:
{
    9e02:	b508      	push	{r3, lr}
	z_sched_start(thread);
    9e04:	f7fd f806 	bl	6e14 <z_sched_start>
}
    9e08:	bd08      	pop	{r3, pc}

00009e0a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    9e0a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    9e0c:	2400      	movs	r4, #0
    9e0e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    9e10:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    9e12:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    9e14:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    9e16:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    9e18:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    9e1a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    9e1c:	bc10      	pop	{r4}
    9e1e:	4770      	bx	lr

00009e20 <z_impl_k_thread_create>:
{
    9e20:	b5f0      	push	{r4, r5, r6, r7, lr}
    9e22:	b087      	sub	sp, #28
    9e24:	4604      	mov	r4, r0
    9e26:	9e12      	ldr	r6, [sp, #72]	; 0x48
    9e28:	9d13      	ldr	r5, [sp, #76]	; 0x4c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9e2a:	2700      	movs	r7, #0
    9e2c:	9705      	str	r7, [sp, #20]
    9e2e:	9f10      	ldr	r7, [sp, #64]	; 0x40
    9e30:	9704      	str	r7, [sp, #16]
    9e32:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    9e34:	9703      	str	r7, [sp, #12]
    9e36:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    9e38:	9702      	str	r7, [sp, #8]
    9e3a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    9e3c:	9701      	str	r7, [sp, #4]
    9e3e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    9e40:	9700      	str	r7, [sp, #0]
    9e42:	f7fc fc67 	bl	6714 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    9e46:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    9e4a:	bf08      	it	eq
    9e4c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    9e50:	d102      	bne.n	9e58 <z_impl_k_thread_create+0x38>
}
    9e52:	4620      	mov	r0, r4
    9e54:	b007      	add	sp, #28
    9e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    9e58:	4632      	mov	r2, r6
    9e5a:	462b      	mov	r3, r5
    9e5c:	4620      	mov	r0, r4
    9e5e:	f7fc fc4b 	bl	66f8 <schedule_new_thread>
    9e62:	e7f6      	b.n	9e52 <z_impl_k_thread_create+0x32>

00009e64 <z_pm_save_idle_exit>:
{
    9e64:	b508      	push	{r3, lr}
	pm_system_resume();
    9e66:	f7f8 fa65 	bl	2334 <pm_system_resume>
	sys_clock_idle_exit();
    9e6a:	f7ff fc2e 	bl	96ca <sys_clock_idle_exit>
}
    9e6e:	bd08      	pop	{r3, pc}

00009e70 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    9e70:	4288      	cmp	r0, r1
    9e72:	da00      	bge.n	9e76 <new_prio_for_inheritance+0x6>
    9e74:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    9e76:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    9e7a:	db01      	blt.n	9e80 <new_prio_for_inheritance+0x10>
    9e7c:	4608      	mov	r0, r1
    9e7e:	4770      	bx	lr
    9e80:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    9e84:	4770      	bx	lr

00009e86 <adjust_owner_prio>:
{
    9e86:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    9e88:	6880      	ldr	r0, [r0, #8]
    9e8a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    9e8e:	428b      	cmp	r3, r1
    9e90:	d101      	bne.n	9e96 <adjust_owner_prio+0x10>
	return false;
    9e92:	2000      	movs	r0, #0
}
    9e94:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    9e96:	f7fd f813 	bl	6ec0 <z_set_prio>
    9e9a:	e7fb      	b.n	9e94 <adjust_owner_prio+0xe>

00009e9c <z_impl_k_mutex_init>:
{
    9e9c:	4603      	mov	r3, r0
	mutex->owner = NULL;
    9e9e:	2000      	movs	r0, #0
    9ea0:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    9ea2:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    9ea4:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    9ea6:	605b      	str	r3, [r3, #4]
}
    9ea8:	4770      	bx	lr

00009eaa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    9eaa:	b13a      	cbz	r2, 9ebc <z_impl_k_sem_init+0x12>
    9eac:	428a      	cmp	r2, r1
    9eae:	d308      	bcc.n	9ec2 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    9eb0:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    9eb2:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    9eb4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    9eb6:	6040      	str	r0, [r0, #4]
	return 0;
    9eb8:	2000      	movs	r0, #0
    9eba:	4770      	bx	lr
		return -EINVAL;
    9ebc:	f06f 0015 	mvn.w	r0, #21
    9ec0:	4770      	bx	lr
    9ec2:	f06f 0015 	mvn.w	r0, #21
}
    9ec6:	4770      	bx	lr

00009ec8 <thread_active_elsewhere>:
}
    9ec8:	2000      	movs	r0, #0
    9eca:	4770      	bx	lr

00009ecc <pended_on_thread>:
}
    9ecc:	6880      	ldr	r0, [r0, #8]
    9ece:	4770      	bx	lr

00009ed0 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    9ed0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    9ed4:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    9ed8:	4283      	cmp	r3, r0
    9eda:	d001      	beq.n	9ee0 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    9edc:	1ac0      	subs	r0, r0, r3
    9ede:	4770      	bx	lr
	return 0;
    9ee0:	2000      	movs	r0, #0
}
    9ee2:	4770      	bx	lr

00009ee4 <z_unpend_thread_no_timeout>:
{
    9ee4:	b538      	push	{r3, r4, r5, lr}
    9ee6:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    9ee8:	2300      	movs	r3, #0
	__asm__ volatile(
    9eea:	f04f 0220 	mov.w	r2, #32
    9eee:	f3ef 8411 	mrs	r4, BASEPRI
    9ef2:	f382 8812 	msr	BASEPRI_MAX, r2
    9ef6:	f3bf 8f6f 	isb	sy
    9efa:	e007      	b.n	9f0c <z_unpend_thread_no_timeout+0x28>
		unpend_thread_no_timeout(thread);
    9efc:	4628      	mov	r0, r5
    9efe:	f000 f82a 	bl	9f56 <unpend_thread_no_timeout>
	__asm__ volatile(
    9f02:	f384 8811 	msr	BASEPRI, r4
    9f06:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9f0a:	2301      	movs	r3, #1
    9f0c:	2b00      	cmp	r3, #0
    9f0e:	d0f5      	beq.n	9efc <z_unpend_thread_no_timeout+0x18>
}
    9f10:	bd38      	pop	{r3, r4, r5, pc}

00009f12 <z_reschedule_irqlock>:
{
    9f12:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9f14:	4603      	mov	r3, r0
    9f16:	b928      	cbnz	r0, 9f24 <z_reschedule_irqlock+0x12>
    9f18:	f3ef 8205 	mrs	r2, IPSR
    9f1c:	b912      	cbnz	r2, 9f24 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    9f1e:	f7f8 fdd1 	bl	2ac4 <arch_swap>
	return ret;
    9f22:	e003      	b.n	9f2c <z_reschedule_irqlock+0x1a>
    9f24:	f383 8811 	msr	BASEPRI, r3
    9f28:	f3bf 8f6f 	isb	sy
}
    9f2c:	bd08      	pop	{r3, pc}

00009f2e <z_reschedule_unlocked>:
{
    9f2e:	b508      	push	{r3, lr}
	__asm__ volatile(
    9f30:	f04f 0320 	mov.w	r3, #32
    9f34:	f3ef 8011 	mrs	r0, BASEPRI
    9f38:	f383 8812 	msr	BASEPRI_MAX, r3
    9f3c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    9f40:	f7ff ffe7 	bl	9f12 <z_reschedule_irqlock>
}
    9f44:	bd08      	pop	{r3, pc}

00009f46 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    9f46:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    9f48:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    9f4a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    9f4c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9f4e:	2300      	movs	r3, #0
    9f50:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    9f52:	604b      	str	r3, [r1, #4]
}
    9f54:	4770      	bx	lr

00009f56 <unpend_thread_no_timeout>:
{
    9f56:	b510      	push	{r4, lr}
    9f58:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    9f5a:	f7ff ffb7 	bl	9ecc <pended_on_thread>
    9f5e:	4621      	mov	r1, r4
    9f60:	f7ff fff1 	bl	9f46 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    9f64:	7b63      	ldrb	r3, [r4, #13]
    9f66:	f023 0302 	bic.w	r3, r3, #2
    9f6a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    9f6c:	2300      	movs	r3, #0
    9f6e:	60a3      	str	r3, [r4, #8]
}
    9f70:	bd10      	pop	{r4, pc}

00009f72 <z_priq_dumb_best>:
{
    9f72:	4603      	mov	r3, r0
	return list->head == list;
    9f74:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9f76:	4283      	cmp	r3, r0
    9f78:	d000      	beq.n	9f7c <z_priq_dumb_best+0xa>
}
    9f7a:	4770      	bx	lr
	struct k_thread *thread = NULL;
    9f7c:	2000      	movs	r0, #0
	return thread;
    9f7e:	e7fc      	b.n	9f7a <z_priq_dumb_best+0x8>

00009f80 <z_ready_thread>:
{
    9f80:	b538      	push	{r3, r4, r5, lr}
    9f82:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    9f84:	2300      	movs	r3, #0
    9f86:	f04f 0220 	mov.w	r2, #32
    9f8a:	f3ef 8511 	mrs	r5, BASEPRI
    9f8e:	f382 8812 	msr	BASEPRI_MAX, r2
    9f92:	f3bf 8f6f 	isb	sy
    9f96:	e004      	b.n	9fa2 <z_ready_thread+0x22>
	__asm__ volatile(
    9f98:	f385 8811 	msr	BASEPRI, r5
    9f9c:	f3bf 8f6f 	isb	sy
    9fa0:	2301      	movs	r3, #1
    9fa2:	b943      	cbnz	r3, 9fb6 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    9fa4:	4620      	mov	r0, r4
    9fa6:	f7ff ff8f 	bl	9ec8 <thread_active_elsewhere>
    9faa:	2800      	cmp	r0, #0
    9fac:	d1f4      	bne.n	9f98 <z_ready_thread+0x18>
			ready_thread(thread);
    9fae:	4620      	mov	r0, r4
    9fb0:	f7fc fef4 	bl	6d9c <ready_thread>
    9fb4:	e7f0      	b.n	9f98 <z_ready_thread+0x18>
}
    9fb6:	bd38      	pop	{r3, r4, r5, pc}

00009fb8 <z_thread_timeout>:
{
    9fb8:	b570      	push	{r4, r5, r6, lr}
    9fba:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    9fbc:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    9fc0:	2300      	movs	r3, #0
	__asm__ volatile(
    9fc2:	f04f 0220 	mov.w	r2, #32
    9fc6:	f3ef 8511 	mrs	r5, BASEPRI
    9fca:	f382 8812 	msr	BASEPRI_MAX, r2
    9fce:	f3bf 8f6f 	isb	sy
    9fd2:	e011      	b.n	9ff8 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9fd4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    9fd8:	f023 0204 	bic.w	r2, r3, #4
    9fdc:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    9fe0:	f023 0314 	bic.w	r3, r3, #20
    9fe4:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    9fe8:	4630      	mov	r0, r6
    9fea:	f7fc fed7 	bl	6d9c <ready_thread>
	__asm__ volatile(
    9fee:	f385 8811 	msr	BASEPRI, r5
    9ff2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    9ff6:	2301      	movs	r3, #1
    9ff8:	b963      	cbnz	r3, a014 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    9ffa:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    9ffe:	f013 0f28 	tst.w	r3, #40	; 0x28
    a002:	d1f4      	bne.n	9fee <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    a004:	f854 3c10 	ldr.w	r3, [r4, #-16]
    a008:	2b00      	cmp	r3, #0
    a00a:	d0e3      	beq.n	9fd4 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
    a00c:	4630      	mov	r0, r6
    a00e:	f7ff ffa2 	bl	9f56 <unpend_thread_no_timeout>
    a012:	e7df      	b.n	9fd4 <z_thread_timeout+0x1c>
}
    a014:	bd70      	pop	{r4, r5, r6, pc}

0000a016 <unpend_all>:
{
    a016:	b538      	push	{r3, r4, r5, lr}
    a018:	4605      	mov	r5, r0
	return list->head == list;
    a01a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a01c:	42a5      	cmp	r5, r4
    a01e:	d00e      	beq.n	a03e <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a020:	b16c      	cbz	r4, a03e <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    a022:	4620      	mov	r0, r4
    a024:	f7ff ff97 	bl	9f56 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    a028:	f104 0018 	add.w	r0, r4, #24
    a02c:	f000 f89a 	bl	a164 <z_abort_timeout>
    a030:	2300      	movs	r3, #0
    a032:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    a036:	4620      	mov	r0, r4
    a038:	f7fc feb0 	bl	6d9c <ready_thread>
    a03c:	e7ed      	b.n	a01a <unpend_all+0x4>
}
    a03e:	bd38      	pop	{r3, r4, r5, pc}

0000a040 <add_to_waitq_locked>:
{
    a040:	b570      	push	{r4, r5, r6, lr}
    a042:	4605      	mov	r5, r0
    a044:	460e      	mov	r6, r1
	unready_thread(thread);
    a046:	f7fc ff03 	bl	6e50 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    a04a:	7b6b      	ldrb	r3, [r5, #13]
    a04c:	f043 0302 	orr.w	r3, r3, #2
    a050:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    a052:	b1fe      	cbz	r6, a094 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    a054:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    a056:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a058:	42a6      	cmp	r6, r4
    a05a:	d108      	bne.n	a06e <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a05c:	2400      	movs	r4, #0
    a05e:	e006      	b.n	a06e <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    a060:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    a062:	606b      	str	r3, [r5, #4]
	node->next = successor;
    a064:	602c      	str	r4, [r5, #0]
	prev->next = node;
    a066:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    a068:	6065      	str	r5, [r4, #4]
}
    a06a:	e013      	b.n	a094 <add_to_waitq_locked+0x54>
    a06c:	2400      	movs	r4, #0
    a06e:	b164      	cbz	r4, a08a <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a070:	4621      	mov	r1, r4
    a072:	4628      	mov	r0, r5
    a074:	f7ff ff2c 	bl	9ed0 <z_sched_prio_cmp>
    a078:	2800      	cmp	r0, #0
    a07a:	dcf1      	bgt.n	a060 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a07c:	2c00      	cmp	r4, #0
    a07e:	d0f6      	beq.n	a06e <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    a080:	6873      	ldr	r3, [r6, #4]
    a082:	429c      	cmp	r4, r3
    a084:	d0f2      	beq.n	a06c <add_to_waitq_locked+0x2c>
    a086:	6824      	ldr	r4, [r4, #0]
    a088:	e7f1      	b.n	a06e <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    a08a:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    a08c:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    a08e:	606b      	str	r3, [r5, #4]
	tail->next = node;
    a090:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a092:	6075      	str	r5, [r6, #4]
}
    a094:	bd70      	pop	{r4, r5, r6, pc}

0000a096 <pend_locked>:
{
    a096:	b570      	push	{r4, r5, r6, lr}
    a098:	4604      	mov	r4, r0
    a09a:	4616      	mov	r6, r2
    a09c:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    a09e:	f7ff ffcf 	bl	a040 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    a0a2:	4632      	mov	r2, r6
    a0a4:	462b      	mov	r3, r5
    a0a6:	4620      	mov	r0, r4
    a0a8:	f7fc fd2c 	bl	6b04 <add_thread_timeout>
}
    a0ac:	bd70      	pop	{r4, r5, r6, pc}

0000a0ae <z_unpend1_no_timeout>:
{
    a0ae:	b570      	push	{r4, r5, r6, lr}
    a0b0:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    a0b2:	2300      	movs	r3, #0
	__asm__ volatile(
    a0b4:	f04f 0220 	mov.w	r2, #32
    a0b8:	f3ef 8511 	mrs	r5, BASEPRI
    a0bc:	f382 8812 	msr	BASEPRI_MAX, r2
    a0c0:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    a0c4:	461c      	mov	r4, r3
    a0c6:	e004      	b.n	a0d2 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
    a0c8:	f385 8811 	msr	BASEPRI, r5
    a0cc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a0d0:	2301      	movs	r3, #1
    a0d2:	b943      	cbnz	r3, a0e6 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
    a0d4:	4630      	mov	r0, r6
    a0d6:	f7ff ff4c 	bl	9f72 <z_priq_dumb_best>
		if (thread != NULL) {
    a0da:	4604      	mov	r4, r0
    a0dc:	2800      	cmp	r0, #0
    a0de:	d0f3      	beq.n	a0c8 <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    a0e0:	f7ff ff39 	bl	9f56 <unpend_thread_no_timeout>
    a0e4:	e7f0      	b.n	a0c8 <z_unpend1_no_timeout+0x1a>
}
    a0e6:	4620      	mov	r0, r4
    a0e8:	bd70      	pop	{r4, r5, r6, pc}

0000a0ea <z_unpend_first_thread>:
{
    a0ea:	b570      	push	{r4, r5, r6, lr}
    a0ec:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    a0ee:	2300      	movs	r3, #0
	__asm__ volatile(
    a0f0:	f04f 0220 	mov.w	r2, #32
    a0f4:	f3ef 8511 	mrs	r5, BASEPRI
    a0f8:	f382 8812 	msr	BASEPRI_MAX, r2
    a0fc:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    a100:	461c      	mov	r4, r3
    a102:	e004      	b.n	a10e <z_unpend_first_thread+0x24>
	__asm__ volatile(
    a104:	f385 8811 	msr	BASEPRI, r5
    a108:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a10c:	2301      	movs	r3, #1
    a10e:	b963      	cbnz	r3, a12a <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    a110:	4630      	mov	r0, r6
    a112:	f7ff ff2e 	bl	9f72 <z_priq_dumb_best>
		if (thread != NULL) {
    a116:	4604      	mov	r4, r0
    a118:	2800      	cmp	r0, #0
    a11a:	d0f3      	beq.n	a104 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    a11c:	f7ff ff1b 	bl	9f56 <unpend_thread_no_timeout>
    a120:	f104 0018 	add.w	r0, r4, #24
    a124:	f000 f81e 	bl	a164 <z_abort_timeout>
    a128:	e7ec      	b.n	a104 <z_unpend_first_thread+0x1a>
}
    a12a:	4620      	mov	r0, r4
    a12c:	bd70      	pop	{r4, r5, r6, pc}

0000a12e <init_ready_q>:
	sys_dlist_init(&rq->runq);
    a12e:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    a130:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    a132:	6083      	str	r3, [r0, #8]
}
    a134:	4770      	bx	lr

0000a136 <remove_timeout>:
{
    a136:	b510      	push	{r4, lr}
    a138:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    a13a:	f7fd f8d5 	bl	72e8 <next>
    a13e:	b148      	cbz	r0, a154 <remove_timeout+0x1e>
    a140:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    a142:	6903      	ldr	r3, [r0, #16]
    a144:	6941      	ldr	r1, [r0, #20]
    a146:	6920      	ldr	r0, [r4, #16]
    a148:	181b      	adds	r3, r3, r0
    a14a:	6960      	ldr	r0, [r4, #20]
    a14c:	eb41 0100 	adc.w	r1, r1, r0
    a150:	6113      	str	r3, [r2, #16]
    a152:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    a154:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    a156:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    a158:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a15a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a15c:	2300      	movs	r3, #0
    a15e:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    a160:	6063      	str	r3, [r4, #4]
}
    a162:	bd10      	pop	{r4, pc}

0000a164 <z_abort_timeout>:
{
    a164:	b570      	push	{r4, r5, r6, lr}
    a166:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    a168:	2300      	movs	r3, #0
	__asm__ volatile(
    a16a:	f04f 0220 	mov.w	r2, #32
    a16e:	f3ef 8611 	mrs	r6, BASEPRI
    a172:	f382 8812 	msr	BASEPRI_MAX, r2
    a176:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    a17a:	f06f 0015 	mvn.w	r0, #21
    a17e:	e004      	b.n	a18a <z_abort_timeout+0x26>
	__asm__ volatile(
    a180:	f386 8811 	msr	BASEPRI, r6
    a184:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a188:	2301      	movs	r3, #1
    a18a:	461d      	mov	r5, r3
    a18c:	b93b      	cbnz	r3, a19e <z_abort_timeout+0x3a>
	return node->next != NULL;
    a18e:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    a190:	2b00      	cmp	r3, #0
    a192:	d0f5      	beq.n	a180 <z_abort_timeout+0x1c>
			remove_timeout(to);
    a194:	4620      	mov	r0, r4
    a196:	f7ff ffce 	bl	a136 <remove_timeout>
			ret = 0;
    a19a:	4628      	mov	r0, r5
    a19c:	e7f0      	b.n	a180 <z_abort_timeout+0x1c>
}
    a19e:	bd70      	pop	{r4, r5, r6, pc}

0000a1a0 <z_get_next_timeout_expiry>:
{
    a1a0:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    a1a2:	2300      	movs	r3, #0
	__asm__ volatile(
    a1a4:	f04f 0220 	mov.w	r2, #32
    a1a8:	f3ef 8411 	mrs	r4, BASEPRI
    a1ac:	f382 8812 	msr	BASEPRI_MAX, r2
    a1b0:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    a1b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a1b8:	e006      	b.n	a1c8 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    a1ba:	f7fd f8ad 	bl	7318 <next_timeout>
	__asm__ volatile(
    a1be:	f384 8811 	msr	BASEPRI, r4
    a1c2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a1c6:	2301      	movs	r3, #1
    a1c8:	2b00      	cmp	r3, #0
    a1ca:	d0f6      	beq.n	a1ba <z_get_next_timeout_expiry+0x1a>
}
    a1cc:	bd10      	pop	{r4, pc}

0000a1ce <z_set_timeout_expiry>:
{
    a1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1d0:	4606      	mov	r6, r0
    a1d2:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    a1d4:	2300      	movs	r3, #0
	__asm__ volatile(
    a1d6:	f04f 0220 	mov.w	r2, #32
    a1da:	f3ef 8511 	mrs	r5, BASEPRI
    a1de:	f382 8812 	msr	BASEPRI_MAX, r2
    a1e2:	f3bf 8f6f 	isb	sy
    a1e6:	e00a      	b.n	a1fe <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    a1e8:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    a1ea:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    a1ee:	2801      	cmp	r0, #1
    a1f0:	dd00      	ble.n	a1f4 <z_set_timeout_expiry+0x26>
    a1f2:	b97c      	cbnz	r4, a214 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    a1f4:	f385 8811 	msr	BASEPRI, r5
    a1f8:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    a1fc:	2301      	movs	r3, #1
    a1fe:	461c      	mov	r4, r3
    a200:	b97b      	cbnz	r3, a222 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    a202:	f7fd f889 	bl	7318 <next_timeout>
			      || (ticks <= next_to);
    a206:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    a20a:	d0ed      	beq.n	a1e8 <z_set_timeout_expiry+0x1a>
    a20c:	42b0      	cmp	r0, r6
    a20e:	dbec      	blt.n	a1ea <z_set_timeout_expiry+0x1c>
    a210:	2401      	movs	r4, #1
    a212:	e7ea      	b.n	a1ea <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    a214:	4639      	mov	r1, r7
    a216:	42b0      	cmp	r0, r6
    a218:	bfa8      	it	ge
    a21a:	4630      	movge	r0, r6
    a21c:	f7fa fd52 	bl	4cc4 <sys_clock_set_timeout>
    a220:	e7e8      	b.n	a1f4 <z_set_timeout_expiry+0x26>
}
    a222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a224 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    a224:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    a226:	f7fd f989 	bl	753c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    a22a:	bd08      	pop	{r3, pc}

0000a22c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    a22c:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    a22e:	f7fd f985 	bl	753c <sys_clock_tick_get>
}
    a232:	bd08      	pop	{r3, pc}

0000a234 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    a234:	b900      	cbnz	r0, a238 <z_impl_k_busy_wait+0x4>
    a236:	4770      	bx	lr
{
    a238:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    a23a:	f7fe fb66 	bl	890a <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    a23e:	bd08      	pop	{r3, pc}

0000a240 <z_reschedule_unlocked>:
{
    a240:	b508      	push	{r3, lr}
	__asm__ volatile(
    a242:	f04f 0320 	mov.w	r3, #32
    a246:	f3ef 8011 	mrs	r0, BASEPRI
    a24a:	f383 8812 	msr	BASEPRI_MAX, r3
    a24e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a252:	f7ff fe5e 	bl	9f12 <z_reschedule_irqlock>
}
    a256:	bd08      	pop	{r3, pc}

0000a258 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    a258:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    a25a:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    a25c:	2300      	movs	r3, #0
    a25e:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    a260:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    a264:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    a266:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    a268:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    a26a:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    a26c:	6343      	str	r3, [r0, #52]	; 0x34
}
    a26e:	4770      	bx	lr

0000a270 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    a270:	b510      	push	{r4, lr}
    a272:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    a274:	f7ff ff76 	bl	a164 <z_abort_timeout>

	if (inactive) {
    a278:	b960      	cbnz	r0, a294 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
    a27a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a27c:	b10b      	cbz	r3, a282 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    a27e:	4620      	mov	r0, r4
    a280:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    a282:	f104 0018 	add.w	r0, r4, #24
    a286:	f7ff ff12 	bl	a0ae <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    a28a:	b118      	cbz	r0, a294 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
    a28c:	f7ff fe78 	bl	9f80 <z_ready_thread>
			z_reschedule_unlocked();
    a290:	f7ff ffd6 	bl	a240 <z_reschedule_unlocked>
		}
	}
}
    a294:	bd10      	pop	{r4, pc}

0000a296 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    a296:	4770      	bx	lr
