
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	48 18 00 20 89 17 00 00 39 49 00 00 5d 17 00 00     H.. ....9I..]...
  10:	5d 17 00 00 5d 17 00 00 5d 17 00 00 5d 17 00 00     ]...]...]...]...
	...
  2c:	9d 14 00 00 5d 17 00 00 00 00 00 00 45 14 00 00     ....].......E...
  3c:	5d 17 00 00                                         ]...

00000040 <_irq_vector_table>:
  40:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
  50:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
  60:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
  70:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
  80:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
  90:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
  a0:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
  b0:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
  c0:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
  d0:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
  e0:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
  f0:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
 100:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
 110:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
 120:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
 130:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
 140:	1d 15 00 00 1d 15 00 00 1d 15 00 00 1d 15 00 00     ................
 150:	1d 15 00 00                                         ....

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	4686      	mov	lr, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x74>
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x6c>
     1da:	18eb      	adds	r3, r5, r3
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x70>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x58>
     20e:	42a0      	cmp	r0, r4
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x58>
     212:	f1ac 0302 	sub.w	r3, ip, #2
     216:	442c      	add	r4, r5
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x68>
     220:	40d4      	lsrs	r4, r2
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x58>
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
     24a:	fb0c f807 	mul.w	r8, ip, r7
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     25c:	d204      	bcs.n	268 <CONFIG_SRAM_SIZE+0xa8>
     25e:	4598      	cmp	r8, r3
     260:	d902      	bls.n	268 <CONFIG_SRAM_SIZE+0xa8>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
     268:	eba3 0308 	sub.w	r3, r3, r8
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
     272:	fb0e 331c 	mls	r3, lr, ip, r3
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
     284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28e:	f1ac 0302 	sub.w	r3, ip, #2
     292:	442c      	add	r4, r5
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
     2dc:	4429      	add	r1, r5
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
     2ec:	fb0c f707 	mul.w	r7, ip, r7
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
     2f8:	18eb      	adds	r3, r5, r3
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     300:	429f      	cmp	r7, r3
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     304:	f1ac 0102 	sub.w	r1, ip, #2
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x7a>
     312:	4660      	mov	r0, ip
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     31a:	4660      	mov	r0, ip
     31c:	e7a4      	b.n	268 <CONFIG_SRAM_SIZE+0xa8>
     31e:	4663      	mov	r3, ip
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     32e:	e9c6 e000 	strd	lr, r0, [r6]
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
     358:	e9c6 4c00 	strd	r4, ip, [r6]
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     396:	459a      	cmp	sl, r3
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <main>:
#include <zephyr/kernel.h>
#include <zephyr/sys/printk.h>
#include "myfunction.h"

void main(void)
{
     424:	b510      	push	{r4, lr}
	while(1){
		if(!(IS_ENABLED(CONFIG_MYFUNCTION))){
			printk("MYFUNCTION not enabled\r\n");
			return;
		}
		printk("The sum of %d and %d is %d\n\r", a, b, sum(a,b));
     426:	4c08      	ldr	r4, [pc, #32]	; (448 <main+0x24>)
     428:	2104      	movs	r1, #4
     42a:	2003      	movs	r0, #3
     42c:	f004 f91e 	bl	466c <sum>
     430:	2204      	movs	r2, #4
     432:	4603      	mov	r3, r0
     434:	2103      	movs	r1, #3
     436:	4620      	mov	r0, r4
     438:	f004 f91c 	bl	4674 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     43c:	2100      	movs	r1, #0
     43e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     442:	f003 fd9f 	bl	3f84 <z_impl_k_sleep>
     446:	e7ef      	b.n	428 <main+0x4>
     448:	000057e4 	.word	0x000057e4

0000044c <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     44c:	4b01      	ldr	r3, [pc, #4]	; (454 <char_out+0x8>)
     44e:	681b      	ldr	r3, [r3, #0]
     450:	4718      	bx	r3
     452:	bf00      	nop
     454:	20000000 	.word	0x20000000

00000458 <__printk_hook_install>:
	_char_out = fn;
     458:	4b01      	ldr	r3, [pc, #4]	; (460 <__printk_hook_install+0x8>)
     45a:	6018      	str	r0, [r3, #0]
}
     45c:	4770      	bx	lr
     45e:	bf00      	nop
     460:	20000000 	.word	0x20000000

00000464 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     464:	b507      	push	{r0, r1, r2, lr}
     466:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     468:	2100      	movs	r1, #0
     46a:	4602      	mov	r2, r0
     46c:	9100      	str	r1, [sp, #0]
     46e:	4803      	ldr	r0, [pc, #12]	; (47c <vprintk+0x18>)
     470:	f000 f914 	bl	69c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     474:	b003      	add	sp, #12
     476:	f85d fb04 	ldr.w	pc, [sp], #4
     47a:	bf00      	nop
     47c:	0000044d 	.word	0x0000044d

00000480 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     484:	8b05      	ldrh	r5, [r0, #24]
{
     486:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     488:	0728      	lsls	r0, r5, #28
{
     48a:	4690      	mov	r8, r2
	if (processing) {
     48c:	d411      	bmi.n	4b2 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
     48e:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     490:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     494:	f040 80cd 	bne.w	632 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14a>
			evt = process_recheck(mgr);
     498:	4620      	mov	r0, r4
     49a:	f004 f902 	bl	46a2 <process_recheck>
		}

		if (evt == EVT_NOP) {
     49e:	b178      	cbz	r0, 4c0 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
     4a0:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4a2:	8b21      	ldrh	r1, [r4, #24]
     4a4:	2804      	cmp	r0, #4
     4a6:	d811      	bhi.n	4cc <process_event+0x4c>
     4a8:	e8df f000 	tbb	[pc, r0]
     4ac:	856d10c3 	.word	0x856d10c3
     4b0:	95          	.byte	0x95
     4b1:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
     4b2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4b4:	bf0c      	ite	eq
     4b6:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
     4ba:	f045 0520 	orrne.w	r5, r5, #32
     4be:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4c0:	f388 8811 	msr	BASEPRI, r8
     4c4:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     4cc:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     4d0:	45aa      	cmp	sl, r5
     4d2:	f000 80a6 	beq.w	622 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x13a>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
     4d6:	2700      	movs	r7, #0
     4d8:	46b9      	mov	r9, r7
     4da:	463e      	mov	r6, r7
     4dc:	68a3      	ldr	r3, [r4, #8]
     4de:	2b00      	cmp	r3, #0
     4e0:	f000 80bd 	beq.w	65e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x176>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     4e4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     4e8:	8321      	strh	r1, [r4, #24]
     4ea:	f388 8811 	msr	BASEPRI, r8
     4ee:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     4f2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     4f4:	2900      	cmp	r1, #0
     4f6:	f000 80bb 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
	return node->next;
     4fa:	680d      	ldr	r5, [r1, #0]
     4fc:	2900      	cmp	r1, #0
     4fe:	f000 80b7 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
		mon->callback(mgr, mon, state, res);
     502:	4633      	mov	r3, r6
     504:	4652      	mov	r2, sl
     506:	4620      	mov	r0, r4
     508:	f8d1 8004 	ldr.w	r8, [r1, #4]
     50c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     50e:	2d00      	cmp	r5, #0
     510:	d076      	beq.n	600 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x118>
     512:	682b      	ldr	r3, [r5, #0]
     514:	4629      	mov	r1, r5
     516:	461d      	mov	r5, r3
     518:	e7f0      	b.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     51a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     51e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     520:	2a01      	cmp	r2, #1
     522:	d81b      	bhi.n	55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>
	list->head = NULL;
     524:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     526:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     52a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     52c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     52e:	b289      	uxth	r1, r1
	list->tail = NULL;
     530:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     534:	d109      	bne.n	54a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x62>
     536:	463b      	mov	r3, r7
     538:	e003      	b.n	542 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5a>
				mgr->refs += 1U;
     53a:	8b62      	ldrh	r2, [r4, #26]
     53c:	3201      	adds	r2, #1
     53e:	8362      	strh	r2, [r4, #26]
	return node->next;
     540:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     542:	2b00      	cmp	r3, #0
     544:	d1f9      	bne.n	53a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x52>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     546:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     54a:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     54c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     54e:	f004 f8a8 	bl	46a2 <process_recheck>
     552:	2800      	cmp	r0, #0
     554:	d07b      	beq.n	64e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x166>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     556:	f041 0120 	orr.w	r1, r1, #32
     55a:	e077      	b.n	64c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x164>
	} else if (state == ONOFF_STATE_TO_OFF) {
     55c:	2b04      	cmp	r3, #4
     55e:	d10a      	bne.n	576 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     560:	f021 0107 	bic.w	r1, r1, #7
     564:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     566:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     568:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     56a:	f004 f89a 	bl	46a2 <process_recheck>
     56e:	b110      	cbz	r0, 576 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     570:	f041 0120 	orr.w	r1, r1, #32
     574:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     576:	8b21      	ldrh	r1, [r4, #24]
     578:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     57c:	45aa      	cmp	sl, r5
     57e:	d050      	beq.n	622 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x13a>
     580:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
     582:	46b9      	mov	r9, r7
     584:	e7aa      	b.n	4dc <process_event+0x5c>
			transit = mgr->transitions->start;
     586:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     588:	f021 0107 	bic.w	r1, r1, #7
     58c:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
     590:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
     592:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
     596:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     598:	d12d      	bne.n	5f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10e>
		    || (transit != NULL)) {
     59a:	f1b9 0f00 	cmp.w	r9, #0
     59e:	d040      	beq.n	622 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x13a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     5a0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     5a4:	8321      	strh	r1, [r4, #24]
     5a6:	f388 8811 	msr	BASEPRI, r8
     5aa:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
     5ae:	4620      	mov	r0, r4
     5b0:	4939      	ldr	r1, [pc, #228]	; (698 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b0>)
     5b2:	47c8      	blx	r9
     5b4:	e029      	b.n	60a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x122>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5b6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
     5ba:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5bc:	f041 0104 	orr.w	r1, r1, #4
     5c0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     5c2:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
     5c4:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
     5c8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     5ca:	d0e6      	beq.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
     5cc:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5ce:	f04f 0a04 	mov.w	sl, #4
		res = 0;
     5d2:	463e      	mov	r6, r7
     5d4:	e782      	b.n	4dc <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5d6:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
     5da:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5dc:	f041 0105 	orr.w	r1, r1, #5
     5e0:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
     5e2:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
     5e4:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
     5e8:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
     5ea:	d0d6      	beq.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
     5ec:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5ee:	f04f 0a05 	mov.w	sl, #5
		res = 0;
     5f2:	463e      	mov	r6, r7
     5f4:	e772      	b.n	4dc <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
     5f6:	2700      	movs	r7, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5f8:	f04f 0a06 	mov.w	sl, #6
		res = 0;
     5fc:	463e      	mov	r6, r7
     5fe:	e76d      	b.n	4dc <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     600:	462b      	mov	r3, r5
     602:	e787      	b.n	514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
			if (transit != NULL) {
     604:	f1b9 0f00 	cmp.w	r9, #0
     608:	d1d1      	bne.n	5ae <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc6>
	__asm__ volatile(
     60a:	f04f 0320 	mov.w	r3, #32
     60e:	f3ef 8811 	mrs	r8, BASEPRI
     612:	f383 8812 	msr	BASEPRI_MAX, r3
     616:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     61a:	8b23      	ldrh	r3, [r4, #24]
     61c:	f023 0308 	bic.w	r3, r3, #8
     620:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     622:	8b25      	ldrh	r5, [r4, #24]
     624:	06ea      	lsls	r2, r5, #27
     626:	d52e      	bpl.n	686 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x19e>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     628:	f025 0310 	bic.w	r3, r5, #16
     62c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     62e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
     632:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     634:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     636:	2e00      	cmp	r6, #0
     638:	f6bf af6f 	bge.w	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
	list->head = NULL;
     63c:	2300      	movs	r3, #0
		*clients = mgr->clients;
     63e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
     640:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     644:	f021 0107 	bic.w	r1, r1, #7
     648:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
     64c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     64e:	8b21      	ldrh	r1, [r4, #24]
     650:	f04f 0900 	mov.w	r9, #0
     654:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     658:	45aa      	cmp	sl, r5
     65a:	f47f af3f 	bne.w	4dc <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
     65e:	2f00      	cmp	r7, #0
     660:	d09b      	beq.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     662:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     666:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
     668:	f388 8811 	msr	BASEPRI, r8
     66c:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
     670:	2f00      	cmp	r7, #0
     672:	d0c7      	beq.n	604 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x11c>
	return node->next;
     674:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
     676:	4639      	mov	r1, r7
     678:	4633      	mov	r3, r6
     67a:	4652      	mov	r2, sl
     67c:	4620      	mov	r0, r4
     67e:	f004 f83c 	bl	46fa <notify_one>
	list->head = node;
     682:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
     684:	e7f4      	b.n	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     686:	06ab      	lsls	r3, r5, #26
     688:	f57f af1a 	bpl.w	4c0 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     68c:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     690:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     692:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
     696:	e6ff      	b.n	498 <process_event+0x18>
     698:	00004727 	.word	0x00004727

0000069c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6a0:	4681      	mov	r9, r0
     6a2:	468b      	mov	fp, r1
     6a4:	4617      	mov	r7, r2
     6a6:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     6a8:	2500      	movs	r5, #0
{
     6aa:	b095      	sub	sp, #84	; 0x54
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     6ac:	7838      	ldrb	r0, [r7, #0]
     6ae:	b908      	cbnz	r0, 6b4 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
     6b0:	4628      	mov	r0, r5
     6b2:	e357      	b.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
			OUTC(*fp++);
     6b4:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
     6b6:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     6b8:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
     6ba:	d006      	beq.n	6ca <z_cbvprintf_impl+0x2e>
			OUTC('%');
     6bc:	4659      	mov	r1, fp
     6be:	47c8      	blx	r9
     6c0:	2800      	cmp	r0, #0
     6c2:	f2c0 834f 	blt.w	d64 <CONFIG_ISR_STACK_SIZE+0x564>
     6c6:	3501      	adds	r5, #1
		if (bps == NULL) {
     6c8:	e1fb      	b.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
		} state = {
     6ca:	2218      	movs	r2, #24
     6cc:	2100      	movs	r1, #0
     6ce:	a80e      	add	r0, sp, #56	; 0x38
     6d0:	f004 f97e 	bl	49d0 <memset>
	if (*sp == '%') {
     6d4:	787b      	ldrb	r3, [r7, #1]
     6d6:	2b25      	cmp	r3, #37	; 0x25
     6d8:	d07d      	beq.n	7d6 <z_cbvprintf_impl+0x13a>
     6da:	2300      	movs	r3, #0
     6dc:	4698      	mov	r8, r3
     6de:	469e      	mov	lr, r3
     6e0:	469c      	mov	ip, r3
     6e2:	461e      	mov	r6, r3
     6e4:	1c78      	adds	r0, r7, #1
     6e6:	4601      	mov	r1, r0
		switch (*sp) {
     6e8:	f810 2b01 	ldrb.w	r2, [r0], #1
     6ec:	2a2b      	cmp	r2, #43	; 0x2b
     6ee:	f000 80a1 	beq.w	834 <CONFIG_ISR_STACK_SIZE+0x34>
     6f2:	f200 8098 	bhi.w	826 <CONFIG_ISR_STACK_SIZE+0x26>
     6f6:	2a20      	cmp	r2, #32
     6f8:	f000 809f 	beq.w	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6fc:	2a23      	cmp	r2, #35	; 0x23
     6fe:	f000 809f 	beq.w	840 <CONFIG_ISR_STACK_SIZE+0x40>
     702:	b12b      	cbz	r3, 710 <z_cbvprintf_impl+0x74>
     704:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     70c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     710:	f1b8 0f00 	cmp.w	r8, #0
     714:	d005      	beq.n	722 <z_cbvprintf_impl+0x86>
     716:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     71a:	f043 0320 	orr.w	r3, r3, #32
     71e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     722:	f1be 0f00 	cmp.w	lr, #0
     726:	d005      	beq.n	734 <z_cbvprintf_impl+0x98>
     728:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     72c:	f043 0310 	orr.w	r3, r3, #16
     730:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     734:	f1bc 0f00 	cmp.w	ip, #0
     738:	d005      	beq.n	746 <z_cbvprintf_impl+0xaa>
     73a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     73e:	f043 0308 	orr.w	r3, r3, #8
     742:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
     746:	b12e      	cbz	r6, 754 <z_cbvprintf_impl+0xb8>
     748:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     74c:	f043 0304 	orr.w	r3, r3, #4
     750:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
     754:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     758:	f003 0044 	and.w	r0, r3, #68	; 0x44
     75c:	2844      	cmp	r0, #68	; 0x44
     75e:	d103      	bne.n	768 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     760:	f36f 1386 	bfc	r3, #6, #1
     764:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
     768:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     76c:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
     76e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     772:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
     776:	d17f      	bne.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
		conv->width_star = true;
     778:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     77c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     77e:	f042 0201 	orr.w	r2, r2, #1
     782:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
     786:	781a      	ldrb	r2, [r3, #0]
     788:	2a2e      	cmp	r2, #46	; 0x2e
     78a:	bf0c      	ite	eq
     78c:	2101      	moveq	r1, #1
     78e:	2100      	movne	r1, #0
     790:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     794:	f361 0241 	bfi	r2, r1, #1, #1
     798:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
     79c:	d178      	bne.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
	if (*sp == '*') {
     79e:	785a      	ldrb	r2, [r3, #1]
     7a0:	2a2a      	cmp	r2, #42	; 0x2a
     7a2:	d06e      	beq.n	882 <CONFIG_ISR_STACK_SIZE+0x82>
	size_t val = 0;
     7a4:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     7a6:	f04f 0c0a 	mov.w	ip, #10
	++sp;
     7aa:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     7ac:	4619      	mov	r1, r3
     7ae:	f811 0b01 	ldrb.w	r0, [r1], #1
     7b2:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     7b6:	2e09      	cmp	r6, #9
     7b8:	f240 8095 	bls.w	8e6 <CONFIG_ISR_STACK_SIZE+0xe6>
	conv->unsupported |= ((conv->prec_value < 0)
     7bc:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
     7c0:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
     7c2:	f3c1 0040 	ubfx	r0, r1, #1, #1
     7c6:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
     7ca:	460a      	mov	r2, r1
     7cc:	f360 0241 	bfi	r2, r0, #1, #1
     7d0:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     7d4:	e05c      	b.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
		conv->specifier = *sp++;
     7d6:	1cba      	adds	r2, r7, #2
     7d8:	9203      	str	r2, [sp, #12]
     7da:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
     7de:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     7e2:	07da      	lsls	r2, r3, #31
     7e4:	f140 812e 	bpl.w	a44 <CONFIG_ISR_STACK_SIZE+0x244>
			width = va_arg(ap, int);
     7e8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
     7ec:	f1b8 0f00 	cmp.w	r8, #0
     7f0:	da07      	bge.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
				conv->flag_dash = true;
     7f2:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				width = -width;
     7f6:	f1c8 0800 	rsb	r8, r8, #0
				conv->flag_dash = true;
     7fa:	f042 0204 	orr.w	r2, r2, #4
     7fe:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
		if (conv->prec_star) {
     802:	075e      	lsls	r6, r3, #29
     804:	f140 8127 	bpl.w	a56 <CONFIG_ISR_STACK_SIZE+0x256>
			int arg = va_arg(ap, int);
     808:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
     80c:	f1ba 0f00 	cmp.w	sl, #0
     810:	f280 8126 	bge.w	a60 <CONFIG_ISR_STACK_SIZE+0x260>
				conv->prec_present = false;
     814:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
     818:	f36f 0341 	bfc	r3, #1, #1
     81c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
     820:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     824:	e11c      	b.n	a60 <CONFIG_ISR_STACK_SIZE+0x260>
		switch (*sp) {
     826:	2a2d      	cmp	r2, #45	; 0x2d
     828:	d00d      	beq.n	846 <CONFIG_ISR_STACK_SIZE+0x46>
     82a:	2a30      	cmp	r2, #48	; 0x30
     82c:	f47f af69 	bne.w	702 <z_cbvprintf_impl+0x66>
     830:	2301      	movs	r3, #1
	} while (loop);
     832:	e758      	b.n	6e6 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
     834:	f04f 0c01 	mov.w	ip, #1
     838:	e755      	b.n	6e6 <z_cbvprintf_impl+0x4a>
     83a:	f04f 0e01 	mov.w	lr, #1
     83e:	e752      	b.n	6e6 <z_cbvprintf_impl+0x4a>
     840:	f04f 0801 	mov.w	r8, #1
     844:	e74f      	b.n	6e6 <z_cbvprintf_impl+0x4a>
     846:	2601      	movs	r6, #1
     848:	e74d      	b.n	6e6 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
     84a:	4603      	mov	r3, r0
     84c:	fb0e 6202 	mla	r2, lr, r2, r6
     850:	3a30      	subs	r2, #48	; 0x30
     852:	4618      	mov	r0, r3
     854:	f810 6b01 	ldrb.w	r6, [r0], #1
     858:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     85c:	f1bc 0f09 	cmp.w	ip, #9
     860:	d9f3      	bls.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
	if (sp != wp) {
     862:	4299      	cmp	r1, r3
     864:	d08f      	beq.n	786 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     866:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
     86a:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
     86c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     86e:	f362 0141 	bfi	r1, r2, #1, #1
     872:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
     876:	e786      	b.n	786 <z_cbvprintf_impl+0xea>
     878:	460b      	mov	r3, r1
	size_t val = 0;
     87a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     87c:	f04f 0e0a 	mov.w	lr, #10
     880:	e7e7      	b.n	852 <CONFIG_ISR_STACK_SIZE+0x52>
		conv->prec_star = true;
     882:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
		return ++sp;
     886:	3302      	adds	r3, #2
		conv->prec_star = true;
     888:	f042 0204 	orr.w	r2, r2, #4
     88c:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	switch (*sp) {
     890:	781a      	ldrb	r2, [r3, #0]
     892:	2a6c      	cmp	r2, #108	; 0x6c
     894:	d047      	beq.n	926 <CONFIG_ISR_STACK_SIZE+0x126>
     896:	d82b      	bhi.n	8f0 <CONFIG_ISR_STACK_SIZE+0xf0>
     898:	2a68      	cmp	r2, #104	; 0x68
     89a:	d031      	beq.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
     89c:	2a6a      	cmp	r2, #106	; 0x6a
     89e:	d04b      	beq.n	938 <CONFIG_ISR_STACK_SIZE+0x138>
     8a0:	2a4c      	cmp	r2, #76	; 0x4c
     8a2:	d051      	beq.n	948 <CONFIG_ISR_STACK_SIZE+0x148>
	conv->specifier = *sp++;
     8a4:	461a      	mov	r2, r3
     8a6:	f812 3b01 	ldrb.w	r3, [r2], #1
	switch (conv->specifier) {
     8aa:	2b78      	cmp	r3, #120	; 0x78
	conv->specifier = *sp++;
     8ac:	9203      	str	r2, [sp, #12]
     8ae:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->length_mod == LENGTH_UPPER_L) {
     8b2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	switch (conv->specifier) {
     8b6:	f200 80be 	bhi.w	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     8ba:	2b6d      	cmp	r3, #109	; 0x6d
     8bc:	d851      	bhi.n	962 <CONFIG_ISR_STACK_SIZE+0x162>
     8be:	2b69      	cmp	r3, #105	; 0x69
     8c0:	f200 80b9 	bhi.w	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     8c4:	2b57      	cmp	r3, #87	; 0x57
     8c6:	d867      	bhi.n	998 <CONFIG_ISR_STACK_SIZE+0x198>
     8c8:	2b41      	cmp	r3, #65	; 0x41
     8ca:	d003      	beq.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     8cc:	3b45      	subs	r3, #69	; 0x45
     8ce:	2b02      	cmp	r3, #2
     8d0:	f200 80b1 	bhi.w	a36 <CONFIG_ISR_STACK_SIZE+0x236>
		conv->specifier_cat = SPECIFIER_FP;
     8d4:	2204      	movs	r2, #4
     8d6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     8da:	f362 0302 	bfi	r3, r2, #0, #3
     8de:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
     8e2:	2301      	movs	r3, #1
			break;
     8e4:	e073      	b.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
		val = 10U * val + *sp++ - '0';
     8e6:	fb0c 0202 	mla	r2, ip, r2, r0
     8ea:	460b      	mov	r3, r1
     8ec:	3a30      	subs	r2, #48	; 0x30
     8ee:	e75d      	b.n	7ac <z_cbvprintf_impl+0x110>
	switch (*sp) {
     8f0:	2a74      	cmp	r2, #116	; 0x74
     8f2:	d025      	beq.n	940 <CONFIG_ISR_STACK_SIZE+0x140>
     8f4:	2a7a      	cmp	r2, #122	; 0x7a
     8f6:	d1d5      	bne.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
		conv->length_mod = LENGTH_Z;
     8f8:	2106      	movs	r1, #6
     8fa:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     8fe:	e00c      	b.n	91a <CONFIG_ISR_STACK_SIZE+0x11a>
		if (*++sp == 'h') {
     900:	785a      	ldrb	r2, [r3, #1]
     902:	2a68      	cmp	r2, #104	; 0x68
     904:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     908:	d106      	bne.n	918 <CONFIG_ISR_STACK_SIZE+0x118>
			conv->length_mod = LENGTH_HH;
     90a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     90c:	f361 02c6 	bfi	r2, r1, #3, #4
     910:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
     914:	3302      	adds	r3, #2
     916:	e7c5      	b.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
			conv->length_mod = LENGTH_H;
     918:	2102      	movs	r1, #2
     91a:	f361 02c6 	bfi	r2, r1, #3, #4
     91e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
     922:	3301      	adds	r3, #1
     924:	e7be      	b.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
		if (*++sp == 'l') {
     926:	785a      	ldrb	r2, [r3, #1]
     928:	2a6c      	cmp	r2, #108	; 0x6c
     92a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     92e:	d101      	bne.n	934 <CONFIG_ISR_STACK_SIZE+0x134>
			conv->length_mod = LENGTH_LL;
     930:	2104      	movs	r1, #4
     932:	e7eb      	b.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
			conv->length_mod = LENGTH_L;
     934:	2103      	movs	r1, #3
     936:	e7f0      	b.n	91a <CONFIG_ISR_STACK_SIZE+0x11a>
		conv->length_mod = LENGTH_J;
     938:	2105      	movs	r1, #5
     93a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     93e:	e7ec      	b.n	91a <CONFIG_ISR_STACK_SIZE+0x11a>
		conv->length_mod = LENGTH_T;
     940:	2107      	movs	r1, #7
     942:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
     946:	e7e8      	b.n	91a <CONFIG_ISR_STACK_SIZE+0x11a>
		conv->unsupported = true;
     948:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
     94c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     950:	f022 0202 	bic.w	r2, r2, #2
     954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     958:	f042 0202 	orr.w	r2, r2, #2
     95c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
     960:	e7df      	b.n	922 <CONFIG_ISR_STACK_SIZE+0x122>
	switch (conv->specifier) {
     962:	3b6e      	subs	r3, #110	; 0x6e
     964:	b2d9      	uxtb	r1, r3
     966:	2301      	movs	r3, #1
     968:	408b      	lsls	r3, r1
     96a:	f240 4182 	movw	r1, #1154	; 0x482
     96e:	420b      	tst	r3, r1
     970:	d137      	bne.n	9e2 <CONFIG_ISR_STACK_SIZE+0x1e2>
     972:	f013 0f24 	tst.w	r3, #36	; 0x24
     976:	d151      	bne.n	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
     978:	07d8      	lsls	r0, r3, #31
     97a:	d55c      	bpl.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
		conv->specifier_cat = SPECIFIER_PTR;
     97c:	2103      	movs	r1, #3
     97e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     982:	f361 0302 	bfi	r3, r1, #0, #3
     986:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     98a:	f002 0378 	and.w	r3, r2, #120	; 0x78
     98e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
     992:	424b      	negs	r3, r1
     994:	414b      	adcs	r3, r1
     996:	e01a      	b.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
     998:	2001      	movs	r0, #1
	switch (conv->specifier) {
     99a:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
     99e:	b2c9      	uxtb	r1, r1
     9a0:	fa00 f101 	lsl.w	r1, r0, r1
     9a4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
     9a8:	d194      	bne.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     9aa:	f640 0601 	movw	r6, #2049	; 0x801
     9ae:	4231      	tst	r1, r6
     9b0:	d11d      	bne.n	9ee <CONFIG_ISR_STACK_SIZE+0x1ee>
     9b2:	f411 3f04 	tst.w	r1, #135168	; 0x21000
     9b6:	d03e      	beq.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
		conv->specifier_cat = SPECIFIER_SINT;
     9b8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     9bc:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9c0:	f002 0278 	and.w	r2, r2, #120	; 0x78
     9c4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
     9c6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     9ca:	d034      	beq.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
	bool unsupported = false;
     9cc:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
     9ce:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
     9d2:	f3c2 0140 	ubfx	r1, r2, #1, #1
     9d6:	430b      	orrs	r3, r1
     9d8:	f363 0241 	bfi	r2, r3, #1, #1
     9dc:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
     9e0:	e6fd      	b.n	7de <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
     9e2:	2102      	movs	r1, #2
     9e4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     9e8:	f361 0302 	bfi	r3, r1, #0, #3
     9ec:	e7e8      	b.n	9c0 <CONFIG_ISR_STACK_SIZE+0x1c0>
     9ee:	2002      	movs	r0, #2
     9f0:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
     9f4:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     9f8:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9fc:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     9fe:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
     a02:	bf02      	ittt	eq
     a04:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
     a08:	f041 0101 	orreq.w	r1, r1, #1
     a0c:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
     a10:	2b63      	cmp	r3, #99	; 0x63
     a12:	d1db      	bne.n	9cc <CONFIG_ISR_STACK_SIZE+0x1cc>
			unsupported = (conv->length_mod != LENGTH_NONE);
     a14:	1e13      	subs	r3, r2, #0
     a16:	bf18      	it	ne
     a18:	2301      	movne	r3, #1
     a1a:	e7d8      	b.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
		conv->specifier_cat = SPECIFIER_PTR;
     a1c:	2103      	movs	r1, #3
     a1e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     a22:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     a26:	f361 0302 	bfi	r3, r1, #0, #3
     a2a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
     a2e:	bf14      	ite	ne
     a30:	2301      	movne	r3, #1
     a32:	2300      	moveq	r3, #0
     a34:	e7cb      	b.n	9ce <CONFIG_ISR_STACK_SIZE+0x1ce>
		conv->invalid = true;
     a36:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     a3a:	f043 0301 	orr.w	r3, r3, #1
     a3e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
     a42:	e7c3      	b.n	9cc <CONFIG_ISR_STACK_SIZE+0x1cc>
		} else if (conv->width_present) {
     a44:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
     a48:	2a00      	cmp	r2, #0
		int width = -1;
     a4a:	bfac      	ite	ge
     a4c:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
			width = conv->width_value;
     a50:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
     a54:	e6d5      	b.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
		} else if (conv->prec_present) {
     a56:	0798      	lsls	r0, r3, #30
     a58:	f57f aee2 	bpl.w	820 <CONFIG_ISR_STACK_SIZE+0x20>
			precision = conv->prec_value;
     a5c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
		conv->pad0_value = 0;
     a60:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a62:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
     a66:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
			= (enum length_mod_enum)conv->length_mod;
     a6a:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		enum specifier_cat_enum specifier_cat
     a6e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     a72:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     a74:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     a78:	d133      	bne.n	ae2 <CONFIG_ISR_STACK_SIZE+0x2e2>
			switch (length_mod) {
     a7a:	1ecb      	subs	r3, r1, #3
     a7c:	2b04      	cmp	r3, #4
     a7e:	d804      	bhi.n	a8a <CONFIG_ISR_STACK_SIZE+0x28a>
     a80:	e8df f003 	tbb	[pc, r3]
     a84:	21464621 	.word	0x21464621
     a88:	21          	.byte	0x21
     a89:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     a8a:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
     a8c:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
     a8e:	ea4f 72e3 	mov.w	r2, r3, asr #31
     a92:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     a96:	d11c      	bne.n	ad2 <CONFIG_ISR_STACK_SIZE+0x2d2>
				value->sint = (signed char)value->sint;
     a98:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
     a9c:	17da      	asrs	r2, r3, #31
     a9e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
     aa2:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
     aa4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
     aa8:	f013 0603 	ands.w	r6, r3, #3
     aac:	d050      	beq.n	b50 <CONFIG_ISR_STACK_SIZE+0x350>
			OUTS(sp, fp);
     aae:	463a      	mov	r2, r7
     ab0:	4659      	mov	r1, fp
     ab2:	4648      	mov	r0, r9
     ab4:	9b03      	ldr	r3, [sp, #12]
     ab6:	f003 ff13 	bl	48e0 <outs>
     aba:	2800      	cmp	r0, #0
     abc:	f2c0 8152 	blt.w	d64 <CONFIG_ISR_STACK_SIZE+0x564>
     ac0:	4405      	add	r5, r0
			continue;
     ac2:	9f03      	ldr	r7, [sp, #12]
     ac4:	e5f2      	b.n	6ac <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ac6:	f854 3b04 	ldr.w	r3, [r4], #4
     aca:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
     acc:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
     ad0:	e7e8      	b.n	aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>
			} else if (length_mod == LENGTH_H) {
     ad2:	2902      	cmp	r1, #2
     ad4:	d1e5      	bne.n	aa2 <CONFIG_ISR_STACK_SIZE+0x2a2>
				value->sint = (short)value->sint;
     ad6:	b21a      	sxth	r2, r3
     ad8:	f343 33c0 	sbfx	r3, r3, #15, #1
     adc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     ae0:	e7df      	b.n	aa2 <CONFIG_ISR_STACK_SIZE+0x2a2>
		} else if (specifier_cat == SPECIFIER_UINT) {
     ae2:	2b02      	cmp	r3, #2
     ae4:	d124      	bne.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
			switch (length_mod) {
     ae6:	1ecb      	subs	r3, r1, #3
     ae8:	2b04      	cmp	r3, #4
     aea:	d804      	bhi.n	af6 <CONFIG_ISR_STACK_SIZE+0x2f6>
     aec:	e8df f003 	tbb	[pc, r3]
     af0:	18101018 	.word	0x18101018
     af4:	18          	.byte	0x18
     af5:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
     af6:	2901      	cmp	r1, #1
     af8:	f04f 0200 	mov.w	r2, #0
				value->uint = va_arg(ap, unsigned int);
     afc:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     b00:	d014      	beq.n	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
			} else if (length_mod == LENGTH_H) {
     b02:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
     b04:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
     b08:	d1cc      	bne.n	aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>
				value->uint = (unsigned short)value->uint;
     b0a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
     b0c:	930e      	str	r3, [sp, #56]	; 0x38
     b0e:	e7c9      	b.n	aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>
					(uint_value_type)va_arg(ap,
     b10:	3407      	adds	r4, #7
     b12:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
     b16:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     b1a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
     b1e:	e7c1      	b.n	aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>
					(uint_value_type)va_arg(ap, size_t);
     b20:	f854 3b04 	ldr.w	r3, [r4], #4
     b24:	930e      	str	r3, [sp, #56]	; 0x38
     b26:	2300      	movs	r3, #0
     b28:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
     b2a:	e7bb      	b.n	aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>
				value->uint = (unsigned char)value->uint;
     b2c:	b2db      	uxtb	r3, r3
     b2e:	e7cd      	b.n	acc <CONFIG_ISR_STACK_SIZE+0x2cc>
		} else if (specifier_cat == SPECIFIER_FP) {
     b30:	2b04      	cmp	r3, #4
     b32:	d108      	bne.n	b46 <CONFIG_ISR_STACK_SIZE+0x346>
					(sint_value_type)va_arg(ap, long long);
     b34:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
     b36:	f024 0407 	bic.w	r4, r4, #7
     b3a:	e9d4 2300 	ldrd	r2, r3, [r4]
     b3e:	3408      	adds	r4, #8
     b40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     b44:	e7ae      	b.n	aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>
		} else if (specifier_cat == SPECIFIER_PTR) {
     b46:	2b03      	cmp	r3, #3
     b48:	d1ac      	bne.n	aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>
			value->ptr = va_arg(ap, void *);
     b4a:	f854 3b04 	ldr.w	r3, [r4], #4
     b4e:	e7dd      	b.n	b0c <CONFIG_ISR_STACK_SIZE+0x30c>
		switch (conv->specifier) {
     b50:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     b54:	2878      	cmp	r0, #120	; 0x78
     b56:	d8b4      	bhi.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
     b58:	2862      	cmp	r0, #98	; 0x62
     b5a:	d81c      	bhi.n	b96 <CONFIG_ISR_STACK_SIZE+0x396>
     b5c:	2825      	cmp	r0, #37	; 0x25
     b5e:	f43f adad 	beq.w	6bc <z_cbvprintf_impl+0x20>
     b62:	2858      	cmp	r0, #88	; 0x58
     b64:	d1ad      	bne.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
			bps = encode_uint(value->uint, conv, buf, bpe);
     b66:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
     b6a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     b6e:	9300      	str	r3, [sp, #0]
     b70:	aa10      	add	r2, sp, #64	; 0x40
     b72:	ab08      	add	r3, sp, #32
     b74:	f003 fe6e 	bl	4854 <encode_uint>
			if (precision >= 0) {
     b78:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
     b7c:	4607      	mov	r7, r0
			if (precision >= 0) {
     b7e:	f280 8099 	bge.w	cb4 <CONFIG_ISR_STACK_SIZE+0x4b4>
		if (bps == NULL) {
     b82:	2f00      	cmp	r7, #0
     b84:	d09d      	beq.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
		size_t nj_len = (bpe - bps);
     b86:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     b8a:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
     b8c:	2e00      	cmp	r6, #0
     b8e:	f000 80c0 	beq.w	d12 <CONFIG_ISR_STACK_SIZE+0x512>
			nj_len += 1U;
     b92:	3001      	adds	r0, #1
     b94:	e0bd      	b.n	d12 <CONFIG_ISR_STACK_SIZE+0x512>
		switch (conv->specifier) {
     b96:	3863      	subs	r0, #99	; 0x63
     b98:	2815      	cmp	r0, #21
     b9a:	d892      	bhi.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
     b9c:	a201      	add	r2, pc, #4	; (adr r2, ba4 <CONFIG_ISR_STACK_SIZE+0x3a4>)
     b9e:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     ba2:	bf00      	nop
     ba4:	00000c79 	.word	0x00000c79
     ba8:	00000c8b 	.word	0x00000c8b
     bac:	00000ac3 	.word	0x00000ac3
     bb0:	00000ac3 	.word	0x00000ac3
     bb4:	00000ac3 	.word	0x00000ac3
     bb8:	00000ac3 	.word	0x00000ac3
     bbc:	00000c8b 	.word	0x00000c8b
     bc0:	00000ac3 	.word	0x00000ac3
     bc4:	00000ac3 	.word	0x00000ac3
     bc8:	00000ac3 	.word	0x00000ac3
     bcc:	00000ac3 	.word	0x00000ac3
     bd0:	00000d17 	.word	0x00000d17
     bd4:	00000caf 	.word	0x00000caf
     bd8:	00000cd5 	.word	0x00000cd5
     bdc:	00000ac3 	.word	0x00000ac3
     be0:	00000ac3 	.word	0x00000ac3
     be4:	00000bfd 	.word	0x00000bfd
     be8:	00000ac3 	.word	0x00000ac3
     bec:	00000caf 	.word	0x00000caf
     bf0:	00000ac3 	.word	0x00000ac3
     bf4:	00000ac3 	.word	0x00000ac3
     bf8:	00000caf 	.word	0x00000caf
			if (precision >= 0) {
     bfc:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
     c00:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
     c02:	db35      	blt.n	c70 <CONFIG_ISR_STACK_SIZE+0x470>
				len = strnlen(bps, precision);
     c04:	4651      	mov	r1, sl
     c06:	4638      	mov	r0, r7
     c08:	f003 fece 	bl	49a8 <strnlen>
			bpe = bps + len;
     c0c:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
     c10:	2f00      	cmp	r7, #0
     c12:	f43f af56 	beq.w	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
		char sign = 0;
     c16:	2600      	movs	r6, #0
		if (conv->altform_0c) {
     c18:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     c1c:	f013 0210 	ands.w	r2, r3, #16
     c20:	9205      	str	r2, [sp, #20]
     c22:	f000 8092 	beq.w	d4a <CONFIG_ISR_STACK_SIZE+0x54a>
			nj_len += 2U;
     c26:	3002      	adds	r0, #2
		if (conv->pad_fp) {
     c28:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
     c2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
     c2c:	bf48      	it	mi
     c2e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
     c30:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
     c32:	bf48      	it	mi
     c34:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
     c36:	f1b8 0f00 	cmp.w	r8, #0
		nj_len += conv->pad0_value;
     c3a:	9204      	str	r2, [sp, #16]
		if (width > 0) {
     c3c:	f340 809f 	ble.w	d7e <CONFIG_ISR_STACK_SIZE+0x57e>
			if (!conv->flag_dash) {
     c40:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
     c44:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
     c48:	f3c2 0380 	ubfx	r3, r2, #2, #1
     c4c:	0750      	lsls	r0, r2, #29
     c4e:	9306      	str	r3, [sp, #24]
     c50:	f100 8095 	bmi.w	d7e <CONFIG_ISR_STACK_SIZE+0x57e>
				if (conv->flag_zero) {
     c54:	0651      	lsls	r1, r2, #25
     c56:	f140 8088 	bpl.w	d6a <CONFIG_ISR_STACK_SIZE+0x56a>
					if (sign != 0) {
     c5a:	b13e      	cbz	r6, c6c <CONFIG_ISR_STACK_SIZE+0x46c>
						OUTC(sign);
     c5c:	4659      	mov	r1, fp
     c5e:	4630      	mov	r0, r6
     c60:	47c8      	blx	r9
     c62:	2800      	cmp	r0, #0
     c64:	db7e      	blt.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
     c66:	9b06      	ldr	r3, [sp, #24]
     c68:	3501      	adds	r5, #1
     c6a:	461e      	mov	r6, r3
					pad = '0';
     c6c:	2230      	movs	r2, #48	; 0x30
     c6e:	e07d      	b.n	d6c <CONFIG_ISR_STACK_SIZE+0x56c>
				len = strlen(bps);
     c70:	4638      	mov	r0, r7
     c72:	f003 fe92 	bl	499a <strlen>
     c76:	e7c9      	b.n	c0c <CONFIG_ISR_STACK_SIZE+0x40c>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
		char sign = 0;
     c7a:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
     c7c:	2001      	movs	r0, #1
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c7e:	f88d 3020 	strb.w	r3, [sp, #32]
			bps = buf;
     c82:	af08      	add	r7, sp, #32
			bpe = buf + 1;
     c84:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
     c88:	e7c6      	b.n	c18 <CONFIG_ISR_STACK_SIZE+0x418>
			if (conv->flag_plus) {
     c8a:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
     c8c:	bf5a      	itte	pl
     c8e:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
     c92:	015e      	lslpl	r6, r3, #5
				sign = '+';
     c94:	262b      	movmi	r6, #43	; 0x2b
			sint = value->sint;
     c96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
			if (sint < 0) {
     c9a:	2b00      	cmp	r3, #0
     c9c:	f6bf af63 	bge.w	b66 <CONFIG_ISR_STACK_SIZE+0x366>
				value->uint = (uint_value_type)-sint;
     ca0:	4252      	negs	r2, r2
     ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     ca6:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     ca8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
     cac:	e75b      	b.n	b66 <CONFIG_ISR_STACK_SIZE+0x366>
		switch (conv->specifier) {
     cae:	2600      	movs	r6, #0
     cb0:	e759      	b.n	b66 <CONFIG_ISR_STACK_SIZE+0x366>
		char sign = 0;
     cb2:	2600      	movs	r6, #0
				conv->flag_zero = false;
     cb4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
     cb8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     cbc:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
     cbe:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     cc2:	459a      	cmp	sl, r3
				conv->flag_zero = false;
     cc4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
     cc8:	f67f af5b 	bls.w	b82 <CONFIG_ISR_STACK_SIZE+0x382>
					conv->pad0_value = precision - (int)len;
     ccc:	ebaa 0303 	sub.w	r3, sl, r3
     cd0:	9311      	str	r3, [sp, #68]	; 0x44
     cd2:	e756      	b.n	b82 <CONFIG_ISR_STACK_SIZE+0x382>
			if (value->ptr != NULL) {
     cd4:	980e      	ldr	r0, [sp, #56]	; 0x38
     cd6:	b390      	cbz	r0, d3e <CONFIG_ISR_STACK_SIZE+0x53e>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     cd8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     cdc:	9300      	str	r3, [sp, #0]
     cde:	2100      	movs	r1, #0
     ce0:	ab08      	add	r3, sp, #32
     ce2:	aa10      	add	r2, sp, #64	; 0x40
     ce4:	f003 fdb6 	bl	4854 <encode_uint>
				conv->altform_0c = true;
     ce8:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     cec:	f1ba 0f00 	cmp.w	sl, #0
				conv->altform_0c = true;
     cf0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     cf4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     cf8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     cfc:	4607      	mov	r7, r0
				conv->altform_0c = true;
     cfe:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
     d02:	dad6      	bge.n	cb2 <CONFIG_ISR_STACK_SIZE+0x4b2>
		if (bps == NULL) {
     d04:	2800      	cmp	r0, #0
     d06:	f43f aedc 	beq.w	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
		char sign = 0;
     d0a:	2600      	movs	r6, #0
		size_t nj_len = (bpe - bps);
     d0c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     d10:	1a18      	subs	r0, r3, r0
		if (sign != 0) {
     d12:	469a      	mov	sl, r3
     d14:	e780      	b.n	c18 <CONFIG_ISR_STACK_SIZE+0x418>
				store_count(conv, value->ptr, count);
     d16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
     d18:	2907      	cmp	r1, #7
     d1a:	f63f aed2 	bhi.w	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
     d1e:	e8df f001 	tbb	[pc, r1]
     d22:	040c      	.short	0x040c
     d24:	08080c06 	.word	0x08080c06
     d28:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     d2a:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
     d2c:	e6c9      	b.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
		*(short *)dp = (short)count;
     d2e:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
     d30:	e6c7      	b.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
		*(intmax_t *)dp = (intmax_t)count;
     d32:	17ea      	asrs	r2, r5, #31
     d34:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
     d38:	e6c3      	b.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d3a:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
     d3c:	e6c1      	b.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
     d3e:	4f2f      	ldr	r7, [pc, #188]	; (dfc <CONFIG_ISR_STACK_SIZE+0x5fc>)
		char sign = 0;
     d40:	4606      	mov	r6, r0
			bpe = bps + 5;
     d42:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
     d46:	2005      	movs	r0, #5
     d48:	e766      	b.n	c18 <CONFIG_ISR_STACK_SIZE+0x418>
		} else if (conv->altform_0) {
     d4a:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
     d4c:	bf48      	it	mi
     d4e:	3001      	addmi	r0, #1
     d50:	e76a      	b.n	c28 <CONFIG_ISR_STACK_SIZE+0x428>
					OUTC(pad);
     d52:	4610      	mov	r0, r2
     d54:	9307      	str	r3, [sp, #28]
     d56:	9206      	str	r2, [sp, #24]
     d58:	4659      	mov	r1, fp
     d5a:	47c8      	blx	r9
     d5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
     d60:	2800      	cmp	r0, #0
     d62:	da04      	bge.n	d6e <CONFIG_ISR_STACK_SIZE+0x56e>
#undef OUTS
#undef OUTC
}
     d64:	b015      	add	sp, #84	; 0x54
     d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     d6a:	2220      	movs	r2, #32
					pad = '0';
     d6c:	4643      	mov	r3, r8
				while (width-- > 0) {
     d6e:	4619      	mov	r1, r3
     d70:	2900      	cmp	r1, #0
     d72:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
     d76:	dcec      	bgt.n	d52 <CONFIG_ISR_STACK_SIZE+0x552>
     d78:	4445      	add	r5, r8
     d7a:	4698      	mov	r8, r3
     d7c:	1a6d      	subs	r5, r5, r1
		if (sign != 0) {
     d7e:	b12e      	cbz	r6, d8c <CONFIG_ISR_STACK_SIZE+0x58c>
			OUTC(sign);
     d80:	4659      	mov	r1, fp
     d82:	4630      	mov	r0, r6
     d84:	47c8      	blx	r9
     d86:	2800      	cmp	r0, #0
     d88:	dbec      	blt.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
     d8a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     d8c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
     d90:	06da      	lsls	r2, r3, #27
     d92:	d401      	bmi.n	d98 <CONFIG_ISR_STACK_SIZE+0x598>
     d94:	071b      	lsls	r3, r3, #28
     d96:	d505      	bpl.n	da4 <CONFIG_ISR_STACK_SIZE+0x5a4>
				OUTC('0');
     d98:	4659      	mov	r1, fp
     d9a:	2030      	movs	r0, #48	; 0x30
     d9c:	47c8      	blx	r9
     d9e:	2800      	cmp	r0, #0
     da0:	dbe0      	blt.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
     da2:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     da4:	9b05      	ldr	r3, [sp, #20]
     da6:	b133      	cbz	r3, db6 <CONFIG_ISR_STACK_SIZE+0x5b6>
				OUTC(conv->specifier);
     da8:	4659      	mov	r1, fp
     daa:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
     dae:	47c8      	blx	r9
     db0:	2800      	cmp	r0, #0
     db2:	dbd7      	blt.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
     db4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     db6:	9e04      	ldr	r6, [sp, #16]
     db8:	442e      	add	r6, r5
     dba:	e005      	b.n	dc8 <CONFIG_ISR_STACK_SIZE+0x5c8>
				OUTC('0');
     dbc:	4659      	mov	r1, fp
     dbe:	2030      	movs	r0, #48	; 0x30
     dc0:	47c8      	blx	r9
     dc2:	2800      	cmp	r0, #0
     dc4:	dbce      	blt.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
     dc6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     dc8:	1b73      	subs	r3, r6, r5
     dca:	2b00      	cmp	r3, #0
     dcc:	dcf6      	bgt.n	dbc <CONFIG_ISR_STACK_SIZE+0x5bc>
			OUTS(bps, bpe);
     dce:	4653      	mov	r3, sl
     dd0:	463a      	mov	r2, r7
     dd2:	4659      	mov	r1, fp
     dd4:	4648      	mov	r0, r9
     dd6:	f003 fd83 	bl	48e0 <outs>
     dda:	2800      	cmp	r0, #0
     ddc:	dbc2      	blt.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
     dde:	4405      	add	r5, r0
		while (width > 0) {
     de0:	44a8      	add	r8, r5
     de2:	eba8 0305 	sub.w	r3, r8, r5
     de6:	2b00      	cmp	r3, #0
     de8:	f77f ae6b 	ble.w	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
			OUTC(' ');
     dec:	4659      	mov	r1, fp
     dee:	2020      	movs	r0, #32
     df0:	47c8      	blx	r9
     df2:	2800      	cmp	r0, #0
     df4:	dbb6      	blt.n	d64 <CONFIG_ISR_STACK_SIZE+0x564>
     df6:	3501      	adds	r5, #1
			--width;
     df8:	e7f3      	b.n	de2 <CONFIG_ISR_STACK_SIZE+0x5e2>
     dfa:	bf00      	nop
     dfc:	00005801 	.word	0x00005801

00000e00 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     e00:	b508      	push	{r3, lr}
	__asm__ volatile(
     e02:	f04f 0220 	mov.w	r2, #32
     e06:	f3ef 8311 	mrs	r3, BASEPRI
     e0a:	f382 8812 	msr	BASEPRI_MAX, r2
     e0e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     e12:	f000 fce9 	bl	17e8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     e16:	4803      	ldr	r0, [pc, #12]	; (e24 <sys_reboot+0x24>)
     e18:	f003 fc2c 	bl	4674 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     e1c:	f000 fa8e 	bl	133c <arch_cpu_idle>
     e20:	e7fc      	b.n	e1c <sys_reboot+0x1c>
     e22:	bf00      	nop
     e24:	00005807 	.word	0x00005807

00000e28 <nrf_gpio_pin_control_select.constprop.0>:

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     e28:	4b05      	ldr	r3, [pc, #20]	; (e40 <nrf_gpio_pin_control_select.constprop.0+0x18>)
     e2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e2e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     e32:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     e36:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     e3a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
     e3e:	4770      	bx	lr
     e40:	50842500 	.word	0x50842500

00000e44 <nordicsemi_nrf53_init>:

}
#endif /* CONFIG_PM_S2RAM */

static int nordicsemi_nrf53_init(const struct device *arg)
{
     e44:	b510      	push	{r4, lr}
     e46:	f04f 0320 	mov.w	r3, #32
     e4a:	f3ef 8411 	mrs	r4, BASEPRI
     e4e:	f383 8812 	msr	BASEPRI_MAX, r3
     e52:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     e56:	2201      	movs	r2, #1
     e58:	4b0c      	ldr	r3, [pc, #48]	; (e8c <nordicsemi_nrf53_init+0x48>)
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     e5a:	490d      	ldr	r1, [pc, #52]	; (e90 <nordicsemi_nrf53_init+0x4c>)
     e5c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     e60:	2302      	movs	r3, #2
#if !defined(CONFIG_BUILD_WITH_TFM)
	/* This can only be done from secure code.
	 * This is handled by the TF-M platform so we skip it when TF-M is
	 * enabled.
	 */
	nrf_gpio_pin_control_select(PIN_XL1, NRF_GPIO_PIN_SEL_PERIPHERAL);
     e62:	2000      	movs	r0, #0
     e64:	f8c1 36d0 	str.w	r3, [r1, #1744]	; 0x6d0
     e68:	f7ff ffde 	bl	e28 <nrf_gpio_pin_control_select.constprop.0>
	nrf_gpio_pin_control_select(PIN_XL2, NRF_GPIO_PIN_SEL_PERIPHERAL);
     e6c:	4610      	mov	r0, r2
     e6e:	f7ff ffdb 	bl	e28 <nrf_gpio_pin_control_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     e72:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     e76:	f8c1 2904 	str.w	r2, [r1, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     e7a:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
	__asm__ volatile(
     e7e:	f384 8811 	msr	BASEPRI, r4
     e82:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     e86:	2000      	movs	r0, #0
     e88:	bd10      	pop	{r4, pc}
     e8a:	bf00      	nop
     e8c:	50001000 	.word	0x50001000
     e90:	50004000 	.word	0x50004000

00000e94 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     e94:	b148      	cbz	r0, eaa <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     e96:	4b05      	ldr	r3, [pc, #20]	; (eac <arch_busy_wait+0x18>)
     e98:	4a05      	ldr	r2, [pc, #20]	; (eb0 <arch_busy_wait+0x1c>)
     e9a:	681b      	ldr	r3, [r3, #0]
     e9c:	fbb3 f3f2 	udiv	r3, r3, r2
    delay_cycles(cycles);
     ea0:	4358      	muls	r0, r3
     ea2:	4b04      	ldr	r3, [pc, #16]	; (eb4 <arch_busy_wait+0x20>)
     ea4:	f043 0301 	orr.w	r3, r3, #1
     ea8:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     eaa:	4770      	bx	lr
     eac:	20000048 	.word	0x20000048
     eb0:	000f4240 	.word	0x000f4240
     eb4:	00005600 	.word	0x00005600

00000eb8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     eb8:	2806      	cmp	r0, #6
     eba:	d107      	bne.n	ecc <pm_state_set+0x14>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
     ebc:	2201      	movs	r2, #1
     ebe:	4b04      	ldr	r3, [pc, #16]	; (ed0 <pm_state_set+0x18>)
     ec0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     ec4:	f3bf 8f4f 	dsb	sy
        __WFE();
     ec8:	bf20      	wfe
    while (true)
     eca:	e7fd      	b.n	ec8 <pm_state_set+0x10>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
     ecc:	4770      	bx	lr
     ece:	bf00      	nop
     ed0:	50004000 	.word	0x50004000

00000ed4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     ed4:	f001 bdfa 	b.w	2acc <SystemInit>

00000ed8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     edc:	4605      	mov	r5, r0
	__asm__ volatile(
     ede:	f04f 0320 	mov.w	r3, #32
     ee2:	f3ef 8611 	mrs	r6, BASEPRI
     ee6:	f383 8812 	msr	BASEPRI_MAX, r3
     eea:	f3bf 8f6f 	isb	sy
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
     eee:	f04f 090c 	mov.w	r9, #12
	return list->head;
     ef2:	4b0d      	ldr	r3, [pc, #52]	; (f28 <pm_state_notify+0x50>)
     ef4:	4f0d      	ldr	r7, [pc, #52]	; (f2c <pm_state_notify+0x54>)
     ef6:	681c      	ldr	r4, [r3, #0]
     ef8:	f8df 8034 	ldr.w	r8, [pc, #52]	; f30 <pm_state_notify+0x58>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     efc:	b92c      	cbnz	r4, f0a <pm_state_notify+0x32>
	__asm__ volatile(
     efe:	f386 8811 	msr	BASEPRI, r6
     f02:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     f06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
     f0a:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
     f0e:	2d00      	cmp	r5, #0
     f10:	bf18      	it	ne
     f12:	4613      	movne	r3, r2
		if (callback) {
     f14:	b12b      	cbz	r3, f22 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     f16:	f898 2014 	ldrb.w	r2, [r8, #20]
     f1a:	fb09 f202 	mul.w	r2, r9, r2
     f1e:	5cb8      	ldrb	r0, [r7, r2]
     f20:	4798      	blx	r3
	return node->next;
     f22:	6824      	ldr	r4, [r4, #0]
     f24:	e7ea      	b.n	efc <pm_state_notify+0x24>
     f26:	bf00      	nop
     f28:	200002d0 	.word	0x200002d0
     f2c:	200002c4 	.word	0x200002c4
     f30:	200008f0 	.word	0x200008f0

00000f34 <pm_system_resume>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     f34:	2201      	movs	r2, #1

void pm_system_resume(void)
{
     f36:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     f38:	4b16      	ldr	r3, [pc, #88]	; (f94 <pm_system_resume+0x60>)
     f3a:	7d1c      	ldrb	r4, [r3, #20]
     f3c:	f004 031f 	and.w	r3, r4, #31
     f40:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     f42:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     f44:	4b14      	ldr	r3, [pc, #80]	; (f98 <pm_system_resume+0x64>)
     f46:	0961      	lsrs	r1, r4, #5
     f48:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     f4c:	e8d3 1fef 	ldaex	r1, [r3]
     f50:	ea01 0500 	and.w	r5, r1, r0
     f54:	e8c3 5fe6 	stlex	r6, r5, [r3]
     f58:	2e00      	cmp	r6, #0
     f5a:	d1f7      	bne.n	f4c <pm_system_resume+0x18>
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     f5c:	420a      	tst	r2, r1
     f5e:	d013      	beq.n	f88 <pm_system_resume+0x54>
	if (pm_state_exit_post_ops != NULL) {
     f60:	4b0e      	ldr	r3, [pc, #56]	; (f9c <pm_system_resume+0x68>)
     f62:	4d0f      	ldr	r5, [pc, #60]	; (fa0 <pm_system_resume+0x6c>)
     f64:	b18b      	cbz	r3, f8a <pm_system_resume+0x56>
		pm_state_exit_post_ops(info->state, info->substate_id);
     f66:	230c      	movs	r3, #12
     f68:	4363      	muls	r3, r4
     f6a:	18ea      	adds	r2, r5, r3
     f6c:	7851      	ldrb	r1, [r2, #1]
     f6e:	5ce8      	ldrb	r0, [r5, r3]
     f70:	f003 fcce 	bl	4910 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
     f74:	2000      	movs	r0, #0
     f76:	f7ff ffaf 	bl	ed8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     f7a:	230c      	movs	r3, #12
     f7c:	435c      	muls	r4, r3
     f7e:	2300      	movs	r3, #0
     f80:	192a      	adds	r2, r5, r4
     f82:	512b      	str	r3, [r5, r4]
     f84:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
     f88:	bd70      	pop	{r4, r5, r6, pc}
     f8a:	f383 8811 	msr	BASEPRI, r3
     f8e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     f92:	e7ef      	b.n	f74 <pm_system_resume+0x40>
     f94:	200008f0 	.word	0x200008f0
     f98:	200002d8 	.word	0x200002d8
     f9c:	00004911 	.word	0x00004911
     fa0:	200002c4 	.word	0x200002c4

00000fa4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
     fa8:	4b32      	ldr	r3, [pc, #200]	; (1074 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x74>)
{
     faa:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
     fac:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
     fae:	f04f 0320 	mov.w	r3, #32
     fb2:	f3ef 8811 	mrs	r8, BASEPRI
     fb6:	f383 8812 	msr	BASEPRI_MAX, r3
     fba:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     fbe:	240c      	movs	r4, #12
     fc0:	436c      	muls	r4, r5
     fc2:	4b2d      	ldr	r3, [pc, #180]	; (1078 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x78>)
     fc4:	4e2d      	ldr	r6, [pc, #180]	; (107c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x7c>)
     fc6:	5d19      	ldrb	r1, [r3, r4]
     fc8:	191a      	adds	r2, r3, r4
     fca:	2900      	cmp	r1, #0
     fcc:	d047      	beq.n	105e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5e>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     fce:	ca07      	ldmia	r2, {r0, r1, r2}
     fd0:	eb06 0c04 	add.w	ip, r6, r4
     fd4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     fd8:	2200      	movs	r2, #0
     fda:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
     fdc:	f388 8811 	msr	BASEPRI, r8
     fe0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     fe4:	230c      	movs	r3, #12
     fe6:	436b      	muls	r3, r5
     fe8:	5cf0      	ldrb	r0, [r6, r3]
     fea:	18f2      	adds	r2, r6, r3
     fec:	b3a8      	cbz	r0, 105a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5a>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
     fee:	1c7b      	adds	r3, r7, #1
     ff0:	d010      	beq.n	1014 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x14>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     ff2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     ff6:	2100      	movs	r1, #0
     ff8:	f8d2 c008 	ldr.w	ip, [r2, #8]
     ffc:	4c20      	ldr	r4, [pc, #128]	; (1080 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x80>)
     ffe:	2300      	movs	r3, #0
    1000:	fbec 4100 	umlal	r4, r1, ip, r0
    1004:	4a1f      	ldr	r2, [pc, #124]	; (1084 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x84>)
    1006:	4620      	mov	r0, r4
    1008:	f7ff f8a4 	bl	154 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    100c:	2101      	movs	r1, #1
    100e:	1a38      	subs	r0, r7, r0
    1010:	f004 f94f 	bl	52b2 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    1014:	f002 fef8 	bl	3e08 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    1018:	2001      	movs	r0, #1
    101a:	f7ff ff5d 	bl	ed8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    101e:	4b1a      	ldr	r3, [pc, #104]	; (1088 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x88>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1020:	096a      	lsrs	r2, r5, #5
    1022:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    1026:	2201      	movs	r2, #1
    1028:	f005 011f 	and.w	r1, r5, #31
    102c:	408a      	lsls	r2, r1
    102e:	e8d3 0fef 	ldaex	r0, [r3]
    1032:	4310      	orrs	r0, r2
    1034:	e8c3 0fe1 	stlex	r1, r0, [r3]
    1038:	2900      	cmp	r1, #0
    103a:	d1f8      	bne.n	102e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x2e>
	if (pm_state_set != NULL) {
    103c:	4b13      	ldr	r3, [pc, #76]	; (108c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8c>)
    103e:	b13b      	cbz	r3, 1050 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x50>
		pm_state_set(info->state, info->substate_id);
    1040:	230c      	movs	r3, #12
    1042:	fb03 f005 	mul.w	r0, r3, r5
    1046:	1833      	adds	r3, r6, r0
    1048:	7859      	ldrb	r1, [r3, #1]
    104a:	5c30      	ldrb	r0, [r6, r0]
    104c:	f7ff ff34 	bl	eb8 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    1050:	f7ff ff70 	bl	f34 <pm_system_resume>
	k_sched_unlock();
    1054:	f002 feec 	bl	3e30 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    1058:	2001      	movs	r0, #1
}
    105a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    105e:	4601      	mov	r1, r0
    1060:	4628      	mov	r0, r5
    1062:	f000 f815 	bl	1090 <pm_policy_next_state>
		if (info != NULL) {
    1066:	2800      	cmp	r0, #0
    1068:	d0b8      	beq.n	fdc <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    106a:	c807      	ldmia	r0, {r0, r1, r2}
    106c:	4434      	add	r4, r6
    106e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    1072:	e7b3      	b.n	fdc <pm_system_suspend+0x38>
    1074:	200008f0 	.word	0x200008f0
    1078:	200002b8 	.word	0x200002b8
    107c:	200002c4 	.word	0x200002c4
    1080:	000f423f 	.word	0x000f423f
    1084:	000f4240 	.word	0x000f4240
    1088:	200002d8 	.word	0x200002d8
    108c:	00000eb9 	.word	0x00000eb9

00001090 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    1090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1094:	b085      	sub	sp, #20
    1096:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1098:	a903      	add	r1, sp, #12
    109a:	f000 f843 	bl	1124 <pm_state_cpu_get_all>
    109e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    10a2:	4604      	mov	r4, r0
    10a4:	f04f 0b00 	mov.w	fp, #0

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    10a8:	4b1b      	ldr	r3, [pc, #108]	; (1118 <pm_policy_next_state+0x88>)
    10aa:	9d03      	ldr	r5, [sp, #12]
    10ac:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    10b0:	1e43      	subs	r3, r0, #1
    10b2:	b21b      	sxth	r3, r3
    10b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    10b8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 111c <pm_policy_next_state+0x8c>
    10bc:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    10c0:	b924      	cbnz	r4, 10cc <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    10c2:	46a1      	mov	r9, r4
}
    10c4:	4648      	mov	r0, r9
    10c6:	b005      	add	sp, #20
    10c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10cc:	46c4      	mov	ip, r8
    10ce:	4659      	mov	r1, fp
    10d0:	6868      	ldr	r0, [r5, #4]
    10d2:	2300      	movs	r3, #0
    10d4:	fbe0 c107 	umlal	ip, r1, r0, r7
    10d8:	4a11      	ldr	r2, [pc, #68]	; (1120 <pm_policy_next_state+0x90>)
    10da:	4660      	mov	r0, ip
    10dc:	f7ff f83a 	bl	154 <__aeabi_uldivmod>
    10e0:	46c4      	mov	ip, r8
    10e2:	4659      	mov	r1, fp
    10e4:	9001      	str	r0, [sp, #4]
    10e6:	68a8      	ldr	r0, [r5, #8]
    10e8:	2300      	movs	r3, #0
    10ea:	fbe0 c107 	umlal	ip, r1, r0, r7
    10ee:	4a0c      	ldr	r2, [pc, #48]	; (1120 <pm_policy_next_state+0x90>)
    10f0:	4660      	mov	r0, ip
    10f2:	f7ff f82f 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    10f6:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
		const struct pm_state_info *state = &cpu_states[i];
    10fa:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    10fc:	d001      	beq.n	1102 <pm_policy_next_state+0x72>
    10fe:	4582      	cmp	sl, r0
    1100:	d905      	bls.n	110e <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    1102:	1c73      	adds	r3, r6, #1
    1104:	d0de      	beq.n	10c4 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    1106:	9b01      	ldr	r3, [sp, #4]
    1108:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    110a:	42b0      	cmp	r0, r6
    110c:	d9da      	bls.n	10c4 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    110e:	3c01      	subs	r4, #1
    1110:	b2a4      	uxth	r4, r4
    1112:	3d0c      	subs	r5, #12
    1114:	e7d4      	b.n	10c0 <pm_policy_next_state+0x30>
    1116:	bf00      	nop
    1118:	20000004 	.word	0x20000004
    111c:	000f423f 	.word	0x000f423f
    1120:	000f4240 	.word	0x000f4240

00001124 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1124:	b908      	cbnz	r0, 112a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1126:	4b02      	ldr	r3, [pc, #8]	; (1130 <pm_state_cpu_get_all+0xc>)
    1128:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    112a:	2000      	movs	r0, #0
    112c:	4770      	bx	lr
    112e:	bf00      	nop
    1130:	00005608 	.word	0x00005608

00001134 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1134:	4801      	ldr	r0, [pc, #4]	; (113c <nrf_cc3xx_platform_abort_init+0x8>)
    1136:	f003 b957 	b.w	43e8 <nrf_cc3xx_platform_set_abort>
    113a:	bf00      	nop
    113c:	00005608 	.word	0x00005608

00001140 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1140:	b538      	push	{r3, r4, r5, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1142:	4604      	mov	r4, r0
    1144:	b918      	cbnz	r0, 114e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1146:	4b0f      	ldr	r3, [pc, #60]	; (1184 <mutex_free_platform+0x44>)
    1148:	480f      	ldr	r0, [pc, #60]	; (1188 <mutex_free_platform+0x48>)
    114a:	685b      	ldr	r3, [r3, #4]
    114c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    114e:	6861      	ldr	r1, [r4, #4]
    1150:	f5b1 3f68 	cmp.w	r1, #237568	; 0x3a000
    1154:	d00f      	beq.n	1176 <mutex_free_platform+0x36>
    1156:	f5b1 0f68 	cmp.w	r1, #15204352	; 0xe80000
    115a:	d00c      	beq.n	1176 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    115c:	4d0b      	ldr	r5, [pc, #44]	; (118c <mutex_free_platform+0x4c>)
    115e:	42a9      	cmp	r1, r5
    1160:	d009      	beq.n	1176 <mutex_free_platform+0x36>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1162:	f411 6168 	ands.w	r1, r1, #3712	; 0xe80
    1166:	d007      	beq.n	1178 <mutex_free_platform+0x38>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1168:	4621      	mov	r1, r4
    116a:	4809      	ldr	r0, [pc, #36]	; (1190 <mutex_free_platform+0x50>)
    116c:	f003 ff98 	bl	50a0 <k_mem_slab_free>
        mutex->mutex = NULL;
    1170:	2300      	movs	r3, #0
    1172:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1174:	6065      	str	r5, [r4, #4]
}
    1176:	bd38      	pop	{r3, r4, r5, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1178:	2214      	movs	r2, #20
    117a:	6820      	ldr	r0, [r4, #0]
    117c:	f003 fc28 	bl	49d0 <memset>
    1180:	e7f8      	b.n	1174 <mutex_free_platform+0x34>
    1182:	bf00      	nop
    1184:	200000d4 	.word	0x200000d4
    1188:	00005830 	.word	0x00005830
    118c:	a95c5f2c 	.word	0xa95c5f2c
    1190:	200007dc 	.word	0x200007dc

00001194 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1194:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1196:	b360      	cbz	r0, 11f2 <mutex_lock_platform+0x5e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1198:	6843      	ldr	r3, [r0, #4]
    119a:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    119e:	d00e      	beq.n	11be <mutex_lock_platform+0x2a>
    11a0:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    11a4:	d018      	beq.n	11d8 <mutex_lock_platform+0x44>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    11a6:	4a14      	ldr	r2, [pc, #80]	; (11f8 <mutex_lock_platform+0x64>)
    11a8:	4293      	cmp	r3, r2
    11aa:	d020      	beq.n	11ee <mutex_lock_platform+0x5a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    11ac:	6800      	ldr	r0, [r0, #0]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
    11ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    11b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    11b6:	f002 fb1f 	bl	37f8 <z_impl_k_mutex_lock>

        ret = k_mutex_lock(p_mutex, K_FOREVER);
        if (ret == 0) {
    11ba:	b158      	cbz	r0, 11d4 <mutex_lock_platform+0x40>
    11bc:	e015      	b.n	11ea <mutex_lock_platform+0x56>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    11be:	2201      	movs	r2, #1
    11c0:	6803      	ldr	r3, [r0, #0]
    11c2:	e8d3 1fef 	ldaex	r1, [r3]
    11c6:	2900      	cmp	r1, #0
    11c8:	d103      	bne.n	11d2 <mutex_lock_platform+0x3e>
    11ca:	e8c3 2fe0 	stlex	r0, r2, [r3]
    11ce:	2800      	cmp	r0, #0
    11d0:	d1f7      	bne.n	11c2 <mutex_lock_platform+0x2e>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11d2:	d10a      	bne.n	11ea <mutex_lock_platform+0x56>
            return NRF_CC3XX_PLATFORM_SUCCESS;
    11d4:	2000      	movs	r0, #0
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    11d6:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    11d8:	6803      	ldr	r3, [r0, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_mutex_lock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    11da:	4a08      	ldr	r2, [pc, #32]	; (11fc <mutex_lock_platform+0x68>)
    11dc:	781b      	ldrb	r3, [r3, #0]
    11de:	f503 7380 	add.w	r3, r3, #256	; 0x100
    11e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11e6:	2b00      	cmp	r3, #0
    11e8:	d0f4      	beq.n	11d4 <mutex_lock_platform+0x40>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11ea:	4805      	ldr	r0, [pc, #20]	; (1200 <mutex_lock_platform+0x6c>)
    11ec:	e7f3      	b.n	11d6 <mutex_lock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    11ee:	4805      	ldr	r0, [pc, #20]	; (1204 <mutex_lock_platform+0x70>)
    11f0:	e7f1      	b.n	11d6 <mutex_lock_platform+0x42>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    11f2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    11f6:	e7ee      	b.n	11d6 <mutex_lock_platform+0x42>
    11f8:	a95c5f2c 	.word	0xa95c5f2c
    11fc:	50030000 	.word	0x50030000
    1200:	ffff8fe9 	.word	0xffff8fe9
    1204:	ffff8fea 	.word	0xffff8fea

00001208 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1208:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    120a:	b320      	cbz	r0, 1256 <mutex_unlock_platform+0x4e>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    120c:	6843      	ldr	r3, [r0, #4]
    120e:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1212:	d009      	beq.n	1228 <mutex_unlock_platform+0x20>
    1214:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1218:	d013      	beq.n	1242 <mutex_unlock_platform+0x3a>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    121a:	4a11      	ldr	r2, [pc, #68]	; (1260 <mutex_unlock_platform+0x58>)
    121c:	4293      	cmp	r3, r2
    121e:	d01d      	beq.n	125c <mutex_unlock_platform+0x54>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1220:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1222:	f002 fb63 	bl	38ec <z_impl_k_mutex_unlock>
    1226:	e014      	b.n	1252 <mutex_unlock_platform+0x4a>
    1228:	2200      	movs	r2, #0
    122a:	6803      	ldr	r3, [r0, #0]
    122c:	e8d3 1fef 	ldaex	r1, [r3]
    1230:	2901      	cmp	r1, #1
    1232:	d103      	bne.n	123c <mutex_unlock_platform+0x34>
    1234:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1238:	2800      	cmp	r0, #0
    123a:	d1f7      	bne.n	122c <mutex_unlock_platform+0x24>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    123c:	d009      	beq.n	1252 <mutex_unlock_platform+0x4a>
    123e:	4809      	ldr	r0, [pc, #36]	; (1264 <mutex_unlock_platform+0x5c>)

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1240:	bd08      	pop	{r3, pc}
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    1242:	2100      	movs	r1, #0
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    1244:	6803      	ldr	r3, [r0, #0]
    1246:	4a08      	ldr	r2, [pc, #32]	; (1268 <mutex_unlock_platform+0x60>)
    1248:	781b      	ldrb	r3, [r3, #0]
    124a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    124e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1252:	2000      	movs	r0, #0
    1254:	e7f4      	b.n	1240 <mutex_unlock_platform+0x38>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1256:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    125a:	e7f1      	b.n	1240 <mutex_unlock_platform+0x38>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    125c:	4803      	ldr	r0, [pc, #12]	; (126c <mutex_unlock_platform+0x64>)
    125e:	e7ef      	b.n	1240 <mutex_unlock_platform+0x38>
    1260:	a95c5f2c 	.word	0xa95c5f2c
    1264:	ffff8fe9 	.word	0xffff8fe9
    1268:	50030000 	.word	0x50030000
    126c:	ffff8fea 	.word	0xffff8fea

00001270 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1270:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1272:	4604      	mov	r4, r0
    1274:	b918      	cbnz	r0, 127e <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1276:	4b1d      	ldr	r3, [pc, #116]	; (12ec <mutex_init_platform+0x7c>)
    1278:	481d      	ldr	r0, [pc, #116]	; (12f0 <mutex_init_platform+0x80>)
    127a:	685b      	ldr	r3, [r3, #4]
    127c:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    127e:	6863      	ldr	r3, [r4, #4]
    1280:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1284:	d02f      	beq.n	12e6 <mutex_init_platform+0x76>
    1286:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    128a:	d02c      	beq.n	12e6 <mutex_init_platform+0x76>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    128c:	4a19      	ldr	r2, [pc, #100]	; (12f4 <mutex_init_platform+0x84>)
    128e:	4293      	cmp	r3, r2
    1290:	d119      	bne.n	12c6 <mutex_init_platform+0x56>
    1292:	6823      	ldr	r3, [r4, #0]
    1294:	bb03      	cbnz	r3, 12d8 <mutex_init_platform+0x68>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1296:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    129a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    129e:	4621      	mov	r1, r4
    12a0:	4815      	ldr	r0, [pc, #84]	; (12f8 <mutex_init_platform+0x88>)
    12a2:	f002 f9d3 	bl	364c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    12a6:	b908      	cbnz	r0, 12ac <mutex_init_platform+0x3c>
    12a8:	6823      	ldr	r3, [r4, #0]
    12aa:	b91b      	cbnz	r3, 12b4 <mutex_init_platform+0x44>
            platform_abort_apis.abort_fn(
    12ac:	4b0f      	ldr	r3, [pc, #60]	; (12ec <mutex_init_platform+0x7c>)
    12ae:	4813      	ldr	r0, [pc, #76]	; (12fc <mutex_init_platform+0x8c>)
    12b0:	685b      	ldr	r3, [r3, #4]
    12b2:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    12b4:	2214      	movs	r2, #20
    12b6:	2100      	movs	r1, #0
    12b8:	6820      	ldr	r0, [r4, #0]
    12ba:	f003 fb89 	bl	49d0 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    12be:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    12c2:	6063      	str	r3, [r4, #4]
    12c4:	e008      	b.n	12d8 <mutex_init_platform+0x68>
    switch(flags){
    12c6:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    12ca:	d80d      	bhi.n	12e8 <mutex_init_platform+0x78>
    12cc:	2b3a      	cmp	r3, #58	; 0x3a
    12ce:	d003      	beq.n	12d8 <mutex_init_platform+0x68>
    12d0:	f640 62ba 	movw	r2, #3770	; 0xeba
    12d4:	4293      	cmp	r3, r2
    12d6:	d1de      	bne.n	1296 <mutex_init_platform+0x26>
    p_mutex = (struct k_mutex *)mutex->mutex;
    12d8:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    12da:	f003 ff1f 	bl	511c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    12de:	6863      	ldr	r3, [r4, #4]
    12e0:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    12e4:	6063      	str	r3, [r4, #4]
}
    12e6:	bd10      	pop	{r4, pc}
    switch(flags){
    12e8:	4a05      	ldr	r2, [pc, #20]	; (1300 <mutex_init_platform+0x90>)
    12ea:	e7f3      	b.n	12d4 <mutex_init_platform+0x64>
    12ec:	200000d4 	.word	0x200000d4
    12f0:	00005830 	.word	0x00005830
    12f4:	a95c5f2c 	.word	0xa95c5f2c
    12f8:	200007dc 	.word	0x200007dc
    12fc:	00005856 	.word	0x00005856
    1300:	3a00003a 	.word	0x3a00003a

00001304 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1304:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1306:	4906      	ldr	r1, [pc, #24]	; (1320 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1308:	2340      	movs	r3, #64	; 0x40
    130a:	2214      	movs	r2, #20
    130c:	4805      	ldr	r0, [pc, #20]	; (1324 <nrf_cc3xx_platform_mutex_init+0x20>)
    130e:	f003 feb9 	bl	5084 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1316:	4904      	ldr	r1, [pc, #16]	; (1328 <nrf_cc3xx_platform_mutex_init+0x24>)
    1318:	4804      	ldr	r0, [pc, #16]	; (132c <nrf_cc3xx_platform_mutex_init+0x28>)
    131a:	f003 b8d7 	b.w	44cc <nrf_cc3xx_platform_set_mutexes>
    131e:	bf00      	nop
    1320:	200002dc 	.word	0x200002dc
    1324:	200007dc 	.word	0x200007dc
    1328:	00005610 	.word	0x00005610
    132c:	00005624 	.word	0x00005624

00001330 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1330:	4901      	ldr	r1, [pc, #4]	; (1338 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1332:	2210      	movs	r2, #16
	str	r2, [r1]
    1334:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1336:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1338:	e000ed10 	.word	0xe000ed10

0000133c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    133c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    133e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1340:	f380 8811 	msr	BASEPRI, r0
	isb
    1344:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1348:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    134c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    134e:	b662      	cpsie	i
	isb
    1350:	f3bf 8f6f 	isb	sy

	bx	lr
    1354:	4770      	bx	lr
    1356:	bf00      	nop

00001358 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1358:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    135a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    135c:	f381 8811 	msr	BASEPRI, r1

	wfe
    1360:	bf20      	wfe

	msr	BASEPRI, r0
    1362:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1366:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1368:	4770      	bx	lr
    136a:	bf00      	nop

0000136c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    136c:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    136e:	2800      	cmp	r0, #0
    1370:	db07      	blt.n	1382 <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1372:	2301      	movs	r3, #1
    1374:	0941      	lsrs	r1, r0, #5
    1376:	4a03      	ldr	r2, [pc, #12]	; (1384 <arch_irq_enable+0x18>)
    1378:	f000 001f 	and.w	r0, r0, #31
    137c:	4083      	lsls	r3, r0
    137e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    1382:	4770      	bx	lr
    1384:	e000e100 	.word	0xe000e100

00001388 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1388:	4b05      	ldr	r3, [pc, #20]	; (13a0 <arch_irq_is_enabled+0x18>)
    138a:	0942      	lsrs	r2, r0, #5
    138c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1390:	2301      	movs	r3, #1
    1392:	f000 001f 	and.w	r0, r0, #31
    1396:	fa03 f000 	lsl.w	r0, r3, r0
}
    139a:	4010      	ands	r0, r2
    139c:	4770      	bx	lr
    139e:	bf00      	nop
    13a0:	e000e100 	.word	0xe000e100

000013a4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    13a4:	b240      	sxtb	r0, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    13a6:	2800      	cmp	r0, #0
		prio += _IRQ_PRIO_OFFSET;
    13a8:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13ac:	bfac      	ite	ge
    13ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13b2:	4b06      	ldrlt	r3, [pc, #24]	; (13cc <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13b4:	ea4f 1141 	mov.w	r1, r1, lsl #5
    13b8:	b2c9      	uxtb	r1, r1
    13ba:	bfab      	itete	ge
    13bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13c0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13c4:	f880 1300 	strbge.w	r1, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    13c8:	5419      	strblt	r1, [r3, r0]
}
    13ca:	4770      	bx	lr
    13cc:	e000ed14 	.word	0xe000ed14

000013d0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    13d0:	bf30      	wfi
    b z_SysNmiOnReset
    13d2:	f7ff bffd 	b.w	13d0 <z_SysNmiOnReset>
    13d6:	bf00      	nop

000013d8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    13d8:	4a0b      	ldr	r2, [pc, #44]	; (1408 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    13da:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    13dc:	4b0b      	ldr	r3, [pc, #44]	; (140c <z_arm_prep_c+0x34>)
    13de:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    13e2:	609a      	str	r2, [r3, #8]
    13e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    13e8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    13ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    13f0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    13f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    13f8:	f002 f868 	bl	34cc <z_bss_zero>
	z_data_copy();
    13fc:	f002 fe42 	bl	4084 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1400:	f000 f9b6 	bl	1770 <z_arm_interrupt_init>
	z_cstart();
    1404:	f002 f8a2 	bl	354c <z_cstart>
    1408:	00000000 	.word	0x00000000
    140c:	e000ed00 	.word	0xe000ed00

00001410 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1410:	4a09      	ldr	r2, [pc, #36]	; (1438 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1412:	490a      	ldr	r1, [pc, #40]	; (143c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1414:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1416:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    1418:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    141a:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    141c:	4908      	ldr	r1, [pc, #32]	; (1440 <arch_swap+0x30>)
    141e:	684b      	ldr	r3, [r1, #4]
    1420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1424:	604b      	str	r3, [r1, #4]
    1426:	2300      	movs	r3, #0
    1428:	f383 8811 	msr	BASEPRI, r3
    142c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1430:	6893      	ldr	r3, [r2, #8]
}
    1432:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1434:	4770      	bx	lr
    1436:	bf00      	nop
    1438:	200008f0 	.word	0x200008f0
    143c:	0000573c 	.word	0x0000573c
    1440:	e000ed00 	.word	0xe000ed00

00001444 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1444:	4913      	ldr	r1, [pc, #76]	; (1494 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    1446:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    1448:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    144c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    144e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1452:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1456:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    1458:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    145c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1460:	4f0d      	ldr	r7, [pc, #52]	; (1498 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1462:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    1466:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    1468:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    146a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    146c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    146e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1470:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1472:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1476:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    147a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    147e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    1482:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    1486:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    1488:	f003 fa5d 	bl	4946 <configure_builtin_stack_guard>
    pop {r2, lr}
    148c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1490:	4770      	bx	lr
    1492:	0000      	.short	0x0000
    ldr r1, =_kernel
    1494:	200008f0 	.word	0x200008f0
    ldr v4, =_SCS_ICSR
    1498:	e000ed04 	.word	0xe000ed04

0000149c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    149c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    14a0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    14a2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    14a6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    14aa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    14ac:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    14b0:	2902      	cmp	r1, #2
    beq _oops
    14b2:	d0ff      	beq.n	14b4 <_oops>

000014b4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    14b4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    14b6:	f003 fa37 	bl	4928 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    14ba:	bd01      	pop	{r0, pc}

000014bc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    14bc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    14c0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    14c2:	490b      	ldr	r1, [pc, #44]	; (14f0 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    14c4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    14c8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    14ca:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    14ce:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    14d2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    14d4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    14d8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    14dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    14e0:	f842 3c04 	str.w	r3, [r2, #-4]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    14e4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    14e6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    14e8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    14ea:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    14ec:	4770      	bx	lr
    14ee:	bf00      	nop
    14f0:	0000468f 	.word	0x0000468f

000014f4 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    14f4:	4b08      	ldr	r3, [pc, #32]	; (1518 <arch_switch_to_main_thread+0x24>)
    14f6:	6098      	str	r0, [r3, #8]
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    14f8:	6e43      	ldr	r3, [r0, #100]	; 0x64
    14fa:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    14fe:	4610      	mov	r0, r2
    1500:	f381 8809 	msr	PSP, r1
    1504:	2100      	movs	r1, #0
    1506:	b663      	cpsie	if
    1508:	f381 8811 	msr	BASEPRI, r1
    150c:	f3bf 8f6f 	isb	sy
    1510:	2200      	movs	r2, #0
    1512:	2300      	movs	r3, #0
    1514:	f003 f8bb 	bl	468e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1518:	200008f0 	.word	0x200008f0

0000151c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    151c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    151e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1520:	4a0b      	ldr	r2, [pc, #44]	; (1550 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1522:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1524:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1526:	bf1e      	ittt	ne
	movne	r1, #0
    1528:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    152a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    152c:	f003 fde7 	blne	50fe <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1530:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1532:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1536:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    153a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    153e:	4905      	ldr	r1, [pc, #20]	; (1554 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1540:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1542:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1544:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1546:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    154a:	4903      	ldr	r1, [pc, #12]	; (1558 <_isr_wrapper+0x3c>)
	bx r1
    154c:	4708      	bx	r1
    154e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1550:	200008f0 	.word	0x200008f0
	ldr r1, =_sw_isr_table
    1554:	000053b4 	.word	0x000053b4
	ldr r1, =z_arm_int_exit
    1558:	0000155d 	.word	0x0000155d

0000155c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    155c:	4b04      	ldr	r3, [pc, #16]	; (1570 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    155e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1560:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1562:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1564:	d003      	beq.n	156e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1566:	4903      	ldr	r1, [pc, #12]	; (1574 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1568:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    156c:	600a      	str	r2, [r1, #0]

0000156e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    156e:	4770      	bx	lr
	ldr r3, =_kernel
    1570:	200008f0 	.word	0x200008f0
	ldr r1, =_SCS_ICSR
    1574:	e000ed04 	.word	0xe000ed04

00001578 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1578:	4b08      	ldr	r3, [pc, #32]	; (159c <usage_fault.constprop.0+0x24>)
    157a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    157c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    157e:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    158a:	f3c0 5000 	ubfx	r0, r0, #20, #1
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    158e:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1592:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    1596:	0040      	lsls	r0, r0, #1
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1598:	629a      	str	r2, [r3, #40]	; 0x28
}
    159a:	4770      	bx	lr
    159c:	e000ed00 	.word	0xe000ed00

000015a0 <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    15a0:	4b0d      	ldr	r3, [pc, #52]	; (15d8 <bus_fault.constprop.0+0x38>)
    15a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    15a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    15a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15a8:	0592      	lsls	r2, r2, #22
    15aa:	d508      	bpl.n	15be <bus_fault.constprop.0+0x1e>
		STORE_xFAR(bfar, SCB->BFAR);
    15ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    15ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15b0:	0412      	lsls	r2, r2, #16
    15b2:	d504      	bpl.n	15be <bus_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    15b4:	b118      	cbz	r0, 15be <bus_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    15b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    15bc:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    15be:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    15c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    15c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15c4:	05d2      	lsls	r2, r2, #23
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    15c6:	4a04      	ldr	r2, [pc, #16]	; (15d8 <bus_fault.constprop.0+0x38>)
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    15c8:	bf58      	it	pl
    15ca:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    15cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    15ce:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    15d2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    15d4:	7008      	strb	r0, [r1, #0]
}
    15d6:	4770      	bx	lr
    15d8:	e000ed00 	.word	0xe000ed00

000015dc <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    15dc:	4b12      	ldr	r3, [pc, #72]	; (1628 <mem_manage_fault.constprop.0+0x4c>)
    15de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    15e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    15e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15e4:	0792      	lsls	r2, r2, #30
    15e6:	d508      	bpl.n	15fa <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    15e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    15ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15ec:	0612      	lsls	r2, r2, #24
    15ee:	d504      	bpl.n	15fa <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault != 0) {
    15f0:	b118      	cbz	r0, 15fa <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    15f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    15f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    15f8:	629a      	str	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    15fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    15fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    15fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1600:	06d0      	lsls	r0, r2, #27
	*recoverable = memory_fault_recoverable(esf, true);
    1602:	f04f 0000 	mov.w	r0, #0
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1606:	bf58      	it	pl
    1608:	6a9b      	ldrpl	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    160a:	4b07      	ldr	r3, [pc, #28]	; (1628 <mem_manage_fault.constprop.0+0x4c>)
    160c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    160e:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1610:	bf42      	ittt	mi
    1612:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1614:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1618:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    161a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    161c:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1620:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1622:	7008      	strb	r0, [r1, #0]
}
    1624:	4770      	bx	lr
    1626:	bf00      	nop
    1628:	e000ed00 	.word	0xe000ed00

0000162c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    162c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    162e:	4b44      	ldr	r3, [pc, #272]	; (1740 <z_arm_fault+0x114>)
{
    1630:	4606      	mov	r6, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1632:	685b      	ldr	r3, [r3, #4]
    1634:	2500      	movs	r5, #0
{
    1636:	b08a      	sub	sp, #40	; 0x28
    1638:	f3c3 0308 	ubfx	r3, r3, #0, #9
    163c:	f385 8811 	msr	BASEPRI, r5
    1640:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1644:	f002 407f 	and.w	r0, r2, #4278190080	; 0xff000000
    1648:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
    164c:	d111      	bne.n	1672 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    164e:	f002 000c 	and.w	r0, r2, #12
    1652:	2808      	cmp	r0, #8
    1654:	d00d      	beq.n	1672 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1656:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1658:	bf4c      	ite	mi
    165a:	460e      	movmi	r6, r1
			*nested_exc = true;
    165c:	2501      	movpl	r5, #1
	*recoverable = false;
    165e:	2200      	movs	r2, #0
	switch (fault) {
    1660:	3b03      	subs	r3, #3
	*recoverable = false;
    1662:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1666:	2b03      	cmp	r3, #3
    1668:	d805      	bhi.n	1676 <z_arm_fault+0x4a>
    166a:	e8df f003 	tbb	[pc, r3]
    166e:	5c1e      	.short	0x5c1e
    1670:	5960      	.short	0x5960
		return NULL;
    1672:	462e      	mov	r6, r5
    1674:	e7f3      	b.n	165e <z_arm_fault+0x32>
    1676:	2400      	movs	r4, #0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1678:	f89d 3007 	ldrb.w	r3, [sp, #7]
    167c:	b99b      	cbnz	r3, 16a6 <z_arm_fault+0x7a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    167e:	2220      	movs	r2, #32
    1680:	4631      	mov	r1, r6
    1682:	a802      	add	r0, sp, #8
    1684:	f003 f999 	bl	49ba <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1688:	9b09      	ldr	r3, [sp, #36]	; 0x24
    168a:	2d00      	cmp	r5, #0
    168c:	d053      	beq.n	1736 <z_arm_fault+0x10a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    168e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1692:	b922      	cbnz	r2, 169e <z_arm_fault+0x72>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1694:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1698:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    169c:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    169e:	4620      	mov	r0, r4
    16a0:	a902      	add	r1, sp, #8
    16a2:	f003 f93f 	bl	4924 <z_arm_fatal_error>
}
    16a6:	b00a      	add	sp, #40	; 0x28
    16a8:	bd70      	pop	{r4, r5, r6, pc}
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    16aa:	4b25      	ldr	r3, [pc, #148]	; (1740 <z_arm_fault+0x114>)
    16ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    16ae:	0791      	lsls	r1, r2, #30
    16b0:	d4e1      	bmi.n	1676 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    16b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    16b4:	2a00      	cmp	r2, #0
    16b6:	dbde      	blt.n	1676 <z_arm_fault+0x4a>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    16b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    16ba:	0052      	lsls	r2, r2, #1
    16bc:	d5db      	bpl.n	1676 <z_arm_fault+0x4a>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    16be:	695a      	ldr	r2, [r3, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    16c0:	69b1      	ldr	r1, [r6, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    16c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    16c6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    16c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16cc:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    16d0:	695a      	ldr	r2, [r3, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    16d2:	f831 1c02 	ldrh.w	r1, [r1, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    16d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    16da:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    16dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16e0:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    16e4:	f64d 7202 	movw	r2, #57090	; 0xdf02
    16e8:	4291      	cmp	r1, r2
    16ea:	d009      	beq.n	1700 <z_arm_fault+0xd4>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    16ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    16ee:	b2d2      	uxtb	r2, r2
    16f0:	b142      	cbz	r2, 1704 <z_arm_fault+0xd8>
			reason = mem_manage_fault(esf, 1, recoverable);
    16f2:	2001      	movs	r0, #1
    16f4:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    16f8:	f7ff ff70 	bl	15dc <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    16fc:	4604      	mov	r4, r0
		break;
    16fe:	e7bb      	b.n	1678 <z_arm_fault+0x4c>
			reason = esf->basic.r0;
    1700:	6834      	ldr	r4, [r6, #0]
    1702:	e7b9      	b.n	1678 <z_arm_fault+0x4c>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1706:	f412 4f7f 	tst.w	r2, #65280	; 0xff00
    170a:	d005      	beq.n	1718 <z_arm_fault+0xec>
			reason = bus_fault(esf, 1, recoverable);
    170c:	2001      	movs	r0, #1
    170e:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1712:	f7ff ff45 	bl	15a0 <bus_fault.constprop.0>
    1716:	e7f1      	b.n	16fc <z_arm_fault+0xd0>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    171a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    171e:	d3aa      	bcc.n	1676 <z_arm_fault+0x4a>
		reason = usage_fault(esf);
    1720:	f7ff ff2a 	bl	1578 <usage_fault.constprop.0>
    1724:	e7ea      	b.n	16fc <z_arm_fault+0xd0>
		reason = mem_manage_fault(esf, 0, recoverable);
    1726:	2000      	movs	r0, #0
    1728:	f10d 0107 	add.w	r1, sp, #7
    172c:	e7e4      	b.n	16f8 <z_arm_fault+0xcc>
		reason = bus_fault(esf, 0, recoverable);
    172e:	2000      	movs	r0, #0
    1730:	f10d 0107 	add.w	r1, sp, #7
    1734:	e7ed      	b.n	1712 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1736:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    173a:	f023 0301 	bic.w	r3, r3, #1
    173e:	e7ad      	b.n	169c <z_arm_fault+0x70>
    1740:	e000ed00 	.word	0xe000ed00

00001744 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1744:	4b04      	ldr	r3, [pc, #16]	; (1758 <z_arm_fault_init+0x14>)
    1746:	695a      	ldr	r2, [r3, #20]
    1748:	f042 0210 	orr.w	r2, r2, #16
    174c:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    174e:	695a      	ldr	r2, [r3, #20]
    1750:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1754:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1756:	4770      	bx	lr
    1758:	e000ed00 	.word	0xe000ed00

0000175c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    175c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1760:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1764:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1766:	4672      	mov	r2, lr
	bl z_arm_fault
    1768:	f7ff ff60 	bl	162c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    176c:	bd01      	pop	{r0, pc}
    176e:	bf00      	nop

00001770 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1770:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1772:	2120      	movs	r1, #32
    1774:	4803      	ldr	r0, [pc, #12]	; (1784 <z_arm_interrupt_init+0x14>)
    1776:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1778:	3301      	adds	r3, #1
    177a:	2b45      	cmp	r3, #69	; 0x45
    177c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1780:	d1f9      	bne.n	1776 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1782:	4770      	bx	lr
    1784:	e000e100 	.word	0xe000e100

00001788 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1788:	2000      	movs	r0, #0
    msr CONTROL, r0
    178a:	f380 8814 	msr	CONTROL, r0
    isb
    178e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1792:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1794:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1798:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    179c:	f7ff fb9a 	bl	ed4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    17a0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    17a2:	490e      	ldr	r1, [pc, #56]	; (17dc <__start+0x54>)
    str r0, [r1]
    17a4:	6008      	str	r0, [r1, #0]
    dsb
    17a6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    17aa:	480d      	ldr	r0, [pc, #52]	; (17e0 <__start+0x58>)
    msr msp, r0
    17ac:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    17b0:	f000 f83e 	bl	1830 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    17b4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    17b6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    17ba:	480a      	ldr	r0, [pc, #40]	; (17e4 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    17bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    17c0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    17c2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    17c6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    17ca:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    17cc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    17ce:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    17d2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    17d6:	f7ff fdff 	bl	13d8 <z_arm_prep_c>
    17da:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
    17dc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    17e0:	20001848 	.word	0x20001848
    ldr r0, =z_interrupt_stacks
    17e4:	20000b08 	.word	0x20000b08

000017e8 <sys_arch_reboot>:
  __ASM volatile ("dsb 0xF":::"memory");
    17e8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    17ec:	4905      	ldr	r1, [pc, #20]	; (1804 <sys_arch_reboot+0x1c>)
    17ee:	4b06      	ldr	r3, [pc, #24]	; (1808 <sys_arch_reboot+0x20>)
    17f0:	68ca      	ldr	r2, [r1, #12]
    17f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    17f6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    17f8:	60cb      	str	r3, [r1, #12]
    17fa:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    17fe:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1800:	e7fd      	b.n	17fe <sys_arch_reboot+0x16>
    1802:	bf00      	nop
    1804:	e000ed00 	.word	0xe000ed00
    1808:	05fa0004 	.word	0x05fa0004

0000180c <z_arm_clear_arm_mpu_config>:
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);

	for (i = 0; i < num_regions; i++) {
    180c:	2300      	movs	r3, #0
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
  mpu->RLAR = 0U;
    180e:	4618      	mov	r0, r3
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1810:	4906      	ldr	r1, [pc, #24]	; (182c <z_arm_clear_arm_mpu_config+0x20>)
    1812:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
	int num_regions =
    1816:	f3c2 2207 	ubfx	r2, r2, #8, #8
	for (i = 0; i < num_regions; i++) {
    181a:	4293      	cmp	r3, r2
    181c:	db00      	blt.n	1820 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    181e:	4770      	bx	lr
  mpu->RNR = rnr;
    1820:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  mpu->RLAR = 0U;
    1824:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1828:	3301      	adds	r3, #1
    182a:	e7f6      	b.n	181a <z_arm_clear_arm_mpu_config+0xe>
    182c:	e000ed00 	.word	0xe000ed00

00001830 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1830:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1832:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1834:	2400      	movs	r4, #0
    1836:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    183a:	f7ff ffe7 	bl	180c <z_arm_clear_arm_mpu_config>
    183e:	4623      	mov	r3, r4
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1844:	4a0c      	ldr	r2, [pc, #48]	; (1878 <z_arm_init_arch_hw_at_boot+0x48>)
    1846:	f103 0120 	add.w	r1, r3, #32
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    184a:	3301      	adds	r3, #1
    184c:	2b10      	cmp	r3, #16
		NVIC->ICER[i] = 0xFFFFFFFF;
    184e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1852:	d1f8      	bne.n	1846 <z_arm_init_arch_hw_at_boot+0x16>
    1854:	2300      	movs	r3, #0
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    185a:	4a07      	ldr	r2, [pc, #28]	; (1878 <z_arm_init_arch_hw_at_boot+0x48>)
    185c:	f103 0160 	add.w	r1, r3, #96	; 0x60
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1860:	3301      	adds	r3, #1
    1862:	2b10      	cmp	r3, #16
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1864:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1868:	d1f8      	bne.n	185c <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    186a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    186c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1870:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1874:	bd10      	pop	{r4, pc}
    1876:	bf00      	nop
    1878:	e000e100 	.word	0xe000e100

0000187c <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    187c:	4b08      	ldr	r3, [pc, #32]	; (18a0 <z_impl_k_thread_abort+0x24>)
    187e:	689b      	ldr	r3, [r3, #8]
    1880:	4283      	cmp	r3, r0
    1882:	d10b      	bne.n	189c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1884:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1888:	b143      	cbz	r3, 189c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    188a:	4b06      	ldr	r3, [pc, #24]	; (18a4 <z_impl_k_thread_abort+0x28>)
    188c:	685a      	ldr	r2, [r3, #4]
    188e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1892:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1896:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    189a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    189c:	f002 bb92 	b.w	3fc4 <z_thread_abort>
    18a0:	200008f0 	.word	0x200008f0
    18a4:	e000ed00 	.word	0xe000ed00

000018a8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    18a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    18aa:	4c09      	ldr	r4, [pc, #36]	; (18d0 <z_arm_configure_static_mpu_regions+0x28>)
    18ac:	4a09      	ldr	r2, [pc, #36]	; (18d4 <z_arm_configure_static_mpu_regions+0x2c>)
    18ae:	4623      	mov	r3, r4
    18b0:	2101      	movs	r1, #1
    18b2:	4809      	ldr	r0, [pc, #36]	; (18d8 <z_arm_configure_static_mpu_regions+0x30>)
    18b4:	f000 f8ea 	bl	1a8c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    18b8:	2300      	movs	r3, #0
    18ba:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    18bc:	4b07      	ldr	r3, [pc, #28]	; (18dc <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    18be:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    18c0:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    18c2:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    18c4:	9301      	str	r3, [sp, #4]
    18c6:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    18c8:	f000 f8ea 	bl	1aa0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    18cc:	b004      	add	sp, #16
    18ce:	bd10      	pop	{r4, pc}
    18d0:	20070000 	.word	0x20070000
    18d4:	20000000 	.word	0x20000000
    18d8:	00005634 	.word	0x00005634
    18dc:	20000190 	.word	0x20000190

000018e0 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    18e0:	b510      	push	{r4, lr}
	mpu_set_region(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
		| (region_conf->attr.rbar &
    18e2:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    18e4:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    18e6:	f004 021f 	and.w	r2, r4, #31
		(region_conf->base & MPU_RBAR_BASE_Msk)
    18ea:	f023 031f 	bic.w	r3, r3, #31
		| (region_conf->attr.rbar &
    18ee:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    18f0:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    18f2:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    18f4:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = rnr;
    18f8:	4905      	ldr	r1, [pc, #20]	; (1910 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    18fa:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    18fe:	f043 0301 	orr.w	r3, r3, #1
	MPU->RNR = rnr;
    1902:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
	MPU->RBAR = rbar;
    1906:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
	MPU->RLAR = rlar;
    190a:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    190e:	bd10      	pop	{r4, pc}
    1910:	e000ed00 	.word	0xe000ed00

00001914 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1918:	460f      	mov	r7, r1
    191a:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    191c:	4606      	mov	r6, r0
    191e:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = rnr;
    1922:	4d4e      	ldr	r5, [pc, #312]	; (1a5c <mpu_configure_regions_and_partition.constprop.0+0x148>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1924:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    1926:	45b8      	cmp	r8, r7
    1928:	f280 8094 	bge.w	1a54 <mpu_configure_regions_and_partition.constprop.0+0x140>
		if (regions[i].size == 0U) {
    192c:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1930:	f1b9 0f00 	cmp.w	r9, #0
    1934:	d036      	beq.n	19a4 <mpu_configure_regions_and_partition.constprop.0+0x90>
		&&
    1936:	f1b9 0f1f 	cmp.w	r9, #31
    193a:	f240 8089 	bls.w	1a50 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		&&
    193e:	f019 0f1f 	tst.w	r9, #31
    1942:	f040 8085 	bne.w	1a50 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		((part->start &
    1946:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    194a:	f01a 0f1f 	tst.w	sl, #31
    194e:	d17f      	bne.n	1a50 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1950:	4650      	mov	r0, sl
    1952:	f002 fffc 	bl	494e <arm_cmse_mpu_region_get>
    1956:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1958:	eb09 000a 	add.w	r0, r9, sl
    195c:	3801      	subs	r0, #1
    195e:	f002 fff6 	bl	494e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1962:	4583      	cmp	fp, r0
    1964:	d174      	bne.n	1a50 <mpu_configure_regions_and_partition.constprop.0+0x13c>
		 * inside which the new region will be configured.
		 */
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
    1966:	f11b 0f16 	cmn.w	fp, #22
    196a:	d071      	beq.n	1a50 <mpu_configure_regions_and_partition.constprop.0+0x13c>
    196c:	455c      	cmp	r4, fp
    196e:	dd6f      	ble.n	1a50 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    1970:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1974:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = rnr;
    1978:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    197c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1980:	f021 011f 	bic.w	r1, r1, #31
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1984:	f043 0a1f 	orr.w	sl, r3, #31
		 * The new memory region is to be placed inside the underlying
		 * region, possibly splitting the underlying region into two.
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1988:	e9d6 3200 	ldrd	r3, r2, [r6]
    198c:	441a      	add	r2, r3

		if ((regions[i].start == u_reg_base) &&
    198e:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1990:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    1994:	d11e      	bne.n	19d4 <mpu_configure_regions_and_partition.constprop.0+0xc0>
    1996:	45ca      	cmp	sl, r9
    1998:	d108      	bne.n	19ac <mpu_configure_regions_and_partition.constprop.0+0x98>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    199a:	4631      	mov	r1, r6
    199c:	fa5f f08b 	uxtb.w	r0, fp
    19a0:	f002 ffde 	bl	4960 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    19a4:	f108 0801 	add.w	r8, r8, #1
    19a8:	360c      	adds	r6, #12
    19aa:	e7bc      	b.n	1926 <mpu_configure_regions_and_partition.constprop.0+0x12>
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    19ac:	4631      	mov	r1, r6
	MPU->RNR = rnr;
    19ae:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    19b2:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		     | (base & MPU_RBAR_BASE_Msk));
    19b6:	f022 021f 	bic.w	r2, r2, #31
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    19ba:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    19be:	4313      	orrs	r3, r2
	MPU->RBAR = rbar;
    19c0:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    19c4:	b2e0      	uxtb	r0, r4
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    19c6:	f002 ffcb 	bl	4960 <mpu_configure_region>

			if (reg_index == -EINVAL) {
    19ca:	f110 0f16 	cmn.w	r0, #22
    19ce:	d03f      	beq.n	1a50 <mpu_configure_regions_and_partition.constprop.0+0x13c>

			if (reg_index == -EINVAL) {
				return reg_index;
			}

			reg_index++;
    19d0:	1c44      	adds	r4, r0, #1
    19d2:	e7e7      	b.n	19a4 <mpu_configure_regions_and_partition.constprop.0+0x90>
	MPU->RNR = rnr;
    19d4:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RLAR;
    19d8:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				regions[i].start - 1);
    19dc:	3b01      	subs	r3, #1
		     | (limit & MPU_RLAR_LIMIT_Msk));
    19de:	f023 031f 	bic.w	r3, r3, #31
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    19e2:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    19e6:	4313      	orrs	r3, r2
		} else if (reg_last == u_reg_last) {
    19e8:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    19ea:	4631      	mov	r1, r6
				mpu_configure_region(reg_index, &regions[i]);
    19ec:	b2e0      	uxtb	r0, r4
	MPU->RLAR = rlar;
    19ee:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
		} else if (reg_last == u_reg_last) {
    19f2:	d0e8      	beq.n	19c6 <mpu_configure_regions_and_partition.constprop.0+0xb2>
				mpu_configure_region(reg_index, &regions[i]);
    19f4:	f002 ffb4 	bl	4960 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    19f8:	f110 0f16 	cmn.w	r0, #22
    19fc:	d028      	beq.n	1a50 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	MPU->RNR = rnr;
    19fe:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR;
    1a02:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1a06:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    1a0a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	attr->rbar = mpu_get_rbar() &
    1a0e:	f362 0304 	bfi	r3, r2, #0, #5
    1a12:	f88d 3008 	strb.w	r3, [sp, #8]
	return MPU->RLAR;
    1a16:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1a1a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1a1e:	085b      	lsrs	r3, r3, #1
    1a20:	f363 1247 	bfi	r2, r3, #5, #3
    1a24:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    1a28:	e9d6 3200 	ldrd	r3, r2, [r6]
    1a2c:	4413      	add	r3, r2
    1a2e:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    1a30:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    1a34:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    1a36:	4453      	add	r3, sl
    1a38:	eba3 0309 	sub.w	r3, r3, r9
    1a3c:	b2c8      	uxtb	r0, r1
    1a3e:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    1a42:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    1a44:	9303      	str	r3, [sp, #12]
    1a46:	d803      	bhi.n	1a50 <mpu_configure_regions_and_partition.constprop.0+0x13c>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1a48:	4669      	mov	r1, sp
    1a4a:	f7ff ff49 	bl	18e0 <region_init>
    1a4e:	e7bf      	b.n	19d0 <mpu_configure_regions_and_partition.constprop.0+0xbc>
			return -EINVAL;
    1a50:	f06f 0415 	mvn.w	r4, #21
		}
	}

	return reg_index;
}
    1a54:	4620      	mov	r0, r4
    1a56:	b005      	add	sp, #20
    1a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1a5c:	e000ed00 	.word	0xe000ed00

00001a60 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1a60:	2205      	movs	r2, #5
    1a62:	4b04      	ldr	r3, [pc, #16]	; (1a74 <arm_core_mpu_enable+0x14>)
    1a64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1a68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1a6c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1a70:	4770      	bx	lr
    1a72:	bf00      	nop
    1a74:	e000ed00 	.word	0xe000ed00

00001a78 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1a78:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1a7c:	2200      	movs	r2, #0
    1a7e:	4b02      	ldr	r3, [pc, #8]	; (1a88 <arm_core_mpu_disable+0x10>)
    1a80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1a84:	4770      	bx	lr
    1a86:	bf00      	nop
    1a88:	e000ed00 	.word	0xe000ed00

00001a8c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1a8c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1a8e:	4c03      	ldr	r4, [pc, #12]	; (1a9c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1a90:	7822      	ldrb	r2, [r4, #0]
    1a92:	f7ff ff3f 	bl	1914 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1a96:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1a98:	bd10      	pop	{r4, pc}
    1a9a:	bf00      	nop
    1a9c:	20000b00 	.word	0x20000b00

00001aa0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
 * @brief mark memory areas for dynamic region configuration
 */
void arm_core_mpu_mark_areas_for_dynamic_regions(
	const struct z_arm_mpu_partition dyn_region_areas[],
	const uint8_t dyn_region_areas_num)
{
    1aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1aa4:	4d29      	ldr	r5, [pc, #164]	; (1b4c <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    1aa6:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    1aa8:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1aaa:	f04f 0800 	mov.w	r8, #0
    1aae:	46ab      	mov	fp, r5
	MPU->RNR = rnr;
    1ab0:	4f27      	ldr	r7, [pc, #156]	; (1b50 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1ab2:	45d0      	cmp	r8, sl
    1ab4:	da1b      	bge.n	1aee <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1ab6:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1aba:	f1b9 0f00 	cmp.w	r9, #0
    1abe:	d03f      	beq.n	1b40 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1ac0:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1ac2:	4608      	mov	r0, r1
    1ac4:	9101      	str	r1, [sp, #4]
    1ac6:	f002 ff42 	bl	494e <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1aca:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1acc:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1ace:	eb09 0001 	add.w	r0, r9, r1
    1ad2:	3801      	subs	r0, #1
    1ad4:	f002 ff3b 	bl	494e <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1ad8:	4284      	cmp	r4, r0
    1ada:	f04f 0214 	mov.w	r2, #20
    1ade:	4b1d      	ldr	r3, [pc, #116]	; (1b54 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    1ae0:	d008      	beq.n	1af4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1ae2:	fb02 f308 	mul.w	r3, r2, r8
    1ae6:	f06f 0215 	mvn.w	r2, #21
    1aea:	f84b 2003 	str.w	r2, [fp, r3]
						 dyn_region_areas_num) == -EINVAL) {

		__ASSERT(0, "Marking %u areas for dynamic regions failed\n",
			dyn_region_areas_num);
	}
}
    1aee:	b003      	add	sp, #12
    1af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1af4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    1af8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    1afa:	d0f8      	beq.n	1aee <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1afc:	7819      	ldrb	r1, [r3, #0]
    1afe:	42a1      	cmp	r1, r4
    1b00:	ddf5      	ble.n	1aee <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = mpu_get_rbar() &
    1b02:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = rnr;
    1b06:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
    1b0a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	return MPU->RBAR;
    1b0e:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1b12:	f100 0108 	add.w	r1, r0, #8
    1b16:	7b00      	ldrb	r0, [r0, #12]
    1b18:	f364 0004 	bfi	r0, r4, #0, #5
    1b1c:	7108      	strb	r0, [r1, #4]
	return MPU->RLAR;
    1b1e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1b22:	790c      	ldrb	r4, [r1, #4]
    1b24:	0840      	lsrs	r0, r0, #1
    1b26:	f360 1447 	bfi	r4, r0, #5, #3
    1b2a:	710c      	strb	r4, [r1, #4]
	return MPU->RBAR;
    1b2c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1b30:	f021 011f 	bic.w	r1, r1, #31
    1b34:	6069      	str	r1, [r5, #4]
	return MPU->RLAR;
    1b36:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    1b3a:	f021 011f 	bic.w	r1, r1, #31
    1b3e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1b40:	f108 0801 	add.w	r8, r8, #1
    1b44:	3514      	adds	r5, #20
    1b46:	360c      	adds	r6, #12
    1b48:	e7b3      	b.n	1ab2 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    1b4a:	bf00      	nop
    1b4c:	200007f8 	.word	0x200007f8
    1b50:	e000ed00 	.word	0xe000ed00
    1b54:	20000b00 	.word	0x20000b00

00001b58 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1b58:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1b5a:	4d0e      	ldr	r5, [pc, #56]	; (1b94 <z_arm_mpu_init+0x3c>)
    1b5c:	682c      	ldr	r4, [r5, #0]
    1b5e:	2c08      	cmp	r4, #8
    1b60:	d815      	bhi.n	1b8e <z_arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b62:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    1b64:	f7ff ff88 	bl	1a78 <arm_core_mpu_disable>
	MPU->MAIR0 = mair0;
    1b68:	4b0b      	ldr	r3, [pc, #44]	; (1b98 <z_arm_mpu_init+0x40>)
    1b6a:	4a0c      	ldr	r2, [pc, #48]	; (1b9c <z_arm_mpu_init+0x44>)
    1b6c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b70:	4284      	cmp	r4, r0
    1b72:	d105      	bne.n	1b80 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1b74:	4b0a      	ldr	r3, [pc, #40]	; (1ba0 <z_arm_mpu_init+0x48>)
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1b76:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    1b78:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    1b7a:	f7ff ff71 	bl	1a60 <arm_core_mpu_enable>
}
    1b7e:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1b80:	6869      	ldr	r1, [r5, #4]
    1b82:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    1b86:	f7ff feab 	bl	18e0 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b8a:	3001      	adds	r0, #1
    1b8c:	e7f0      	b.n	1b70 <z_arm_mpu_init+0x18>
		return -1;
    1b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1b92:	e7f4      	b.n	1b7e <z_arm_mpu_init+0x26>
    1b94:	00005640 	.word	0x00005640
    1b98:	e000ed00 	.word	0xe000ed00
    1b9c:	0044ffaa 	.word	0x0044ffaa
    1ba0:	20000b00 	.word	0x20000b00

00001ba4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1ba4:	4b01      	ldr	r3, [pc, #4]	; (1bac <__stdout_hook_install+0x8>)
    1ba6:	6018      	str	r0, [r3, #0]
}
    1ba8:	4770      	bx	lr
    1baa:	bf00      	nop
    1bac:	20000028 	.word	0x20000028

00001bb0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1bb0:	4b08      	ldr	r3, [pc, #32]	; (1bd4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1bb2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1bb4:	1ac3      	subs	r3, r0, r3
{
    1bb6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1bb8:	4907      	ldr	r1, [pc, #28]	; (1bd8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1bba:	109b      	asrs	r3, r3, #2
{
    1bbc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1bbe:	4359      	muls	r1, r3
    1bc0:	2240      	movs	r2, #64	; 0x40
    1bc2:	4806      	ldr	r0, [pc, #24]	; (1bdc <onoff_stop+0x2c>)
    1bc4:	f002 ff2c 	bl	4a20 <stop>
	notify(mgr, res);
    1bc8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1bca:	4601      	mov	r1, r0
	notify(mgr, res);
    1bcc:	4620      	mov	r0, r4
}
    1bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1bd2:	4718      	bx	r3
    1bd4:	20000820 	.word	0x20000820
    1bd8:	b6db6db7 	.word	0xb6db6db7
    1bdc:	00005354 	.word	0x00005354

00001be0 <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1be0:	2340      	movs	r3, #64	; 0x40
{
    1be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1be4:	4c0b      	ldr	r4, [pc, #44]	; (1c14 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1be6:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    1be8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1bea:	460b      	mov	r3, r1
{
    1bec:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1bee:	490a      	ldr	r1, [pc, #40]	; (1c18 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    1bf0:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1bf2:	4361      	muls	r1, r4
{
    1bf4:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1bf6:	4a09      	ldr	r2, [pc, #36]	; (1c1c <onoff_start+0x3c>)
    1bf8:	4809      	ldr	r0, [pc, #36]	; (1c20 <onoff_start+0x40>)
    1bfa:	f002 ff3e 	bl	4a7a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1bfe:	1e01      	subs	r1, r0, #0
    1c00:	da05      	bge.n	1c0e <onoff_start+0x2e>
		notify(mgr, err);
    1c02:	4630      	mov	r0, r6
    1c04:	462b      	mov	r3, r5
	}
}
    1c06:	b002      	add	sp, #8
    1c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1c0c:	4718      	bx	r3
}
    1c0e:	b002      	add	sp, #8
    1c10:	bd70      	pop	{r4, r5, r6, pc}
    1c12:	bf00      	nop
    1c14:	20000820 	.word	0x20000820
    1c18:	b6db6db7 	.word	0xb6db6db7
    1c1c:	00004ae7 	.word	0x00004ae7
    1c20:	00005354 	.word	0x00005354

00001c24 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1c28:	2200      	movs	r2, #0
    1c2a:	2101      	movs	r1, #1
{
    1c2c:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1c2e:	2005      	movs	r0, #5
    1c30:	f7ff fbb8 	bl	13a4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1c34:	4811      	ldr	r0, [pc, #68]	; (1c7c <clk_init+0x58>)
    1c36:	f001 f835 	bl	2ca4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1c3a:	4b11      	ldr	r3, [pc, #68]	; (1c80 <clk_init+0x5c>)
    1c3c:	4298      	cmp	r0, r3
    1c3e:	d119      	bne.n	1c74 <clk_init+0x50>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1c40:	f003 f914 	bl	4e6c <nrfx_clock_enable>
    1c44:	2400      	movs	r4, #0
	return &data->mgr[type];
    1c46:	f04f 091c 	mov.w	r9, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1c4a:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1c4c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 1c84 <clk_init+0x60>
	struct nrf_clock_control_data *data = dev->data;
    1c50:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1c52:	4641      	mov	r1, r8
    1c54:	fb09 5004 	mla	r0, r9, r4, r5
    1c58:	f002 fd73 	bl	4742 <onoff_manager_init>
		if (err < 0) {
    1c5c:	2800      	cmp	r0, #0
    1c5e:	db07      	blt.n	1c70 <clk_init+0x4c>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1c60:	2301      	movs	r3, #1
    1c62:	fb07 5504 	mla	r5, r7, r4, r5
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1c66:	441c      	add	r4, r3
    1c68:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1c6a:	67ab      	str	r3, [r5, #120]	; 0x78
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1c6c:	d1f0      	bne.n	1c50 <clk_init+0x2c>
	}

	return 0;
    1c6e:	2000      	movs	r0, #0
}
    1c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    1c74:	f06f 0004 	mvn.w	r0, #4
    1c78:	e7fa      	b.n	1c70 <clk_init+0x4c>
    1c7a:	bf00      	nop
    1c7c:	00001cbd 	.word	0x00001cbd
    1c80:	0bad0000 	.word	0x0bad0000
    1c84:	00005668 	.word	0x00005668

00001c88 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1c88:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1c8a:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    1c8c:	2200      	movs	r2, #0
static void clkstarted_handle(const struct device *dev,
    1c8e:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1c90:	434b      	muls	r3, r1
    1c92:	4808      	ldr	r0, [pc, #32]	; (1cb4 <clkstarted_handle.constprop.0+0x2c>)
    1c94:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    1c96:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    1c98:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    1c9c:	4418      	add	r0, r3
	sub_data->cb = NULL;
    1c9e:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    1ca0:	f002 feab 	bl	49fa <set_on_state>
	if (callback) {
    1ca4:	b12d      	cbz	r5, 1cb2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1ca6:	4632      	mov	r2, r6
    1ca8:	462b      	mov	r3, r5
}
    1caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1cae:	4802      	ldr	r0, [pc, #8]	; (1cb8 <clkstarted_handle.constprop.0+0x30>)
    1cb0:	4718      	bx	r3
}
    1cb2:	bd70      	pop	{r4, r5, r6, pc}
    1cb4:	20000820 	.word	0x20000820
    1cb8:	00005354 	.word	0x00005354

00001cbc <clock_event_handler>:
	switch (event) {
    1cbc:	2805      	cmp	r0, #5
    1cbe:	d811      	bhi.n	1ce4 <clock_event_handler+0x28>
    1cc0:	e8df f000 	tbb	[pc, r0]
    1cc4:	10100e03 	.word	0x10100e03
    1cc8:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1cca:	4b07      	ldr	r3, [pc, #28]	; (1ce8 <clock_event_handler+0x2c>)
    1ccc:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1cce:	f010 0007 	ands.w	r0, r0, #7
    1cd2:	d107      	bne.n	1ce4 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1cd4:	f7ff bfd8 	b.w	1c88 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1cd8:	2002      	movs	r0, #2
    1cda:	e7fb      	b.n	1cd4 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1cdc:	2003      	movs	r0, #3
    1cde:	e7f9      	b.n	1cd4 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1ce0:	2001      	movs	r0, #1
    1ce2:	e7f7      	b.n	1cd4 <clock_event_handler+0x18>
}
    1ce4:	4770      	bx	lr
    1ce6:	bf00      	nop
    1ce8:	20000820 	.word	0x20000820

00001cec <generic_hfclk_start>:
{
    1cec:	b508      	push	{r3, lr}
	__asm__ volatile(
    1cee:	f04f 0320 	mov.w	r3, #32
    1cf2:	f3ef 8111 	mrs	r1, BASEPRI
    1cf6:	f383 8812 	msr	BASEPRI_MAX, r3
    1cfa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1cfe:	4a12      	ldr	r2, [pc, #72]	; (1d48 <generic_hfclk_start+0x5c>)
    1d00:	6813      	ldr	r3, [r2, #0]
    1d02:	f043 0002 	orr.w	r0, r3, #2
    1d06:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1d08:	07da      	lsls	r2, r3, #31
    1d0a:	d408      	bmi.n	1d1e <generic_hfclk_start+0x32>
	__asm__ volatile(
    1d0c:	f381 8811 	msr	BASEPRI, r1
    1d10:	f3bf 8f6f 	isb	sy
}
    1d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1d18:	2001      	movs	r0, #1
    1d1a:	f003 b8b9 	b.w	4e90 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1d1e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d22:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1d26:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1d2a:	07d3      	lsls	r3, r2, #31
    1d2c:	d5ee      	bpl.n	1d0c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    1d2e:	4807      	ldr	r0, [pc, #28]	; (1d4c <generic_hfclk_start+0x60>)
    1d30:	f002 fe63 	bl	49fa <set_on_state>
    1d34:	f381 8811 	msr	BASEPRI, r1
    1d38:	f3bf 8f6f 	isb	sy
}
    1d3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1d40:	2000      	movs	r0, #0
    1d42:	f7ff bfa1 	b.w	1c88 <clkstarted_handle.constprop.0>
    1d46:	bf00      	nop
    1d48:	200008c0 	.word	0x200008c0
    1d4c:	20000898 	.word	0x20000898

00001d50 <api_blocking_start>:
{
    1d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1d52:	2200      	movs	r2, #0
    1d54:	2301      	movs	r3, #1
    1d56:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1d5a:	466b      	mov	r3, sp
    1d5c:	4a08      	ldr	r2, [pc, #32]	; (1d80 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1d5e:	f8cd d000 	str.w	sp, [sp]
    1d62:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1d66:	f002 feb7 	bl	4ad8 <api_start>
	if (err < 0) {
    1d6a:	2800      	cmp	r0, #0
    1d6c:	db05      	blt.n	1d7a <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1d6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1d72:	2300      	movs	r3, #0
    1d74:	4668      	mov	r0, sp
    1d76:	f001 fe15 	bl	39a4 <z_impl_k_sem_take>
}
    1d7a:	b005      	add	sp, #20
    1d7c:	f85d fb04 	ldr.w	pc, [sp], #4
    1d80:	00004b1d 	.word	0x00004b1d

00001d84 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1d84:	4b07      	ldr	r3, [pc, #28]	; (1da4 <generic_hfclk_stop+0x20>)
    1d86:	e8d3 2fef 	ldaex	r2, [r3]
    1d8a:	f022 0102 	bic.w	r1, r2, #2
    1d8e:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1d92:	2800      	cmp	r0, #0
    1d94:	d1f7      	bne.n	1d86 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1d96:	07d3      	lsls	r3, r2, #31
    1d98:	d402      	bmi.n	1da0 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1d9a:	2001      	movs	r0, #1
    1d9c:	f003 b8d7 	b.w	4f4e <nrfx_clock_stop>
}
    1da0:	4770      	bx	lr
    1da2:	bf00      	nop
    1da4:	200008c0 	.word	0x200008c0

00001da8 <z_nrf_clock_control_lf_on>:
{
    1da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1dac:	2201      	movs	r2, #1
    1dae:	4607      	mov	r7, r0
    1db0:	4937      	ldr	r1, [pc, #220]	; (1e90 <z_nrf_clock_control_lf_on+0xe8>)
    1db2:	e8d1 3fef 	ldaex	r3, [r1]
    1db6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    1dba:	2800      	cmp	r0, #0
    1dbc:	d1f9      	bne.n	1db2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    1dbe:	b933      	cbnz	r3, 1dce <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1dc0:	4934      	ldr	r1, [pc, #208]	; (1e94 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    1dc2:	4835      	ldr	r0, [pc, #212]	; (1e98 <z_nrf_clock_control_lf_on+0xf0>)
    1dc4:	604b      	str	r3, [r1, #4]
    1dc6:	60cb      	str	r3, [r1, #12]
    1dc8:	608a      	str	r2, [r1, #8]
    1dca:	f002 fccd 	bl	4768 <onoff_request>
	switch (start_mode) {
    1dce:	1e7b      	subs	r3, r7, #1
    1dd0:	2b01      	cmp	r3, #1
    1dd2:	d82b      	bhi.n	1e2c <z_nrf_clock_control_lf_on+0x84>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1dd4:	2f01      	cmp	r7, #1
    1dd6:	d107      	bne.n	1de8 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1dd8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1ddc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1de0:	f003 0303 	and.w	r3, r3, #3
    1de4:	2b02      	cmp	r3, #2
    1de6:	d021      	beq.n	1e2c <z_nrf_clock_control_lf_on+0x84>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1de8:	f003 f983 	bl	50f2 <k_is_in_isr>
    1dec:	4605      	mov	r5, r0
    1dee:	b9f8      	cbnz	r0, 1e30 <z_nrf_clock_control_lf_on+0x88>
	return !z_sys_post_kernel;
    1df0:	4b2a      	ldr	r3, [pc, #168]	; (1e9c <z_nrf_clock_control_lf_on+0xf4>)
    1df2:	781b      	ldrb	r3, [r3, #0]
    1df4:	b1e3      	cbz	r3, 1e30 <z_nrf_clock_control_lf_on+0x88>
    p_reg->INTENCLR = mask;
    1df6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1dfa:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    1dfc:	4606      	mov	r6, r0
    1dfe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1e02:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e06:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1ea0 <z_nrf_clock_control_lf_on+0xf8>
    1e0a:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1e0e:	f8d4 2418 	ldr.w	r2, [r4, #1048]	; 0x418
    1e12:	03d2      	lsls	r2, r2, #15
    1e14:	d516      	bpl.n	1e44 <z_nrf_clock_control_lf_on+0x9c>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1e16:	f003 0303 	and.w	r3, r3, #3
    1e1a:	2b02      	cmp	r3, #2
    1e1c:	d001      	beq.n	1e22 <z_nrf_clock_control_lf_on+0x7a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1e1e:	2f01      	cmp	r7, #1
    1e20:	d110      	bne.n	1e44 <z_nrf_clock_control_lf_on+0x9c>
	if (isr_mode) {
    1e22:	b375      	cbz	r5, 1e82 <z_nrf_clock_control_lf_on+0xda>
    1e24:	f386 8811 	msr	BASEPRI, r6
    1e28:	f3bf 8f6f 	isb	sy
}
    1e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
    1e30:	f04f 0320 	mov.w	r3, #32
    1e34:	f3ef 8611 	mrs	r6, BASEPRI
    1e38:	f383 8812 	msr	BASEPRI_MAX, r3
    1e3c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1e40:	2501      	movs	r5, #1
    1e42:	e7de      	b.n	1e02 <z_nrf_clock_control_lf_on+0x5a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1e44:	b1c5      	cbz	r5, 1e78 <z_nrf_clock_control_lf_on+0xd0>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1e46:	4630      	mov	r0, r6
    1e48:	f7ff fa86 	bl	1358 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1e4c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1e50:	b2db      	uxtb	r3, r3
    1e52:	2b01      	cmp	r3, #1
    1e54:	d1d9      	bne.n	1e0a <z_nrf_clock_control_lf_on+0x62>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1e56:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1e5a:	2a00      	cmp	r2, #0
    1e5c:	d0d5      	beq.n	1e0a <z_nrf_clock_control_lf_on+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1e5e:	2200      	movs	r2, #0
    1e60:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1e64:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1e68:	2202      	movs	r2, #2
    1e6a:	f8c4 2518 	str.w	r2, [r4, #1304]	; 0x518
    1e6e:	2220      	movs	r2, #32
    1e70:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1e74:	60a3      	str	r3, [r4, #8]
}
    1e76:	e7c8      	b.n	1e0a <z_nrf_clock_control_lf_on+0x62>
	return z_impl_k_sleep(timeout);
    1e78:	2100      	movs	r1, #0
    1e7a:	2021      	movs	r0, #33	; 0x21
    1e7c:	f002 f882 	bl	3f84 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1e80:	e7e4      	b.n	1e4c <z_nrf_clock_control_lf_on+0xa4>
    p_reg->INTENSET = mask;
    1e82:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1e86:	2202      	movs	r2, #2
    1e88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1e8c:	e7ce      	b.n	1e2c <z_nrf_clock_control_lf_on+0x84>
    1e8e:	bf00      	nop
    1e90:	2000081c 	.word	0x2000081c
    1e94:	2000080c 	.word	0x2000080c
    1e98:	2000083c 	.word	0x2000083c
    1e9c:	20000b03 	.word	0x20000b03
    1ea0:	e000e100 	.word	0xe000e100

00001ea4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1ea4:	b508      	push	{r3, lr}
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1ea6:	4807      	ldr	r0, [pc, #28]	; (1ec4 <uart_console_init+0x20>)
    1ea8:	f003 f8ac 	bl	5004 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    1eac:	b138      	cbz	r0, 1ebe <uart_console_init+0x1a>
	__stdout_hook_install(console_out);
    1eae:	4806      	ldr	r0, [pc, #24]	; (1ec8 <uart_console_init+0x24>)
    1eb0:	f7ff fe78 	bl	1ba4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1eb4:	4804      	ldr	r0, [pc, #16]	; (1ec8 <uart_console_init+0x24>)
    1eb6:	f7fe facf 	bl	458 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    1eba:	2000      	movs	r0, #0
}
    1ebc:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1ebe:	f06f 0012 	mvn.w	r0, #18
    1ec2:	e7fb      	b.n	1ebc <uart_console_init+0x18>
    1ec4:	0000539c 	.word	0x0000539c
    1ec8:	00001ecd 	.word	0x00001ecd

00001ecc <console_out>:
	if ('\n' == c) {
    1ecc:	280a      	cmp	r0, #10
{
    1ece:	b538      	push	{r3, r4, r5, lr}
    1ed0:	4604      	mov	r4, r0
    1ed2:	4d07      	ldr	r5, [pc, #28]	; (1ef0 <console_out+0x24>)
	if ('\n' == c) {
    1ed4:	d104      	bne.n	1ee0 <console_out+0x14>
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1ed6:	68ab      	ldr	r3, [r5, #8]
    1ed8:	210d      	movs	r1, #13
    1eda:	4628      	mov	r0, r5
    1edc:	685b      	ldr	r3, [r3, #4]
    1ede:	4798      	blx	r3
    1ee0:	68ab      	ldr	r3, [r5, #8]
    1ee2:	4803      	ldr	r0, [pc, #12]	; (1ef0 <console_out+0x24>)
    1ee4:	685b      	ldr	r3, [r3, #4]
    1ee6:	b2e1      	uxtb	r1, r4
    1ee8:	4798      	blx	r3
}
    1eea:	4620      	mov	r0, r4
    1eec:	bd38      	pop	{r3, r4, r5, pc}
    1eee:	bf00      	nop
    1ef0:	0000539c 	.word	0x0000539c

00001ef4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    1ef4:	b530      	push	{r4, r5, lr}
	return port->config;
    1ef6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1ef8:	f001 041f 	and.w	r4, r1, #31
    1efc:	7b05      	ldrb	r5, [r0, #12]
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    1efe:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    1f02:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1f04:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1f08:	d105      	bne.n	1f16 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    1f0a:	4620      	mov	r0, r4
    1f0c:	f001 f97a 	bl	3204 <nrfx_gpiote_trigger_disable>

		return 0;
    1f10:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    1f12:	b005      	add	sp, #20
    1f14:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    1f16:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    1f18:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1f1c:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    1f20:	d114      	bne.n	1f4c <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    1f22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1f26:	bf0c      	ite	eq
    1f28:	2304      	moveq	r3, #4
    1f2a:	2305      	movne	r3, #5
    1f2c:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1f30:	2300      	movs	r3, #0
    1f32:	4620      	mov	r0, r4
    1f34:	4619      	mov	r1, r3
    1f36:	aa02      	add	r2, sp, #8
    1f38:	f000 ffa2 	bl	2e80 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1f3c:	4b1f      	ldr	r3, [pc, #124]	; (1fbc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    1f3e:	4298      	cmp	r0, r3
    1f40:	d138      	bne.n	1fb4 <gpio_nrfx_pin_interrupt_configure+0xc0>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1f42:	2101      	movs	r1, #1
    1f44:	4620      	mov	r0, r4
    1f46:	f001 f917 	bl	3178 <nrfx_gpiote_trigger_enable>
	return 0;
    1f4a:	e7e1      	b.n	1f10 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1f4c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    1f50:	d025      	beq.n	1f9e <gpio_nrfx_pin_interrupt_configure+0xaa>
    1f52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    1f56:	bf14      	ite	ne
    1f58:	2301      	movne	r3, #1
    1f5a:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1f5c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1f60:	6883      	ldr	r3, [r0, #8]
    1f62:	40cb      	lsrs	r3, r1
    1f64:	07d9      	lsls	r1, r3, #31
    1f66:	d4e3      	bmi.n	1f30 <gpio_nrfx_pin_interrupt_configure+0x3c>
    1f68:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    1f6c:	d1e0      	bne.n	1f30 <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    1f6e:	4a14      	ldr	r2, [pc, #80]	; (1fc0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    1f70:	4814      	ldr	r0, [pc, #80]	; (1fc4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    1f72:	0961      	lsrs	r1, r4, #5
        case 1: return NRF_P1;
    1f74:	2901      	cmp	r1, #1
    1f76:	bf08      	it	eq
    1f78:	4602      	moveq	r2, r0
    *p_pin = pin_number & 0x1F;
    1f7a:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1f7e:	3380      	adds	r3, #128	; 0x80
    1f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1f84:	07db      	lsls	r3, r3, #31
    1f86:	d4d3      	bmi.n	1f30 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1f88:	f10d 0507 	add.w	r5, sp, #7
    1f8c:	4629      	mov	r1, r5
    1f8e:	4620      	mov	r0, r4
    1f90:	f001 f89e 	bl	30d0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1f94:	4b0c      	ldr	r3, [pc, #48]	; (1fc8 <gpio_nrfx_pin_interrupt_configure+0xd4>)
    1f96:	4298      	cmp	r0, r3
    1f98:	d003      	beq.n	1fa2 <gpio_nrfx_pin_interrupt_configure+0xae>
		trigger_config.p_in_channel = &ch;
    1f9a:	9503      	str	r5, [sp, #12]
    1f9c:	e7c8      	b.n	1f30 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1f9e:	2303      	movs	r3, #3
    1fa0:	e7dc      	b.n	1f5c <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    1fa2:	4628      	mov	r0, r5
    1fa4:	f001 f8e2 	bl	316c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1fa8:	4b04      	ldr	r3, [pc, #16]	; (1fbc <gpio_nrfx_pin_interrupt_configure+0xc8>)
    1faa:	4298      	cmp	r0, r3
    1fac:	d0f5      	beq.n	1f9a <gpio_nrfx_pin_interrupt_configure+0xa6>
				return -ENOMEM;
    1fae:	f06f 000b 	mvn.w	r0, #11
    1fb2:	e7ae      	b.n	1f12 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    1fb4:	f06f 0015 	mvn.w	r0, #21
    1fb8:	e7ab      	b.n	1f12 <gpio_nrfx_pin_interrupt_configure+0x1e>
    1fba:	bf00      	nop
    1fbc:	0bad0000 	.word	0x0bad0000
    1fc0:	50842500 	.word	0x50842500
    1fc4:	50842800 	.word	0x50842800
    1fc8:	0bad0004 	.word	0x0bad0004

00001fcc <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1fcc:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    1fce:	f001 f8bd 	bl	314c <nrfx_gpiote_is_init>
    1fd2:	4604      	mov	r4, r0
    1fd4:	b968      	cbnz	r0, 1ff2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    1fd6:	f001 f891 	bl	30fc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    1fda:	4b08      	ldr	r3, [pc, #32]	; (1ffc <gpio_nrfx_init+0x30>)
    1fdc:	4298      	cmp	r0, r3
    1fde:	d10a      	bne.n	1ff6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    1fe0:	4621      	mov	r1, r4
    1fe2:	4807      	ldr	r0, [pc, #28]	; (2000 <CONFIG_NRF_SPU_RAM_REGION_SIZE>)
    1fe4:	f001 f86e 	bl	30c4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1fe8:	4622      	mov	r2, r4
    1fea:	2105      	movs	r1, #5
    1fec:	200d      	movs	r0, #13
    1fee:	f7ff f9d9 	bl	13a4 <z_arm_irq_priority_set>
		return 0;
    1ff2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    1ff4:	bd10      	pop	{r4, pc}
		return -EIO;
    1ff6:	f06f 0004 	mvn.w	r0, #4
    1ffa:	e7fb      	b.n	1ff4 <gpio_nrfx_init+0x28>
    1ffc:	0bad0000 	.word	0x0bad0000
    2000:	00002005 	.word	0x00002005

00002004 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2004:	0942      	lsrs	r2, r0, #5
{
    2006:	4603      	mov	r3, r0
    2008:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    200a:	d002      	beq.n	2012 <nrfx_gpio_handler+0xe>
    200c:	2a01      	cmp	r2, #1
    200e:	d017      	beq.n	2040 <nrfx_gpio_handler+0x3c>
}
    2010:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2012:	4e0d      	ldr	r6, [pc, #52]	; (2048 <nrfx_gpio_handler+0x44>)
	gpio_fire_callbacks(list, port, BIT(pin));
    2014:	6932      	ldr	r2, [r6, #16]
    2016:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2018:	2900      	cmp	r1, #0
    201a:	d0f9      	beq.n	2010 <nrfx_gpio_handler+0xc>
    201c:	2501      	movs	r5, #1
    *p_pin = pin_number & 0x1F;
    201e:	f003 031f 	and.w	r3, r3, #31
    2022:	680c      	ldr	r4, [r1, #0]
    2024:	409d      	lsls	r5, r3
    2026:	2900      	cmp	r1, #0
    2028:	d0f2      	beq.n	2010 <nrfx_gpio_handler+0xc>
		if (cb->pin_mask & pins) {
    202a:	688a      	ldr	r2, [r1, #8]
    202c:	402a      	ands	r2, r5
    202e:	d002      	beq.n	2036 <nrfx_gpio_handler+0x32>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2030:	4630      	mov	r0, r6
    2032:	684b      	ldr	r3, [r1, #4]
    2034:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2036:	b12c      	cbz	r4, 2044 <nrfx_gpio_handler+0x40>
    2038:	6823      	ldr	r3, [r4, #0]
    203a:	4621      	mov	r1, r4
    203c:	461c      	mov	r4, r3
    203e:	e7f2      	b.n	2026 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2040:	4e02      	ldr	r6, [pc, #8]	; (204c <nrfx_gpio_handler+0x48>)
    2042:	e7e7      	b.n	2014 <nrfx_gpio_handler+0x10>
    2044:	4623      	mov	r3, r4
    2046:	e7f8      	b.n	203a <nrfx_gpio_handler+0x36>
    2048:	00005384 	.word	0x00005384
    204c:	0000536c 	.word	0x0000536c

00002050 <gpio_nrfx_pin_configure>:
{
    2050:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    2054:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2056:	f001 051f 	and.w	r5, r1, #31
    205a:	7b3b      	ldrb	r3, [r7, #12]
{
    205c:	4614      	mov	r4, r2
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    205e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    2062:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2064:	4628      	mov	r0, r5
    2066:	f10d 0103 	add.w	r1, sp, #3
    206a:	f001 f831 	bl	30d0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    206e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2072:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    2074:	d10b      	bne.n	208e <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    2076:	4628      	mov	r0, r5
    2078:	f001 f8ec 	bl	3254 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    207c:	4b3c      	ldr	r3, [pc, #240]	; (2170 <gpio_nrfx_pin_configure+0x120>)
    207e:	4598      	cmp	r8, r3
    2080:	d103      	bne.n	208a <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    2082:	f89d 0003 	ldrb.w	r0, [sp, #3]
    2086:	f001 f86b 	bl	3160 <nrfx_gpiote_channel_free>
		return 0;
    208a:	2000      	movs	r0, #0
    208c:	e00c      	b.n	20a8 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    208e:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2090:	4628      	mov	r0, r5
    2092:	4619      	mov	r1, r3
    2094:	aa02      	add	r2, sp, #8
	nrfx_gpiote_trigger_config_t trigger_config = {
    2096:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    209a:	f000 fef1 	bl	2e80 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    209e:	4b34      	ldr	r3, [pc, #208]	; (2170 <gpio_nrfx_pin_configure+0x120>)
    20a0:	4298      	cmp	r0, r3
    20a2:	d004      	beq.n	20ae <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    20a4:	f06f 0015 	mvn.w	r0, #21
}
    20a8:	b004      	add	sp, #16
    20aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    20ae:	4580      	cmp	r8, r0
    20b0:	d103      	bne.n	20ba <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    20b2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    20b6:	f001 f853 	bl	3160 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    20ba:	03a3      	lsls	r3, r4, #14
    20bc:	d549      	bpl.n	2152 <gpio_nrfx_pin_configure+0x102>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    20be:	f240 3306 	movw	r3, #774	; 0x306
    20c2:	4023      	ands	r3, r4
    20c4:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    20c8:	d019      	beq.n	20fe <gpio_nrfx_pin_configure+0xae>
    20ca:	d80c      	bhi.n	20e6 <gpio_nrfx_pin_configure+0x96>
    20cc:	2b06      	cmp	r3, #6
    20ce:	d017      	beq.n	2100 <gpio_nrfx_pin_configure+0xb0>
    20d0:	d804      	bhi.n	20dc <gpio_nrfx_pin_configure+0x8c>
    20d2:	b1ab      	cbz	r3, 2100 <gpio_nrfx_pin_configure+0xb0>
    20d4:	2b02      	cmp	r3, #2
    20d6:	d1e5      	bne.n	20a4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    20d8:	2304      	movs	r3, #4
    20da:	e011      	b.n	2100 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    20dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    20e0:	d1e0      	bne.n	20a4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    20e2:	2301      	movs	r3, #1
    20e4:	e00c      	b.n	2100 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    20e6:	f240 2202 	movw	r2, #514	; 0x202
    20ea:	4293      	cmp	r3, r2
    20ec:	d026      	beq.n	213c <gpio_nrfx_pin_configure+0xec>
    20ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    20f2:	d025      	beq.n	2140 <gpio_nrfx_pin_configure+0xf0>
    20f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    20f8:	d1d4      	bne.n	20a4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    20fa:	2302      	movs	r3, #2
    20fc:	e000      	b.n	2100 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    20fe:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    2100:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2104:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2108:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    210c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    210e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLUP;
    2112:	bf4c      	ite	mi
    2114:	2303      	movmi	r3, #3
	} else if (flags & GPIO_PULL_DOWN) {
    2116:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    211a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    211c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2120:	d510      	bpl.n	2144 <gpio_nrfx_pin_configure+0xf4>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2122:	2301      	movs	r3, #1
    2124:	687a      	ldr	r2, [r7, #4]
    2126:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    2128:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    212a:	2200      	movs	r2, #0
    212c:	4628      	mov	r0, r5
    212e:	a901      	add	r1, sp, #4
    2130:	f000 ff54 	bl	2fdc <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2134:	4b0e      	ldr	r3, [pc, #56]	; (2170 <gpio_nrfx_pin_configure+0x120>)
    2136:	4298      	cmp	r0, r3
    2138:	d0a7      	beq.n	208a <gpio_nrfx_pin_configure+0x3a>
    213a:	e7b3      	b.n	20a4 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    213c:	2305      	movs	r3, #5
    213e:	e7df      	b.n	2100 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2140:	2303      	movs	r3, #3
    2142:	e7dd      	b.n	2100 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2144:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2146:	bf41      	itttt	mi
    2148:	2301      	movmi	r3, #1
    214a:	687a      	ldrmi	r2, [r7, #4]
    214c:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    214e:	60d3      	strmi	r3, [r2, #12]
}
    2150:	e7eb      	b.n	212a <gpio_nrfx_pin_configure+0xda>
	if (flags & GPIO_PULL_UP) {
    2152:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2154:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    2158:	bf4c      	ite	mi
    215a:	2403      	movmi	r4, #3
	} else if (flags & GPIO_PULL_DOWN) {
    215c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    2160:	461a      	mov	r2, r3
    2162:	4628      	mov	r0, r5
    2164:	a901      	add	r1, sp, #4
	nrfx_gpiote_input_config_t input_config = {
    2166:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    216a:	f000 fe89 	bl	2e80 <nrfx_gpiote_input_configure>
    216e:	e7e1      	b.n	2134 <gpio_nrfx_pin_configure+0xe4>
    2170:	0bad0000 	.word	0x0bad0000

00002174 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2174:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2176:	794b      	ldrb	r3, [r1, #5]
    2178:	2b01      	cmp	r3, #1
    217a:	d029      	beq.n	21d0 <uarte_nrfx_configure+0x5c>
    217c:	2b03      	cmp	r3, #3
    217e:	d124      	bne.n	21ca <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    2180:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2182:	798b      	ldrb	r3, [r1, #6]
    2184:	2b03      	cmp	r3, #3
    2186:	d120      	bne.n	21ca <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2188:	79ce      	ldrb	r6, [r1, #7]
    218a:	b10e      	cbz	r6, 2190 <uarte_nrfx_configure+0x1c>
    218c:	2e01      	cmp	r6, #1
    218e:	d11c      	bne.n	21ca <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2190:	790a      	ldrb	r2, [r1, #4]
    2192:	2a01      	cmp	r2, #1
    2194:	d01e      	beq.n	21d4 <uarte_nrfx_configure+0x60>
    2196:	2a02      	cmp	r2, #2
    2198:	d020      	beq.n	21dc <uarte_nrfx_configure+0x68>
    219a:	b9b2      	cbnz	r2, 21ca <uarte_nrfx_configure+0x56>
    219c:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    219e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    21a0:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    21a2:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    21a6:	f8d5 c000 	ldr.w	ip, [r5]
	switch (baudrate) {
    21aa:	d06e      	beq.n	228a <uarte_nrfx_configure+0x116>
    21ac:	d833      	bhi.n	2216 <uarte_nrfx_configure+0xa2>
    21ae:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    21b2:	d06d      	beq.n	2290 <uarte_nrfx_configure+0x11c>
    21b4:	d81c      	bhi.n	21f0 <uarte_nrfx_configure+0x7c>
    21b6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    21ba:	d06b      	beq.n	2294 <uarte_nrfx_configure+0x120>
    21bc:	d810      	bhi.n	21e0 <uarte_nrfx_configure+0x6c>
    21be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    21c2:	d06a      	beq.n	229a <uarte_nrfx_configure+0x126>
    21c4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    21c8:	d06a      	beq.n	22a0 <uarte_nrfx_configure+0x12c>
		return -ENOTSUP;
    21ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
    21ce:	e05b      	b.n	2288 <uarte_nrfx_configure+0x114>
	switch (cfg->stop_bits) {
    21d0:	2700      	movs	r7, #0
    21d2:	e7d6      	b.n	2182 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    21d4:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    21d8:	220e      	movs	r2, #14
    21da:	e7e0      	b.n	219e <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    21dc:	2400      	movs	r4, #0
    21de:	e7fb      	b.n	21d8 <uarte_nrfx_configure+0x64>
	switch (baudrate) {
    21e0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    21e4:	d05f      	beq.n	22a6 <uarte_nrfx_configure+0x132>
    21e6:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    21ea:	d1ee      	bne.n	21ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    21ec:	4b38      	ldr	r3, [pc, #224]	; (22d0 <uarte_nrfx_configure+0x15c>)
    21ee:	e03c      	b.n	226a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    21f0:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    21f4:	d05a      	beq.n	22ac <uarte_nrfx_configure+0x138>
    21f6:	d807      	bhi.n	2208 <uarte_nrfx_configure+0x94>
    21f8:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    21fc:	d058      	beq.n	22b0 <uarte_nrfx_configure+0x13c>
    21fe:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2202:	d1e2      	bne.n	21ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2204:	4b33      	ldr	r3, [pc, #204]	; (22d4 <uarte_nrfx_configure+0x160>)
    2206:	e030      	b.n	226a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2208:	f647 2512 	movw	r5, #31250	; 0x7a12
    220c:	42ab      	cmp	r3, r5
    220e:	d1dc      	bne.n	21ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2210:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2214:	e029      	b.n	226a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2216:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    221a:	d04b      	beq.n	22b4 <uarte_nrfx_configure+0x140>
    221c:	d813      	bhi.n	2246 <uarte_nrfx_configure+0xd2>
    221e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2222:	d04a      	beq.n	22ba <uarte_nrfx_configure+0x146>
    2224:	d809      	bhi.n	223a <uarte_nrfx_configure+0xc6>
    2226:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    222a:	42ab      	cmp	r3, r5
    222c:	d047      	beq.n	22be <uarte_nrfx_configure+0x14a>
    222e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2232:	d1ca      	bne.n	21ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2234:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2238:	e017      	b.n	226a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    223a:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    223e:	d1c4      	bne.n	21ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2240:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2244:	e011      	b.n	226a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2246:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    224a:	d03b      	beq.n	22c4 <uarte_nrfx_configure+0x150>
    224c:	d808      	bhi.n	2260 <uarte_nrfx_configure+0xec>
    224e:	4d22      	ldr	r5, [pc, #136]	; (22d8 <uarte_nrfx_configure+0x164>)
    2250:	42ab      	cmp	r3, r5
    2252:	d03a      	beq.n	22ca <uarte_nrfx_configure+0x156>
    2254:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2258:	d1b7      	bne.n	21ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    225a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    225e:	e004      	b.n	226a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    2260:	4d1e      	ldr	r5, [pc, #120]	; (22dc <uarte_nrfx_configure+0x168>)
    2262:	42ab      	cmp	r3, r5
    2264:	d1b1      	bne.n	21ca <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2266:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    226a:	6905      	ldr	r5, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    226c:	f8cc 3524 	str.w	r3, [ip, #1316]	; 0x524
	return config->uarte_regs;
    2270:	6843      	ldr	r3, [r0, #4]
                    | (uint32_t)p_cfg->stop
    2272:	433a      	orrs	r2, r7
    2274:	681b      	ldr	r3, [r3, #0]
                    | (uint32_t)p_cfg->hwfc;
    2276:	4334      	orrs	r4, r6
    2278:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    227a:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    227e:	1d2b      	adds	r3, r5, #4
    2280:	c903      	ldmia	r1, {r0, r1}
    2282:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2286:	2000      	movs	r0, #0
}
    2288:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    228a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    228e:	e7ec      	b.n	226a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2290:	4b13      	ldr	r3, [pc, #76]	; (22e0 <uarte_nrfx_configure+0x16c>)
    2292:	e7ea      	b.n	226a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2294:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2298:	e7e7      	b.n	226a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = 0x00014000;
    229a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    229e:	e7e4      	b.n	226a <uarte_nrfx_configure+0xf6>
	switch (baudrate) {
    22a0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    22a4:	e7e1      	b.n	226a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    22a6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    22aa:	e7de      	b.n	226a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    22ac:	4b0d      	ldr	r3, [pc, #52]	; (22e4 <uarte_nrfx_configure+0x170>)
    22ae:	e7dc      	b.n	226a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    22b0:	4b0d      	ldr	r3, [pc, #52]	; (22e8 <uarte_nrfx_configure+0x174>)
    22b2:	e7da      	b.n	226a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    22b4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    22b8:	e7d7      	b.n	226a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    22ba:	4b0c      	ldr	r3, [pc, #48]	; (22ec <uarte_nrfx_configure+0x178>)
    22bc:	e7d5      	b.n	226a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    22be:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    22c2:	e7d2      	b.n	226a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    22c4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    22c8:	e7cf      	b.n	226a <uarte_nrfx_configure+0xf6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    22ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    22ce:	e7cc      	b.n	226a <uarte_nrfx_configure+0xf6>
    22d0:	0013b000 	.word	0x0013b000
    22d4:	004ea000 	.word	0x004ea000
    22d8:	0003d090 	.word	0x0003d090
    22dc:	000f4240 	.word	0x000f4240
    22e0:	00275000 	.word	0x00275000
    22e4:	0075c000 	.word	0x0075c000
    22e8:	003af000 	.word	0x003af000
    22ec:	013a9000 	.word	0x013a9000

000022f0 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    22f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    22f4:	4680      	mov	r8, r0
    22f6:	2200      	movs	r2, #0
    22f8:	2101      	movs	r1, #1
    22fa:	2008      	movs	r0, #8
    22fc:	f7ff f852 	bl	13a4 <z_arm_irq_priority_set>
    2300:	2008      	movs	r0, #8
    2302:	f7ff f833 	bl	136c <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2306:	2100      	movs	r1, #0
	const struct uarte_nrfx_config *config = dev->config;
    2308:	f8d8 7004 	ldr.w	r7, [r8, #4]
	struct uarte_nrfx_data *data = dev->data;
    230c:	f8d8 6010 	ldr.w	r6, [r8, #16]
	return config->uarte_regs;
    2310:	683c      	ldr	r4, [r7, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2312:	aa01      	add	r2, sp, #4
    2314:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
	data->dev = dev;
    2318:	f8c6 8000 	str.w	r8, [r6]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    231c:	f8d7 900c 	ldr.w	r9, [r7, #12]
    2320:	4648      	mov	r0, r9
    2322:	f002 fcb8 	bl	4c96 <pinctrl_lookup_state>
	if (ret < 0) {
    2326:	1e05      	subs	r5, r0, #0
    2328:	db4d      	blt.n	23c6 <uarte_0_init+0xd6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    232a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    232c:	f8d9 2000 	ldr.w	r2, [r9]
    2330:	7919      	ldrb	r1, [r3, #4]
    2332:	6818      	ldr	r0, [r3, #0]
    2334:	f000 fae8 	bl	2908 <pinctrl_configure_pins>
	if (err < 0) {
    2338:	1e05      	subs	r5, r0, #0
    233a:	db44      	blt.n	23c6 <uarte_0_init+0xd6>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    233c:	4640      	mov	r0, r8
    233e:	1d31      	adds	r1, r6, #4
    2340:	f7ff ff18 	bl	2174 <uarte_nrfx_configure>
	if (err) {
    2344:	4605      	mov	r5, r0
    2346:	2800      	cmp	r0, #0
    2348:	d13d      	bne.n	23c6 <uarte_0_init+0xd6>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    234a:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    234c:	0799      	lsls	r1, r3, #30
    234e:	d513      	bpl.n	2378 <uarte_0_init+0x88>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2350:	f106 0018 	add.w	r0, r6, #24
    2354:	f000 fd0e 	bl	2d74 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2358:	4b1e      	ldr	r3, [pc, #120]	; (23d4 <uarte_0_init+0xe4>)
    235a:	4298      	cmp	r0, r3
    235c:	d137      	bne.n	23ce <uarte_0_init+0xde>
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    235e:	7e33      	ldrb	r3, [r6, #24]
    2360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2364:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2368:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    236c:	2301      	movs	r3, #1
    236e:	7e32      	ldrb	r2, [r6, #24]
    2370:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    2372:	4a19      	ldr	r2, [pc, #100]	; (23d8 <uarte_0_init+0xe8>)
    2374:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2378:	2308      	movs	r3, #8
    237a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    237e:	7a3b      	ldrb	r3, [r7, #8]
    2380:	b953      	cbnz	r3, 2398 <uarte_0_init+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2382:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2386:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    238a:	6973      	ldr	r3, [r6, #20]
    238c:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2390:	2301      	movs	r3, #1
    2392:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2396:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    2398:	687b      	ldr	r3, [r7, #4]
    239a:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    239c:	bf5c      	itt	pl
    239e:	f44f 7380 	movpl.w	r3, #256	; 0x100
    23a2:	f8c4 3304 	strpl.w	r3, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    23a6:	687b      	ldr	r3, [r7, #4]
    23a8:	06db      	lsls	r3, r3, #27
    23aa:	bf44      	itt	mi
    23ac:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    23b0:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    23b4:	6933      	ldr	r3, [r6, #16]
    23b6:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    23ba:	2300      	movs	r3, #0
    23bc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    23c0:	2301      	movs	r3, #1
    23c2:	60a3      	str	r3, [r4, #8]
    23c4:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    23c6:	4628      	mov	r0, r5
    23c8:	b003      	add	sp, #12
    23ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    23ce:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    23d2:	e7f8      	b.n	23c6 <uarte_0_init+0xd6>
    23d4:	0bad0000 	.word	0x0bad0000
    23d8:	50017000 	.word	0x50017000

000023dc <uarte_nrfx_poll_out>:
{
    23dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23de:	4604      	mov	r4, r0
    23e0:	460d      	mov	r5, r1
	struct uarte_nrfx_data *data = dev->data;
    23e2:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    23e4:	f002 fe85 	bl	50f2 <k_is_in_isr>
    23e8:	b9b0      	cbnz	r0, 2418 <uarte_nrfx_poll_out+0x3c>
	return !z_sys_post_kernel;
    23ea:	4b2e      	ldr	r3, [pc, #184]	; (24a4 <uarte_nrfx_poll_out+0xc8>)
    23ec:	781b      	ldrb	r3, [r3, #0]
    23ee:	b19b      	cbz	r3, 2418 <uarte_nrfx_poll_out+0x3c>
{
    23f0:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    23f2:	6860      	ldr	r0, [r4, #4]
    23f4:	f002 fc05 	bl	4c02 <is_tx_ready.isra.0>
    23f8:	bb00      	cbnz	r0, 243c <uarte_nrfx_poll_out+0x60>
    23fa:	2001      	movs	r0, #1
    23fc:	f002 fc71 	bl	4ce2 <nrfx_busy_wait>
    2400:	3e01      	subs	r6, #1
    2402:	d1f6      	bne.n	23f2 <uarte_nrfx_poll_out+0x16>
    2404:	2100      	movs	r1, #0
    2406:	2021      	movs	r0, #33	; 0x21
    2408:	f001 fdbc 	bl	3f84 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    240c:	e7f0      	b.n	23f0 <uarte_nrfx_poll_out+0x14>
	__asm__ volatile(
    240e:	f386 8811 	msr	BASEPRI, r6
    2412:	f3bf 8f6f 	isb	sy
}
    2416:	e7f5      	b.n	2404 <uarte_nrfx_poll_out+0x28>
	__asm__ volatile(
    2418:	f04f 0320 	mov.w	r3, #32
    241c:	f3ef 8611 	mrs	r6, BASEPRI
    2420:	f383 8812 	msr	BASEPRI_MAX, r3
    2424:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2428:	6860      	ldr	r0, [r4, #4]
    242a:	4631      	mov	r1, r6
    242c:	f002 fbe9 	bl	4c02 <is_tx_ready.isra.0>
    2430:	b990      	cbnz	r0, 2458 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    2432:	f386 8811 	msr	BASEPRI, r6
    2436:	f3bf 8f6f 	isb	sy
}
    243a:	e7ed      	b.n	2418 <uarte_nrfx_poll_out+0x3c>
	__asm__ volatile(
    243c:	f04f 0320 	mov.w	r3, #32
    2440:	f3ef 8611 	mrs	r6, BASEPRI
    2444:	f383 8812 	msr	BASEPRI_MAX, r3
    2448:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    244c:	6860      	ldr	r0, [r4, #4]
    244e:	4631      	mov	r1, r6
    2450:	f002 fbd7 	bl	4c02 <is_tx_ready.isra.0>
    2454:	2800      	cmp	r0, #0
    2456:	d0da      	beq.n	240e <uarte_nrfx_poll_out+0x32>
	*data->char_out = c;
    2458:	693b      	ldr	r3, [r7, #16]
    245a:	701d      	strb	r5, [r3, #0]
	const struct uarte_nrfx_config *config = dev->config;
    245c:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    245e:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    2460:	6813      	ldr	r3, [r2, #0]
    2462:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2466:	2001      	movs	r0, #1
    2468:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    246c:	2000      	movs	r0, #0
    246e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    2472:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
    2476:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    247a:	6852      	ldr	r2, [r2, #4]
    247c:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    2480:	06d2      	lsls	r2, r2, #27
    2482:	d508      	bpl.n	2496 <uarte_nrfx_poll_out+0xba>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2484:	2008      	movs	r0, #8
	return config->uarte_regs;
    2486:	6862      	ldr	r2, [r4, #4]
    2488:	6812      	ldr	r2, [r2, #0]
    248a:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_reg->INTENSET = mask;
    248e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    2492:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2496:	2201      	movs	r2, #1
    2498:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    249a:	f381 8811 	msr	BASEPRI, r1
    249e:	f3bf 8f6f 	isb	sy
}
    24a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24a4:	20000b03 	.word	0x20000b03

000024a8 <compare_int_lock>:
#endif
}

static bool compare_int_lock(int32_t chan)
{
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    24a8:	2301      	movs	r3, #1
    24aa:	4083      	lsls	r3, r0
{
    24ac:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    24ae:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    24b0:	4a0b      	ldr	r2, [pc, #44]	; (24e0 <compare_int_lock+0x38>)
    24b2:	e8d2 1fef 	ldaex	r1, [r2]
    24b6:	ea01 0504 	and.w	r5, r1, r4
    24ba:	e8c2 5fe6 	stlex	r6, r5, [r2]
    24be:	2e00      	cmp	r6, #0
    24c0:	d1f7      	bne.n	24b2 <compare_int_lock+0xa>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    24c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    24c6:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    24c8:	4806      	ldr	r0, [pc, #24]	; (24e4 <compare_int_lock+0x3c>)
    24ca:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    24ce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    24d2:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    24d6:	420b      	tst	r3, r1
}
    24d8:	bf14      	ite	ne
    24da:	2001      	movne	r0, #1
    24dc:	2000      	moveq	r0, #0
    24de:	bd70      	pop	{r4, r5, r6, pc}
    24e0:	200008e0 	.word	0x200008e0
    24e4:	50015000 	.word	0x50015000

000024e8 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    24e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    24ea:	491b      	ldr	r1, [pc, #108]	; (2558 <sys_clock_timeout_handler+0x70>)
{
    24ec:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    24ee:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    24f2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    24f4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    24f8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    24fc:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    24fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2502:	d30f      	bcc.n	2524 <sys_clock_timeout_handler+0x3c>
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2504:	f001 fea4 	bl	4250 <sys_clock_announce>
    return p_reg->CC[ch];
    2508:	00a3      	lsls	r3, r4, #2
    250a:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    250e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2512:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2516:	4295      	cmp	r5, r2
    2518:	d11d      	bne.n	2556 <sys_clock_timeout_handler+0x6e>
    p_reg->CC[ch] = cc_val;
    251a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    251e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
}
    2522:	e012      	b.n	254a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2524:	4b0d      	ldr	r3, [pc, #52]	; (255c <sys_clock_timeout_handler+0x74>)
    2526:	681b      	ldr	r3, [r3, #0]
    2528:	0a1a      	lsrs	r2, r3, #8
    252a:	061b      	lsls	r3, r3, #24
    252c:	195e      	adds	r6, r3, r5
    252e:	4b0c      	ldr	r3, [pc, #48]	; (2560 <sys_clock_timeout_handler+0x78>)
    2530:	f142 0700 	adc.w	r7, r2, #0
    2534:	e9c3 6700 	strd	r6, r7, [r3]
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2538:	f001 fe8a 	bl	4250 <sys_clock_announce>
    return p_reg->CC[ch];
    253c:	4a09      	ldr	r2, [pc, #36]	; (2564 <sys_clock_timeout_handler+0x7c>)
    253e:	f504 73a8 	add.w	r3, r4, #336	; 0x150
    2542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (cc_value == get_comparator(chan)) {
    2546:	429d      	cmp	r5, r3
    2548:	d105      	bne.n	2556 <sys_clock_timeout_handler+0x6e>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    254a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    254e:	4a05      	ldr	r2, [pc, #20]	; (2564 <sys_clock_timeout_handler+0x7c>)
    2550:	40a3      	lsls	r3, r4
    2552:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
		if (!anchor_updated) {
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2558:	200001a0 	.word	0x200001a0
    255c:	200008e4 	.word	0x200008e4
    2560:	200001a8 	.word	0x200001a8
    2564:	50015000 	.word	0x50015000

00002568 <compare_int_unlock>:
	if (key) {
    2568:	b1d9      	cbz	r1, 25a2 <compare_int_unlock+0x3a>
		atomic_or(&int_mask, BIT(chan));
    256a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    256c:	4a0d      	ldr	r2, [pc, #52]	; (25a4 <compare_int_unlock+0x3c>)
    256e:	4083      	lsls	r3, r0
    2570:	e8d2 cfef 	ldaex	ip, [r2]
    2574:	ea4c 0c03 	orr.w	ip, ip, r3
    2578:	e8c2 cfe1 	stlex	r1, ip, [r2]
    257c:	2900      	cmp	r1, #0
    257e:	d1f7      	bne.n	2570 <compare_int_unlock+0x8>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->INTENSET = mask;
    2584:	4a08      	ldr	r2, [pc, #32]	; (25a8 <compare_int_unlock+0x40>)
    2586:	4083      	lsls	r3, r0
    2588:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    258c:	4b07      	ldr	r3, [pc, #28]	; (25ac <compare_int_unlock+0x44>)
    258e:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2592:	40c3      	lsrs	r3, r0
    2594:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2596:	bf42      	ittt	mi
    2598:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
    259c:	4b04      	ldrmi	r3, [pc, #16]	; (25b0 <compare_int_unlock+0x48>)
    259e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    25a2:	4770      	bx	lr
    25a4:	200008e0 	.word	0x200008e0
    25a8:	50015000 	.word	0x50015000
    25ac:	200008dc 	.word	0x200008dc
    25b0:	e000e100 	.word	0xe000e100

000025b4 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    25b4:	4b0d      	ldr	r3, [pc, #52]	; (25ec <z_nrf_rtc_timer_read+0x38>)
    25b6:	6818      	ldr	r0, [r3, #0]
    25b8:	0a01      	lsrs	r1, r0, #8
    25ba:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    25bc:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    25c0:	4b0b      	ldr	r3, [pc, #44]	; (25f0 <z_nrf_rtc_timer_read+0x3c>)
    25c2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    25c6:	1818      	adds	r0, r3, r0
    25c8:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    25cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    25d0:	d20a      	bcs.n	25e8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    25d2:	4b08      	ldr	r3, [pc, #32]	; (25f4 <z_nrf_rtc_timer_read+0x40>)
    25d4:	e9d3 2300 	ldrd	r2, r3, [r3]
    25d8:	4290      	cmp	r0, r2
    25da:	eb71 0303 	sbcs.w	r3, r1, r3
    25de:	d203      	bcs.n	25e8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    25e0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    25e4:	f141 0100 	adc.w	r1, r1, #0
}
    25e8:	4770      	bx	lr
    25ea:	bf00      	nop
    25ec:	200008e4 	.word	0x200008e4
    25f0:	50015000 	.word	0x50015000
    25f4:	200001a8 	.word	0x200001a8

000025f8 <compare_set>:
{
    25f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25fc:	4614      	mov	r4, r2
    25fe:	461d      	mov	r5, r3
    2600:	4607      	mov	r7, r0
	key = compare_int_lock(chan);
    2602:	f7ff ff51 	bl	24a8 <compare_int_lock>
    2606:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2608:	f7ff ffd4 	bl	25b4 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    260c:	42a0      	cmp	r0, r4
    260e:	eb71 0305 	sbcs.w	r3, r1, r5
    2612:	d27a      	bcs.n	270a <compare_set+0x112>
		if (target_time - curr_time > COUNTER_SPAN) {
    2614:	4b44      	ldr	r3, [pc, #272]	; (2728 <compare_set+0x130>)
    2616:	1a20      	subs	r0, r4, r0
    2618:	eb65 0101 	sbc.w	r1, r5, r1
    261c:	4298      	cmp	r0, r3
    261e:	f171 0100 	sbcs.w	r1, r1, #0
    2622:	d27d      	bcs.n	2720 <compare_set+0x128>
		if (target_time != cc_data[chan].target_time) {
    2624:	4b41      	ldr	r3, [pc, #260]	; (272c <compare_set+0x134>)
    2626:	eb03 1307 	add.w	r3, r3, r7, lsl #4
    262a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    262e:	429d      	cmp	r5, r3
    2630:	bf08      	it	eq
    2632:	4294      	cmpeq	r4, r2
    2634:	d054      	beq.n	26e0 <compare_set+0xe8>
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	return absolute_time & COUNTER_MAX;
    263a:	f024 4b7f 	bic.w	fp, r4, #4278190080	; 0xff000000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    263e:	465e      	mov	r6, fp
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2640:	2100      	movs	r1, #0
    2642:	ea4f 0987 	mov.w	r9, r7, lsl #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2646:	f107 0850 	add.w	r8, r7, #80	; 0x50
    264a:	f109 2950 	add.w	r9, r9, #1342197760	; 0x50005000
    264e:	ea4f 0888 	mov.w	r8, r8, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2652:	40bb      	lsls	r3, r7
    2654:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
    2658:	fa1f f888 	uxth.w	r8, r8
    265c:	f108 2850 	add.w	r8, r8, #1342197760	; 0x50005000
    2660:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    2662:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    2666:	4b32      	ldr	r3, [pc, #200]	; (2730 <compare_set+0x138>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2668:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
     return p_reg->COUNTER;
    266c:	f8d3 a504 	ldr.w	sl, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    2670:	eba0 000a 	sub.w	r0, r0, sl
    2674:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2678:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    267c:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    267e:	f8c9 2540 	str.w	r2, [r9, #1344]	; 0x540
    2682:	d104      	bne.n	268e <compare_set+0x96>
	z_impl_k_busy_wait(usec_to_wait);
    2684:	2013      	movs	r0, #19
    2686:	f002 fe34 	bl	52f2 <z_impl_k_busy_wait>
    268a:	2100      	movs	r1, #0
    268c:	4b28      	ldr	r3, [pc, #160]	; (2730 <compare_set+0x138>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    268e:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    2692:	eba6 000c 	sub.w	r0, r6, ip
    2696:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    269a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    269e:	bf88      	it	hi
    26a0:	4666      	movhi	r6, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    26a2:	f8c8 1000 	str.w	r1, [r8]
    p_reg->EVTENSET = mask;
    26a6:	9a01      	ldr	r2, [sp, #4]
    26a8:	f8d8 0000 	ldr.w	r0, [r8]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    26ac:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    26b0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    26b4:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    26b8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	} while ((now2 != now) &&
    26bc:	4582      	cmp	sl, r0
    26be:	d006      	beq.n	26ce <compare_set+0xd6>
	return (a - b) & COUNTER_MAX;
    26c0:	1a30      	subs	r0, r6, r0
    26c2:	3802      	subs	r0, #2
    26c4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    26c8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    26cc:	d81b      	bhi.n	2706 <compare_set+0x10e>
	return (a - b) & COUNTER_MAX;
    26ce:	eba6 060b 	sub.w	r6, r6, fp
    26d2:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    26d6:	1936      	adds	r6, r6, r4
    26d8:	f145 0300 	adc.w	r3, r5, #0
    26dc:	4634      	mov	r4, r6
    26de:	461d      	mov	r5, r3
	cc_data[chan].target_time = target_time;
    26e0:	4912      	ldr	r1, [pc, #72]	; (272c <compare_set+0x134>)
	cc_data[chan].callback = handler;
    26e2:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    26e4:	eb01 1207 	add.w	r2, r1, r7, lsl #4
    26e8:	e9c2 4502 	strd	r4, r5, [r2, #8]
	return ret;
    26ec:	2400      	movs	r4, #0
	cc_data[chan].target_time = target_time;
    26ee:	013b      	lsls	r3, r7, #4
	cc_data[chan].callback = handler;
    26f0:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    26f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    26f4:	6053      	str	r3, [r2, #4]
	compare_int_unlock(chan, key);
    26f6:	4638      	mov	r0, r7
    26f8:	9900      	ldr	r1, [sp, #0]
    26fa:	f7ff ff35 	bl	2568 <compare_int_unlock>
}
    26fe:	4620      	mov	r0, r4
    2700:	b003      	add	sp, #12
    2702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2706:	4630      	mov	r0, r6
    2708:	e7b0      	b.n	266c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    270a:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    270c:	4a09      	ldr	r2, [pc, #36]	; (2734 <compare_set+0x13c>)
    270e:	40bb      	lsls	r3, r7
    2710:	e8d2 0fef 	ldaex	r0, [r2]
    2714:	4318      	orrs	r0, r3
    2716:	e8c2 0fe1 	stlex	r1, r0, [r2]
    271a:	2900      	cmp	r1, #0
    271c:	d0e0      	beq.n	26e0 <compare_set+0xe8>
    271e:	e7f7      	b.n	2710 <compare_set+0x118>
			return -EINVAL;
    2720:	f06f 0415 	mvn.w	r4, #21
    2724:	e7e7      	b.n	26f6 <compare_set+0xfe>
    2726:	bf00      	nop
    2728:	01000001 	.word	0x01000001
    272c:	20000190 	.word	0x20000190
    2730:	50015000 	.word	0x50015000
    2734:	200008dc 	.word	0x200008dc

00002738 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2738:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->PRESCALER = val;
    273a:	2400      	movs	r4, #0
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    273c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2740:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2744:	4d16      	ldr	r5, [pc, #88]	; (27a0 <sys_clock_driver_init+0x68>)
    2746:	4b17      	ldr	r3, [pc, #92]	; (27a4 <sys_clock_driver_init+0x6c>)
    2748:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    274c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2754:	2602      	movs	r6, #2
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2756:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    275a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    275e:	4b12      	ldr	r3, [pc, #72]	; (27a8 <sys_clock_driver_init+0x70>)

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2760:	2101      	movs	r1, #1
    2762:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    2766:	2015      	movs	r0, #21
    2768:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    276c:	4622      	mov	r2, r4
    276e:	f7fe fe19 	bl	13a4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2772:	2015      	movs	r0, #21
    2774:	f7fe fdfa 	bl	136c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2778:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    277a:	4a0c      	ldr	r2, [pc, #48]	; (27ac <sys_clock_driver_init+0x74>)
    277c:	60ab      	str	r3, [r5, #8]
    277e:	602b      	str	r3, [r5, #0]
    2780:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2782:	4b0b      	ldr	r3, [pc, #44]	; (27b0 <sys_clock_driver_init+0x78>)
    2784:	4a0b      	ldr	r2, [pc, #44]	; (27b4 <sys_clock_driver_init+0x7c>)
    2786:	9300      	str	r3, [sp, #0]
    2788:	4620      	mov	r0, r4
    278a:	2300      	movs	r3, #0
    278c:	9401      	str	r4, [sp, #4]
    278e:	f7ff ff33 	bl	25f8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2792:	4630      	mov	r0, r6
    2794:	f7ff fb08 	bl	1da8 <z_nrf_clock_control_lf_on>

	return 0;
}
    2798:	4620      	mov	r0, r4
    279a:	b002      	add	sp, #8
    279c:	bd70      	pop	{r4, r5, r6, pc}
    279e:	bf00      	nop
    27a0:	50015000 	.word	0x50015000
    27a4:	20000190 	.word	0x20000190
    27a8:	e000e100 	.word	0xe000e100
    27ac:	200008e0 	.word	0x200008e0
    27b0:	000024e9 	.word	0x000024e9
    27b4:	007fffff 	.word	0x007fffff

000027b8 <rtc_nrf_isr>:
{
    27b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    27bc:	4b31      	ldr	r3, [pc, #196]	; (2884 <rtc_nrf_isr+0xcc>)
    27be:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    27c2:	0792      	lsls	r2, r2, #30
    27c4:	d50b      	bpl.n	27de <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    27c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    27ca:	b142      	cbz	r2, 27de <rtc_nrf_isr+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    27cc:	2200      	movs	r2, #0
    27ce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		overflow_cnt++;
    27d2:	4a2d      	ldr	r2, [pc, #180]	; (2888 <rtc_nrf_isr+0xd0>)
    27d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    27d8:	6813      	ldr	r3, [r2, #0]
    27da:	3301      	adds	r3, #1
    27dc:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    27de:	f04f 0320 	mov.w	r3, #32
    27e2:	f3ef 8211 	mrs	r2, BASEPRI
    27e6:	f383 8812 	msr	BASEPRI_MAX, r3
    27ea:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    27ee:	4c25      	ldr	r4, [pc, #148]	; (2884 <rtc_nrf_isr+0xcc>)
    27f0:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    27f4:	03db      	lsls	r3, r3, #15
    27f6:	d525      	bpl.n	2844 <rtc_nrf_isr+0x8c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    27f8:	4b24      	ldr	r3, [pc, #144]	; (288c <rtc_nrf_isr+0xd4>)
    27fa:	e8d3 1fef 	ldaex	r1, [r3]
    27fe:	f021 0001 	bic.w	r0, r1, #1
    2802:	e8c3 0fe5 	stlex	r5, r0, [r3]
    2806:	2d00      	cmp	r5, #0
    2808:	d1f7      	bne.n	27fa <rtc_nrf_isr+0x42>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    280a:	b911      	cbnz	r1, 2812 <rtc_nrf_isr+0x5a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    280c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    2810:	b1c3      	cbz	r3, 2844 <rtc_nrf_isr+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2812:	2500      	movs	r5, #0
    2814:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    2818:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
	__asm__ volatile(
    281c:	f382 8811 	msr	BASEPRI, r2
    2820:	f3bf 8f6f 	isb	sy
		curr_time = z_nrf_rtc_timer_read();
    2824:	f7ff fec6 	bl	25b4 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2828:	f04f 0320 	mov.w	r3, #32
    282c:	f3ef 8211 	mrs	r2, BASEPRI
    2830:	f383 8812 	msr	BASEPRI_MAX, r3
    2834:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2838:	4b15      	ldr	r3, [pc, #84]	; (2890 <rtc_nrf_isr+0xd8>)
    283a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    283e:	42b0      	cmp	r0, r6
    2840:	41b9      	sbcs	r1, r7
    2842:	d206      	bcs.n	2852 <rtc_nrf_isr+0x9a>
	__asm__ volatile(
    2844:	f382 8811 	msr	BASEPRI, r2
    2848:	f3bf 8f6f 	isb	sy
}
    284c:	b003      	add	sp, #12
    284e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2852:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    2856:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    285a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			cc_data[chan].callback = NULL;
    285e:	601d      	str	r5, [r3, #0]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2860:	e9c3 8902 	strd	r8, r9, [r3, #8]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2864:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2868:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    286c:	f382 8811 	msr	BASEPRI, r2
    2870:	f3bf 8f6f 	isb	sy
		if (handler) {
    2874:	2900      	cmp	r1, #0
    2876:	d0e9      	beq.n	284c <rtc_nrf_isr+0x94>
			handler(chan, expire_time, user_context);
    2878:	9000      	str	r0, [sp, #0]
    287a:	4632      	mov	r2, r6
    287c:	463b      	mov	r3, r7
    287e:	4628      	mov	r0, r5
    2880:	4788      	blx	r1
}
    2882:	e7e3      	b.n	284c <rtc_nrf_isr+0x94>
    2884:	50015000 	.word	0x50015000
    2888:	200008e4 	.word	0x200008e4
    288c:	200008dc 	.word	0x200008dc
    2890:	20000190 	.word	0x20000190

00002894 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2894:	1c43      	adds	r3, r0, #1
{
    2896:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2898:	d020      	beq.n	28dc <sys_clock_set_timeout+0x48>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    289a:	2801      	cmp	r0, #1
    289c:	dd20      	ble.n	28e0 <sys_clock_set_timeout+0x4c>
    289e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    28a2:	da1f      	bge.n	28e4 <sys_clock_set_timeout+0x50>
    28a4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    28a6:	f7ff fe85 	bl	25b4 <z_nrf_rtc_timer_read>
    28aa:	4b0f      	ldr	r3, [pc, #60]	; (28e8 <sys_clock_set_timeout+0x54>)
    28ac:	e9d3 1300 	ldrd	r1, r3, [r3]
    28b0:	1a42      	subs	r2, r0, r1
		ticks = 0;
    28b2:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    28b6:	bf28      	it	cs
    28b8:	2400      	movcs	r4, #0
	if (cyc > MAX_CYCLES) {
    28ba:	480c      	ldr	r0, [pc, #48]	; (28ec <sys_clock_set_timeout+0x58>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    28bc:	3201      	adds	r2, #1
    28be:	4422      	add	r2, r4
	if (cyc > MAX_CYCLES) {
    28c0:	4282      	cmp	r2, r0
    28c2:	bf28      	it	cs
    28c4:	4602      	movcs	r2, r0
	uint64_t target_time = cyc + last_count;
    28c6:	2000      	movs	r0, #0
    28c8:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    28ca:	4909      	ldr	r1, [pc, #36]	; (28f0 <sys_clock_set_timeout+0x5c>)
    28cc:	9001      	str	r0, [sp, #4]
    28ce:	9100      	str	r1, [sp, #0]
    28d0:	f143 0300 	adc.w	r3, r3, #0
    28d4:	f7ff fe90 	bl	25f8 <compare_set>
}
    28d8:	b002      	add	sp, #8
    28da:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    28dc:	4803      	ldr	r0, [pc, #12]	; (28ec <sys_clock_set_timeout+0x58>)
    28de:	e7e1      	b.n	28a4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    28e0:	2400      	movs	r4, #0
    28e2:	e7e0      	b.n	28a6 <sys_clock_set_timeout+0x12>
    28e4:	4c01      	ldr	r4, [pc, #4]	; (28ec <sys_clock_set_timeout+0x58>)
    28e6:	e7de      	b.n	28a6 <sys_clock_set_timeout+0x12>
    28e8:	200001a0 	.word	0x200001a0
    28ec:	007fffff 	.word	0x007fffff
    28f0:	000024e9 	.word	0x000024e9

000028f4 <sys_clock_elapsed>:
{
    28f4:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    28f6:	f7ff fe5d 	bl	25b4 <z_nrf_rtc_timer_read>
    28fa:	4b02      	ldr	r3, [pc, #8]	; (2904 <sys_clock_elapsed+0x10>)
    28fc:	681b      	ldr	r3, [r3, #0]
}
    28fe:	1ac0      	subs	r0, r0, r3
    2900:	bd08      	pop	{r3, pc}
    2902:	bf00      	nop
    2904:	200001a0 	.word	0x200001a0

00002908 <pinctrl_configure_pins>:
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2908:	f04f 0c01 	mov.w	ip, #1
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    290c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        case 1: return NRF_P1;
    2910:	4e5b      	ldr	r6, [pc, #364]	; (2a80 <pinctrl_configure_pins+0x178>)
    2912:	4f5c      	ldr	r7, [pc, #368]	; (2a84 <pinctrl_configure_pins+0x17c>)
    2914:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2918:	4281      	cmp	r1, r0
    291a:	d102      	bne.n	2922 <pinctrl_configure_pins+0x1a>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    291c:	2000      	movs	r0, #0
}
    291e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2922:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2924:	f004 037f 	and.w	r3, r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2928:	f3c4 2543 	ubfx	r5, r4, #9, #4
			pin = 0xFFFFFFFFU;
    292c:	2b7f      	cmp	r3, #127	; 0x7f
		switch (NRF_GET_FUN(pins[i])) {
    292e:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    2932:	bf08      	it	eq
    2934:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
		switch (NRF_GET_FUN(pins[i])) {
    2938:	2c22      	cmp	r4, #34	; 0x22
    293a:	f200 809d 	bhi.w	2a78 <pinctrl_configure_pins+0x170>
    293e:	e8df f004 	tbb	[pc, r4]
    2942:	2312      	.short	0x2312
    2944:	3e2b4228 	.word	0x3e2b4228
    2948:	9b9b9b42 	.word	0x9b9b9b42
    294c:	9b72459b 	.word	0x9b72459b
    2950:	9b9b9b9b 	.word	0x9b9b9b9b
    2954:	9b9b9b9b 	.word	0x9b9b9b9b
    2958:	83807d75 	.word	0x83807d75
    295c:	869b9b9b 	.word	0x869b9b9b
    2960:	95928f8c 	.word	0x95928f8c
    2964:	98          	.byte	0x98
    2965:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = pin;
    2966:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    return pin_number >> 5;
    296a:	ea4f 1853 	mov.w	r8, r3, lsr #5
        case 1: return NRF_P1;
    296e:	f1b8 0f01 	cmp.w	r8, #1
    2972:	bf14      	ite	ne
    2974:	46b6      	movne	lr, r6
    2976:	46be      	moveq	lr, r7
    *p_pin = pin_number & 0x1F;
    2978:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    297c:	fa0c f404 	lsl.w	r4, ip, r4
    p_reg->OUTSET = set_mask;
    2980:	f8ce 4008 	str.w	r4, [lr, #8]
    2984:	2401      	movs	r4, #1
    2986:	e002      	b.n	298e <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = pin;
    2988:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    298c:	2400      	movs	r4, #0
    298e:	46a6      	mov	lr, r4
    2990:	e023      	b.n	29da <pinctrl_configure_pins+0xd2>
			NRF_PSEL_UART(reg, RTS) = pin;
    2992:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (write != NO_WRITE) {
    2996:	e7e8      	b.n	296a <pinctrl_configure_pins+0x62>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2998:	2400      	movs	r4, #0
			NRF_PSEL_SPIM(reg, SCK) = pin;
    299a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    return pin_number >> 5;
    299e:	ea4f 1953 	mov.w	r9, r3, lsr #5
        case 1: return NRF_P1;
    29a2:	f1b9 0f01 	cmp.w	r9, #1
    29a6:	bf14      	ite	ne
    29a8:	46b0      	movne	r8, r6
    29aa:	46b8      	moveq	r8, r7
    *p_pin = pin_number & 0x1F;
    29ac:	f003 0e1f 	and.w	lr, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    29b0:	fa0c fe0e 	lsl.w	lr, ip, lr
    p_reg->OUTCLR = clr_mask;
    29b4:	f8c8 e00c 	str.w	lr, [r8, #12]
    29b8:	f04f 0e01 	mov.w	lr, #1
    29bc:	e00d      	b.n	29da <pinctrl_configure_pins+0xd2>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    29be:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			pin = 0xFFFFFFFFU;
    29c2:	2401      	movs	r4, #1
    29c4:	e7eb      	b.n	299e <pinctrl_configure_pins+0x96>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    29c6:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			if (write != NO_WRITE) {
    29ca:	e7df      	b.n	298c <pinctrl_configure_pins+0x84>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    29cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    29d0:	2d00      	cmp	r5, #0
    29d2:	d1db      	bne.n	298c <pinctrl_configure_pins+0x84>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    29d4:	2400      	movs	r4, #0
				drive = NRF_DRIVE_S0D1;
    29d6:	2506      	movs	r5, #6
			dir = NRF_GPIO_PIN_DIR_INPUT;
    29d8:	46a6      	mov	lr, r4
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    29da:	f850 ab04 	ldr.w	sl, [r0], #4
    *p_pin = pin_number & 0x1F;
    29de:	f003 091f 	and.w	r9, r3, #31
    29e2:	f40a 5800 	and.w	r8, sl, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    29e6:	f1b8 0f00 	cmp.w	r8, #0
    return pin_number >> 5;
    29ea:	ea4f 1353 	mov.w	r3, r3, lsr #5
    29ee:	bf1c      	itt	ne
    29f0:	2401      	movne	r4, #1
    29f2:	f04f 0e00 	movne.w	lr, #0
        case 0: return NRF_P0;
    29f6:	2b01      	cmp	r3, #1
    29f8:	bf0c      	ite	eq
    29fa:	46b8      	moveq	r8, r7
    29fc:	46b0      	movne	r8, r6
    29fe:	eb08 0889 	add.w	r8, r8, r9, lsl #2
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2a02:	f8d8 3200 	ldr.w	r3, [r8, #512]	; 0x200
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2a06:	f3ca 1ac1 	ubfx	sl, sl, #7, #2
    2a0a:	f003 49e0 	and.w	r9, r3, #1879048192	; 0x70000000
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    2a0e:	022b      	lsls	r3, r5, #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2a10:	ea43 038a 	orr.w	r3, r3, sl, lsl #2
    2a14:	ea43 030e 	orr.w	r3, r3, lr
    2a18:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2a1c:	ea43 0309 	orr.w	r3, r3, r9
    reg->PIN_CNF[pin_number] = cnf;
    2a20:	f8c8 3200 	str.w	r3, [r8, #512]	; 0x200
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2a24:	e778      	b.n	2918 <pinctrl_configure_pins+0x10>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    2a26:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2a2a:	e7d1      	b.n	29d0 <pinctrl_configure_pins+0xc8>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    2a2c:	f8c2 3560 	str.w	r3, [r2, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    2a30:	6804      	ldr	r4, [r0, #0]
    2a32:	f3c4 3480 	ubfx	r4, r4, #14, #1
    if (value == 0)
    2a36:	2c00      	cmp	r4, #0
    2a38:	d0c3      	beq.n	29c2 <pinctrl_configure_pins+0xba>
    2a3a:	e796      	b.n	296a <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    2a3c:	f8c2 3564 	str.w	r3, [r2, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2a40:	e7f6      	b.n	2a30 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    2a42:	f8c2 3568 	str.w	r3, [r2, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2a46:	e7f3      	b.n	2a30 <pinctrl_configure_pins+0x128>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2a48:	f8c2 356c 	str.w	r3, [r2, #1388]	; 0x56c
    2a4c:	e7f0      	b.n	2a30 <pinctrl_configure_pins+0x128>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    2a4e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2a52:	2401      	movs	r4, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2a54:	f04f 0e00 	mov.w	lr, #0
    2a58:	e7bf      	b.n	29da <pinctrl_configure_pins+0xd2>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    2a5a:	f8c2 3528 	str.w	r3, [r2, #1320]	; 0x528
    2a5e:	e784      	b.n	296a <pinctrl_configure_pins+0x62>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    2a60:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
			if (write != NO_WRITE) {
    2a64:	e7f5      	b.n	2a52 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    2a66:	f8c2 3534 	str.w	r3, [r2, #1332]	; 0x534
    2a6a:	e7f2      	b.n	2a52 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    2a6c:	f8c2 3538 	str.w	r3, [r2, #1336]	; 0x538
			if (write != NO_WRITE) {
    2a70:	e7ef      	b.n	2a52 <pinctrl_configure_pins+0x14a>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    2a72:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
			if (write != NO_WRITE) {
    2a76:	e7ec      	b.n	2a52 <pinctrl_configure_pins+0x14a>
		switch (NRF_GET_FUN(pins[i])) {
    2a78:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2a7c:	e74f      	b.n	291e <pinctrl_configure_pins+0x16>
    2a7e:	bf00      	nop
    2a80:	50842500 	.word	0x50842500
    2a84:	50842800 	.word	0x50842800

00002a88 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2a88:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2a8c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2a90:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2a94:	2a07      	cmp	r2, #7
    2a96:	d105      	bne.n	2aa4 <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    2a98:	3b02      	subs	r3, #2
    2a9a:	2b03      	cmp	r3, #3
    2a9c:	d802      	bhi.n	2aa4 <nrf53_errata_42+0x1c>
    2a9e:	4a02      	ldr	r2, [pc, #8]	; (2aa8 <nrf53_errata_42+0x20>)
    2aa0:	5cd0      	ldrb	r0, [r2, r3]
    2aa2:	4770      	bx	lr
                    {
                        case 0x02ul:
                            return true;
                        case 0x03ul:
                            return false;
    2aa4:	2000      	movs	r0, #0
                }
            #endif
        #endif
        return false;
    #endif
}
    2aa6:	4770      	bx	lr
    2aa8:	000058c3 	.word	0x000058c3

00002aac <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    2aac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ab0:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    2ab4:	4b03      	ldr	r3, [pc, #12]	; (2ac4 <SystemCoreClockUpdate+0x18>)
    2ab6:	f002 0203 	and.w	r2, r2, #3
    2aba:	40d3      	lsrs	r3, r2
    2abc:	4a02      	ldr	r2, [pc, #8]	; (2ac8 <SystemCoreClockUpdate+0x1c>)
    2abe:	6013      	str	r3, [r2, #0]
#endif
}
    2ac0:	4770      	bx	lr
    2ac2:	bf00      	nop
    2ac4:	07a12000 	.word	0x07a12000
    2ac8:	20000048 	.word	0x20000048

00002acc <SystemInit>:

void SystemInit(void)
{
    2acc:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    2ace:	f7ff ffdb 	bl	2a88 <nrf53_errata_42>
    2ad2:	b158      	cbz	r0, 2aec <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    2ad4:	4b4f      	ldr	r3, [pc, #316]	; (2c14 <SystemInit+0x148>)
    2ad6:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    2ada:	b93a      	cbnz	r2, 2aec <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2adc:	210d      	movs	r1, #13
    2ade:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    2ae2:	2101      	movs	r1, #1
    2ae4:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2ae8:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    2aec:	2200      	movs	r2, #0
    2aee:	00d3      	lsls	r3, r2, #3
    2af0:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2af4:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    2af8:	3101      	adds	r1, #1
    2afa:	d007      	beq.n	2b0c <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2afc:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2b00:	3201      	adds	r2, #1
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2b02:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2b06:	2a20      	cmp	r2, #32
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2b08:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2b0a:	d1f0      	bne.n	2aee <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2b0c:	f7ff ffbc 	bl	2a88 <nrf53_errata_42>
    2b10:	2800      	cmp	r0, #0
    2b12:	d176      	bne.n	2c02 <SystemInit+0x136>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    2b14:	f7ff ffb8 	bl	2a88 <nrf53_errata_42>
    2b18:	b140      	cbz	r0, 2b2c <SystemInit+0x60>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2b1a:	4b3f      	ldr	r3, [pc, #252]	; (2c18 <SystemInit+0x14c>)
    2b1c:	4a3f      	ldr	r2, [pc, #252]	; (2c1c <SystemInit+0x150>)
    2b1e:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    2b22:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b26:	2201      	movs	r2, #1
    2b28:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2b2c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2b30:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2b34:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2b38:	2a07      	cmp	r2, #7
    2b3a:	d109      	bne.n	2b50 <SystemInit+0x84>
                {
                    switch(var2)
    2b3c:	3b02      	subs	r3, #2
    2b3e:	2b03      	cmp	r3, #3
    2b40:	d806      	bhi.n	2b50 <SystemInit+0x84>
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    2b42:	4a37      	ldr	r2, [pc, #220]	; (2c20 <SystemInit+0x154>)
    2b44:	5cd3      	ldrb	r3, [r2, r3]
    2b46:	b11b      	cbz	r3, 2b50 <SystemInit+0x84>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2b48:	2200      	movs	r2, #0
    2b4a:	4b36      	ldr	r3, [pc, #216]	; (2c24 <SystemInit+0x158>)
    2b4c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    2b50:	f7ff ff9a 	bl	2a88 <nrf53_errata_42>
    2b54:	b150      	cbz	r0, 2b6c <SystemInit+0xa0>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2b56:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b5a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2b5e:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    2b60:	bf42      	ittt	mi
    2b62:	2200      	movmi	r2, #0
    2b64:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2b68:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2b6c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2b70:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2b74:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    2b78:	2a07      	cmp	r2, #7
    2b7a:	d109      	bne.n	2b90 <SystemInit+0xc4>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2b7c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2b80:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2b84:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2b86:	bf44      	itt	mi
    2b88:	f06f 0201 	mvnmi.w	r2, #1
    2b8c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2b90:	f7ff ff7a 	bl	2a88 <nrf53_errata_42>
    2b94:	b118      	cbz	r0, 2b9e <SystemInit+0xd2>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    2b96:	2265      	movs	r2, #101	; 0x65
    2b98:	4b1e      	ldr	r3, [pc, #120]	; (2c14 <SystemInit+0x148>)
    2b9a:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    2b9e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    2ba2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    2ba6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                if (var1 == 0x07)
    2baa:	2a07      	cmp	r2, #7
    2bac:	d116      	bne.n	2bdc <SystemInit+0x110>
        }

        if (nrf53_errata_140())
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    2bae:	4b1d      	ldr	r3, [pc, #116]	; (2c24 <SystemInit+0x158>)
    2bb0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    2bb4:	2b00      	cmp	r3, #0
    2bb6:	da11      	bge.n	2bdc <SystemInit+0x110>
            {
                /* Reset occured during calibration */
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    2bb8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2bbc:	2203      	movs	r2, #3
    2bbe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    2bc2:	2201      	movs	r2, #1
    2bc4:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    2bc6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    2bca:	2a00      	cmp	r2, #0
    2bcc:	d0fb      	beq.n	2bc6 <SystemInit+0xfa>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    2bce:	2200      	movs	r2, #0
    2bd0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    2bd4:	2201      	movs	r2, #1
    2bd6:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    2bd8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2bdc:	4a12      	ldr	r2, [pc, #72]	; (2c28 <SystemInit+0x15c>)
    2bde:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2be2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2be6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2bea:	4a10      	ldr	r2, [pc, #64]	; (2c2c <SystemInit+0x160>)
    2bec:	4b10      	ldr	r3, [pc, #64]	; (2c30 <SystemInit+0x164>)
    2bee:	6811      	ldr	r1, [r2, #0]
    2bf0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2bf4:	69d2      	ldr	r2, [r2, #28]
    2bf6:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    2bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    2bfe:	f7ff bf55 	b.w	2aac <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2c02:	2229      	movs	r2, #41	; 0x29
    2c04:	4b03      	ldr	r3, [pc, #12]	; (2c14 <SystemInit+0x148>)
    2c06:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2c0a:	2203      	movs	r2, #3
    2c0c:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    2c10:	e780      	b.n	2b14 <SystemInit+0x48>
    2c12:	bf00      	nop
    2c14:	50004000 	.word	0x50004000
    2c18:	50039000 	.word	0x50039000
    2c1c:	beef0044 	.word	0xbeef0044
    2c20:	000058bf 	.word	0x000058bf
    2c24:	50032000 	.word	0x50032000
    2c28:	e000ed00 	.word	0xe000ed00
    2c2c:	00ff8000 	.word	0x00ff8000
    2c30:	50006000 	.word	0x50006000

00002c34 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2c34:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2c36:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2c38:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2c3a:	fab2 f382 	clz	r3, r2
    2c3e:	f1c3 031f 	rsb	r3, r3, #31
    2c42:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2c44:	fa05 f403 	lsl.w	r4, r5, r3
    2c48:	ea22 0404 	bic.w	r4, r2, r4
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2c4c:	e8d0 6fef 	ldaex	r6, [r0]
    2c50:	4296      	cmp	r6, r2
    2c52:	d104      	bne.n	2c5e <nrfx_flag32_alloc+0x2a>
    2c54:	e8c0 4fec 	stlex	ip, r4, [r0]
    2c58:	f1bc 0f00 	cmp.w	ip, #0
    2c5c:	d1f6      	bne.n	2c4c <nrfx_flag32_alloc+0x18>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2c5e:	d1eb      	bne.n	2c38 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    2c60:	4801      	ldr	r0, [pc, #4]	; (2c68 <nrfx_flag32_alloc+0x34>)
    *p_flag = idx;
    2c62:	700b      	strb	r3, [r1, #0]
}
    2c64:	bd70      	pop	{r4, r5, r6, pc}
    2c66:	bf00      	nop
    2c68:	0bad0000 	.word	0x0bad0000

00002c6c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    2c6c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2c6e:	6803      	ldr	r3, [r0, #0]
    2c70:	40cb      	lsrs	r3, r1
    2c72:	07db      	lsls	r3, r3, #31
    2c74:	d410      	bmi.n	2c98 <nrfx_flag32_free+0x2c>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2c76:	2301      	movs	r3, #1
    2c78:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    2c7a:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    2c7c:	ea43 0102 	orr.w	r1, r3, r2
    2c80:	e8d0 4fef 	ldaex	r4, [r0]
    2c84:	4294      	cmp	r4, r2
    2c86:	d104      	bne.n	2c92 <nrfx_flag32_free+0x26>
    2c88:	e8c0 1fec 	stlex	ip, r1, [r0]
    2c8c:	f1bc 0f00 	cmp.w	ip, #0
    2c90:	d1f6      	bne.n	2c80 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2c92:	d1f2      	bne.n	2c7a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    2c94:	4801      	ldr	r0, [pc, #4]	; (2c9c <nrfx_flag32_free+0x30>)
}
    2c96:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2c98:	4801      	ldr	r0, [pc, #4]	; (2ca0 <nrfx_flag32_free+0x34>)
    2c9a:	e7fc      	b.n	2c96 <nrfx_flag32_free+0x2a>
    2c9c:	0bad0000 	.word	0x0bad0000
    2ca0:	0bad0004 	.word	0x0bad0004

00002ca4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2ca4:	4b04      	ldr	r3, [pc, #16]	; (2cb8 <nrfx_clock_init+0x14>)
    2ca6:	791a      	ldrb	r2, [r3, #4]
    2ca8:	b922      	cbnz	r2, 2cb4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2caa:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2cac:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2cae:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2cb0:	4802      	ldr	r0, [pc, #8]	; (2cbc <nrfx_clock_init+0x18>)
    2cb2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2cb4:	4802      	ldr	r0, [pc, #8]	; (2cc0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2cb6:	4770      	bx	lr
    2cb8:	200008e8 	.word	0x200008e8
    2cbc:	0bad0000 	.word	0x0bad0000
    2cc0:	0bad000c 	.word	0x0bad000c

00002cc4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2cc4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2cc8:	b510      	push	{r4, lr}
    2cca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2cce:	b152      	cbz	r2, 2ce6 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cd0:	2000      	movs	r0, #0
    2cd2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    2cd6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2cda:	2201      	movs	r2, #1
    2cdc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2ce0:	4b23      	ldr	r3, [pc, #140]	; (2d70 <nrfx_power_clock_irq_handler+0xac>)
    2ce2:	681b      	ldr	r3, [r3, #0]
    2ce4:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2ce6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2cea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2cee:	b18a      	cbz	r2, 2d14 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2cf0:	2200      	movs	r2, #0
    2cf2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2cf6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2cfa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2cfe:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2d02:	f002 0203 	and.w	r2, r2, #3
    2d06:	2a01      	cmp	r2, #1
    2d08:	f04f 0102 	mov.w	r1, #2
    2d0c:	d128      	bne.n	2d60 <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2d0e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2d12:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2d14:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d18:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    2d1c:	b162      	cbz	r2, 2d38 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d1e:	2200      	movs	r2, #0
    2d20:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2d24:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    2d28:	f44f 7280 	mov.w	r2, #256	; 0x100
    2d2c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    2d30:	4b0f      	ldr	r3, [pc, #60]	; (2d70 <nrfx_power_clock_irq_handler+0xac>)
    2d32:	2004      	movs	r0, #4
    2d34:	681b      	ldr	r3, [r3, #0]
    2d36:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2d38:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2d3c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    2d40:	b1aa      	cbz	r2, 2d6e <nrfx_power_clock_irq_handler+0xaa>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2d42:	2200      	movs	r2, #0
    2d44:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    2d48:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    2d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
    2d50:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2d54:	4b06      	ldr	r3, [pc, #24]	; (2d70 <nrfx_power_clock_irq_handler+0xac>)
    2d56:	2005      	movs	r0, #5
    }
#endif
}
    2d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2d5c:	681b      	ldr	r3, [r3, #0]
    2d5e:	4718      	bx	r3
    2d60:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2d64:	4b02      	ldr	r3, [pc, #8]	; (2d70 <nrfx_power_clock_irq_handler+0xac>)
    2d66:	2001      	movs	r0, #1
    2d68:	681b      	ldr	r3, [r3, #0]
    2d6a:	4798      	blx	r3
    2d6c:	e7d2      	b.n	2d14 <nrfx_power_clock_irq_handler+0x50>
}
    2d6e:	bd10      	pop	{r4, pc}
    2d70:	200008e8 	.word	0x200008e8

00002d74 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    2d74:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    2d76:	4801      	ldr	r0, [pc, #4]	; (2d7c <nrfx_dppi_channel_alloc+0x8>)
    2d78:	f7ff bf5c 	b.w	2c34 <nrfx_flag32_alloc>
    2d7c:	2000004c 	.word	0x2000004c

00002d80 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    2d80:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    2d82:	f003 021f 	and.w	r2, r3, #31
    2d86:	6002      	str	r2, [r0, #0]
}
    2d88:	4a03      	ldr	r2, [pc, #12]	; (2d98 <nrf_gpio_pin_port_decode+0x18>)
    2d8a:	4804      	ldr	r0, [pc, #16]	; (2d9c <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    2d8c:	095b      	lsrs	r3, r3, #5
}
    2d8e:	2b01      	cmp	r3, #1
    2d90:	bf18      	it	ne
    2d92:	4610      	movne	r0, r2
    2d94:	4770      	bx	lr
    2d96:	bf00      	nop
    2d98:	50842500 	.word	0x50842500
    2d9c:	50842800 	.word	0x50842800

00002da0 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2da0:	4b03      	ldr	r3, [pc, #12]	; (2db0 <pin_in_use_by_te+0x10>)
    2da2:	3008      	adds	r0, #8
    2da4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2da8:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2dac:	4770      	bx	lr
    2dae:	bf00      	nop
    2db0:	20000050 	.word	0x20000050

00002db4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2db4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2db6:	4c0d      	ldr	r4, [pc, #52]	; (2dec <call_handler+0x38>)
    2db8:	f100 0308 	add.w	r3, r0, #8
    2dbc:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
{
    2dc0:	4605      	mov	r5, r0
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2dc2:	05da      	lsls	r2, r3, #23
{
    2dc4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2dc6:	d507      	bpl.n	2dd8 <call_handler+0x24>
    2dc8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    2dcc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    2dd0:	6852      	ldr	r2, [r2, #4]
    2dd2:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    2dd6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    2dd8:	68a3      	ldr	r3, [r4, #8]
    2dda:	b12b      	cbz	r3, 2de8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2ddc:	4631      	mov	r1, r6
    2dde:	4628      	mov	r0, r5
    2de0:	68e2      	ldr	r2, [r4, #12]
    }
}
    2de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2de6:	4718      	bx	r3
}
    2de8:	bd70      	pop	{r4, r5, r6, pc}
    2dea:	bf00      	nop
    2dec:	20000050 	.word	0x20000050

00002df0 <release_handler>:
{
    2df0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2df2:	4a12      	ldr	r2, [pc, #72]	; (2e3c <release_handler+0x4c>)
    2df4:	3008      	adds	r0, #8
    2df6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    2dfa:	05d9      	lsls	r1, r3, #23
    2dfc:	d51b      	bpl.n	2e36 <release_handler+0x46>
    2dfe:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2e02:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2e06:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2e0a:	2000      	movs	r0, #0
    2e0c:	f102 040e 	add.w	r4, r2, #14
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2e10:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    2e14:	f413 7f80 	tst.w	r3, #256	; 0x100
    2e18:	d003      	beq.n	2e22 <release_handler+0x32>
    2e1a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2e1e:	4299      	cmp	r1, r3
    2e20:	d009      	beq.n	2e36 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2e22:	3001      	adds	r0, #1
    2e24:	2830      	cmp	r0, #48	; 0x30
    2e26:	d1f3      	bne.n	2e10 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2e28:	2300      	movs	r3, #0
    2e2a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2e2e:	4804      	ldr	r0, [pc, #16]	; (2e40 <release_handler+0x50>)
}
    2e30:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2e32:	f7ff bf1b 	b.w	2c6c <nrfx_flag32_free>
}
    2e36:	bc10      	pop	{r4}
    2e38:	4770      	bx	lr
    2e3a:	bf00      	nop
    2e3c:	20000050 	.word	0x20000050
    2e40:	200000c4 	.word	0x200000c4

00002e44 <pin_handler_trigger_uninit>:
{
    2e44:	b538      	push	{r3, r4, r5, lr}
    2e46:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2e48:	f7ff ffaa 	bl	2da0 <pin_in_use_by_te>
    2e4c:	4c0b      	ldr	r4, [pc, #44]	; (2e7c <pin_handler_trigger_uninit+0x38>)
    2e4e:	f102 0508 	add.w	r5, r2, #8
    2e52:	b160      	cbz	r0, 2e6e <pin_handler_trigger_uninit+0x2a>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2e54:	2100      	movs	r1, #0
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2e56:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2e5a:	0b5b      	lsrs	r3, r3, #13
    2e5c:	009b      	lsls	r3, r3, #2
    2e5e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    2e62:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    2e66:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    2e6a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    release_handler(pin);
    2e6e:	4610      	mov	r0, r2
    2e70:	f7ff ffbe 	bl	2df0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2e74:	2300      	movs	r3, #0
    2e76:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    2e7a:	bd38      	pop	{r3, r4, r5, pc}
    2e7c:	20000050 	.word	0x20000050

00002e80 <nrfx_gpiote_input_configure>:
{
    2e80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    2e84:	4604      	mov	r4, r0
    2e86:	4690      	mov	r8, r2
    2e88:	461d      	mov	r5, r3
    if (p_input_config)
    2e8a:	b301      	cbz	r1, 2ece <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2e8c:	4e4f      	ldr	r6, [pc, #316]	; (2fcc <nrfx_gpiote_input_configure+0x14c>)
    2e8e:	f100 0708 	add.w	r7, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    2e92:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2e96:	079b      	lsls	r3, r3, #30
    2e98:	d502      	bpl.n	2ea0 <nrfx_gpiote_input_configure+0x20>
    2e9a:	f7ff ff81 	bl	2da0 <pin_in_use_by_te>
    2e9e:	bb28      	cbnz	r0, 2eec <nrfx_gpiote_input_configure+0x6c>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2ea0:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2ea2:	4620      	mov	r0, r4
    2ea4:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    2ea8:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    2eac:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    2eb0:	f10d 020f 	add.w	r2, sp, #15
    2eb4:	460b      	mov	r3, r1
    2eb6:	f10d 010e 	add.w	r1, sp, #14
    2eba:	f002 f84a 	bl	4f52 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    2ebe:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2ec2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    2ec6:	f043 0301 	orr.w	r3, r3, #1
    2eca:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_trigger_config)
    2ece:	f1b8 0f00 	cmp.w	r8, #0
    2ed2:	d02d      	beq.n	2f30 <nrfx_gpiote_input_configure+0xb0>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2ed4:	4e3d      	ldr	r6, [pc, #244]	; (2fcc <nrfx_gpiote_input_configure+0x14c>)
    2ed6:	f104 0708 	add.w	r7, r4, #8
    2eda:	f836 1017 	ldrh.w	r1, [r6, r7, lsl #1]
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    2ede:	f898 0000 	ldrb.w	r0, [r8]
        if (pin_is_output(pin))
    2ee2:	078a      	lsls	r2, r1, #30
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    2ee4:	f8d8 3004 	ldr.w	r3, [r8, #4]
        if (pin_is_output(pin))
    2ee8:	d502      	bpl.n	2ef0 <nrfx_gpiote_input_configure+0x70>
            if (use_evt)
    2eea:	b1cb      	cbz	r3, 2f20 <nrfx_gpiote_input_configure+0xa0>
            return NRFX_ERROR_INVALID_PARAM;
    2eec:	4838      	ldr	r0, [pc, #224]	; (2fd0 <nrfx_gpiote_input_configure+0x150>)
    2eee:	e021      	b.n	2f34 <nrfx_gpiote_input_configure+0xb4>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    2ef0:	f021 0120 	bic.w	r1, r1, #32
    2ef4:	04c9      	lsls	r1, r1, #19
    2ef6:	0cc9      	lsrs	r1, r1, #19
    2ef8:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
            if (use_evt)
    2efc:	b183      	cbz	r3, 2f20 <nrfx_gpiote_input_configure+0xa0>
                if (!edge)
    2efe:	2803      	cmp	r0, #3
    2f00:	d8f4      	bhi.n	2eec <nrfx_gpiote_input_configure+0x6c>
                uint8_t ch = *p_trigger_config->p_in_channel;
    2f02:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2f06:	f893 c000 	ldrb.w	ip, [r3]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    2f0a:	4662      	mov	r2, ip
    2f0c:	0092      	lsls	r2, r2, #2
    2f0e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    2f12:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    2f16:	b980      	cbnz	r0, 2f3a <nrfx_gpiote_input_configure+0xba>
    p_reg->CONFIG[idx] = 0;
    2f18:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CONFIG[idx] = 0;
    2f1c:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    2f20:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    2f24:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    2f28:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
    2f2c:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_handler_config)
    2f30:	bb1d      	cbnz	r5, 2f7a <nrfx_gpiote_input_configure+0xfa>
        err = NRFX_SUCCESS;
    2f32:	4828      	ldr	r0, [pc, #160]	; (2fd4 <nrfx_gpiote_input_configure+0x154>)
}
    2f34:	b004      	add	sp, #16
    2f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    2f3a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    2f3e:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    2f42:	f023 0303 	bic.w	r3, r3, #3
    2f46:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2f4a:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    2f4e:	f041 0120 	orr.w	r1, r1, #32
    2f52:	f423 334f 	bic.w	r3, r3, #211968	; 0x33c00
    2f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    2f5a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2f5e:	0223      	lsls	r3, r4, #8
    2f60:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    2f64:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
    2f68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    2f6c:	ea43 030e 	orr.w	r3, r3, lr
    2f70:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    2f74:	f826 1017 	strh.w	r1, [r6, r7, lsl #1]
    2f78:	e7d2      	b.n	2f20 <nrfx_gpiote_input_configure+0xa0>
    release_handler(pin);
    2f7a:	4620      	mov	r0, r4
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    2f7c:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    2f80:	f7ff ff36 	bl	2df0 <release_handler>
    if (!handler)
    2f84:	2e00      	cmp	r6, #0
    2f86:	d0d4      	beq.n	2f32 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2f88:	4d10      	ldr	r5, [pc, #64]	; (2fcc <nrfx_gpiote_input_configure+0x14c>)
    2f8a:	e9d5 2300 	ldrd	r2, r3, [r5]
    2f8e:	4296      	cmp	r6, r2
    2f90:	d101      	bne.n	2f96 <nrfx_gpiote_input_configure+0x116>
    2f92:	429f      	cmp	r7, r3
    2f94:	d018      	beq.n	2fc8 <nrfx_gpiote_input_configure+0x148>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    2f96:	4810      	ldr	r0, [pc, #64]	; (2fd8 <nrfx_gpiote_input_configure+0x158>)
    2f98:	f10d 010f 	add.w	r1, sp, #15
    2f9c:	f7ff fe4a 	bl	2c34 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    2fa0:	4b0c      	ldr	r3, [pc, #48]	; (2fd4 <nrfx_gpiote_input_configure+0x154>)
    2fa2:	4298      	cmp	r0, r3
    2fa4:	d1c6      	bne.n	2f34 <nrfx_gpiote_input_configure+0xb4>
        handler_id = (int32_t)id;
    2fa6:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].p_context = p_context;
    2faa:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2fae:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    2fb0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2fb2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    m_cb.handlers[handler_id].handler = handler;
    2fb6:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2fba:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    2fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2fc2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    2fc6:	e7b4      	b.n	2f32 <nrfx_gpiote_input_configure+0xb2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2fc8:	2200      	movs	r2, #0
    2fca:	e7ee      	b.n	2faa <nrfx_gpiote_input_configure+0x12a>
    2fcc:	20000050 	.word	0x20000050
    2fd0:	0bad0004 	.word	0x0bad0004
    2fd4:	0bad0000 	.word	0x0bad0000
    2fd8:	200000c4 	.word	0x200000c4

00002fdc <nrfx_gpiote_output_configure>:
{
    2fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fde:	4604      	mov	r4, r0
    2fe0:	4615      	mov	r5, r2
    2fe2:	b085      	sub	sp, #20
    if (p_config)
    2fe4:	b319      	cbz	r1, 302e <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2fe6:	4e34      	ldr	r6, [pc, #208]	; (30b8 <nrfx_gpiote_output_configure+0xdc>)
    2fe8:	f100 0708 	add.w	r7, r0, #8
    2fec:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    2ff0:	0793      	lsls	r3, r2, #30
    2ff2:	d403      	bmi.n	2ffc <nrfx_gpiote_output_configure+0x20>
    2ff4:	f7ff fed4 	bl	2da0 <pin_in_use_by_te>
    2ff8:	2800      	cmp	r0, #0
    2ffa:	d15a      	bne.n	30b2 <nrfx_gpiote_output_configure+0xd6>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    2ffc:	f012 0f1c 	tst.w	r2, #28
    3000:	d002      	beq.n	3008 <nrfx_gpiote_output_configure+0x2c>
    3002:	784b      	ldrb	r3, [r1, #1]
    3004:	2b01      	cmp	r3, #1
    3006:	d054      	beq.n	30b2 <nrfx_gpiote_output_configure+0xd6>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    3008:	2301      	movs	r3, #1
    300a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    300e:	2300      	movs	r3, #0
    3010:	1c4a      	adds	r2, r1, #1
    3012:	e9cd 1300 	strd	r1, r3, [sp]
    3016:	4620      	mov	r0, r4
    3018:	1c8b      	adds	r3, r1, #2
    301a:	f10d 010f 	add.w	r1, sp, #15
    301e:	f001 ff98 	bl	4f52 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3022:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    3026:	f043 0303 	orr.w	r3, r3, #3
    302a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    302e:	b915      	cbnz	r5, 3036 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    3030:	4822      	ldr	r0, [pc, #136]	; (30bc <nrfx_gpiote_output_configure+0xe0>)
}
    3032:	b005      	add	sp, #20
    3034:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3036:	4e20      	ldr	r6, [pc, #128]	; (30b8 <nrfx_gpiote_output_configure+0xdc>)
    3038:	f104 0708 	add.w	r7, r4, #8
    303c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3040:	0783      	lsls	r3, r0, #30
    3042:	d536      	bpl.n	30b2 <nrfx_gpiote_output_configure+0xd6>
        uint32_t ch = p_task_config->task_ch;
    3044:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    3048:	2300      	movs	r3, #0
    304a:	4661      	mov	r1, ip
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    304c:	f020 0020 	bic.w	r0, r0, #32
    3050:	0089      	lsls	r1, r1, #2
    3052:	f101 41a0 	add.w	r1, r1, #1342177280	; 0x50000000
    3056:	04c0      	lsls	r0, r0, #19
    3058:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
    305c:	0cc0      	lsrs	r0, r0, #19
    305e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    3062:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    3066:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    306a:	786a      	ldrb	r2, [r5, #1]
    306c:	2a00      	cmp	r2, #0
    306e:	d0df      	beq.n	3030 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3070:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    3074:	78ad      	ldrb	r5, [r5, #2]
    3076:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    307a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    307e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3082:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    3086:	0223      	lsls	r3, r4, #8
    3088:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    308c:	0412      	lsls	r2, r2, #16
    308e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3092:	ea43 030e 	orr.w	r3, r3, lr
    3096:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    3098:	052a      	lsls	r2, r5, #20
    309a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    309e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    30a2:	4313      	orrs	r3, r2
    30a4:	f040 0020 	orr.w	r0, r0, #32
    30a8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    30ac:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    30b0:	e7be      	b.n	3030 <nrfx_gpiote_output_configure+0x54>
{
    30b2:	4803      	ldr	r0, [pc, #12]	; (30c0 <nrfx_gpiote_output_configure+0xe4>)
    30b4:	e7bd      	b.n	3032 <nrfx_gpiote_output_configure+0x56>
    30b6:	bf00      	nop
    30b8:	20000050 	.word	0x20000050
    30bc:	0bad0000 	.word	0x0bad0000
    30c0:	0bad0004 	.word	0x0bad0004

000030c4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    30c4:	4b01      	ldr	r3, [pc, #4]	; (30cc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    30c6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    30ca:	4770      	bx	lr
    30cc:	20000050 	.word	0x20000050

000030d0 <nrfx_gpiote_channel_get>:
{
    30d0:	b508      	push	{r3, lr}
    30d2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    30d4:	f7ff fe64 	bl	2da0 <pin_in_use_by_te>
    30d8:	b138      	cbz	r0, 30ea <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    30da:	4b05      	ldr	r3, [pc, #20]	; (30f0 <nrfx_gpiote_channel_get+0x20>)
    30dc:	3208      	adds	r2, #8
    30de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        return NRFX_SUCCESS;
    30e2:	4804      	ldr	r0, [pc, #16]	; (30f4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    30e4:	0b5b      	lsrs	r3, r3, #13
    30e6:	700b      	strb	r3, [r1, #0]
}
    30e8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    30ea:	4803      	ldr	r0, [pc, #12]	; (30f8 <nrfx_gpiote_channel_get+0x28>)
    30ec:	e7fc      	b.n	30e8 <nrfx_gpiote_channel_get+0x18>
    30ee:	bf00      	nop
    30f0:	20000050 	.word	0x20000050
    30f4:	0bad0000 	.word	0x0bad0000
    30f8:	0bad0004 	.word	0x0bad0004

000030fc <nrfx_gpiote_init>:
{
    30fc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    30fe:	4c0f      	ldr	r4, [pc, #60]	; (313c <nrfx_gpiote_init+0x40>)
    3100:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    3104:	b9bd      	cbnz	r5, 3136 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3106:	2260      	movs	r2, #96	; 0x60
    3108:	4629      	mov	r1, r5
    310a:	f104 0010 	add.w	r0, r4, #16
    310e:	f001 fc5f 	bl	49d0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3112:	200d      	movs	r0, #13
    3114:	f7fe f92a 	bl	136c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3118:	4b09      	ldr	r3, [pc, #36]	; (3140 <nrfx_gpiote_init+0x44>)
    return err_code;
    311a:	480a      	ldr	r0, [pc, #40]	; (3144 <nrfx_gpiote_init+0x48>)
    311c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3120:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3124:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3128:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    312c:	2301      	movs	r3, #1
    312e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3132:	6763      	str	r3, [r4, #116]	; 0x74
}
    3134:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3136:	4804      	ldr	r0, [pc, #16]	; (3148 <nrfx_gpiote_init+0x4c>)
    3138:	e7fc      	b.n	3134 <nrfx_gpiote_init+0x38>
    313a:	bf00      	nop
    313c:	20000050 	.word	0x20000050
    3140:	5000d000 	.word	0x5000d000
    3144:	0bad0000 	.word	0x0bad0000
    3148:	0bad0005 	.word	0x0bad0005

0000314c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    314c:	4b03      	ldr	r3, [pc, #12]	; (315c <nrfx_gpiote_is_init+0x10>)
    314e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3152:	3800      	subs	r0, #0
    3154:	bf18      	it	ne
    3156:	2001      	movne	r0, #1
    3158:	4770      	bx	lr
    315a:	bf00      	nop
    315c:	20000050 	.word	0x20000050

00003160 <nrfx_gpiote_channel_free>:
{
    3160:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3162:	4801      	ldr	r0, [pc, #4]	; (3168 <nrfx_gpiote_channel_free+0x8>)
    3164:	f7ff bd82 	b.w	2c6c <nrfx_flag32_free>
    3168:	200000c0 	.word	0x200000c0

0000316c <nrfx_gpiote_channel_alloc>:
{
    316c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    316e:	4801      	ldr	r0, [pc, #4]	; (3174 <nrfx_gpiote_channel_alloc+0x8>)
    3170:	f7ff bd60 	b.w	2c34 <nrfx_flag32_alloc>
    3174:	200000c0 	.word	0x200000c0

00003178 <nrfx_gpiote_trigger_enable>:
{
    3178:	b537      	push	{r0, r1, r2, r4, r5, lr}
    317a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    317c:	f7ff fe10 	bl	2da0 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3180:	4b1e      	ldr	r3, [pc, #120]	; (31fc <nrfx_gpiote_trigger_enable+0x84>)
    3182:	f104 0208 	add.w	r2, r4, #8
    3186:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    318a:	b1e8      	cbz	r0, 31c8 <nrfx_gpiote_trigger_enable+0x50>
    318c:	f013 0502 	ands.w	r5, r3, #2
    3190:	d11a      	bne.n	31c8 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3192:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3194:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3196:	f102 40a0 	add.w	r0, r2, #1342177280	; 0x50000000
    319a:	f500 4051 	add.w	r0, r0, #53504	; 0xd100
    319e:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    31a2:	6005      	str	r5, [r0, #0]
    31a4:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    31a8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    31aa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    31ae:	f040 0001 	orr.w	r0, r0, #1
    31b2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    31b6:	b129      	cbz	r1, 31c4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    31b8:	2201      	movs	r2, #1
    31ba:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    31be:	4a10      	ldr	r2, [pc, #64]	; (3200 <nrfx_gpiote_trigger_enable+0x88>)
    31c0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    31c4:	b003      	add	sp, #12
    31c6:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    31c8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    31cc:	2b04      	cmp	r3, #4
    31ce:	d011      	beq.n	31f4 <nrfx_gpiote_trigger_enable+0x7c>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    31d0:	2b05      	cmp	r3, #5
    31d2:	d011      	beq.n	31f8 <nrfx_gpiote_trigger_enable+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    31d4:	a801      	add	r0, sp, #4
    31d6:	9401      	str	r4, [sp, #4]
    31d8:	f7ff fdd2 	bl	2d80 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    31dc:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    31de:	6901      	ldr	r1, [r0, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    31e0:	40d9      	lsrs	r1, r3
    31e2:	f001 0101 	and.w	r1, r1, #1
    31e6:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    31e8:	4620      	mov	r0, r4
}
    31ea:	b003      	add	sp, #12
    31ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    31f0:	f001 bef8 	b.w	4fe4 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    31f4:	2103      	movs	r1, #3
    31f6:	e7f7      	b.n	31e8 <nrfx_gpiote_trigger_enable+0x70>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    31f8:	2102      	movs	r1, #2
    31fa:	e7f5      	b.n	31e8 <nrfx_gpiote_trigger_enable+0x70>
    31fc:	20000050 	.word	0x20000050
    3200:	5000d000 	.word	0x5000d000

00003204 <nrfx_gpiote_trigger_disable>:
{
    3204:	b508      	push	{r3, lr}
    3206:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3208:	f7ff fdca 	bl	2da0 <pin_in_use_by_te>
    320c:	b1c0      	cbz	r0, 3240 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    320e:	4b0f      	ldr	r3, [pc, #60]	; (324c <nrfx_gpiote_trigger_disable+0x48>)
    3210:	f102 0108 	add.w	r1, r2, #8
    3214:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3218:	0799      	lsls	r1, r3, #30
    321a:	d411      	bmi.n	3240 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    321c:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    321e:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    3220:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    3222:	490b      	ldr	r1, [pc, #44]	; (3250 <nrfx_gpiote_trigger_disable+0x4c>)
    3224:	009b      	lsls	r3, r3, #2
    3226:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    322a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    322e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    3232:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3236:	f022 0203 	bic.w	r2, r2, #3
    323a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    323e:	bd08      	pop	{r3, pc}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3240:	2100      	movs	r1, #0
}
    3242:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3246:	4610      	mov	r0, r2
    3248:	f001 becc 	b.w	4fe4 <nrf_gpio_cfg_sense_set>
    324c:	20000050 	.word	0x20000050
    3250:	5000d000 	.word	0x5000d000

00003254 <nrfx_gpiote_pin_uninit>:
{
    3254:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3256:	4b10      	ldr	r3, [pc, #64]	; (3298 <nrfx_gpiote_pin_uninit+0x44>)
    3258:	f100 0208 	add.w	r2, r0, #8
    325c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
{
    3260:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3262:	07db      	lsls	r3, r3, #31
    3264:	d516      	bpl.n	3294 <nrfx_gpiote_pin_uninit+0x40>
    nrfx_gpiote_trigger_disable(pin);
    3266:	f7ff ffcd 	bl	3204 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    326a:	4620      	mov	r0, r4
    326c:	f7ff fdea 	bl	2e44 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3270:	a801      	add	r0, sp, #4
    3272:	9401      	str	r4, [sp, #4]
    3274:	f7ff fd84 	bl	2d80 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3278:	9b01      	ldr	r3, [sp, #4]
    327a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    327e:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
    3282:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    3286:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    328a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_gpio_cfg(
    328e:	4803      	ldr	r0, [pc, #12]	; (329c <nrfx_gpiote_pin_uninit+0x48>)
}
    3290:	b002      	add	sp, #8
    3292:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3294:	4802      	ldr	r0, [pc, #8]	; (32a0 <nrfx_gpiote_pin_uninit+0x4c>)
    3296:	e7fb      	b.n	3290 <nrfx_gpiote_pin_uninit+0x3c>
    3298:	20000050 	.word	0x20000050
    329c:	0bad0000 	.word	0x0bad0000
    32a0:	0bad0004 	.word	0x0bad0004

000032a4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    32a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = 0;
    32a8:	2600      	movs	r6, #0
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    32aa:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    32ac:	4634      	mov	r4, r6
{
    32ae:	4b63      	ldr	r3, [pc, #396]	; (343c <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    32b0:	4863      	ldr	r0, [pc, #396]	; (3440 <nrfx_gpiote_irq_handler+0x19c>)

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    32b2:	4964      	ldr	r1, [pc, #400]	; (3444 <nrfx_gpiote_irq_handler+0x1a0>)
{
    32b4:	b087      	sub	sp, #28
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    32b6:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    32b8:	b135      	cbz	r5, 32c8 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    32ba:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    32be:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    32c0:	bf1e      	ittt	ne
    32c2:	601c      	strne	r4, [r3, #0]
    32c4:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    32c6:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    32c8:	3304      	adds	r3, #4
    32ca:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    32cc:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    32d0:	d1f1      	bne.n	32b6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    32d2:	f8df a16c 	ldr.w	sl, [pc, #364]	; 3440 <nrfx_gpiote_irq_handler+0x19c>
    32d6:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    32da:	2b00      	cmp	r3, #0
    32dc:	f000 8091 	beq.w	3402 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    32e0:	f8df 8164 	ldr.w	r8, [pc, #356]	; 3448 <nrfx_gpiote_irq_handler+0x1a4>
    32e4:	f8d8 3020 	ldr.w	r3, [r8, #32]
    32e8:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    32ea:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    32ee:	4b57      	ldr	r3, [pc, #348]	; (344c <nrfx_gpiote_irq_handler+0x1a8>)
    32f0:	6a1a      	ldr	r2, [r3, #32]
    32f2:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    32f4:	621a      	str	r2, [r3, #32]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    32f6:	f04f 0900 	mov.w	r9, #0
            while (latch[i])
    32fa:	f10d 0b10 	add.w	fp, sp, #16
    32fe:	ea4f 1349 	mov.w	r3, r9, lsl #5
    3302:	9300      	str	r3, [sp, #0]
    3304:	e048      	b.n	3398 <nrfx_gpiote_irq_handler+0xf4>
                uint32_t pin = NRF_CTZ(latch[i]);
    3306:	fa94 f4a4 	rbit	r4, r4
    330a:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    330e:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3310:	4a4f      	ldr	r2, [pc, #316]	; (3450 <nrfx_gpiote_irq_handler+0x1ac>)
                pin += 32 * i;
    3312:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3314:	f104 0308 	add.w	r3, r4, #8
    3318:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    331c:	2301      	movs	r3, #1
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    331e:	08e0      	lsrs	r0, r4, #3
    bit = BITMASK_RELBIT_GET(bit);
    3320:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3324:	fa03 f202 	lsl.w	r2, r3, r2
    3328:	f81b 3000 	ldrb.w	r3, [fp, r0]
    332c:	9403      	str	r4, [sp, #12]
    332e:	ea23 0302 	bic.w	r3, r3, r2
    3332:	f80b 3000 	strb.w	r3, [fp, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3336:	a803      	add	r0, sp, #12
    3338:	f7ff fd22 	bl	2d80 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    333c:	9b03      	ldr	r3, [sp, #12]
    333e:	08b9      	lsrs	r1, r7, #2
    3340:	3380      	adds	r3, #128	; 0x80
    3342:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3346:	f3c7 0582 	ubfx	r5, r7, #2, #3
    if (is_level(trigger))
    334a:	074a      	lsls	r2, r1, #29
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    334c:	462f      	mov	r7, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    334e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    if (is_level(trigger))
    3352:	d52b      	bpl.n	33ac <nrfx_gpiote_irq_handler+0x108>
        call_handler(pin, trigger);
    3354:	4620      	mov	r0, r4
    3356:	4639      	mov	r1, r7
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3358:	b2dd      	uxtb	r5, r3
    335a:	f7ff fd2b 	bl	2db4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    335e:	a803      	add	r0, sp, #12
    3360:	9403      	str	r4, [sp, #12]
    3362:	f7ff fd0d 	bl	2d80 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    3366:	9b03      	ldr	r3, [sp, #12]
    3368:	3380      	adds	r3, #128	; 0x80
    336a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    336e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    3372:	429d      	cmp	r5, r3
    3374:	d107      	bne.n	3386 <nrfx_gpiote_irq_handler+0xe2>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3376:	2100      	movs	r1, #0
    3378:	4620      	mov	r0, r4
    337a:	f001 fe33 	bl	4fe4 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    337e:	4629      	mov	r1, r5
    3380:	4620      	mov	r0, r4
    3382:	f001 fe2f 	bl	4fe4 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    3386:	a803      	add	r0, sp, #12
    3388:	9403      	str	r4, [sp, #12]
    338a:	f7ff fcf9 	bl	2d80 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    338e:	2201      	movs	r2, #1
    3390:	9b03      	ldr	r3, [sp, #12]
    3392:	fa02 f303 	lsl.w	r3, r2, r3
    3396:	6203      	str	r3, [r0, #32]
            while (latch[i])
    3398:	f85b 4029 	ldr.w	r4, [fp, r9, lsl #2]
    339c:	2c00      	cmp	r4, #0
    339e:	d1b2      	bne.n	3306 <nrfx_gpiote_irq_handler+0x62>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    33a0:	f1b9 0f00 	cmp.w	r9, #0
    33a4:	d11d      	bne.n	33e2 <nrfx_gpiote_irq_handler+0x13e>
    33a6:	f04f 0901 	mov.w	r9, #1
    33aa:	e7a8      	b.n	32fe <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    33ac:	2b02      	cmp	r3, #2
    33ae:	d10c      	bne.n	33ca <nrfx_gpiote_irq_handler+0x126>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    33b0:	2103      	movs	r1, #3
    33b2:	4620      	mov	r0, r4
    33b4:	f001 fe16 	bl	4fe4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    33b8:	f005 0305 	and.w	r3, r5, #5
    33bc:	2b01      	cmp	r3, #1
    33be:	d1e2      	bne.n	3386 <nrfx_gpiote_irq_handler+0xe2>
            call_handler(pin, trigger);
    33c0:	4639      	mov	r1, r7
    33c2:	4620      	mov	r0, r4
    33c4:	f7ff fcf6 	bl	2db4 <call_handler>
    33c8:	e7dd      	b.n	3386 <nrfx_gpiote_irq_handler+0xe2>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    33ca:	2102      	movs	r1, #2
    33cc:	4620      	mov	r0, r4
    33ce:	9301      	str	r3, [sp, #4]
    33d0:	f001 fe08 	bl	4fe4 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    33d4:	2d03      	cmp	r5, #3
    33d6:	d0f3      	beq.n	33c0 <nrfx_gpiote_irq_handler+0x11c>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    33d8:	9b01      	ldr	r3, [sp, #4]
    33da:	2b03      	cmp	r3, #3
    33dc:	d1d3      	bne.n	3386 <nrfx_gpiote_irq_handler+0xe2>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    33de:	2d02      	cmp	r5, #2
    33e0:	e7ed      	b.n	33be <nrfx_gpiote_irq_handler+0x11a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    33e2:	f8ca 417c 	str.w	r4, [sl, #380]	; 0x17c
    33e6:	f8da 317c 	ldr.w	r3, [sl, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    33ea:	f8d8 3020 	ldr.w	r3, [r8, #32]
    33ee:	4917      	ldr	r1, [pc, #92]	; (344c <nrfx_gpiote_irq_handler+0x1a8>)
    33f0:	9304      	str	r3, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    33f2:	f8c8 3020 	str.w	r3, [r8, #32]
        *p_masks = gpio_regs[i]->LATCH;
    33f6:	6a0a      	ldr	r2, [r1, #32]
        if (latch[port_idx])
    33f8:	4313      	orrs	r3, r2
    33fa:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    33fc:	620a      	str	r2, [r1, #32]
    33fe:	f47f af7a 	bne.w	32f6 <nrfx_gpiote_irq_handler+0x52>
        mask &= ~NRFX_BIT(ch);
    3402:	2401      	movs	r4, #1
    while (mask)
    3404:	b916      	cbnz	r6, 340c <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    3406:	b007      	add	sp, #28
    3408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    340c:	fa96 f3a6 	rbit	r3, r6
    3410:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3414:	fa04 f203 	lsl.w	r2, r4, r3
    3418:	009b      	lsls	r3, r3, #2
    341a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    341e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    3422:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3426:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    342a:	f3c0 2005 	ubfx	r0, r0, #8, #6
    342e:	f3c1 4101 	ubfx	r1, r1, #16, #2
        mask &= ~NRFX_BIT(ch);
    3432:	ea26 0602 	bic.w	r6, r6, r2
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    3436:	f7ff fcbd 	bl	2db4 <call_handler>
    343a:	e7e3      	b.n	3404 <nrfx_gpiote_irq_handler+0x160>
    343c:	5000d100 	.word	0x5000d100
    3440:	5000d000 	.word	0x5000d000
    3444:	5000d120 	.word	0x5000d120
    3448:	50842500 	.word	0x50842500
    344c:	50842800 	.word	0x50842800
    3450:	20000050 	.word	0x20000050

00003454 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3454:	4b0f      	ldr	r3, [pc, #60]	; (3494 <z_sys_init_run_level+0x40>)
{
    3456:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3458:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    345c:	3001      	adds	r0, #1
    345e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    3462:	42a6      	cmp	r6, r4
    3464:	d800      	bhi.n	3468 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    3466:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3468:	e9d4 3500 	ldrd	r3, r5, [r4]
    346c:	4628      	mov	r0, r5
    346e:	4798      	blx	r3
		if (dev != NULL) {
    3470:	b16d      	cbz	r5, 348e <z_sys_init_run_level+0x3a>
			if (rc != 0) {
    3472:	b138      	cbz	r0, 3484 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3474:	2800      	cmp	r0, #0
    3476:	bfb8      	it	lt
    3478:	4240      	neglt	r0, r0
				if (rc > UINT8_MAX) {
    347a:	28ff      	cmp	r0, #255	; 0xff
    347c:	bfa8      	it	ge
    347e:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    3480:	68eb      	ldr	r3, [r5, #12]
    3482:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3484:	68ea      	ldr	r2, [r5, #12]
    3486:	7853      	ldrb	r3, [r2, #1]
    3488:	f043 0301 	orr.w	r3, r3, #1
    348c:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    348e:	3408      	adds	r4, #8
    3490:	e7e7      	b.n	3462 <z_sys_init_run_level+0xe>
    3492:	bf00      	nop
    3494:	00005740 	.word	0x00005740

00003498 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    3498:	2201      	movs	r2, #1
{
    349a:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    349c:	4b09      	ldr	r3, [pc, #36]	; (34c4 <bg_thread_main+0x2c>)

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    349e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    34a0:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    34a2:	f7ff ffd7 	bl	3454 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    34a6:	f000 ff49 	bl	433c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    34aa:	2004      	movs	r0, #4
    34ac:	f7ff ffd2 	bl	3454 <z_sys_init_run_level>

	z_init_static_threads();
    34b0:	f000 f92a 	bl	3708 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    34b4:	f7fc ffb6 	bl	424 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    34b8:	4a03      	ldr	r2, [pc, #12]	; (34c8 <bg_thread_main+0x30>)
    34ba:	7b13      	ldrb	r3, [r2, #12]
    34bc:	f023 0301 	bic.w	r3, r3, #1
    34c0:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    34c2:	bd08      	pop	{r3, pc}
    34c4:	20000b03 	.word	0x20000b03
    34c8:	20000230 	.word	0x20000230

000034cc <z_bss_zero>:
{
    34cc:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    34ce:	4803      	ldr	r0, [pc, #12]	; (34dc <z_bss_zero+0x10>)
    34d0:	4a03      	ldr	r2, [pc, #12]	; (34e0 <z_bss_zero+0x14>)
    34d2:	2100      	movs	r1, #0
    34d4:	1a12      	subs	r2, r2, r0
    34d6:	f001 fdbb 	bl	5050 <z_early_memset>
}
    34da:	bd08      	pop	{r3, pc}
    34dc:	20000190 	.word	0x20000190
    34e0:	20000b04 	.word	0x20000b04

000034e4 <z_init_cpu>:

#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    34e4:	2300      	movs	r3, #0
    34e6:	2201      	movs	r2, #1
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    34e8:	b570      	push	{r4, r5, r6, lr}
    34ea:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    34ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
    34f0:	220f      	movs	r2, #15
    34f2:	9301      	str	r3, [sp, #4]
    34f4:	e9cd 3202 	strd	r3, r2, [sp, #8]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    34f8:	2318      	movs	r3, #24
	z_setup_new_thread(thread, stack,
    34fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    34fe:	4d0e      	ldr	r5, [pc, #56]	; (3538 <z_init_cpu+0x54>)
	struct k_thread *thread = &z_idle_threads[i];
    3500:	4e0e      	ldr	r6, [pc, #56]	; (353c <z_init_cpu+0x58>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3502:	fb03 5500 	mla	r5, r3, r0, r5
	z_setup_new_thread(thread, stack,
    3506:	490e      	ldr	r1, [pc, #56]	; (3540 <z_init_cpu+0x5c>)
	struct k_thread *thread = &z_idle_threads[i];
    3508:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    350c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    350e:	fb02 1100 	mla	r1, r2, r0, r1
    3512:	4b0c      	ldr	r3, [pc, #48]	; (3544 <z_init_cpu+0x60>)
    3514:	4630      	mov	r0, r6
    3516:	9500      	str	r5, [sp, #0]
    3518:	f000 f8c6 	bl	36a8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    351c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
    351e:	752c      	strb	r4, [r5, #20]
    3520:	f023 0304 	bic.w	r3, r3, #4
    3524:	7373      	strb	r3, [r6, #13]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3526:	4b08      	ldr	r3, [pc, #32]	; (3548 <z_init_cpu+0x64>)
    3528:	3401      	adds	r4, #1
    352a:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    352e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    3530:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    3532:	b006      	add	sp, #24
    3534:	bd70      	pop	{r4, r5, r6, pc}
    3536:	bf00      	nop
    3538:	200008f0 	.word	0x200008f0
    353c:	200001b0 	.word	0x200001b0
    3540:	20001308 	.word	0x20001308
    3544:	000037c1 	.word	0x000037c1
    3548:	20000b08 	.word	0x20000b08

0000354c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    354c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    354e:	2000      	movs	r0, #0
{
    3550:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3552:	f7ff ff7f 	bl	3454 <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3556:	4b2d      	ldr	r3, [pc, #180]	; (360c <z_cstart+0xc0>)
	uint32_t msp =
    3558:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    355c:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3560:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3564:	2400      	movs	r4, #0
    3566:	23e0      	movs	r3, #224	; 0xe0
    3568:	4d29      	ldr	r5, [pc, #164]	; (3610 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    356a:	4e2a      	ldr	r6, [pc, #168]	; (3614 <z_cstart+0xc8>)
    356c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3570:	77ec      	strb	r4, [r5, #31]
    3572:	762c      	strb	r4, [r5, #24]
    3574:	766c      	strb	r4, [r5, #25]
    3576:	76ac      	strb	r4, [r5, #26]
    3578:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    357c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    357e:	4f26      	ldr	r7, [pc, #152]	; (3618 <z_cstart+0xcc>)
    3580:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3584:	626b      	str	r3, [r5, #36]	; 0x24
    3586:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    358a:	f7fe f8db 	bl	1744 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    358e:	f7fd fecf 	bl	1330 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3596:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3598:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    359a:	f7fe fadd 	bl	1b58 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    359e:	f7fe f983 	bl	18a8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    35a2:	f240 1301 	movw	r3, #257	; 0x101
    35a6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    35aa:	ab06      	add	r3, sp, #24
    35ac:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    35ae:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    35b2:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    35b4:	f001 fd25 	bl	5002 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    35b8:	2001      	movs	r0, #1
    35ba:	f7ff ff4b 	bl	3454 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    35be:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    35c0:	4d16      	ldr	r5, [pc, #88]	; (361c <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    35c2:	f7ff ff47 	bl	3454 <z_sys_init_run_level>
	z_sched_init();
    35c6:	f000 fc4f 	bl	3e68 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    35ca:	4b15      	ldr	r3, [pc, #84]	; (3620 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    35cc:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    35ce:	9305      	str	r3, [sp, #20]
    35d0:	2301      	movs	r3, #1
    35d2:	4914      	ldr	r1, [pc, #80]	; (3624 <z_cstart+0xd8>)
    35d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    35d8:	e9cd 4303 	strd	r4, r3, [sp, #12]
    35dc:	4628      	mov	r0, r5
    35de:	463b      	mov	r3, r7
    35e0:	e9cd 4401 	strd	r4, r4, [sp, #4]
    35e4:	9400      	str	r4, [sp, #0]
    35e6:	f000 f85f 	bl	36a8 <z_setup_new_thread>
    35ea:	4606      	mov	r6, r0
    35ec:	7b6a      	ldrb	r2, [r5, #13]
	z_ready_thread(&z_main_thread);
    35ee:	4628      	mov	r0, r5
    35f0:	f022 0204 	bic.w	r2, r2, #4
    35f4:	736a      	strb	r2, [r5, #13]
    35f6:	f001 fdf4 	bl	51e2 <z_ready_thread>
	z_init_cpu(0);
    35fa:	4620      	mov	r0, r4
    35fc:	f7ff ff72 	bl	34e4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3600:	463a      	mov	r2, r7
    3602:	4631      	mov	r1, r6
    3604:	4628      	mov	r0, r5
    3606:	f7fd ff75 	bl	14f4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    360a:	bf00      	nop
    360c:	20000b08 	.word	0x20000b08
    3610:	e000ed00 	.word	0xe000ed00
    3614:	200008f0 	.word	0x200008f0
    3618:	00003499 	.word	0x00003499
    361c:	20000230 	.word	0x20000230
    3620:	000058c7 	.word	0x000058c7
    3624:	20001448 	.word	0x20001448

00003628 <init_mem_slab_module>:
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
	int rc = 0;
    3628:	2000      	movs	r0, #0
{
    362a:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    362c:	4c05      	ldr	r4, [pc, #20]	; (3644 <init_mem_slab_module+0x1c>)
    362e:	4d06      	ldr	r5, [pc, #24]	; (3648 <init_mem_slab_module+0x20>)
    3630:	42ac      	cmp	r4, r5
    3632:	d300      	bcc.n	3636 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    3634:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    3636:	4620      	mov	r0, r4
    3638:	f001 fd0e 	bl	5058 <create_free_list>
		if (rc < 0) {
    363c:	2800      	cmp	r0, #0
    363e:	dbf9      	blt.n	3634 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3640:	341c      	adds	r4, #28
    3642:	e7f5      	b.n	3630 <init_mem_slab_module+0x8>
    3644:	2000013c 	.word	0x2000013c
    3648:	2000013c 	.word	0x2000013c

0000364c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    364c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    364e:	460c      	mov	r4, r1
	__asm__ volatile(
    3650:	f04f 0520 	mov.w	r5, #32
    3654:	f3ef 8111 	mrs	r1, BASEPRI
    3658:	f385 8812 	msr	BASEPRI_MAX, r5
    365c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3660:	6945      	ldr	r5, [r0, #20]
    3662:	b15d      	cbz	r5, 367c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    3664:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    3666:	682b      	ldr	r3, [r5, #0]
    3668:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    366a:	6983      	ldr	r3, [r0, #24]
    366c:	3301      	adds	r3, #1
    366e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3670:	2000      	movs	r0, #0
	__asm__ volatile(
    3672:	f381 8811 	msr	BASEPRI, r1
    3676:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    367a:	e011      	b.n	36a0 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    367c:	ea52 0603 	orrs.w	r6, r2, r3
    3680:	d103      	bne.n	368a <k_mem_slab_alloc+0x3e>
		result = -ENOMEM;
    3682:	f06f 000b 	mvn.w	r0, #11
		*mem = NULL;
    3686:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    3688:	e7f3      	b.n	3672 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    368a:	e9cd 2300 	strd	r2, r3, [sp]
    368e:	4602      	mov	r2, r0
    3690:	3008      	adds	r0, #8
    3692:	f000 faf3 	bl	3c7c <z_pend_curr>
		if (result == 0) {
    3696:	b918      	cbnz	r0, 36a0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    3698:	4b02      	ldr	r3, [pc, #8]	; (36a4 <k_mem_slab_alloc+0x58>)
    369a:	689b      	ldr	r3, [r3, #8]
    369c:	695b      	ldr	r3, [r3, #20]
    369e:	6023      	str	r3, [r4, #0]
}
    36a0:	b002      	add	sp, #8
    36a2:	bd70      	pop	{r4, r5, r6, pc}
    36a4:	200008f0 	.word	0x200008f0

000036a8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    36a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    36ac:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    36ae:	f100 0558 	add.w	r5, r0, #88	; 0x58
    36b2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    36b4:	2604      	movs	r6, #4
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    36b6:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    36ba:	2500      	movs	r5, #0
{
    36bc:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    36be:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    36c0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    36c2:	e9c0 5506 	strd	r5, r5, [r0, #24]
    36c6:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    36c8:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    36ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    36cc:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    36d0:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    36d4:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    36d6:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    36d8:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    36da:	9202      	str	r2, [sp, #8]
    36dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    36de:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    36e2:	9201      	str	r2, [sp, #4]
    36e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    36e6:	9200      	str	r2, [sp, #0]
    36e8:	4642      	mov	r2, r8
    36ea:	f7fd fee7 	bl	14bc <arch_new_thread>
	if (!_current) {
    36ee:	4b05      	ldr	r3, [pc, #20]	; (3704 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    36f0:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    36f2:	689b      	ldr	r3, [r3, #8]
    36f4:	b103      	cbz	r3, 36f8 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    36f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    36f8:	4640      	mov	r0, r8
    36fa:	6723      	str	r3, [r4, #112]	; 0x70
    36fc:	b004      	add	sp, #16
    36fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3702:	bf00      	nop
    3704:	200008f0 	.word	0x200008f0

00003708 <z_init_static_threads>:
{
    3708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    370c:	4c29      	ldr	r4, [pc, #164]	; (37b4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    370e:	4d2a      	ldr	r5, [pc, #168]	; (37b8 <z_init_static_threads+0xb0>)
{
    3710:	b087      	sub	sp, #28
    3712:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    3714:	42ae      	cmp	r6, r5
    3716:	f104 0430 	add.w	r4, r4, #48	; 0x30
    371a:	d30f      	bcc.n	373c <z_init_static_threads+0x34>
	k_sched_lock();
    371c:	f000 fb74 	bl	3e08 <k_sched_lock>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3720:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3724:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    3728:	4c22      	ldr	r4, [pc, #136]	; (37b4 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    372a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 37bc <z_init_static_threads+0xb4>
    372e:	42ac      	cmp	r4, r5
    3730:	d320      	bcc.n	3774 <z_init_static_threads+0x6c>
}
    3732:	b007      	add	sp, #28
    3734:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3738:	f000 bb7a 	b.w	3e30 <k_sched_unlock>
		z_setup_new_thread(
    373c:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3740:	9305      	str	r3, [sp, #20]
    3742:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3746:	9304      	str	r3, [sp, #16]
    3748:	f854 3c14 	ldr.w	r3, [r4, #-20]
    374c:	9303      	str	r3, [sp, #12]
    374e:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3752:	9302      	str	r3, [sp, #8]
    3754:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3758:	9301      	str	r3, [sp, #4]
    375a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    375e:	9300      	str	r3, [sp, #0]
    3760:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3764:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3768:	f7ff ff9e 	bl	36a8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    376c:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3770:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3772:	e7ce      	b.n	3712 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3774:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3776:	1c5a      	adds	r2, r3, #1
    3778:	d00d      	beq.n	3796 <z_init_static_threads+0x8e>
    377a:	2100      	movs	r1, #0
    377c:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    377e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3782:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3786:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    378a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    378e:	d104      	bne.n	379a <z_init_static_threads+0x92>
	z_sched_start(thread);
    3790:	4640      	mov	r0, r8
    3792:	f000 fae9 	bl	3d68 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3796:	3430      	adds	r4, #48	; 0x30
    3798:	e7c9      	b.n	372e <z_init_static_threads+0x26>
    379a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    379e:	2300      	movs	r3, #0
    37a0:	f7fc fcd8 	bl	154 <__aeabi_uldivmod>
    37a4:	4602      	mov	r2, r0
    37a6:	460b      	mov	r3, r1
    37a8:	f108 0018 	add.w	r0, r8, #24
    37ac:	4649      	mov	r1, r9
    37ae:	f000 fcd1 	bl	4154 <z_add_timeout>
    37b2:	e7f0      	b.n	3796 <z_init_static_threads+0x8e>
    37b4:	000055dc 	.word	0x000055dc
    37b8:	000055dc 	.word	0x000055dc
    37bc:	0000514f 	.word	0x0000514f

000037c0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    37c0:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    37c2:	4c0b      	ldr	r4, [pc, #44]	; (37f0 <idle+0x30>)
	return !z_sys_post_kernel;
    37c4:	4d0b      	ldr	r5, [pc, #44]	; (37f4 <idle+0x34>)
	__asm__ volatile(
    37c6:	f04f 0220 	mov.w	r2, #32
    37ca:	f3ef 8311 	mrs	r3, BASEPRI
    37ce:	f382 8812 	msr	BASEPRI_MAX, r2
    37d2:	f3bf 8f6f 	isb	sy
    37d6:	f001 fd5c 	bl	5292 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    37da:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    37dc:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    37de:	b913      	cbnz	r3, 37e6 <idle+0x26>
	arch_cpu_idle();
    37e0:	f7fd fdac 	bl	133c <arch_cpu_idle>
}
    37e4:	e7ef      	b.n	37c6 <idle+0x6>
    37e6:	f7fd fbdd 	bl	fa4 <pm_system_suspend>
    37ea:	2800      	cmp	r0, #0
    37ec:	d1eb      	bne.n	37c6 <idle+0x6>
    37ee:	e7f7      	b.n	37e0 <idle+0x20>
    37f0:	200008f0 	.word	0x200008f0
    37f4:	20000b03 	.word	0x20000b03

000037f8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    37f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    37fc:	4604      	mov	r4, r0
    37fe:	4617      	mov	r7, r2
    3800:	461e      	mov	r6, r3
    3802:	f04f 0320 	mov.w	r3, #32
    3806:	f3ef 8811 	mrs	r8, BASEPRI
    380a:	f383 8812 	msr	BASEPRI_MAX, r3
    380e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3812:	68c3      	ldr	r3, [r0, #12]
    3814:	4a33      	ldr	r2, [pc, #204]	; (38e4 <z_impl_k_mutex_lock+0xec>)
    3816:	b17b      	cbz	r3, 3838 <z_impl_k_mutex_lock+0x40>
    3818:	6880      	ldr	r0, [r0, #8]
    381a:	6891      	ldr	r1, [r2, #8]
    381c:	4288      	cmp	r0, r1
    381e:	d019      	beq.n	3854 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3820:	ea57 0306 	orrs.w	r3, r7, r6
    3824:	d118      	bne.n	3858 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    3826:	f388 8811 	msr	BASEPRI, r8
    382a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    382e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3832:	b002      	add	sp, #8
    3834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3838:	6891      	ldr	r1, [r2, #8]
    383a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->lock_count++;
    383e:	3301      	adds	r3, #1
    3840:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3842:	6893      	ldr	r3, [r2, #8]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3844:	6121      	str	r1, [r4, #16]
		mutex->owner = _current;
    3846:	60a3      	str	r3, [r4, #8]
    3848:	f388 8811 	msr	BASEPRI, r8
    384c:	f3bf 8f6f 	isb	sy
		return 0;
    3850:	2000      	movs	r0, #0
    3852:	e7ee      	b.n	3832 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    3854:	6921      	ldr	r1, [r4, #16]
    3856:	e7f2      	b.n	383e <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3858:	f991 100e 	ldrsb.w	r1, [r1, #14]
    385c:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    3860:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    3864:	4299      	cmp	r1, r3
    3866:	bfa8      	it	ge
    3868:	4619      	movge	r1, r3
    386a:	4291      	cmp	r1, r2
    386c:	bfb8      	it	lt
    386e:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3870:	428b      	cmp	r3, r1
    3872:	dd2e      	ble.n	38d2 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    3874:	f001 fc4a 	bl	510c <adjust_owner_prio.isra.0>
    3878:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    387a:	4622      	mov	r2, r4
    387c:	4641      	mov	r1, r8
    387e:	e9cd 7600 	strd	r7, r6, [sp]
    3882:	4819      	ldr	r0, [pc, #100]	; (38e8 <z_impl_k_mutex_lock+0xf0>)
    3884:	f000 f9fa 	bl	3c7c <z_pend_curr>
	if (got_mutex == 0) {
    3888:	2800      	cmp	r0, #0
    388a:	d0e1      	beq.n	3850 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    388c:	f04f 0320 	mov.w	r3, #32
    3890:	f3ef 8611 	mrs	r6, BASEPRI
    3894:	f383 8812 	msr	BASEPRI_MAX, r3
    3898:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    389c:	68a0      	ldr	r0, [r4, #8]
    389e:	b1d0      	cbz	r0, 38d6 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    38a0:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    38a2:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    38a4:	429c      	cmp	r4, r3
    38a6:	d00a      	beq.n	38be <z_impl_k_mutex_lock+0xc6>
    38a8:	b14b      	cbz	r3, 38be <z_impl_k_mutex_lock+0xc6>
    38aa:	f993 300e 	ldrsb.w	r3, [r3, #14]
    38ae:	4299      	cmp	r1, r3
    38b0:	bfa8      	it	ge
    38b2:	4619      	movge	r1, r3
    38b4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    38b8:	4299      	cmp	r1, r3
    38ba:	bfb8      	it	lt
    38bc:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    38be:	f001 fc25 	bl	510c <adjust_owner_prio.isra.0>
    38c2:	b140      	cbz	r0, 38d6 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    38c4:	4631      	mov	r1, r6
    38c6:	4808      	ldr	r0, [pc, #32]	; (38e8 <z_impl_k_mutex_lock+0xf0>)
    38c8:	f000 fa3c 	bl	3d44 <z_reschedule>
	return -EAGAIN;
    38cc:	f06f 000a 	mvn.w	r0, #10
    38d0:	e7af      	b.n	3832 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    38d2:	2500      	movs	r5, #0
    38d4:	e7d1      	b.n	387a <z_impl_k_mutex_lock+0x82>
	if (resched) {
    38d6:	2d00      	cmp	r5, #0
    38d8:	d1f4      	bne.n	38c4 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    38da:	f386 8811 	msr	BASEPRI, r6
    38de:	f3bf 8f6f 	isb	sy
    38e2:	e7f3      	b.n	38cc <z_impl_k_mutex_lock+0xd4>
    38e4:	200008f0 	.word	0x200008f0
    38e8:	20000b04 	.word	0x20000b04

000038ec <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    38ec:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    38ee:	6883      	ldr	r3, [r0, #8]
{
    38f0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    38f2:	b36b      	cbz	r3, 3950 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    38f4:	4a19      	ldr	r2, [pc, #100]	; (395c <z_impl_k_mutex_unlock+0x70>)
    38f6:	6892      	ldr	r2, [r2, #8]
    38f8:	4293      	cmp	r3, r2
    38fa:	d12c      	bne.n	3956 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    38fc:	68c3      	ldr	r3, [r0, #12]
    38fe:	2b01      	cmp	r3, #1
    3900:	d903      	bls.n	390a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    3902:	3b01      	subs	r3, #1
    3904:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    3906:	2000      	movs	r0, #0
}
    3908:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    390a:	f04f 0320 	mov.w	r3, #32
    390e:	f3ef 8511 	mrs	r5, BASEPRI
    3912:	f383 8812 	msr	BASEPRI_MAX, r3
    3916:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    391a:	6901      	ldr	r1, [r0, #16]
    391c:	6880      	ldr	r0, [r0, #8]
    391e:	f001 fbf5 	bl	510c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3922:	4620      	mov	r0, r4
    3924:	f001 fc6d 	bl	5202 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3928:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    392a:	b158      	cbz	r0, 3944 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    392c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3930:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3932:	2200      	movs	r2, #0
    3934:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    3936:	f001 fc54 	bl	51e2 <z_ready_thread>
		z_reschedule(&lock, key);
    393a:	4629      	mov	r1, r5
    393c:	4808      	ldr	r0, [pc, #32]	; (3960 <z_impl_k_mutex_unlock+0x74>)
    393e:	f000 fa01 	bl	3d44 <z_reschedule>
    3942:	e7e0      	b.n	3906 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    3944:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3946:	f385 8811 	msr	BASEPRI, r5
    394a:	f3bf 8f6f 	isb	sy
    394e:	e7da      	b.n	3906 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    3950:	f06f 0015 	mvn.w	r0, #21
    3954:	e7d8      	b.n	3908 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    3956:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    395a:	e7d5      	b.n	3908 <z_impl_k_mutex_unlock+0x1c>
    395c:	200008f0 	.word	0x200008f0
    3960:	20000b04 	.word	0x20000b04

00003964 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3964:	b538      	push	{r3, r4, r5, lr}
    3966:	4604      	mov	r4, r0
	__asm__ volatile(
    3968:	f04f 0320 	mov.w	r3, #32
    396c:	f3ef 8511 	mrs	r5, BASEPRI
    3970:	f383 8812 	msr	BASEPRI_MAX, r3
    3974:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3978:	f001 fc43 	bl	5202 <z_unpend_first_thread>

	if (thread != NULL) {
    397c:	b148      	cbz	r0, 3992 <z_impl_k_sem_give+0x2e>
    397e:	2200      	movs	r2, #0
    3980:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3982:	f001 fc2e 	bl	51e2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3986:	4629      	mov	r1, r5

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    398c:	4804      	ldr	r0, [pc, #16]	; (39a0 <z_impl_k_sem_give+0x3c>)
    398e:	f000 b9d9 	b.w	3d44 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3992:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3996:	429a      	cmp	r2, r3
    3998:	bf18      	it	ne
    399a:	3301      	addne	r3, #1
    399c:	60a3      	str	r3, [r4, #8]
}
    399e:	e7f2      	b.n	3986 <z_impl_k_sem_give+0x22>
    39a0:	20000b04 	.word	0x20000b04

000039a4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    39a4:	b513      	push	{r0, r1, r4, lr}
    39a6:	f04f 0420 	mov.w	r4, #32
    39aa:	f3ef 8111 	mrs	r1, BASEPRI
    39ae:	f384 8812 	msr	BASEPRI_MAX, r4
    39b2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    39b6:	6884      	ldr	r4, [r0, #8]
    39b8:	b144      	cbz	r4, 39cc <z_impl_k_sem_take+0x28>
		sem->count--;
    39ba:	3c01      	subs	r4, #1
    39bc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    39be:	f381 8811 	msr	BASEPRI, r1
    39c2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    39c6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    39c8:	b002      	add	sp, #8
    39ca:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    39cc:	ea52 0403 	orrs.w	r4, r2, r3
    39d0:	d106      	bne.n	39e0 <z_impl_k_sem_take+0x3c>
    39d2:	f381 8811 	msr	BASEPRI, r1
    39d6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    39da:	f06f 000f 	mvn.w	r0, #15
    39de:	e7f3      	b.n	39c8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    39e0:	e9cd 2300 	strd	r2, r3, [sp]
    39e4:	4602      	mov	r2, r0
    39e6:	4802      	ldr	r0, [pc, #8]	; (39f0 <z_impl_k_sem_take+0x4c>)
    39e8:	f000 f948 	bl	3c7c <z_pend_curr>
	return ret;
    39ec:	e7ec      	b.n	39c8 <z_impl_k_sem_take+0x24>
    39ee:	bf00      	nop
    39f0:	20000b04 	.word	0x20000b04

000039f4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    39f4:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    39f6:	4d07      	ldr	r5, [pc, #28]	; (3a14 <z_reset_time_slice+0x20>)
    39f8:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    39fa:	b154      	cbz	r4, 3a12 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    39fc:	f7fe ff7a 	bl	28f4 <sys_clock_elapsed>
    3a00:	4b05      	ldr	r3, [pc, #20]	; (3a18 <z_reset_time_slice+0x24>)
    3a02:	4404      	add	r4, r0
    3a04:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    3a06:	6828      	ldr	r0, [r5, #0]
    3a08:	2100      	movs	r1, #0
	}
}
    3a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    3a0e:	f001 bc50 	b.w	52b2 <z_set_timeout_expiry>
}
    3a12:	bd38      	pop	{r3, r4, r5, pc}
    3a14:	20000920 	.word	0x20000920
    3a18:	200008f0 	.word	0x200008f0

00003a1c <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    3a1c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    3a1e:	4d0d      	ldr	r5, [pc, #52]	; (3a54 <update_cache+0x38>)
    3a20:	462b      	mov	r3, r5
    3a22:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a26:	429c      	cmp	r4, r3
    3a28:	d000      	beq.n	3a2c <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3a2a:	b904      	cbnz	r4, 3a2e <update_cache+0x12>
    3a2c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    3a2e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3a30:	b938      	cbnz	r0, 3a42 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    3a32:	7b5a      	ldrb	r2, [r3, #13]
    3a34:	06d2      	lsls	r2, r2, #27
    3a36:	d104      	bne.n	3a42 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3a38:	69a2      	ldr	r2, [r4, #24]
    3a3a:	b912      	cbnz	r2, 3a42 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    3a3c:	89da      	ldrh	r2, [r3, #14]
    3a3e:	2a7f      	cmp	r2, #127	; 0x7f
    3a40:	d805      	bhi.n	3a4e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    3a42:	429c      	cmp	r4, r3
    3a44:	d002      	beq.n	3a4c <update_cache+0x30>
			z_reset_time_slice(thread);
    3a46:	4620      	mov	r0, r4
    3a48:	f7ff ffd4 	bl	39f4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    3a4c:	4623      	mov	r3, r4
    3a4e:	61eb      	str	r3, [r5, #28]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    3a50:	bd38      	pop	{r3, r4, r5, pc}
    3a52:	bf00      	nop
    3a54:	200008f0 	.word	0x200008f0

00003a58 <move_thread_to_end_of_prio_q>:
{
    3a58:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3a5a:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    3a5e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3a60:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    3a62:	7b43      	ldrb	r3, [r0, #13]
    3a64:	da04      	bge.n	3a70 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3a6a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3a6c:	f001 fb5d 	bl	512a <sys_dlist_remove>
	return list->head == list;
    3a70:	4a15      	ldr	r2, [pc, #84]	; (3ac8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x30>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3a72:	7b4b      	ldrb	r3, [r1, #13]
    3a74:	4610      	mov	r0, r2
    3a76:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3a7a:	734b      	strb	r3, [r1, #13]
    3a7c:	f850 3f20 	ldr.w	r3, [r0, #32]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3a80:	6a54      	ldr	r4, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a82:	4283      	cmp	r3, r0
    3a84:	bf08      	it	eq
    3a86:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3a88:	b923      	cbnz	r3, 3a94 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    3a8a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    3a8e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3a90:	6251      	str	r1, [r2, #36]	; 0x24
}
    3a92:	e00c      	b.n	3aae <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x16>
	int32_t b1 = thread_1->base.prio;
    3a94:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3a98:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3a9c:	42b5      	cmp	r5, r6
    3a9e:	d00e      	beq.n	3abe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3aa0:	42ae      	cmp	r6, r5
    3aa2:	dd0c      	ble.n	3abe <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x26>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3aa4:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3aa6:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3aaa:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3aac:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3aae:	6890      	ldr	r0, [r2, #8]
}
    3ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3ab4:	1a43      	subs	r3, r0, r1
    3ab6:	4258      	negs	r0, r3
    3ab8:	4158      	adcs	r0, r3
    3aba:	f7ff bfaf 	b.w	3a1c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3abe:	429c      	cmp	r4, r3
    3ac0:	d0e3      	beq.n	3a8a <move_thread_to_end_of_prio_q+0x32>
    3ac2:	681b      	ldr	r3, [r3, #0]
    3ac4:	e7e0      	b.n	3a88 <move_thread_to_end_of_prio_q+0x30>
    3ac6:	bf00      	nop
    3ac8:	200008f0 	.word	0x200008f0

00003acc <ready_thread>:
{
    3acc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3ace:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3ad2:	7b42      	ldrb	r2, [r0, #13]
    3ad4:	2b00      	cmp	r3, #0
    3ad6:	db29      	blt.n	3b2c <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3ad8:	06d3      	lsls	r3, r2, #27
    3ada:	d127      	bne.n	3b2c <ready_thread+0x60>
	return node->next != NULL;
    3adc:	6983      	ldr	r3, [r0, #24]
    3ade:	bb2b      	cbnz	r3, 3b2c <ready_thread+0x60>
	return list->head == list;
    3ae0:	4913      	ldr	r1, [pc, #76]	; (3b30 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3ae2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3ae6:	7342      	strb	r2, [r0, #13]
    3ae8:	460a      	mov	r2, r1
    3aea:	f852 4f20 	ldr.w	r4, [r2, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3aee:	4294      	cmp	r4, r2
    3af0:	bf18      	it	ne
    3af2:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    3af4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3af6:	b923      	cbnz	r3, 3b02 <ready_thread+0x36>
	node->prev = tail;
    3af8:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    3afc:	6020      	str	r0, [r4, #0]
	list->tail = node;
    3afe:	6248      	str	r0, [r1, #36]	; 0x24
}
    3b00:	e00c      	b.n	3b1c <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    3b02:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    3b06:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    3b0a:	42b5      	cmp	r5, r6
    3b0c:	d00a      	beq.n	3b24 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3b0e:	42ae      	cmp	r6, r5
    3b10:	dd08      	ble.n	3b24 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    3b12:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3b14:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3b18:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3b1a:	6058      	str	r0, [r3, #4]
		update_cache(0);
    3b1c:	2000      	movs	r0, #0
}
    3b1e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3b20:	f7ff bf7c 	b.w	3a1c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3b24:	42a3      	cmp	r3, r4
    3b26:	d0e7      	beq.n	3af8 <ready_thread+0x2c>
    3b28:	681b      	ldr	r3, [r3, #0]
    3b2a:	e7e4      	b.n	3af6 <ready_thread+0x2a>
}
    3b2c:	bc70      	pop	{r4, r5, r6}
    3b2e:	4770      	bx	lr
    3b30:	200008f0 	.word	0x200008f0

00003b34 <unready_thread>:
{
    3b34:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3b36:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    3b3a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3b3c:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    3b3e:	7b43      	ldrb	r3, [r0, #13]
    3b40:	da04      	bge.n	3b4c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3b42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3b46:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3b48:	f001 faef 	bl	512a <sys_dlist_remove>
	update_cache(thread == _current);
    3b4c:	4b04      	ldr	r3, [pc, #16]	; (3b60 <unready_thread+0x2c>)
    3b4e:	6898      	ldr	r0, [r3, #8]
    3b50:	1a43      	subs	r3, r0, r1
    3b52:	4258      	negs	r0, r3
    3b54:	4158      	adcs	r0, r3
}
    3b56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3b5a:	f7ff bf5f 	b.w	3a1c <update_cache>
    3b5e:	bf00      	nop
    3b60:	200008f0 	.word	0x200008f0

00003b64 <pend_locked>:
{
    3b64:	b570      	push	{r4, r5, r6, lr}
    3b66:	4615      	mov	r5, r2
    3b68:	461c      	mov	r4, r3
    3b6a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    3b6c:	f001 fb11 	bl	5192 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3b70:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    3b74:	bf08      	it	eq
    3b76:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    3b7a:	d008      	beq.n	3b8e <pend_locked+0x2a>
    3b7c:	462a      	mov	r2, r5
    3b7e:	4623      	mov	r3, r4
    3b80:	f106 0018 	add.w	r0, r6, #24
    3b84:	4902      	ldr	r1, [pc, #8]	; (3b90 <pend_locked+0x2c>)
}
    3b86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3b8a:	f000 bae3 	b.w	4154 <z_add_timeout>
    3b8e:	bd70      	pop	{r4, r5, r6, pc}
    3b90:	0000514f 	.word	0x0000514f

00003b94 <k_sched_time_slice_set>:
{
    3b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b96:	4604      	mov	r4, r0
    3b98:	460d      	mov	r5, r1
	__asm__ volatile(
    3b9a:	f04f 0320 	mov.w	r3, #32
    3b9e:	f3ef 8711 	mrs	r7, BASEPRI
    3ba2:	f383 8812 	msr	BASEPRI_MAX, r3
    3ba6:	f3bf 8f6f 	isb	sy
			return (uint32_t)((t * to_hz + off) / from_hz);
    3baa:	2600      	movs	r6, #0
    3bac:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    3bb0:	f240 30e7 	movw	r0, #999	; 0x3e7
    3bb4:	4631      	mov	r1, r6
    3bb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3bba:	2300      	movs	r3, #0
    3bbc:	fbe4 010c 	umlal	r0, r1, r4, ip
    3bc0:	f7fc fac8 	bl	154 <__aeabi_uldivmod>
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3bc4:	42b4      	cmp	r4, r6
    3bc6:	dd02      	ble.n	3bce <k_sched_time_slice_set+0x3a>
			slice_ticks = MAX(2, slice_ticks);
    3bc8:	2802      	cmp	r0, #2
    3bca:	bfb8      	it	lt
    3bcc:	2002      	movlt	r0, #2
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    3bce:	4a07      	ldr	r2, [pc, #28]	; (3bec <k_sched_time_slice_set+0x58>)
		_current_cpu->slice_ticks = 0;
    3bd0:	4b07      	ldr	r3, [pc, #28]	; (3bf0 <k_sched_time_slice_set+0x5c>)
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    3bd2:	6010      	str	r0, [r2, #0]
		slice_max_prio = prio;
    3bd4:	4a07      	ldr	r2, [pc, #28]	; (3bf4 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    3bd6:	6898      	ldr	r0, [r3, #8]
		_current_cpu->slice_ticks = 0;
    3bd8:	611e      	str	r6, [r3, #16]
		slice_max_prio = prio;
    3bda:	6015      	str	r5, [r2, #0]
		z_reset_time_slice(_current);
    3bdc:	f7ff ff0a 	bl	39f4 <z_reset_time_slice>
	__asm__ volatile(
    3be0:	f387 8811 	msr	BASEPRI, r7
    3be4:	f3bf 8f6f 	isb	sy
}
    3be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bea:	bf00      	nop
    3bec:	20000920 	.word	0x20000920
    3bf0:	200008f0 	.word	0x200008f0
    3bf4:	2000091c 	.word	0x2000091c

00003bf8 <z_time_slice>:
{
    3bf8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3bfa:	f04f 0320 	mov.w	r3, #32
    3bfe:	f3ef 8511 	mrs	r5, BASEPRI
    3c02:	f383 8812 	msr	BASEPRI_MAX, r3
    3c06:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3c0a:	4b17      	ldr	r3, [pc, #92]	; (3c68 <z_time_slice+0x70>)
    3c0c:	4a17      	ldr	r2, [pc, #92]	; (3c6c <z_time_slice+0x74>)
    3c0e:	689c      	ldr	r4, [r3, #8]
    3c10:	6811      	ldr	r1, [r2, #0]
    3c12:	428c      	cmp	r4, r1
    3c14:	d107      	bne.n	3c26 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    3c16:	4620      	mov	r0, r4
    3c18:	f7ff feec 	bl	39f4 <z_reset_time_slice>
	__asm__ volatile(
    3c1c:	f385 8811 	msr	BASEPRI, r5
    3c20:	f3bf 8f6f 	isb	sy
}
    3c24:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    3c26:	2100      	movs	r1, #0
    3c28:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    3c2a:	4a11      	ldr	r2, [pc, #68]	; (3c70 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    3c2c:	6812      	ldr	r2, [r2, #0]
    3c2e:	b1c2      	cbz	r2, 3c62 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3c30:	89e2      	ldrh	r2, [r4, #14]
    3c32:	2a7f      	cmp	r2, #127	; 0x7f
    3c34:	d815      	bhi.n	3c62 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    3c36:	7b62      	ldrb	r2, [r4, #13]
    3c38:	06d2      	lsls	r2, r2, #27
    3c3a:	d112      	bne.n	3c62 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3c3c:	4a0d      	ldr	r2, [pc, #52]	; (3c74 <z_time_slice+0x7c>)
    3c3e:	f994 100e 	ldrsb.w	r1, [r4, #14]
    3c42:	6812      	ldr	r2, [r2, #0]
    3c44:	4291      	cmp	r1, r2
    3c46:	db0c      	blt.n	3c62 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3c48:	4a0b      	ldr	r2, [pc, #44]	; (3c78 <z_time_slice+0x80>)
    3c4a:	4294      	cmp	r4, r2
    3c4c:	d009      	beq.n	3c62 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    3c4e:	691a      	ldr	r2, [r3, #16]
    3c50:	4282      	cmp	r2, r0
    3c52:	dc03      	bgt.n	3c5c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    3c54:	4620      	mov	r0, r4
    3c56:	f7ff feff 	bl	3a58 <move_thread_to_end_of_prio_q>
    3c5a:	e7dc      	b.n	3c16 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    3c5c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    3c5e:	611a      	str	r2, [r3, #16]
    3c60:	e7dc      	b.n	3c1c <z_time_slice+0x24>
    3c62:	2200      	movs	r2, #0
    3c64:	e7fb      	b.n	3c5e <z_time_slice+0x66>
    3c66:	bf00      	nop
    3c68:	200008f0 	.word	0x200008f0
    3c6c:	20000918 	.word	0x20000918
    3c70:	20000920 	.word	0x20000920
    3c74:	2000091c 	.word	0x2000091c
    3c78:	200001b0 	.word	0x200001b0

00003c7c <z_pend_curr>:
{
    3c7c:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    3c7e:	480c      	ldr	r0, [pc, #48]	; (3cb0 <z_pend_curr+0x34>)
    3c80:	4d0c      	ldr	r5, [pc, #48]	; (3cb4 <z_pend_curr+0x38>)
    3c82:	6886      	ldr	r6, [r0, #8]
{
    3c84:	460c      	mov	r4, r1
	pending_current = _current;
    3c86:	602e      	str	r6, [r5, #0]
{
    3c88:	4611      	mov	r1, r2
    3c8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    3c8e:	f04f 0620 	mov.w	r6, #32
    3c92:	f3ef 8511 	mrs	r5, BASEPRI
    3c96:	f386 8812 	msr	BASEPRI_MAX, r6
    3c9a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    3c9e:	6880      	ldr	r0, [r0, #8]
    3ca0:	f7ff ff60 	bl	3b64 <pend_locked>
	ret = arch_swap(key);
    3ca4:	4620      	mov	r0, r4
}
    3ca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3caa:	f7fd bbb1 	b.w	1410 <arch_swap>
    3cae:	bf00      	nop
    3cb0:	200008f0 	.word	0x200008f0
    3cb4:	20000918 	.word	0x20000918

00003cb8 <z_set_prio>:
{
    3cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3cba:	4604      	mov	r4, r0
    3cbc:	f04f 0320 	mov.w	r3, #32
    3cc0:	f3ef 8611 	mrs	r6, BASEPRI
    3cc4:	f383 8812 	msr	BASEPRI_MAX, r3
    3cc8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    3ccc:	7b43      	ldrb	r3, [r0, #13]
				thread->base.prio = prio;
    3cce:	b249      	sxtb	r1, r1
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3cd0:	06da      	lsls	r2, r3, #27
    3cd2:	d119      	bne.n	3d08 <z_set_prio+0x50>
	return node->next != NULL;
    3cd4:	6985      	ldr	r5, [r0, #24]
    3cd6:	b9bd      	cbnz	r5, 3d08 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3cd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3cdc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3cde:	f001 fa24 	bl	512a <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3ce2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    3ce4:	4a16      	ldr	r2, [pc, #88]	; (3d40 <z_set_prio+0x88>)
    3ce6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3cea:	7343      	strb	r3, [r0, #13]
    3cec:	4613      	mov	r3, r2
				thread->base.prio = prio;
    3cee:	7381      	strb	r1, [r0, #14]
    3cf0:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3cf4:	4298      	cmp	r0, r3
    3cf6:	bf18      	it	ne
    3cf8:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    3cfa:	6a50      	ldr	r0, [r2, #36]	; 0x24
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3cfc:	b95d      	cbnz	r5, 3d16 <z_set_prio+0x5e>
	node->prev = tail;
    3cfe:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    3d02:	6004      	str	r4, [r0, #0]
	list->tail = node;
    3d04:	6254      	str	r4, [r2, #36]	; 0x24
}
    3d06:	e011      	b.n	3d2c <z_set_prio+0x74>
    3d08:	2000      	movs	r0, #0
			thread->base.prio = prio;
    3d0a:	73a1      	strb	r1, [r4, #14]
	__asm__ volatile(
    3d0c:	f386 8811 	msr	BASEPRI, r6
    3d10:	f3bf 8f6f 	isb	sy
}
    3d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    3d16:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    3d1a:	42b9      	cmp	r1, r7
    3d1c:	d00b      	beq.n	3d36 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3d1e:	428f      	cmp	r7, r1
    3d20:	dd09      	ble.n	3d36 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    3d22:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    3d24:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    3d28:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3d2a:	606c      	str	r4, [r5, #4]
			update_cache(1);
    3d2c:	2001      	movs	r0, #1
    3d2e:	f7ff fe75 	bl	3a1c <update_cache>
    3d32:	2001      	movs	r0, #1
    3d34:	e7ea      	b.n	3d0c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    3d36:	42a8      	cmp	r0, r5
    3d38:	d0e1      	beq.n	3cfe <z_set_prio+0x46>
    3d3a:	682d      	ldr	r5, [r5, #0]
    3d3c:	e7de      	b.n	3cfc <z_set_prio+0x44>
    3d3e:	bf00      	nop
    3d40:	200008f0 	.word	0x200008f0

00003d44 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3d44:	b949      	cbnz	r1, 3d5a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3d46:	f3ef 8005 	mrs	r0, IPSR
    3d4a:	b930      	cbnz	r0, 3d5a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3d4c:	4b05      	ldr	r3, [pc, #20]	; (3d64 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3d4e:	69da      	ldr	r2, [r3, #28]
    3d50:	689b      	ldr	r3, [r3, #8]
    3d52:	429a      	cmp	r2, r3
    3d54:	d001      	beq.n	3d5a <z_reschedule+0x16>
    3d56:	f7fd bb5b 	b.w	1410 <arch_swap>
    3d5a:	f381 8811 	msr	BASEPRI, r1
    3d5e:	f3bf 8f6f 	isb	sy
}
    3d62:	4770      	bx	lr
    3d64:	200008f0 	.word	0x200008f0

00003d68 <z_sched_start>:
{
    3d68:	b510      	push	{r4, lr}
	__asm__ volatile(
    3d6a:	f04f 0220 	mov.w	r2, #32
    3d6e:	f3ef 8411 	mrs	r4, BASEPRI
    3d72:	f382 8812 	msr	BASEPRI_MAX, r2
    3d76:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3d7a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3d7c:	0751      	lsls	r1, r2, #29
    3d7e:	d404      	bmi.n	3d8a <z_sched_start+0x22>
	__asm__ volatile(
    3d80:	f384 8811 	msr	BASEPRI, r4
    3d84:	f3bf 8f6f 	isb	sy
}
    3d88:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3d8a:	f022 0204 	bic.w	r2, r2, #4
    3d8e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3d90:	f7ff fe9c 	bl	3acc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3d94:	4621      	mov	r1, r4
}
    3d96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3d9a:	4801      	ldr	r0, [pc, #4]	; (3da0 <z_sched_start+0x38>)
    3d9c:	f7ff bfd2 	b.w	3d44 <z_reschedule>
    3da0:	20000b04 	.word	0x20000b04

00003da4 <z_impl_k_thread_suspend>:
{
    3da4:	b570      	push	{r4, r5, r6, lr}
    3da6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3da8:	3018      	adds	r0, #24
    3daa:	f001 fa5c 	bl	5266 <z_abort_timeout>
	__asm__ volatile(
    3dae:	f04f 0320 	mov.w	r3, #32
    3db2:	f3ef 8611 	mrs	r6, BASEPRI
    3db6:	f383 8812 	msr	BASEPRI_MAX, r3
    3dba:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3dbe:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    3dc2:	7b63      	ldrb	r3, [r4, #13]
    3dc4:	2a00      	cmp	r2, #0
    3dc6:	da05      	bge.n	3dd4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    3dcc:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3dce:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3dd0:	f001 f9ab 	bl	512a <sys_dlist_remove>
		update_cache(thread == _current);
    3dd4:	4d0b      	ldr	r5, [pc, #44]	; (3e04 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3dd6:	7b63      	ldrb	r3, [r4, #13]
    3dd8:	68a8      	ldr	r0, [r5, #8]
    3dda:	f043 0310 	orr.w	r3, r3, #16
    3dde:	7363      	strb	r3, [r4, #13]
    3de0:	1b03      	subs	r3, r0, r4
    3de2:	4258      	negs	r0, r3
    3de4:	4158      	adcs	r0, r3
    3de6:	f7ff fe19 	bl	3a1c <update_cache>
	__asm__ volatile(
    3dea:	f386 8811 	msr	BASEPRI, r6
    3dee:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3df2:	68ab      	ldr	r3, [r5, #8]
    3df4:	42a3      	cmp	r3, r4
    3df6:	d103      	bne.n	3e00 <z_impl_k_thread_suspend+0x5c>
}
    3df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3dfc:	f001 ba29 	b.w	5252 <z_reschedule_unlocked>
}
    3e00:	bd70      	pop	{r4, r5, r6, pc}
    3e02:	bf00      	nop
    3e04:	200008f0 	.word	0x200008f0

00003e08 <k_sched_lock>:
	__asm__ volatile(
    3e08:	f04f 0320 	mov.w	r3, #32
    3e0c:	f3ef 8111 	mrs	r1, BASEPRI
    3e10:	f383 8812 	msr	BASEPRI_MAX, r3
    3e14:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3e18:	4b04      	ldr	r3, [pc, #16]	; (3e2c <k_sched_lock+0x24>)
    3e1a:	689a      	ldr	r2, [r3, #8]
    3e1c:	7bd3      	ldrb	r3, [r2, #15]
    3e1e:	3b01      	subs	r3, #1
    3e20:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3e22:	f381 8811 	msr	BASEPRI, r1
    3e26:	f3bf 8f6f 	isb	sy
}
    3e2a:	4770      	bx	lr
    3e2c:	200008f0 	.word	0x200008f0

00003e30 <k_sched_unlock>:
{
    3e30:	b510      	push	{r4, lr}
	__asm__ volatile(
    3e32:	f04f 0320 	mov.w	r3, #32
    3e36:	f3ef 8411 	mrs	r4, BASEPRI
    3e3a:	f383 8812 	msr	BASEPRI_MAX, r3
    3e3e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3e42:	4b08      	ldr	r3, [pc, #32]	; (3e64 <k_sched_unlock+0x34>)
		update_cache(0);
    3e44:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    3e46:	689a      	ldr	r2, [r3, #8]
    3e48:	7bd3      	ldrb	r3, [r2, #15]
    3e4a:	3301      	adds	r3, #1
    3e4c:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3e4e:	f7ff fde5 	bl	3a1c <update_cache>
	__asm__ volatile(
    3e52:	f384 8811 	msr	BASEPRI, r4
    3e56:	f3bf 8f6f 	isb	sy
}
    3e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3e5e:	f001 b9f8 	b.w	5252 <z_reschedule_unlocked>
    3e62:	bf00      	nop
    3e64:	200008f0 	.word	0x200008f0

00003e68 <z_sched_init>:
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    3e68:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    3e6a:	4b04      	ldr	r3, [pc, #16]	; (3e7c <z_sched_init+0x14>)
    3e6c:	4608      	mov	r0, r1
    3e6e:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    3e72:	e9c3 2208 	strd	r2, r2, [r3, #32]
    3e76:	f7ff be8d 	b.w	3b94 <k_sched_time_slice_set>
    3e7a:	bf00      	nop
    3e7c:	200008f0 	.word	0x200008f0

00003e80 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    3e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3e82:	f04f 0320 	mov.w	r3, #32
    3e86:	f3ef 8511 	mrs	r5, BASEPRI
    3e8a:	f383 8812 	msr	BASEPRI_MAX, r3
    3e8e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    3e92:	4919      	ldr	r1, [pc, #100]	; (3ef8 <z_impl_k_yield+0x78>)
    3e94:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3e96:	7b43      	ldrb	r3, [r0, #13]
    3e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3e9c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3e9e:	f001 f944 	bl	512a <sys_dlist_remove>
	return list->head == list;
    3ea2:	4608      	mov	r0, r1
	}
	queue_thread(_current);
    3ea4:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3ea6:	7b5a      	ldrb	r2, [r3, #13]
    3ea8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3eac:	735a      	strb	r2, [r3, #13]
    3eae:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return (node == list->tail) ? NULL : node->next;
    3eb2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3eb4:	4282      	cmp	r2, r0
    3eb6:	bf08      	it	eq
    3eb8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3eba:	b922      	cbnz	r2, 3ec6 <z_impl_k_yield+0x46>
	node->prev = tail;
    3ebc:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    3ec0:	6023      	str	r3, [r4, #0]
	list->tail = node;
    3ec2:	624b      	str	r3, [r1, #36]	; 0x24
}
    3ec4:	e00c      	b.n	3ee0 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    3ec6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    3eca:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    3ece:	42be      	cmp	r6, r7
    3ed0:	d00e      	beq.n	3ef0 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3ed2:	42b7      	cmp	r7, r6
    3ed4:	dd0c      	ble.n	3ef0 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    3ed6:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3ed8:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    3edc:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3ede:	6053      	str	r3, [r2, #4]
	update_cache(1);
    3ee0:	2001      	movs	r0, #1
    3ee2:	f7ff fd9b 	bl	3a1c <update_cache>
    3ee6:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    3ee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3eec:	f7fd ba90 	b.w	1410 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3ef0:	42a2      	cmp	r2, r4
    3ef2:	d0e3      	beq.n	3ebc <z_impl_k_yield+0x3c>
    3ef4:	6812      	ldr	r2, [r2, #0]
    3ef6:	e7e0      	b.n	3eba <z_impl_k_yield+0x3a>
    3ef8:	200008f0 	.word	0x200008f0

00003efc <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    3efc:	ea50 0301 	orrs.w	r3, r0, r1
{
    3f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3f04:	4605      	mov	r5, r0
    3f06:	460e      	mov	r6, r1
	if (ticks == 0) {
    3f08:	d103      	bne.n	3f12 <z_tick_sleep+0x16>
	z_impl_k_yield();
    3f0a:	f7ff ffb9 	bl	3e80 <z_impl_k_yield>
		k_yield();
		return 0;
    3f0e:	2000      	movs	r0, #0
    3f10:	e02c      	b.n	3f6c <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    3f12:	1c83      	adds	r3, r0, #2
    3f14:	f171 33ff 	sbcs.w	r3, r1, #4294967295	; 0xffffffff
    3f18:	db2a      	blt.n	3f70 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    3f1a:	f001 f9e6 	bl	52ea <sys_clock_tick_get_32>
    3f1e:	1944      	adds	r4, r0, r5
    3f20:	f04f 0320 	mov.w	r3, #32
    3f24:	f3ef 8811 	mrs	r8, BASEPRI
    3f28:	f383 8812 	msr	BASEPRI_MAX, r3
    3f2c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    3f30:	4f11      	ldr	r7, [pc, #68]	; (3f78 <z_tick_sleep+0x7c>)
    3f32:	4b12      	ldr	r3, [pc, #72]	; (3f7c <z_tick_sleep+0x80>)
    3f34:	68b8      	ldr	r0, [r7, #8]
    3f36:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    3f38:	f7ff fdfc 	bl	3b34 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    3f3c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3f3e:	4910      	ldr	r1, [pc, #64]	; (3f80 <z_tick_sleep+0x84>)
    3f40:	462a      	mov	r2, r5
    3f42:	4633      	mov	r3, r6
    3f44:	3018      	adds	r0, #24
    3f46:	f000 f905 	bl	4154 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3f4a:	68ba      	ldr	r2, [r7, #8]
    3f4c:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3f4e:	7b53      	ldrb	r3, [r2, #13]
    3f50:	f043 0310 	orr.w	r3, r3, #16
    3f54:	7353      	strb	r3, [r2, #13]
    3f56:	f7fd fa5b 	bl	1410 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3f5a:	f001 f9c6 	bl	52ea <sys_clock_tick_get_32>
    3f5e:	1a20      	subs	r0, r4, r0
    3f60:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3f64:	2801      	cmp	r0, #1
    3f66:	f173 0300 	sbcs.w	r3, r3, #0
    3f6a:	dbd0      	blt.n	3f0e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    3f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    3f70:	f06f 0401 	mvn.w	r4, #1
    3f74:	1a24      	subs	r4, r4, r0
    3f76:	e7d3      	b.n	3f20 <z_tick_sleep+0x24>
    3f78:	200008f0 	.word	0x200008f0
    3f7c:	20000918 	.word	0x20000918
    3f80:	0000514f 	.word	0x0000514f

00003f84 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3f84:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    3f88:	bf08      	it	eq
    3f8a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    3f8e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3f90:	d106      	bne.n	3fa0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    3f92:	4b08      	ldr	r3, [pc, #32]	; (3fb4 <z_impl_k_sleep+0x30>)
    3f94:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3f96:	f7ff ff05 	bl	3da4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    3f9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    3f9e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    3fa0:	f7ff ffac 	bl	3efc <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    3fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3fa8:	fb80 0303 	smull	r0, r3, r0, r3
    3fac:	0bc0      	lsrs	r0, r0, #15
    3fae:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    3fb2:	e7f4      	b.n	3f9e <z_impl_k_sleep+0x1a>
    3fb4:	200008f0 	.word	0x200008f0

00003fb8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    3fb8:	4b01      	ldr	r3, [pc, #4]	; (3fc0 <z_impl_z_current_get+0x8>)
    3fba:	6898      	ldr	r0, [r3, #8]
    3fbc:	4770      	bx	lr
    3fbe:	bf00      	nop
    3fc0:	200008f0 	.word	0x200008f0

00003fc4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    3fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fc8:	4604      	mov	r4, r0
    3fca:	f04f 0320 	mov.w	r3, #32
    3fce:	f3ef 8611 	mrs	r6, BASEPRI
    3fd2:	f383 8812 	msr	BASEPRI_MAX, r3
    3fd6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    3fda:	7b03      	ldrb	r3, [r0, #12]
    3fdc:	07d9      	lsls	r1, r3, #31
    3fde:	d50b      	bpl.n	3ff8 <z_thread_abort+0x34>
	__asm__ volatile(
    3fe0:	f386 8811 	msr	BASEPRI, r6
    3fe4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    3fe8:	4040      	eors	r0, r0
    3fea:	f380 8811 	msr	BASEPRI, r0
    3fee:	f04f 0004 	mov.w	r0, #4
    3ff2:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    3ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    3ff8:	7b43      	ldrb	r3, [r0, #13]
    3ffa:	071a      	lsls	r2, r3, #28
    3ffc:	d504      	bpl.n	4008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
    3ffe:	f386 8811 	msr	BASEPRI, r6
    4002:	f3bf 8f6f 	isb	sy
    4006:	e7f5      	b.n	3ff4 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4008:	f023 0220 	bic.w	r2, r3, #32
    400c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    4010:	09d2      	lsrs	r2, r2, #7
    4012:	d120      	bne.n	4056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    4014:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    4016:	68a3      	ldr	r3, [r4, #8]
    4018:	b113      	cbz	r3, 4020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
			unpend_thread_no_timeout(thread);
    401a:	4620      	mov	r0, r4
    401c:	f001 f88d 	bl	513a <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    4020:	f104 0018 	add.w	r0, r4, #24
    4024:	f001 f91f 	bl	5266 <z_abort_timeout>
    4028:	f04f 0800 	mov.w	r8, #0
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    402c:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    4030:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4032:	42bd      	cmp	r5, r7
    4034:	d000      	beq.n	4038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    4036:	b9b5      	cbnz	r5, 4066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
		update_cache(1);
    4038:	2001      	movs	r0, #1
    403a:	f7ff fcef 	bl	3a1c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    403e:	4b10      	ldr	r3, [pc, #64]	; (4080 <CONFIG_FPROTECT_BLOCK_SIZE+0x80>)
    4040:	689b      	ldr	r3, [r3, #8]
    4042:	42a3      	cmp	r3, r4
    4044:	d1db      	bne.n	3ffe <z_thread_abort+0x3a>
    4046:	f3ef 8305 	mrs	r3, IPSR
    404a:	2b00      	cmp	r3, #0
    404c:	d1d7      	bne.n	3ffe <z_thread_abort+0x3a>
    404e:	4630      	mov	r0, r6
    4050:	f7fd f9de 	bl	1410 <arch_swap>
	return ret;
    4054:	e7d3      	b.n	3ffe <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4056:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    405a:	f043 0308 	orr.w	r3, r3, #8
    405e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    4060:	f001 f863 	bl	512a <sys_dlist_remove>
}
    4064:	e7d7      	b.n	4016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
		unpend_thread_no_timeout(thread);
    4066:	4628      	mov	r0, r5
    4068:	f001 f867 	bl	513a <unpend_thread_no_timeout>
    406c:	f105 0018 	add.w	r0, r5, #24
    4070:	f001 f8f9 	bl	5266 <z_abort_timeout>
		ready_thread(thread);
    4074:	4628      	mov	r0, r5
    4076:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    407a:	f7ff fd27 	bl	3acc <ready_thread>
    407e:	e7d7      	b.n	4030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    4080:	200008f0 	.word	0x200008f0

00004084 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4084:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4086:	4806      	ldr	r0, [pc, #24]	; (40a0 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4088:	4a06      	ldr	r2, [pc, #24]	; (40a4 <z_data_copy+0x20>)
    408a:	4907      	ldr	r1, [pc, #28]	; (40a8 <z_data_copy+0x24>)
    408c:	1a12      	subs	r2, r2, r0
    408e:	f000 ffe1 	bl	5054 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4096:	4a05      	ldr	r2, [pc, #20]	; (40ac <z_data_copy+0x28>)
    4098:	4905      	ldr	r1, [pc, #20]	; (40b0 <z_data_copy+0x2c>)
    409a:	4806      	ldr	r0, [pc, #24]	; (40b4 <z_data_copy+0x30>)
    409c:	f000 bfda 	b.w	5054 <z_early_memcpy>
    40a0:	20000000 	.word	0x20000000
    40a4:	2000018c 	.word	0x2000018c
    40a8:	000058fc 	.word	0x000058fc
    40ac:	00000000 	.word	0x00000000
    40b0:	000058fc 	.word	0x000058fc
    40b4:	20000000 	.word	0x20000000

000040b8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    40b8:	4b03      	ldr	r3, [pc, #12]	; (40c8 <elapsed+0x10>)
    40ba:	681b      	ldr	r3, [r3, #0]
    40bc:	b90b      	cbnz	r3, 40c2 <elapsed+0xa>
    40be:	f7fe bc19 	b.w	28f4 <sys_clock_elapsed>
}
    40c2:	2000      	movs	r0, #0
    40c4:	4770      	bx	lr
    40c6:	bf00      	nop
    40c8:	20000924 	.word	0x20000924

000040cc <next_timeout>:

static int32_t next_timeout(void)
{
    40cc:	b510      	push	{r4, lr}
	return list->head == list;
    40ce:	4b11      	ldr	r3, [pc, #68]	; (4114 <next_timeout+0x48>)
    40d0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    40d2:	429c      	cmp	r4, r3
    40d4:	d10a      	bne.n	40ec <next_timeout+0x20>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    40d6:	f7ff ffef 	bl	40b8 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    40da:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    40de:	4b0e      	ldr	r3, [pc, #56]	; (4118 <next_timeout+0x4c>)
    40e0:	691b      	ldr	r3, [r3, #16]
    40e2:	b113      	cbz	r3, 40ea <next_timeout+0x1e>
    40e4:	4298      	cmp	r0, r3
    40e6:	bfa8      	it	ge
    40e8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    40ea:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    40ec:	f7ff ffe4 	bl	40b8 <elapsed>
	if ((to == NULL) ||
    40f0:	2c00      	cmp	r4, #0
    40f2:	d0f2      	beq.n	40da <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    40f4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    40f8:	1a1b      	subs	r3, r3, r0
    40fa:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    40fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4102:	f172 0100 	sbcs.w	r1, r2, #0
    4106:	dae8      	bge.n	40da <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    4108:	2a00      	cmp	r2, #0
    410a:	bfac      	ite	ge
    410c:	4618      	movge	r0, r3
    410e:	2000      	movlt	r0, #0
    4110:	e7e5      	b.n	40de <next_timeout+0x12>
    4112:	bf00      	nop
    4114:	200000cc 	.word	0x200000cc
    4118:	200008f0 	.word	0x200008f0

0000411c <remove_timeout>:
{
    411c:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    411e:	b170      	cbz	r0, 413e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    4120:	4b0b      	ldr	r3, [pc, #44]	; (4150 <remove_timeout+0x34>)
    4122:	685b      	ldr	r3, [r3, #4]
    4124:	4298      	cmp	r0, r3
    4126:	d00a      	beq.n	413e <remove_timeout+0x22>
    4128:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    412a:	b143      	cbz	r3, 413e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    412c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4130:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4134:	1912      	adds	r2, r2, r4
    4136:	eb41 0105 	adc.w	r1, r1, r5
    413a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    413e:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    4142:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4144:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4146:	2300      	movs	r3, #0
	node->prev = NULL;
    4148:	e9c0 3300 	strd	r3, r3, [r0]
}
    414c:	bd30      	pop	{r4, r5, pc}
    414e:	bf00      	nop
    4150:	200000cc 	.word	0x200000cc

00004154 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4158:	bf08      	it	eq
    415a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    415e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4160:	4604      	mov	r4, r0
    4162:	461d      	mov	r5, r3
    4164:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4166:	d061      	beq.n	422c <z_add_timeout+0xd8>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4168:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    416a:	f04f 0320 	mov.w	r3, #32
    416e:	f3ef 8711 	mrs	r7, BASEPRI
    4172:	f383 8812 	msr	BASEPRI_MAX, r3
    4176:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    417a:	3201      	adds	r2, #1
    417c:	f175 33ff 	sbcs.w	r3, r5, #4294967295	; 0xffffffff
    4180:	da24      	bge.n	41cc <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4182:	f06f 0301 	mvn.w	r3, #1
    4186:	492f      	ldr	r1, [pc, #188]	; (4244 <z_add_timeout+0xf0>)
    4188:	e9d1 2000 	ldrd	r2, r0, [r1]
    418c:	1a9b      	subs	r3, r3, r2
    418e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4192:	eb62 0000 	sbc.w	r0, r2, r0
    4196:	1b9e      	subs	r6, r3, r6
    4198:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    419c:	2e01      	cmp	r6, #1
    419e:	f170 0300 	sbcs.w	r3, r0, #0
    41a2:	da01      	bge.n	41a8 <z_add_timeout+0x54>
    41a4:	2601      	movs	r6, #1
    41a6:	2000      	movs	r0, #0
    41a8:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    41ac:	4e26      	ldr	r6, [pc, #152]	; (4248 <z_add_timeout+0xf4>)
    41ae:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    41b2:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    41b4:	45b4      	cmp	ip, r6
    41b6:	bf08      	it	eq
    41b8:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    41bc:	f1bc 0f00 	cmp.w	ip, #0
    41c0:	d10d      	bne.n	41de <z_add_timeout+0x8a>
	node->prev = tail;
    41c2:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    41c6:	602c      	str	r4, [r5, #0]
	list->tail = node;
    41c8:	6074      	str	r4, [r6, #4]
}
    41ca:	e01c      	b.n	4206 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    41cc:	f7ff ff74 	bl	40b8 <elapsed>
    41d0:	3601      	adds	r6, #1
    41d2:	f145 0500 	adc.w	r5, r5, #0
    41d6:	1836      	adds	r6, r6, r0
    41d8:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    41dc:	e7e4      	b.n	41a8 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    41de:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    41e2:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    41e6:	4293      	cmp	r3, r2
    41e8:	eb71 0e00 	sbcs.w	lr, r1, r0
    41ec:	da1f      	bge.n	422e <z_add_timeout+0xda>
				t->dticks -= to->dticks;
    41ee:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    41f0:	f8dc 3004 	ldr.w	r3, [ip, #4]
    41f4:	eb60 0001 	sbc.w	r0, r0, r1
    41f8:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    41fc:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    4200:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4202:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    4206:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4208:	42b3      	cmp	r3, r6
    420a:	d00b      	beq.n	4224 <z_add_timeout+0xd0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    420c:	429c      	cmp	r4, r3
    420e:	d109      	bne.n	4224 <z_add_timeout+0xd0>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4210:	f7ff ff5c 	bl	40cc <next_timeout>

			if (next_time == 0 ||
    4214:	b118      	cbz	r0, 421e <z_add_timeout+0xca>
			    _current_cpu->slice_ticks != next_time) {
    4216:	4b0d      	ldr	r3, [pc, #52]	; (424c <z_add_timeout+0xf8>)
			if (next_time == 0 ||
    4218:	691b      	ldr	r3, [r3, #16]
    421a:	4283      	cmp	r3, r0
    421c:	d002      	beq.n	4224 <z_add_timeout+0xd0>
				sys_clock_set_timeout(next_time, false);
    421e:	2100      	movs	r1, #0
    4220:	f7fe fb38 	bl	2894 <sys_clock_set_timeout>
	__asm__ volatile(
    4224:	f387 8811 	msr	BASEPRI, r7
    4228:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    422c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    422e:	1a9b      	subs	r3, r3, r2
    4230:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    4234:	45ac      	cmp	ip, r5
    4236:	e9c4 3104 	strd	r3, r1, [r4, #16]
    423a:	d0c2      	beq.n	41c2 <z_add_timeout+0x6e>
    423c:	f8dc c000 	ldr.w	ip, [ip]
    4240:	e7bc      	b.n	41bc <z_add_timeout+0x68>
    4242:	bf00      	nop
    4244:	200002b0 	.word	0x200002b0
    4248:	200000cc 	.word	0x200000cc
    424c:	200008f0 	.word	0x200008f0

00004250 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4254:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4256:	f7ff fccf 	bl	3bf8 <z_time_slice>
	__asm__ volatile(
    425a:	f04f 0320 	mov.w	r3, #32
    425e:	f3ef 8611 	mrs	r6, BASEPRI
    4262:	f383 8812 	msr	BASEPRI_MAX, r3
    4266:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    426a:	4f24      	ldr	r7, [pc, #144]	; (42fc <sys_clock_announce+0xac>)
	return list->head == list;
    426c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4300 <sys_clock_announce+0xb0>
    4270:	f8d8 0000 	ldr.w	r0, [r8]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4274:	4a23      	ldr	r2, [pc, #140]	; (4304 <sys_clock_announce+0xb4>)
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4276:	4540      	cmp	r0, r8
	announce_remaining = ticks;
    4278:	603c      	str	r4, [r7, #0]
	return list->head == list;
    427a:	ea4f 71e4 	mov.w	r1, r4, asr #31
		curr_tick += dt;
    427e:	e9d2 3e00 	ldrd	r3, lr, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4282:	d00b      	beq.n	429c <sys_clock_announce+0x4c>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4284:	b150      	cbz	r0, 429c <sys_clock_announce+0x4c>
    4286:	e9d0 5c04 	ldrd	r5, ip, [r0, #16]
    428a:	42ac      	cmp	r4, r5
    428c:	eb71 090c 	sbcs.w	r9, r1, ip
    4290:	da17      	bge.n	42c2 <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4292:	1b2d      	subs	r5, r5, r4
    4294:	eb6c 0c01 	sbc.w	ip, ip, r1
    4298:	e9c0 5c04 	strd	r5, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    429c:	18e3      	adds	r3, r4, r3
	announce_remaining = 0;
    429e:	f04f 0400 	mov.w	r4, #0
	curr_tick += announce_remaining;
    42a2:	eb4e 0101 	adc.w	r1, lr, r1
    42a6:	e9c2 3100 	strd	r3, r1, [r2]
	announce_remaining = 0;
    42aa:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    42ac:	f7ff ff0e 	bl	40cc <next_timeout>
    42b0:	4621      	mov	r1, r4
    42b2:	f7fe faef 	bl	2894 <sys_clock_set_timeout>
	__asm__ volatile(
    42b6:	f386 8811 	msr	BASEPRI, r6
    42ba:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    42be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    42c2:	18eb      	adds	r3, r5, r3
    42c4:	eb4e 71e5 	adc.w	r1, lr, r5, asr #31
    42c8:	e9c2 3100 	strd	r3, r1, [r2]
		t->dticks = 0;
    42cc:	2200      	movs	r2, #0
    42ce:	2300      	movs	r3, #0
    42d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    42d4:	f7ff ff22 	bl	411c <remove_timeout>
    42d8:	f386 8811 	msr	BASEPRI, r6
    42dc:	f3bf 8f6f 	isb	sy
		t->fn(t);
    42e0:	6883      	ldr	r3, [r0, #8]
    42e2:	4798      	blx	r3
	__asm__ volatile(
    42e4:	f04f 0320 	mov.w	r3, #32
    42e8:	f3ef 8611 	mrs	r6, BASEPRI
    42ec:	f383 8812 	msr	BASEPRI_MAX, r3
    42f0:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    42f4:	683c      	ldr	r4, [r7, #0]
    42f6:	1b64      	subs	r4, r4, r5
    42f8:	e7ba      	b.n	4270 <sys_clock_announce+0x20>
    42fa:	bf00      	nop
    42fc:	20000924 	.word	0x20000924
    4300:	200000cc 	.word	0x200000cc
    4304:	200002b0 	.word	0x200002b0

00004308 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4308:	b510      	push	{r4, lr}
    430a:	f04f 0320 	mov.w	r3, #32
    430e:	f3ef 8411 	mrs	r4, BASEPRI
    4312:	f383 8812 	msr	BASEPRI_MAX, r3
    4316:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    431a:	f7ff fecd 	bl	40b8 <elapsed>
    431e:	4603      	mov	r3, r0
    4320:	4a05      	ldr	r2, [pc, #20]	; (4338 <sys_clock_tick_get+0x30>)
    4322:	e9d2 0100 	ldrd	r0, r1, [r2]
    4326:	1818      	adds	r0, r3, r0
    4328:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    432c:	f384 8811 	msr	BASEPRI, r4
    4330:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4334:	bd10      	pop	{r4, pc}
    4336:	bf00      	nop
    4338:	200002b0 	.word	0x200002b0

0000433c <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    433c:	4801      	ldr	r0, [pc, #4]	; (4344 <boot_banner+0x8>)
    433e:	f000 b999 	b.w	4674 <printk>
    4342:	bf00      	nop
    4344:	000058cc 	.word	0x000058cc

00004348 <nrf_cc3xx_platform_init_no_rng>:
    4348:	b510      	push	{r4, lr}
    434a:	4c0a      	ldr	r4, [pc, #40]	; (4374 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    434c:	6823      	ldr	r3, [r4, #0]
    434e:	b11b      	cbz	r3, 4358 <nrf_cc3xx_platform_init_no_rng+0x10>
    4350:	2301      	movs	r3, #1
    4352:	2000      	movs	r0, #0
    4354:	6023      	str	r3, [r4, #0]
    4356:	bd10      	pop	{r4, pc}
    4358:	f000 f8f4 	bl	4544 <CC_LibInitNoRng>
    435c:	2800      	cmp	r0, #0
    435e:	d0f7      	beq.n	4350 <nrf_cc3xx_platform_init_no_rng+0x8>
    4360:	3801      	subs	r0, #1
    4362:	2807      	cmp	r0, #7
    4364:	d803      	bhi.n	436e <nrf_cc3xx_platform_init_no_rng+0x26>
    4366:	4b04      	ldr	r3, [pc, #16]	; (4378 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4368:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    436c:	bd10      	pop	{r4, pc}
    436e:	4803      	ldr	r0, [pc, #12]	; (437c <nrf_cc3xx_platform_init_no_rng+0x34>)
    4370:	bd10      	pop	{r4, pc}
    4372:	bf00      	nop
    4374:	20000928 	.word	0x20000928
    4378:	00005758 	.word	0x00005758
    437c:	ffff8ffe 	.word	0xffff8ffe

00004380 <nrf_cc3xx_platform_abort>:
    4380:	f3bf 8f4f 	dsb	sy
    4384:	4905      	ldr	r1, [pc, #20]	; (439c <nrf_cc3xx_platform_abort+0x1c>)
    4386:	4b06      	ldr	r3, [pc, #24]	; (43a0 <nrf_cc3xx_platform_abort+0x20>)
    4388:	68ca      	ldr	r2, [r1, #12]
    438a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    438e:	4313      	orrs	r3, r2
    4390:	60cb      	str	r3, [r1, #12]
    4392:	f3bf 8f4f 	dsb	sy
    4396:	bf00      	nop
    4398:	e7fd      	b.n	4396 <nrf_cc3xx_platform_abort+0x16>
    439a:	bf00      	nop
    439c:	e000ed00 	.word	0xe000ed00
    43a0:	05fa0004 	.word	0x05fa0004

000043a4 <CC_PalAbort>:
    43a4:	b430      	push	{r4, r5}
    43a6:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    43aa:	2500      	movs	r5, #0
    43ac:	4b0b      	ldr	r3, [pc, #44]	; (43dc <CC_PalAbort+0x38>)
    43ae:	4c0c      	ldr	r4, [pc, #48]	; (43e0 <CC_PalAbort+0x3c>)
    43b0:	490c      	ldr	r1, [pc, #48]	; (43e4 <CC_PalAbort+0x40>)
    43b2:	6849      	ldr	r1, [r1, #4]
    43b4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    43b8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    43bc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    43c0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    43c4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    43c8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    43cc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    43d0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    43d4:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    43d8:	bc30      	pop	{r4, r5}
    43da:	4708      	bx	r1
    43dc:	50845000 	.word	0x50845000
    43e0:	50844000 	.word	0x50844000
    43e4:	200000d4 	.word	0x200000d4

000043e8 <nrf_cc3xx_platform_set_abort>:
    43e8:	4b02      	ldr	r3, [pc, #8]	; (43f4 <nrf_cc3xx_platform_set_abort+0xc>)
    43ea:	e9d0 1200 	ldrd	r1, r2, [r0]
    43ee:	e9c3 1200 	strd	r1, r2, [r3]
    43f2:	4770      	bx	lr
    43f4:	200000d4 	.word	0x200000d4

000043f8 <mutex_free>:
    43f8:	b510      	push	{r4, lr}
    43fa:	4604      	mov	r4, r0
    43fc:	b150      	cbz	r0, 4414 <mutex_free+0x1c>
    43fe:	6863      	ldr	r3, [r4, #4]
    4400:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4404:	d005      	beq.n	4412 <mutex_free+0x1a>
    4406:	4a06      	ldr	r2, [pc, #24]	; (4420 <mutex_free+0x28>)
    4408:	4293      	cmp	r3, r2
    440a:	d002      	beq.n	4412 <mutex_free+0x1a>
    440c:	2300      	movs	r3, #0
    440e:	6062      	str	r2, [r4, #4]
    4410:	6023      	str	r3, [r4, #0]
    4412:	bd10      	pop	{r4, pc}
    4414:	4b03      	ldr	r3, [pc, #12]	; (4424 <mutex_free+0x2c>)
    4416:	4804      	ldr	r0, [pc, #16]	; (4428 <mutex_free+0x30>)
    4418:	685b      	ldr	r3, [r3, #4]
    441a:	4798      	blx	r3
    441c:	e7ef      	b.n	43fe <mutex_free+0x6>
    441e:	bf00      	nop
    4420:	a95c5f2c 	.word	0xa95c5f2c
    4424:	200000d4 	.word	0x200000d4
    4428:	00005778 	.word	0x00005778

0000442c <mutex_lock>:
    442c:	b1c8      	cbz	r0, 4462 <mutex_lock+0x36>
    442e:	6843      	ldr	r3, [r0, #4]
    4430:	4a0d      	ldr	r2, [pc, #52]	; (4468 <mutex_lock+0x3c>)
    4432:	4293      	cmp	r3, r2
    4434:	d013      	beq.n	445e <mutex_lock+0x32>
    4436:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    443a:	d00e      	beq.n	445a <mutex_lock+0x2e>
    443c:	2301      	movs	r3, #1
    443e:	e850 2f00 	ldrex	r2, [r0]
    4442:	4619      	mov	r1, r3
    4444:	e840 1c00 	strex	ip, r1, [r0]
    4448:	f09c 0f00 	teq	ip, #0
    444c:	d1f7      	bne.n	443e <mutex_lock+0x12>
    444e:	2a01      	cmp	r2, #1
    4450:	d0f5      	beq.n	443e <mutex_lock+0x12>
    4452:	f3bf 8f5f 	dmb	sy
    4456:	2000      	movs	r0, #0
    4458:	4770      	bx	lr
    445a:	4804      	ldr	r0, [pc, #16]	; (446c <mutex_lock+0x40>)
    445c:	4770      	bx	lr
    445e:	4804      	ldr	r0, [pc, #16]	; (4470 <mutex_lock+0x44>)
    4460:	4770      	bx	lr
    4462:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4466:	4770      	bx	lr
    4468:	a95c5f2c 	.word	0xa95c5f2c
    446c:	ffff8fe9 	.word	0xffff8fe9
    4470:	ffff8fea 	.word	0xffff8fea

00004474 <mutex_unlock>:
    4474:	4603      	mov	r3, r0
    4476:	b180      	cbz	r0, 449a <mutex_unlock+0x26>
    4478:	6842      	ldr	r2, [r0, #4]
    447a:	4909      	ldr	r1, [pc, #36]	; (44a0 <mutex_unlock+0x2c>)
    447c:	428a      	cmp	r2, r1
    447e:	d00a      	beq.n	4496 <mutex_unlock+0x22>
    4480:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    4484:	d005      	beq.n	4492 <mutex_unlock+0x1e>
    4486:	f3bf 8f5f 	dmb	sy
    448a:	2200      	movs	r2, #0
    448c:	4610      	mov	r0, r2
    448e:	601a      	str	r2, [r3, #0]
    4490:	4770      	bx	lr
    4492:	4804      	ldr	r0, [pc, #16]	; (44a4 <mutex_unlock+0x30>)
    4494:	4770      	bx	lr
    4496:	4804      	ldr	r0, [pc, #16]	; (44a8 <mutex_unlock+0x34>)
    4498:	4770      	bx	lr
    449a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    449e:	4770      	bx	lr
    44a0:	a95c5f2c 	.word	0xa95c5f2c
    44a4:	ffff8fe9 	.word	0xffff8fe9
    44a8:	ffff8fea 	.word	0xffff8fea

000044ac <mutex_init>:
    44ac:	b510      	push	{r4, lr}
    44ae:	4604      	mov	r4, r0
    44b0:	b120      	cbz	r0, 44bc <mutex_init+0x10>
    44b2:	2300      	movs	r3, #0
    44b4:	4a03      	ldr	r2, [pc, #12]	; (44c4 <mutex_init+0x18>)
    44b6:	6023      	str	r3, [r4, #0]
    44b8:	6062      	str	r2, [r4, #4]
    44ba:	bd10      	pop	{r4, pc}
    44bc:	4802      	ldr	r0, [pc, #8]	; (44c8 <mutex_init+0x1c>)
    44be:	f7ff ff71 	bl	43a4 <CC_PalAbort>
    44c2:	e7f6      	b.n	44b2 <mutex_init+0x6>
    44c4:	3a00003a 	.word	0x3a00003a
    44c8:	000057a0 	.word	0x000057a0

000044cc <nrf_cc3xx_platform_set_mutexes>:
    44cc:	b570      	push	{r4, r5, r6, lr}
    44ce:	4c19      	ldr	r4, [pc, #100]	; (4534 <nrf_cc3xx_platform_set_mutexes+0x68>)
    44d0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    44d4:	6806      	ldr	r6, [r0, #0]
    44d6:	f8c4 c004 	str.w	ip, [r4, #4]
    44da:	f8d0 c008 	ldr.w	ip, [r0, #8]
    44de:	68c0      	ldr	r0, [r0, #12]
    44e0:	f8c4 c008 	str.w	ip, [r4, #8]
    44e4:	60e0      	str	r0, [r4, #12]
    44e6:	6026      	str	r6, [r4, #0]
    44e8:	6808      	ldr	r0, [r1, #0]
    44ea:	4b13      	ldr	r3, [pc, #76]	; (4538 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    44ec:	4d13      	ldr	r5, [pc, #76]	; (453c <nrf_cc3xx_platform_set_mutexes+0x70>)
    44ee:	6018      	str	r0, [r3, #0]
    44f0:	6848      	ldr	r0, [r1, #4]
    44f2:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    44f6:	6058      	str	r0, [r3, #4]
    44f8:	6888      	ldr	r0, [r1, #8]
    44fa:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    44fe:	6098      	str	r0, [r3, #8]
    4500:	68c8      	ldr	r0, [r1, #12]
    4502:	6909      	ldr	r1, [r1, #16]
    4504:	60d8      	str	r0, [r3, #12]
    4506:	6119      	str	r1, [r3, #16]
    4508:	d012      	beq.n	4530 <nrf_cc3xx_platform_set_mutexes+0x64>
    450a:	2300      	movs	r3, #0
    450c:	4a0c      	ldr	r2, [pc, #48]	; (4540 <nrf_cc3xx_platform_set_mutexes+0x74>)
    450e:	f505 708a 	add.w	r0, r5, #276	; 0x114
    4512:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    4516:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    451a:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    451e:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    4522:	47b0      	blx	r6
    4524:	6823      	ldr	r3, [r4, #0]
    4526:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    452a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    452e:	4718      	bx	r3
    4530:	bd70      	pop	{r4, r5, r6, pc}
    4532:	bf00      	nop
    4534:	200000e4 	.word	0x200000e4
    4538:	200000f4 	.word	0x200000f4
    453c:	20000940 	.word	0x20000940
    4540:	a95c5f2c 	.word	0xa95c5f2c

00004544 <CC_LibInitNoRng>:
    4544:	b508      	push	{r3, lr}
    4546:	f000 f811 	bl	456c <CC_HalInit>
    454a:	b930      	cbnz	r0, 455a <CC_LibInitNoRng+0x16>
    454c:	f000 f810 	bl	4570 <CC_PalInit>
    4550:	b938      	cbnz	r0, 4562 <CC_LibInitNoRng+0x1e>
    4552:	4a05      	ldr	r2, [pc, #20]	; (4568 <CC_LibInitNoRng+0x24>)
    4554:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    4558:	bd08      	pop	{r3, pc}
    455a:	f000 f837 	bl	45cc <CC_PalTerminate>
    455e:	2003      	movs	r0, #3
    4560:	bd08      	pop	{r3, pc}
    4562:	2004      	movs	r0, #4
    4564:	bd08      	pop	{r3, pc}
    4566:	bf00      	nop
    4568:	50845000 	.word	0x50845000

0000456c <CC_HalInit>:
    456c:	2000      	movs	r0, #0
    456e:	4770      	bx	lr

00004570 <CC_PalInit>:
    4570:	b510      	push	{r4, lr}
    4572:	4811      	ldr	r0, [pc, #68]	; (45b8 <CC_PalInit+0x48>)
    4574:	f000 f848 	bl	4608 <CC_PalMutexCreate>
    4578:	b100      	cbz	r0, 457c <CC_PalInit+0xc>
    457a:	bd10      	pop	{r4, pc}
    457c:	480f      	ldr	r0, [pc, #60]	; (45bc <CC_PalInit+0x4c>)
    457e:	f000 f843 	bl	4608 <CC_PalMutexCreate>
    4582:	2800      	cmp	r0, #0
    4584:	d1f9      	bne.n	457a <CC_PalInit+0xa>
    4586:	4c0e      	ldr	r4, [pc, #56]	; (45c0 <CC_PalInit+0x50>)
    4588:	4620      	mov	r0, r4
    458a:	f000 f83d 	bl	4608 <CC_PalMutexCreate>
    458e:	2800      	cmp	r0, #0
    4590:	d1f3      	bne.n	457a <CC_PalInit+0xa>
    4592:	4b0c      	ldr	r3, [pc, #48]	; (45c4 <CC_PalInit+0x54>)
    4594:	480c      	ldr	r0, [pc, #48]	; (45c8 <CC_PalInit+0x58>)
    4596:	601c      	str	r4, [r3, #0]
    4598:	f000 f836 	bl	4608 <CC_PalMutexCreate>
    459c:	4601      	mov	r1, r0
    459e:	2800      	cmp	r0, #0
    45a0:	d1eb      	bne.n	457a <CC_PalInit+0xa>
    45a2:	f000 f82d 	bl	4600 <CC_PalDmaInit>
    45a6:	4604      	mov	r4, r0
    45a8:	b108      	cbz	r0, 45ae <CC_PalInit+0x3e>
    45aa:	4620      	mov	r0, r4
    45ac:	bd10      	pop	{r4, pc}
    45ae:	f000 f83f 	bl	4630 <CC_PalPowerSaveModeInit>
    45b2:	4620      	mov	r0, r4
    45b4:	e7fa      	b.n	45ac <CC_PalInit+0x3c>
    45b6:	bf00      	nop
    45b8:	2000012c 	.word	0x2000012c
    45bc:	20000120 	.word	0x20000120
    45c0:	20000128 	.word	0x20000128
    45c4:	20000130 	.word	0x20000130
    45c8:	20000124 	.word	0x20000124

000045cc <CC_PalTerminate>:
    45cc:	b508      	push	{r3, lr}
    45ce:	4808      	ldr	r0, [pc, #32]	; (45f0 <CC_PalTerminate+0x24>)
    45d0:	f000 f824 	bl	461c <CC_PalMutexDestroy>
    45d4:	4807      	ldr	r0, [pc, #28]	; (45f4 <CC_PalTerminate+0x28>)
    45d6:	f000 f821 	bl	461c <CC_PalMutexDestroy>
    45da:	4807      	ldr	r0, [pc, #28]	; (45f8 <CC_PalTerminate+0x2c>)
    45dc:	f000 f81e 	bl	461c <CC_PalMutexDestroy>
    45e0:	4806      	ldr	r0, [pc, #24]	; (45fc <CC_PalTerminate+0x30>)
    45e2:	f000 f81b 	bl	461c <CC_PalMutexDestroy>
    45e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    45ea:	f000 b80b 	b.w	4604 <CC_PalDmaTerminate>
    45ee:	bf00      	nop
    45f0:	2000012c 	.word	0x2000012c
    45f4:	20000120 	.word	0x20000120
    45f8:	20000128 	.word	0x20000128
    45fc:	20000124 	.word	0x20000124

00004600 <CC_PalDmaInit>:
    4600:	2000      	movs	r0, #0
    4602:	4770      	bx	lr

00004604 <CC_PalDmaTerminate>:
    4604:	4770      	bx	lr
    4606:	bf00      	nop

00004608 <CC_PalMutexCreate>:
    4608:	b508      	push	{r3, lr}
    460a:	4b03      	ldr	r3, [pc, #12]	; (4618 <CC_PalMutexCreate+0x10>)
    460c:	6802      	ldr	r2, [r0, #0]
    460e:	681b      	ldr	r3, [r3, #0]
    4610:	6810      	ldr	r0, [r2, #0]
    4612:	4798      	blx	r3
    4614:	2000      	movs	r0, #0
    4616:	bd08      	pop	{r3, pc}
    4618:	200000e4 	.word	0x200000e4

0000461c <CC_PalMutexDestroy>:
    461c:	b508      	push	{r3, lr}
    461e:	4b03      	ldr	r3, [pc, #12]	; (462c <CC_PalMutexDestroy+0x10>)
    4620:	6802      	ldr	r2, [r0, #0]
    4622:	685b      	ldr	r3, [r3, #4]
    4624:	6810      	ldr	r0, [r2, #0]
    4626:	4798      	blx	r3
    4628:	2000      	movs	r0, #0
    462a:	bd08      	pop	{r3, pc}
    462c:	200000e4 	.word	0x200000e4

00004630 <CC_PalPowerSaveModeInit>:
    4630:	b570      	push	{r4, r5, r6, lr}
    4632:	4c09      	ldr	r4, [pc, #36]	; (4658 <CC_PalPowerSaveModeInit+0x28>)
    4634:	4d09      	ldr	r5, [pc, #36]	; (465c <CC_PalPowerSaveModeInit+0x2c>)
    4636:	6920      	ldr	r0, [r4, #16]
    4638:	68ab      	ldr	r3, [r5, #8]
    463a:	4798      	blx	r3
    463c:	b118      	cbz	r0, 4646 <CC_PalPowerSaveModeInit+0x16>
    463e:	4b08      	ldr	r3, [pc, #32]	; (4660 <CC_PalPowerSaveModeInit+0x30>)
    4640:	4808      	ldr	r0, [pc, #32]	; (4664 <CC_PalPowerSaveModeInit+0x34>)
    4642:	685b      	ldr	r3, [r3, #4]
    4644:	4798      	blx	r3
    4646:	2100      	movs	r1, #0
    4648:	4a07      	ldr	r2, [pc, #28]	; (4668 <CC_PalPowerSaveModeInit+0x38>)
    464a:	68eb      	ldr	r3, [r5, #12]
    464c:	6011      	str	r1, [r2, #0]
    464e:	6920      	ldr	r0, [r4, #16]
    4650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4654:	4718      	bx	r3
    4656:	bf00      	nop
    4658:	200000f4 	.word	0x200000f4
    465c:	200000e4 	.word	0x200000e4
    4660:	200000d4 	.word	0x200000d4
    4664:	000057c4 	.word	0x000057c4
    4668:	2000093c 	.word	0x2000093c

0000466c <sum>:
#include "myfunction.h"

int sum(int a, int b){
    return a+b;
    466c:	4408      	add	r0, r1
    466e:	4770      	bx	lr

00004670 <arch_printk_char_out>:
}
    4670:	2000      	movs	r0, #0
    4672:	4770      	bx	lr

00004674 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    4674:	b40f      	push	{r0, r1, r2, r3}
    4676:	b507      	push	{r0, r1, r2, lr}
    4678:	a904      	add	r1, sp, #16
    467a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    467e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    4680:	f7fb fef0 	bl	464 <vprintk>

	va_end(ap);
}
    4684:	b003      	add	sp, #12
    4686:	f85d eb04 	ldr.w	lr, [sp], #4
    468a:	b004      	add	sp, #16
    468c:	4770      	bx	lr

0000468e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    468e:	4604      	mov	r4, r0
    4690:	b508      	push	{r3, lr}
    4692:	4608      	mov	r0, r1
    4694:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4696:	461a      	mov	r2, r3
    4698:	47a0      	blx	r4
	return z_impl_z_current_get();
    469a:	f7ff fc8d 	bl	3fb8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    469e:	f7fd f8ed 	bl	187c <z_impl_k_thread_abort>

000046a2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    46a2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    46a4:	f013 0307 	ands.w	r3, r3, #7
    46a8:	d105      	bne.n	46b6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    46aa:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    46ac:	2b00      	cmp	r3, #0
    46ae:	bf0c      	ite	eq
    46b0:	2000      	moveq	r0, #0
    46b2:	2003      	movne	r0, #3
    46b4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    46b6:	2b02      	cmp	r3, #2
    46b8:	d105      	bne.n	46c6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    46ba:	8b40      	ldrh	r0, [r0, #26]
    46bc:	fab0 f080 	clz	r0, r0
    46c0:	0940      	lsrs	r0, r0, #5
    46c2:	0080      	lsls	r0, r0, #2
    46c4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    46c6:	2b01      	cmp	r3, #1
    46c8:	d105      	bne.n	46d6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    46ca:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    46cc:	2b00      	cmp	r3, #0
    46ce:	bf0c      	ite	eq
    46d0:	2000      	moveq	r0, #0
    46d2:	2005      	movne	r0, #5
    46d4:	4770      	bx	lr
	int evt = EVT_NOP;
    46d6:	2000      	movs	r0, #0
}
    46d8:	4770      	bx	lr

000046da <validate_args>:
{
    46da:	b510      	push	{r4, lr}
    46dc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    46de:	b100      	cbz	r0, 46e2 <validate_args+0x8>
    46e0:	b911      	cbnz	r1, 46e8 <validate_args+0xe>
		return -EINVAL;
    46e2:	f06f 0015 	mvn.w	r0, #21
}
    46e6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    46e8:	1d08      	adds	r0, r1, #4
    46ea:	f000 f895 	bl	4818 <sys_notify_validate>
	if ((rv == 0)
    46ee:	2800      	cmp	r0, #0
    46f0:	d1f9      	bne.n	46e6 <validate_args+0xc>
	    && ((cli->notify.flags
    46f2:	68a3      	ldr	r3, [r4, #8]
    46f4:	2b03      	cmp	r3, #3
    46f6:	d9f6      	bls.n	46e6 <validate_args+0xc>
    46f8:	e7f3      	b.n	46e2 <validate_args+0x8>

000046fa <notify_one>:
{
    46fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46fe:	460d      	mov	r5, r1
    4700:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4702:	4619      	mov	r1, r3
    4704:	1d28      	adds	r0, r5, #4
{
    4706:	4690      	mov	r8, r2
    4708:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    470a:	f000 f896 	bl	483a <sys_notify_finalize>
	if (cb) {
    470e:	4604      	mov	r4, r0
    4710:	b138      	cbz	r0, 4722 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4712:	4633      	mov	r3, r6
    4714:	4642      	mov	r2, r8
    4716:	4629      	mov	r1, r5
    4718:	4638      	mov	r0, r7
    471a:	46a4      	mov	ip, r4
}
    471c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4720:	4760      	bx	ip
}
    4722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004726 <transition_complete>:
{
    4726:	b410      	push	{r4}
	__asm__ volatile(
    4728:	f04f 0420 	mov.w	r4, #32
    472c:	f3ef 8211 	mrs	r2, BASEPRI
    4730:	f384 8812 	msr	BASEPRI_MAX, r4
    4734:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4738:	6141      	str	r1, [r0, #20]
}
    473a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    473c:	2101      	movs	r1, #1
    473e:	f7fb be9f 	b.w	480 <process_event>

00004742 <onoff_manager_init>:
{
    4742:	b538      	push	{r3, r4, r5, lr}
    4744:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4746:	4605      	mov	r5, r0
    4748:	b158      	cbz	r0, 4762 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    474a:	b151      	cbz	r1, 4762 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    474c:	680b      	ldr	r3, [r1, #0]
    474e:	b143      	cbz	r3, 4762 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4750:	684b      	ldr	r3, [r1, #4]
    4752:	b133      	cbz	r3, 4762 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4754:	221c      	movs	r2, #28
    4756:	2100      	movs	r1, #0
    4758:	f000 f93a 	bl	49d0 <memset>
	return 0;
    475c:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    475e:	612c      	str	r4, [r5, #16]
}
    4760:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4762:	f06f 0015 	mvn.w	r0, #21
    4766:	e7fb      	b.n	4760 <onoff_manager_init+0x1e>

00004768 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4768:	b570      	push	{r4, r5, r6, lr}
    476a:	4605      	mov	r5, r0
    476c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    476e:	f7ff ffb4 	bl	46da <validate_args>

	if (rv < 0) {
    4772:	1e04      	subs	r4, r0, #0
    4774:	db15      	blt.n	47a2 <onoff_request+0x3a>
    4776:	f04f 0320 	mov.w	r3, #32
    477a:	f3ef 8211 	mrs	r2, BASEPRI
    477e:	f383 8812 	msr	BASEPRI_MAX, r3
    4782:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4786:	f64f 71ff 	movw	r1, #65535	; 0xffff
    478a:	8b6b      	ldrh	r3, [r5, #26]
    478c:	8b2c      	ldrh	r4, [r5, #24]
    478e:	428b      	cmp	r3, r1
    4790:	f004 0407 	and.w	r4, r4, #7
    4794:	d107      	bne.n	47a6 <onoff_request+0x3e>
	__asm__ volatile(
    4796:	f382 8811 	msr	BASEPRI, r2
    479a:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    479e:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    47a2:	4620      	mov	r0, r4
    47a4:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    47a6:	2c02      	cmp	r4, #2
    47a8:	d10c      	bne.n	47c4 <onoff_request+0x5c>
		mgr->refs += 1U;
    47aa:	3301      	adds	r3, #1
    47ac:	836b      	strh	r3, [r5, #26]
    47ae:	f382 8811 	msr	BASEPRI, r2
    47b2:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    47b6:	2300      	movs	r3, #0
    47b8:	4622      	mov	r2, r4
    47ba:	4631      	mov	r1, r6
    47bc:	4628      	mov	r0, r5
    47be:	f7ff ff9c 	bl	46fa <notify_one>
    47c2:	e7ee      	b.n	47a2 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    47c4:	2c06      	cmp	r4, #6
    47c6:	d814      	bhi.n	47f2 <onoff_request+0x8a>
    47c8:	e8df f004 	tbb	[pc, r4]
    47cc:	13131304 	.word	0x13131304
    47d0:	1a04      	.short	0x1a04
    47d2:	04          	.byte	0x04
    47d3:	00          	.byte	0x00
	parent->next = child;
    47d4:	2300      	movs	r3, #0
    47d6:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    47d8:	686b      	ldr	r3, [r5, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    47da:	b93b      	cbnz	r3, 47ec <onoff_request+0x84>
	list->head = node;
    47dc:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    47e0:	b9ac      	cbnz	r4, 480e <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    47e2:	2102      	movs	r1, #2
    47e4:	4628      	mov	r0, r5
    47e6:	f7fb fe4b 	bl	480 <process_event>
    47ea:	e7da      	b.n	47a2 <onoff_request+0x3a>
	parent->next = child;
    47ec:	601e      	str	r6, [r3, #0]
	list->tail = node;
    47ee:	606e      	str	r6, [r5, #4]
}
    47f0:	e7f6      	b.n	47e0 <onoff_request+0x78>
    47f2:	f382 8811 	msr	BASEPRI, r2
    47f6:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    47fa:	f06f 0404 	mvn.w	r4, #4
    47fe:	e7d0      	b.n	47a2 <onoff_request+0x3a>
    4800:	f382 8811 	msr	BASEPRI, r2
    4804:	f3bf 8f6f 	isb	sy
    4808:	f06f 0485 	mvn.w	r4, #133	; 0x85
    480c:	e7c9      	b.n	47a2 <onoff_request+0x3a>
    480e:	f382 8811 	msr	BASEPRI, r2
    4812:	f3bf 8f6f 	isb	sy
		if (notify) {
    4816:	e7c4      	b.n	47a2 <onoff_request+0x3a>

00004818 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4818:	4603      	mov	r3, r0
    481a:	b158      	cbz	r0, 4834 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    481c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    481e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4822:	2a01      	cmp	r2, #1
    4824:	d003      	beq.n	482e <sys_notify_validate+0x16>
    4826:	2a03      	cmp	r2, #3
    4828:	d104      	bne.n	4834 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    482a:	6802      	ldr	r2, [r0, #0]
    482c:	b112      	cbz	r2, 4834 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    482e:	2000      	movs	r0, #0
    4830:	6098      	str	r0, [r3, #8]
    4832:	4770      	bx	lr
    4834:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4838:	4770      	bx	lr

0000483a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    483a:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    483c:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    483e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    4842:	2a03      	cmp	r2, #3
    4844:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    4848:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = NULL;
    484a:	bf14      	ite	ne
    484c:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    484e:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4850:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4852:	4770      	bx	lr

00004854 <encode_uint>:
{
    4854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4858:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    485a:	78d3      	ldrb	r3, [r2, #3]
{
    485c:	4680      	mov	r8, r0
	switch (specifier) {
    485e:	2b6f      	cmp	r3, #111	; 0x6f
{
    4860:	460f      	mov	r7, r1
    4862:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4864:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    4868:	d029      	beq.n	48be <encode_uint+0x6a>
    486a:	d824      	bhi.n	48b6 <encode_uint+0x62>
		return 10;
    486c:	2b58      	cmp	r3, #88	; 0x58
    486e:	bf0c      	ite	eq
    4870:	2610      	moveq	r6, #16
    4872:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    4874:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    4878:	4632      	mov	r2, r6
    487a:	2300      	movs	r3, #0
    487c:	4640      	mov	r0, r8
    487e:	4639      	mov	r1, r7
    4880:	f7fb fc68 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4884:	2a09      	cmp	r2, #9
    4886:	b2d4      	uxtb	r4, r2
    4888:	d81e      	bhi.n	48c8 <encode_uint+0x74>
    488a:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    488c:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    488e:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    4890:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4894:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    4898:	d301      	bcc.n	489e <encode_uint+0x4a>
    489a:	45d1      	cmp	r9, sl
    489c:	d811      	bhi.n	48c2 <encode_uint+0x6e>
	if (conv->flag_hash) {
    489e:	782b      	ldrb	r3, [r5, #0]
    48a0:	069b      	lsls	r3, r3, #26
    48a2:	d505      	bpl.n	48b0 <encode_uint+0x5c>
		if (radix == 8) {
    48a4:	2e08      	cmp	r6, #8
    48a6:	d115      	bne.n	48d4 <encode_uint+0x80>
			conv->altform_0 = true;
    48a8:	78ab      	ldrb	r3, [r5, #2]
    48aa:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    48ae:	70ab      	strb	r3, [r5, #2]
}
    48b0:	4648      	mov	r0, r9
    48b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    48b6:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    48ba:	2b70      	cmp	r3, #112	; 0x70
    48bc:	e7d7      	b.n	486e <encode_uint+0x1a>
	switch (specifier) {
    48be:	2608      	movs	r6, #8
    48c0:	e7d8      	b.n	4874 <encode_uint+0x20>
		value /= radix;
    48c2:	4680      	mov	r8, r0
    48c4:	460f      	mov	r7, r1
    48c6:	e7d7      	b.n	4878 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    48c8:	f1bb 0f19 	cmp.w	fp, #25
    48cc:	bf94      	ite	ls
    48ce:	3437      	addls	r4, #55	; 0x37
    48d0:	3457      	addhi	r4, #87	; 0x57
    48d2:	e7db      	b.n	488c <encode_uint+0x38>
		} else if (radix == 16) {
    48d4:	2e10      	cmp	r6, #16
    48d6:	d1eb      	bne.n	48b0 <encode_uint+0x5c>
			conv->altform_0c = true;
    48d8:	78ab      	ldrb	r3, [r5, #2]
    48da:	f043 0310 	orr.w	r3, r3, #16
    48de:	e7e6      	b.n	48ae <encode_uint+0x5a>

000048e0 <outs>:
{
    48e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48e4:	4607      	mov	r7, r0
    48e6:	4688      	mov	r8, r1
    48e8:	4615      	mov	r5, r2
    48ea:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    48ec:	4614      	mov	r4, r2
    48ee:	42b4      	cmp	r4, r6
    48f0:	d305      	bcc.n	48fe <outs+0x1e>
    48f2:	b10e      	cbz	r6, 48f8 <outs+0x18>
	return (int)count;
    48f4:	1b60      	subs	r0, r4, r5
    48f6:	e008      	b.n	490a <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    48f8:	7823      	ldrb	r3, [r4, #0]
    48fa:	2b00      	cmp	r3, #0
    48fc:	d0fa      	beq.n	48f4 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    48fe:	4641      	mov	r1, r8
    4900:	f814 0b01 	ldrb.w	r0, [r4], #1
    4904:	47b8      	blx	r7
		if (rc < 0) {
    4906:	2800      	cmp	r0, #0
    4908:	daf1      	bge.n	48ee <outs+0xe>
}
    490a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000490e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_MYFUNCTION, 1);

GEN_ABS_SYM_END
    490e:	4770      	bx	lr

00004910 <pm_state_exit_post_ops>:
    4910:	2300      	movs	r3, #0
    4912:	f383 8811 	msr	BASEPRI, r3
    4916:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    491a:	4770      	bx	lr

0000491c <abort_function>:
	sys_reboot(SYS_REBOOT_WARM);
    491c:	2000      	movs	r0, #0
{
    491e:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    4920:	f7fc fa6e 	bl	e00 <sys_reboot>

00004924 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4924:	f000 bb79 	b.w	501a <z_fatal_error>

00004928 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    4928:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    492a:	6800      	ldr	r0, [r0, #0]
    492c:	f000 bb75 	b.w	501a <z_fatal_error>

00004930 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4930:	2100      	movs	r1, #0
    4932:	2001      	movs	r0, #1
    4934:	f7ff bff6 	b.w	4924 <z_arm_fatal_error>

00004938 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    4938:	b508      	push	{r3, lr}
	handler();
    493a:	f7fc fd49 	bl	13d0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    493e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4942:	f7fc be0b 	b.w	155c <z_arm_exc_exit>

00004946 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    4946:	6e43      	ldr	r3, [r0, #100]	; 0x64
    4948:	f383 880b 	msr	PSPLIM, r3
}
    494c:	4770      	bx	lr

0000494e <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    494e:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    4952:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4956:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    4958:	bf08      	it	eq
    495a:	f06f 0015 	mvneq.w	r0, #21
    495e:	4770      	bx	lr

00004960 <mpu_configure_region>:
{
    4960:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    4962:	890a      	ldrh	r2, [r1, #8]
    4964:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    4966:	680b      	ldr	r3, [r1, #0]
		&new_region->attr, new_region->start, new_region->size);
    4968:	684d      	ldr	r5, [r1, #4]
    496a:	f002 021f 	and.w	r2, r2, #31
    496e:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    4972:	9300      	str	r3, [sp, #0]
    4974:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    4978:	f023 031f 	bic.w	r3, r3, #31
    497c:	1e6a      	subs	r2, r5, #1
    497e:	4413      	add	r3, r2
    4980:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    4984:	2807      	cmp	r0, #7
    4986:	9303      	str	r3, [sp, #12]
    4988:	d804      	bhi.n	4994 <mpu_configure_region+0x34>
	region_init(index, region_conf);
    498a:	4669      	mov	r1, sp
    498c:	f7fc ffa8 	bl	18e0 <region_init>
}
    4990:	b004      	add	sp, #16
    4992:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    4994:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    4998:	e7fa      	b.n	4990 <mpu_configure_region+0x30>

0000499a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    499a:	4603      	mov	r3, r0
	size_t n = 0;
    499c:	2000      	movs	r0, #0

	while (*s != '\0') {
    499e:	5c1a      	ldrb	r2, [r3, r0]
    49a0:	b902      	cbnz	r2, 49a4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    49a2:	4770      	bx	lr
		n++;
    49a4:	3001      	adds	r0, #1
    49a6:	e7fa      	b.n	499e <strlen+0x4>

000049a8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    49a8:	4603      	mov	r3, r0
	size_t n = 0;
    49aa:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    49ac:	5c1a      	ldrb	r2, [r3, r0]
    49ae:	b10a      	cbz	r2, 49b4 <strnlen+0xc>
    49b0:	4288      	cmp	r0, r1
    49b2:	d100      	bne.n	49b6 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    49b4:	4770      	bx	lr
		n++;
    49b6:	3001      	adds	r0, #1
    49b8:	e7f8      	b.n	49ac <strnlen+0x4>

000049ba <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    49ba:	b510      	push	{r4, lr}
    49bc:	1e43      	subs	r3, r0, #1
    49be:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    49c0:	4291      	cmp	r1, r2
    49c2:	d100      	bne.n	49c6 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    49c4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    49c6:	f811 4b01 	ldrb.w	r4, [r1], #1
    49ca:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    49ce:	e7f7      	b.n	49c0 <memcpy+0x6>

000049d0 <memset>:

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    49d0:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;
    49d2:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    49d4:	4402      	add	r2, r0
    49d6:	4293      	cmp	r3, r2
    49d8:	d100      	bne.n	49dc <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    49da:	4770      	bx	lr
		*(d_byte++) = c_byte;
    49dc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    49e0:	e7f9      	b.n	49d6 <memset+0x6>

000049e2 <_stdout_hook_default>:
}
    49e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    49e6:	4770      	bx	lr

000049e8 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    49e8:	220c      	movs	r2, #12
    49ea:	6903      	ldr	r3, [r0, #16]
    49ec:	b2c9      	uxtb	r1, r1
    49ee:	fb01 3302 	mla	r3, r1, r2, r3
    49f2:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    49f4:	f000 0007 	and.w	r0, r0, #7
    49f8:	4770      	bx	lr

000049fa <set_on_state>:
	__asm__ volatile(
    49fa:	f04f 0320 	mov.w	r3, #32
    49fe:	f3ef 8211 	mrs	r2, BASEPRI
    4a02:	f383 8812 	msr	BASEPRI_MAX, r3
    4a06:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    4a0a:	6803      	ldr	r3, [r0, #0]
    4a0c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4a10:	f043 0302 	orr.w	r3, r3, #2
    4a14:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    4a16:	f382 8811 	msr	BASEPRI, r2
    4a1a:	f3bf 8f6f 	isb	sy
}
    4a1e:	4770      	bx	lr

00004a20 <stop>:
{
    4a20:	b570      	push	{r4, r5, r6, lr}
    4a22:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    4a24:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    4a26:	f04f 0420 	mov.w	r4, #32
    4a2a:	f3ef 8511 	mrs	r5, BASEPRI
    4a2e:	f384 8812 	msr	BASEPRI_MAX, r4
    4a32:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4a36:	260c      	movs	r6, #12
    4a38:	fb06 3401 	mla	r4, r6, r1, r3
    4a3c:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4a3e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    4a42:	d008      	beq.n	4a56 <stop+0x36>
    4a44:	42a2      	cmp	r2, r4
    4a46:	d006      	beq.n	4a56 <stop+0x36>
	__asm__ volatile(
    4a48:	f385 8811 	msr	BASEPRI, r5
    4a4c:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    4a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4a54:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4a56:	2201      	movs	r2, #1
    4a58:	fb06 3301 	mla	r3, r6, r1, r3
    4a5c:	679a      	str	r2, [r3, #120]	; 0x78
    4a5e:	f385 8811 	msr	BASEPRI, r5
    4a62:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    4a66:	6843      	ldr	r3, [r0, #4]
    4a68:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    4a6c:	685b      	ldr	r3, [r3, #4]
    4a6e:	4798      	blx	r3
	return 0;
    4a70:	2000      	movs	r0, #0
    4a72:	e7ef      	b.n	4a54 <stop+0x34>

00004a74 <api_stop>:
	return stop(dev, subsys, CTX_API);
    4a74:	2280      	movs	r2, #128	; 0x80
    4a76:	f7ff bfd3 	b.w	4a20 <stop>

00004a7a <async_start>:
{
    4a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a7c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4a7e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    4a80:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    4a82:	f04f 0520 	mov.w	r5, #32
    4a86:	f3ef 8611 	mrs	r6, BASEPRI
    4a8a:	f385 8812 	msr	BASEPRI_MAX, r5
    4a8e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4a92:	250c      	movs	r5, #12
    4a94:	fb05 4401 	mla	r4, r5, r1, r4
    4a98:	6fa5      	ldr	r5, [r4, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4a9a:	f005 0c07 	and.w	ip, r5, #7
    4a9e:	f1bc 0f01 	cmp.w	ip, #1
    4aa2:	d10c      	bne.n	4abe <async_start+0x44>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4aa4:	67a7      	str	r7, [r4, #120]	; 0x78
	__asm__ volatile(
    4aa6:	f386 8811 	msr	BASEPRI, r6
    4aaa:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    4aae:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    4ab2:	6843      	ldr	r3, [r0, #4]
    4ab4:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    4ab8:	4798      	blx	r3
	return 0;
    4aba:	2000      	movs	r0, #0
}
    4abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4abe:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    4ac2:	42af      	cmp	r7, r5
    4ac4:	f386 8811 	msr	BASEPRI, r6
    4ac8:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    4acc:	bf0c      	ite	eq
    4ace:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    4ad2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    4ad6:	e7f1      	b.n	4abc <async_start+0x42>

00004ad8 <api_start>:
{
    4ad8:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    4ada:	2480      	movs	r4, #128	; 0x80
    4adc:	9400      	str	r4, [sp, #0]
    4ade:	f7ff ffcc 	bl	4a7a <async_start>
}
    4ae2:	b002      	add	sp, #8
    4ae4:	bd10      	pop	{r4, pc}

00004ae6 <onoff_started_callback>:
{
    4ae6:	b410      	push	{r4}
	notify(mgr, 0);
    4ae8:	241c      	movs	r4, #28
	return &data->mgr[type];
    4aea:	6900      	ldr	r0, [r0, #16]
    4aec:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    4aee:	fb03 0004 	mla	r0, r3, r4, r0
    4af2:	2100      	movs	r1, #0
}
    4af4:	bc10      	pop	{r4}
	notify(mgr, 0);
    4af6:	4710      	bx	r2

00004af8 <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    4af8:	2003      	movs	r0, #3
    4afa:	f000 b9c9 	b.w	4e90 <nrfx_clock_start>

00004afe <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    4afe:	2002      	movs	r0, #2
    4b00:	f000 b9c6 	b.w	4e90 <nrfx_clock_start>

00004b04 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    4b04:	2000      	movs	r0, #0
    4b06:	f000 b9c3 	b.w	4e90 <nrfx_clock_start>

00004b0a <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    4b0a:	2003      	movs	r0, #3
    4b0c:	f000 ba1f 	b.w	4f4e <nrfx_clock_stop>

00004b10 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    4b10:	2002      	movs	r0, #2
    4b12:	f000 ba1c 	b.w	4f4e <nrfx_clock_stop>

00004b16 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4b16:	2000      	movs	r0, #0
    4b18:	f000 ba19 	b.w	4f4e <nrfx_clock_stop>

00004b1c <blocking_start_callback>:
{
    4b1c:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    4b1e:	f7fe bf21 	b.w	3964 <z_impl_k_sem_give>

00004b22 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4b22:	6843      	ldr	r3, [r0, #4]
}
    4b24:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4b26:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    4b28:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    4b2a:	600b      	str	r3, [r1, #0]
}
    4b2c:	4770      	bx	lr

00004b2e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4b2e:	6843      	ldr	r3, [r0, #4]
	const uint32_t set_mask = value & mask;
    4b30:	ea02 0001 	and.w	r0, r2, r1
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4b34:	685b      	ldr	r3, [r3, #4]
	const uint32_t clear_mask = (~set_mask) & mask;
    4b36:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    4b3a:	6098      	str	r0, [r3, #8]
}
    4b3c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4b3e:	60d9      	str	r1, [r3, #12]
    4b40:	4770      	bx	lr

00004b42 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4b42:	6843      	ldr	r3, [r0, #4]
}
    4b44:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4b46:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    4b48:	6099      	str	r1, [r3, #8]
}
    4b4a:	4770      	bx	lr

00004b4c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4b4c:	6843      	ldr	r3, [r0, #4]
}
    4b4e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4b50:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    4b52:	60d9      	str	r1, [r3, #12]
}
    4b54:	4770      	bx	lr

00004b56 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4b56:	6843      	ldr	r3, [r0, #4]
    4b58:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4b5a:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    4b5c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    4b60:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    4b62:	6090      	str	r0, [r2, #8]
}
    4b64:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4b66:	60d3      	str	r3, [r2, #12]
    4b68:	4770      	bx	lr

00004b6a <gpio_nrfx_manage_callback>:
{
    4b6a:	b510      	push	{r4, lr}
	return port->data;
    4b6c:	6903      	ldr	r3, [r0, #16]
	return list->head;
    4b6e:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    4b70:	b1f8      	cbz	r0, 4bb2 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4b72:	4288      	cmp	r0, r1
    4b74:	d119      	bne.n	4baa <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    4b76:	689c      	ldr	r4, [r3, #8]
	return node->next;
    4b78:	6808      	ldr	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    4b7a:	42a1      	cmp	r1, r4
	list->head = node;
    4b7c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4b7e:	d100      	bne.n	4b82 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    4b80:	6098      	str	r0, [r3, #8]
	parent->next = child;
    4b82:	2000      	movs	r0, #0
    4b84:	6008      	str	r0, [r1, #0]
	if (set) {
    4b86:	b12a      	cbz	r2, 4b94 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    4b88:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    4b8a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    4b8c:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    4b8e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    4b90:	b902      	cbnz	r2, 4b94 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    4b92:	6099      	str	r1, [r3, #8]
	return 0;
    4b94:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4b96:	e010      	b.n	4bba <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4b98:	4281      	cmp	r1, r0
    4b9a:	d106      	bne.n	4baa <gpio_nrfx_manage_callback+0x40>
	return node->next;
    4b9c:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    4b9e:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    4ba0:	6898      	ldr	r0, [r3, #8]
    4ba2:	4281      	cmp	r1, r0
    4ba4:	d1ed      	bne.n	4b82 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    4ba6:	609c      	str	r4, [r3, #8]
}
    4ba8:	e7eb      	b.n	4b82 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    4baa:	4604      	mov	r4, r0
    4bac:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4bae:	2800      	cmp	r0, #0
    4bb0:	d1f2      	bne.n	4b98 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    4bb2:	2a00      	cmp	r2, #0
    4bb4:	d1e8      	bne.n	4b88 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    4bb6:	f06f 0015 	mvn.w	r0, #21
}
    4bba:	bd10      	pop	{r4, pc}

00004bbc <uarte_nrfx_config_get>:
{
    4bbc:	460b      	mov	r3, r1
	struct uarte_nrfx_data *data = dev->data;
    4bbe:	6902      	ldr	r2, [r0, #16]
	*cfg = data->uart_config;
    4bc0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4bc4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4bc8:	2000      	movs	r0, #0
    4bca:	4770      	bx	lr

00004bcc <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4bcc:	6843      	ldr	r3, [r0, #4]
    4bce:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4bd0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4bd4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4bd8:	4770      	bx	lr

00004bda <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4bda:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    4bdc:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    4bde:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4be0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4be4:	b150      	cbz	r0, 4bfc <uarte_nrfx_poll_in+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4be6:	2000      	movs	r0, #0
	*c = *data->rx_data;
    4be8:	6952      	ldr	r2, [r2, #20]
    4bea:	7812      	ldrb	r2, [r2, #0]
    4bec:	700a      	strb	r2, [r1, #0]
    4bee:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4bf2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4bf6:	2201      	movs	r2, #1
    4bf8:	601a      	str	r2, [r3, #0]
	return 0;
    4bfa:	4770      	bx	lr
		return -1;
    4bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4c00:	4770      	bx	lr

00004c02 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    4c02:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    4c04:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c06:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4c0a:	b940      	cbnz	r0, 4c1e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    4c0c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4c0e:	079b      	lsls	r3, r3, #30
    4c10:	d406      	bmi.n	4c20 <is_tx_ready.isra.0+0x1e>
    4c12:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    4c16:	3800      	subs	r0, #0
    4c18:	bf18      	it	ne
    4c1a:	2001      	movne	r0, #1
    4c1c:	4770      	bx	lr
    4c1e:	2001      	movs	r0, #1
}
    4c20:	4770      	bx	lr

00004c22 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    4c22:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    4c24:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    4c26:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4c2a:	05c9      	lsls	r1, r1, #23
    4c2c:	d518      	bpl.n	4c60 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c2e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    4c32:	b1a9      	cbz	r1, 4c60 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    4c34:	f04f 0020 	mov.w	r0, #32
    4c38:	f3ef 8111 	mrs	r1, BASEPRI
    4c3c:	f380 8812 	msr	BASEPRI_MAX, r0
    4c40:	f3bf 8f6f 	isb	sy
    4c44:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4c48:	b130      	cbz	r0, 4c58 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4c4a:	2000      	movs	r0, #0
    4c4c:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    4c50:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4c54:	2001      	movs	r0, #1
    4c56:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    4c58:	f381 8811 	msr	BASEPRI, r1
    4c5c:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4c60:	6852      	ldr	r2, [r2, #4]
    4c62:	06d2      	lsls	r2, r2, #27
    4c64:	d515      	bpl.n	4c92 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    4c66:	f04f 0120 	mov.w	r1, #32
    4c6a:	f3ef 8211 	mrs	r2, BASEPRI
    4c6e:	f381 8812 	msr	BASEPRI_MAX, r1
    4c72:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4c76:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    4c7a:	b111      	cbz	r1, 4c82 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4c7c:	2100      	movs	r1, #0
    4c7e:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    4c82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    4c86:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    4c8a:	f382 8811 	msr	BASEPRI, r2
    4c8e:	f3bf 8f6f 	isb	sy
}
    4c92:	4770      	bx	lr

00004c94 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4c94:	4770      	bx	lr

00004c96 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    4c96:	b570      	push	{r4, r5, r6, lr}
	*state = &config->states[0];
	while (*state <= &config->states[config->state_cnt - 1U]) {
    4c98:	f06f 4660 	mvn.w	r6, #3758096384	; 0xe0000000
	*state = &config->states[0];
    4c9c:	6843      	ldr	r3, [r0, #4]
    4c9e:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    4ca0:	7a05      	ldrb	r5, [r0, #8]
    4ca2:	6844      	ldr	r4, [r0, #4]
    4ca4:	4435      	add	r5, r6
    4ca6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    4caa:	42a3      	cmp	r3, r4
    4cac:	d902      	bls.n	4cb4 <pinctrl_lookup_state+0x1e>
		}

		(*state)++;
	}

	return -ENOENT;
    4cae:	f06f 0001 	mvn.w	r0, #1
}
    4cb2:	bd70      	pop	{r4, r5, r6, pc}
		if (id == (*state)->id) {
    4cb4:	795c      	ldrb	r4, [r3, #5]
    4cb6:	428c      	cmp	r4, r1
    4cb8:	d001      	beq.n	4cbe <pinctrl_lookup_state+0x28>
		(*state)++;
    4cba:	3308      	adds	r3, #8
    4cbc:	e7ef      	b.n	4c9e <pinctrl_lookup_state+0x8>
			return 0;
    4cbe:	2000      	movs	r0, #0
    4cc0:	e7f7      	b.n	4cb2 <pinctrl_lookup_state+0x1c>

00004cc2 <k_sys_fatal_error_handler>:
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    4cc2:	2000      	movs	r0, #0
{
    4cc4:	b508      	push	{r3, lr}
		sys_arch_reboot(0);
    4cc6:	f7fc fd8f 	bl	17e8 <sys_arch_reboot>

00004cca <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    4cca:	f7ff bb3d 	b.w	4348 <nrf_cc3xx_platform_init_no_rng>

00004cce <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    4cce:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    4cd0:	f7fc fa30 	bl	1134 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    4cd4:	f7fc fb16 	bl	1304 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    4cd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    4cdc:	f7ff bb34 	b.w	4348 <nrf_cc3xx_platform_init_no_rng>

00004ce0 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4ce0:	4700      	bx	r0

00004ce2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4ce2:	f000 bb06 	b.w	52f2 <z_impl_k_busy_wait>

00004ce6 <clock_stop>:
{
    4ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    switch (domain)
    4ce8:	2803      	cmp	r0, #3
    4cea:	f200 80a7 	bhi.w	4e3c <clock_stop+0x156>
    4cee:	e8df f000 	tbb	[pc, r0]
    4cf2:	1902      	.short	0x1902
    4cf4:	3527      	.short	0x3527
    4cf6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4cfa:	2202      	movs	r2, #2
    4cfc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d00:	2200      	movs	r2, #0
    4d02:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    4d06:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d0a:	2201      	movs	r2, #1
    4d0c:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4d0e:	2400      	movs	r4, #0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4d10:	2301      	movs	r3, #1
    4d12:	f88d 3007 	strb.w	r3, [sp, #7]
    switch (domain)
    4d16:	2803      	cmp	r0, #3
    4d18:	f200 8090 	bhi.w	4e3c <clock_stop+0x156>
    4d1c:	e8df f000 	tbb	[pc, r0]
    4d20:	9a78692c 	.word	0x9a78692c
    p_reg->INTENCLR = mask;
    4d24:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d28:	2201      	movs	r2, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d2a:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
    4d2c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d30:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    4d34:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4d38:	f10d 0407 	add.w	r4, sp, #7
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d3c:	605a      	str	r2, [r3, #4]
    4d3e:	e7e7      	b.n	4d10 <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    4d40:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d44:	f44f 7200 	mov.w	r2, #512	; 0x200
    4d48:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d4c:	2200      	movs	r2, #0
    4d4e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    4d52:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d56:	2201      	movs	r2, #1
    4d58:	625a      	str	r2, [r3, #36]	; 0x24
    4d5a:	e7d8      	b.n	4d0e <clock_stop+0x28>
    p_reg->INTENCLR = mask;
    4d5c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4d60:	f44f 7280 	mov.w	r2, #256	; 0x100
    4d64:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d68:	2200      	movs	r2, #0
    4d6a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4d6e:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d72:	2201      	movs	r2, #1
    4d74:	61da      	str	r2, [r3, #28]
    4d76:	e7ca      	b.n	4d0e <clock_stop+0x28>
    switch (domain)
    4d78:	f242 7510 	movw	r5, #10000	; 0x2710
    4d7c:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    4d80:	b36c      	cbz	r4, 4dde <clock_stop+0xf8>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4d82:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4d86:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4d8a:	7023      	strb	r3, [r4, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4d8c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4d90:	03d9      	lsls	r1, r3, #15
    4d92:	d553      	bpl.n	4e3c <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4d94:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4d98:	2801      	cmp	r0, #1
    4d9a:	d14f      	bne.n	4e3c <clock_stop+0x156>
    4d9c:	f7ff ffa1 	bl	4ce2 <nrfx_busy_wait>
    4da0:	3d01      	subs	r5, #1
    4da2:	d1ed      	bne.n	4d80 <clock_stop+0x9a>
    4da4:	e04a      	b.n	4e3c <clock_stop+0x156>
    4da6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4daa:	2801      	cmp	r0, #1
    4dac:	d146      	bne.n	4e3c <clock_stop+0x156>
    4dae:	f7ff ff98 	bl	4ce2 <nrfx_busy_wait>
    4db2:	3d01      	subs	r5, #1
    4db4:	d152      	bne.n	4e5c <clock_stop+0x176>
    4db6:	e041      	b.n	4e3c <clock_stop+0x156>
    4db8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4dbc:	2801      	cmp	r0, #1
    4dbe:	d13d      	bne.n	4e3c <clock_stop+0x156>
    4dc0:	f7ff ff8f 	bl	4ce2 <nrfx_busy_wait>
    4dc4:	3d01      	subs	r5, #1
    4dc6:	d039      	beq.n	4e3c <clock_stop+0x156>
            if (p_clk_src != NULL)
    4dc8:	b1c4      	cbz	r4, 4dfc <clock_stop+0x116>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4dca:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4dce:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4dd2:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4dd4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4dd8:	03db      	lsls	r3, r3, #15
    4dda:	d52f      	bpl.n	4e3c <clock_stop+0x156>
    4ddc:	e7ec      	b.n	4db8 <clock_stop+0xd2>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4dde:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4de2:	03da      	lsls	r2, r3, #15
    4de4:	d52a      	bpl.n	4e3c <clock_stop+0x156>
    4de6:	2001      	movs	r0, #1
    4de8:	f7ff ff7b 	bl	4ce2 <nrfx_busy_wait>
    4dec:	3d01      	subs	r5, #1
    4dee:	d1f6      	bne.n	4dde <clock_stop+0xf8>
    4df0:	e024      	b.n	4e3c <clock_stop+0x156>
    switch (domain)
    4df2:	f242 7510 	movw	r5, #10000	; 0x2710
    4df6:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    4dfa:	e7e5      	b.n	4dc8 <clock_stop+0xe2>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4dfc:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4e00:	03d8      	lsls	r0, r3, #15
    4e02:	d51b      	bpl.n	4e3c <clock_stop+0x156>
    4e04:	2001      	movs	r0, #1
    4e06:	f7ff ff6c 	bl	4ce2 <nrfx_busy_wait>
    4e0a:	3d01      	subs	r5, #1
    4e0c:	d1f6      	bne.n	4dfc <clock_stop+0x116>
    4e0e:	e015      	b.n	4e3c <clock_stop+0x156>
    switch (domain)
    4e10:	f242 7510 	movw	r5, #10000	; 0x2710
    4e14:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
            if (p_clk_src != NULL)
    4e18:	b194      	cbz	r4, 4e40 <clock_stop+0x15a>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    4e1a:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4e1e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4e22:	7023      	strb	r3, [r4, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    4e24:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4e28:	03d9      	lsls	r1, r3, #15
    4e2a:	d507      	bpl.n	4e3c <clock_stop+0x156>
    4e2c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4e30:	2801      	cmp	r0, #1
    4e32:	d103      	bne.n	4e3c <clock_stop+0x156>
    4e34:	f7ff ff55 	bl	4ce2 <nrfx_busy_wait>
    4e38:	3d01      	subs	r5, #1
    4e3a:	d1ed      	bne.n	4e18 <clock_stop+0x132>
}
    4e3c:	b002      	add	sp, #8
    4e3e:	bd70      	pop	{r4, r5, r6, pc}
    4e40:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    4e44:	03da      	lsls	r2, r3, #15
    4e46:	d5f9      	bpl.n	4e3c <clock_stop+0x156>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4e48:	2001      	movs	r0, #1
    4e4a:	f7ff ff4a 	bl	4ce2 <nrfx_busy_wait>
    4e4e:	3d01      	subs	r5, #1
    4e50:	d1f6      	bne.n	4e40 <clock_stop+0x15a>
    4e52:	e7f3      	b.n	4e3c <clock_stop+0x156>
    switch (domain)
    4e54:	f242 7510 	movw	r5, #10000	; 0x2710
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    4e58:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    4e5c:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    4e60:	03db      	lsls	r3, r3, #15
    4e62:	d5eb      	bpl.n	4e3c <clock_stop+0x156>
    4e64:	2c00      	cmp	r4, #0
    4e66:	d19e      	bne.n	4da6 <clock_stop+0xc0>
    4e68:	2001      	movs	r0, #1
    4e6a:	e7a0      	b.n	4dae <clock_stop+0xc8>

00004e6c <nrfx_clock_enable>:
{
    4e6c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4e6e:	2005      	movs	r0, #5
    4e70:	f7fc fa8a 	bl	1388 <arch_irq_is_enabled>
    4e74:	b910      	cbnz	r0, 4e7c <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4e76:	2005      	movs	r0, #5
    4e78:	f7fc fa78 	bl	136c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4e7c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4e80:	2201      	movs	r2, #1
    4e82:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    4e86:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    4e8a:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    4e8e:	bd08      	pop	{r3, pc}

00004e90 <nrfx_clock_start>:
{
    4e90:	b508      	push	{r3, lr}
    switch (domain)
    4e92:	2803      	cmp	r0, #3
    4e94:	d819      	bhi.n	4eca <nrfx_clock_start+0x3a>
    4e96:	e8df f000 	tbb	[pc, r0]
    4e9a:	3202      	.short	0x3202
    4e9c:	4c3e      	.short	0x4c3e
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4e9e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4ea2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4ea6:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4eaa:	03c9      	lsls	r1, r1, #15
    4eac:	d40e      	bmi.n	4ecc <nrfx_clock_start+0x3c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    4eae:	f8d2 3414 	ldr.w	r3, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    4eb2:	07db      	lsls	r3, r3, #31
    4eb4:	d513      	bpl.n	4ede <nrfx_clock_start+0x4e>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4eb6:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    4eba:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4ebe:	3b01      	subs	r3, #1
    4ec0:	2b01      	cmp	r3, #1
    4ec2:	d809      	bhi.n	4ed8 <nrfx_clock_start+0x48>
    p_reg->INTENSET = mask;
    4ec4:	2302      	movs	r3, #2
    4ec6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4eca:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4ecc:	f003 0303 	and.w	r3, r3, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4ed0:	2b02      	cmp	r3, #2
    4ed2:	d005      	beq.n	4ee0 <nrfx_clock_start+0x50>
    4ed4:	2b01      	cmp	r3, #1
    4ed6:	d002      	beq.n	4ede <nrfx_clock_start+0x4e>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4ed8:	2000      	movs	r0, #0
    4eda:	f7ff ff04 	bl	4ce6 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    4ede:	2301      	movs	r3, #1
    p_reg->LFCLKSRC = (uint32_t)(source);
    4ee0:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    4ee4:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4ee8:	2300      	movs	r3, #0
    4eea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    4eee:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    4ef2:	2302      	movs	r3, #2
    4ef4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ef8:	2301      	movs	r3, #1
    4efa:	6093      	str	r3, [r2, #8]
}
    4efc:	e7e5      	b.n	4eca <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4efe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4f02:	2200      	movs	r2, #0
    4f04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4f08:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    4f0c:	2201      	movs	r2, #1
    4f0e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f12:	601a      	str	r2, [r3, #0]
}
    4f14:	e7d9      	b.n	4eca <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f16:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4f1a:	2200      	movs	r2, #0
    4f1c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    4f20:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    4f24:	f44f 7200 	mov.w	r2, #512	; 0x200
    4f28:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f2c:	2201      	movs	r2, #1
    4f2e:	621a      	str	r2, [r3, #32]
}
    4f30:	e7cb      	b.n	4eca <nrfx_clock_start+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4f32:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    4f36:	2200      	movs	r2, #0
    4f38:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4f3c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    4f40:	f44f 7280 	mov.w	r2, #256	; 0x100
    4f44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4f48:	2201      	movs	r2, #1
    4f4a:	619a      	str	r2, [r3, #24]
}
    4f4c:	e7bd      	b.n	4eca <nrfx_clock_start+0x3a>

00004f4e <nrfx_clock_stop>:
    clock_stop(domain);
    4f4e:	f7ff beca 	b.w	4ce6 <clock_stop>

00004f52 <nrf_gpio_reconfigure>:
{
    4f52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4f54:	4616      	mov	r6, r2
    4f56:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    4f5a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4f5c:	a801      	add	r0, sp, #4
{
    4f5e:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4f60:	f7fd ff0e 	bl	2d80 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4f64:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4f66:	f1b6 0c00 	subs.w	ip, r6, #0
    4f6a:	bf18      	it	ne
    4f6c:	f04f 0c01 	movne.w	ip, #1
    4f70:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4f74:	1e0b      	subs	r3, r1, #0
    4f76:	bf18      	it	ne
    4f78:	2301      	movne	r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4f7a:	2d00      	cmp	r5, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4f7c:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4f80:	bf14      	ite	ne
    4f82:	f04f 0c0c 	movne.w	ip, #12
    4f86:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4f8a:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    4f8c:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    4f90:	bf14      	ite	ne
    4f92:	f44f 6c70 	movne.w	ip, #3840	; 0xf00
    4f96:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    4f9a:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    4f9c:	ea43 030c 	orr.w	r3, r3, ip
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    4fa0:	bf14      	ite	ne
    4fa2:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    4fa6:	f04f 0c00 	moveq.w	ip, #0
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4faa:	f8d0 2200 	ldr.w	r2, [r0, #512]	; 0x200
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    4fae:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    4fb2:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4fb6:	b101      	cbz	r1, 4fba <nrf_gpio_reconfigure+0x68>
    4fb8:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4fba:	b10e      	cbz	r6, 4fc0 <nrf_gpio_reconfigure+0x6e>
    4fbc:	7836      	ldrb	r6, [r6, #0]
    4fbe:	0076      	lsls	r6, r6, #1
    4fc0:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4fc2:	b10d      	cbz	r5, 4fc8 <nrf_gpio_reconfigure+0x76>
    4fc4:	782d      	ldrb	r5, [r5, #0]
    4fc6:	00ad      	lsls	r5, r5, #2
    4fc8:	4331      	orrs	r1, r6
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4fca:	b10c      	cbz	r4, 4fd0 <nrf_gpio_reconfigure+0x7e>
    4fcc:	7824      	ldrb	r4, [r4, #0]
    4fce:	0224      	lsls	r4, r4, #8
    4fd0:	4329      	orrs	r1, r5
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    4fd2:	b10f      	cbz	r7, 4fd8 <nrf_gpio_reconfigure+0x86>
    4fd4:	783f      	ldrb	r7, [r7, #0]
    4fd6:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4fd8:	430c      	orrs	r4, r1
    4fda:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    4fdc:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
    4fe0:	b003      	add	sp, #12
    4fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004fe4 <nrf_gpio_cfg_sense_set>:
{
    4fe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    4fe6:	f10d 030f 	add.w	r3, sp, #15
    4fea:	9301      	str	r3, [sp, #4]
    4fec:	2300      	movs	r3, #0
{
    4fee:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    4ff2:	461a      	mov	r2, r3
    4ff4:	4619      	mov	r1, r3
    4ff6:	9300      	str	r3, [sp, #0]
    4ff8:	f7ff ffab 	bl	4f52 <nrf_gpio_reconfigure>
}
    4ffc:	b005      	add	sp, #20
    4ffe:	f85d fb04 	ldr.w	pc, [sp], #4

00005002 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    5002:	4770      	bx	lr

00005004 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    5004:	b140      	cbz	r0, 5018 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    5006:	68c3      	ldr	r3, [r0, #12]
    5008:	7858      	ldrb	r0, [r3, #1]
    500a:	f010 0001 	ands.w	r0, r0, #1
    500e:	bf1e      	ittt	ne
    5010:	7818      	ldrbne	r0, [r3, #0]
    5012:	fab0 f080 	clzne	r0, r0
    5016:	0940      	lsrne	r0, r0, #5
}
    5018:	4770      	bx	lr

0000501a <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    501a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    501c:	4605      	mov	r5, r0
    501e:	460e      	mov	r6, r1
	__asm__ volatile(
    5020:	f04f 0320 	mov.w	r3, #32
    5024:	f3ef 8711 	mrs	r7, BASEPRI
    5028:	f383 8812 	msr	BASEPRI_MAX, r3
    502c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5030:	f7fe ffc2 	bl	3fb8 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    5034:	4631      	mov	r1, r6
    5036:	4604      	mov	r4, r0
    5038:	4628      	mov	r0, r5
    503a:	f7ff fe42 	bl	4cc2 <k_sys_fatal_error_handler>
	__asm__ volatile(
    503e:	f387 8811 	msr	BASEPRI, r7
    5042:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5046:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5048:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    504c:	f7fc bc16 	b.w	187c <z_impl_k_thread_abort>

00005050 <z_early_memset>:
	(void) memset(dst, c, n);
    5050:	f7ff bcbe 	b.w	49d0 <memset>

00005054 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    5054:	f7ff bcb1 	b.w	49ba <memcpy>

00005058 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5058:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    505c:	4313      	orrs	r3, r2
    505e:	f013 0303 	ands.w	r3, r3, #3
    5062:	d10c      	bne.n	507e <create_free_list+0x26>
	slab->free_list = NULL;
    5064:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5066:	6881      	ldr	r1, [r0, #8]
    5068:	4299      	cmp	r1, r3
    506a:	d801      	bhi.n	5070 <create_free_list+0x18>
	return 0;
    506c:	2000      	movs	r0, #0
    506e:	4770      	bx	lr
		*(char **)p = slab->free_list;
    5070:	6941      	ldr	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5072:	3301      	adds	r3, #1
		*(char **)p = slab->free_list;
    5074:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    5076:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    5078:	6142      	str	r2, [r0, #20]
		p += slab->block_size;
    507a:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    507c:	e7f3      	b.n	5066 <create_free_list+0xe>
		return -EINVAL;
    507e:	f06f 0015 	mvn.w	r0, #21
}
    5082:	4770      	bx	lr

00005084 <k_mem_slab_init>:
{
    5084:	b510      	push	{r4, lr}
	slab->block_size = block_size;
    5086:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->num_used = 0U;
    508a:	2300      	movs	r3, #0
	slab->buffer = buffer;
    508c:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    508e:	6183      	str	r3, [r0, #24]
{
    5090:	4604      	mov	r4, r0
	rc = create_free_list(slab);
    5092:	f7ff ffe1 	bl	5058 <create_free_list>
	if (rc < 0) {
    5096:	2800      	cmp	r0, #0
	list->tail = (sys_dnode_t *)list;
    5098:	bfa8      	it	ge
    509a:	e9c4 4400 	strdge	r4, r4, [r4]
}
    509e:	bd10      	pop	{r4, pc}

000050a0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    50a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    50a2:	4604      	mov	r4, r0
    50a4:	460d      	mov	r5, r1
	__asm__ volatile(
    50a6:	f04f 0320 	mov.w	r3, #32
    50aa:	f3ef 8611 	mrs	r6, BASEPRI
    50ae:	f383 8812 	msr	BASEPRI_MAX, r3
    50b2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    50b6:	6947      	ldr	r7, [r0, #20]
    50b8:	b977      	cbnz	r7, 50d8 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    50ba:	f000 f8a2 	bl	5202 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    50be:	b158      	cbz	r0, 50d8 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    50c0:	682a      	ldr	r2, [r5, #0]
    50c2:	6787      	str	r7, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    50c4:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    50c6:	f000 f88c 	bl	51e2 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    50ca:	4631      	mov	r1, r6
    50cc:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    50d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    50d4:	f7fe be36 	b.w	3d44 <z_reschedule>
	**(char ***) mem = slab->free_list;
    50d8:	682b      	ldr	r3, [r5, #0]
    50da:	6962      	ldr	r2, [r4, #20]
    50dc:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    50de:	682b      	ldr	r3, [r5, #0]
    50e0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    50e2:	69a3      	ldr	r3, [r4, #24]
    50e4:	3b01      	subs	r3, #1
    50e6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    50e8:	f386 8811 	msr	BASEPRI, r6
    50ec:	f3bf 8f6f 	isb	sy
}
    50f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000050f2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    50f2:	f3ef 8005 	mrs	r0, IPSR
}
    50f6:	3800      	subs	r0, #0
    50f8:	bf18      	it	ne
    50fa:	2001      	movne	r0, #1
    50fc:	4770      	bx	lr

000050fe <z_pm_save_idle_exit>:
{
    50fe:	b508      	push	{r3, lr}
	pm_system_resume();
    5100:	f7fb ff18 	bl	f34 <pm_system_resume>
}
    5104:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    5108:	f7ff bdc4 	b.w	4c94 <sys_clock_idle_exit>

0000510c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    510c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    5110:	428b      	cmp	r3, r1
    5112:	d001      	beq.n	5118 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    5114:	f7fe bdd0 	b.w	3cb8 <z_set_prio>
}
    5118:	2000      	movs	r0, #0
    511a:	4770      	bx	lr

0000511c <z_impl_k_mutex_init>:
{
    511c:	4603      	mov	r3, r0
	mutex->owner = NULL;
    511e:	2000      	movs	r0, #0
    5120:	e9c3 3300 	strd	r3, r3, [r3]
	mutex->lock_count = 0U;
    5124:	e9c3 0002 	strd	r0, r0, [r3, #8]
}
    5128:	4770      	bx	lr

0000512a <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    512a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    512e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5130:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5132:	2300      	movs	r3, #0
	node->prev = NULL;
    5134:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    5138:	4770      	bx	lr

0000513a <unpend_thread_no_timeout>:
{
    513a:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    513c:	f7ff fff5 	bl	512a <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5140:	7b43      	ldrb	r3, [r0, #13]
    5142:	f023 0302 	bic.w	r3, r3, #2
    5146:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    5148:	2300      	movs	r3, #0
    514a:	6083      	str	r3, [r0, #8]
}
    514c:	bd08      	pop	{r3, pc}

0000514e <z_thread_timeout>:
{
    514e:	4601      	mov	r1, r0
    5150:	b510      	push	{r4, lr}
	__asm__ volatile(
    5152:	f04f 0320 	mov.w	r3, #32
    5156:	f3ef 8411 	mrs	r4, BASEPRI
    515a:	f383 8812 	msr	BASEPRI_MAX, r3
    515e:	f3bf 8f6f 	isb	sy
		if (!killed) {
    5162:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    5166:	f013 0f28 	tst.w	r3, #40	; 0x28
    516a:	d10d      	bne.n	5188 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    516c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    5170:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    5172:	b10b      	cbz	r3, 5178 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    5174:	f7ff ffe1 	bl	513a <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5178:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    517c:	f023 0314 	bic.w	r3, r3, #20
    5180:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    5184:	f7fe fca2 	bl	3acc <ready_thread>
	__asm__ volatile(
    5188:	f384 8811 	msr	BASEPRI, r4
    518c:	f3bf 8f6f 	isb	sy
}
    5190:	bd10      	pop	{r4, pc}

00005192 <add_to_waitq_locked>:
{
    5192:	b538      	push	{r3, r4, r5, lr}
    5194:	4604      	mov	r4, r0
    5196:	460d      	mov	r5, r1
	unready_thread(thread);
    5198:	f7fe fccc 	bl	3b34 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    519c:	7b63      	ldrb	r3, [r4, #13]
    519e:	f043 0302 	orr.w	r3, r3, #2
    51a2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    51a4:	b1e5      	cbz	r5, 51e0 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    51a6:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    51a8:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    51aa:	429d      	cmp	r5, r3
    51ac:	d109      	bne.n	51c2 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    51ae:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    51b0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    51b4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    51b6:	606c      	str	r4, [r5, #4]
}
    51b8:	e012      	b.n	51e0 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    51ba:	686a      	ldr	r2, [r5, #4]
    51bc:	4293      	cmp	r3, r2
    51be:	d0f6      	beq.n	51ae <add_to_waitq_locked+0x1c>
    51c0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    51c2:	2b00      	cmp	r3, #0
    51c4:	d0f3      	beq.n	51ae <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    51c6:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    51ca:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    51ce:	428a      	cmp	r2, r1
    51d0:	d0f3      	beq.n	51ba <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    51d2:	4291      	cmp	r1, r2
    51d4:	ddf1      	ble.n	51ba <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    51d6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    51d8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    51dc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    51de:	605c      	str	r4, [r3, #4]
}
    51e0:	bd38      	pop	{r3, r4, r5, pc}

000051e2 <z_ready_thread>:
{
    51e2:	b510      	push	{r4, lr}
	__asm__ volatile(
    51e4:	f04f 0320 	mov.w	r3, #32
    51e8:	f3ef 8411 	mrs	r4, BASEPRI
    51ec:	f383 8812 	msr	BASEPRI_MAX, r3
    51f0:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    51f4:	f7fe fc6a 	bl	3acc <ready_thread>
	__asm__ volatile(
    51f8:	f384 8811 	msr	BASEPRI, r4
    51fc:	f3bf 8f6f 	isb	sy
}
    5200:	bd10      	pop	{r4, pc}

00005202 <z_unpend_first_thread>:
{
    5202:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5204:	f04f 0320 	mov.w	r3, #32
    5208:	f3ef 8511 	mrs	r5, BASEPRI
    520c:	f383 8812 	msr	BASEPRI_MAX, r3
    5210:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5214:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5216:	42a0      	cmp	r0, r4
    5218:	d00d      	beq.n	5236 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    521a:	b134      	cbz	r4, 522a <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    521c:	4620      	mov	r0, r4
    521e:	f7ff ff8c 	bl	513a <unpend_thread_no_timeout>
    5222:	f104 0018 	add.w	r0, r4, #24
    5226:	f000 f81e 	bl	5266 <z_abort_timeout>
	__asm__ volatile(
    522a:	f385 8811 	msr	BASEPRI, r5
    522e:	f3bf 8f6f 	isb	sy
}
    5232:	4620      	mov	r0, r4
    5234:	bd38      	pop	{r3, r4, r5, pc}
    5236:	2400      	movs	r4, #0
    5238:	e7f7      	b.n	522a <z_unpend_first_thread+0x28>

0000523a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    523a:	4603      	mov	r3, r0
    523c:	b920      	cbnz	r0, 5248 <z_reschedule_irqlock+0xe>
    523e:	f3ef 8205 	mrs	r2, IPSR
    5242:	b90a      	cbnz	r2, 5248 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    5244:	f7fc b8e4 	b.w	1410 <arch_swap>
    5248:	f383 8811 	msr	BASEPRI, r3
    524c:	f3bf 8f6f 	isb	sy
}
    5250:	4770      	bx	lr

00005252 <z_reschedule_unlocked>:
	__asm__ volatile(
    5252:	f04f 0320 	mov.w	r3, #32
    5256:	f3ef 8011 	mrs	r0, BASEPRI
    525a:	f383 8812 	msr	BASEPRI_MAX, r3
    525e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    5262:	f7ff bfea 	b.w	523a <z_reschedule_irqlock>

00005266 <z_abort_timeout>:
{
    5266:	b510      	push	{r4, lr}
    5268:	f04f 0220 	mov.w	r2, #32
    526c:	f3ef 8411 	mrs	r4, BASEPRI
    5270:	f382 8812 	msr	BASEPRI_MAX, r2
    5274:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    5278:	6803      	ldr	r3, [r0, #0]
    527a:	b13b      	cbz	r3, 528c <z_abort_timeout+0x26>
			remove_timeout(to);
    527c:	f7fe ff4e 	bl	411c <remove_timeout>
			ret = 0;
    5280:	2000      	movs	r0, #0
	__asm__ volatile(
    5282:	f384 8811 	msr	BASEPRI, r4
    5286:	f3bf 8f6f 	isb	sy
}
    528a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    528c:	f06f 0015 	mvn.w	r0, #21
    5290:	e7f7      	b.n	5282 <z_abort_timeout+0x1c>

00005292 <z_get_next_timeout_expiry>:
{
    5292:	b510      	push	{r4, lr}
	__asm__ volatile(
    5294:	f04f 0320 	mov.w	r3, #32
    5298:	f3ef 8411 	mrs	r4, BASEPRI
    529c:	f383 8812 	msr	BASEPRI_MAX, r3
    52a0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    52a4:	f7fe ff12 	bl	40cc <next_timeout>
	__asm__ volatile(
    52a8:	f384 8811 	msr	BASEPRI, r4
    52ac:	f3bf 8f6f 	isb	sy
}
    52b0:	bd10      	pop	{r4, pc}

000052b2 <z_set_timeout_expiry>:
{
    52b2:	b570      	push	{r4, r5, r6, lr}
    52b4:	4604      	mov	r4, r0
    52b6:	460d      	mov	r5, r1
	__asm__ volatile(
    52b8:	f04f 0320 	mov.w	r3, #32
    52bc:	f3ef 8611 	mrs	r6, BASEPRI
    52c0:	f383 8812 	msr	BASEPRI_MAX, r3
    52c4:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    52c8:	f7fe ff00 	bl	40cc <next_timeout>
			      || (ticks <= next_to);
    52cc:	2801      	cmp	r0, #1
    52ce:	dd07      	ble.n	52e0 <z_set_timeout_expiry+0x2e>
    52d0:	42a0      	cmp	r0, r4
    52d2:	db05      	blt.n	52e0 <z_set_timeout_expiry+0x2e>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    52d4:	42a0      	cmp	r0, r4
    52d6:	4629      	mov	r1, r5
    52d8:	bfa8      	it	ge
    52da:	4620      	movge	r0, r4
    52dc:	f7fd fada 	bl	2894 <sys_clock_set_timeout>
	__asm__ volatile(
    52e0:	f386 8811 	msr	BASEPRI, r6
    52e4:	f3bf 8f6f 	isb	sy
}
    52e8:	bd70      	pop	{r4, r5, r6, pc}

000052ea <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    52ea:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    52ec:	f7ff f80c 	bl	4308 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    52f0:	bd08      	pop	{r3, pc}

000052f2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    52f2:	b108      	cbz	r0, 52f8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    52f4:	f7fb bdce 	b.w	e94 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    52f8:	4770      	bx	lr

000052fa <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    52fa:	4770      	bx	lr
