
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	08 1a 00 20 c9 17 00 00 25 59 00 00 81 17 00 00     ... ....%Y......
  10:	81 17 00 00 81 17 00 00 81 17 00 00 81 17 00 00     ................
	...
  2c:	45 14 00 00 81 17 00 00 00 00 00 00 e9 13 00 00     E...............
  3c:	81 17 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
  50:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
  60:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
  70:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
  80:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
  90:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
  a0:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
  b0:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
  c0:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
  d0:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
  e0:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
  f0:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
 100:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
 110:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
 120:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
 130:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
 140:	d5 14 00 00 d5 14 00 00 d5 14 00 00 d5 14 00 00     ................
 150:	d5 14 00 00                                         ....

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	4686      	mov	lr, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x74>
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x6c>
     1da:	18eb      	adds	r3, r5, r3
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x70>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x58>
     20e:	42a0      	cmp	r0, r4
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x58>
     212:	f1ac 0302 	sub.w	r3, ip, #2
     216:	442c      	add	r4, r5
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x68>
     220:	40d4      	lsrs	r4, r2
     222:	2300      	movs	r3, #0
     224:	6034      	str	r4, [r6, #0]
     226:	6073      	str	r3, [r6, #4]
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x58>
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
     240:	0c20      	lsrs	r0, r4, #16
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
     24a:	fb0c f807 	mul.w	r8, ip, r7
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     252:	4598      	cmp	r8, r3
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     25c:	d204      	bcs.n	268 <CONFIG_SRAM_SIZE+0xa8>
     25e:	4598      	cmp	r8, r3
     260:	d902      	bls.n	268 <CONFIG_SRAM_SIZE+0xa8>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
     268:	eba3 0308 	sub.w	r3, r3, r8
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr
     272:	fb0e 331c 	mls	r3, lr, ip, r3
     276:	fb0c f707 	mul.w	r7, ip, r7
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
     284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     28e:	f1ac 0302 	sub.w	r3, ip, #2
     292:	442c      	add	r4, r5
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
     2c0:	fb0c f807 	mul.w	r8, ip, r7
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2c8:	4588      	cmp	r8, r1
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
     2cc:	1869      	adds	r1, r5, r1
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
     2dc:	4429      	add	r1, r5
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
     2ec:	fb0c f707 	mul.w	r7, ip, r7
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
     2f8:	18eb      	adds	r3, r5, r3
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     300:	429f      	cmp	r7, r3
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     304:	f1ac 0102 	sub.w	r1, ip, #2
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x7a>
     312:	4660      	mov	r0, ip
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
     31a:	4660      	mov	r0, ip
     31c:	e7a4      	b.n	268 <CONFIG_SRAM_SIZE+0xa8>
     31e:	4663      	mov	r3, ip
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     32e:	e9c6 e000 	strd	lr, r0, [r6]
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
     34c:	469c      	mov	ip, r3
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     354:	4638      	mov	r0, r7
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
     358:	e9c6 4c00 	strd	r4, ip, [r6]
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
     368:	fa22 f40c 	lsr.w	r4, r2, ip
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
     374:	fa20 f30c 	lsr.w	r3, r0, ip
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
     388:	fb09 3018 	mls	r0, r9, r8, r3
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     396:	459a      	cmp	sl, r3
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
     39c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
     3d6:	4421      	add	r1, r4
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <uart_cb>:
/* STEP 10.1.2 - Define the receive buffer */
static uint8_t rx_buf[RECEIVE_BUFF_SIZE] = {0};

/* STEP 7 - Define the callback function for UART */
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
     424:	b510      	push	{r4, lr}
	switch (evt->type) {
     426:	780b      	ldrb	r3, [r1, #0]
     428:	2b02      	cmp	r3, #2
     42a:	d002      	beq.n	432 <uart_cb+0xe>
     42c:	2b05      	cmp	r3, #5
     42e:	d018      	beq.n	462 <uart_cb+0x3e>
		uart_rx_enable(dev ,rx_buf,sizeof rx_buf,RECEIVE_TIMEOUT);
		break;
	default:
		break;
	}
}
     430:	bd10      	pop	{r4, pc}
		if((evt->data.rx.len) == 1){
     432:	68cb      	ldr	r3, [r1, #12]
     434:	2b01      	cmp	r3, #1
     436:	d1fb      	bne.n	430 <uart_cb+0xc>
		if(evt->data.rx.buf[evt->data.rx.offset] == '1')
     438:	684a      	ldr	r2, [r1, #4]
     43a:	688b      	ldr	r3, [r1, #8]
     43c:	5cd3      	ldrb	r3, [r2, r3]
     43e:	2b31      	cmp	r3, #49	; 0x31
     440:	d007      	beq.n	452 <uart_cb+0x2e>
		else if (evt->data.rx.buf[evt->data.rx.offset] == '2')
     442:	2b32      	cmp	r3, #50	; 0x32
     444:	d009      	beq.n	45a <uart_cb+0x36>
		else if (evt->data.rx.buf[evt->data.rx.offset] == '3')
     446:	2b33      	cmp	r3, #51	; 0x33
     448:	d1f2      	bne.n	430 <uart_cb+0xc>
			gpio_pin_toggle_dt(&led2);
     44a:	4809      	ldr	r0, [pc, #36]	; (470 <uart_cb+0x4c>)
     44c:	f004 fe27 	bl	509e <gpio_pin_toggle_dt>
     450:	e7ee      	b.n	430 <uart_cb+0xc>
			gpio_pin_toggle_dt(&led0);
     452:	4808      	ldr	r0, [pc, #32]	; (474 <uart_cb+0x50>)
     454:	f004 fe23 	bl	509e <gpio_pin_toggle_dt>
     458:	e7ea      	b.n	430 <uart_cb+0xc>
			gpio_pin_toggle_dt(&led1);
     45a:	4807      	ldr	r0, [pc, #28]	; (478 <uart_cb+0x54>)
     45c:	f004 fe1f 	bl	509e <gpio_pin_toggle_dt>
     460:	e7e6      	b.n	430 <uart_cb+0xc>
static inline int z_impl_uart_rx_enable(const struct device *dev,
					uint8_t *buf,
					size_t len, int32_t timeout)
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
     462:	6883      	ldr	r3, [r0, #8]
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
     464:	68dc      	ldr	r4, [r3, #12]
     466:	2364      	movs	r3, #100	; 0x64
     468:	220a      	movs	r2, #10
     46a:	4904      	ldr	r1, [pc, #16]	; (47c <uart_cb+0x58>)
     46c:	47a0      	blx	r4
}
     46e:	e7df      	b.n	430 <uart_cb+0xc>
     470:	0000789c 	.word	0x0000789c
     474:	000078ac 	.word	0x000078ac
     478:	000078a4 	.word	0x000078a4
     47c:	20000460 	.word	0x20000460

00000480 <main>:

int main(void)
{
     480:	b510      	push	{r4, lr}
	int ret;

/* STEP 4.2 - Verify that the UART device is ready */ 
if (!device_is_ready(uart)){
     482:	4b25      	ldr	r3, [pc, #148]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     484:	6818      	ldr	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     486:	f006 fd8e 	bl	6fa6 <z_device_is_ready>
     48a:	2800      	cmp	r0, #0
     48c:	d03a      	beq.n	504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
     48e:	4823      	ldr	r0, [pc, #140]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     490:	f006 fd89 	bl	6fa6 <z_device_is_ready>
		printk("UART device not ready\r\n");
		return 1 ;
	}

/* STEP 5.2 - Verify that the LED devices are ready */
if (!device_is_ready(led0.port)){
     494:	2800      	cmp	r0, #0
     496:	d03a      	beq.n	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
		printk("GPIO device is not ready\r\n");
		return 1;
	}

/* STEP 6 - Configure the GPIOs of the LEDs */
ret = gpio_pin_configure_dt(&led0, GPIO_OUTPUT_ACTIVE);
     498:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     49c:	4820      	ldr	r0, [pc, #128]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     49e:	f004 fdf3 	bl	5088 <gpio_pin_configure_dt>
	if (ret < 0) {
     4a2:	2800      	cmp	r0, #0
     4a4:	db31      	blt.n	50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
		return 1 ;
	}
	ret = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_ACTIVE);
     4a6:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     4aa:	481e      	ldr	r0, [pc, #120]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
     4ac:	f004 fdec 	bl	5088 <gpio_pin_configure_dt>
	if (ret < 0) {
     4b0:	2800      	cmp	r0, #0
     4b2:	db2a      	blt.n	50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
		return 1 ;
	}
	ret = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_ACTIVE);
     4b4:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     4b8:	481b      	ldr	r0, [pc, #108]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
     4ba:	f004 fde5 	bl	5088 <gpio_pin_configure_dt>
	if (ret < 0) {
     4be:	2800      	cmp	r0, #0
     4c0:	db23      	blt.n	50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
		return 1 ;
	}

/* STEP 8 - Register the UART callback function */
ret = uart_callback_set(uart, uart_cb, NULL);
     4c2:	4b15      	ldr	r3, [pc, #84]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     4c4:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
     4c6:	6883      	ldr	r3, [r0, #8]
	if (api->callback_set == NULL) {
     4c8:	681b      	ldr	r3, [r3, #0]
     4ca:	b1f3      	cbz	r3, 50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
	return api->callback_set(dev, callback, user_data);
     4cc:	2200      	movs	r2, #0
     4ce:	4917      	ldr	r1, [pc, #92]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     4d0:	4798      	blx	r3
		if (ret) {
     4d2:	b9d0      	cbnz	r0, 50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
			return 1;
		}

/* STEP 9.2 - Send the data over UART by calling uart_tx() */
ret = uart_tx(uart, tx_buf, sizeof(tx_buf), SYS_FOREVER_US);
     4d4:	4b10      	ldr	r3, [pc, #64]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     4d6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
     4d8:	6883      	ldr	r3, [r0, #8]
	return api->tx(dev, buf, len, timeout);
     4da:	685c      	ldr	r4, [r3, #4]
     4dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     4e0:	226d      	movs	r2, #109	; 0x6d
     4e2:	4913      	ldr	r1, [pc, #76]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     4e4:	47a0      	blx	r4
	if (ret) {
     4e6:	b980      	cbnz	r0, 50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
		return 1;
	}

/* STEP 10.3  - Start receiving by calling uart_rx_enable() and pass it the address of the receive  buffer */
ret = uart_rx_enable(uart ,rx_buf,sizeof rx_buf,RECEIVE_TIMEOUT);
     4e8:	4b0b      	ldr	r3, [pc, #44]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     4ea:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
     4ec:	6883      	ldr	r3, [r0, #8]
	return api->rx_enable(dev, buf, len, timeout);
     4ee:	68dc      	ldr	r4, [r3, #12]
     4f0:	2364      	movs	r3, #100	; 0x64
     4f2:	220a      	movs	r2, #10
     4f4:	490f      	ldr	r1, [pc, #60]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     4f6:	47a0      	blx	r4
	if (ret) {
     4f8:	b938      	cbnz	r0, 50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
		return 1;
	}

	while (1) {
		k_msleep(SLEEP_TIME_MS);
     4fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     4fe:	f004 fdd8 	bl	50b2 <k_msleep>
	while (1) {
     502:	e7fa      	b.n	4fa <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12>
		printk("UART device not ready\r\n");
     504:	480c      	ldr	r0, [pc, #48]	; (538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>)
     506:	f004 fdec 	bl	50e2 <printk>
	}

     50a:	2001      	movs	r0, #1
     50c:	bd10      	pop	{r4, pc}
		printk("GPIO device is not ready\r\n");
     50e:	480b      	ldr	r0, [pc, #44]	; (53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>)
     510:	f004 fde7 	bl	50e2 <printk>
		return 1;
     514:	e7f9      	b.n	50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
     516:	bf00      	nop
     518:	20000140 	.word	0x20000140
     51c:	00007594 	.word	0x00007594
     520:	000078ac 	.word	0x000078ac
     524:	000078a4 	.word	0x000078a4
     528:	0000789c 	.word	0x0000789c
     52c:	00000425 	.word	0x00000425
     530:	200000d0 	.word	0x200000d0
     534:	20000460 	.word	0x20000460
     538:	00007868 	.word	0x00007868
     53c:	00007880 	.word	0x00007880

00000540 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
     540:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
     542:	4b02      	ldr	r3, [pc, #8]	; (54c <char_out+0xc>)
     544:	681b      	ldr	r3, [r3, #0]
     546:	4798      	blx	r3
}
     548:	bd08      	pop	{r3, pc}
     54a:	bf00      	nop
     54c:	20000144 	.word	0x20000144

00000550 <__printk_hook_install>:
	_char_out = fn;
     550:	4b01      	ldr	r3, [pc, #4]	; (558 <__printk_hook_install+0x8>)
     552:	6018      	str	r0, [r3, #0]
}
     554:	4770      	bx	lr
     556:	bf00      	nop
     558:	20000144 	.word	0x20000144

0000055c <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     55c:	b500      	push	{lr}
     55e:	b083      	sub	sp, #12
     560:	4602      	mov	r2, r0
     562:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     564:	2100      	movs	r1, #0
     566:	9100      	str	r1, [sp, #0]
     568:	4802      	ldr	r0, [pc, #8]	; (574 <vprintk+0x18>)
     56a:	f000 f91d 	bl	7a8 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     56e:	b003      	add	sp, #12
     570:	f85d fb04 	ldr.w	pc, [sp], #4
     574:	00000541 	.word	0x00000541

00000578 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     57c:	b083      	sub	sp, #12
     57e:	4604      	mov	r4, r0
     580:	4608      	mov	r0, r1
     582:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     584:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     586:	f013 0f08 	tst.w	r3, #8
     58a:	d105      	bne.n	598 <process_event+0x20>
     58c:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     590:	2300      	movs	r3, #0
     592:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     594:	9301      	str	r3, [sp, #4]
}
     596:	e055      	b.n	644 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
     598:	2901      	cmp	r1, #1
     59a:	d009      	beq.n	5b0 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     59c:	f043 0320 	orr.w	r3, r3, #32
     5a0:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     5a2:	f385 8811 	msr	BASEPRI, r5
     5a6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     5aa:	b003      	add	sp, #12
     5ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     5b0:	f043 0310 	orr.w	r3, r3, #16
     5b4:	8323      	strh	r3, [r4, #24]
     5b6:	e7f4      	b.n	5a2 <process_event+0x2a>
			evt = process_recheck(mgr);
     5b8:	4620      	mov	r0, r4
     5ba:	f004 fdd4 	bl	5166 <process_recheck>
     5be:	e043      	b.n	648 <process_event+0xd0>
			res = mgr->last_res;
     5c0:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     5c4:	464a      	mov	r2, r9
     5c6:	4669      	mov	r1, sp
     5c8:	4620      	mov	r0, r4
     5ca:	f004 fde5 	bl	5198 <process_complete>
		onoff_transition_fn transit = NULL;
     5ce:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5d2:	8b23      	ldrh	r3, [r4, #24]
     5d4:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5d8:	42b7      	cmp	r7, r6
     5da:	d069      	beq.n	6b0 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     5dc:	68a2      	ldr	r2, [r4, #8]
     5de:	2a00      	cmp	r2, #0
     5e0:	d066      	beq.n	6b0 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5e2:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     5e4:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     5e8:	8323      	strh	r3, [r4, #24]
     5ea:	f385 8811 	msr	BASEPRI, r5
     5ee:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     5f2:	2a00      	cmp	r2, #0
     5f4:	d164      	bne.n	6c0 <process_event+0x148>
     5f6:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     5f8:	b12b      	cbz	r3, 606 <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
     5fa:	464b      	mov	r3, r9
     5fc:	463a      	mov	r2, r7
     5fe:	4669      	mov	r1, sp
     600:	4620      	mov	r0, r4
     602:	f004 fe42 	bl	528a <notify_all>
			if (transit != NULL) {
     606:	f1b8 0f00 	cmp.w	r8, #0
     60a:	d002      	beq.n	612 <process_event+0x9a>
				transit(mgr, transition_complete);
     60c:	4934      	ldr	r1, [pc, #208]	; (6e0 <process_event+0x168>)
     60e:	4620      	mov	r0, r4
     610:	47c0      	blx	r8
	__asm__ volatile(
     612:	f04f 0320 	mov.w	r3, #32
     616:	f3ef 8511 	mrs	r5, BASEPRI
     61a:	f383 8812 	msr	BASEPRI_MAX, r3
     61e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     622:	8b23      	ldrh	r3, [r4, #24]
     624:	f023 0308 	bic.w	r3, r3, #8
     628:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     62a:	8b23      	ldrh	r3, [r4, #24]
     62c:	f013 0f10 	tst.w	r3, #16
     630:	d04c      	beq.n	6cc <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     632:	f023 0310 	bic.w	r3, r3, #16
     636:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     638:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     63a:	8b26      	ldrh	r6, [r4, #24]
     63c:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     640:	2800      	cmp	r0, #0
     642:	d0ae      	beq.n	5a2 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     644:	2802      	cmp	r0, #2
     646:	d0b7      	beq.n	5b8 <process_event+0x40>
		if (evt == EVT_NOP) {
     648:	2800      	cmp	r0, #0
     64a:	d0aa      	beq.n	5a2 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     64c:	3801      	subs	r0, #1
     64e:	2804      	cmp	r0, #4
     650:	d82a      	bhi.n	6a8 <process_event+0x130>
     652:	a301      	add	r3, pc, #4	; (adr r3, 658 <process_event+0xe0>)
     654:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     658:	000005c1 	.word	0x000005c1
     65c:	000006a9 	.word	0x000006a9
     660:	0000066d 	.word	0x0000066d
     664:	00000681 	.word	0x00000681
     668:	00000695 	.word	0x00000695
			transit = mgr->transitions->start;
     66c:	6923      	ldr	r3, [r4, #16]
     66e:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
     672:	2106      	movs	r1, #6
     674:	4620      	mov	r0, r4
     676:	f004 fd4c 	bl	5112 <set_state>
		res = 0;
     67a:	f04f 0900 	mov.w	r9, #0
     67e:	e7a8      	b.n	5d2 <process_event+0x5a>
			transit = mgr->transitions->stop;
     680:	6923      	ldr	r3, [r4, #16]
     682:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     686:	2104      	movs	r1, #4
     688:	4620      	mov	r0, r4
     68a:	f004 fd42 	bl	5112 <set_state>
		res = 0;
     68e:	f04f 0900 	mov.w	r9, #0
     692:	e79e      	b.n	5d2 <process_event+0x5a>
			transit = mgr->transitions->reset;
     694:	6923      	ldr	r3, [r4, #16]
     696:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     69a:	2105      	movs	r1, #5
     69c:	4620      	mov	r0, r4
     69e:	f004 fd38 	bl	5112 <set_state>
		res = 0;
     6a2:	f04f 0900 	mov.w	r9, #0
     6a6:	e794      	b.n	5d2 <process_event+0x5a>
		if (evt == EVT_NOP) {
     6a8:	f04f 0800 	mov.w	r8, #0
     6ac:	46c1      	mov	r9, r8
     6ae:	e790      	b.n	5d2 <process_event+0x5a>
     6b0:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     6b2:	b10a      	cbz	r2, 6b8 <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6b4:	2200      	movs	r2, #0
     6b6:	e795      	b.n	5e4 <process_event+0x6c>
		    || (transit != NULL)) {
     6b8:	f1b8 0f00 	cmp.w	r8, #0
     6bc:	d192      	bne.n	5e4 <process_event+0x6c>
     6be:	e7b4      	b.n	62a <process_event+0xb2>
				notify_monitors(mgr, state, res);
     6c0:	464a      	mov	r2, r9
     6c2:	4639      	mov	r1, r7
     6c4:	4620      	mov	r0, r4
     6c6:	f004 fd2c 	bl	5122 <notify_monitors>
     6ca:	e794      	b.n	5f6 <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     6cc:	f013 0f20 	tst.w	r3, #32
     6d0:	d004      	beq.n	6dc <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     6d2:	f023 0320 	bic.w	r3, r3, #32
     6d6:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     6d8:	2002      	movs	r0, #2
     6da:	e7ae      	b.n	63a <process_event+0xc2>
		evt = EVT_NOP;
     6dc:	2000      	movs	r0, #0
     6de:	e7ac      	b.n	63a <process_event+0xc2>
     6e0:	000052b9 	.word	0x000052b9

000006e4 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
     6e4:	4684      	mov	ip, r0
     6e6:	4608      	mov	r0, r1
	bool loop = true;
     6e8:	2201      	movs	r2, #1
     6ea:	e026      	b.n	73a <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
     6ec:	f89c 3000 	ldrb.w	r3, [ip]
     6f0:	f043 0304 	orr.w	r3, r3, #4
     6f4:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
     6f8:	b1f2      	cbz	r2, 738 <extract_flags+0x54>
			++sp;
     6fa:	3001      	adds	r0, #1
     6fc:	e01c      	b.n	738 <extract_flags+0x54>
			conv->flag_plus = true;
     6fe:	f89c 3000 	ldrb.w	r3, [ip]
     702:	f043 0308 	orr.w	r3, r3, #8
     706:	f88c 3000 	strb.w	r3, [ip]
			break;
     70a:	e7f5      	b.n	6f8 <extract_flags+0x14>
			conv->flag_space = true;
     70c:	f89c 3000 	ldrb.w	r3, [ip]
     710:	f043 0310 	orr.w	r3, r3, #16
     714:	f88c 3000 	strb.w	r3, [ip]
			break;
     718:	e7ee      	b.n	6f8 <extract_flags+0x14>
			conv->flag_hash = true;
     71a:	f89c 3000 	ldrb.w	r3, [ip]
     71e:	f043 0320 	orr.w	r3, r3, #32
     722:	f88c 3000 	strb.w	r3, [ip]
			break;
     726:	e7e7      	b.n	6f8 <extract_flags+0x14>
			conv->flag_zero = true;
     728:	f89c 3000 	ldrb.w	r3, [ip]
     72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     730:	f88c 3000 	strb.w	r3, [ip]
			break;
     734:	e7e0      	b.n	6f8 <extract_flags+0x14>
		switch (*sp) {
     736:	2200      	movs	r2, #0
		}
	} while (loop);
     738:	b342      	cbz	r2, 78c <extract_flags+0xa8>
		switch (*sp) {
     73a:	7803      	ldrb	r3, [r0, #0]
     73c:	3b20      	subs	r3, #32
     73e:	2b10      	cmp	r3, #16
     740:	d8f9      	bhi.n	736 <extract_flags+0x52>
     742:	a101      	add	r1, pc, #4	; (adr r1, 748 <extract_flags+0x64>)
     744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     748:	0000070d 	.word	0x0000070d
     74c:	00000737 	.word	0x00000737
     750:	00000737 	.word	0x00000737
     754:	0000071b 	.word	0x0000071b
     758:	00000737 	.word	0x00000737
     75c:	00000737 	.word	0x00000737
     760:	00000737 	.word	0x00000737
     764:	00000737 	.word	0x00000737
     768:	00000737 	.word	0x00000737
     76c:	00000737 	.word	0x00000737
     770:	00000737 	.word	0x00000737
     774:	000006ff 	.word	0x000006ff
     778:	00000737 	.word	0x00000737
     77c:	000006ed 	.word	0x000006ed
     780:	00000737 	.word	0x00000737
     784:	00000737 	.word	0x00000737
     788:	00000729 	.word	0x00000729

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
     78c:	f89c 3000 	ldrb.w	r3, [ip]
     790:	f003 0344 	and.w	r3, r3, #68	; 0x44
     794:	2b44      	cmp	r3, #68	; 0x44
     796:	d000      	beq.n	79a <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
     798:	4770      	bx	lr
		conv->flag_zero = false;
     79a:	f89c 3000 	ldrb.w	r3, [ip]
     79e:	f36f 1386 	bfc	r3, #6, #1
     7a2:	f88c 3000 	strb.w	r3, [ip]
     7a6:	e7f7      	b.n	798 <extract_flags+0xb4>

000007a8 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7ac:	b091      	sub	sp, #68	; 0x44
     7ae:	4606      	mov	r6, r0
     7b0:	460d      	mov	r5, r1
     7b2:	4691      	mov	r9, r2
     7b4:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     7b6:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     7b8:	f899 0000 	ldrb.w	r0, [r9]
     7bc:	2800      	cmp	r0, #0
     7be:	f000 82b9 	beq.w	d34 <CONFIG_ISR_STACK_SIZE+0x534>
		if (*fp != '%') {
     7c2:	2825      	cmp	r0, #37	; 0x25
     7c4:	d008      	beq.n	7d8 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     7c6:	f109 0901 	add.w	r9, r9, #1
     7ca:	4629      	mov	r1, r5
     7cc:	47b0      	blx	r6
     7ce:	2800      	cmp	r0, #0
     7d0:	f2c0 82b1 	blt.w	d36 <CONFIG_ISR_STACK_SIZE+0x536>
     7d4:	3401      	adds	r4, #1
			continue;
     7d6:	e7ef      	b.n	7b8 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     7d8:	2300      	movs	r3, #0
     7da:	9304      	str	r3, [sp, #16]
     7dc:	9305      	str	r3, [sp, #20]
     7de:	9306      	str	r3, [sp, #24]
     7e0:	9307      	str	r3, [sp, #28]
     7e2:	9308      	str	r3, [sp, #32]
     7e4:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     7e6:	4649      	mov	r1, r9
     7e8:	a806      	add	r0, sp, #24
     7ea:	f004 ff81 	bl	56f0 <extract_conversion>
     7ee:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     7f0:	f89d 3019 	ldrb.w	r3, [sp, #25]
     7f4:	f013 0f01 	tst.w	r3, #1
     7f8:	f000 8097 	beq.w	92a <CONFIG_ISR_STACK_SIZE+0x12a>
			width = va_arg(ap, int);
     7fc:	9b03      	ldr	r3, [sp, #12]
     7fe:	1d1a      	adds	r2, r3, #4
     800:	9203      	str	r2, [sp, #12]
     802:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     804:	2f00      	cmp	r7, #0
     806:	f2c0 8088 	blt.w	91a <CONFIG_ISR_STACK_SIZE+0x11a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     80a:	f89d 3019 	ldrb.w	r3, [sp, #25]
     80e:	f013 0f04 	tst.w	r3, #4
     812:	f000 809c 	beq.w	94e <CONFIG_ISR_STACK_SIZE+0x14e>
			int arg = va_arg(ap, int);
     816:	9b03      	ldr	r3, [sp, #12]
     818:	1d1a      	adds	r2, r3, #4
     81a:	9203      	str	r2, [sp, #12]
     81c:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     820:	f1ba 0f00 	cmp.w	sl, #0
     824:	f2c0 808a 	blt.w	93c <CONFIG_ISR_STACK_SIZE+0x13c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     828:	2300      	movs	r3, #0
     82a:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     82c:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     82e:	f89d 301a 	ldrb.w	r3, [sp, #26]
     832:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     836:	f89d 1019 	ldrb.w	r1, [sp, #25]
     83a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     83e:	2b01      	cmp	r3, #1
     840:	f000 808e 	beq.w	960 <CONFIG_ISR_STACK_SIZE+0x160>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     844:	2b02      	cmp	r3, #2
     846:	f000 80d3 	beq.w	9f0 <CONFIG_ISR_STACK_SIZE+0x1f0>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     84a:	2b04      	cmp	r3, #4
     84c:	f000 8124 	beq.w	a98 <CONFIG_ISR_STACK_SIZE+0x298>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     850:	2b03      	cmp	r3, #3
     852:	f000 813b 	beq.w	acc <CONFIG_ISR_STACK_SIZE+0x2cc>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     856:	f89d 8018 	ldrb.w	r8, [sp, #24]
     85a:	f018 0b03 	ands.w	fp, r8, #3
     85e:	f040 813b 	bne.w	ad8 <CONFIG_ISR_STACK_SIZE+0x2d8>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     862:	f89d 301b 	ldrb.w	r3, [sp, #27]
     866:	3b25      	subs	r3, #37	; 0x25
     868:	2b53      	cmp	r3, #83	; 0x53
     86a:	f200 81ca 	bhi.w	c02 <CONFIG_ISR_STACK_SIZE+0x402>
     86e:	e8df f013 	tbh	[pc, r3, lsl #1]
     872:	0140      	.short	0x0140
     874:	01c801c8 	.word	0x01c801c8
     878:	01c801c8 	.word	0x01c801c8
     87c:	01c801c8 	.word	0x01c801c8
     880:	01c801c8 	.word	0x01c801c8
     884:	01c801c8 	.word	0x01c801c8
     888:	01c801c8 	.word	0x01c801c8
     88c:	01c801c8 	.word	0x01c801c8
     890:	01c801c8 	.word	0x01c801c8
     894:	01c801c8 	.word	0x01c801c8
     898:	01c801c8 	.word	0x01c801c8
     89c:	01c801c8 	.word	0x01c801c8
     8a0:	01c801c8 	.word	0x01c801c8
     8a4:	01c801c8 	.word	0x01c801c8
     8a8:	01c801c8 	.word	0x01c801c8
     8ac:	01c801c8 	.word	0x01c801c8
     8b0:	01c801c8 	.word	0x01c801c8
     8b4:	01c801c8 	.word	0x01c801c8
     8b8:	01c801c8 	.word	0x01c801c8
     8bc:	01c801c8 	.word	0x01c801c8
     8c0:	01c801c8 	.word	0x01c801c8
     8c4:	01c801c8 	.word	0x01c801c8
     8c8:	01c801c8 	.word	0x01c801c8
     8cc:	01c801c8 	.word	0x01c801c8
     8d0:	01c801c8 	.word	0x01c801c8
     8d4:	01c801c8 	.word	0x01c801c8
     8d8:	01c80181 	.word	0x01c80181
     8dc:	01c801c8 	.word	0x01c801c8
     8e0:	01c801c8 	.word	0x01c801c8
     8e4:	01c801c8 	.word	0x01c801c8
     8e8:	01c801c8 	.word	0x01c801c8
     8ec:	015e01c8 	.word	0x015e01c8
     8f0:	01c80167 	.word	0x01c80167
     8f4:	01c801c8 	.word	0x01c801c8
     8f8:	016701c8 	.word	0x016701c8
     8fc:	01c801c8 	.word	0x01c801c8
     900:	01c801c8 	.word	0x01c801c8
     904:	018101bd 	.word	0x018101bd
     908:	01c801a1 	.word	0x01c801a1
     90c:	014d01c8 	.word	0x014d01c8
     910:	018101c8 	.word	0x018101c8
     914:	01c801c8 	.word	0x01c801c8
     918:	0181      	.short	0x0181
				conv->flag_dash = true;
     91a:	f89d 3018 	ldrb.w	r3, [sp, #24]
     91e:	f043 0304 	orr.w	r3, r3, #4
     922:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     926:	427f      	negs	r7, r7
     928:	e76f      	b.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
		} else if (conv->width_present) {
     92a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     92e:	2b00      	cmp	r3, #0
     930:	db02      	blt.n	938 <CONFIG_ISR_STACK_SIZE+0x138>
		int width = -1;
     932:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     936:	e768      	b.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
			width = conv->width_value;
     938:	9f07      	ldr	r7, [sp, #28]
     93a:	e766      	b.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
				conv->prec_present = false;
     93c:	f89d 3019 	ldrb.w	r3, [sp, #25]
     940:	f36f 0341 	bfc	r3, #1, #1
     944:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     948:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     94c:	e76c      	b.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
		} else if (conv->prec_present) {
     94e:	f013 0f02 	tst.w	r3, #2
     952:	d002      	beq.n	95a <CONFIG_ISR_STACK_SIZE+0x15a>
			precision = conv->prec_value;
     954:	f8dd a020 	ldr.w	sl, [sp, #32]
     958:	e766      	b.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
		int precision = -1;
     95a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     95e:	e763      	b.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
			switch (length_mod) {
     960:	1ecb      	subs	r3, r1, #3
     962:	2b04      	cmp	r3, #4
     964:	d804      	bhi.n	970 <CONFIG_ISR_STACK_SIZE+0x170>
     966:	e8df f003 	tbb	[pc, r3]
     96a:	1d0b      	.short	0x1d0b
     96c:	3529      	.short	0x3529
     96e:	35          	.byte	0x35
     96f:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     970:	9b03      	ldr	r3, [sp, #12]
     972:	1d1a      	adds	r2, r3, #4
     974:	9203      	str	r2, [sp, #12]
     976:	681b      	ldr	r3, [r3, #0]
     978:	17da      	asrs	r2, r3, #31
     97a:	9304      	str	r3, [sp, #16]
     97c:	9205      	str	r2, [sp, #20]
				break;
     97e:	e006      	b.n	98e <CONFIG_ISR_STACK_SIZE+0x18e>
					value->sint = va_arg(ap, long);
     980:	9b03      	ldr	r3, [sp, #12]
     982:	1d1a      	adds	r2, r3, #4
     984:	9203      	str	r2, [sp, #12]
     986:	681b      	ldr	r3, [r3, #0]
     988:	17da      	asrs	r2, r3, #31
     98a:	9304      	str	r3, [sp, #16]
     98c:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     98e:	2901      	cmp	r1, #1
     990:	d028      	beq.n	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
			} else if (length_mod == LENGTH_H) {
     992:	2902      	cmp	r1, #2
     994:	f47f af5f 	bne.w	856 <CONFIG_ISR_STACK_SIZE+0x56>
				value->sint = (short)value->sint;
     998:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     99c:	17da      	asrs	r2, r3, #31
     99e:	9304      	str	r3, [sp, #16]
     9a0:	9205      	str	r2, [sp, #20]
     9a2:	e758      	b.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
					(sint_value_type)va_arg(ap, long long);
     9a4:	9b03      	ldr	r3, [sp, #12]
     9a6:	3307      	adds	r3, #7
     9a8:	f023 0307 	bic.w	r3, r3, #7
     9ac:	f103 0208 	add.w	r2, r3, #8
     9b0:	9203      	str	r2, [sp, #12]
     9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     9b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     9ba:	e7e8      	b.n	98e <CONFIG_ISR_STACK_SIZE+0x18e>
					(sint_value_type)va_arg(ap, intmax_t);
     9bc:	9b03      	ldr	r3, [sp, #12]
     9be:	3307      	adds	r3, #7
     9c0:	f023 0307 	bic.w	r3, r3, #7
     9c4:	f103 0208 	add.w	r2, r3, #8
     9c8:	9203      	str	r2, [sp, #12]
     9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     9ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     9d2:	e7dc      	b.n	98e <CONFIG_ISR_STACK_SIZE+0x18e>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     9d4:	9b03      	ldr	r3, [sp, #12]
     9d6:	1d1a      	adds	r2, r3, #4
     9d8:	9203      	str	r2, [sp, #12]
     9da:	681b      	ldr	r3, [r3, #0]
     9dc:	17da      	asrs	r2, r3, #31
				value->sint =
     9de:	9304      	str	r3, [sp, #16]
     9e0:	9205      	str	r2, [sp, #20]
				break;
     9e2:	e7d4      	b.n	98e <CONFIG_ISR_STACK_SIZE+0x18e>
				value->sint = (signed char)value->sint;
     9e4:	f99d 3010 	ldrsb.w	r3, [sp, #16]
     9e8:	17da      	asrs	r2, r3, #31
     9ea:	9304      	str	r3, [sp, #16]
     9ec:	9205      	str	r2, [sp, #20]
     9ee:	e732      	b.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
			switch (length_mod) {
     9f0:	1ecb      	subs	r3, r1, #3
     9f2:	2b04      	cmp	r3, #4
     9f4:	d804      	bhi.n	a00 <CONFIG_ISR_STACK_SIZE+0x200>
     9f6:	e8df f003 	tbb	[pc, r3]
     9fa:	1f0b      	.short	0x1f0b
     9fc:	4135      	.short	0x4135
     9fe:	41          	.byte	0x41
     9ff:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     a00:	9b03      	ldr	r3, [sp, #12]
     a02:	1d1a      	adds	r2, r3, #4
     a04:	9203      	str	r2, [sp, #12]
     a06:	681b      	ldr	r3, [r3, #0]
     a08:	9304      	str	r3, [sp, #16]
     a0a:	2300      	movs	r3, #0
     a0c:	9305      	str	r3, [sp, #20]
				break;
     a0e:	e01e      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
				    && (conv->specifier == 'c')) {
     a10:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     a14:	2b63      	cmp	r3, #99	; 0x63
     a16:	d007      	beq.n	a28 <CONFIG_ISR_STACK_SIZE+0x228>
					value->uint = va_arg(ap, unsigned long);
     a18:	9b03      	ldr	r3, [sp, #12]
     a1a:	1d1a      	adds	r2, r3, #4
     a1c:	9203      	str	r2, [sp, #12]
     a1e:	681b      	ldr	r3, [r3, #0]
     a20:	9304      	str	r3, [sp, #16]
     a22:	2300      	movs	r3, #0
     a24:	9305      	str	r3, [sp, #20]
     a26:	e012      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
					value->uint = (wchar_t)va_arg(ap,
     a28:	9b03      	ldr	r3, [sp, #12]
     a2a:	1d1a      	adds	r2, r3, #4
     a2c:	9203      	str	r2, [sp, #12]
     a2e:	681b      	ldr	r3, [r3, #0]
     a30:	9304      	str	r3, [sp, #16]
     a32:	2300      	movs	r3, #0
     a34:	9305      	str	r3, [sp, #20]
     a36:	e00a      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
					(uint_value_type)va_arg(ap,
     a38:	9b03      	ldr	r3, [sp, #12]
     a3a:	3307      	adds	r3, #7
     a3c:	f023 0307 	bic.w	r3, r3, #7
     a40:	f103 0208 	add.w	r2, r3, #8
     a44:	9203      	str	r2, [sp, #12]
     a46:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     a4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     a4e:	2901      	cmp	r1, #1
     a50:	d01c      	beq.n	a8c <CONFIG_ISR_STACK_SIZE+0x28c>
			} else if (length_mod == LENGTH_H) {
     a52:	2902      	cmp	r1, #2
     a54:	f47f aeff 	bne.w	856 <CONFIG_ISR_STACK_SIZE+0x56>
				value->uint = (unsigned short)value->uint;
     a58:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     a5c:	9304      	str	r3, [sp, #16]
     a5e:	2300      	movs	r3, #0
     a60:	9305      	str	r3, [sp, #20]
     a62:	e6f8      	b.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
					(uint_value_type)va_arg(ap,
     a64:	9b03      	ldr	r3, [sp, #12]
     a66:	3307      	adds	r3, #7
     a68:	f023 0307 	bic.w	r3, r3, #7
     a6c:	f103 0208 	add.w	r2, r3, #8
     a70:	9203      	str	r2, [sp, #12]
     a72:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     a76:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     a7a:	e7e8      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
					(uint_value_type)va_arg(ap, size_t);
     a7c:	9b03      	ldr	r3, [sp, #12]
     a7e:	1d1a      	adds	r2, r3, #4
     a80:	9203      	str	r2, [sp, #12]
     a82:	681b      	ldr	r3, [r3, #0]
				value->uint =
     a84:	9304      	str	r3, [sp, #16]
     a86:	2300      	movs	r3, #0
     a88:	9305      	str	r3, [sp, #20]
				break;
     a8a:	e7e0      	b.n	a4e <CONFIG_ISR_STACK_SIZE+0x24e>
				value->uint = (unsigned char)value->uint;
     a8c:	f89d 3010 	ldrb.w	r3, [sp, #16]
     a90:	9304      	str	r3, [sp, #16]
     a92:	2300      	movs	r3, #0
     a94:	9305      	str	r3, [sp, #20]
     a96:	e6de      	b.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
			if (length_mod == LENGTH_UPPER_L) {
     a98:	2908      	cmp	r1, #8
     a9a:	d00b      	beq.n	ab4 <CONFIG_ISR_STACK_SIZE+0x2b4>
				value->dbl = va_arg(ap, double);
     a9c:	9b03      	ldr	r3, [sp, #12]
     a9e:	3307      	adds	r3, #7
     aa0:	f023 0307 	bic.w	r3, r3, #7
     aa4:	f103 0208 	add.w	r2, r3, #8
     aa8:	9203      	str	r2, [sp, #12]
     aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
     aae:	e9cd 2304 	strd	r2, r3, [sp, #16]
     ab2:	e6d0      	b.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
				value->ldbl = va_arg(ap, long double);
     ab4:	9b03      	ldr	r3, [sp, #12]
     ab6:	3307      	adds	r3, #7
     ab8:	f023 0307 	bic.w	r3, r3, #7
     abc:	f103 0208 	add.w	r2, r3, #8
     ac0:	9203      	str	r2, [sp, #12]
     ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
     ac6:	e9cd 2304 	strd	r2, r3, [sp, #16]
     aca:	e6c4      	b.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
			value->ptr = va_arg(ap, void *);
     acc:	9b03      	ldr	r3, [sp, #12]
     ace:	1d1a      	adds	r2, r3, #4
     ad0:	9203      	str	r2, [sp, #12]
     ad2:	681b      	ldr	r3, [r3, #0]
     ad4:	9304      	str	r3, [sp, #16]
     ad6:	e6be      	b.n	856 <CONFIG_ISR_STACK_SIZE+0x56>
			OUTS(sp, fp);
     ad8:	9f02      	ldr	r7, [sp, #8]
     ada:	463b      	mov	r3, r7
     adc:	464a      	mov	r2, r9
     ade:	4629      	mov	r1, r5
     ae0:	4630      	mov	r0, r6
     ae2:	f004 feab 	bl	583c <outs>
     ae6:	2800      	cmp	r0, #0
     ae8:	f2c0 8125 	blt.w	d36 <CONFIG_ISR_STACK_SIZE+0x536>
     aec:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     aee:	46b9      	mov	r9, r7
			continue;
     af0:	e662      	b.n	7b8 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
     af2:	4629      	mov	r1, r5
     af4:	2025      	movs	r0, #37	; 0x25
     af6:	47b0      	blx	r6
     af8:	2800      	cmp	r0, #0
     afa:	f2c0 811c 	blt.w	d36 <CONFIG_ISR_STACK_SIZE+0x536>
     afe:	3401      	adds	r4, #1
		char sign = 0;
     b00:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     b02:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     b06:	f04f 0900 	mov.w	r9, #0
			break;
     b0a:	e07f      	b.n	c0c <CONFIG_ISR_STACK_SIZE+0x40c>
		case 's': {
			bps = (const char *)value->ptr;
     b0c:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     b10:	f1ba 0f00 	cmp.w	sl, #0
     b14:	db07      	blt.n	b26 <CONFIG_ISR_STACK_SIZE+0x326>
				len = strnlen(bps, precision);
     b16:	4651      	mov	r1, sl
     b18:	4648      	mov	r0, r9
     b1a:	f004 ffcf 	bl	5abc <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     b1e:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     b22:	46d8      	mov	r8, fp
			precision = -1;

			break;
     b24:	e072      	b.n	c0c <CONFIG_ISR_STACK_SIZE+0x40c>
				len = strlen(bps);
     b26:	4648      	mov	r0, r9
     b28:	f004 ffbf 	bl	5aaa <strlen>
     b2c:	e7f7      	b.n	b1e <CONFIG_ISR_STACK_SIZE+0x31e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     b2e:	9b04      	ldr	r3, [sp, #16]
     b30:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     b34:	46d8      	mov	r8, fp
			bpe = buf + 1;
     b36:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     b3a:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     b3e:	e065      	b.n	c0c <CONFIG_ISR_STACK_SIZE+0x40c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     b40:	f018 0f08 	tst.w	r8, #8
     b44:	d105      	bne.n	b52 <CONFIG_ISR_STACK_SIZE+0x352>
				sign = '+';
			} else if (conv->flag_space) {
     b46:	f018 0810 	ands.w	r8, r8, #16
     b4a:	d004      	beq.n	b56 <CONFIG_ISR_STACK_SIZE+0x356>
				sign = ' ';
     b4c:	f04f 0820 	mov.w	r8, #32
     b50:	e001      	b.n	b56 <CONFIG_ISR_STACK_SIZE+0x356>
				sign = '+';
     b52:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     b56:	9a04      	ldr	r2, [sp, #16]
     b58:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     b5a:	2b00      	cmp	r3, #0
     b5c:	db02      	blt.n	b64 <CONFIG_ISR_STACK_SIZE+0x364>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     b5e:	9204      	str	r2, [sp, #16]
     b60:	9305      	str	r3, [sp, #20]
     b62:	e008      	b.n	b76 <CONFIG_ISR_STACK_SIZE+0x376>
				value->uint = (uint_value_type)-sint;
     b64:	4252      	negs	r2, r2
     b66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     b6a:	9204      	str	r2, [sp, #16]
     b6c:	9305      	str	r3, [sp, #20]
				sign = '-';
     b6e:	f04f 082d 	mov.w	r8, #45	; 0x2d
     b72:	e000      	b.n	b76 <CONFIG_ISR_STACK_SIZE+0x376>
		switch (conv->specifier) {
     b74:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     b76:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     b7a:	9300      	str	r3, [sp, #0]
     b7c:	ab0a      	add	r3, sp, #40	; 0x28
     b7e:	aa06      	add	r2, sp, #24
     b80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     b84:	f004 fdeb 	bl	575e <encode_uint>
     b88:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     b8a:	f1ba 0f00 	cmp.w	sl, #0
     b8e:	db6c      	blt.n	c6a <CONFIG_ISR_STACK_SIZE+0x46a>
				size_t len = bpe - bps;
     b90:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     b94:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     b98:	f89d 2018 	ldrb.w	r2, [sp, #24]
     b9c:	f36f 1286 	bfc	r2, #6, #1
     ba0:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     ba4:	459a      	cmp	sl, r3
     ba6:	d963      	bls.n	c70 <CONFIG_ISR_STACK_SIZE+0x470>
					conv->pad0_value = precision - (int)len;
     ba8:	ebaa 0303 	sub.w	r3, sl, r3
     bac:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     bae:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     bb2:	e02b      	b.n	c0c <CONFIG_ISR_STACK_SIZE+0x40c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     bb4:	9804      	ldr	r0, [sp, #16]
     bb6:	b928      	cbnz	r0, bc4 <CONFIG_ISR_STACK_SIZE+0x3c4>
		char sign = 0;
     bb8:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     bba:	f8df a180 	ldr.w	sl, [pc, #384]	; d3c <CONFIG_ISR_STACK_SIZE+0x53c>
			bps = "(nil)";
     bbe:	f1aa 0905 	sub.w	r9, sl, #5
     bc2:	e023      	b.n	c0c <CONFIG_ISR_STACK_SIZE+0x40c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     bc4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     bc8:	9300      	str	r3, [sp, #0]
     bca:	ab0a      	add	r3, sp, #40	; 0x28
     bcc:	aa06      	add	r2, sp, #24
     bce:	2100      	movs	r1, #0
     bd0:	f004 fdc5 	bl	575e <encode_uint>
     bd4:	4681      	mov	r9, r0
				conv->altform_0c = true;
     bd6:	f89d 301a 	ldrb.w	r3, [sp, #26]
     bda:	f043 0310 	orr.w	r3, r3, #16
     bde:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     be2:	2378      	movs	r3, #120	; 0x78
     be4:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     be8:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     bea:	e7ce      	b.n	b8a <CONFIG_ISR_STACK_SIZE+0x38a>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     bec:	4622      	mov	r2, r4
     bee:	9904      	ldr	r1, [sp, #16]
     bf0:	a806      	add	r0, sp, #24
     bf2:	f004 fe04 	bl	57fe <store_count>
		char sign = 0;
     bf6:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     bf8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     bfc:	f04f 0900 	mov.w	r9, #0
			}

			break;
     c00:	e004      	b.n	c0c <CONFIG_ISR_STACK_SIZE+0x40c>
		switch (conv->specifier) {
     c02:	46d8      	mov	r8, fp
     c04:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     c08:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     c0c:	f1b9 0f00 	cmp.w	r9, #0
     c10:	f000 808d 	beq.w	d2e <CONFIG_ISR_STACK_SIZE+0x52e>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     c14:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     c18:	f1b8 0f00 	cmp.w	r8, #0
     c1c:	d000      	beq.n	c20 <CONFIG_ISR_STACK_SIZE+0x420>
			nj_len += 1U;
     c1e:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     c20:	f89d 201a 	ldrb.w	r2, [sp, #26]
     c24:	f012 0f10 	tst.w	r2, #16
     c28:	d025      	beq.n	c76 <CONFIG_ISR_STACK_SIZE+0x476>
			nj_len += 2U;
     c2a:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     c2c:	9907      	ldr	r1, [sp, #28]
     c2e:	440b      	add	r3, r1
		if (conv->pad_fp) {
     c30:	f012 0f40 	tst.w	r2, #64	; 0x40
     c34:	d001      	beq.n	c3a <CONFIG_ISR_STACK_SIZE+0x43a>
			nj_len += conv->pad0_pre_exp;
     c36:	9a08      	ldr	r2, [sp, #32]
     c38:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     c3a:	2f00      	cmp	r7, #0
     c3c:	dd31      	ble.n	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
			width -= (int)nj_len;
     c3e:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     c40:	f89d 3018 	ldrb.w	r3, [sp, #24]
     c44:	f013 0f04 	tst.w	r3, #4
     c48:	d12b      	bne.n	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     c4a:	f013 0f40 	tst.w	r3, #64	; 0x40
     c4e:	d017      	beq.n	c80 <CONFIG_ISR_STACK_SIZE+0x480>
					if (sign != 0) {
     c50:	f1b8 0f00 	cmp.w	r8, #0
     c54:	d017      	beq.n	c86 <CONFIG_ISR_STACK_SIZE+0x486>
						OUTC(sign);
     c56:	4629      	mov	r1, r5
     c58:	4640      	mov	r0, r8
     c5a:	47b0      	blx	r6
     c5c:	2800      	cmp	r0, #0
     c5e:	db6a      	blt.n	d36 <CONFIG_ISR_STACK_SIZE+0x536>
     c60:	3401      	adds	r4, #1
						sign = 0;
     c62:	46d8      	mov	r8, fp
					}
					pad = '0';
     c64:	f04f 0b30 	mov.w	fp, #48	; 0x30
     c68:	e00f      	b.n	c8a <CONFIG_ISR_STACK_SIZE+0x48a>
		const char *bpe = buf + sizeof(buf);
     c6a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     c6e:	e7cd      	b.n	c0c <CONFIG_ISR_STACK_SIZE+0x40c>
     c70:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     c74:	e7ca      	b.n	c0c <CONFIG_ISR_STACK_SIZE+0x40c>
		} else if (conv->altform_0) {
     c76:	f012 0f08 	tst.w	r2, #8
     c7a:	d0d7      	beq.n	c2c <CONFIG_ISR_STACK_SIZE+0x42c>
			nj_len += 1U;
     c7c:	3301      	adds	r3, #1
     c7e:	e7d5      	b.n	c2c <CONFIG_ISR_STACK_SIZE+0x42c>
				char pad = ' ';
     c80:	f04f 0b20 	mov.w	fp, #32
     c84:	e001      	b.n	c8a <CONFIG_ISR_STACK_SIZE+0x48a>
					pad = '0';
     c86:	f04f 0b30 	mov.w	fp, #48	; 0x30
     c8a:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     c8c:	1e5f      	subs	r7, r3, #1
     c8e:	2b00      	cmp	r3, #0
     c90:	dd07      	ble.n	ca2 <CONFIG_ISR_STACK_SIZE+0x4a2>
					OUTC(pad);
     c92:	4629      	mov	r1, r5
     c94:	4658      	mov	r0, fp
     c96:	47b0      	blx	r6
     c98:	2800      	cmp	r0, #0
     c9a:	db4c      	blt.n	d36 <CONFIG_ISR_STACK_SIZE+0x536>
     c9c:	3401      	adds	r4, #1
				while (width-- > 0) {
     c9e:	463b      	mov	r3, r7
     ca0:	e7f4      	b.n	c8c <CONFIG_ISR_STACK_SIZE+0x48c>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     ca2:	f1b8 0f00 	cmp.w	r8, #0
     ca6:	d005      	beq.n	cb4 <CONFIG_ISR_STACK_SIZE+0x4b4>
			OUTC(sign);
     ca8:	4629      	mov	r1, r5
     caa:	4640      	mov	r0, r8
     cac:	47b0      	blx	r6
     cae:	2800      	cmp	r0, #0
     cb0:	db41      	blt.n	d36 <CONFIG_ISR_STACK_SIZE+0x536>
     cb2:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     cb4:	f89d 301a 	ldrb.w	r3, [sp, #26]
     cb8:	f3c3 1200 	ubfx	r2, r3, #4, #1
     cbc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     cc0:	431a      	orrs	r2, r3
     cc2:	d005      	beq.n	cd0 <CONFIG_ISR_STACK_SIZE+0x4d0>
				OUTC('0');
     cc4:	4629      	mov	r1, r5
     cc6:	2030      	movs	r0, #48	; 0x30
     cc8:	47b0      	blx	r6
     cca:	2800      	cmp	r0, #0
     ccc:	db33      	blt.n	d36 <CONFIG_ISR_STACK_SIZE+0x536>
     cce:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     cd0:	f89d 301a 	ldrb.w	r3, [sp, #26]
     cd4:	f013 0f10 	tst.w	r3, #16
     cd8:	d006      	beq.n	ce8 <CONFIG_ISR_STACK_SIZE+0x4e8>
				OUTC(conv->specifier);
     cda:	4629      	mov	r1, r5
     cdc:	f89d 001b 	ldrb.w	r0, [sp, #27]
     ce0:	47b0      	blx	r6
     ce2:	2800      	cmp	r0, #0
     ce4:	db27      	blt.n	d36 <CONFIG_ISR_STACK_SIZE+0x536>
     ce6:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     ce8:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     cea:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     cee:	2b00      	cmp	r3, #0
     cf0:	dd07      	ble.n	d02 <CONFIG_ISR_STACK_SIZE+0x502>
				OUTC('0');
     cf2:	4629      	mov	r1, r5
     cf4:	2030      	movs	r0, #48	; 0x30
     cf6:	47b0      	blx	r6
     cf8:	2800      	cmp	r0, #0
     cfa:	db1c      	blt.n	d36 <CONFIG_ISR_STACK_SIZE+0x536>
     cfc:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     cfe:	4643      	mov	r3, r8
     d00:	e7f3      	b.n	cea <CONFIG_ISR_STACK_SIZE+0x4ea>
			}

			OUTS(bps, bpe);
     d02:	4653      	mov	r3, sl
     d04:	464a      	mov	r2, r9
     d06:	4629      	mov	r1, r5
     d08:	4630      	mov	r0, r6
     d0a:	f004 fd97 	bl	583c <outs>
     d0e:	2800      	cmp	r0, #0
     d10:	db11      	blt.n	d36 <CONFIG_ISR_STACK_SIZE+0x536>
     d12:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     d14:	2f00      	cmp	r7, #0
     d16:	dd07      	ble.n	d28 <CONFIG_ISR_STACK_SIZE+0x528>
			OUTC(' ');
     d18:	4629      	mov	r1, r5
     d1a:	2020      	movs	r0, #32
     d1c:	47b0      	blx	r6
     d1e:	2800      	cmp	r0, #0
     d20:	db09      	blt.n	d36 <CONFIG_ISR_STACK_SIZE+0x536>
     d22:	3401      	adds	r4, #1
			--width;
     d24:	3f01      	subs	r7, #1
     d26:	e7f5      	b.n	d14 <CONFIG_ISR_STACK_SIZE+0x514>
		fp = extract_conversion(conv, sp);
     d28:	f8dd 9008 	ldr.w	r9, [sp, #8]
     d2c:	e544      	b.n	7b8 <z_cbvprintf_impl+0x10>
     d2e:	f8dd 9008 	ldr.w	r9, [sp, #8]
     d32:	e541      	b.n	7b8 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
     d34:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     d36:	b011      	add	sp, #68	; 0x44
     d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d3c:	000078b9 	.word	0x000078b9

00000d40 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     d40:	b508      	push	{r3, lr}
     d42:	f04f 0220 	mov.w	r2, #32
     d46:	f3ef 8311 	mrs	r3, BASEPRI
     d4a:	f382 8812 	msr	BASEPRI_MAX, r2
     d4e:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     d52:	f004 fe1a 	bl	598a <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     d56:	4803      	ldr	r0, [pc, #12]	; (d64 <sys_reboot+0x24>)
     d58:	f004 f9c3 	bl	50e2 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     d5c:	f000 fac0 	bl	12e0 <arch_cpu_idle>
     d60:	e7fc      	b.n	d5c <sys_reboot+0x1c>
     d62:	bf00      	nop
     d64:	000078bc 	.word	0x000078bc

00000d68 <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     d68:	b168      	cbz	r0, d86 <nrfx_coredep_delay_us+0x1e>
{
     d6a:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     d6c:	4a06      	ldr	r2, [pc, #24]	; (d88 <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     d6e:	4b07      	ldr	r3, [pc, #28]	; (d8c <nrfx_coredep_delay_us+0x24>)
     d70:	681b      	ldr	r3, [r3, #0]
     d72:	4907      	ldr	r1, [pc, #28]	; (d90 <nrfx_coredep_delay_us+0x28>)
     d74:	fba1 1303 	umull	r1, r3, r1, r3
     d78:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
     d7a:	fb00 f003 	mul.w	r0, r0, r3
     d7e:	f042 0301 	orr.w	r3, r2, #1
     d82:	4798      	blx	r3
}
     d84:	bd08      	pop	{r3, pc}
     d86:	4770      	bx	lr
     d88:	00007860 	.word	0x00007860
     d8c:	20000190 	.word	0x20000190
     d90:	431bde83 	.word	0x431bde83

00000d94 <nordicsemi_nrf53_init>:
     d94:	f04f 0320 	mov.w	r3, #32
     d98:	f3ef 8c11 	mrs	ip, BASEPRI
     d9c:	f383 8812 	msr	BASEPRI_MAX, r3
     da0:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     da4:	2101      	movs	r1, #1
     da6:	4b12      	ldr	r3, [pc, #72]	; (df0 <nordicsemi_nrf53_init+0x5c>)
     da8:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     dac:	4a11      	ldr	r2, [pc, #68]	; (df4 <nordicsemi_nrf53_init+0x60>)
     dae:	2302      	movs	r3, #2
     db0:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     db4:	4810      	ldr	r0, [pc, #64]	; (df8 <nordicsemi_nrf53_init+0x64>)
     db6:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     dba:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     dbe:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     dc2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     dc6:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
     dca:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     dce:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     dd2:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     dd6:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     dda:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     dde:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
     de2:	f38c 8811 	msr	BASEPRI, ip
     de6:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     dea:	2000      	movs	r0, #0
     dec:	4770      	bx	lr
     dee:	bf00      	nop
     df0:	50001000 	.word	0x50001000
     df4:	50004000 	.word	0x50004000
     df8:	50842500 	.word	0x50842500

00000dfc <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     dfc:	2806      	cmp	r0, #6
     dfe:	d000      	beq.n	e02 <pm_state_set+0x6>
     e00:	4770      	bx	lr
{
     e02:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
     e04:	4801      	ldr	r0, [pc, #4]	; (e0c <pm_state_set+0x10>)
     e06:	f004 fd38 	bl	587a <nrf_regulators_system_off>
     e0a:	bf00      	nop
     e0c:	50004000 	.word	0x50004000

00000e10 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     e10:	f002 b804 	b.w	2e1c <SystemInit>

00000e14 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     e14:	b570      	push	{r4, r5, r6, lr}
     e16:	4605      	mov	r5, r0
	__asm__ volatile(
     e18:	f04f 0320 	mov.w	r3, #32
     e1c:	f3ef 8611 	mrs	r6, BASEPRI
     e20:	f383 8812 	msr	BASEPRI_MAX, r3
     e24:	f3bf 8f6f 	isb	sy
     e28:	4b0e      	ldr	r3, [pc, #56]	; (e64 <pm_state_notify+0x50>)
     e2a:	681c      	ldr	r4, [r3, #0]
     e2c:	e00d      	b.n	e4a <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
     e2e:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
     e30:	b13a      	cbz	r2, e42 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     e32:	4b0d      	ldr	r3, [pc, #52]	; (e68 <pm_state_notify+0x54>)
     e34:	7d1b      	ldrb	r3, [r3, #20]
     e36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     e3a:	490c      	ldr	r1, [pc, #48]	; (e6c <pm_state_notify+0x58>)
     e3c:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
     e40:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     e42:	4623      	mov	r3, r4
	return node->next;
     e44:	6824      	ldr	r4, [r4, #0]
     e46:	b104      	cbz	r4, e4a <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     e48:	b123      	cbz	r3, e54 <pm_state_notify+0x40>
     e4a:	b12c      	cbz	r4, e58 <pm_state_notify+0x44>
		if (entering_state) {
     e4c:	2d00      	cmp	r5, #0
     e4e:	d0ee      	beq.n	e2e <pm_state_notify+0x1a>
			callback = notifier->state_entry;
     e50:	6862      	ldr	r2, [r4, #4]
     e52:	e7ed      	b.n	e30 <pm_state_notify+0x1c>
     e54:	461c      	mov	r4, r3
     e56:	e7f8      	b.n	e4a <pm_state_notify+0x36>
	__asm__ volatile(
     e58:	f386 8811 	msr	BASEPRI, r6
     e5c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     e60:	bd70      	pop	{r4, r5, r6, pc}
     e62:	bf00      	nop
     e64:	20000484 	.word	0x20000484
     e68:	20000aac 	.word	0x20000aac
     e6c:	20000478 	.word	0x20000478

00000e70 <pm_exit_pos_ops>:
{
     e70:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
     e72:	4b06      	ldr	r3, [pc, #24]	; (e8c <pm_exit_pos_ops+0x1c>)
     e74:	b123      	cbz	r3, e80 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
     e76:	7841      	ldrb	r1, [r0, #1]
     e78:	7800      	ldrb	r0, [r0, #0]
     e7a:	f004 fd05 	bl	5888 <pm_state_exit_post_ops>
}
     e7e:	bd08      	pop	{r3, pc}
     e80:	2300      	movs	r3, #0
     e82:	f383 8811 	msr	BASEPRI, r3
     e86:	f3bf 8f6f 	isb	sy
     e8a:	e7f8      	b.n	e7e <pm_exit_pos_ops+0xe>
     e8c:	00005889 	.word	0x00005889

00000e90 <pm_system_resume>:

void pm_system_resume(void)
{
     e90:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     e92:	4b0e      	ldr	r3, [pc, #56]	; (ecc <pm_system_resume+0x3c>)
     e94:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     e96:	4621      	mov	r1, r4
     e98:	480d      	ldr	r0, [pc, #52]	; (ed0 <pm_system_resume+0x40>)
     e9a:	f004 fcfb 	bl	5894 <atomic_test_and_clear_bit>
     e9e:	b900      	cbnz	r0, ea2 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
     ea0:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
     ea2:	0065      	lsls	r5, r4, #1
     ea4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
     ea8:	4e0a      	ldr	r6, [pc, #40]	; (ed4 <pm_system_resume+0x44>)
     eaa:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     eae:	f7ff ffdf 	bl	e70 <pm_exit_pos_ops>
		pm_state_notify(false);
     eb2:	2000      	movs	r0, #0
     eb4:	f7ff ffae 	bl	e14 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     eb8:	192b      	adds	r3, r5, r4
     eba:	0099      	lsls	r1, r3, #2
     ebc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     ec0:	2200      	movs	r2, #0
     ec2:	5072      	str	r2, [r6, r1]
     ec4:	605a      	str	r2, [r3, #4]
     ec6:	609a      	str	r2, [r3, #8]
}
     ec8:	e7ea      	b.n	ea0 <pm_system_resume+0x10>
     eca:	bf00      	nop
     ecc:	20000aac 	.word	0x20000aac
     ed0:	2000048c 	.word	0x2000048c
     ed4:	20000478 	.word	0x20000478

00000ed8 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eda:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
     edc:	4b38      	ldr	r3, [pc, #224]	; (fc0 <pm_system_suspend+0xe8>)
     ede:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
     ee0:	f04f 0320 	mov.w	r3, #32
     ee4:	f3ef 8611 	mrs	r6, BASEPRI
     ee8:	f383 8812 	msr	BASEPRI_MAX, r3
     eec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     ef0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     ef4:	4b33      	ldr	r3, [pc, #204]	; (fc4 <pm_system_suspend+0xec>)
     ef6:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
     efa:	2b00      	cmp	r3, #0
     efc:	d039      	beq.n	f72 <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     efe:	4b32      	ldr	r3, [pc, #200]	; (fc8 <pm_system_suspend+0xf0>)
     f00:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
     f04:	4f2f      	ldr	r7, [pc, #188]	; (fc4 <pm_system_suspend+0xec>)
     f06:	ea4f 0e82 	mov.w	lr, r2, lsl #2
     f0a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
     f0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     f12:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     f16:	2300      	movs	r3, #0
     f18:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
     f1c:	f386 8811 	msr	BASEPRI, r6
     f20:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     f24:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     f28:	4a27      	ldr	r2, [pc, #156]	; (fc8 <pm_system_suspend+0xf0>)
     f2a:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     f2e:	2b00      	cmp	r3, #0
     f30:	d044      	beq.n	fbc <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
     f32:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
     f36:	d12b      	bne.n	f90 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     f38:	f003 f956 	bl	41e8 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     f3c:	2001      	movs	r0, #1
     f3e:	f7ff ff69 	bl	e14 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
     f42:	4621      	mov	r1, r4
     f44:	4821      	ldr	r0, [pc, #132]	; (fcc <pm_system_suspend+0xf4>)
     f46:	f004 fcbd 	bl	58c4 <atomic_set_bit>
	if (pm_state_set != NULL) {
     f4a:	4b21      	ldr	r3, [pc, #132]	; (fd0 <pm_system_suspend+0xf8>)
     f4c:	b15b      	cbz	r3, f66 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
     f4e:	4a1e      	ldr	r2, [pc, #120]	; (fc8 <pm_system_suspend+0xf0>)
     f50:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     f54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f58:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     f5c:	7859      	ldrb	r1, [r3, #1]
     f5e:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
     f62:	f7ff ff4b 	bl	dfc <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
     f66:	f7ff ff93 	bl	e90 <pm_system_resume>
	k_sched_unlock();
     f6a:	f003 fb3f 	bl	45ec <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
     f6e:	2001      	movs	r0, #1
}
     f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
     f72:	4601      	mov	r1, r0
     f74:	4620      	mov	r0, r4
     f76:	f000 f831 	bl	fdc <pm_policy_next_state>
		if (info != NULL) {
     f7a:	2800      	cmp	r0, #0
     f7c:	d0ce      	beq.n	f1c <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
     f7e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
     f82:	4b11      	ldr	r3, [pc, #68]	; (fc8 <pm_system_suspend+0xf0>)
     f84:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     f88:	c807      	ldmia	r0, {r0, r1, r2}
     f8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
     f8e:	e7c5      	b.n	f1c <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
     f90:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     f94:	4b0c      	ldr	r3, [pc, #48]	; (fc8 <pm_system_suspend+0xf0>)
     f96:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     f9a:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     f9c:	0c41      	lsrs	r1, r0, #17
     f9e:	03c0      	lsls	r0, r0, #15
     fa0:	4b0c      	ldr	r3, [pc, #48]	; (fd4 <pm_system_suspend+0xfc>)
     fa2:	18c0      	adds	r0, r0, r3
     fa4:	4a0c      	ldr	r2, [pc, #48]	; (fd8 <pm_system_suspend+0x100>)
     fa6:	f04f 0300 	mov.w	r3, #0
     faa:	f141 0100 	adc.w	r1, r1, #0
     fae:	f7ff f8d1 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
     fb2:	2101      	movs	r1, #1
     fb4:	1a28      	subs	r0, r5, r0
     fb6:	f006 fa43 	bl	7440 <z_set_timeout_expiry>
     fba:	e7bd      	b.n	f38 <pm_system_suspend+0x60>
		return false;
     fbc:	2000      	movs	r0, #0
     fbe:	e7d7      	b.n	f70 <pm_system_suspend+0x98>
     fc0:	20000aac 	.word	0x20000aac
     fc4:	2000046c 	.word	0x2000046c
     fc8:	20000478 	.word	0x20000478
     fcc:	2000048c 	.word	0x2000048c
     fd0:	00000dfd 	.word	0x00000dfd
     fd4:	000f423f 	.word	0x000f423f
     fd8:	000f4240 	.word	0x000f4240

00000fdc <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
     fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     fe0:	b082      	sub	sp, #8
     fe2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
     fe4:	a901      	add	r1, sp, #4
     fe6:	f000 f845 	bl	1074 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     fea:	1e44      	subs	r4, r0, #1
     fec:	b224      	sxth	r4, r4
     fee:	e007      	b.n	1000 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
     ff0:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
     ff4:	d033      	beq.n	105e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5e>
		    (ticks >= (min_residency + exit_latency))) {
     ff6:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
     ff8:	45b0      	cmp	r8, r6
     ffa:	d930      	bls.n	105e <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     ffc:	3c01      	subs	r4, #1
     ffe:	b224      	sxth	r4, r4
    1000:	2c00      	cmp	r4, #0
    1002:	db2b      	blt.n	105c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5c>
		const struct pm_state_info *state = &cpu_states[i];
    1004:	9b01      	ldr	r3, [sp, #4]
    1006:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    100a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    100e:	7869      	ldrb	r1, [r5, #1]
    1010:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    1014:	f004 fc65 	bl	58e2 <pm_policy_state_lock_is_active>
    1018:	2800      	cmp	r0, #0
    101a:	d1ef      	bne.n	ffc <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    101c:	6868      	ldr	r0, [r5, #4]
    101e:	0c41      	lsrs	r1, r0, #17
    1020:	03c0      	lsls	r0, r0, #15
    1022:	4f11      	ldr	r7, [pc, #68]	; (1068 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x68>)
    1024:	19c0      	adds	r0, r0, r7
    1026:	4a11      	ldr	r2, [pc, #68]	; (106c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6c>)
    1028:	f04f 0300 	mov.w	r3, #0
    102c:	f141 0100 	adc.w	r1, r1, #0
    1030:	f7ff f890 	bl	154 <__aeabi_uldivmod>
    1034:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    1036:	68ab      	ldr	r3, [r5, #8]
    1038:	0c59      	lsrs	r1, r3, #17
    103a:	03db      	lsls	r3, r3, #15
    103c:	19d8      	adds	r0, r3, r7
    103e:	4a0b      	ldr	r2, [pc, #44]	; (106c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6c>)
    1040:	f04f 0300 	mov.w	r3, #0
    1044:	f141 0100 	adc.w	r1, r1, #0
    1048:	f7ff f884 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    104c:	4b08      	ldr	r3, [pc, #32]	; (1070 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x70>)
    104e:	681b      	ldr	r3, [r3, #0]
    1050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    1054:	d0cc      	beq.n	ff0 <pm_policy_next_state+0x14>
    1056:	4283      	cmp	r3, r0
    1058:	d8ca      	bhi.n	ff0 <pm_policy_next_state+0x14>
    105a:	e7cf      	b.n	ffc <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    105c:	2500      	movs	r5, #0
}
    105e:	4628      	mov	r0, r5
    1060:	b002      	add	sp, #8
    1062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1066:	bf00      	nop
    1068:	000f423f 	.word	0x000f423f
    106c:	000f4240 	.word	0x000f4240
    1070:	20000148 	.word	0x20000148

00001074 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1074:	b908      	cbnz	r0, 107a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1076:	4b02      	ldr	r3, [pc, #8]	; (1080 <pm_state_cpu_get_all+0xc>)
    1078:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    107a:	2000      	movs	r0, #0
    107c:	4770      	bx	lr
    107e:	bf00      	nop
    1080:	000078e8 	.word	0x000078e8

00001084 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    1084:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    1086:	4802      	ldr	r0, [pc, #8]	; (1090 <nrf_cc3xx_platform_abort_init+0xc>)
    1088:	f003 fe94 	bl	4db4 <nrf_cc3xx_platform_set_abort>
}
    108c:	bd08      	pop	{r3, pc}
    108e:	bf00      	nop
    1090:	000078e8 	.word	0x000078e8

00001094 <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
    1094:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    1098:	d017      	beq.n	10ca <mutex_flags_unknown+0x36>
    109a:	d80c      	bhi.n	10b6 <mutex_flags_unknown+0x22>
    109c:	f640 63ba 	movw	r3, #3770	; 0xeba
    10a0:	4298      	cmp	r0, r3
    10a2:	d014      	beq.n	10ce <mutex_flags_unknown+0x3a>
    10a4:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    10a8:	d013      	beq.n	10d2 <mutex_flags_unknown+0x3e>
    10aa:	283a      	cmp	r0, #58	; 0x3a
    10ac:	d001      	beq.n	10b2 <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
    10ae:	2001      	movs	r0, #1
    10b0:	4770      	bx	lr
    switch(flags){
    10b2:	2000      	movs	r0, #0
    10b4:	4770      	bx	lr
    10b6:	4b09      	ldr	r3, [pc, #36]	; (10dc <mutex_flags_unknown+0x48>)
    10b8:	4298      	cmp	r0, r3
    10ba:	d00c      	beq.n	10d6 <mutex_flags_unknown+0x42>
    10bc:	4b08      	ldr	r3, [pc, #32]	; (10e0 <mutex_flags_unknown+0x4c>)
    10be:	4298      	cmp	r0, r3
    10c0:	d001      	beq.n	10c6 <mutex_flags_unknown+0x32>
            return true;
    10c2:	2001      	movs	r0, #1
    }
}
    10c4:	4770      	bx	lr
    switch(flags){
    10c6:	2000      	movs	r0, #0
    10c8:	4770      	bx	lr
    10ca:	2000      	movs	r0, #0
    10cc:	4770      	bx	lr
    10ce:	2000      	movs	r0, #0
    10d0:	4770      	bx	lr
    10d2:	2000      	movs	r0, #0
    10d4:	4770      	bx	lr
    10d6:	2000      	movs	r0, #0
    10d8:	4770      	bx	lr
    10da:	bf00      	nop
    10dc:	3a00003a 	.word	0x3a00003a
    10e0:	a95c5f2c 	.word	0xa95c5f2c

000010e4 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    10e4:	b328      	cbz	r0, 1132 <mutex_unlock_platform+0x4e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    10e6:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    10e8:	6843      	ldr	r3, [r0, #4]
    10ea:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    10ee:	d00a      	beq.n	1106 <mutex_unlock_platform+0x22>
    10f0:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    10f4:	d014      	beq.n	1120 <mutex_unlock_platform+0x3c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    10f6:	4912      	ldr	r1, [pc, #72]	; (1140 <mutex_unlock_platform+0x5c>)
    10f8:	428b      	cmp	r3, r1
    10fa:	d01f      	beq.n	113c <mutex_unlock_platform+0x58>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    10fc:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    10fe:	f002 ff57 	bl	3fb0 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1102:	2000      	movs	r0, #0
    1104:	e014      	b.n	1130 <mutex_unlock_platform+0x4c>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    1106:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1108:	2200      	movs	r2, #0
    110a:	e8d3 1fef 	ldaex	r1, [r3]
    110e:	2901      	cmp	r1, #1
    1110:	d103      	bne.n	111a <mutex_unlock_platform+0x36>
    1112:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1116:	2800      	cmp	r0, #0
    1118:	d1f7      	bne.n	110a <mutex_unlock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    111a:	d10d      	bne.n	1138 <mutex_unlock_platform+0x54>
    111c:	4610      	mov	r0, r2
    111e:	e007      	b.n	1130 <mutex_unlock_platform+0x4c>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    1120:	6803      	ldr	r3, [r0, #0]
    1122:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    1124:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1128:	2000      	movs	r0, #0
    112a:	4a06      	ldr	r2, [pc, #24]	; (1144 <mutex_unlock_platform+0x60>)
    112c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    1130:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1132:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1136:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1138:	4803      	ldr	r0, [pc, #12]	; (1148 <mutex_unlock_platform+0x64>)
    113a:	e7f9      	b.n	1130 <mutex_unlock_platform+0x4c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    113c:	4803      	ldr	r0, [pc, #12]	; (114c <mutex_unlock_platform+0x68>)
    113e:	e7f7      	b.n	1130 <mutex_unlock_platform+0x4c>
    1140:	a95c5f2c 	.word	0xa95c5f2c
    1144:	50030000 	.word	0x50030000
    1148:	ffff8fe9 	.word	0xffff8fe9
    114c:	ffff8fea 	.word	0xffff8fea

00001150 <mutex_lock_platform>:
    if(mutex == NULL) {
    1150:	b388      	cbz	r0, 11b6 <mutex_lock_platform+0x66>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1152:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    1154:	6843      	ldr	r3, [r0, #4]
    1156:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    115a:	d00f      	beq.n	117c <mutex_lock_platform+0x2c>
    115c:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1160:	d019      	beq.n	1196 <mutex_lock_platform+0x46>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1162:	4916      	ldr	r1, [pc, #88]	; (11bc <mutex_lock_platform+0x6c>)
    1164:	428b      	cmp	r3, r1
    1166:	d024      	beq.n	11b2 <mutex_lock_platform+0x62>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1168:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    116a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    116e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1172:	f002 fe99 	bl	3ea8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1176:	b168      	cbz	r0, 1194 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    1178:	4811      	ldr	r0, [pc, #68]	; (11c0 <mutex_lock_platform+0x70>)
    117a:	e00b      	b.n	1194 <mutex_lock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    117c:	6803      	ldr	r3, [r0, #0]
    117e:	2201      	movs	r2, #1
    1180:	e8d3 1fef 	ldaex	r1, [r3]
    1184:	2900      	cmp	r1, #0
    1186:	d103      	bne.n	1190 <mutex_lock_platform+0x40>
    1188:	e8c3 2fe0 	stlex	r0, r2, [r3]
    118c:	2800      	cmp	r0, #0
    118e:	d1f7      	bne.n	1180 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1190:	d10b      	bne.n	11aa <mutex_lock_platform+0x5a>
    1192:	2000      	movs	r0, #0
}
    1194:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    1196:	6803      	ldr	r3, [r0, #0]
    1198:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    119a:	f503 7380 	add.w	r3, r3, #256	; 0x100
    119e:	4a09      	ldr	r2, [pc, #36]	; (11c4 <mutex_lock_platform+0x74>)
    11a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11a4:	b91b      	cbnz	r3, 11ae <mutex_lock_platform+0x5e>
    11a6:	2000      	movs	r0, #0
    11a8:	e7f4      	b.n	1194 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11aa:	4805      	ldr	r0, [pc, #20]	; (11c0 <mutex_lock_platform+0x70>)
    11ac:	e7f2      	b.n	1194 <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11ae:	4804      	ldr	r0, [pc, #16]	; (11c0 <mutex_lock_platform+0x70>)
    11b0:	e7f0      	b.n	1194 <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    11b2:	4805      	ldr	r0, [pc, #20]	; (11c8 <mutex_lock_platform+0x78>)
    11b4:	e7ee      	b.n	1194 <mutex_lock_platform+0x44>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    11b6:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    11ba:	4770      	bx	lr
    11bc:	a95c5f2c 	.word	0xa95c5f2c
    11c0:	ffff8fe9 	.word	0xffff8fe9
    11c4:	50030000 	.word	0x50030000
    11c8:	ffff8fea 	.word	0xffff8fea

000011cc <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    11cc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    11ce:	4604      	mov	r4, r0
    11d0:	b1a8      	cbz	r0, 11fe <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    11d2:	6863      	ldr	r3, [r4, #4]
    11d4:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    11d8:	d010      	beq.n	11fc <mutex_free_platform+0x30>
    11da:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    11de:	d00d      	beq.n	11fc <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    11e0:	4a0c      	ldr	r2, [pc, #48]	; (1214 <mutex_free_platform+0x48>)
    11e2:	4293      	cmp	r3, r2
    11e4:	d00a      	beq.n	11fc <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    11e6:	f413 6f68 	tst.w	r3, #3712	; 0xe80
    11ea:	d00d      	beq.n	1208 <mutex_free_platform+0x3c>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    11ec:	4621      	mov	r1, r4
    11ee:	480a      	ldr	r0, [pc, #40]	; (1218 <mutex_free_platform+0x4c>)
    11f0:	f005 ff30 	bl	7054 <k_mem_slab_free>
        mutex->mutex = NULL;
    11f4:	2300      	movs	r3, #0
    11f6:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    11f8:	4b06      	ldr	r3, [pc, #24]	; (1214 <mutex_free_platform+0x48>)
    11fa:	6063      	str	r3, [r4, #4]
}
    11fc:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    11fe:	4b07      	ldr	r3, [pc, #28]	; (121c <mutex_free_platform+0x50>)
    1200:	685b      	ldr	r3, [r3, #4]
    1202:	4807      	ldr	r0, [pc, #28]	; (1220 <mutex_free_platform+0x54>)
    1204:	4798      	blx	r3
    1206:	e7e4      	b.n	11d2 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1208:	2214      	movs	r2, #20
    120a:	2100      	movs	r1, #0
    120c:	6820      	ldr	r0, [r4, #0]
    120e:	f004 fc8e 	bl	5b2e <memset>
    1212:	e7f1      	b.n	11f8 <mutex_free_platform+0x2c>
    1214:	a95c5f2c 	.word	0xa95c5f2c
    1218:	20000990 	.word	0x20000990
    121c:	2000021c 	.word	0x2000021c
    1220:	000078f0 	.word	0x000078f0

00001224 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1224:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1226:	4604      	mov	r4, r0
    1228:	b368      	cbz	r0, 1286 <mutex_init_platform+0x62>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    122a:	6860      	ldr	r0, [r4, #4]
    122c:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    1230:	d028      	beq.n	1284 <mutex_init_platform+0x60>
    1232:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    1236:	d025      	beq.n	1284 <mutex_init_platform+0x60>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1238:	4b17      	ldr	r3, [pc, #92]	; (1298 <mutex_init_platform+0x74>)
    123a:	4298      	cmp	r0, r3
    123c:	d028      	beq.n	1290 <mutex_init_platform+0x6c>
        mutex_flags_unknown(mutex->flags)) {
    123e:	f7ff ff29 	bl	1094 <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1242:	b1c0      	cbz	r0, 1276 <mutex_init_platform+0x52>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    124c:	4621      	mov	r1, r4
    124e:	4813      	ldr	r0, [pc, #76]	; (129c <mutex_init_platform+0x78>)
    1250:	f002 fcfc 	bl	3c4c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1254:	b908      	cbnz	r0, 125a <mutex_init_platform+0x36>
    1256:	6823      	ldr	r3, [r4, #0]
    1258:	b91b      	cbnz	r3, 1262 <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
    125a:	4b11      	ldr	r3, [pc, #68]	; (12a0 <mutex_init_platform+0x7c>)
    125c:	685b      	ldr	r3, [r3, #4]
    125e:	4811      	ldr	r0, [pc, #68]	; (12a4 <mutex_init_platform+0x80>)
    1260:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1262:	2214      	movs	r2, #20
    1264:	2100      	movs	r1, #0
    1266:	6820      	ldr	r0, [r4, #0]
    1268:	f004 fc61 	bl	5b2e <memset>
        mutex->flags = 0;
    126c:	2300      	movs	r3, #0
    126e:	6063      	str	r3, [r4, #4]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1270:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    1274:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1276:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1278:	f005 ff58 	bl	712c <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    127c:	6863      	ldr	r3, [r4, #4]
    127e:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    1282:	6063      	str	r3, [r4, #4]
}
    1284:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1286:	4b06      	ldr	r3, [pc, #24]	; (12a0 <mutex_init_platform+0x7c>)
    1288:	685b      	ldr	r3, [r3, #4]
    128a:	4807      	ldr	r0, [pc, #28]	; (12a8 <mutex_init_platform+0x84>)
    128c:	4798      	blx	r3
    128e:	e7cc      	b.n	122a <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1290:	6823      	ldr	r3, [r4, #0]
    1292:	2b00      	cmp	r3, #0
    1294:	d1d3      	bne.n	123e <mutex_init_platform+0x1a>
    1296:	e7d5      	b.n	1244 <mutex_init_platform+0x20>
    1298:	a95c5f2c 	.word	0xa95c5f2c
    129c:	20000990 	.word	0x20000990
    12a0:	2000021c 	.word	0x2000021c
    12a4:	00007918 	.word	0x00007918
    12a8:	000078f0 	.word	0x000078f0

000012ac <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    12ac:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    12ae:	2340      	movs	r3, #64	; 0x40
    12b0:	2214      	movs	r2, #20
    12b2:	4904      	ldr	r1, [pc, #16]	; (12c4 <nrf_cc3xx_platform_mutex_init+0x18>)
    12b4:	4804      	ldr	r0, [pc, #16]	; (12c8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    12b6:	f005 febf 	bl	7038 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    12ba:	4904      	ldr	r1, [pc, #16]	; (12cc <nrf_cc3xx_platform_mutex_init+0x20>)
    12bc:	4804      	ldr	r0, [pc, #16]	; (12d0 <nrf_cc3xx_platform_mutex_init+0x24>)
    12be:	f003 fdeb 	bl	4e98 <nrf_cc3xx_platform_set_mutexes>
}
    12c2:	bd08      	pop	{r3, pc}
    12c4:	20000490 	.word	0x20000490
    12c8:	20000990 	.word	0x20000990
    12cc:	00007948 	.word	0x00007948
    12d0:	0000795c 	.word	0x0000795c

000012d4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    12d4:	4901      	ldr	r1, [pc, #4]	; (12dc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    12d6:	2210      	movs	r2, #16
	str	r2, [r1]
    12d8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    12da:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    12dc:	e000ed10 	.word	0xe000ed10

000012e0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    12e0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    12e2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    12e4:	f380 8811 	msr	BASEPRI, r0
	isb
    12e8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    12ec:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    12f0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    12f2:	b662      	cpsie	i
	isb
    12f4:	f3bf 8f6f 	isb	sy

	bx	lr
    12f8:	4770      	bx	lr
    12fa:	bf00      	nop

000012fc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    12fc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    12fe:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1300:	f381 8811 	msr	BASEPRI, r1

	wfe
    1304:	bf20      	wfe

	msr	BASEPRI, r0
    1306:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    130a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    130c:	4770      	bx	lr
    130e:	bf00      	nop

00001310 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1310:	2800      	cmp	r0, #0
    1312:	db07      	blt.n	1324 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1314:	f000 021f 	and.w	r2, r0, #31
    1318:	0940      	lsrs	r0, r0, #5
    131a:	2301      	movs	r3, #1
    131c:	4093      	lsls	r3, r2
    131e:	4a02      	ldr	r2, [pc, #8]	; (1328 <__NVIC_EnableIRQ+0x18>)
    1320:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    1324:	4770      	bx	lr
    1326:	bf00      	nop
    1328:	e000e100 	.word	0xe000e100

0000132c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    132c:	2800      	cmp	r0, #0
    132e:	db08      	blt.n	1342 <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1330:	0149      	lsls	r1, r1, #5
    1332:	b2c9      	uxtb	r1, r1
    1334:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    1338:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    133c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    1340:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1342:	f000 000f 	and.w	r0, r0, #15
    1346:	0149      	lsls	r1, r1, #5
    1348:	b2c9      	uxtb	r1, r1
    134a:	4b01      	ldr	r3, [pc, #4]	; (1350 <__NVIC_SetPriority+0x24>)
    134c:	5419      	strb	r1, [r3, r0]
  }
}
    134e:	4770      	bx	lr
    1350:	e000ed14 	.word	0xe000ed14

00001354 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1354:	0942      	lsrs	r2, r0, #5
    1356:	4b05      	ldr	r3, [pc, #20]	; (136c <arch_irq_is_enabled+0x18>)
    1358:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    135c:	f000 001f 	and.w	r0, r0, #31
    1360:	2301      	movs	r3, #1
    1362:	fa03 f000 	lsl.w	r0, r3, r0
}
    1366:	4010      	ands	r0, r2
    1368:	4770      	bx	lr
    136a:	bf00      	nop
    136c:	e000e100 	.word	0xe000e100

00001370 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1370:	bf30      	wfi
    b z_SysNmiOnReset
    1372:	f7ff bffd 	b.w	1370 <z_SysNmiOnReset>
    1376:	bf00      	nop

00001378 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1378:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    137a:	4b0b      	ldr	r3, [pc, #44]	; (13a8 <z_arm_prep_c+0x30>)
    137c:	4a0b      	ldr	r2, [pc, #44]	; (13ac <z_arm_prep_c+0x34>)
    137e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1382:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1384:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1388:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    138c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1390:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1394:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1398:	f002 fba4 	bl	3ae4 <z_bss_zero>
	z_data_copy();
    139c:	f003 fa7e 	bl	489c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    13a0:	f000 f9f8 	bl	1794 <z_arm_interrupt_init>
	z_cstart();
    13a4:	f002 fbfa 	bl	3b9c <z_cstart>
    13a8:	e000ed00 	.word	0xe000ed00
    13ac:	00000000 	.word	0x00000000

000013b0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    13b0:	4a0a      	ldr	r2, [pc, #40]	; (13dc <arch_swap+0x2c>)
    13b2:	6893      	ldr	r3, [r2, #8]
    13b4:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    13b8:	4909      	ldr	r1, [pc, #36]	; (13e0 <arch_swap+0x30>)
    13ba:	6809      	ldr	r1, [r1, #0]
    13bc:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    13c0:	4908      	ldr	r1, [pc, #32]	; (13e4 <arch_swap+0x34>)
    13c2:	684b      	ldr	r3, [r1, #4]
    13c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    13c8:	604b      	str	r3, [r1, #4]
    13ca:	2300      	movs	r3, #0
    13cc:	f383 8811 	msr	BASEPRI, r3
    13d0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    13d4:	6893      	ldr	r3, [r2, #8]
}
    13d6:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    13da:	4770      	bx	lr
    13dc:	20000aac 	.word	0x20000aac
    13e0:	00007ad4 	.word	0x00007ad4
    13e4:	e000ed00 	.word	0xe000ed00

000013e8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    13e8:	4914      	ldr	r1, [pc, #80]	; (143c <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    13ea:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    13ec:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    13f0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    13f2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    13f6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    13fa:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    13fc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1400:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1404:	4f0e      	ldr	r7, [pc, #56]	; (1440 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1406:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    140a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    140c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    140e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1410:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1414:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1416:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    141a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    141e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1422:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1426:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    142a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    142e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    1430:	f004 fa7e 	bl	5930 <configure_builtin_stack_guard>
    pop {r2, lr}
    1434:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1438:	4770      	bx	lr
    143a:	0000      	.short	0x0000
    ldr r1, =_kernel
    143c:	20000aac 	.word	0x20000aac
    ldr v4, =_SCS_ICSR
    1440:	e000ed04 	.word	0xe000ed04

00001444 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    1444:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1448:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    144a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    144e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1452:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1454:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1458:	2902      	cmp	r1, #2
    beq _oops
    145a:	d0ff      	beq.n	145c <_oops>

0000145c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    145c:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    145e:	f004 fa4a 	bl	58f6 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    1462:	bd01      	pop	{r0, pc}

00001464 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    1464:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1466:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    146a:	490e      	ldr	r1, [pc, #56]	; (14a4 <arch_new_thread+0x40>)
    146c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    1470:	f021 0101 	bic.w	r1, r1, #1
    1474:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1478:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    147c:	9b01      	ldr	r3, [sp, #4]
    147e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    1482:	9b02      	ldr	r3, [sp, #8]
    1484:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1488:	9b03      	ldr	r3, [sp, #12]
    148a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    148e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1492:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    1496:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1498:	2300      	movs	r3, #0
    149a:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    149e:	bc10      	pop	{r4}
    14a0:	4770      	bx	lr
    14a2:	bf00      	nop
    14a4:	000050ff 	.word	0x000050ff

000014a8 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    14a8:	4b09      	ldr	r3, [pc, #36]	; (14d0 <arch_switch_to_main_thread+0x28>)
    14aa:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    14ac:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    14b0:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    14b4:	4610      	mov	r0, r2
    14b6:	f381 8809 	msr	PSP, r1
    14ba:	2100      	movs	r1, #0
    14bc:	b663      	cpsie	if
    14be:	f381 8811 	msr	BASEPRI, r1
    14c2:	f3bf 8f6f 	isb	sy
    14c6:	2200      	movs	r2, #0
    14c8:	2300      	movs	r3, #0
    14ca:	f003 fe18 	bl	50fe <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    14ce:	bf00      	nop
    14d0:	20000aac 	.word	0x20000aac

000014d4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    14d4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    14d6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    14d8:	4a0b      	ldr	r2, [pc, #44]	; (1508 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    14da:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    14dc:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    14de:	bf1e      	ittt	ne
	movne	r1, #0
    14e0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    14e2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    14e4:	f005 fe06 	blne	70f4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    14e8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    14ea:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    14ee:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    14f2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    14f6:	4905      	ldr	r1, [pc, #20]	; (150c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    14f8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    14fa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    14fc:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    14fe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    1502:	4903      	ldr	r1, [pc, #12]	; (1510 <_isr_wrapper+0x3c>)
	bx r1
    1504:	4708      	bx	r1
    1506:	0000      	.short	0x0000
	ldr r2, =_kernel
    1508:	20000aac 	.word	0x20000aac
	ldr r1, =_sw_isr_table
    150c:	000075c4 	.word	0x000075c4
	ldr r1, =z_arm_int_exit
    1510:	00001515 	.word	0x00001515

00001514 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    1514:	4b04      	ldr	r3, [pc, #16]	; (1528 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    1516:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1518:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    151a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    151c:	d003      	beq.n	1526 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    151e:	4903      	ldr	r1, [pc, #12]	; (152c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    1524:	600a      	str	r2, [r1, #0]

00001526 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    1526:	4770      	bx	lr
	ldr r3, =_kernel
    1528:	20000aac 	.word	0x20000aac
	ldr r1, =_SCS_ICSR
    152c:	e000ed04 	.word	0xe000ed04

00001530 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1530:	b510      	push	{r4, lr}
    1532:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1534:	4b18      	ldr	r3, [pc, #96]	; (1598 <mem_manage_fault+0x68>)
    1536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    1538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    153c:	f013 0f02 	tst.w	r3, #2
    1540:	d00b      	beq.n	155a <mem_manage_fault+0x2a>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1542:	4b15      	ldr	r3, [pc, #84]	; (1598 <mem_manage_fault+0x68>)
    1544:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1548:	f013 0f80 	tst.w	r3, #128	; 0x80
    154c:	d005      	beq.n	155a <mem_manage_fault+0x2a>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    154e:	b121      	cbz	r1, 155a <mem_manage_fault+0x2a>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1550:	4a11      	ldr	r2, [pc, #68]	; (1598 <mem_manage_fault+0x68>)
    1552:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1558:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    155a:	4b0f      	ldr	r3, [pc, #60]	; (1598 <mem_manage_fault+0x68>)
    155c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    155e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1562:	f013 0f10 	tst.w	r3, #16
    1566:	d101      	bne.n	156c <mem_manage_fault+0x3c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1568:	4b0b      	ldr	r3, [pc, #44]	; (1598 <mem_manage_fault+0x68>)
    156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    156c:	4b0a      	ldr	r3, [pc, #40]	; (1598 <mem_manage_fault+0x68>)
    156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1570:	f013 0f20 	tst.w	r3, #32
    1574:	d004      	beq.n	1580 <mem_manage_fault+0x50>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1576:	4a08      	ldr	r2, [pc, #32]	; (1598 <mem_manage_fault+0x68>)
    1578:	6a53      	ldr	r3, [r2, #36]	; 0x24
    157a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    157e:	6253      	str	r3, [r2, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1580:	4a05      	ldr	r2, [pc, #20]	; (1598 <mem_manage_fault+0x68>)
    1582:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1584:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1588:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    158a:	2101      	movs	r1, #1
    158c:	f004 f9d5 	bl	593a <memory_fault_recoverable>
    1590:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1592:	2000      	movs	r0, #0
    1594:	bd10      	pop	{r4, pc}
    1596:	bf00      	nop
    1598:	e000ed00 	.word	0xe000ed00

0000159c <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    159c:	b510      	push	{r4, lr}
    159e:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    15a0:	4b12      	ldr	r3, [pc, #72]	; (15ec <bus_fault+0x50>)
    15a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    15a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    15a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15a8:	f413 7f00 	tst.w	r3, #512	; 0x200
    15ac:	d00b      	beq.n	15c6 <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    15ae:	4b0f      	ldr	r3, [pc, #60]	; (15ec <bus_fault+0x50>)
    15b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    15b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15b4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    15b8:	d005      	beq.n	15c6 <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    15ba:	b121      	cbz	r1, 15c6 <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    15bc:	4a0b      	ldr	r2, [pc, #44]	; (15ec <bus_fault+0x50>)
    15be:	6a93      	ldr	r3, [r2, #40]	; 0x28
    15c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    15c4:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    15c6:	4b09      	ldr	r3, [pc, #36]	; (15ec <bus_fault+0x50>)
    15c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    15ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15cc:	f413 7f80 	tst.w	r3, #256	; 0x100
    15d0:	d101      	bne.n	15d6 <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    15d2:	4b06      	ldr	r3, [pc, #24]	; (15ec <bus_fault+0x50>)
    15d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    15d6:	4a05      	ldr	r2, [pc, #20]	; (15ec <bus_fault+0x50>)
    15d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    15da:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    15de:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    15e0:	2101      	movs	r1, #1
    15e2:	f004 f9aa 	bl	593a <memory_fault_recoverable>
    15e6:	7020      	strb	r0, [r4, #0]

	return reason;
}
    15e8:	2000      	movs	r0, #0
    15ea:	bd10      	pop	{r4, pc}
    15ec:	e000ed00 	.word	0xe000ed00

000015f0 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    15f0:	4b0a      	ldr	r3, [pc, #40]	; (161c <usage_fault+0x2c>)
    15f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    15f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    15f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    15f8:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
    15fc:	d10b      	bne.n	1616 <usage_fault+0x26>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    15fe:	4b07      	ldr	r3, [pc, #28]	; (161c <usage_fault+0x2c>)
    1600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1602:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1606:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    160a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    160e:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1612:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1614:	4770      	bx	lr
		reason = K_ERR_STACK_CHK_FAIL;
    1616:	2002      	movs	r0, #2
    1618:	e7f1      	b.n	15fe <usage_fault+0xe>
    161a:	bf00      	nop
    161c:	e000ed00 	.word	0xe000ed00

00001620 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1620:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    1622:	4b0d      	ldr	r3, [pc, #52]	; (1658 <z_arm_is_synchronous_svc+0x38>)
    1624:	695a      	ldr	r2, [r3, #20]
    1626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    162a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    162c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1630:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    1634:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1638:	695a      	ldr	r2, [r3, #20]
    163a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    163e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1640:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1644:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1648:	f64d 7302 	movw	r3, #57090	; 0xdf02
    164c:	4299      	cmp	r1, r3
    164e:	d001      	beq.n	1654 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    1650:	2000      	movs	r0, #0
    1652:	4770      	bx	lr
		return true;
    1654:	2001      	movs	r0, #1
}
    1656:	4770      	bx	lr
    1658:	e000ed00 	.word	0xe000ed00

0000165c <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    165c:	b538      	push	{r3, r4, r5, lr}
    165e:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    1660:	2300      	movs	r3, #0
    1662:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1664:	4b1a      	ldr	r3, [pc, #104]	; (16d0 <hard_fault+0x74>)
    1666:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1668:	f010 0002 	ands.w	r0, r0, #2
    166c:	d12d      	bne.n	16ca <hard_fault+0x6e>
    166e:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1672:	2b00      	cmp	r3, #0
    1674:	db2a      	blt.n	16cc <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1676:	4b16      	ldr	r3, [pc, #88]	; (16d0 <hard_fault+0x74>)
    1678:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    167a:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    167e:	d025      	beq.n	16cc <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
    1680:	4628      	mov	r0, r5
    1682:	f7ff ffcd 	bl	1620 <z_arm_is_synchronous_svc>
    1686:	b108      	cbz	r0, 168c <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
    1688:	6828      	ldr	r0, [r5, #0]
    168a:	e01f      	b.n	16cc <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    168c:	4b10      	ldr	r3, [pc, #64]	; (16d0 <hard_fault+0x74>)
    168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1690:	f013 0fff 	tst.w	r3, #255	; 0xff
    1694:	d10d      	bne.n	16b2 <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1696:	4b0e      	ldr	r3, [pc, #56]	; (16d0 <hard_fault+0x74>)
    1698:	6a98      	ldr	r0, [r3, #40]	; 0x28
    169a:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
    169e:	d10e      	bne.n	16be <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    16a0:	4b0b      	ldr	r3, [pc, #44]	; (16d0 <hard_fault+0x74>)
    16a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    16a8:	d310      	bcc.n	16cc <hard_fault+0x70>
			reason = usage_fault(esf);
    16aa:	4628      	mov	r0, r5
    16ac:	f7ff ffa0 	bl	15f0 <usage_fault>
    16b0:	e00c      	b.n	16cc <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    16b2:	4622      	mov	r2, r4
    16b4:	2101      	movs	r1, #1
    16b6:	4628      	mov	r0, r5
    16b8:	f7ff ff3a 	bl	1530 <mem_manage_fault>
    16bc:	e006      	b.n	16cc <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    16be:	4622      	mov	r2, r4
    16c0:	2101      	movs	r1, #1
    16c2:	4628      	mov	r0, r5
    16c4:	f7ff ff6a 	bl	159c <bus_fault>
    16c8:	e000      	b.n	16cc <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    16ca:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    16cc:	bd38      	pop	{r3, r4, r5, pc}
    16ce:	bf00      	nop
    16d0:	e000ed00 	.word	0xe000ed00

000016d4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    16d4:	b570      	push	{r4, r5, r6, lr}
    16d6:	b08a      	sub	sp, #40	; 0x28
    16d8:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    16da:	4b22      	ldr	r3, [pc, #136]	; (1764 <z_arm_fault+0x90>)
    16dc:	6859      	ldr	r1, [r3, #4]
    16de:	f3c1 0108 	ubfx	r1, r1, #0, #9
    16e2:	2300      	movs	r3, #0
    16e4:	f383 8811 	msr	BASEPRI, r3
    16e8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    16ec:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    16f0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    16f4:	d115      	bne.n	1722 <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    16f6:	f002 030c 	and.w	r3, r2, #12
    16fa:	2b08      	cmp	r3, #8
    16fc:	d014      	beq.n	1728 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    16fe:	f012 0f08 	tst.w	r2, #8
    1702:	d00b      	beq.n	171c <z_arm_fault+0x48>
	*nested_exc = false;
    1704:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    1706:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    170a:	4620      	mov	r0, r4
    170c:	f004 f91a 	bl	5944 <fault_handle>
    1710:	4605      	mov	r5, r0
	if (recoverable) {
    1712:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    1716:	b153      	cbz	r3, 172e <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1718:	b00a      	add	sp, #40	; 0x28
    171a:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    171c:	4604      	mov	r4, r0
			*nested_exc = true;
    171e:	2601      	movs	r6, #1
    1720:	e7f1      	b.n	1706 <z_arm_fault+0x32>
	*nested_exc = false;
    1722:	2600      	movs	r6, #0
		return NULL;
    1724:	4634      	mov	r4, r6
    1726:	e7ee      	b.n	1706 <z_arm_fault+0x32>
	*nested_exc = false;
    1728:	2600      	movs	r6, #0
		return NULL;
    172a:	4634      	mov	r4, r6
    172c:	e7eb      	b.n	1706 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    172e:	2220      	movs	r2, #32
    1730:	4621      	mov	r1, r4
    1732:	a801      	add	r0, sp, #4
    1734:	f004 f9cc 	bl	5ad0 <memcpy>
	if (nested_exc) {
    1738:	b14e      	cbz	r6, 174e <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    173a:	9b08      	ldr	r3, [sp, #32]
    173c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1740:	b95a      	cbnz	r2, 175a <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1742:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1746:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    174a:	9308      	str	r3, [sp, #32]
    174c:	e005      	b.n	175a <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    174e:	9b08      	ldr	r3, [sp, #32]
    1750:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1754:	f023 0301 	bic.w	r3, r3, #1
    1758:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    175a:	a901      	add	r1, sp, #4
    175c:	4628      	mov	r0, r5
    175e:	f004 f8c6 	bl	58ee <z_arm_fatal_error>
    1762:	e7d9      	b.n	1718 <z_arm_fault+0x44>
    1764:	e000ed00 	.word	0xe000ed00

00001768 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1768:	4b04      	ldr	r3, [pc, #16]	; (177c <z_arm_fault_init+0x14>)
    176a:	695a      	ldr	r2, [r3, #20]
    176c:	f042 0210 	orr.w	r2, r2, #16
    1770:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    1772:	695a      	ldr	r2, [r3, #20]
    1774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1778:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    177a:	4770      	bx	lr
    177c:	e000ed00 	.word	0xe000ed00

00001780 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1780:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1784:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1788:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    178a:	4672      	mov	r2, lr
	bl z_arm_fault
    178c:	f7ff ffa2 	bl	16d4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1790:	bd01      	pop	{r0, pc}
    1792:	bf00      	nop

00001794 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1794:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1796:	e007      	b.n	17a8 <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1798:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    179c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    17a0:	2120      	movs	r1, #32
    17a2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    17a6:	3201      	adds	r2, #1
    17a8:	2a44      	cmp	r2, #68	; 0x44
    17aa:	dc09      	bgt.n	17c0 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    17ac:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    17ae:	2b00      	cmp	r3, #0
    17b0:	daf2      	bge.n	1798 <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17b2:	f003 030f 	and.w	r3, r3, #15
    17b6:	4903      	ldr	r1, [pc, #12]	; (17c4 <z_arm_interrupt_init+0x30>)
    17b8:	4419      	add	r1, r3
    17ba:	2320      	movs	r3, #32
    17bc:	760b      	strb	r3, [r1, #24]
    17be:	e7f2      	b.n	17a6 <z_arm_interrupt_init+0x12>
	}
}
    17c0:	4770      	bx	lr
    17c2:	bf00      	nop
    17c4:	e000ecfc 	.word	0xe000ecfc

000017c8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    17c8:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    17ca:	4915      	ldr	r1, [pc, #84]	; (1820 <__start+0x58>)
    strb r0, [r1]
    17cc:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    17ce:	2000      	movs	r0, #0
    msr CONTROL, r0
    17d0:	f380 8814 	msr	CONTROL, r0
    isb
    17d4:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    17d8:	2000      	movs	r0, #0
    msr MSPLIM, r0
    17da:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    17de:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    17e2:	f7ff fb15 	bl	e10 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    17e6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    17e8:	490e      	ldr	r1, [pc, #56]	; (1824 <__start+0x5c>)
    str r0, [r1]
    17ea:	6008      	str	r0, [r1, #0]
    dsb
    17ec:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    17f0:	480d      	ldr	r0, [pc, #52]	; (1828 <__start+0x60>)
    msr msp, r0
    17f2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    17f6:	f000 f841 	bl	187c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    17fa:	2020      	movs	r0, #32
    msr BASEPRI, r0
    17fc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1800:	480a      	ldr	r0, [pc, #40]	; (182c <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1802:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1806:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1808:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    180c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1810:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1812:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1814:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1818:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    181c:	f7ff fdac 	bl	1378 <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
    1820:	20000cc3 	.word	0x20000cc3
    ldr r1, =_SCS_MPU_CTRL
    1824:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1828:	20001a08 	.word	0x20001a08
    ldr r0, =z_interrupt_stacks
    182c:	20000cc8 	.word	0x20000cc8

00001830 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    1830:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1834:	4905      	ldr	r1, [pc, #20]	; (184c <__NVIC_SystemReset+0x1c>)
    1836:	68ca      	ldr	r2, [r1, #12]
    1838:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    183c:	4b04      	ldr	r3, [pc, #16]	; (1850 <__NVIC_SystemReset+0x20>)
    183e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1840:	60cb      	str	r3, [r1, #12]
    1842:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1846:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1848:	e7fd      	b.n	1846 <__NVIC_SystemReset+0x16>
    184a:	bf00      	nop
    184c:	e000ed00 	.word	0xe000ed00
    1850:	05fa0004 	.word	0x05fa0004

00001854 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1854:	4b08      	ldr	r3, [pc, #32]	; (1878 <z_arm_clear_arm_mpu_config+0x24>)
    1856:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    185a:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    185e:	2300      	movs	r3, #0
    1860:	e006      	b.n	1870 <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    1862:	4a05      	ldr	r2, [pc, #20]	; (1878 <z_arm_clear_arm_mpu_config+0x24>)
    1864:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
    1868:	2100      	movs	r1, #0
    186a:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    186e:	3301      	adds	r3, #1
    1870:	4283      	cmp	r3, r0
    1872:	dbf6      	blt.n	1862 <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    1874:	4770      	bx	lr
    1876:	bf00      	nop
    1878:	e000ed00 	.word	0xe000ed00

0000187c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    187c:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    187e:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1880:	2400      	movs	r4, #0
    1882:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1886:	f7ff ffe5 	bl	1854 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    188a:	4623      	mov	r3, r4
    188c:	e008      	b.n	18a0 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    188e:	f103 0120 	add.w	r1, r3, #32
    1892:	4a0e      	ldr	r2, [pc, #56]	; (18cc <z_arm_init_arch_hw_at_boot+0x50>)
    1894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1898:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    189c:	3301      	adds	r3, #1
    189e:	b2db      	uxtb	r3, r3
    18a0:	2b0f      	cmp	r3, #15
    18a2:	d9f4      	bls.n	188e <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    18a4:	2300      	movs	r3, #0
    18a6:	e008      	b.n	18ba <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    18a8:	f103 0160 	add.w	r1, r3, #96	; 0x60
    18ac:	4a07      	ldr	r2, [pc, #28]	; (18cc <z_arm_init_arch_hw_at_boot+0x50>)
    18ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    18b2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    18b6:	3301      	adds	r3, #1
    18b8:	b2db      	uxtb	r3, r3
    18ba:	2b0f      	cmp	r3, #15
    18bc:	d9f4      	bls.n	18a8 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    18be:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    18c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    18c4:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    18c8:	bd10      	pop	{r4, pc}
    18ca:	bf00      	nop
    18cc:	e000e100 	.word	0xe000e100

000018d0 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    18d0:	b508      	push	{r3, lr}
	if (_current == thread) {
    18d2:	4b0a      	ldr	r3, [pc, #40]	; (18fc <z_impl_k_thread_abort+0x2c>)
    18d4:	689b      	ldr	r3, [r3, #8]
    18d6:	4283      	cmp	r3, r0
    18d8:	d002      	beq.n	18e0 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    18da:	f002 ffa7 	bl	482c <z_thread_abort>
}
    18de:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    18e0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    18e4:	2b00      	cmp	r3, #0
    18e6:	d0f8      	beq.n	18da <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    18e8:	4b05      	ldr	r3, [pc, #20]	; (1900 <z_impl_k_thread_abort+0x30>)
    18ea:	685a      	ldr	r2, [r3, #4]
    18ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    18f0:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    18f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    18f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    18f8:	625a      	str	r2, [r3, #36]	; 0x24
    18fa:	e7ee      	b.n	18da <z_impl_k_thread_abort+0xa>
    18fc:	20000aac 	.word	0x20000aac
    1900:	e000ed00 	.word	0xe000ed00

00001904 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1904:	b510      	push	{r4, lr}
    1906:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1908:	4c0a      	ldr	r4, [pc, #40]	; (1934 <z_arm_configure_static_mpu_regions+0x30>)
    190a:	4623      	mov	r3, r4
    190c:	4a0a      	ldr	r2, [pc, #40]	; (1938 <z_arm_configure_static_mpu_regions+0x34>)
    190e:	2101      	movs	r1, #1
    1910:	480a      	ldr	r0, [pc, #40]	; (193c <z_arm_configure_static_mpu_regions+0x38>)
    1912:	f004 f8a8 	bl	5a66 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1916:	2300      	movs	r3, #0
    1918:	9301      	str	r3, [sp, #4]
    191a:	9302      	str	r3, [sp, #8]
    191c:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    191e:	4b08      	ldr	r3, [pc, #32]	; (1940 <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1920:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1922:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1924:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1926:	2101      	movs	r1, #1
    1928:	a801      	add	r0, sp, #4
    192a:	f004 f8a0 	bl	5a6e <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    192e:	b004      	add	sp, #16
    1930:	bd10      	pop	{r4, pc}
    1932:	bf00      	nop
    1934:	20070000 	.word	0x20070000
    1938:	20000000 	.word	0x20000000
    193c:	0000796c 	.word	0x0000796c
    1940:	200002d8 	.word	0x200002d8

00001944 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
    1944:	4b02      	ldr	r3, [pc, #8]	; (1950 <mpu_init+0xc>)
    1946:	4a03      	ldr	r2, [pc, #12]	; (1954 <mpu_init+0x10>)
    1948:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
    194c:	4770      	bx	lr
    194e:	bf00      	nop
    1950:	e000ed00 	.word	0xe000ed00
    1954:	0044ffaa 	.word	0x0044ffaa

00001958 <mpu_set_region>:
	MPU->RNR = rnr;
    1958:	4b03      	ldr	r3, [pc, #12]	; (1968 <mpu_set_region+0x10>)
    195a:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
    195e:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
    1962:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
    1966:	4770      	bx	lr
    1968:	e000ed00 	.word	0xe000ed00

0000196c <mpu_region_get_conf>:
	MPU->RNR = rnr;
    196c:	4b0e      	ldr	r3, [pc, #56]	; (19a8 <mpu_region_get_conf+0x3c>)
    196e:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    1972:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    1976:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
    197a:	7a0a      	ldrb	r2, [r1, #8]
    197c:	f360 0204 	bfi	r2, r0, #0, #5
    1980:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
    1982:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1986:	f3c2 0242 	ubfx	r2, r2, #1, #3
    198a:	7a08      	ldrb	r0, [r1, #8]
    198c:	f362 1047 	bfi	r0, r2, #5, #3
    1990:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
    1992:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1996:	f022 021f 	bic.w	r2, r2, #31
    199a:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
    199c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    19a0:	f023 031f 	bic.w	r3, r3, #31
    19a4:	60cb      	str	r3, [r1, #12]
}
    19a6:	4770      	bx	lr
    19a8:	e000ed00 	.word	0xe000ed00

000019ac <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    19ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19b0:	b087      	sub	sp, #28
    19b2:	4681      	mov	r9, r0
    19b4:	9100      	str	r1, [sp, #0]
    19b6:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    19b8:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    19ba:	2700      	movs	r7, #0
    19bc:	e034      	b.n	1a28 <mpu_configure_regions_and_partition+0x7c>
		 */
		uint32_t u_reg_base = mpu_region_get_base(u_reg_index);
		uint32_t u_reg_last = mpu_region_get_last_addr(u_reg_index);
		uint32_t reg_last = regions[i].start + regions[i].size - 1;

		if ((regions[i].start == u_reg_base) &&
    19be:	45d8      	cmp	r8, fp
    19c0:	d165      	bne.n	1a8e <mpu_configure_regions_and_partition+0xe2>
			 * underlying region. In this case we simply
			 * update the partition attributes of the
			 * underlying region with those of the new
			 * region.
			 */
			mpu_configure_region(u_reg_index, &regions[i]);
    19c2:	4629      	mov	r1, r5
    19c4:	b2c0      	uxtb	r0, r0
    19c6:	f004 f81e 	bl	5a06 <mpu_configure_region>
    19ca:	e02c      	b.n	1a26 <mpu_configure_regions_and_partition+0x7a>
	MPU->RNR = rnr;
    19cc:	4a58      	ldr	r2, [pc, #352]	; (1b30 <mpu_configure_regions_and_partition+0x184>)
    19ce:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
    19d2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    19d6:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    19da:	f021 011f 	bic.w	r1, r1, #31
    19de:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
    19e0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			 */
			mpu_region_set_base(u_reg_index,
				regions[i].start + regions[i].size);

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    19e4:	4629      	mov	r1, r5
    19e6:	b2e0      	uxtb	r0, r4
    19e8:	f004 f80d 	bl	5a06 <mpu_configure_region>
    19ec:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    19ee:	f110 0f16 	cmn.w	r0, #22
    19f2:	f000 8096 	beq.w	1b22 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    19f6:	3401      	adds	r4, #1
    19f8:	e015      	b.n	1a26 <mpu_configure_regions_and_partition+0x7a>
			 * underlying region; the end of the underlying
			 * region needs to be set to the start of the
			 * new region.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    19fa:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    19fc:	494c      	ldr	r1, [pc, #304]	; (1b30 <mpu_configure_regions_and_partition+0x184>)
    19fe:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    1a02:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1a06:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1a0a:	f023 031f 	bic.w	r3, r3, #31
    1a0e:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    1a10:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1a14:	4629      	mov	r1, r5
    1a16:	b2e0      	uxtb	r0, r4
    1a18:	f003 fff5 	bl	5a06 <mpu_configure_region>
    1a1c:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1a1e:	f110 0f16 	cmn.w	r0, #22
    1a22:	d07e      	beq.n	1b22 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1a24:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    1a26:	3701      	adds	r7, #1
    1a28:	9b00      	ldr	r3, [sp, #0]
    1a2a:	429f      	cmp	r7, r3
    1a2c:	da79      	bge.n	1b22 <mpu_configure_regions_and_partition+0x176>
		if (regions[i].size == 0U) {
    1a2e:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    1a32:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    1a36:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    1a3a:	686e      	ldr	r6, [r5, #4]
    1a3c:	2e00      	cmp	r6, #0
    1a3e:	d0f2      	beq.n	1a26 <mpu_configure_regions_and_partition+0x7a>
		if (do_sanity_check &&
    1a40:	9b01      	ldr	r3, [sp, #4]
    1a42:	b123      	cbz	r3, 1a4e <mpu_configure_regions_and_partition+0xa2>
			(!mpu_partition_is_valid(&regions[i]))) {
    1a44:	4628      	mov	r0, r5
    1a46:	f003 ffc1 	bl	59cc <mpu_partition_is_valid>
		if (do_sanity_check &&
    1a4a:	2800      	cmp	r0, #0
    1a4c:	d065      	beq.n	1b1a <mpu_configure_regions_and_partition+0x16e>
			get_region_index(regions[i].start, regions[i].size);
    1a4e:	4631      	mov	r1, r6
    1a50:	f859 000a 	ldr.w	r0, [r9, sl]
    1a54:	f003 fff6 	bl	5a44 <get_region_index>
    1a58:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
    1a5a:	f110 0f16 	cmn.w	r0, #22
    1a5e:	d05f      	beq.n	1b20 <mpu_configure_regions_and_partition+0x174>
    1a60:	42a0      	cmp	r0, r4
    1a62:	da62      	bge.n	1b2a <mpu_configure_regions_and_partition+0x17e>
	MPU->RNR = rnr;
    1a64:	4b32      	ldr	r3, [pc, #200]	; (1b30 <mpu_configure_regions_and_partition+0x184>)
    1a66:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    1a6a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1a6e:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    1a72:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
    1a76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1a7a:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1a7e:	f859 300a 	ldr.w	r3, [r9, sl]
    1a82:	6869      	ldr	r1, [r5, #4]
    1a84:	4419      	add	r1, r3
    1a86:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    1a8a:	429a      	cmp	r2, r3
    1a8c:	d097      	beq.n	19be <mpu_configure_regions_and_partition+0x12>
		} else if (regions[i].start == u_reg_base) {
    1a8e:	429a      	cmp	r2, r3
    1a90:	d09c      	beq.n	19cc <mpu_configure_regions_and_partition+0x20>
		} else if (reg_last == u_reg_last) {
    1a92:	45d8      	cmp	r8, fp
    1a94:	d0b1      	beq.n	19fa <mpu_configure_regions_and_partition+0x4e>
			/* The new regions lies strictly inside the
			 * underlying region, which needs to split
			 * into two regions.
			 */
			mpu_region_set_limit(u_reg_index,
				regions[i].start - 1);
    1a96:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    1a98:	4925      	ldr	r1, [pc, #148]	; (1b30 <mpu_configure_regions_and_partition+0x184>)
    1a9a:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    1a9e:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1aa2:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1aa6:	f023 031f 	bic.w	r3, r3, #31
    1aaa:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    1aac:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);
    1ab0:	4629      	mov	r1, r5
    1ab2:	b2e0      	uxtb	r0, r4
    1ab4:	f003 ffa7 	bl	5a06 <mpu_configure_region>
    1ab8:	4604      	mov	r4, r0

			if (reg_index == -EINVAL) {
    1aba:	f110 0f16 	cmn.w	r0, #22
    1abe:	d030      	beq.n	1b22 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}
			reg_index++;
    1ac0:	3001      	adds	r0, #1
	MPU->RNR = rnr;
    1ac2:	4b1b      	ldr	r3, [pc, #108]	; (1b30 <mpu_configure_regions_and_partition+0x184>)
    1ac4:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    1ac8:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1acc:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1ad0:	f361 0204 	bfi	r2, r1, #0, #5
    1ad4:	f88d 2010 	strb.w	r2, [sp, #16]
	return MPU->RLAR;
    1ad8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1adc:	f3c3 0342 	ubfx	r3, r3, #1, #3
    1ae0:	b2d2      	uxtb	r2, r2
    1ae2:	f363 1247 	bfi	r2, r3, #5, #3
    1ae6:	f88d 2010 	strb.w	r2, [sp, #16]
			 */
			struct arm_mpu_region fill_region;

			mpu_region_get_access_attr(u_reg_index,
				&fill_region.attr);
			fill_region.base = regions[i].start +
    1aea:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    1aee:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    1af0:	4413      	add	r3, r2
    1af2:	9302      	str	r3, [sp, #8]
			fill_region.attr.r_limit =
			REGION_LIMIT_ADDR((regions[i].start +
    1af4:	f023 031f 	bic.w	r3, r3, #31
    1af8:	eba8 080b 	sub.w	r8, r8, fp
    1afc:	4443      	add	r3, r8
    1afe:	3b01      	subs	r3, #1
    1b00:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    1b04:	9305      	str	r3, [sp, #20]
				regions[i].size), (u_reg_last - reg_last));

			reg_index =
				region_allocate_and_init(reg_index,
    1b06:	a902      	add	r1, sp, #8
    1b08:	b2c0      	uxtb	r0, r0
    1b0a:	f003 ff71 	bl	59f0 <region_allocate_and_init>
    1b0e:	4604      	mov	r4, r0
					(const struct arm_mpu_region *)
						&fill_region);

			if (reg_index == -EINVAL) {
    1b10:	f110 0f16 	cmn.w	r0, #22
    1b14:	d005      	beq.n	1b22 <mpu_configure_regions_and_partition+0x176>
				return reg_index;
			}

			reg_index++;
    1b16:	3401      	adds	r4, #1
    1b18:	e785      	b.n	1a26 <mpu_configure_regions_and_partition+0x7a>
			return -EINVAL;
    1b1a:	f06f 0415 	mvn.w	r4, #21
    1b1e:	e000      	b.n	1b22 <mpu_configure_regions_and_partition+0x176>
			return -EINVAL;
    1b20:	4604      	mov	r4, r0
		}
	}

	return reg_index;
}
    1b22:	4620      	mov	r0, r4
    1b24:	b007      	add	sp, #28
    1b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    1b2a:	f06f 0415 	mvn.w	r4, #21
    1b2e:	e7f8      	b.n	1b22 <mpu_configure_regions_and_partition+0x176>
    1b30:	e000ed00 	.word	0xe000ed00

00001b34 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1b34:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1b36:	4c03      	ldr	r4, [pc, #12]	; (1b44 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1b38:	2301      	movs	r3, #1
    1b3a:	7822      	ldrb	r2, [r4, #0]
    1b3c:	f7ff ff36 	bl	19ac <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1b40:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1b42:	bd10      	pop	{r4, pc}
    1b44:	20000cc0 	.word	0x20000cc0

00001b48 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    1b48:	b570      	push	{r4, r5, r6, lr}
    1b4a:	4605      	mov	r5, r0
    1b4c:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1b4e:	2400      	movs	r4, #0
    1b50:	e000      	b.n	1b54 <mpu_mark_areas_for_dynamic_regions+0xc>
    1b52:	3401      	adds	r4, #1
    1b54:	42a6      	cmp	r6, r4
    1b56:	dd1e      	ble.n	1b96 <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1b58:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1b5c:	009a      	lsls	r2, r3, #2
    1b5e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1b62:	6859      	ldr	r1, [r3, #4]
    1b64:	2900      	cmp	r1, #0
    1b66:	d0f4      	beq.n	1b52 <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1b68:	58a8      	ldr	r0, [r5, r2]
    1b6a:	f003 ff6b 	bl	5a44 <get_region_index>
		dyn_reg_info[i].index =
    1b6e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1b72:	4a0b      	ldr	r2, [pc, #44]	; (1ba0 <mpu_mark_areas_for_dynamic_regions+0x58>)
    1b74:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1b78:	f110 0f16 	cmn.w	r0, #22
    1b7c:	d00c      	beq.n	1b98 <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1b7e:	4b09      	ldr	r3, [pc, #36]	; (1ba4 <mpu_mark_areas_for_dynamic_regions+0x5c>)
    1b80:	781b      	ldrb	r3, [r3, #0]
    1b82:	4298      	cmp	r0, r3
    1b84:	da09      	bge.n	1b9a <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    1b86:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1b8a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    1b8e:	3104      	adds	r1, #4
    1b90:	f7ff feec 	bl	196c <mpu_region_get_conf>
    1b94:	e7dd      	b.n	1b52 <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    1b96:	2000      	movs	r0, #0
}
    1b98:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    1b9a:	f06f 0015 	mvn.w	r0, #21
    1b9e:	e7fb      	b.n	1b98 <mpu_mark_areas_for_dynamic_regions+0x50>
    1ba0:	200009ac 	.word	0x200009ac
    1ba4:	20000cc0 	.word	0x20000cc0

00001ba8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1ba8:	4b04      	ldr	r3, [pc, #16]	; (1bbc <arm_core_mpu_enable+0x14>)
    1baa:	2205      	movs	r2, #5
    1bac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1bb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1bb4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1bb8:	4770      	bx	lr
    1bba:	bf00      	nop
    1bbc:	e000ed00 	.word	0xe000ed00

00001bc0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1bc0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1bc4:	4b02      	ldr	r3, [pc, #8]	; (1bd0 <arm_core_mpu_disable+0x10>)
    1bc6:	2200      	movs	r2, #0
    1bc8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1bcc:	4770      	bx	lr
    1bce:	bf00      	nop
    1bd0:	e000ed00 	.word	0xe000ed00

00001bd4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1bd4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1bd6:	4b0e      	ldr	r3, [pc, #56]	; (1c10 <z_arm_mpu_init+0x3c>)
    1bd8:	681d      	ldr	r5, [r3, #0]
    1bda:	2d08      	cmp	r5, #8
    1bdc:	d815      	bhi.n	1c0a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1bde:	f7ff ffef 	bl	1bc0 <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    1be2:	f7ff feaf 	bl	1944 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1be6:	2400      	movs	r4, #0
    1be8:	e007      	b.n	1bfa <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1bea:	4b09      	ldr	r3, [pc, #36]	; (1c10 <z_arm_mpu_init+0x3c>)
    1bec:	6859      	ldr	r1, [r3, #4]
    1bee:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1bf2:	4620      	mov	r0, r4
    1bf4:	f003 fed6 	bl	59a4 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1bf8:	3401      	adds	r4, #1
    1bfa:	42a5      	cmp	r5, r4
    1bfc:	d8f5      	bhi.n	1bea <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1bfe:	4b05      	ldr	r3, [pc, #20]	; (1c14 <z_arm_mpu_init+0x40>)
    1c00:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1c02:	f7ff ffd1 	bl	1ba8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1c06:	2000      	movs	r0, #0
}
    1c08:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1c0e:	e7fb      	b.n	1c08 <z_arm_mpu_init+0x34>
    1c10:	00007978 	.word	0x00007978
    1c14:	20000cc0 	.word	0x20000cc0

00001c18 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1c18:	4b01      	ldr	r3, [pc, #4]	; (1c20 <__stdout_hook_install+0x8>)
    1c1a:	6018      	str	r0, [r3, #0]
}
    1c1c:	4770      	bx	lr
    1c1e:	bf00      	nop
    1c20:	2000016c 	.word	0x2000016c

00001c24 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1c24:	4800      	ldr	r0, [pc, #0]	; (1c28 <get_hf_flags+0x4>)
    1c26:	4770      	bx	lr
    1c28:	20000a4c 	.word	0x20000a4c

00001c2c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1c2c:	4b03      	ldr	r3, [pc, #12]	; (1c3c <get_subsys+0x10>)
    1c2e:	1ac0      	subs	r0, r0, r3
    1c30:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1c32:	4b03      	ldr	r3, [pc, #12]	; (1c40 <get_subsys+0x14>)
    1c34:	fb03 f000 	mul.w	r0, r3, r0
    1c38:	4770      	bx	lr
    1c3a:	bf00      	nop
    1c3c:	200009d4 	.word	0x200009d4
    1c40:	b6db6db7 	.word	0xb6db6db7

00001c44 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1c44:	b538      	push	{r3, r4, r5, lr}
    1c46:	4605      	mov	r5, r0
    1c48:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1c4a:	f7ff ffef 	bl	1c2c <get_subsys>
    1c4e:	4601      	mov	r1, r0
    1c50:	2240      	movs	r2, #64	; 0x40
    1c52:	4803      	ldr	r0, [pc, #12]	; (1c60 <onoff_stop+0x1c>)
    1c54:	f004 f83b 	bl	5cce <stop>
    1c58:	4601      	mov	r1, r0
	notify(mgr, res);
    1c5a:	4628      	mov	r0, r5
    1c5c:	47a0      	blx	r4
}
    1c5e:	bd38      	pop	{r3, r4, r5, pc}
    1c60:	00007564 	.word	0x00007564

00001c64 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1c64:	b530      	push	{r4, r5, lr}
    1c66:	b083      	sub	sp, #12
    1c68:	4605      	mov	r5, r0
    1c6a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1c6c:	f7ff ffde 	bl	1c2c <get_subsys>
    1c70:	4601      	mov	r1, r0
    1c72:	2340      	movs	r3, #64	; 0x40
    1c74:	9300      	str	r3, [sp, #0]
    1c76:	4623      	mov	r3, r4
    1c78:	4a05      	ldr	r2, [pc, #20]	; (1c90 <onoff_start+0x2c>)
    1c7a:	4806      	ldr	r0, [pc, #24]	; (1c94 <onoff_start+0x30>)
    1c7c:	f004 f841 	bl	5d02 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1c80:	1e01      	subs	r1, r0, #0
    1c82:	db01      	blt.n	1c88 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    1c84:	b003      	add	sp, #12
    1c86:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    1c88:	4628      	mov	r0, r5
    1c8a:	47a0      	blx	r4
}
    1c8c:	e7fa      	b.n	1c84 <onoff_start+0x20>
    1c8e:	bf00      	nop
    1c90:	00005d4b 	.word	0x00005d4b
    1c94:	00007564 	.word	0x00007564

00001c98 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    1c98:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    1c9a:	2805      	cmp	r0, #5
    1c9c:	d815      	bhi.n	1cca <clock_event_handler+0x32>
    1c9e:	e8df f000 	tbb	[pc, r0]
    1ca2:	1a03      	.short	0x1a03
    1ca4:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1ca8:	2100      	movs	r1, #0
    1caa:	480d      	ldr	r0, [pc, #52]	; (1ce0 <clock_event_handler+0x48>)
    1cac:	f003 ff9a 	bl	5be4 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1cb0:	6883      	ldr	r3, [r0, #8]
    1cb2:	f013 0f07 	tst.w	r3, #7
    1cb6:	d108      	bne.n	1cca <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    1cb8:	2100      	movs	r1, #0
    1cba:	4809      	ldr	r0, [pc, #36]	; (1ce0 <clock_event_handler+0x48>)
    1cbc:	f003 fff5 	bl	5caa <clkstarted_handle>
    1cc0:	e003      	b.n	1cca <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    1cc2:	2102      	movs	r1, #2
    1cc4:	4806      	ldr	r0, [pc, #24]	; (1ce0 <clock_event_handler+0x48>)
    1cc6:	f003 fff0 	bl	5caa <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    1cca:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    1ccc:	2103      	movs	r1, #3
    1cce:	4804      	ldr	r0, [pc, #16]	; (1ce0 <clock_event_handler+0x48>)
    1cd0:	f003 ffeb 	bl	5caa <clkstarted_handle>
		break;
    1cd4:	e7f9      	b.n	1cca <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1cd6:	2101      	movs	r1, #1
    1cd8:	4801      	ldr	r0, [pc, #4]	; (1ce0 <clock_event_handler+0x48>)
    1cda:	f003 ffe6 	bl	5caa <clkstarted_handle>
}
    1cde:	e7f4      	b.n	1cca <clock_event_handler+0x32>
    1ce0:	00007564 	.word	0x00007564

00001ce4 <generic_hfclk_start>:
{
    1ce4:	b510      	push	{r4, lr}
    1ce6:	b082      	sub	sp, #8
	__asm__ volatile(
    1ce8:	f04f 0320 	mov.w	r3, #32
    1cec:	f3ef 8411 	mrs	r4, BASEPRI
    1cf0:	f383 8812 	msr	BASEPRI_MAX, r3
    1cf4:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1cf8:	4a14      	ldr	r2, [pc, #80]	; (1d4c <generic_hfclk_start+0x68>)
    1cfa:	6813      	ldr	r3, [r2, #0]
    1cfc:	f043 0102 	orr.w	r1, r3, #2
    1d00:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1d02:	f013 0f01 	tst.w	r3, #1
    1d06:	d109      	bne.n	1d1c <generic_hfclk_start+0x38>
	bool already_started = false;
    1d08:	2300      	movs	r3, #0
	__asm__ volatile(
    1d0a:	f384 8811 	msr	BASEPRI, r4
    1d0e:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1d12:	b9b3      	cbnz	r3, 1d42 <generic_hfclk_start+0x5e>
	hfclk_start();
    1d14:	f004 f821 	bl	5d5a <hfclk_start>
}
    1d18:	b002      	add	sp, #8
    1d1a:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    1d1c:	f10d 0207 	add.w	r2, sp, #7
    1d20:	2101      	movs	r1, #1
    1d22:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    1d26:	f003 ff23 	bl	5b70 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1d2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1d2e:	2b01      	cmp	r3, #1
    1d30:	d001      	beq.n	1d36 <generic_hfclk_start+0x52>
	bool already_started = false;
    1d32:	2300      	movs	r3, #0
    1d34:	e7e9      	b.n	1d0a <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    1d36:	f7ff ff75 	bl	1c24 <get_hf_flags>
    1d3a:	f003 ffa3 	bl	5c84 <set_on_state>
			already_started = true;
    1d3e:	2301      	movs	r3, #1
    1d40:	e7e3      	b.n	1d0a <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    1d42:	2100      	movs	r1, #0
    1d44:	4802      	ldr	r0, [pc, #8]	; (1d50 <generic_hfclk_start+0x6c>)
    1d46:	f003 ffb0 	bl	5caa <clkstarted_handle>
		return;
    1d4a:	e7e5      	b.n	1d18 <generic_hfclk_start+0x34>
    1d4c:	20000a74 	.word	0x20000a74
    1d50:	00007564 	.word	0x00007564

00001d54 <generic_hfclk_stop>:
{
    1d54:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1d56:	4b08      	ldr	r3, [pc, #32]	; (1d78 <generic_hfclk_stop+0x24>)
    1d58:	e8d3 2fef 	ldaex	r2, [r3]
    1d5c:	f022 0102 	bic.w	r1, r2, #2
    1d60:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1d64:	2800      	cmp	r0, #0
    1d66:	d1f7      	bne.n	1d58 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1d68:	f012 0f01 	tst.w	r2, #1
    1d6c:	d000      	beq.n	1d70 <generic_hfclk_stop+0x1c>
}
    1d6e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1d70:	f004 f807 	bl	5d82 <hfclk_stop>
    1d74:	e7fb      	b.n	1d6e <generic_hfclk_stop+0x1a>
    1d76:	bf00      	nop
    1d78:	20000a74 	.word	0x20000a74

00001d7c <lfclk_spinwait>:
{
    1d7c:	b570      	push	{r4, r5, r6, lr}
    1d7e:	b082      	sub	sp, #8
    1d80:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1d82:	2801      	cmp	r0, #1
    1d84:	d107      	bne.n	1d96 <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1d86:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1d8a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1d8e:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1d92:	2b02      	cmp	r3, #2
    1d94:	d037      	beq.n	1e06 <lfclk_spinwait+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1d96:	f005 f998 	bl	70ca <k_is_in_isr>
    1d9a:	4604      	mov	r4, r0
    1d9c:	b910      	cbnz	r0, 1da4 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    1d9e:	4b2b      	ldr	r3, [pc, #172]	; (1e4c <lfclk_spinwait+0xd0>)
    1da0:	781b      	ldrb	r3, [r3, #0]
    1da2:	b97b      	cbnz	r3, 1dc4 <lfclk_spinwait+0x48>
	__asm__ volatile(
    1da4:	f04f 0320 	mov.w	r3, #32
    1da8:	f3ef 8611 	mrs	r6, BASEPRI
    1dac:	f383 8812 	msr	BASEPRI_MAX, r3
    1db0:	f3bf 8f6f 	isb	sy
    1db4:	2401      	movs	r4, #1
	if (!isr_mode) {
    1db6:	b994      	cbnz	r4, 1dde <lfclk_spinwait+0x62>
    p_reg->INTENCLR = mask;
    1db8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1dbc:	2202      	movs	r2, #2
    1dbe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    1dc2:	e00c      	b.n	1dde <lfclk_spinwait+0x62>
	int key = isr_mode ? irq_lock() : 0;
    1dc4:	2600      	movs	r6, #0
    1dc6:	e7f6      	b.n	1db6 <lfclk_spinwait+0x3a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1dc8:	b1fc      	cbz	r4, 1e0a <lfclk_spinwait+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1dca:	4630      	mov	r0, r6
    1dcc:	f7ff fa96 	bl	12fc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1dd0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1dd4:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1dd8:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1dda:	2b01      	cmp	r3, #1
    1ddc:	d019      	beq.n	1e12 <lfclk_spinwait+0x96>
    1dde:	f10d 0207 	add.w	r2, sp, #7
    1de2:	2100      	movs	r1, #0
    1de4:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    1de8:	f003 fec2 	bl	5b70 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1dec:	2800      	cmp	r0, #0
    1dee:	d0eb      	beq.n	1dc8 <lfclk_spinwait+0x4c>
		 && ((type == target_type)
    1df0:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1df4:	2b02      	cmp	r3, #2
    1df6:	d001      	beq.n	1dfc <lfclk_spinwait+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1df8:	2d01      	cmp	r5, #1
    1dfa:	d1e5      	bne.n	1dc8 <lfclk_spinwait+0x4c>
	if (isr_mode) {
    1dfc:	b304      	cbz	r4, 1e40 <lfclk_spinwait+0xc4>
	__asm__ volatile(
    1dfe:	f386 8811 	msr	BASEPRI, r6
    1e02:	f3bf 8f6f 	isb	sy
}
    1e06:	b002      	add	sp, #8
    1e08:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
    1e0a:	2001      	movs	r0, #1
    1e0c:	f003 ffcd 	bl	5daa <k_msleep>
    1e10:	e7de      	b.n	1dd0 <lfclk_spinwait+0x54>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1e12:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1e16:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d0df      	beq.n	1dde <lfclk_spinwait+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1e1e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1e22:	2200      	movs	r2, #0
    1e24:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1e28:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1e2c:	2202      	movs	r2, #2
    1e2e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1e32:	4a07      	ldr	r2, [pc, #28]	; (1e50 <lfclk_spinwait+0xd4>)
    1e34:	2120      	movs	r1, #32
    1e36:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1e3a:	2201      	movs	r2, #1
    1e3c:	609a      	str	r2, [r3, #8]
}
    1e3e:	e7ce      	b.n	1dde <lfclk_spinwait+0x62>
    p_reg->INTENSET = mask;
    1e40:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    1e44:	2202      	movs	r2, #2
    1e46:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1e4a:	e7dc      	b.n	1e06 <lfclk_spinwait+0x8a>
    1e4c:	20000cc3 	.word	0x20000cc3
    1e50:	e000e100 	.word	0xe000e100

00001e54 <api_blocking_start>:
{
    1e54:	b500      	push	{lr}
    1e56:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1e58:	f8cd d000 	str.w	sp, [sp]
    1e5c:	f8cd d004 	str.w	sp, [sp, #4]
    1e60:	2300      	movs	r3, #0
    1e62:	9302      	str	r3, [sp, #8]
    1e64:	2301      	movs	r3, #1
    1e66:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1e68:	466b      	mov	r3, sp
    1e6a:	4a07      	ldr	r2, [pc, #28]	; (1e88 <api_blocking_start+0x34>)
    1e6c:	f003 ff65 	bl	5d3a <api_start>
	if (err < 0) {
    1e70:	2800      	cmp	r0, #0
    1e72:	db05      	blt.n	1e80 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1e74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1e78:	2300      	movs	r3, #0
    1e7a:	4668      	mov	r0, sp
    1e7c:	f002 f8fa 	bl	4074 <z_impl_k_sem_take>
}
    1e80:	b005      	add	sp, #20
    1e82:	f85d fb04 	ldr.w	pc, [sp], #4
    1e86:	bf00      	nop
    1e88:	00005dd7 	.word	0x00005dd7

00001e8c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1e8c:	b570      	push	{r4, r5, r6, lr}
    1e8e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1e90:	2200      	movs	r2, #0
    1e92:	2101      	movs	r1, #1
    1e94:	2005      	movs	r0, #5
    1e96:	f003 fd39 	bl	590c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1e9a:	4811      	ldr	r0, [pc, #68]	; (1ee0 <clk_init+0x54>)
    1e9c:	f001 f8b0 	bl	3000 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1ea0:	4b10      	ldr	r3, [pc, #64]	; (1ee4 <clk_init+0x58>)
    1ea2:	4298      	cmp	r0, r3
    1ea4:	d119      	bne.n	1eda <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1ea6:	f004 ff7e 	bl	6da6 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    1eaa:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1eac:	2c03      	cmp	r4, #3
    1eae:	d812      	bhi.n	1ed6 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1eb0:	4621      	mov	r1, r4
    1eb2:	4630      	mov	r0, r6
    1eb4:	f003 fe96 	bl	5be4 <get_sub_data>
    1eb8:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1eba:	4621      	mov	r1, r4
    1ebc:	4630      	mov	r0, r6
    1ebe:	f003 fe9c 	bl	5bfa <get_onoff_manager>
    1ec2:	4909      	ldr	r1, [pc, #36]	; (1ee8 <clk_init+0x5c>)
    1ec4:	f003 fa06 	bl	52d4 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1ec8:	2800      	cmp	r0, #0
    1eca:	db05      	blt.n	1ed8 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1ecc:	2301      	movs	r3, #1
    1ece:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1ed0:	441c      	add	r4, r3
    1ed2:	b2e4      	uxtb	r4, r4
    1ed4:	e7ea      	b.n	1eac <clk_init+0x20>
	}

	return 0;
    1ed6:	2000      	movs	r0, #0
}
    1ed8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1eda:	f06f 0004 	mvn.w	r0, #4
    1ede:	e7fb      	b.n	1ed8 <clk_init+0x4c>
    1ee0:	00001c99 	.word	0x00001c99
    1ee4:	0bad0000 	.word	0x0bad0000
    1ee8:	000079b0 	.word	0x000079b0

00001eec <z_nrf_clock_control_lf_on>:
{
    1eec:	b510      	push	{r4, lr}
    1eee:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1ef0:	4b0e      	ldr	r3, [pc, #56]	; (1f2c <z_nrf_clock_control_lf_on+0x40>)
    1ef2:	2101      	movs	r1, #1
    1ef4:	e8d3 2fef 	ldaex	r2, [r3]
    1ef8:	e8c3 1fe0 	stlex	r0, r1, [r3]
    1efc:	2800      	cmp	r0, #0
    1efe:	d1f9      	bne.n	1ef4 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    1f00:	b11a      	cbz	r2, 1f0a <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    1f02:	1e63      	subs	r3, r4, #1
    1f04:	2b01      	cmp	r3, #1
    1f06:	d90d      	bls.n	1f24 <z_nrf_clock_control_lf_on+0x38>
}
    1f08:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    1f0a:	4809      	ldr	r0, [pc, #36]	; (1f30 <z_nrf_clock_control_lf_on+0x44>)
    1f0c:	f003 fe75 	bl	5bfa <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1f10:	4908      	ldr	r1, [pc, #32]	; (1f34 <z_nrf_clock_control_lf_on+0x48>)
    1f12:	2300      	movs	r3, #0
    1f14:	604b      	str	r3, [r1, #4]
    1f16:	608b      	str	r3, [r1, #8]
    1f18:	60cb      	str	r3, [r1, #12]
    1f1a:	2301      	movs	r3, #1
    1f1c:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    1f1e:	f003 f9f6 	bl	530e <onoff_request>
    1f22:	e7ee      	b.n	1f02 <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    1f24:	4620      	mov	r0, r4
    1f26:	f7ff ff29 	bl	1d7c <lfclk_spinwait>
		break;
    1f2a:	e7ed      	b.n	1f08 <z_nrf_clock_control_lf_on+0x1c>
    1f2c:	200009d0 	.word	0x200009d0
    1f30:	00007564 	.word	0x00007564
    1f34:	200009c0 	.word	0x200009c0

00001f38 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1f38:	b510      	push	{r4, lr}
    1f3a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1f3c:	280a      	cmp	r0, #10
    1f3e:	d006      	beq.n	1f4e <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1f40:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    1f42:	4806      	ldr	r0, [pc, #24]	; (1f5c <console_out+0x24>)
    1f44:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1f46:	69db      	ldr	r3, [r3, #28]
    1f48:	4798      	blx	r3

	return c;
}
    1f4a:	4620      	mov	r0, r4
    1f4c:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    1f4e:	4803      	ldr	r0, [pc, #12]	; (1f5c <console_out+0x24>)
    1f50:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1f52:	69db      	ldr	r3, [r3, #28]
    1f54:	210d      	movs	r1, #13
    1f56:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    1f58:	e7f2      	b.n	1f40 <console_out+0x8>
    1f5a:	bf00      	nop
    1f5c:	000075ac 	.word	0x000075ac

00001f60 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    1f60:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    1f62:	4c04      	ldr	r4, [pc, #16]	; (1f74 <uart_console_hook_install+0x14>)
    1f64:	4620      	mov	r0, r4
    1f66:	f7ff fe57 	bl	1c18 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    1f6a:	4620      	mov	r0, r4
    1f6c:	f7fe faf0 	bl	550 <__printk_hook_install>
#endif
}
    1f70:	bd10      	pop	{r4, pc}
    1f72:	bf00      	nop
    1f74:	00001f39 	.word	0x00001f39

00001f78 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1f78:	b508      	push	{r3, lr}
    1f7a:	4805      	ldr	r0, [pc, #20]	; (1f90 <uart_console_init+0x18>)
    1f7c:	f005 f813 	bl	6fa6 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    1f80:	b118      	cbz	r0, 1f8a <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    1f82:	f7ff ffed 	bl	1f60 <uart_console_hook_install>

	return 0;
    1f86:	2000      	movs	r0, #0
}
    1f88:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1f8a:	f06f 0012 	mvn.w	r0, #18
    1f8e:	e7fb      	b.n	1f88 <uart_console_init+0x10>
    1f90:	000075ac 	.word	0x000075ac

00001f94 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1f94:	b128      	cbz	r0, 1fa2 <get_dev+0xe>
    1f96:	2801      	cmp	r0, #1
    1f98:	d101      	bne.n	1f9e <get_dev+0xa>
    1f9a:	4803      	ldr	r0, [pc, #12]	; (1fa8 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    1f9c:	4770      	bx	lr
	const struct device *dev = NULL;
    1f9e:	2000      	movs	r0, #0
    1fa0:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1fa2:	4802      	ldr	r0, [pc, #8]	; (1fac <get_dev+0x18>)
    1fa4:	4770      	bx	lr
    1fa6:	bf00      	nop
    1fa8:	0000757c 	.word	0x0000757c
    1fac:	00007594 	.word	0x00007594

00001fb0 <gpio_nrfx_pin_interrupt_configure>:
{
    1fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fb2:	b085      	sub	sp, #20
    1fb4:	460e      	mov	r6, r1
    1fb6:	4619      	mov	r1, r3
	return port->config;
    1fb8:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1fba:	7b1b      	ldrb	r3, [r3, #12]
    1fbc:	f006 051f 	and.w	r5, r6, #31
    1fc0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1fc4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    1fc8:	d022      	beq.n	2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>
    1fca:	4607      	mov	r7, r0
    1fcc:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1fce:	2300      	movs	r3, #0
    1fd0:	9301      	str	r3, [sp, #4]
    1fd2:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    1fd4:	4610      	mov	r0, r2
    1fd6:	f003 ffd8 	bl	5f8a <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1fda:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    1fde:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1fe0:	6899      	ldr	r1, [r3, #8]
    1fe2:	40f1      	lsrs	r1, r6
    1fe4:	f011 0f01 	tst.w	r1, #1
    1fe8:	d102      	bne.n	1ff0 <gpio_nrfx_pin_interrupt_configure+0x40>
    1fea:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    1fee:	d014      	beq.n	201a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1ff0:	2300      	movs	r3, #0
    1ff2:	aa01      	add	r2, sp, #4
    1ff4:	4619      	mov	r1, r3
    1ff6:	4628      	mov	r0, r5
    1ff8:	f001 faee 	bl	35d8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1ffc:	4b1a      	ldr	r3, [pc, #104]	; (2068 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x68>)
    1ffe:	4298      	cmp	r0, r3
    2000:	d12f      	bne.n	2062 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x62>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    2002:	2101      	movs	r1, #1
    2004:	4628      	mov	r0, r5
    2006:	f001 fc4b 	bl	38a0 <nrfx_gpiote_trigger_enable>
	return 0;
    200a:	2000      	movs	r0, #0
}
    200c:	b005      	add	sp, #20
    200e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    2010:	4628      	mov	r0, r5
    2012:	f001 fc77 	bl	3904 <nrfx_gpiote_trigger_disable>
		return 0;
    2016:	2000      	movs	r0, #0
    2018:	e7f8      	b.n	200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    201a:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    201e:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2020:	2a01      	cmp	r2, #1
    2022:	d012      	beq.n	204a <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4a>
        case 0: return NRF_P0;
    2024:	4a11      	ldr	r2, [pc, #68]	; (206c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x6c>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2026:	3380      	adds	r3, #128	; 0x80
    2028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    202c:	f013 0f01 	tst.w	r3, #1
    2030:	d1de      	bne.n	1ff0 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2032:	f10d 010f 	add.w	r1, sp, #15
    2036:	4628      	mov	r0, r5
    2038:	f001 fbd6 	bl	37e8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    203c:	4b0c      	ldr	r3, [pc, #48]	; (2070 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x70>)
    203e:	4298      	cmp	r0, r3
    2040:	d005      	beq.n	204e <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x4e>
		trigger_config.p_in_channel = &ch;
    2042:	f10d 030f 	add.w	r3, sp, #15
    2046:	9302      	str	r3, [sp, #8]
    2048:	e7d2      	b.n	1ff0 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    204a:	4a0a      	ldr	r2, [pc, #40]	; (2074 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x74>)
    204c:	e7eb      	b.n	2026 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x26>
			err = nrfx_gpiote_channel_alloc(&ch);
    204e:	f10d 000f 	add.w	r0, sp, #15
    2052:	f001 fc1d 	bl	3890 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    2056:	4b04      	ldr	r3, [pc, #16]	; (2068 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x68>)
    2058:	4298      	cmp	r0, r3
    205a:	d0f2      	beq.n	2042 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x42>
				return -ENOMEM;
    205c:	f06f 000b 	mvn.w	r0, #11
    2060:	e7d4      	b.n	200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>
		return -EINVAL;
    2062:	f06f 0015 	mvn.w	r0, #21
    2066:	e7d1      	b.n	200c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0xc>
    2068:	0bad0000 	.word	0x0bad0000
    206c:	50842500 	.word	0x50842500
    2070:	0bad0004 	.word	0x0bad0004
    2074:	50842800 	.word	0x50842800

00002078 <gpio_nrfx_pin_configure>:
{
    2078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    207c:	b086      	sub	sp, #24
    207e:	460e      	mov	r6, r1
    2080:	4614      	mov	r4, r2
	return port->config;
    2082:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2086:	f898 300c 	ldrb.w	r3, [r8, #12]
    208a:	f001 051f 	and.w	r5, r1, #31
    208e:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2092:	f10d 0117 	add.w	r1, sp, #23
    2096:	4628      	mov	r0, r5
    2098:	f001 fba6 	bl	37e8 <nrfx_gpiote_channel_get>
    209c:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    209e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    20a2:	d039      	beq.n	2118 <gpio_nrfx_pin_configure+0xa0>
	nrfx_gpiote_trigger_config_t trigger_config = {
    20a4:	2100      	movs	r1, #0
    20a6:	9103      	str	r1, [sp, #12]
    20a8:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    20aa:	460b      	mov	r3, r1
    20ac:	aa03      	add	r2, sp, #12
    20ae:	4628      	mov	r0, r5
    20b0:	f001 fa92 	bl	35d8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    20b4:	4b32      	ldr	r3, [pc, #200]	; (2180 <gpio_nrfx_pin_configure+0x108>)
    20b6:	4298      	cmp	r0, r3
    20b8:	d15f      	bne.n	217a <gpio_nrfx_pin_configure+0x102>
	if (free_ch) {
    20ba:	429f      	cmp	r7, r3
    20bc:	d03c      	beq.n	2138 <gpio_nrfx_pin_configure+0xc0>
	if (flags & GPIO_OUTPUT) {
    20be:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    20c2:	d047      	beq.n	2154 <gpio_nrfx_pin_configure+0xdc>
		int rv = get_drive(flags, &drive);
    20c4:	f10d 0103 	add.w	r1, sp, #3
    20c8:	4620      	mov	r0, r4
    20ca:	f003 feeb 	bl	5ea4 <get_drive>
		if (rv != 0) {
    20ce:	4607      	mov	r7, r0
    20d0:	bb48      	cbnz	r0, 2126 <gpio_nrfx_pin_configure+0xae>
		nrfx_gpiote_output_config_t output_config = {
    20d2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    20d6:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    20da:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    20de:	bf0c      	ite	eq
    20e0:	2301      	moveq	r3, #1
    20e2:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    20e4:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    20e8:	4620      	mov	r0, r4
    20ea:	f003 ff1e 	bl	5f2a <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    20ee:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    20f2:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    20f6:	d024      	beq.n	2142 <gpio_nrfx_pin_configure+0xca>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    20f8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    20fc:	2301      	movs	r3, #1
    20fe:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    2100:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    2102:	2200      	movs	r2, #0
    2104:	a901      	add	r1, sp, #4
    2106:	4628      	mov	r0, r5
    2108:	f001 fafc 	bl	3704 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    210c:	4b1c      	ldr	r3, [pc, #112]	; (2180 <gpio_nrfx_pin_configure+0x108>)
    210e:	4298      	cmp	r0, r3
    2110:	d009      	beq.n	2126 <gpio_nrfx_pin_configure+0xae>
    2112:	f06f 0715 	mvn.w	r7, #21
    2116:	e006      	b.n	2126 <gpio_nrfx_pin_configure+0xae>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    2118:	4628      	mov	r0, r5
    211a:	f001 fc15 	bl	3948 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    211e:	4b18      	ldr	r3, [pc, #96]	; (2180 <gpio_nrfx_pin_configure+0x108>)
    2120:	429f      	cmp	r7, r3
    2122:	d004      	beq.n	212e <gpio_nrfx_pin_configure+0xb6>
		return 0;
    2124:	2700      	movs	r7, #0
}
    2126:	4638      	mov	r0, r7
    2128:	b006      	add	sp, #24
    212a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    212e:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2132:	f001 fba5 	bl	3880 <nrfx_gpiote_channel_free>
    2136:	e7f5      	b.n	2124 <gpio_nrfx_pin_configure+0xac>
		err = nrfx_gpiote_channel_free(ch);
    2138:	f89d 0017 	ldrb.w	r0, [sp, #23]
    213c:	f001 fba0 	bl	3880 <nrfx_gpiote_channel_free>
    2140:	e7bd      	b.n	20be <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2142:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    2146:	d0dc      	beq.n	2102 <gpio_nrfx_pin_configure+0x8a>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2148:	f8d8 2004 	ldr.w	r2, [r8, #4]
    214c:	2301      	movs	r3, #1
    214e:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    2150:	60d3      	str	r3, [r2, #12]
}
    2152:	e7d6      	b.n	2102 <gpio_nrfx_pin_configure+0x8a>
		.pull = get_pull(flags)
    2154:	4620      	mov	r0, r4
    2156:	f003 fee8 	bl	5f2a <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    215a:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    215e:	2300      	movs	r3, #0
    2160:	461a      	mov	r2, r3
    2162:	a902      	add	r1, sp, #8
    2164:	4628      	mov	r0, r5
    2166:	f001 fa37 	bl	35d8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    216a:	4b05      	ldr	r3, [pc, #20]	; (2180 <gpio_nrfx_pin_configure+0x108>)
    216c:	4298      	cmp	r0, r3
    216e:	d101      	bne.n	2174 <gpio_nrfx_pin_configure+0xfc>
    2170:	2700      	movs	r7, #0
    2172:	e7d8      	b.n	2126 <gpio_nrfx_pin_configure+0xae>
    2174:	f06f 0715 	mvn.w	r7, #21
    2178:	e7d5      	b.n	2126 <gpio_nrfx_pin_configure+0xae>
		return -EINVAL;
    217a:	f06f 0715 	mvn.w	r7, #21
    217e:	e7d2      	b.n	2126 <gpio_nrfx_pin_configure+0xae>
    2180:	0bad0000 	.word	0x0bad0000

00002184 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2184:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2186:	f001 fb71 	bl	386c <nrfx_gpiote_is_init>
    218a:	b108      	cbz	r0, 2190 <gpio_nrfx_init+0xc>
		return 0;
    218c:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    218e:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    2190:	f001 fb42 	bl	3818 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2194:	4b08      	ldr	r3, [pc, #32]	; (21b8 <gpio_nrfx_init+0x34>)
    2196:	4298      	cmp	r0, r3
    2198:	d10a      	bne.n	21b0 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    219a:	2100      	movs	r1, #0
    219c:	4807      	ldr	r0, [pc, #28]	; (21bc <gpio_nrfx_init+0x38>)
    219e:	f001 fb1d 	bl	37dc <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    21a2:	2200      	movs	r2, #0
    21a4:	2105      	movs	r1, #5
    21a6:	200d      	movs	r0, #13
    21a8:	f003 fbb0 	bl	590c <z_arm_irq_priority_set>
	return 0;
    21ac:	2000      	movs	r0, #0
    21ae:	e7ee      	b.n	218e <gpio_nrfx_init+0xa>
		return -EIO;
    21b0:	f06f 0004 	mvn.w	r0, #4
    21b4:	e7eb      	b.n	218e <gpio_nrfx_init+0xa>
    21b6:	bf00      	nop
    21b8:	0bad0000 	.word	0x0bad0000
    21bc:	00005fc3 	.word	0x00005fc3

000021c0 <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    21c0:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    21c2:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    21c4:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    21c8:	d06f      	beq.n	22aa <baudrate_set+0xea>
    21ca:	d83a      	bhi.n	2242 <baudrate_set+0x82>
    21cc:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    21d0:	d06e      	beq.n	22b0 <baudrate_set+0xf0>
    21d2:	d90a      	bls.n	21ea <baudrate_set+0x2a>
    21d4:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    21d8:	d075      	beq.n	22c6 <baudrate_set+0x106>
    21da:	d924      	bls.n	2226 <baudrate_set+0x66>
    21dc:	f647 2312 	movw	r3, #31250	; 0x7a12
    21e0:	4299      	cmp	r1, r3
    21e2:	d12b      	bne.n	223c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    21e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    21e8:	e013      	b.n	2212 <baudrate_set+0x52>
	switch (baudrate) {
    21ea:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    21ee:	d061      	beq.n	22b4 <baudrate_set+0xf4>
    21f0:	d907      	bls.n	2202 <baudrate_set+0x42>
    21f2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    21f6:	d063      	beq.n	22c0 <baudrate_set+0x100>
    21f8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    21fc:	d110      	bne.n	2220 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    21fe:	4b3c      	ldr	r3, [pc, #240]	; (22f0 <baudrate_set+0x130>)
    2200:	e007      	b.n	2212 <baudrate_set+0x52>
	switch (baudrate) {
    2202:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2206:	d058      	beq.n	22ba <baudrate_set+0xfa>
    2208:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    220c:	d105      	bne.n	221a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    220e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2212:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    2216:	2000      	movs	r0, #0
    2218:	4770      	bx	lr
	switch (baudrate) {
    221a:	f06f 0015 	mvn.w	r0, #21
    221e:	4770      	bx	lr
    2220:	f06f 0015 	mvn.w	r0, #21
    2224:	4770      	bx	lr
    2226:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    222a:	d04e      	beq.n	22ca <baudrate_set+0x10a>
    222c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2230:	d101      	bne.n	2236 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2232:	4b30      	ldr	r3, [pc, #192]	; (22f4 <baudrate_set+0x134>)
    2234:	e7ed      	b.n	2212 <baudrate_set+0x52>
	switch (baudrate) {
    2236:	f06f 0015 	mvn.w	r0, #21
    223a:	4770      	bx	lr
    223c:	f06f 0015 	mvn.w	r0, #21
    2240:	4770      	bx	lr
    2242:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    2246:	d042      	beq.n	22ce <baudrate_set+0x10e>
    2248:	d909      	bls.n	225e <baudrate_set+0x9e>
    224a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    224e:	d046      	beq.n	22de <baudrate_set+0x11e>
    2250:	d91f      	bls.n	2292 <baudrate_set+0xd2>
    2252:	4b29      	ldr	r3, [pc, #164]	; (22f8 <baudrate_set+0x138>)
    2254:	4299      	cmp	r1, r3
    2256:	d148      	bne.n	22ea <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    2258:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    225c:	e7d9      	b.n	2212 <baudrate_set+0x52>
	switch (baudrate) {
    225e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    2262:	d037      	beq.n	22d4 <baudrate_set+0x114>
    2264:	d905      	bls.n	2272 <baudrate_set+0xb2>
    2266:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    226a:	d10f      	bne.n	228c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    226c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2270:	e7cf      	b.n	2212 <baudrate_set+0x52>
	switch (baudrate) {
    2272:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    2276:	4299      	cmp	r1, r3
    2278:	d02e      	beq.n	22d8 <baudrate_set+0x118>
    227a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    227e:	d102      	bne.n	2286 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2280:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2284:	e7c5      	b.n	2212 <baudrate_set+0x52>
	switch (baudrate) {
    2286:	f06f 0015 	mvn.w	r0, #21
    228a:	4770      	bx	lr
    228c:	f06f 0015 	mvn.w	r0, #21
    2290:	4770      	bx	lr
    2292:	4b1a      	ldr	r3, [pc, #104]	; (22fc <baudrate_set+0x13c>)
    2294:	4299      	cmp	r1, r3
    2296:	d025      	beq.n	22e4 <baudrate_set+0x124>
    2298:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    229c:	d102      	bne.n	22a4 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    229e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    22a2:	e7b6      	b.n	2212 <baudrate_set+0x52>
	switch (baudrate) {
    22a4:	f06f 0015 	mvn.w	r0, #21
    22a8:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    22aa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    22ae:	e7b0      	b.n	2212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    22b0:	4b13      	ldr	r3, [pc, #76]	; (2300 <baudrate_set+0x140>)
    22b2:	e7ae      	b.n	2212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    22b4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    22b8:	e7ab      	b.n	2212 <baudrate_set+0x52>
	switch (baudrate) {
    22ba:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    22be:	e7a8      	b.n	2212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    22c0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    22c4:	e7a5      	b.n	2212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    22c6:	4b0f      	ldr	r3, [pc, #60]	; (2304 <baudrate_set+0x144>)
    22c8:	e7a3      	b.n	2212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    22ca:	4b0f      	ldr	r3, [pc, #60]	; (2308 <baudrate_set+0x148>)
    22cc:	e7a1      	b.n	2212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    22ce:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    22d2:	e79e      	b.n	2212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    22d4:	4b0d      	ldr	r3, [pc, #52]	; (230c <baudrate_set+0x14c>)
    22d6:	e79c      	b.n	2212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    22d8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    22dc:	e799      	b.n	2212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    22de:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    22e2:	e796      	b.n	2212 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    22e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    22e8:	e793      	b.n	2212 <baudrate_set+0x52>
	switch (baudrate) {
    22ea:	f06f 0015 	mvn.w	r0, #21
}
    22ee:	4770      	bx	lr
    22f0:	0013b000 	.word	0x0013b000
    22f4:	004ea000 	.word	0x004ea000
    22f8:	000f4240 	.word	0x000f4240
    22fc:	0003d090 	.word	0x0003d090
    2300:	00275000 	.word	0x00275000
    2304:	0075c000 	.word	0x0075c000
    2308:	003af000 	.word	0x003af000
    230c:	013a9000 	.word	0x013a9000

00002310 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2312:	4605      	mov	r5, r0
    2314:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    2316:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2318:	f004 fed7 	bl	70ca <k_is_in_isr>
    231c:	b910      	cbnz	r0, 2324 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    231e:	4b1a      	ldr	r3, [pc, #104]	; (2388 <uarte_nrfx_poll_out+0x78>)
    2320:	781b      	ldrb	r3, [r3, #0]
    2322:	b983      	cbnz	r3, 2346 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2324:	f04f 0320 	mov.w	r3, #32
    2328:	f3ef 8411 	mrs	r4, BASEPRI
    232c:	f383 8812 	msr	BASEPRI_MAX, r3
    2330:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2334:	4628      	mov	r0, r5
    2336:	f003 fede 	bl	60f6 <is_tx_ready>
    233a:	b948      	cbnz	r0, 2350 <uarte_nrfx_poll_out+0x40>
	__asm__ volatile(
    233c:	f384 8811 	msr	BASEPRI, r4
    2340:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2344:	e7ee      	b.n	2324 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    2346:	4628      	mov	r0, r5
    2348:	f003 ffeb 	bl	6322 <wait_tx_ready>
    234c:	4604      	mov	r4, r0
    234e:	e007      	b.n	2360 <uarte_nrfx_poll_out+0x50>
				if (data->async && data->async->tx_size &&
    2350:	68fb      	ldr	r3, [r7, #12]
    2352:	b12b      	cbz	r3, 2360 <uarte_nrfx_poll_out+0x50>
    2354:	68da      	ldr	r2, [r3, #12]
    2356:	b11a      	cbz	r2, 2360 <uarte_nrfx_poll_out+0x50>
					data->async->tx_amount < 0) {
    2358:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
				if (data->async && data->async->tx_size &&
    235c:	2a00      	cmp	r2, #0
    235e:	db0b      	blt.n	2378 <uarte_nrfx_poll_out+0x68>
	}

	*data->char_out = c;
    2360:	697b      	ldr	r3, [r7, #20]
    2362:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    2364:	2201      	movs	r2, #1
    2366:	6979      	ldr	r1, [r7, #20]
    2368:	4628      	mov	r0, r5
    236a:	f003 fee6 	bl	613a <tx_start>
	__asm__ volatile(
    236e:	f384 8811 	msr	BASEPRI, r4
    2372:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    2376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	const struct uarte_nrfx_config *config = dev->config;
    2378:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    237a:	6812      	ldr	r2, [r2, #0]
    p_reg->TXD.MAXCNT = length;
}

NRF_STATIC_INLINE uint32_t nrf_uarte_tx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->TXD.AMOUNT;
    237c:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    2380:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    2384:	e7ec      	b.n	2360 <uarte_nrfx_poll_out+0x50>
    2386:	bf00      	nop
    2388:	20000cc3 	.word	0x20000cc3

0000238c <uarte_nrfx_rx_enable>:
{
    238c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2390:	4616      	mov	r6, r2
	struct uarte_nrfx_data *data = dev->data;
    2392:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *cfg = dev->config;
    2394:	f8d0 9004 	ldr.w	r9, [r0, #4]
	return config->uarte_regs;
    2398:	f8d9 5000 	ldr.w	r5, [r9]
	if (cfg->disable_rx) {
    239c:	f899 2008 	ldrb.w	r2, [r9, #8]
    23a0:	2a00      	cmp	r2, #0
    23a2:	d176      	bne.n	2492 <uarte_nrfx_rx_enable+0x106>
    23a4:	4607      	mov	r7, r0
    23a6:	4688      	mov	r8, r1
	if (data->async->rx_enabled) {
    23a8:	68e2      	ldr	r2, [r4, #12]
    23aa:	f892 10ca 	ldrb.w	r1, [r2, #202]	; 0xca
    23ae:	2900      	cmp	r1, #0
    23b0:	d172      	bne.n	2498 <uarte_nrfx_rx_enable+0x10c>
	data->async->rx_timeout = timeout;
    23b2:	6753      	str	r3, [r2, #116]	; 0x74
		MAX(timeout / RX_TIMEOUT_DIV,
    23b4:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
    23b8:	dd06      	ble.n	23c8 <uarte_nrfx_rx_enable+0x3c>
    23ba:	4a39      	ldr	r2, [pc, #228]	; (24a0 <uarte_nrfx_rx_enable+0x114>)
    23bc:	fb82 1203 	smull	r1, r2, r2, r3
    23c0:	17db      	asrs	r3, r3, #31
    23c2:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    23c6:	e000      	b.n	23ca <uarte_nrfx_rx_enable+0x3e>
    23c8:	235c      	movs	r3, #92	; 0x5c
	data->async->rx_timeout_slab =
    23ca:	68e2      	ldr	r2, [r4, #12]
    23cc:	6793      	str	r3, [r2, #120]	; 0x78
	data->async->rx_buf = buf;
    23ce:	68e3      	ldr	r3, [r4, #12]
    23d0:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
	data->async->rx_buf_len = len;
    23d4:	68e3      	ldr	r3, [r4, #12]
    23d6:	65de      	str	r6, [r3, #92]	; 0x5c
	data->async->rx_offset = 0;
    23d8:	68e2      	ldr	r2, [r4, #12]
    23da:	2300      	movs	r3, #0
    23dc:	6613      	str	r3, [r2, #96]	; 0x60
	data->async->rx_next_buf = NULL;
    23de:	68e2      	ldr	r2, [r4, #12]
    23e0:	6653      	str	r3, [r2, #100]	; 0x64
	data->async->rx_next_buf_len = 0;
    23e2:	68e2      	ldr	r2, [r4, #12]
    23e4:	6693      	str	r3, [r2, #104]	; 0x68
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    23e6:	f8d9 3004 	ldr.w	r3, [r9, #4]
    23ea:	f013 0f10 	tst.w	r3, #16
    23ee:	d003      	beq.n	23f8 <uarte_nrfx_rx_enable+0x6c>
		if (data->async->rx_flush_cnt) {
    23f0:	68e1      	ldr	r1, [r4, #12]
    23f2:	f891 20c9 	ldrb.w	r2, [r1, #201]	; 0xc9
    23f6:	b9d2      	cbnz	r2, 242e <uarte_nrfx_rx_enable+0xa2>

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    23f8:	f8c5 8534 	str.w	r8, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    23fc:	f8c5 6538 	str.w	r6, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2400:	2300      	movs	r3, #0
    2402:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    2406:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    240a:	f8c5 314c 	str.w	r3, [r5, #332]	; 0x14c
    240e:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	data->async->rx_enabled = true;
    2412:	68e3      	ldr	r3, [r4, #12]
    2414:	2201      	movs	r2, #1
    2416:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    241a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    241e:	f013 0f10 	tst.w	r3, #16
    2422:	d125      	bne.n	2470 <uarte_nrfx_rx_enable+0xe4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2424:	2301      	movs	r3, #1
    2426:	602b      	str	r3, [r5, #0]
	return 0;
    2428:	2000      	movs	r0, #0
}
    242a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    242e:	42b2      	cmp	r2, r6
    2430:	bf28      	it	cs
    2432:	4632      	movcs	r2, r6
    2434:	4692      	mov	sl, r2
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
    2436:	31c4      	adds	r1, #196	; 0xc4
    2438:	4640      	mov	r0, r8
    243a:	f003 fb49 	bl	5ad0 <memcpy>
			buf += cpy_len;
    243e:	44d0      	add	r8, sl
			if (!len) {
    2440:	ebb6 060a 	subs.w	r6, r6, sl
    2444:	d1d8      	bne.n	23f8 <uarte_nrfx_rx_enable+0x6c>
				data->async->rx_flush_cnt -= cpy_len;
    2446:	68e2      	ldr	r2, [r4, #12]
    2448:	f892 30c9 	ldrb.w	r3, [r2, #201]	; 0xc9
    244c:	eba3 030a 	sub.w	r3, r3, sl
    2450:	f882 30c9 	strb.w	r3, [r2, #201]	; 0xc9
				notify_uart_rx_rdy(dev, cpy_len);
    2454:	4651      	mov	r1, sl
    2456:	4638      	mov	r0, r7
    2458:	f003 febe 	bl	61d8 <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    245c:	68e1      	ldr	r1, [r4, #12]
    245e:	3158      	adds	r1, #88	; 0x58
    2460:	4638      	mov	r0, r7
    2462:	f003 fed1 	bl	6208 <rx_buf_release>
				notify_rx_disable(dev);
    2466:	4638      	mov	r0, r7
    2468:	f003 fee5 	bl	6236 <notify_rx_disable>
				return 0;
    246c:	2000      	movs	r0, #0
    246e:	e7dc      	b.n	242a <uarte_nrfx_rx_enable+0x9e>
	__asm__ volatile(
    2470:	f04f 0320 	mov.w	r3, #32
    2474:	f3ef 8411 	mrs	r4, BASEPRI
    2478:	f383 8812 	msr	BASEPRI_MAX, r3
    247c:	f3bf 8f6f 	isb	sy
		uarte_enable(dev, UARTE_LOW_POWER_RX);
    2480:	2102      	movs	r1, #2
    2482:	4638      	mov	r0, r7
    2484:	f003 fe4b 	bl	611e <uarte_enable>
	__asm__ volatile(
    2488:	f384 8811 	msr	BASEPRI, r4
    248c:	f3bf 8f6f 	isb	sy
}
    2490:	e7c8      	b.n	2424 <uarte_nrfx_rx_enable+0x98>
		return -ENOTSUP;
    2492:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2496:	e7c8      	b.n	242a <uarte_nrfx_rx_enable+0x9e>
		return -EBUSY;
    2498:	f06f 000f 	mvn.w	r0, #15
    249c:	e7c5      	b.n	242a <uarte_nrfx_rx_enable+0x9e>
    249e:	bf00      	nop
    24a0:	66666667 	.word	0x66666667

000024a4 <uarte_nrfx_tx>:
{
    24a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24a6:	b083      	sub	sp, #12
    24a8:	4605      	mov	r5, r0
    24aa:	461e      	mov	r6, r3
	struct uarte_nrfx_data *data = dev->data;
    24ac:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    24ae:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    24b0:	f8d3 c000 	ldr.w	ip, [r3]
	__asm__ volatile(
    24b4:	f04f 0020 	mov.w	r0, #32
    24b8:	f3ef 8311 	mrs	r3, BASEPRI
    24bc:	f380 8812 	msr	BASEPRI_MAX, r0
    24c0:	f3bf 8f6f 	isb	sy
    24c4:	461f      	mov	r7, r3
	if (data->async->tx_size) {
    24c6:	68e3      	ldr	r3, [r4, #12]
    24c8:	68d8      	ldr	r0, [r3, #12]
    24ca:	b9e8      	cbnz	r0, 2508 <uarte_nrfx_tx+0x64>
	data->async->tx_size = len;
    24cc:	60da      	str	r2, [r3, #12]
	data->async->tx_buf = buf;
    24ce:	68e3      	ldr	r3, [r4, #12]
    24d0:	6099      	str	r1, [r3, #8]
    p_reg->INTENSET = mask;
    24d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    24d6:	f8cc 3304 	str.w	r3, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    24da:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    24de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    24e2:	d118      	bne.n	2516 <uarte_nrfx_tx+0x72>
		data->async->xfer_buf = buf;
    24e4:	68e3      	ldr	r3, [r4, #12]
    24e6:	6119      	str	r1, [r3, #16]
		data->async->xfer_len = len;
    24e8:	68e3      	ldr	r3, [r4, #12]
    24ea:	615a      	str	r2, [r3, #20]
	start_tx_locked(dev, data);
    24ec:	4621      	mov	r1, r4
    24ee:	4628      	mov	r0, r5
    24f0:	f003 fe4f 	bl	6192 <start_tx_locked>
	__asm__ volatile(
    24f4:	f387 8811 	msr	BASEPRI, r7
    24f8:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    24fc:	7ae3      	ldrb	r3, [r4, #11]
    24fe:	2b01      	cmp	r3, #1
    2500:	d010      	beq.n	2524 <uarte_nrfx_tx+0x80>
	return 0;
    2502:	2000      	movs	r0, #0
}
    2504:	b003      	add	sp, #12
    2506:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2508:	f387 8811 	msr	BASEPRI, r7
    250c:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    2510:	f06f 000f 	mvn.w	r0, #15
    2514:	e7f6      	b.n	2504 <uarte_nrfx_tx+0x60>
		data->async->tx_cache_offset = 0;
    2516:	68e3      	ldr	r3, [r4, #12]
    2518:	2200      	movs	r2, #0
    251a:	61da      	str	r2, [r3, #28]
		(void)setup_tx_cache(data);
    251c:	4620      	mov	r0, r4
    251e:	f004 f83a 	bl	6596 <setup_tx_cache>
    2522:	e7e3      	b.n	24ec <uarte_nrfx_tx+0x48>
	    && timeout != SYS_FOREVER_US) {
    2524:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    2528:	d101      	bne.n	252e <uarte_nrfx_tx+0x8a>
	return 0;
    252a:	2000      	movs	r0, #0
    252c:	e7ea      	b.n	2504 <uarte_nrfx_tx+0x60>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    252e:	68e4      	ldr	r4, [r4, #12]
    2530:	3420      	adds	r4, #32
    2532:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    2536:	17f1      	asrs	r1, r6, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2538:	03c9      	lsls	r1, r1, #15
    253a:	ea41 4156 	orr.w	r1, r1, r6, lsr #17
    253e:	03f6      	lsls	r6, r6, #15
    2540:	4809      	ldr	r0, [pc, #36]	; (2568 <uarte_nrfx_tx+0xc4>)
    2542:	1830      	adds	r0, r6, r0
    2544:	4a09      	ldr	r2, [pc, #36]	; (256c <uarte_nrfx_tx+0xc8>)
    2546:	f04f 0300 	mov.w	r3, #0
    254a:	f141 0100 	adc.w	r1, r1, #0
    254e:	f7fd fe01 	bl	154 <__aeabi_uldivmod>
    2552:	4602      	mov	r2, r0
    2554:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    2556:	2000      	movs	r0, #0
    2558:	2100      	movs	r1, #0
    255a:	e9cd 0100 	strd	r0, r1, [sp]
    255e:	4620      	mov	r0, r4
    2560:	f002 fb78 	bl	4c54 <z_impl_k_timer_start>
	return 0;
    2564:	2000      	movs	r0, #0
    2566:	e7cd      	b.n	2504 <uarte_nrfx_tx+0x60>
    2568:	000f423f 	.word	0x000f423f
    256c:	000f4240 	.word	0x000f4240

00002570 <rxstarted_isr>:
{
    2570:	b510      	push	{r4, lr}
    2572:	b088      	sub	sp, #32
	struct uarte_nrfx_data *data = dev->data;
    2574:	6904      	ldr	r4, [r0, #16]
	struct uart_event evt = {
    2576:	2300      	movs	r3, #0
    2578:	9303      	str	r3, [sp, #12]
    257a:	9304      	str	r3, [sp, #16]
    257c:	9305      	str	r3, [sp, #20]
    257e:	9306      	str	r3, [sp, #24]
    2580:	9307      	str	r3, [sp, #28]
    2582:	2303      	movs	r3, #3
    2584:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    2588:	a903      	add	r1, sp, #12
    258a:	f003 fe1d 	bl	61c8 <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    258e:	68e3      	ldr	r3, [r4, #12]
    2590:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    2592:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    2596:	d101      	bne.n	259c <rxstarted_isr+0x2c>
}
    2598:	b008      	add	sp, #32
    259a:	bd10      	pop	{r4, pc}
		data->async->rx_timeout_left = data->async->rx_timeout;
    259c:	67da      	str	r2, [r3, #124]	; 0x7c
		k_timer_start(&data->async->rx_timeout_timer,
    259e:	68e3      	ldr	r3, [r4, #12]
    25a0:	f103 0480 	add.w	r4, r3, #128	; 0x80
			      K_USEC(data->async->rx_timeout_slab),
    25a4:	6f98      	ldr	r0, [r3, #120]	; 0x78
    25a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    25aa:	17c1      	asrs	r1, r0, #31
    25ac:	03c9      	lsls	r1, r1, #15
    25ae:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    25b2:	03c0      	lsls	r0, r0, #15
    25b4:	4b08      	ldr	r3, [pc, #32]	; (25d8 <rxstarted_isr+0x68>)
    25b6:	18c0      	adds	r0, r0, r3
    25b8:	4a08      	ldr	r2, [pc, #32]	; (25dc <rxstarted_isr+0x6c>)
    25ba:	f04f 0300 	mov.w	r3, #0
    25be:	f141 0100 	adc.w	r1, r1, #0
    25c2:	f7fd fdc7 	bl	154 <__aeabi_uldivmod>
    25c6:	4602      	mov	r2, r0
    25c8:	460b      	mov	r3, r1
    25ca:	9000      	str	r0, [sp, #0]
    25cc:	9101      	str	r1, [sp, #4]
    25ce:	4620      	mov	r0, r4
    25d0:	f002 fb40 	bl	4c54 <z_impl_k_timer_start>
}
    25d4:	e7e0      	b.n	2598 <rxstarted_isr+0x28>
    25d6:	bf00      	nop
    25d8:	000f423f 	.word	0x000f423f
    25dc:	000f4240 	.word	0x000f4240

000025e0 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    25e0:	b538      	push	{r3, r4, r5, lr}
    25e2:	4605      	mov	r5, r0
    25e4:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    25e6:	f101 001c 	add.w	r0, r1, #28
    25ea:	f000 fd7f 	bl	30ec <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    25ee:	4b0a      	ldr	r3, [pc, #40]	; (2618 <endtx_stoptx_ppi_init+0x38>)
    25f0:	4298      	cmp	r0, r3
    25f2:	d10e      	bne.n	2612 <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    25f4:	7f23      	ldrb	r3, [r4, #28]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    25f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    25fa:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    25fe:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2602:	7f22      	ldrb	r2, [r4, #28]
    2604:	2301      	movs	r3, #1
    2606:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    2608:	4a04      	ldr	r2, [pc, #16]	; (261c <endtx_stoptx_ppi_init+0x3c>)
    260a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    260e:	2000      	movs	r0, #0
}
    2610:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    2612:	f06f 0004 	mvn.w	r0, #4
    2616:	e7fb      	b.n	2610 <endtx_stoptx_ppi_init+0x30>
    2618:	0bad0000 	.word	0x0bad0000
    261c:	50017000 	.word	0x50017000

00002620 <uarte_nrfx_init>:
{
    2620:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    2622:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    2624:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    2626:	681c      	ldr	r4, [r3, #0]
	int ret = uarte_nrfx_rx_counting_init(dev);
    2628:	f003 fdac 	bl	6184 <uarte_nrfx_rx_counting_init>
	if (ret != 0) {
    262c:	4606      	mov	r6, r0
    262e:	bb90      	cbnz	r0, 2696 <uarte_nrfx_init+0x76>
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    2630:	68eb      	ldr	r3, [r5, #12]
    2632:	2201      	movs	r2, #1
    2634:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    2638:	4b18      	ldr	r3, [pc, #96]	; (269c <uarte_nrfx_init+0x7c>)
    263a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    263e:	2308      	movs	r3, #8
    2640:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2644:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    2648:	b1a3      	cbz	r3, 2674 <uarte_nrfx_init+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    264a:	6062      	str	r2, [r4, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    264c:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    2650:	b91b      	cbnz	r3, 265a <uarte_nrfx_init+0x3a>
    2652:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    2656:	2b00      	cmp	r3, #0
    2658:	d0f8      	beq.n	264c <uarte_nrfx_init+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    265a:	2300      	movs	r3, #0
    265c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    2660:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    2664:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2668:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    266c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    2670:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    2674:	68e8      	ldr	r0, [r5, #12]
    2676:	2200      	movs	r2, #0
    2678:	4909      	ldr	r1, [pc, #36]	; (26a0 <uarte_nrfx_init+0x80>)
    267a:	3080      	adds	r0, #128	; 0x80
    267c:	f004 ff25 	bl	74ca <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    2680:	68eb      	ldr	r3, [r5, #12]
	timer->user_data = user_data;
    2682:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    2686:	68e8      	ldr	r0, [r5, #12]
    2688:	2200      	movs	r2, #0
    268a:	4906      	ldr	r1, [pc, #24]	; (26a4 <uarte_nrfx_init+0x84>)
    268c:	3020      	adds	r0, #32
    268e:	f004 ff1c 	bl	74ca <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    2692:	68eb      	ldr	r3, [r5, #12]
    2694:	655d      	str	r5, [r3, #84]	; 0x54
}
    2696:	4630      	mov	r0, r6
    2698:	bd70      	pop	{r4, r5, r6, pc}
    269a:	bf00      	nop
    269c:	000a0210 	.word	0x000a0210
    26a0:	00006445 	.word	0x00006445
    26a4:	00006439 	.word	0x00006439

000026a8 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    26a8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    26ac:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    26b0:	4b01      	ldr	r3, [pc, #4]	; (26b8 <set_comparator+0x10>)
    26b2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    26b6:	4770      	bx	lr
    26b8:	50015000 	.word	0x50015000

000026bc <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    26bc:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    26c0:	4b01      	ldr	r3, [pc, #4]	; (26c8 <get_comparator+0xc>)
    26c2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    26c6:	4770      	bx	lr
    26c8:	50015000 	.word	0x50015000

000026cc <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    26cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    26d0:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    26d2:	4a02      	ldr	r2, [pc, #8]	; (26dc <event_enable+0x10>)
    26d4:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    26d8:	4770      	bx	lr
    26da:	bf00      	nop
    26dc:	50015000 	.word	0x50015000

000026e0 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    26e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    26e4:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    26e6:	4a02      	ldr	r2, [pc, #8]	; (26f0 <event_disable+0x10>)
    26e8:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    26ec:	4770      	bx	lr
    26ee:	bf00      	nop
    26f0:	50015000 	.word	0x50015000

000026f4 <counter>:
     return p_reg->COUNTER;
    26f4:	4b01      	ldr	r3, [pc, #4]	; (26fc <counter+0x8>)
    26f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    26fa:	4770      	bx	lr
    26fc:	50015000 	.word	0x50015000

00002700 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2700:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    2702:	2301      	movs	r3, #1
    2704:	4083      	lsls	r3, r0
    2706:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    270a:	4a0c      	ldr	r2, [pc, #48]	; (273c <compare_int_lock+0x3c>)
    270c:	e8d2 1fef 	ldaex	r1, [r2]
    2710:	ea01 0e0c 	and.w	lr, r1, ip
    2714:	e8c2 efe4 	stlex	r4, lr, [r2]
    2718:	2c00      	cmp	r4, #0
    271a:	d1f7      	bne.n	270c <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    271c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2720:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    2722:	4807      	ldr	r0, [pc, #28]	; (2740 <compare_int_lock+0x40>)
    2724:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    2728:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    272c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2730:	420b      	tst	r3, r1
}
    2732:	bf14      	ite	ne
    2734:	2001      	movne	r0, #1
    2736:	2000      	moveq	r0, #0
    2738:	bd10      	pop	{r4, pc}
    273a:	bf00      	nop
    273c:	20000a9c 	.word	0x20000a9c
    2740:	50015000 	.word	0x50015000

00002744 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    2744:	b538      	push	{r3, r4, r5, lr}
    2746:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    2748:	f004 f94c 	bl	69e4 <full_int_lock>
    274c:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    274e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2752:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    2754:	4a14      	ldr	r2, [pc, #80]	; (27a8 <channel_processing_check_and_clear+0x64>)
    2756:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    275a:	4213      	tst	r3, r2
    275c:	d105      	bne.n	276a <channel_processing_check_and_clear+0x26>
	bool result = false;
    275e:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    2760:	4628      	mov	r0, r5
    2762:	f004 f948 	bl	69f6 <full_int_unlock>

	return result;
}
    2766:	4620      	mov	r0, r4
    2768:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    276a:	2301      	movs	r3, #1
    276c:	40a3      	lsls	r3, r4
    276e:	43db      	mvns	r3, r3
    2770:	4a0e      	ldr	r2, [pc, #56]	; (27ac <channel_processing_check_and_clear+0x68>)
    2772:	e8d2 1fef 	ldaex	r1, [r2]
    2776:	ea01 0003 	and.w	r0, r1, r3
    277a:	e8c2 0fec 	stlex	ip, r0, [r2]
    277e:	f1bc 0f00 	cmp.w	ip, #0
    2782:	d1f6      	bne.n	2772 <channel_processing_check_and_clear+0x2e>
    2784:	b949      	cbnz	r1, 279a <channel_processing_check_and_clear+0x56>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2786:	f104 0350 	add.w	r3, r4, #80	; 0x50
    278a:	009b      	lsls	r3, r3, #2
    278c:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    278e:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    2792:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2796:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2798:	b123      	cbz	r3, 27a4 <channel_processing_check_and_clear+0x60>
			event_clear(chan);
    279a:	4620      	mov	r0, r4
    279c:	f004 f913 	bl	69c6 <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    27a0:	2401      	movs	r4, #1
    27a2:	e7dd      	b.n	2760 <channel_processing_check_and_clear+0x1c>
    27a4:	2400      	movs	r4, #0
    27a6:	e7db      	b.n	2760 <channel_processing_check_and_clear+0x1c>
    27a8:	50015000 	.word	0x50015000
    27ac:	20000a98 	.word	0x20000a98

000027b0 <compare_int_unlock>:
	if (key) {
    27b0:	b901      	cbnz	r1, 27b4 <compare_int_unlock+0x4>
}
    27b2:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    27b4:	2301      	movs	r3, #1
    27b6:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    27b8:	4a0d      	ldr	r2, [pc, #52]	; (27f0 <compare_int_unlock+0x40>)
    27ba:	e8d2 cfef 	ldaex	ip, [r2]
    27be:	ea4c 0c03 	orr.w	ip, ip, r3
    27c2:	e8c2 cfe1 	stlex	r1, ip, [r2]
    27c6:	2900      	cmp	r1, #0
    27c8:	d1f7      	bne.n	27ba <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    27ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    27ce:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    27d0:	4a08      	ldr	r2, [pc, #32]	; (27f4 <compare_int_unlock+0x44>)
    27d2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    27d6:	4b08      	ldr	r3, [pc, #32]	; (27f8 <compare_int_unlock+0x48>)
    27d8:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    27dc:	40c3      	lsrs	r3, r0
    27de:	f013 0f01 	tst.w	r3, #1
    27e2:	d0e6      	beq.n	27b2 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    27e4:	4b05      	ldr	r3, [pc, #20]	; (27fc <compare_int_unlock+0x4c>)
    27e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    27ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    27ee:	e7e0      	b.n	27b2 <compare_int_unlock+0x2>
    27f0:	20000a9c 	.word	0x20000a9c
    27f4:	50015000 	.word	0x50015000
    27f8:	20000a98 	.word	0x20000a98
    27fc:	e000e100 	.word	0xe000e100

00002800 <sys_clock_timeout_handler>:
{
    2800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2804:	4607      	mov	r7, r0
    2806:	4614      	mov	r4, r2
    2808:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    280a:	4610      	mov	r0, r2
    280c:	4619      	mov	r1, r3
    280e:	f004 f8e6 	bl	69de <absolute_time_to_cc>
    2812:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2814:	4b15      	ldr	r3, [pc, #84]	; (286c <sys_clock_timeout_handler+0x6c>)
    2816:	681a      	ldr	r2, [r3, #0]
    2818:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    281a:	601c      	str	r4, [r3, #0]
    281c:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    281e:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    2822:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2826:	d309      	bcc.n	283c <sys_clock_timeout_handler+0x3c>
	return false;
    2828:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    282a:	f002 f923 	bl	4a74 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    282e:	4638      	mov	r0, r7
    2830:	f7ff ff44 	bl	26bc <get_comparator>
    2834:	42a8      	cmp	r0, r5
    2836:	d00e      	beq.n	2856 <sys_clock_timeout_handler+0x56>
}
    2838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    283c:	4b0c      	ldr	r3, [pc, #48]	; (2870 <sys_clock_timeout_handler+0x70>)
    283e:	681b      	ldr	r3, [r3, #0]
    2840:	0a1a      	lsrs	r2, r3, #8
    2842:	061b      	lsls	r3, r3, #24
    2844:	eb15 0803 	adds.w	r8, r5, r3
    2848:	f142 0900 	adc.w	r9, r2, #0
    284c:	4b09      	ldr	r3, [pc, #36]	; (2874 <sys_clock_timeout_handler+0x74>)
    284e:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    2852:	2401      	movs	r4, #1
    2854:	e7e9      	b.n	282a <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    2856:	b11c      	cbz	r4, 2860 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    2858:	4638      	mov	r0, r7
    285a:	f7ff ff37 	bl	26cc <event_enable>
}
    285e:	e7eb      	b.n	2838 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    2860:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    2864:	4638      	mov	r0, r7
    2866:	f7ff ff1f 	bl	26a8 <set_comparator>
    286a:	e7f5      	b.n	2858 <sys_clock_timeout_handler+0x58>
    286c:	200002e8 	.word	0x200002e8
    2870:	20000aa0 	.word	0x20000aa0
    2874:	200002f0 	.word	0x200002f0

00002878 <z_nrf_rtc_timer_read>:
{
    2878:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    287a:	4b0d      	ldr	r3, [pc, #52]	; (28b0 <z_nrf_rtc_timer_read+0x38>)
    287c:	681c      	ldr	r4, [r3, #0]
    287e:	0a25      	lsrs	r5, r4, #8
    2880:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    2882:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    2886:	f7ff ff35 	bl	26f4 <counter>
    288a:	4603      	mov	r3, r0
	val += cntr;
    288c:	1900      	adds	r0, r0, r4
    288e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    2892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2896:	d20a      	bcs.n	28ae <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    2898:	4b06      	ldr	r3, [pc, #24]	; (28b4 <z_nrf_rtc_timer_read+0x3c>)
    289a:	e9d3 2300 	ldrd	r2, r3, [r3]
    289e:	4290      	cmp	r0, r2
    28a0:	eb71 0303 	sbcs.w	r3, r1, r3
    28a4:	d203      	bcs.n	28ae <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    28a6:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    28aa:	f141 0100 	adc.w	r1, r1, #0
}
    28ae:	bd38      	pop	{r3, r4, r5, pc}
    28b0:	20000aa0 	.word	0x20000aa0
    28b4:	200002f0 	.word	0x200002f0

000028b8 <compare_set_nolocks>:
{
    28b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28ba:	4606      	mov	r6, r0
    28bc:	4614      	mov	r4, r2
    28be:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    28c0:	4610      	mov	r0, r2
    28c2:	4619      	mov	r1, r3
    28c4:	f004 f88b 	bl	69de <absolute_time_to_cc>
    28c8:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    28ca:	f7ff ffd5 	bl	2878 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    28ce:	42a0      	cmp	r0, r4
    28d0:	eb71 0305 	sbcs.w	r3, r1, r5
    28d4:	d21d      	bcs.n	2912 <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    28d6:	1a20      	subs	r0, r4, r0
    28d8:	eb65 0101 	sbc.w	r1, r5, r1
    28dc:	4b19      	ldr	r3, [pc, #100]	; (2944 <compare_set_nolocks+0x8c>)
    28de:	4298      	cmp	r0, r3
    28e0:	f171 0100 	sbcs.w	r1, r1, #0
    28e4:	d22b      	bcs.n	293e <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
    28e6:	4b18      	ldr	r3, [pc, #96]	; (2948 <compare_set_nolocks+0x90>)
    28e8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    28ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    28f0:	42ab      	cmp	r3, r5
    28f2:	bf08      	it	eq
    28f4:	42a2      	cmpeq	r2, r4
    28f6:	d016      	beq.n	2926 <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    28f8:	4639      	mov	r1, r7
    28fa:	4630      	mov	r0, r6
    28fc:	f004 f880 	bl	6a00 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    2900:	4639      	mov	r1, r7
    2902:	f004 f85c 	bl	69be <counter_sub>
    2906:	1900      	adds	r0, r0, r4
    2908:	f145 0300 	adc.w	r3, r5, #0
    290c:	4604      	mov	r4, r0
    290e:	461d      	mov	r5, r3
    2910:	e009      	b.n	2926 <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
    2912:	2301      	movs	r3, #1
    2914:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2916:	4a0d      	ldr	r2, [pc, #52]	; (294c <compare_set_nolocks+0x94>)
    2918:	e8d2 0fef 	ldaex	r0, [r2]
    291c:	4318      	orrs	r0, r3
    291e:	e8c2 0fe1 	stlex	r1, r0, [r2]
    2922:	2900      	cmp	r1, #0
    2924:	d1f8      	bne.n	2918 <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
    2926:	4b08      	ldr	r3, [pc, #32]	; (2948 <compare_set_nolocks+0x90>)
    2928:	0132      	lsls	r2, r6, #4
    292a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    292e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    2932:	9906      	ldr	r1, [sp, #24]
    2934:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    2936:	9b07      	ldr	r3, [sp, #28]
    2938:	6073      	str	r3, [r6, #4]
	return ret;
    293a:	2000      	movs	r0, #0
}
    293c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    293e:	f06f 0015 	mvn.w	r0, #21
    2942:	e7fb      	b.n	293c <compare_set_nolocks+0x84>
    2944:	01000001 	.word	0x01000001
    2948:	200002d8 	.word	0x200002d8
    294c:	20000a98 	.word	0x20000a98

00002950 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2950:	b530      	push	{r4, r5, lr}
    2952:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    2954:	2300      	movs	r3, #0
    2956:	4a1d      	ldr	r2, [pc, #116]	; (29cc <sys_clock_driver_init+0x7c>)
    2958:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    295c:	2b00      	cmp	r3, #0
    295e:	dd24      	ble.n	29aa <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    2960:	4c1a      	ldr	r4, [pc, #104]	; (29cc <sys_clock_driver_init+0x7c>)
    2962:	2502      	movs	r5, #2
    2964:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2968:	4b19      	ldr	r3, [pc, #100]	; (29d0 <sys_clock_driver_init+0x80>)
    296a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    296e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2972:	2200      	movs	r2, #0
    2974:	2101      	movs	r1, #1
    2976:	2015      	movs	r0, #21
    2978:	f002 ffc8 	bl	590c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    297c:	2015      	movs	r0, #21
    297e:	f002 ffc0 	bl	5902 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2982:	2301      	movs	r3, #1
    2984:	60a3      	str	r3, [r4, #8]
    2986:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2988:	4a12      	ldr	r2, [pc, #72]	; (29d4 <sys_clock_driver_init+0x84>)
    298a:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    298c:	2400      	movs	r4, #0
    298e:	9401      	str	r4, [sp, #4]
    2990:	4b11      	ldr	r3, [pc, #68]	; (29d8 <sys_clock_driver_init+0x88>)
    2992:	9300      	str	r3, [sp, #0]
    2994:	4a11      	ldr	r2, [pc, #68]	; (29dc <sys_clock_driver_init+0x8c>)
    2996:	2300      	movs	r3, #0
    2998:	4620      	mov	r0, r4
    299a:	f004 f86c 	bl	6a76 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    299e:	4628      	mov	r0, r5
    29a0:	f7ff faa4 	bl	1eec <z_nrf_clock_control_lf_on>

	return 0;
}
    29a4:	4620      	mov	r0, r4
    29a6:	b003      	add	sp, #12
    29a8:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    29aa:	4a0d      	ldr	r2, [pc, #52]	; (29e0 <sys_clock_driver_init+0x90>)
    29ac:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    29b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    29b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    29b8:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    29bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    29c0:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    29c2:	4902      	ldr	r1, [pc, #8]	; (29cc <sys_clock_driver_init+0x7c>)
    29c4:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    29c8:	3301      	adds	r3, #1
    29ca:	e7c7      	b.n	295c <sys_clock_driver_init+0xc>
    29cc:	50015000 	.word	0x50015000
    29d0:	e000e100 	.word	0xe000e100
    29d4:	20000a9c 	.word	0x20000a9c
    29d8:	00002801 	.word	0x00002801
    29dc:	007fffff 	.word	0x007fffff
    29e0:	200002d8 	.word	0x200002d8

000029e4 <process_channel>:
{
    29e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    29e8:	b082      	sub	sp, #8
    29ea:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    29ec:	f7ff feaa 	bl	2744 <channel_processing_check_and_clear>
    29f0:	b910      	cbnz	r0, 29f8 <process_channel+0x14>
}
    29f2:	b002      	add	sp, #8
    29f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    29f8:	f7ff ff3e 	bl	2878 <z_nrf_rtc_timer_read>
    29fc:	4682      	mov	sl, r0
    29fe:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    2a00:	f003 fff0 	bl	69e4 <full_int_lock>
    2a04:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    2a06:	4b13      	ldr	r3, [pc, #76]	; (2a54 <process_channel+0x70>)
    2a08:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2a0c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2a10:	45c2      	cmp	sl, r8
    2a12:	eb75 0509 	sbcs.w	r5, r5, r9
    2a16:	d20b      	bcs.n	2a30 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2a18:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    2a1a:	4630      	mov	r0, r6
    2a1c:	f003 ffeb 	bl	69f6 <full_int_unlock>
		if (handler) {
    2a20:	2d00      	cmp	r5, #0
    2a22:	d0e6      	beq.n	29f2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2a24:	9700      	str	r7, [sp, #0]
    2a26:	4642      	mov	r2, r8
    2a28:	464b      	mov	r3, r9
    2a2a:	4620      	mov	r0, r4
    2a2c:	47a8      	blx	r5
}
    2a2e:	e7e0      	b.n	29f2 <process_channel+0xe>
			handler = cc_data[chan].callback;
    2a30:	4a08      	ldr	r2, [pc, #32]	; (2a54 <process_channel+0x70>)
    2a32:	0123      	lsls	r3, r4, #4
    2a34:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2a38:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    2a3a:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    2a3c:	2000      	movs	r0, #0
    2a3e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2a40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2a44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2a48:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    2a4c:	4620      	mov	r0, r4
    2a4e:	f7ff fe47 	bl	26e0 <event_disable>
    2a52:	e7e2      	b.n	2a1a <process_channel+0x36>
    2a54:	200002d8 	.word	0x200002d8

00002a58 <rtc_nrf_isr>:
{
    2a58:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    2a5a:	4b0e      	ldr	r3, [pc, #56]	; (2a94 <rtc_nrf_isr+0x3c>)
    2a5c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2a60:	f013 0f02 	tst.w	r3, #2
    2a64:	d00d      	beq.n	2a82 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a66:	4b0b      	ldr	r3, [pc, #44]	; (2a94 <rtc_nrf_isr+0x3c>)
    2a68:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2a6c:	b14b      	cbz	r3, 2a82 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2a6e:	4b09      	ldr	r3, [pc, #36]	; (2a94 <rtc_nrf_isr+0x3c>)
    2a70:	2200      	movs	r2, #0
    2a72:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2a76:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    2a7a:	4a07      	ldr	r2, [pc, #28]	; (2a98 <rtc_nrf_isr+0x40>)
    2a7c:	6813      	ldr	r3, [r2, #0]
    2a7e:	3301      	adds	r3, #1
    2a80:	6013      	str	r3, [r2, #0]
{
    2a82:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2a84:	2c00      	cmp	r4, #0
    2a86:	dd00      	ble.n	2a8a <rtc_nrf_isr+0x32>
}
    2a88:	bd10      	pop	{r4, pc}
		process_channel(chan);
    2a8a:	4620      	mov	r0, r4
    2a8c:	f7ff ffaa 	bl	29e4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2a90:	3401      	adds	r4, #1
    2a92:	e7f7      	b.n	2a84 <rtc_nrf_isr+0x2c>
    2a94:	50015000 	.word	0x50015000
    2a98:	20000aa0 	.word	0x20000aa0

00002a9c <sys_clock_set_timeout>:
{
    2a9c:	b510      	push	{r4, lr}
    2a9e:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2aa0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2aa4:	d006      	beq.n	2ab4 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2aa6:	2801      	cmp	r0, #1
    2aa8:	dd06      	ble.n	2ab8 <sys_clock_set_timeout+0x1c>
    2aaa:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2aae:	da05      	bge.n	2abc <sys_clock_set_timeout+0x20>
    2ab0:	1e44      	subs	r4, r0, #1
    2ab2:	e004      	b.n	2abe <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2ab4:	480f      	ldr	r0, [pc, #60]	; (2af4 <sys_clock_set_timeout+0x58>)
    2ab6:	e7f8      	b.n	2aaa <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2ab8:	2400      	movs	r4, #0
    2aba:	e000      	b.n	2abe <sys_clock_set_timeout+0x22>
    2abc:	4c0d      	ldr	r4, [pc, #52]	; (2af4 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2abe:	f7ff fedb 	bl	2878 <z_nrf_rtc_timer_read>
    2ac2:	4b0d      	ldr	r3, [pc, #52]	; (2af8 <sys_clock_set_timeout+0x5c>)
    2ac4:	681a      	ldr	r2, [r3, #0]
    2ac6:	685b      	ldr	r3, [r3, #4]
    2ac8:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    2aca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2ace:	d300      	bcc.n	2ad2 <sys_clock_set_timeout+0x36>
		ticks = 0;
    2ad0:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2ad2:	4420      	add	r0, r4
    2ad4:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
    2ad6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2ada:	d300      	bcc.n	2ade <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    2adc:	4905      	ldr	r1, [pc, #20]	; (2af4 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    2ade:	2000      	movs	r0, #0
    2ae0:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2ae2:	9001      	str	r0, [sp, #4]
    2ae4:	4905      	ldr	r1, [pc, #20]	; (2afc <sys_clock_set_timeout+0x60>)
    2ae6:	9100      	str	r1, [sp, #0]
    2ae8:	f143 0300 	adc.w	r3, r3, #0
    2aec:	f003 ffc3 	bl	6a76 <compare_set>
}
    2af0:	b002      	add	sp, #8
    2af2:	bd10      	pop	{r4, pc}
    2af4:	007fffff 	.word	0x007fffff
    2af8:	200002e8 	.word	0x200002e8
    2afc:	00002801 	.word	0x00002801

00002b00 <sys_clock_elapsed>:
{
    2b00:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2b02:	f7ff feb9 	bl	2878 <z_nrf_rtc_timer_read>
    2b06:	4b02      	ldr	r3, [pc, #8]	; (2b10 <sys_clock_elapsed+0x10>)
    2b08:	681b      	ldr	r3, [r3, #0]
}
    2b0a:	1ac0      	subs	r0, r0, r3
    2b0c:	bd08      	pop	{r3, pc}
    2b0e:	bf00      	nop
    2b10:	200002e8 	.word	0x200002e8

00002b14 <nrf_gpio_cfg>:
{
    2b14:	b430      	push	{r4, r5}
    *p_pin = pin_number & 0x1F;
    2b16:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    2b1a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2b1c:	2801      	cmp	r0, #1
    2b1e:	d018      	beq.n	2b52 <nrf_gpio_cfg+0x3e>
        case 0: return NRF_P0;
    2b20:	4d0d      	ldr	r5, [pc, #52]	; (2b58 <nrf_gpio_cfg+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2b22:	f10c 0080 	add.w	r0, ip, #128	; 0x80
    2b26:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
    2b2a:	f004 4ce0 	and.w	ip, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2b2e:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    2b32:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2b36:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2b3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    2b3e:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2b46:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
    2b4a:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
    2b4e:	bc30      	pop	{r4, r5}
    2b50:	4770      	bx	lr
        case 1: return NRF_P1;
    2b52:	4d02      	ldr	r5, [pc, #8]	; (2b5c <nrf_gpio_cfg+0x48>)
    2b54:	e7e5      	b.n	2b22 <nrf_gpio_cfg+0xe>
    2b56:	bf00      	nop
    2b58:	50842500 	.word	0x50842500
    2b5c:	50842800 	.word	0x50842800

00002b60 <nrf_gpio_pin_write>:
    if (value == 0)
    2b60:	b959      	cbnz	r1, 2b7a <nrf_gpio_pin_write+0x1a>
    *p_pin = pin_number & 0x1F;
    2b62:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2b66:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2b68:	2801      	cmp	r0, #1
    2b6a:	d004      	beq.n	2b76 <nrf_gpio_pin_write+0x16>
        case 0: return NRF_P0;
    2b6c:	4a09      	ldr	r2, [pc, #36]	; (2b94 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2b6e:	2301      	movs	r3, #1
    2b70:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    2b72:	60d3      	str	r3, [r2, #12]
}
    2b74:	4770      	bx	lr
        case 1: return NRF_P1;
    2b76:	4a08      	ldr	r2, [pc, #32]	; (2b98 <nrf_gpio_pin_write+0x38>)
    2b78:	e7f9      	b.n	2b6e <nrf_gpio_pin_write+0xe>
    *p_pin = pin_number & 0x1F;
    2b7a:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2b7e:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2b80:	2801      	cmp	r0, #1
    2b82:	d004      	beq.n	2b8e <nrf_gpio_pin_write+0x2e>
        case 0: return NRF_P0;
    2b84:	4a03      	ldr	r2, [pc, #12]	; (2b94 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2b86:	2301      	movs	r3, #1
    2b88:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2b8a:	6093      	str	r3, [r2, #8]
}
    2b8c:	4770      	bx	lr
        case 1: return NRF_P1;
    2b8e:	4a02      	ldr	r2, [pc, #8]	; (2b98 <nrf_gpio_pin_write+0x38>)
    2b90:	e7f9      	b.n	2b86 <nrf_gpio_pin_write+0x26>
    2b92:	bf00      	nop
    2b94:	50842500 	.word	0x50842500
    2b98:	50842800 	.word	0x50842800

00002b9c <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    2b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ba0:	b085      	sub	sp, #20
    2ba2:	4607      	mov	r7, r0
    2ba4:	468b      	mov	fp, r1
    2ba6:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2ba8:	2400      	movs	r4, #0
    2baa:	e022      	b.n	2bf2 <pinctrl_configure_pins+0x56>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    2bac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2bb0:	e02c      	b.n	2c0c <pinctrl_configure_pins+0x70>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    2bb2:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2bb6:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2bb8:	9603      	str	r6, [sp, #12]
			write = 1U;
    2bba:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    2bbc:	2d7f      	cmp	r5, #127	; 0x7f
    2bbe:	d016      	beq.n	2bee <pinctrl_configure_pins+0x52>
			if (write != NO_WRITE) {
    2bc0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    2bc4:	f040 810e 	bne.w	2de4 <pinctrl_configure_pins+0x248>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    2bc8:	f857 300a 	ldr.w	r3, [r7, sl]
    2bcc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2bd0:	d002      	beq.n	2bd8 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2bd2:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    2bd4:	2200      	movs	r2, #0
    2bd6:	9203      	str	r2, [sp, #12]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2bd8:	2200      	movs	r2, #0
    2bda:	9201      	str	r2, [sp, #4]
    2bdc:	f8cd 9000 	str.w	r9, [sp]
    2be0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    2be4:	4632      	mov	r2, r6
    2be6:	9903      	ldr	r1, [sp, #12]
    2be8:	4628      	mov	r0, r5
    2bea:	f7ff ff93 	bl	2b14 <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2bee:	3401      	adds	r4, #1
    2bf0:	b2e4      	uxtb	r4, r4
    2bf2:	455c      	cmp	r4, fp
    2bf4:	f080 80fa 	bcs.w	2dec <pinctrl_configure_pins+0x250>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2bf8:	ea4f 0a84 	mov.w	sl, r4, lsl #2
    2bfc:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    2c00:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2c04:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    2c08:	2d7f      	cmp	r5, #127	; 0x7f
    2c0a:	d0cf      	beq.n	2bac <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    2c0c:	0c1b      	lsrs	r3, r3, #16
    2c0e:	2b22      	cmp	r3, #34	; 0x22
    2c10:	f200 80ee 	bhi.w	2df0 <pinctrl_configure_pins+0x254>
    2c14:	a201      	add	r2, pc, #4	; (adr r2, 2c1c <pinctrl_configure_pins+0x80>)
    2c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2c1a:	bf00      	nop
    2c1c:	00002bb3 	.word	0x00002bb3
    2c20:	00002ca9 	.word	0x00002ca9
    2c24:	00002cb7 	.word	0x00002cb7
    2c28:	00002cc3 	.word	0x00002cc3
    2c2c:	00002cd1 	.word	0x00002cd1
    2c30:	00002cdf 	.word	0x00002cdf
    2c34:	00002ceb 	.word	0x00002ceb
    2c38:	00002df1 	.word	0x00002df1
    2c3c:	00002df1 	.word	0x00002df1
    2c40:	00002df1 	.word	0x00002df1
    2c44:	00002df1 	.word	0x00002df1
    2c48:	00002cf9 	.word	0x00002cf9
    2c4c:	00002d0d 	.word	0x00002d0d
    2c50:	00002df1 	.word	0x00002df1
    2c54:	00002df1 	.word	0x00002df1
    2c58:	00002df1 	.word	0x00002df1
    2c5c:	00002df1 	.word	0x00002df1
    2c60:	00002df1 	.word	0x00002df1
    2c64:	00002df1 	.word	0x00002df1
    2c68:	00002df1 	.word	0x00002df1
    2c6c:	00002df1 	.word	0x00002df1
    2c70:	00002df1 	.word	0x00002df1
    2c74:	00002d21 	.word	0x00002d21
    2c78:	00002d33 	.word	0x00002d33
    2c7c:	00002d45 	.word	0x00002d45
    2c80:	00002d57 	.word	0x00002d57
    2c84:	00002df1 	.word	0x00002df1
    2c88:	00002df1 	.word	0x00002df1
    2c8c:	00002df1 	.word	0x00002df1
    2c90:	00002d69 	.word	0x00002d69
    2c94:	00002d79 	.word	0x00002d79
    2c98:	00002d85 	.word	0x00002d85
    2c9c:	00002d95 	.word	0x00002d95
    2ca0:	00002da5 	.word	0x00002da5
    2ca4:	00002db5 	.word	0x00002db5
			NRF_PSEL_UART(reg, RXD) = pin;
    2ca8:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2cac:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2cae:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2cb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2cb4:	e782      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
    2cb6:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2cba:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2cbc:	9603      	str	r6, [sp, #12]
			write = 1U;
    2cbe:	4631      	mov	r1, r6
			break;
    2cc0:	e77c      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
    2cc2:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2cc6:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2cc8:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2cca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2cce:	e775      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    2cd0:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2cd4:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2cd6:	2301      	movs	r3, #1
    2cd8:	9303      	str	r3, [sp, #12]
			write = 0U;
    2cda:	4631      	mov	r1, r6
			break;
    2cdc:	e76e      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    2cde:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2ce2:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2ce4:	9603      	str	r6, [sp, #12]
			write = 0U;
    2ce6:	2100      	movs	r1, #0
			break;
    2ce8:	e768      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    2cea:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2cee:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2cf0:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2cf2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2cf6:	e761      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    2cf8:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2cfc:	f1b9 0f00 	cmp.w	r9, #0
    2d00:	d060      	beq.n	2dc4 <pinctrl_configure_pins+0x228>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2d02:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d04:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2d06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2d0a:	e757      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    2d0c:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2d10:	f1b9 0f00 	cmp.w	r9, #0
    2d14:	d05e      	beq.n	2dd4 <pinctrl_configure_pins+0x238>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2d16:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d18:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2d1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2d1e:	e74d      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    2d20:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    2d24:	f857 100a 	ldr.w	r1, [r7, sl]
    2d28:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d2c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2d2e:	9603      	str	r6, [sp, #12]
			break;
    2d30:	e744      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    2d32:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2d36:	f857 100a 	ldr.w	r1, [r7, sl]
    2d3a:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d3e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2d40:	9603      	str	r6, [sp, #12]
			break;
    2d42:	e73b      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    2d44:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2d48:	f857 100a 	ldr.w	r1, [r7, sl]
    2d4c:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d50:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2d52:	9603      	str	r6, [sp, #12]
			break;
    2d54:	e732      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2d56:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    2d5a:	f857 100a 	ldr.w	r1, [r7, sl]
    2d5e:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d62:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2d64:	9603      	str	r6, [sp, #12]
			break;
    2d66:	e729      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    2d68:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d6c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d6e:	2300      	movs	r3, #0
    2d70:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2d72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2d76:	e721      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    2d78:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d7c:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2d7e:	9603      	str	r6, [sp, #12]
			write = 1U;
    2d80:	4631      	mov	r1, r6
			break;
    2d82:	e71b      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    2d84:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d88:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d8a:	2300      	movs	r3, #0
    2d8c:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2d8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2d92:	e713      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    2d94:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d98:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d9a:	2300      	movs	r3, #0
    2d9c:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2d9e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2da2:	e70b      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    2da4:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2da8:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2daa:	2300      	movs	r3, #0
    2dac:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2dae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2db2:	e703      	b.n	2bbc <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    2db4:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2db8:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2dba:	2300      	movs	r3, #0
    2dbc:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2dbe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2dc2:	e6fb      	b.n	2bbc <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2dc4:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2dc6:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    2dca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
    2dce:	f04f 0906 	mov.w	r9, #6
    2dd2:	e6f3      	b.n	2bbc <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2dd4:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2dd6:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    2dda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
    2dde:	f04f 0906 	mov.w	r9, #6
    2de2:	e6eb      	b.n	2bbc <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
    2de4:	4628      	mov	r0, r5
    2de6:	f7ff febb 	bl	2b60 <nrf_gpio_pin_write>
    2dea:	e6ed      	b.n	2bc8 <pinctrl_configure_pins+0x2c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    2dec:	2000      	movs	r0, #0
    2dee:	e001      	b.n	2df4 <pinctrl_configure_pins+0x258>
		switch (NRF_GET_FUN(pins[i])) {
    2df0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2df4:	b005      	add	sp, #20
    2df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dfa:	bf00      	nop

00002dfc <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    2dfc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e00:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    2e04:	f002 0203 	and.w	r2, r2, #3
    2e08:	4b02      	ldr	r3, [pc, #8]	; (2e14 <SystemCoreClockUpdate+0x18>)
    2e0a:	40d3      	lsrs	r3, r2
    2e0c:	4a02      	ldr	r2, [pc, #8]	; (2e18 <SystemCoreClockUpdate+0x1c>)
    2e0e:	6013      	str	r3, [r2, #0]
#endif
}
    2e10:	4770      	bx	lr
    2e12:	bf00      	nop
    2e14:	07a12000 	.word	0x07a12000
    2e18:	20000190 	.word	0x20000190

00002e1c <SystemInit>:

void SystemInit(void)
{
    2e1c:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    2e1e:	f003 fee3 	bl	6be8 <nrf53_errata_97>
    2e22:	b168      	cbz	r0, 2e40 <SystemInit+0x24>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    2e24:	4b4e      	ldr	r3, [pc, #312]	; (2f60 <SystemInit+0x144>)
    2e26:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
    2e2a:	b94b      	cbnz	r3, 2e40 <SystemInit+0x24>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2e2c:	4b4c      	ldr	r3, [pc, #304]	; (2f60 <SystemInit+0x144>)
    2e2e:	220d      	movs	r2, #13
    2e30:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    2e34:	2201      	movs	r2, #1
    2e36:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2e3a:	2200      	movs	r2, #0
    2e3c:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    2e40:	2200      	movs	r2, #0
    2e42:	e00b      	b.n	2e5c <SystemInit+0x40>
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2e44:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2e48:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2e4c:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    2e50:	00db      	lsls	r3, r3, #3
    2e52:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    2e56:	685b      	ldr	r3, [r3, #4]
    2e58:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2e5a:	3201      	adds	r2, #1
    2e5c:	2a1f      	cmp	r2, #31
    2e5e:	d808      	bhi.n	2e72 <SystemInit+0x56>
    2e60:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2e64:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2e68:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    2e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2e70:	d1e8      	bne.n	2e44 <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2e72:	f003 fe91 	bl	6b98 <nrf53_errata_64>
    2e76:	b130      	cbz	r0, 2e86 <SystemInit+0x6a>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2e78:	4b39      	ldr	r3, [pc, #228]	; (2f60 <SystemInit+0x144>)
    2e7a:	2229      	movs	r2, #41	; 0x29
    2e7c:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2e80:	2203      	movs	r2, #3
    2e82:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    2e86:	f003 fe3b 	bl	6b00 <nrf53_errata_42>
    2e8a:	b140      	cbz	r0, 2e9e <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2e8c:	4b35      	ldr	r3, [pc, #212]	; (2f64 <SystemInit+0x148>)
    2e8e:	4a36      	ldr	r2, [pc, #216]	; (2f68 <SystemInit+0x14c>)
    2e90:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    2e94:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2e98:	2201      	movs	r2, #1
    2e9a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    2e9e:	f003 fe43 	bl	6b28 <nrf53_errata_46>
    2ea2:	b118      	cbz	r0, 2eac <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2ea4:	4b31      	ldr	r3, [pc, #196]	; (2f6c <SystemInit+0x150>)
    2ea6:	2200      	movs	r2, #0
    2ea8:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    2eac:	f003 fe54 	bl	6b58 <nrf53_errata_49>
    2eb0:	b168      	cbz	r0, 2ece <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2eb2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2eb6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2eba:	f013 0f01 	tst.w	r3, #1
    2ebe:	d006      	beq.n	2ece <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    2ec0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ec4:	2200      	movs	r2, #0
    2ec6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2eca:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    2ece:	f003 fe57 	bl	6b80 <nrf53_errata_55>
    2ed2:	b160      	cbz	r0, 2eee <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2ed4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ed8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2edc:	f013 0f01 	tst.w	r3, #1
    2ee0:	d005      	beq.n	2eee <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2ee2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ee6:	f06f 0201 	mvn.w	r2, #1
    2eea:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2eee:	f003 fe67 	bl	6bc0 <nrf53_errata_69>
    2ef2:	b118      	cbz	r0, 2efc <SystemInit+0xe0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    2ef4:	4b1a      	ldr	r3, [pc, #104]	; (2f60 <SystemInit+0x144>)
    2ef6:	2265      	movs	r2, #101	; 0x65
    2ef8:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        }

        if (nrf53_errata_140())
    2efc:	f003 fe88 	bl	6c10 <nrf53_errata_140>
    2f00:	b120      	cbz	r0, 2f0c <SystemInit+0xf0>
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    2f02:	4b1a      	ldr	r3, [pc, #104]	; (2f6c <SystemInit+0x150>)
    2f04:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    2f08:	2b00      	cmp	r3, #0
    2f0a:	db11      	blt.n	2f30 <SystemInit+0x114>

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2f0c:	4a18      	ldr	r2, [pc, #96]	; (2f70 <SystemInit+0x154>)
    2f0e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2f12:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2f16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2f1a:	4a16      	ldr	r2, [pc, #88]	; (2f74 <SystemInit+0x158>)
    2f1c:	6811      	ldr	r1, [r2, #0]
    2f1e:	4b16      	ldr	r3, [pc, #88]	; (2f78 <SystemInit+0x15c>)
    2f20:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2f24:	69d2      	ldr	r2, [r2, #28]
    2f26:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    2f2a:	f7ff ff67 	bl	2dfc <SystemCoreClockUpdate>
}
    2f2e:	bd08      	pop	{r3, pc}
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    2f30:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f34:	2203      	movs	r2, #3
    2f36:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    2f3a:	2201      	movs	r2, #1
    2f3c:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    2f3e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f42:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2f46:	2b00      	cmp	r3, #0
    2f48:	d0f9      	beq.n	2f3e <SystemInit+0x122>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    2f4a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f4e:	2200      	movs	r2, #0
    2f50:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    2f54:	2201      	movs	r2, #1
    2f56:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    2f58:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    2f5c:	e7d6      	b.n	2f0c <SystemInit+0xf0>
    2f5e:	bf00      	nop
    2f60:	50004000 	.word	0x50004000
    2f64:	50039000 	.word	0x50039000
    2f68:	beef0044 	.word	0xbeef0044
    2f6c:	50032000 	.word	0x50032000
    2f70:	e000ed00 	.word	0xe000ed00
    2f74:	00ff8000 	.word	0x00ff8000
    2f78:	50006000 	.word	0x50006000

00002f7c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2f7c:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    2f7e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2f80:	fab4 f384 	clz	r3, r4
    2f84:	f1c3 031f 	rsb	r3, r3, #31
    2f88:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    2f8c:	2b00      	cmp	r3, #0
    2f8e:	db12      	blt.n	2fb6 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2f90:	2201      	movs	r2, #1
    2f92:	fa02 f303 	lsl.w	r3, r2, r3
    2f96:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2f9a:	e8d0 2fef 	ldaex	r2, [r0]
    2f9e:	42a2      	cmp	r2, r4
    2fa0:	d104      	bne.n	2fac <nrfx_flag32_alloc+0x30>
    2fa2:	e8c0 3fee 	stlex	lr, r3, [r0]
    2fa6:	f1be 0f00 	cmp.w	lr, #0
    2faa:	d1f6      	bne.n	2f9a <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2fac:	d1e7      	bne.n	2f7e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    2fae:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    2fb2:	4802      	ldr	r0, [pc, #8]	; (2fbc <nrfx_flag32_alloc+0x40>)
}
    2fb4:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    2fb6:	4802      	ldr	r0, [pc, #8]	; (2fc0 <nrfx_flag32_alloc+0x44>)
    2fb8:	e7fc      	b.n	2fb4 <nrfx_flag32_alloc+0x38>
    2fba:	bf00      	nop
    2fbc:	0bad0000 	.word	0x0bad0000
    2fc0:	0bad0002 	.word	0x0bad0002

00002fc4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2fc4:	6803      	ldr	r3, [r0, #0]
    2fc6:	40cb      	lsrs	r3, r1
    2fc8:	f013 0f01 	tst.w	r3, #1
    2fcc:	d111      	bne.n	2ff2 <nrfx_flag32_free+0x2e>
{
    2fce:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    2fd0:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    2fd2:	2301      	movs	r3, #1
    2fd4:	408b      	lsls	r3, r1
    2fd6:	4313      	orrs	r3, r2
    2fd8:	e8d0 cfef 	ldaex	ip, [r0]
    2fdc:	4594      	cmp	ip, r2
    2fde:	d104      	bne.n	2fea <nrfx_flag32_free+0x26>
    2fe0:	e8c0 3fee 	stlex	lr, r3, [r0]
    2fe4:	f1be 0f00 	cmp.w	lr, #0
    2fe8:	d1f6      	bne.n	2fd8 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2fea:	d1f1      	bne.n	2fd0 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    2fec:	4802      	ldr	r0, [pc, #8]	; (2ff8 <nrfx_flag32_free+0x34>)
}
    2fee:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    2ff2:	4802      	ldr	r0, [pc, #8]	; (2ffc <nrfx_flag32_free+0x38>)
}
    2ff4:	4770      	bx	lr
    2ff6:	bf00      	nop
    2ff8:	0bad0000 	.word	0x0bad0000
    2ffc:	0bad0004 	.word	0x0bad0004

00003000 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3000:	4b05      	ldr	r3, [pc, #20]	; (3018 <nrfx_clock_init+0x18>)
    3002:	791b      	ldrb	r3, [r3, #4]
    3004:	b92b      	cbnz	r3, 3012 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    3006:	4b04      	ldr	r3, [pc, #16]	; (3018 <nrfx_clock_init+0x18>)
    3008:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    300a:	2201      	movs	r2, #1
    300c:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    300e:	4803      	ldr	r0, [pc, #12]	; (301c <nrfx_clock_init+0x1c>)
    3010:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3012:	4803      	ldr	r0, [pc, #12]	; (3020 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3014:	4770      	bx	lr
    3016:	bf00      	nop
    3018:	20000aa4 	.word	0x20000aa4
    301c:	0bad0000 	.word	0x0bad0000
    3020:	0bad000c 	.word	0x0bad000c

00003024 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3024:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3026:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    302a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    302e:	b163      	cbz	r3, 304a <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3030:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3034:	2000      	movs	r0, #0
    3036:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    303a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    303e:	2201      	movs	r2, #1
    3040:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3044:	4b28      	ldr	r3, [pc, #160]	; (30e8 <nrfx_power_clock_irq_handler+0xc4>)
    3046:	681b      	ldr	r3, [r3, #0]
    3048:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    304a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    304e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3052:	b1bb      	cbz	r3, 3084 <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3054:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3058:	2200      	movs	r2, #0
    305a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    305e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3062:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    3066:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    306a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    306e:	2a01      	cmp	r2, #1
    3070:	d031      	beq.n	30d6 <nrfx_power_clock_irq_handler+0xb2>
    p_reg->INTENCLR = mask;
    3072:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3076:	2202      	movs	r2, #2
    3078:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    307c:	4b1a      	ldr	r3, [pc, #104]	; (30e8 <nrfx_power_clock_irq_handler+0xc4>)
    307e:	681b      	ldr	r3, [r3, #0]
    3080:	2001      	movs	r0, #1
    3082:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3084:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3088:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    308c:	b173      	cbz	r3, 30ac <nrfx_power_clock_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    308e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3092:	2200      	movs	r2, #0
    3094:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3098:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    309c:	f44f 7280 	mov.w	r2, #256	; 0x100
    30a0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    30a4:	4b10      	ldr	r3, [pc, #64]	; (30e8 <nrfx_power_clock_irq_handler+0xc4>)
    30a6:	681b      	ldr	r3, [r3, #0]
    30a8:	2004      	movs	r0, #4
    30aa:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    30ac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30b0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    30b4:	b173      	cbz	r3, 30d4 <nrfx_power_clock_irq_handler+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30ba:	2200      	movs	r2, #0
    30bc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    30c0:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    30c4:	f44f 7200 	mov.w	r2, #512	; 0x200
    30c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    30cc:	4b06      	ldr	r3, [pc, #24]	; (30e8 <nrfx_power_clock_irq_handler+0xc4>)
    30ce:	681b      	ldr	r3, [r3, #0]
    30d0:	2005      	movs	r0, #5
    30d2:	4798      	blx	r3
    }
#endif
}
    30d4:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    30d6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30da:	2202      	movs	r2, #2
    30dc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30e0:	2201      	movs	r2, #1
    30e2:	609a      	str	r2, [r3, #8]
}
    30e4:	e7ce      	b.n	3084 <nrfx_power_clock_irq_handler+0x60>
    30e6:	bf00      	nop
    30e8:	20000aa4 	.word	0x20000aa4

000030ec <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    30ec:	b508      	push	{r3, lr}
    30ee:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    30f0:	4801      	ldr	r0, [pc, #4]	; (30f8 <nrfx_dppi_channel_alloc+0xc>)
    30f2:	f7ff ff43 	bl	2f7c <nrfx_flag32_alloc>
}
    30f6:	bd08      	pop	{r3, pc}
    30f8:	20000194 	.word	0x20000194

000030fc <nrf_gpio_reconfigure>:
{
    30fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    30fe:	461c      	mov	r4, r3
    3100:	9f05      	ldr	r7, [sp, #20]
    3102:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    3104:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    3108:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    310a:	2801      	cmp	r0, #1
    310c:	d034      	beq.n	3178 <nrf_gpio_reconfigure+0x7c>
        case 0: return NRF_P0;
    310e:	4d27      	ldr	r5, [pc, #156]	; (31ac <nrf_gpio_reconfigure+0xb0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    3110:	f10c 0380 	add.w	r3, ip, #128	; 0x80
    3114:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    3118:	b381      	cbz	r1, 317c <nrf_gpio_reconfigure+0x80>
    311a:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    311c:	b382      	cbz	r2, 3180 <nrf_gpio_reconfigure+0x84>
    311e:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    3122:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3126:	b374      	cbz	r4, 3186 <nrf_gpio_reconfigure+0x8a>
    3128:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    312c:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    3130:	b367      	cbz	r7, 318c <nrf_gpio_reconfigure+0x90>
    3132:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3136:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    313a:	b356      	cbz	r6, 3192 <nrf_gpio_reconfigure+0x96>
    313c:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    3140:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    3144:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3148:	b331      	cbz	r1, 3198 <nrf_gpio_reconfigure+0x9c>
    314a:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    314c:	b332      	cbz	r2, 319c <nrf_gpio_reconfigure+0xa0>
    314e:	7812      	ldrb	r2, [r2, #0]
    3150:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3152:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3154:	b324      	cbz	r4, 31a0 <nrf_gpio_reconfigure+0xa4>
    3156:	7822      	ldrb	r2, [r4, #0]
    3158:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    315a:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    315c:	b317      	cbz	r7, 31a4 <nrf_gpio_reconfigure+0xa8>
    315e:	783a      	ldrb	r2, [r7, #0]
    3160:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3162:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    3164:	b306      	cbz	r6, 31a8 <nrf_gpio_reconfigure+0xac>
    3166:	7832      	ldrb	r2, [r6, #0]
    3168:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    316a:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    316c:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    316e:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    3172:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    3176:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    3178:	4d0d      	ldr	r5, [pc, #52]	; (31b0 <nrf_gpio_reconfigure+0xb4>)
    317a:	e7c9      	b.n	3110 <nrf_gpio_reconfigure+0x14>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    317c:	2000      	movs	r0, #0
    317e:	e7cd      	b.n	311c <nrf_gpio_reconfigure+0x20>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3180:	f04f 0e00 	mov.w	lr, #0
    3184:	e7cd      	b.n	3122 <nrf_gpio_reconfigure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3186:	f04f 0e00 	mov.w	lr, #0
    318a:	e7cf      	b.n	312c <nrf_gpio_reconfigure+0x30>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    318c:	f04f 0e00 	mov.w	lr, #0
    3190:	e7d1      	b.n	3136 <nrf_gpio_reconfigure+0x3a>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    3192:	f04f 0e00 	mov.w	lr, #0
    3196:	e7d3      	b.n	3140 <nrf_gpio_reconfigure+0x44>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3198:	2300      	movs	r3, #0
    319a:	e7d7      	b.n	314c <nrf_gpio_reconfigure+0x50>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    319c:	2200      	movs	r2, #0
    319e:	e7d8      	b.n	3152 <nrf_gpio_reconfigure+0x56>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    31a0:	2200      	movs	r2, #0
    31a2:	e7da      	b.n	315a <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    31a4:	2200      	movs	r2, #0
    31a6:	e7dc      	b.n	3162 <nrf_gpio_reconfigure+0x66>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    31a8:	2200      	movs	r2, #0
    31aa:	e7de      	b.n	316a <nrf_gpio_reconfigure+0x6e>
    31ac:	50842500 	.word	0x50842500
    31b0:	50842800 	.word	0x50842800

000031b4 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
    31b4:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    31b8:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31ba:	2801      	cmp	r0, #1
    31bc:	d00a      	beq.n	31d4 <nrf_gpio_cfg_default+0x20>
        case 0: return NRF_P0;
    31be:	4906      	ldr	r1, [pc, #24]	; (31d8 <nrf_gpio_cfg_default+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    31c0:	3280      	adds	r2, #128	; 0x80
    31c2:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    31c6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    31ca:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    31ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    31d2:	4770      	bx	lr
        case 1: return NRF_P1;
    31d4:	4901      	ldr	r1, [pc, #4]	; (31dc <nrf_gpio_cfg_default+0x28>)
    31d6:	e7f3      	b.n	31c0 <nrf_gpio_cfg_default+0xc>
    31d8:	50842500 	.word	0x50842500
    31dc:	50842800 	.word	0x50842800

000031e0 <nrf_gpio_latches_read_and_clear>:
{
    31e0:	b500      	push	{lr}
    31e2:	b083      	sub	sp, #12
    31e4:	4684      	mov	ip, r0
    31e6:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    31e8:	4b0c      	ldr	r3, [pc, #48]	; (321c <nrf_gpio_latches_read_and_clear+0x3c>)
    31ea:	e893 0003 	ldmia.w	r3, {r0, r1}
    31ee:	ab02      	add	r3, sp, #8
    31f0:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    31f4:	4663      	mov	r3, ip
    31f6:	e009      	b.n	320c <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
    31f8:	a902      	add	r1, sp, #8
    31fa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    31fe:	f851 1c08 	ldr.w	r1, [r1, #-8]
    3202:	6a08      	ldr	r0, [r1, #32]
    3204:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    3208:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
    320a:	3301      	adds	r3, #1
    320c:	eb0c 000e 	add.w	r0, ip, lr
    3210:	4298      	cmp	r0, r3
    3212:	d8f1      	bhi.n	31f8 <nrf_gpio_latches_read_and_clear+0x18>
}
    3214:	b003      	add	sp, #12
    3216:	f85d fb04 	ldr.w	pc, [sp], #4
    321a:	bf00      	nop
    321c:	00007850 	.word	0x00007850

00003220 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3220:	3008      	adds	r0, #8
    3222:	4b03      	ldr	r3, [pc, #12]	; (3230 <pin_in_use+0x10>)
    3224:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3228:	f000 0001 	and.w	r0, r0, #1
    322c:	4770      	bx	lr
    322e:	bf00      	nop
    3230:	20000198 	.word	0x20000198

00003234 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    3234:	3008      	adds	r0, #8
    3236:	4b03      	ldr	r3, [pc, #12]	; (3244 <pin_in_use_by_te+0x10>)
    3238:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    323c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    3240:	4770      	bx	lr
    3242:	bf00      	nop
    3244:	20000198 	.word	0x20000198

00003248 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    3248:	3008      	adds	r0, #8
    324a:	4b04      	ldr	r3, [pc, #16]	; (325c <pin_has_trigger+0x14>)
    324c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3250:	f010 001c 	ands.w	r0, r0, #28
    3254:	bf18      	it	ne
    3256:	2001      	movne	r0, #1
    3258:	4770      	bx	lr
    325a:	bf00      	nop
    325c:	20000198 	.word	0x20000198

00003260 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3260:	3008      	adds	r0, #8
    3262:	4b03      	ldr	r3, [pc, #12]	; (3270 <pin_is_output+0x10>)
    3264:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3268:	f3c0 0040 	ubfx	r0, r0, #1, #1
    326c:	4770      	bx	lr
    326e:	bf00      	nop
    3270:	20000198 	.word	0x20000198

00003274 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3274:	3008      	adds	r0, #8
    3276:	4b02      	ldr	r3, [pc, #8]	; (3280 <pin_te_get+0xc>)
    3278:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    327c:	0b40      	lsrs	r0, r0, #13
    327e:	4770      	bx	lr
    3280:	20000198 	.word	0x20000198

00003284 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3284:	2200      	movs	r2, #0
    3286:	e004      	b.n	3292 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    328c:	4283      	cmp	r3, r0
    328e:	d00f      	beq.n	32b0 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3290:	3201      	adds	r2, #1
    3292:	2a2f      	cmp	r2, #47	; 0x2f
    3294:	d80a      	bhi.n	32ac <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3296:	f102 0308 	add.w	r3, r2, #8
    329a:	4906      	ldr	r1, [pc, #24]	; (32b4 <handler_in_use+0x30>)
    329c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    32a0:	f413 7f80 	tst.w	r3, #256	; 0x100
    32a4:	d0f0      	beq.n	3288 <handler_in_use+0x4>
    32a6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    32aa:	e7ef      	b.n	328c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    32ac:	2000      	movs	r0, #0
    32ae:	4770      	bx	lr
            return true;
    32b0:	2001      	movs	r0, #1
}
    32b2:	4770      	bx	lr
    32b4:	20000198 	.word	0x20000198

000032b8 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    32b8:	2300      	movs	r3, #0
    32ba:	b113      	cbz	r3, 32c2 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    32bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    32c0:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    32c2:	4a07      	ldr	r2, [pc, #28]	; (32e0 <find_handler+0x28>)
    32c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    32c8:	4282      	cmp	r2, r0
    32ca:	d001      	beq.n	32d0 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    32cc:	3301      	adds	r3, #1
    32ce:	e7f4      	b.n	32ba <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    32d0:	4a03      	ldr	r2, [pc, #12]	; (32e0 <find_handler+0x28>)
    32d2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    32d6:	6852      	ldr	r2, [r2, #4]
    32d8:	428a      	cmp	r2, r1
    32da:	d1f7      	bne.n	32cc <find_handler+0x14>
            return i;
    32dc:	4618      	mov	r0, r3
    32de:	4770      	bx	lr
    32e0:	20000198 	.word	0x20000198

000032e4 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    32e4:	f100 0208 	add.w	r2, r0, #8
    32e8:	4b0e      	ldr	r3, [pc, #56]	; (3324 <get_initial_sense+0x40>)
    32ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    32ee:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    32f2:	2b04      	cmp	r3, #4
    32f4:	d010      	beq.n	3318 <get_initial_sense+0x34>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    32f6:	2b05      	cmp	r3, #5
    32f8:	d010      	beq.n	331c <get_initial_sense+0x38>
    *p_pin = pin_number & 0x1F;
    32fa:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    32fe:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3300:	2801      	cmp	r0, #1
    3302:	d007      	beq.n	3314 <get_initial_sense+0x30>
        case 0: return NRF_P0;
    3304:	4b08      	ldr	r3, [pc, #32]	; (3328 <get_initial_sense+0x44>)
    return p_reg->IN;
    3306:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    3308:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    330a:	f013 0f01 	tst.w	r3, #1
    330e:	d007      	beq.n	3320 <get_initial_sense+0x3c>
    3310:	2003      	movs	r0, #3
    3312:	4770      	bx	lr
        case 1: return NRF_P1;
    3314:	4b05      	ldr	r3, [pc, #20]	; (332c <get_initial_sense+0x48>)
    3316:	e7f6      	b.n	3306 <get_initial_sense+0x22>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3318:	2003      	movs	r0, #3
    331a:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    331c:	2002      	movs	r0, #2
    331e:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3320:	2002      	movs	r0, #2
    }

    return sense;
}
    3322:	4770      	bx	lr
    3324:	20000198 	.word	0x20000198
    3328:	50842500 	.word	0x50842500
    332c:	50842800 	.word	0x50842800

00003330 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3330:	3008      	adds	r0, #8
    3332:	4b06      	ldr	r3, [pc, #24]	; (334c <channel_handler_get+0x1c>)
    3334:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    3338:	f410 7f80 	tst.w	r0, #256	; 0x100
    333c:	d004      	beq.n	3348 <channel_handler_get+0x18>
    333e:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    3342:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    3346:	4770      	bx	lr
        return NULL;
    3348:	2000      	movs	r0, #0
}
    334a:	4770      	bx	lr
    334c:	20000198 	.word	0x20000198

00003350 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3350:	b570      	push	{r4, r5, r6, lr}
    3352:	4604      	mov	r4, r0
    3354:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    3356:	f7ff ffeb 	bl	3330 <channel_handler_get>

    if (handler)
    335a:	b120      	cbz	r0, 3366 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    335c:	6806      	ldr	r6, [r0, #0]
    335e:	6842      	ldr	r2, [r0, #4]
    3360:	4629      	mov	r1, r5
    3362:	4620      	mov	r0, r4
    3364:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    3366:	4b04      	ldr	r3, [pc, #16]	; (3378 <call_handler+0x28>)
    3368:	689b      	ldr	r3, [r3, #8]
    336a:	b123      	cbz	r3, 3376 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    336c:	4a02      	ldr	r2, [pc, #8]	; (3378 <call_handler+0x28>)
    336e:	68d2      	ldr	r2, [r2, #12]
    3370:	4629      	mov	r1, r5
    3372:	4620      	mov	r0, r4
    3374:	4798      	blx	r3
    }
}
    3376:	bd70      	pop	{r4, r5, r6, pc}
    3378:	20000198 	.word	0x20000198

0000337c <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    337c:	b570      	push	{r4, r5, r6, lr}
    337e:	4606      	mov	r6, r0
    3380:	460c      	mov	r4, r1
    3382:	4615      	mov	r5, r2
    if (is_level(trigger))
    3384:	4608      	mov	r0, r1
    3386:	f003 fdf6 	bl	6f76 <is_level>
    338a:	b960      	cbnz	r0, 33a6 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    338c:	2d02      	cmp	r5, #2
    338e:	d026      	beq.n	33de <next_sense_cond_call_handler+0x62>
    3390:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    3392:	4630      	mov	r0, r6
    3394:	f003 fdc7 	bl	6f26 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3398:	2c03      	cmp	r4, #3
    339a:	d024      	beq.n	33e6 <next_sense_cond_call_handler+0x6a>
    339c:	2d02      	cmp	r5, #2
    339e:	d020      	beq.n	33e2 <next_sense_cond_call_handler+0x66>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    33a0:	2d03      	cmp	r5, #3
    33a2:	d025      	beq.n	33f0 <next_sense_cond_call_handler+0x74>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    33a4:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    33a6:	4621      	mov	r1, r4
    33a8:	4630      	mov	r0, r6
    33aa:	f7ff ffd1 	bl	3350 <call_handler>
    *p_pin = pin_number & 0x1F;
    33ae:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    33b2:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    33b4:	2a01      	cmp	r2, #1
    33b6:	d010      	beq.n	33da <next_sense_cond_call_handler+0x5e>
        case 0: return NRF_P0;
    33b8:	4a0f      	ldr	r2, [pc, #60]	; (33f8 <next_sense_cond_call_handler+0x7c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    33ba:	3380      	adds	r3, #128	; 0x80
    33bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    33c0:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    33c4:	429d      	cmp	r5, r3
    33c6:	d1ed      	bne.n	33a4 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    33c8:	2100      	movs	r1, #0
    33ca:	4630      	mov	r0, r6
    33cc:	f003 fdab 	bl	6f26 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    33d0:	4629      	mov	r1, r5
    33d2:	4630      	mov	r0, r6
    33d4:	f003 fda7 	bl	6f26 <nrf_gpio_cfg_sense_set>
    33d8:	e7e4      	b.n	33a4 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    33da:	4a08      	ldr	r2, [pc, #32]	; (33fc <next_sense_cond_call_handler+0x80>)
    33dc:	e7ed      	b.n	33ba <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    33de:	2103      	movs	r1, #3
    33e0:	e7d7      	b.n	3392 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    33e2:	2c01      	cmp	r4, #1
    33e4:	d1dc      	bne.n	33a0 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    33e6:	4621      	mov	r1, r4
    33e8:	4630      	mov	r0, r6
    33ea:	f7ff ffb1 	bl	3350 <call_handler>
}
    33ee:	e7d9      	b.n	33a4 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    33f0:	2c02      	cmp	r4, #2
    33f2:	d1d7      	bne.n	33a4 <next_sense_cond_call_handler+0x28>
    33f4:	e7f7      	b.n	33e6 <next_sense_cond_call_handler+0x6a>
    33f6:	bf00      	nop
    33f8:	50842500 	.word	0x50842500
    33fc:	50842800 	.word	0x50842800

00003400 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3400:	f100 0208 	add.w	r2, r0, #8
    3404:	4b0e      	ldr	r3, [pc, #56]	; (3440 <release_handler+0x40>)
    3406:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    340a:	f413 7f80 	tst.w	r3, #256	; 0x100
    340e:	d016      	beq.n	343e <release_handler+0x3e>
{
    3410:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    3412:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3416:	4610      	mov	r0, r2
    3418:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    341c:	4a08      	ldr	r2, [pc, #32]	; (3440 <release_handler+0x40>)
    341e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    3422:	4620      	mov	r0, r4
    3424:	f7ff ff2e 	bl	3284 <handler_in_use>
    3428:	b100      	cbz	r0, 342c <release_handler+0x2c>
}
    342a:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    342c:	4804      	ldr	r0, [pc, #16]	; (3440 <release_handler+0x40>)
    342e:	2300      	movs	r3, #0
    3430:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3434:	4621      	mov	r1, r4
    3436:	3074      	adds	r0, #116	; 0x74
    3438:	f7ff fdc4 	bl	2fc4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    343c:	e7f5      	b.n	342a <release_handler+0x2a>
    343e:	4770      	bx	lr
    3440:	20000198 	.word	0x20000198

00003444 <pin_handler_trigger_uninit>:
{
    3444:	b510      	push	{r4, lr}
    3446:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    3448:	f7ff fef4 	bl	3234 <pin_in_use_by_te>
    344c:	b150      	cbz	r0, 3464 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    344e:	4620      	mov	r0, r4
    3450:	f7ff ff10 	bl	3274 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3454:	4b08      	ldr	r3, [pc, #32]	; (3478 <pin_handler_trigger_uninit+0x34>)
    3456:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    345a:	2200      	movs	r2, #0
    345c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    3460:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    3464:	4620      	mov	r0, r4
    3466:	f7ff ffcb 	bl	3400 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    346a:	3408      	adds	r4, #8
    346c:	4b03      	ldr	r3, [pc, #12]	; (347c <pin_handler_trigger_uninit+0x38>)
    346e:	2200      	movs	r2, #0
    3470:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    3474:	bd10      	pop	{r4, pc}
    3476:	bf00      	nop
    3478:	5000d000 	.word	0x5000d000
    347c:	20000198 	.word	0x20000198

00003480 <pin_handler_set>:
{
    3480:	b570      	push	{r4, r5, r6, lr}
    3482:	b082      	sub	sp, #8
    3484:	4605      	mov	r5, r0
    3486:	460e      	mov	r6, r1
    3488:	4614      	mov	r4, r2
    release_handler(pin);
    348a:	f7ff ffb9 	bl	3400 <release_handler>
    if (!handler)
    348e:	b326      	cbz	r6, 34da <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    3490:	4621      	mov	r1, r4
    3492:	4630      	mov	r0, r6
    3494:	f7ff ff10 	bl	32b8 <find_handler>
    if (handler_id < 0)
    3498:	1e03      	subs	r3, r0, #0
    349a:	db13      	blt.n	34c4 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    349c:	4910      	ldr	r1, [pc, #64]	; (34e0 <pin_handler_set+0x60>)
    349e:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    34a2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    34a6:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    34a8:	f105 0008 	add.w	r0, r5, #8
    34ac:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    34b0:	025b      	lsls	r3, r3, #9
    34b2:	b29b      	uxth	r3, r3
    34b4:	4313      	orrs	r3, r2
    34b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    34ba:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    34be:	4809      	ldr	r0, [pc, #36]	; (34e4 <pin_handler_set+0x64>)
}
    34c0:	b002      	add	sp, #8
    34c2:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    34c4:	f10d 0107 	add.w	r1, sp, #7
    34c8:	4807      	ldr	r0, [pc, #28]	; (34e8 <pin_handler_set+0x68>)
    34ca:	f7ff fd57 	bl	2f7c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    34ce:	4b05      	ldr	r3, [pc, #20]	; (34e4 <pin_handler_set+0x64>)
    34d0:	4298      	cmp	r0, r3
    34d2:	d1f5      	bne.n	34c0 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    34d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    34d8:	e7e0      	b.n	349c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    34da:	4802      	ldr	r0, [pc, #8]	; (34e4 <pin_handler_set+0x64>)
    34dc:	e7f0      	b.n	34c0 <pin_handler_set+0x40>
    34de:	bf00      	nop
    34e0:	20000198 	.word	0x20000198
    34e4:	0bad0000 	.word	0x0bad0000
    34e8:	2000020c 	.word	0x2000020c

000034ec <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    34ec:	b570      	push	{r4, r5, r6, lr}
    34ee:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    34f0:	466a      	mov	r2, sp
    34f2:	2102      	movs	r1, #2
    34f4:	2000      	movs	r0, #0
    34f6:	f7ff fe73 	bl	31e0 <nrf_gpio_latches_read_and_clear>
    34fa:	e03e      	b.n	357a <port_event_handle+0x8e>
    34fc:	4e21      	ldr	r6, [pc, #132]	; (3584 <port_event_handle+0x98>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    34fe:	f105 0380 	add.w	r3, r5, #128	; 0x80
    3502:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    3506:	f3c2 4201 	ubfx	r2, r2, #16, #2
    350a:	f7ff ff37 	bl	337c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    350e:	2301      	movs	r3, #1
    3510:	40ab      	lsls	r3, r5
    3512:	6233      	str	r3, [r6, #32]
            while (latch[i])
    3514:	ab02      	add	r3, sp, #8
    3516:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    351a:	f853 0c08 	ldr.w	r0, [r3, #-8]
    351e:	b1f8      	cbz	r0, 3560 <port_event_handle+0x74>
                uint32_t pin = NRF_CTZ(latch[i]);
    3520:	fa90 f0a0 	rbit	r0, r0
    3524:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    3528:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    352c:	f100 0208 	add.w	r2, r0, #8
    3530:	4b15      	ldr	r3, [pc, #84]	; (3588 <port_event_handle+0x9c>)
    3532:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    3536:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    353a:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    353c:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3540:	f81d 2005 	ldrb.w	r2, [sp, r5]
    3544:	2301      	movs	r3, #1
    3546:	40b3      	lsls	r3, r6
    3548:	43db      	mvns	r3, r3
    354a:	b25b      	sxtb	r3, r3
    354c:	4013      	ands	r3, r2
    354e:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    3552:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    3556:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3558:	2b01      	cmp	r3, #1
    355a:	d0cf      	beq.n	34fc <port_event_handle+0x10>
        case 0: return NRF_P0;
    355c:	4e0b      	ldr	r6, [pc, #44]	; (358c <port_event_handle+0xa0>)
    355e:	e7ce      	b.n	34fe <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3560:	3401      	adds	r4, #1
    3562:	2c01      	cmp	r4, #1
    3564:	d9d6      	bls.n	3514 <port_event_handle+0x28>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3566:	4b0a      	ldr	r3, [pc, #40]	; (3590 <port_event_handle+0xa4>)
    3568:	2200      	movs	r2, #0
    356a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    356e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    3572:	4668      	mov	r0, sp
    3574:	f003 fd04 	bl	6f80 <latch_pending_read_and_check>
    3578:	b108      	cbz	r0, 357e <port_event_handle+0x92>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    357a:	2400      	movs	r4, #0
    357c:	e7f1      	b.n	3562 <port_event_handle+0x76>
}
    357e:	b002      	add	sp, #8
    3580:	bd70      	pop	{r4, r5, r6, pc}
    3582:	bf00      	nop
    3584:	50842800 	.word	0x50842800
    3588:	20000198 	.word	0x20000198
    358c:	50842500 	.word	0x50842500
    3590:	5000d000 	.word	0x5000d000

00003594 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    3594:	b538      	push	{r3, r4, r5, lr}
    3596:	4604      	mov	r4, r0
    while (mask)
    3598:	e018      	b.n	35cc <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    359a:	fa94 f3a4 	rbit	r3, r4
    359e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    35a2:	2201      	movs	r2, #1
    35a4:	409a      	lsls	r2, r3
    35a6:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    35aa:	4a0a      	ldr	r2, [pc, #40]	; (35d4 <gpiote_evt_handle+0x40>)
    35ac:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    35b0:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    35b4:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    35b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    35bc:	f3c0 4001 	ubfx	r0, r0, #16, #2
    35c0:	f003 fcd7 	bl	6f72 <gpiote_polarity_to_trigger>
    35c4:	4601      	mov	r1, r0
    35c6:	4628      	mov	r0, r5
    35c8:	f7ff fec2 	bl	3350 <call_handler>
    while (mask)
    35cc:	2c00      	cmp	r4, #0
    35ce:	d1e4      	bne.n	359a <gpiote_evt_handle+0x6>
    }
}
    35d0:	bd38      	pop	{r3, r4, r5, pc}
    35d2:	bf00      	nop
    35d4:	5000d000 	.word	0x5000d000

000035d8 <nrfx_gpiote_input_configure>:
{
    35d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35dc:	b084      	sub	sp, #16
    35de:	4604      	mov	r4, r0
    35e0:	4615      	mov	r5, r2
    35e2:	461e      	mov	r6, r3
    if (p_input_config)
    35e4:	b309      	cbz	r1, 362a <nrfx_gpiote_input_configure+0x52>
    35e6:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    35e8:	f003 fcad 	bl	6f46 <pin_is_task_output>
    35ec:	2800      	cmp	r0, #0
    35ee:	d13f      	bne.n	3670 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    35f0:	2300      	movs	r3, #0
    35f2:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    35f6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    35fa:	9301      	str	r3, [sp, #4]
    35fc:	9300      	str	r3, [sp, #0]
    35fe:	463b      	mov	r3, r7
    3600:	f10d 020f 	add.w	r2, sp, #15
    3604:	f10d 010e 	add.w	r1, sp, #14
    3608:	4620      	mov	r0, r4
    360a:	f7ff fd77 	bl	30fc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    360e:	4a39      	ldr	r2, [pc, #228]	; (36f4 <nrfx_gpiote_input_configure+0x11c>)
    3610:	f104 0108 	add.w	r1, r4, #8
    3614:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3618:	f023 0302 	bic.w	r3, r3, #2
    361c:	b29b      	uxth	r3, r3
    361e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    3622:	f043 0301 	orr.w	r3, r3, #1
    3626:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    362a:	b1bd      	cbz	r5, 365c <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    362c:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    362e:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    3632:	4620      	mov	r0, r4
    3634:	f7ff fe14 	bl	3260 <pin_is_output>
    3638:	b1e0      	cbz	r0, 3674 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    363a:	f1b8 0f00 	cmp.w	r8, #0
    363e:	d153      	bne.n	36e8 <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3640:	4a2c      	ldr	r2, [pc, #176]	; (36f4 <nrfx_gpiote_input_configure+0x11c>)
    3642:	f104 0108 	add.w	r1, r4, #8
    3646:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    364a:	f023 031c 	bic.w	r3, r3, #28
    364e:	b29b      	uxth	r3, r3
    3650:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3654:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    3658:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    365c:	2e00      	cmp	r6, #0
    365e:	d047      	beq.n	36f0 <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3660:	6872      	ldr	r2, [r6, #4]
    3662:	6831      	ldr	r1, [r6, #0]
    3664:	4620      	mov	r0, r4
    3666:	f7ff ff0b 	bl	3480 <pin_handler_set>
}
    366a:	b004      	add	sp, #16
    366c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3670:	4821      	ldr	r0, [pc, #132]	; (36f8 <nrfx_gpiote_input_configure+0x120>)
    3672:	e7fa      	b.n	366a <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3674:	4a1f      	ldr	r2, [pc, #124]	; (36f4 <nrfx_gpiote_input_configure+0x11c>)
    3676:	f104 0108 	add.w	r1, r4, #8
    367a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    367e:	f023 0320 	bic.w	r3, r3, #32
    3682:	04db      	lsls	r3, r3, #19
    3684:	0cdb      	lsrs	r3, r3, #19
    3686:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    368a:	f1b8 0f00 	cmp.w	r8, #0
    368e:	d0d7      	beq.n	3640 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    3690:	2f03      	cmp	r7, #3
    3692:	d82b      	bhi.n	36ec <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3694:	686b      	ldr	r3, [r5, #4]
    3696:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3698:	b947      	cbnz	r7, 36ac <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
    369a:	4b18      	ldr	r3, [pc, #96]	; (36fc <nrfx_gpiote_input_configure+0x124>)
    369c:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    36a0:	2200      	movs	r2, #0
    36a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    36a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    36aa:	e7c9      	b.n	3640 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    36ac:	4638      	mov	r0, r7
    36ae:	f003 fc61 	bl	6f74 <gpiote_trigger_to_polarity>
    36b2:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    36b4:	4811      	ldr	r0, [pc, #68]	; (36fc <nrfx_gpiote_input_configure+0x124>)
    36b6:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    36ba:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    36be:	f022 0203 	bic.w	r2, r2, #3
    36c2:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    36c6:	4622      	mov	r2, r4
    36c8:	4629      	mov	r1, r5
    36ca:	f003 fbf4 	bl	6eb6 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    36ce:	4a09      	ldr	r2, [pc, #36]	; (36f4 <nrfx_gpiote_input_configure+0x11c>)
    36d0:	f104 0108 	add.w	r1, r4, #8
    36d4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    36d8:	036d      	lsls	r5, r5, #13
    36da:	b2ad      	uxth	r5, r5
    36dc:	432b      	orrs	r3, r5
    36de:	f043 0320 	orr.w	r3, r3, #32
    36e2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    36e6:	e7ab      	b.n	3640 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    36e8:	4803      	ldr	r0, [pc, #12]	; (36f8 <nrfx_gpiote_input_configure+0x120>)
    36ea:	e7be      	b.n	366a <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    36ec:	4802      	ldr	r0, [pc, #8]	; (36f8 <nrfx_gpiote_input_configure+0x120>)
    36ee:	e7bc      	b.n	366a <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    36f0:	4803      	ldr	r0, [pc, #12]	; (3700 <nrfx_gpiote_input_configure+0x128>)
    36f2:	e7ba      	b.n	366a <nrfx_gpiote_input_configure+0x92>
    36f4:	20000198 	.word	0x20000198
    36f8:	0bad0004 	.word	0x0bad0004
    36fc:	5000d000 	.word	0x5000d000
    3700:	0bad0000 	.word	0x0bad0000

00003704 <nrfx_gpiote_output_configure>:
{
    3704:	b570      	push	{r4, r5, r6, lr}
    3706:	b084      	sub	sp, #16
    3708:	4604      	mov	r4, r0
    370a:	4615      	mov	r5, r2
    if (p_config)
    370c:	b329      	cbz	r1, 375a <nrfx_gpiote_output_configure+0x56>
    370e:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3710:	f003 fc28 	bl	6f64 <pin_is_input>
    3714:	b120      	cbz	r0, 3720 <nrfx_gpiote_output_configure+0x1c>
    3716:	4620      	mov	r0, r4
    3718:	f7ff fd8c 	bl	3234 <pin_in_use_by_te>
    371c:	2800      	cmp	r0, #0
    371e:	d13a      	bne.n	3796 <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3720:	4620      	mov	r0, r4
    3722:	f7ff fd91 	bl	3248 <pin_has_trigger>
    3726:	b110      	cbz	r0, 372e <nrfx_gpiote_output_configure+0x2a>
    3728:	7873      	ldrb	r3, [r6, #1]
    372a:	2b01      	cmp	r3, #1
    372c:	d033      	beq.n	3796 <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    372e:	2301      	movs	r3, #1
    3730:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    3734:	2300      	movs	r3, #0
    3736:	9301      	str	r3, [sp, #4]
    3738:	9600      	str	r6, [sp, #0]
    373a:	1cb3      	adds	r3, r6, #2
    373c:	1c72      	adds	r2, r6, #1
    373e:	f10d 010f 	add.w	r1, sp, #15
    3742:	4620      	mov	r0, r4
    3744:	f7ff fcda 	bl	30fc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3748:	4a20      	ldr	r2, [pc, #128]	; (37cc <nrfx_gpiote_output_configure+0xc8>)
    374a:	f104 0108 	add.w	r1, r4, #8
    374e:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3752:	f043 0303 	orr.w	r3, r3, #3
    3756:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    375a:	b395      	cbz	r5, 37c2 <nrfx_gpiote_output_configure+0xbe>
        if (pin_is_input(pin))
    375c:	4620      	mov	r0, r4
    375e:	f003 fc01 	bl	6f64 <pin_is_input>
    3762:	bb80      	cbnz	r0, 37c6 <nrfx_gpiote_output_configure+0xc2>
        uint32_t ch = p_task_config->task_ch;
    3764:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    3766:	4b1a      	ldr	r3, [pc, #104]	; (37d0 <nrfx_gpiote_output_configure+0xcc>)
    3768:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    376c:	2100      	movs	r1, #0
    376e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
    3772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3776:	4a15      	ldr	r2, [pc, #84]	; (37cc <nrfx_gpiote_output_configure+0xc8>)
    3778:	f104 0108 	add.w	r1, r4, #8
    377c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3780:	f023 0320 	bic.w	r3, r3, #32
    3784:	04db      	lsls	r3, r3, #19
    3786:	0cdb      	lsrs	r3, r3, #19
    3788:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    378c:	786b      	ldrb	r3, [r5, #1]
    378e:	b923      	cbnz	r3, 379a <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
    3790:	4810      	ldr	r0, [pc, #64]	; (37d4 <nrfx_gpiote_output_configure+0xd0>)
}
    3792:	b004      	add	sp, #16
    3794:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3796:	4810      	ldr	r0, [pc, #64]	; (37d8 <nrfx_gpiote_output_configure+0xd4>)
    3798:	e7fb      	b.n	3792 <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
    379a:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    379c:	9200      	str	r2, [sp, #0]
    379e:	4622      	mov	r2, r4
    37a0:	4631      	mov	r1, r6
    37a2:	480b      	ldr	r0, [pc, #44]	; (37d0 <nrfx_gpiote_output_configure+0xcc>)
    37a4:	f003 fba0 	bl	6ee8 <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    37a8:	4a08      	ldr	r2, [pc, #32]	; (37cc <nrfx_gpiote_output_configure+0xc8>)
    37aa:	3408      	adds	r4, #8
    37ac:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    37b0:	0376      	lsls	r6, r6, #13
    37b2:	b2b6      	uxth	r6, r6
    37b4:	4333      	orrs	r3, r6
    37b6:	f043 0320 	orr.w	r3, r3, #32
    37ba:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    37be:	4805      	ldr	r0, [pc, #20]	; (37d4 <nrfx_gpiote_output_configure+0xd0>)
    37c0:	e7e7      	b.n	3792 <nrfx_gpiote_output_configure+0x8e>
    37c2:	4804      	ldr	r0, [pc, #16]	; (37d4 <nrfx_gpiote_output_configure+0xd0>)
    37c4:	e7e5      	b.n	3792 <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
    37c6:	4804      	ldr	r0, [pc, #16]	; (37d8 <nrfx_gpiote_output_configure+0xd4>)
    37c8:	e7e3      	b.n	3792 <nrfx_gpiote_output_configure+0x8e>
    37ca:	bf00      	nop
    37cc:	20000198 	.word	0x20000198
    37d0:	5000d000 	.word	0x5000d000
    37d4:	0bad0000 	.word	0x0bad0000
    37d8:	0bad0004 	.word	0x0bad0004

000037dc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    37dc:	4b01      	ldr	r3, [pc, #4]	; (37e4 <nrfx_gpiote_global_callback_set+0x8>)
    37de:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    37e0:	60d9      	str	r1, [r3, #12]
}
    37e2:	4770      	bx	lr
    37e4:	20000198 	.word	0x20000198

000037e8 <nrfx_gpiote_channel_get>:
{
    37e8:	b538      	push	{r3, r4, r5, lr}
    37ea:	4604      	mov	r4, r0
    37ec:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    37ee:	f7ff fd21 	bl	3234 <pin_in_use_by_te>
    37f2:	b140      	cbz	r0, 3806 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    37f4:	f104 0008 	add.w	r0, r4, #8
    37f8:	4b04      	ldr	r3, [pc, #16]	; (380c <nrfx_gpiote_channel_get+0x24>)
    37fa:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    37fe:	0b5b      	lsrs	r3, r3, #13
    3800:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    3802:	4803      	ldr	r0, [pc, #12]	; (3810 <nrfx_gpiote_channel_get+0x28>)
}
    3804:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3806:	4803      	ldr	r0, [pc, #12]	; (3814 <nrfx_gpiote_channel_get+0x2c>)
    3808:	e7fc      	b.n	3804 <nrfx_gpiote_channel_get+0x1c>
    380a:	bf00      	nop
    380c:	20000198 	.word	0x20000198
    3810:	0bad0000 	.word	0x0bad0000
    3814:	0bad0004 	.word	0x0bad0004

00003818 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    3818:	4b0f      	ldr	r3, [pc, #60]	; (3858 <nrfx_gpiote_init+0x40>)
    381a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    381e:	b10b      	cbz	r3, 3824 <nrfx_gpiote_init+0xc>
        return err_code;
    3820:	480e      	ldr	r0, [pc, #56]	; (385c <nrfx_gpiote_init+0x44>)
}
    3822:	4770      	bx	lr
{
    3824:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3826:	4c0e      	ldr	r4, [pc, #56]	; (3860 <nrfx_gpiote_init+0x48>)
    3828:	2260      	movs	r2, #96	; 0x60
    382a:	2100      	movs	r1, #0
    382c:	4620      	mov	r0, r4
    382e:	f002 f97e 	bl	5b2e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3832:	200d      	movs	r0, #13
    3834:	f002 f865 	bl	5902 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3838:	4b0a      	ldr	r3, [pc, #40]	; (3864 <nrfx_gpiote_init+0x4c>)
    383a:	2200      	movs	r2, #0
    383c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3840:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3844:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3848:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    384c:	2301      	movs	r3, #1
    384e:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3852:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
    3854:	4804      	ldr	r0, [pc, #16]	; (3868 <nrfx_gpiote_init+0x50>)
}
    3856:	bd10      	pop	{r4, pc}
    3858:	20000198 	.word	0x20000198
    385c:	0bad0005 	.word	0x0bad0005
    3860:	200001a8 	.word	0x200001a8
    3864:	5000d000 	.word	0x5000d000
    3868:	0bad0000 	.word	0x0bad0000

0000386c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    386c:	4b03      	ldr	r3, [pc, #12]	; (387c <nrfx_gpiote_is_init+0x10>)
    386e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3872:	3800      	subs	r0, #0
    3874:	bf18      	it	ne
    3876:	2001      	movne	r0, #1
    3878:	4770      	bx	lr
    387a:	bf00      	nop
    387c:	20000198 	.word	0x20000198

00003880 <nrfx_gpiote_channel_free>:
{
    3880:	b508      	push	{r3, lr}
    3882:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3884:	4801      	ldr	r0, [pc, #4]	; (388c <nrfx_gpiote_channel_free+0xc>)
    3886:	f7ff fb9d 	bl	2fc4 <nrfx_flag32_free>
}
    388a:	bd08      	pop	{r3, pc}
    388c:	20000208 	.word	0x20000208

00003890 <nrfx_gpiote_channel_alloc>:
{
    3890:	b508      	push	{r3, lr}
    3892:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3894:	4801      	ldr	r0, [pc, #4]	; (389c <nrfx_gpiote_channel_alloc+0xc>)
    3896:	f7ff fb71 	bl	2f7c <nrfx_flag32_alloc>
}
    389a:	bd08      	pop	{r3, pc}
    389c:	20000208 	.word	0x20000208

000038a0 <nrfx_gpiote_trigger_enable>:
{
    38a0:	b538      	push	{r3, r4, r5, lr}
    38a2:	4604      	mov	r4, r0
    38a4:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    38a6:	f7ff fcc5 	bl	3234 <pin_in_use_by_te>
    38aa:	b300      	cbz	r0, 38ee <nrfx_gpiote_trigger_enable+0x4e>
    38ac:	4620      	mov	r0, r4
    38ae:	f003 fb59 	bl	6f64 <pin_is_input>
    38b2:	b1e0      	cbz	r0, 38ee <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    38b4:	4620      	mov	r0, r4
    38b6:	f7ff fcdd 	bl	3274 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    38ba:	0083      	lsls	r3, r0, #2
    38bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    38c0:	b29b      	uxth	r3, r3
    38c2:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    38c6:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    38ca:	2200      	movs	r2, #0
    38cc:	601a      	str	r2, [r3, #0]
    38ce:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    38d0:	4a0b      	ldr	r2, [pc, #44]	; (3900 <nrfx_gpiote_trigger_enable+0x60>)
    38d2:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    38d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    38da:	f043 0301 	orr.w	r3, r3, #1
    38de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    38e2:	b15d      	cbz	r5, 38fc <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    38e4:	2301      	movs	r3, #1
    38e6:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    38e8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    38ec:	e006      	b.n	38fc <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    38ee:	4620      	mov	r0, r4
    38f0:	f7ff fcf8 	bl	32e4 <get_initial_sense>
    38f4:	4601      	mov	r1, r0
    38f6:	4620      	mov	r0, r4
    38f8:	f003 fb15 	bl	6f26 <nrf_gpio_cfg_sense_set>
}
    38fc:	bd38      	pop	{r3, r4, r5, pc}
    38fe:	bf00      	nop
    3900:	5000d000 	.word	0x5000d000

00003904 <nrfx_gpiote_trigger_disable>:
{
    3904:	b510      	push	{r4, lr}
    3906:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3908:	f7ff fc94 	bl	3234 <pin_in_use_by_te>
    390c:	b1a0      	cbz	r0, 3938 <nrfx_gpiote_trigger_disable+0x34>
    390e:	4620      	mov	r0, r4
    3910:	f003 fb28 	bl	6f64 <pin_is_input>
    3914:	b180      	cbz	r0, 3938 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    3916:	4620      	mov	r0, r4
    3918:	f7ff fcac 	bl	3274 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    391c:	2201      	movs	r2, #1
    391e:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    3920:	4b08      	ldr	r3, [pc, #32]	; (3944 <nrfx_gpiote_trigger_disable+0x40>)
    3922:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3926:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    392a:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    392e:	f022 0203 	bic.w	r2, r2, #3
    3932:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    3936:	e003      	b.n	3940 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3938:	2100      	movs	r1, #0
    393a:	4620      	mov	r0, r4
    393c:	f003 faf3 	bl	6f26 <nrf_gpio_cfg_sense_set>
}
    3940:	bd10      	pop	{r4, pc}
    3942:	bf00      	nop
    3944:	5000d000 	.word	0x5000d000

00003948 <nrfx_gpiote_pin_uninit>:
{
    3948:	b510      	push	{r4, lr}
    394a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    394c:	f7ff fc68 	bl	3220 <pin_in_use>
    3950:	b908      	cbnz	r0, 3956 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    3952:	4806      	ldr	r0, [pc, #24]	; (396c <nrfx_gpiote_pin_uninit+0x24>)
}
    3954:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    3956:	4620      	mov	r0, r4
    3958:	f7ff ffd4 	bl	3904 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    395c:	4620      	mov	r0, r4
    395e:	f7ff fd71 	bl	3444 <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
    3962:	4620      	mov	r0, r4
    3964:	f7ff fc26 	bl	31b4 <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
    3968:	4801      	ldr	r0, [pc, #4]	; (3970 <nrfx_gpiote_pin_uninit+0x28>)
    396a:	e7f3      	b.n	3954 <nrfx_gpiote_pin_uninit+0xc>
    396c:	0bad0004 	.word	0x0bad0004
    3970:	0bad0000 	.word	0x0bad0000

00003974 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3974:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3976:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    3978:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    397c:	2100      	movs	r1, #0
    uint32_t status = 0;
    397e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3980:	e003      	b.n	398a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    3982:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    3984:	3304      	adds	r3, #4
    3986:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3988:	3101      	adds	r1, #1
    398a:	2907      	cmp	r1, #7
    398c:	d814      	bhi.n	39b8 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    398e:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    3992:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3996:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3998:	2a00      	cmp	r2, #0
    399a:	d0f2      	beq.n	3982 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    399c:	4a0c      	ldr	r2, [pc, #48]	; (39d0 <nrfx_gpiote_irq_handler+0x5c>)
    399e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    39a2:	4210      	tst	r0, r2
    39a4:	d0ed      	beq.n	3982 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    39a6:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    39aa:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    39ae:	2500      	movs	r5, #0
    39b0:	6015      	str	r5, [r2, #0]
    39b2:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    39b4:	4304      	orrs	r4, r0
    39b6:	e7e4      	b.n	3982 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    39b8:	4b05      	ldr	r3, [pc, #20]	; (39d0 <nrfx_gpiote_irq_handler+0x5c>)
    39ba:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    39be:	b91b      	cbnz	r3, 39c8 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    39c0:	4620      	mov	r0, r4
    39c2:	f7ff fde7 	bl	3594 <gpiote_evt_handle>
}
    39c6:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    39c8:	f7ff fd90 	bl	34ec <port_event_handle>
    39cc:	e7f8      	b.n	39c0 <nrfx_gpiote_irq_handler+0x4c>
    39ce:	bf00      	nop
    39d0:	5000d000 	.word	0x5000d000

000039d4 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    39d4:	4b03      	ldr	r3, [pc, #12]	; (39e4 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    39d6:	e000      	b.n	39da <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    39d8:	3318      	adds	r3, #24
	while (dev < __device_end) {
    39da:	4a03      	ldr	r2, [pc, #12]	; (39e8 <z_device_state_init+0x14>)
    39dc:	4293      	cmp	r3, r2
    39de:	d3fb      	bcc.n	39d8 <z_device_state_init+0x4>
	}
}
    39e0:	4770      	bx	lr
    39e2:	bf00      	nop
    39e4:	00007564 	.word	0x00007564
    39e8:	000075c4 	.word	0x000075c4

000039ec <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    39ec:	b570      	push	{r4, r5, r6, lr}
    39ee:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    39f0:	4b11      	ldr	r3, [pc, #68]	; (3a38 <z_sys_init_run_level+0x4c>)
    39f2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    39f6:	e009      	b.n	3a0c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    39f8:	4240      	negs	r0, r0
    39fa:	e017      	b.n	3a2c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    39fc:	68eb      	ldr	r3, [r5, #12]
    39fe:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3a00:	68ea      	ldr	r2, [r5, #12]
    3a02:	7853      	ldrb	r3, [r2, #1]
    3a04:	f043 0301 	orr.w	r3, r3, #1
    3a08:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a0a:	3408      	adds	r4, #8
    3a0c:	1c73      	adds	r3, r6, #1
    3a0e:	4a0a      	ldr	r2, [pc, #40]	; (3a38 <z_sys_init_run_level+0x4c>)
    3a10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3a14:	42a3      	cmp	r3, r4
    3a16:	d90d      	bls.n	3a34 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3a18:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    3a1a:	6823      	ldr	r3, [r4, #0]
    3a1c:	4628      	mov	r0, r5
    3a1e:	4798      	blx	r3
		if (dev != NULL) {
    3a20:	2d00      	cmp	r5, #0
    3a22:	d0f2      	beq.n	3a0a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3a24:	2800      	cmp	r0, #0
    3a26:	d0eb      	beq.n	3a00 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3a28:	2800      	cmp	r0, #0
    3a2a:	dbe5      	blt.n	39f8 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    3a2c:	28ff      	cmp	r0, #255	; 0xff
    3a2e:	dde5      	ble.n	39fc <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3a30:	20ff      	movs	r0, #255	; 0xff
    3a32:	e7e3      	b.n	39fc <z_sys_init_run_level+0x10>
		}
	}
}
    3a34:	bd70      	pop	{r4, r5, r6, pc}
    3a36:	bf00      	nop
    3a38:	00007ae8 	.word	0x00007ae8

00003a3c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3a3c:	b510      	push	{r4, lr}
    3a3e:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    3a40:	23b0      	movs	r3, #176	; 0xb0
    3a42:	4c11      	ldr	r4, [pc, #68]	; (3a88 <init_idle_thread+0x4c>)
    3a44:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    3a48:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3a4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3a50:	4b0e      	ldr	r3, [pc, #56]	; (3a8c <init_idle_thread+0x50>)
    3a52:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
    3a56:	4a0e      	ldr	r2, [pc, #56]	; (3a90 <init_idle_thread+0x54>)
    3a58:	9205      	str	r2, [sp, #20]
    3a5a:	2201      	movs	r2, #1
    3a5c:	9204      	str	r2, [sp, #16]
    3a5e:	220f      	movs	r2, #15
    3a60:	9203      	str	r2, [sp, #12]
    3a62:	2200      	movs	r2, #0
    3a64:	9202      	str	r2, [sp, #8]
    3a66:	9201      	str	r2, [sp, #4]
    3a68:	9300      	str	r3, [sp, #0]
    3a6a:	4b0a      	ldr	r3, [pc, #40]	; (3a94 <init_idle_thread+0x58>)
    3a6c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3a70:	4909      	ldr	r1, [pc, #36]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a72:	eb01 118c 	add.w	r1, r1, ip, lsl #6
    3a76:	4620      	mov	r0, r4
    3a78:	f000 f94a 	bl	3d10 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3a7c:	7b63      	ldrb	r3, [r4, #13]
    3a7e:	f023 0304 	bic.w	r3, r3, #4
    3a82:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3a84:	b006      	add	sp, #24
    3a86:	bd10      	pop	{r4, pc}
    3a88:	200002f8 	.word	0x200002f8
    3a8c:	20000aac 	.word	0x20000aac
    3a90:	00007ad8 	.word	0x00007ad8
    3a94:	00003e6d 	.word	0x00003e6d
    3a98:	200014c8 	.word	0x200014c8

00003a9c <bg_thread_main>:
{
    3a9c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3a9e:	4b0a      	ldr	r3, [pc, #40]	; (3ac8 <bg_thread_main+0x2c>)
    3aa0:	2201      	movs	r2, #1
    3aa2:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3aa4:	2003      	movs	r0, #3
    3aa6:	f7ff ffa1 	bl	39ec <z_sys_init_run_level>
	boot_banner();
    3aaa:	f001 f92b 	bl	4d04 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    3aae:	2004      	movs	r0, #4
    3ab0:	f7ff ff9c 	bl	39ec <z_sys_init_run_level>
	z_init_static_threads();
    3ab4:	f000 f990 	bl	3dd8 <z_init_static_threads>
	main();
    3ab8:	f7fc fce2 	bl	480 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3abc:	4a03      	ldr	r2, [pc, #12]	; (3acc <bg_thread_main+0x30>)
    3abe:	7b13      	ldrb	r3, [r2, #12]
    3ac0:	f023 0301 	bic.w	r3, r3, #1
    3ac4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3ac6:	bd08      	pop	{r3, pc}
    3ac8:	20000cc3 	.word	0x20000cc3
    3acc:	200003a8 	.word	0x200003a8

00003ad0 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    3ad0:	b508      	push	{r3, lr}
    3ad2:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3ad4:	4a01      	ldr	r2, [pc, #4]	; (3adc <switch_to_main_thread+0xc>)
    3ad6:	4802      	ldr	r0, [pc, #8]	; (3ae0 <switch_to_main_thread+0x10>)
    3ad8:	f7fd fce6 	bl	14a8 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3adc:	00003a9d 	.word	0x00003a9d
    3ae0:	200003a8 	.word	0x200003a8

00003ae4 <z_bss_zero>:
{
    3ae4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3ae6:	4803      	ldr	r0, [pc, #12]	; (3af4 <z_bss_zero+0x10>)
    3ae8:	4a03      	ldr	r2, [pc, #12]	; (3af8 <z_bss_zero+0x14>)
    3aea:	1a12      	subs	r2, r2, r0
    3aec:	2100      	movs	r1, #0
    3aee:	f003 fa84 	bl	6ffa <z_early_memset>
}
    3af2:	bd08      	pop	{r3, pc}
    3af4:	200002d8 	.word	0x200002d8
    3af8:	20000cc4 	.word	0x20000cc4

00003afc <z_init_cpu>:
{
    3afc:	b510      	push	{r4, lr}
    3afe:	4604      	mov	r4, r0
	init_idle_thread(id);
    3b00:	f7ff ff9c 	bl	3a3c <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3b04:	23b0      	movs	r3, #176	; 0xb0
    3b06:	490a      	ldr	r1, [pc, #40]	; (3b30 <z_init_cpu+0x34>)
    3b08:	fb03 1104 	mla	r1, r3, r4, r1
    3b0c:	4a09      	ldr	r2, [pc, #36]	; (3b34 <z_init_cpu+0x38>)
    3b0e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3b12:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3b16:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    3b18:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3b1a:	4b07      	ldr	r3, [pc, #28]	; (3b38 <z_init_cpu+0x3c>)
    3b1c:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    3b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    3b24:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3b28:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    3b2c:	6053      	str	r3, [r2, #4]
}
    3b2e:	bd10      	pop	{r4, pc}
    3b30:	200002f8 	.word	0x200002f8
    3b34:	20000aac 	.word	0x20000aac
    3b38:	20000cc8 	.word	0x20000cc8

00003b3c <prepare_multithreading>:
{
    3b3c:	b570      	push	{r4, r5, r6, lr}
    3b3e:	b086      	sub	sp, #24
	z_sched_init();
    3b40:	f000 fda6 	bl	4690 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    3b44:	4d10      	ldr	r5, [pc, #64]	; (3b88 <prepare_multithreading+0x4c>)
    3b46:	4b11      	ldr	r3, [pc, #68]	; (3b8c <prepare_multithreading+0x50>)
    3b48:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3b4a:	4b11      	ldr	r3, [pc, #68]	; (3b90 <prepare_multithreading+0x54>)
    3b4c:	9305      	str	r3, [sp, #20]
    3b4e:	2301      	movs	r3, #1
    3b50:	9304      	str	r3, [sp, #16]
    3b52:	2400      	movs	r4, #0
    3b54:	9403      	str	r4, [sp, #12]
    3b56:	9402      	str	r4, [sp, #8]
    3b58:	9401      	str	r4, [sp, #4]
    3b5a:	9400      	str	r4, [sp, #0]
    3b5c:	4b0d      	ldr	r3, [pc, #52]	; (3b94 <prepare_multithreading+0x58>)
    3b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3b62:	490d      	ldr	r1, [pc, #52]	; (3b98 <prepare_multithreading+0x5c>)
    3b64:	4628      	mov	r0, r5
    3b66:	f000 f8d3 	bl	3d10 <z_setup_new_thread>
    3b6a:	4606      	mov	r6, r0
    3b6c:	7b6b      	ldrb	r3, [r5, #13]
    3b6e:	f023 0304 	bic.w	r3, r3, #4
    3b72:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    3b74:	4628      	mov	r0, r5
    3b76:	f003 fb3c 	bl	71f2 <z_ready_thread>
	z_init_cpu(0);
    3b7a:	4620      	mov	r0, r4
    3b7c:	f7ff ffbe 	bl	3afc <z_init_cpu>
}
    3b80:	4630      	mov	r0, r6
    3b82:	b006      	add	sp, #24
    3b84:	bd70      	pop	{r4, r5, r6, pc}
    3b86:	bf00      	nop
    3b88:	200003a8 	.word	0x200003a8
    3b8c:	20000aac 	.word	0x20000aac
    3b90:	00007ae0 	.word	0x00007ae0
    3b94:	00003a9d 	.word	0x00003a9d
    3b98:	20001608 	.word	0x20001608

00003b9c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3b9c:	b500      	push	{lr}
    3b9e:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3ba0:	2000      	movs	r0, #0
    3ba2:	f7ff ff23 	bl	39ec <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3ba6:	4b1d      	ldr	r3, [pc, #116]	; (3c1c <z_cstart+0x80>)
	uint32_t msp =
    3ba8:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3bac:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3bb0:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3bb4:	4c1a      	ldr	r4, [pc, #104]	; (3c20 <z_cstart+0x84>)
    3bb6:	23e0      	movs	r3, #224	; 0xe0
    3bb8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3bbc:	2500      	movs	r5, #0
    3bbe:	77e5      	strb	r5, [r4, #31]
    3bc0:	7625      	strb	r5, [r4, #24]
    3bc2:	7665      	strb	r5, [r4, #25]
    3bc4:	76a5      	strb	r5, [r4, #26]
    3bc6:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3bcc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3bd0:	6263      	str	r3, [r4, #36]	; 0x24
    3bd2:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3bd6:	f7fd fdc7 	bl	1768 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3bda:	f7fd fb7b 	bl	12d4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3be2:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3be4:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3be6:	f7fd fff5 	bl	1bd4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3bea:	f7fd fe8b 	bl	1904 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    3bee:	2401      	movs	r4, #1
    3bf0:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3bf4:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3bf8:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    3bfa:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    3bfc:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    3bfe:	4b09      	ldr	r3, [pc, #36]	; (3c24 <z_cstart+0x88>)
    3c00:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3c04:	f7ff fee6 	bl	39d4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    3c08:	4620      	mov	r0, r4
    3c0a:	f7ff feef 	bl	39ec <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3c0e:	2002      	movs	r0, #2
    3c10:	f7ff feec 	bl	39ec <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3c14:	f7ff ff92 	bl	3b3c <prepare_multithreading>
    3c18:	f7ff ff5a 	bl	3ad0 <switch_to_main_thread>
    3c1c:	20000cc8 	.word	0x20000cc8
    3c20:	e000ed00 	.word	0xe000ed00
    3c24:	20000aac 	.word	0x20000aac

00003c28 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    3c28:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3c2a:	4c06      	ldr	r4, [pc, #24]	; (3c44 <init_mem_slab_module+0x1c>)
	int rc = 0;
    3c2c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3c2e:	e000      	b.n	3c32 <init_mem_slab_module+0xa>
    3c30:	341c      	adds	r4, #28
    3c32:	4b05      	ldr	r3, [pc, #20]	; (3c48 <init_mem_slab_module+0x20>)
    3c34:	429c      	cmp	r4, r3
    3c36:	d204      	bcs.n	3c42 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    3c38:	4620      	mov	r0, r4
    3c3a:	f003 f9e6 	bl	700a <create_free_list>
		if (rc < 0) {
    3c3e:	2800      	cmp	r0, #0
    3c40:	daf6      	bge.n	3c30 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    3c42:	bd10      	pop	{r4, pc}
    3c44:	20000284 	.word	0x20000284
    3c48:	20000284 	.word	0x20000284

00003c4c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3c4c:	b530      	push	{r4, r5, lr}
    3c4e:	b083      	sub	sp, #12
    3c50:	460d      	mov	r5, r1
	__asm__ volatile(
    3c52:	f04f 0120 	mov.w	r1, #32
    3c56:	f3ef 8c11 	mrs	ip, BASEPRI
    3c5a:	f381 8812 	msr	BASEPRI_MAX, r1
    3c5e:	f3bf 8f6f 	isb	sy
    3c62:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3c64:	6944      	ldr	r4, [r0, #20]
    3c66:	b164      	cbz	r4, 3c82 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    3c68:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    3c6a:	6823      	ldr	r3, [r4, #0]
    3c6c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3c6e:	6983      	ldr	r3, [r0, #24]
    3c70:	3301      	adds	r3, #1
    3c72:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3c74:	2000      	movs	r0, #0
	__asm__ volatile(
    3c76:	f381 8811 	msr	BASEPRI, r1
    3c7a:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    3c7e:	b003      	add	sp, #12
    3c80:	bd30      	pop	{r4, r5, pc}
    3c82:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3c86:	ea53 0402 	orrs.w	r4, r3, r2
    3c8a:	d104      	bne.n	3c96 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    3c8c:	2300      	movs	r3, #0
    3c8e:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3c90:	f06f 000b 	mvn.w	r0, #11
    3c94:	e7ef      	b.n	3c76 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3c96:	9200      	str	r2, [sp, #0]
    3c98:	9301      	str	r3, [sp, #4]
    3c9a:	4602      	mov	r2, r0
    3c9c:	4670      	mov	r0, lr
    3c9e:	f000 fbf1 	bl	4484 <z_pend_curr>
		if (result == 0) {
    3ca2:	2800      	cmp	r0, #0
    3ca4:	d1eb      	bne.n	3c7e <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    3ca6:	4b02      	ldr	r3, [pc, #8]	; (3cb0 <k_mem_slab_alloc+0x64>)
    3ca8:	689b      	ldr	r3, [r3, #8]
    3caa:	695b      	ldr	r3, [r3, #20]
    3cac:	602b      	str	r3, [r5, #0]
		return result;
    3cae:	e7e6      	b.n	3c7e <k_mem_slab_alloc+0x32>
    3cb0:	20000aac 	.word	0x20000aac

00003cb4 <z_thread_monitor_exit>:
	__asm__ volatile(
    3cb4:	f04f 0320 	mov.w	r3, #32
    3cb8:	f3ef 8111 	mrs	r1, BASEPRI
    3cbc:	f383 8812 	msr	BASEPRI_MAX, r3
    3cc0:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    3cc4:	4b0a      	ldr	r3, [pc, #40]	; (3cf0 <z_thread_monitor_exit+0x3c>)
    3cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3cc8:	4283      	cmp	r3, r0
    3cca:	d104      	bne.n	3cd6 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    3ccc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3cce:	4b08      	ldr	r3, [pc, #32]	; (3cf0 <z_thread_monitor_exit+0x3c>)
    3cd0:	629a      	str	r2, [r3, #40]	; 0x28
    3cd2:	e007      	b.n	3ce4 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    3cd4:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    3cd6:	b113      	cbz	r3, 3cde <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3cd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    3cda:	4282      	cmp	r2, r0
    3cdc:	d1fa      	bne.n	3cd4 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    3cde:	b10b      	cbz	r3, 3ce4 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3ce0:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3ce2:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    3ce4:	f381 8811 	msr	BASEPRI, r1
    3ce8:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    3cec:	4770      	bx	lr
    3cee:	bf00      	nop
    3cf0:	20000aac 	.word	0x20000aac

00003cf4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    3cf4:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3cf6:	ea53 0102 	orrs.w	r1, r3, r2
    3cfa:	d102      	bne.n	3d02 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    3cfc:	f003 f9eb 	bl	70d6 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3d00:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3d02:	4902      	ldr	r1, [pc, #8]	; (3d0c <schedule_new_thread+0x18>)
    3d04:	3018      	adds	r0, #24
    3d06:	f000 fe2b 	bl	4960 <z_add_timeout>
    3d0a:	e7f9      	b.n	3d00 <schedule_new_thread+0xc>
    3d0c:	0000722b 	.word	0x0000722b

00003d10 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3d14:	b085      	sub	sp, #20
    3d16:	4604      	mov	r4, r0
    3d18:	460f      	mov	r7, r1
    3d1a:	4615      	mov	r5, r2
    3d1c:	461e      	mov	r6, r3
    3d1e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3d22:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3d26:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    3d2a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3d2e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3d32:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    3d34:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    3d36:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3d38:	2204      	movs	r2, #4
    3d3a:	9911      	ldr	r1, [sp, #68]	; 0x44
    3d3c:	f003 f9cf 	bl	70de <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    3d40:	462a      	mov	r2, r5
    3d42:	4639      	mov	r1, r7
    3d44:	4620      	mov	r0, r4
    3d46:	f003 f9b4 	bl	70b2 <setup_thread_stack>
    3d4a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3d4c:	f8cd 8008 	str.w	r8, [sp, #8]
    3d50:	f8cd 9004 	str.w	r9, [sp, #4]
    3d54:	f8cd a000 	str.w	sl, [sp]
    3d58:	4633      	mov	r3, r6
    3d5a:	4602      	mov	r2, r0
    3d5c:	4639      	mov	r1, r7
    3d5e:	4620      	mov	r0, r4
    3d60:	f7fd fb80 	bl	1464 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    3d64:	2300      	movs	r3, #0
    3d66:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    3d68:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    3d6a:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    3d6e:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    3d72:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    3d76:	f04f 0320 	mov.w	r3, #32
    3d7a:	f3ef 8211 	mrs	r2, BASEPRI
    3d7e:	f383 8812 	msr	BASEPRI_MAX, r3
    3d82:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    3d86:	4b13      	ldr	r3, [pc, #76]	; (3dd4 <z_setup_new_thread+0xc4>)
    3d88:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3d8a:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    3d8c:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    3d8e:	f382 8811 	msr	BASEPRI, r2
    3d92:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    3d96:	f1bb 0f00 	cmp.w	fp, #0
    3d9a:	d013      	beq.n	3dc4 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    3d9c:	221f      	movs	r2, #31
    3d9e:	4659      	mov	r1, fp
    3da0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    3da4:	f001 fe67 	bl	5a76 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    3da8:	2300      	movs	r3, #0
    3daa:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    3dae:	4b09      	ldr	r3, [pc, #36]	; (3dd4 <z_setup_new_thread+0xc4>)
    3db0:	689b      	ldr	r3, [r3, #8]
    3db2:	b15b      	cbz	r3, 3dcc <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3db4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3db8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    3dbc:	4628      	mov	r0, r5
    3dbe:	b005      	add	sp, #20
    3dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    3dc4:	2300      	movs	r3, #0
    3dc6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    3dca:	e7f0      	b.n	3dae <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    3dcc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    3dd0:	e7f4      	b.n	3dbc <z_setup_new_thread+0xac>
    3dd2:	bf00      	nop
    3dd4:	20000aac 	.word	0x20000aac

00003dd8 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3dd8:	b530      	push	{r4, r5, lr}
    3dda:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    3ddc:	4c21      	ldr	r4, [pc, #132]	; (3e64 <z_init_static_threads+0x8c>)
    3dde:	e014      	b.n	3e0a <z_init_static_threads+0x32>
		z_setup_new_thread(
    3de0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3de2:	9305      	str	r3, [sp, #20]
    3de4:	6a23      	ldr	r3, [r4, #32]
    3de6:	9304      	str	r3, [sp, #16]
    3de8:	69e3      	ldr	r3, [r4, #28]
    3dea:	9303      	str	r3, [sp, #12]
    3dec:	69a3      	ldr	r3, [r4, #24]
    3dee:	9302      	str	r3, [sp, #8]
    3df0:	6963      	ldr	r3, [r4, #20]
    3df2:	9301      	str	r3, [sp, #4]
    3df4:	6923      	ldr	r3, [r4, #16]
    3df6:	9300      	str	r3, [sp, #0]
    3df8:	68e3      	ldr	r3, [r4, #12]
    3dfa:	68a2      	ldr	r2, [r4, #8]
    3dfc:	6861      	ldr	r1, [r4, #4]
    3dfe:	6820      	ldr	r0, [r4, #0]
    3e00:	f7ff ff86 	bl	3d10 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    3e04:	6823      	ldr	r3, [r4, #0]
    3e06:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3e08:	3430      	adds	r4, #48	; 0x30
    3e0a:	4b17      	ldr	r3, [pc, #92]	; (3e68 <z_init_static_threads+0x90>)
    3e0c:	429c      	cmp	r4, r3
    3e0e:	d3e7      	bcc.n	3de0 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3e10:	f000 f9ea 	bl	41e8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3e14:	4c13      	ldr	r4, [pc, #76]	; (3e64 <z_init_static_threads+0x8c>)
    3e16:	e000      	b.n	3e1a <z_init_static_threads+0x42>
    3e18:	3430      	adds	r4, #48	; 0x30
    3e1a:	4b13      	ldr	r3, [pc, #76]	; (3e68 <z_init_static_threads+0x90>)
    3e1c:	429c      	cmp	r4, r3
    3e1e:	d21c      	bcs.n	3e5a <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3e20:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3e22:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3e26:	d0f7      	beq.n	3e18 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    3e28:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    3e2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    3e2e:	17c1      	asrs	r1, r0, #31
    3e30:	03c9      	lsls	r1, r1, #15
    3e32:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    3e36:	03c0      	lsls	r0, r0, #15
    3e38:	f240 33e7 	movw	r3, #999	; 0x3e7
    3e3c:	18c0      	adds	r0, r0, r3
    3e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3e42:	f04f 0300 	mov.w	r3, #0
    3e46:	f141 0100 	adc.w	r1, r1, #0
    3e4a:	f7fc f983 	bl	154 <__aeabi_uldivmod>
    3e4e:	4602      	mov	r2, r0
    3e50:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    3e52:	4628      	mov	r0, r5
    3e54:	f7ff ff4e 	bl	3cf4 <schedule_new_thread>
    3e58:	e7de      	b.n	3e18 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    3e5a:	f000 fbc7 	bl	45ec <k_sched_unlock>
}
    3e5e:	b007      	add	sp, #28
    3e60:	bd30      	pop	{r4, r5, pc}
    3e62:	bf00      	nop
    3e64:	000077ec 	.word	0x000077ec
    3e68:	000077ec 	.word	0x000077ec

00003e6c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3e6c:	b508      	push	{r3, lr}
    3e6e:	e001      	b.n	3e74 <idle+0x8>
	arch_cpu_idle();
    3e70:	f7fd fa36 	bl	12e0 <arch_cpu_idle>
	__asm__ volatile(
    3e74:	f04f 0220 	mov.w	r2, #32
    3e78:	f3ef 8311 	mrs	r3, BASEPRI
    3e7c:	f382 8812 	msr	BASEPRI_MAX, r2
    3e80:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3e84:	f003 fac5 	bl	7412 <z_get_next_timeout_expiry>
    3e88:	4b05      	ldr	r3, [pc, #20]	; (3ea0 <idle+0x34>)
    3e8a:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    3e8c:	4b05      	ldr	r3, [pc, #20]	; (3ea4 <idle+0x38>)
    3e8e:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3e90:	2b00      	cmp	r3, #0
    3e92:	d0ed      	beq.n	3e70 <idle+0x4>
    3e94:	f7fd f820 	bl	ed8 <pm_system_suspend>
    3e98:	2800      	cmp	r0, #0
    3e9a:	d1eb      	bne.n	3e74 <idle+0x8>
    3e9c:	e7e8      	b.n	3e70 <idle+0x4>
    3e9e:	bf00      	nop
    3ea0:	20000aac 	.word	0x20000aac
    3ea4:	20000cc3 	.word	0x20000cc3

00003ea8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3eac:	b082      	sub	sp, #8
    3eae:	4604      	mov	r4, r0
    3eb0:	461e      	mov	r6, r3
    3eb2:	f04f 0320 	mov.w	r3, #32
    3eb6:	f3ef 8511 	mrs	r5, BASEPRI
    3eba:	f383 8812 	msr	BASEPRI_MAX, r3
    3ebe:	f3bf 8f6f 	isb	sy
    3ec2:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3ec4:	68c1      	ldr	r1, [r0, #12]
    3ec6:	b999      	cbnz	r1, 3ef0 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    3ec8:	2900      	cmp	r1, #0
    3eca:	d151      	bne.n	3f70 <z_impl_k_mutex_lock+0xc8>
    3ecc:	4a36      	ldr	r2, [pc, #216]	; (3fa8 <z_impl_k_mutex_lock+0x100>)
    3ece:	6892      	ldr	r2, [r2, #8]
    3ed0:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3ed4:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    3ed6:	3101      	adds	r1, #1
    3ed8:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    3eda:	4a33      	ldr	r2, [pc, #204]	; (3fa8 <z_impl_k_mutex_lock+0x100>)
    3edc:	6892      	ldr	r2, [r2, #8]
    3ede:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    3ee0:	f383 8811 	msr	BASEPRI, r3
    3ee4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    3ee8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3eea:	b002      	add	sp, #8
    3eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ef0:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3ef2:	6880      	ldr	r0, [r0, #8]
    3ef4:	4a2c      	ldr	r2, [pc, #176]	; (3fa8 <z_impl_k_mutex_lock+0x100>)
    3ef6:	6892      	ldr	r2, [r2, #8]
    3ef8:	4290      	cmp	r0, r2
    3efa:	d0e5      	beq.n	3ec8 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3efc:	ea56 0107 	orrs.w	r1, r6, r7
    3f00:	d038      	beq.n	3f74 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
    3f02:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3f06:	4641      	mov	r1, r8
    3f08:	f992 000e 	ldrsb.w	r0, [r2, #14]
    3f0c:	f003 f8f8 	bl	7100 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3f10:	4580      	cmp	r8, r0
    3f12:	dc36      	bgt.n	3f82 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
    3f14:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3f18:	9700      	str	r7, [sp, #0]
    3f1a:	9601      	str	r6, [sp, #4]
    3f1c:	4622      	mov	r2, r4
    3f1e:	4629      	mov	r1, r5
    3f20:	4822      	ldr	r0, [pc, #136]	; (3fac <z_impl_k_mutex_lock+0x104>)
    3f22:	f000 faaf 	bl	4484 <z_pend_curr>
	if (got_mutex == 0) {
    3f26:	2800      	cmp	r0, #0
    3f28:	d0df      	beq.n	3eea <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    3f2a:	f04f 0320 	mov.w	r3, #32
    3f2e:	f3ef 8511 	mrs	r5, BASEPRI
    3f32:	f383 8812 	msr	BASEPRI_MAX, r3
    3f36:	f3bf 8f6f 	isb	sy
    3f3a:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    3f3c:	68a3      	ldr	r3, [r4, #8]
    3f3e:	b343      	cbz	r3, 3f92 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3f40:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f42:	429c      	cmp	r4, r3
    3f44:	d023      	beq.n	3f8e <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3f46:	b313      	cbz	r3, 3f8e <z_impl_k_mutex_lock+0xe6>
    3f48:	6921      	ldr	r1, [r4, #16]
    3f4a:	f993 000e 	ldrsb.w	r0, [r3, #14]
    3f4e:	f003 f8d7 	bl	7100 <new_prio_for_inheritance>
    3f52:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    3f54:	4620      	mov	r0, r4
    3f56:	f003 f8de 	bl	7116 <adjust_owner_prio>
    3f5a:	b9e8      	cbnz	r0, 3f98 <z_impl_k_mutex_lock+0xf0>
    3f5c:	f1b8 0f00 	cmp.w	r8, #0
    3f60:	d11a      	bne.n	3f98 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
    3f62:	f386 8811 	msr	BASEPRI, r6
    3f66:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    3f6a:	f06f 000a 	mvn.w	r0, #10
    3f6e:	e7bc      	b.n	3eea <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    3f70:	6922      	ldr	r2, [r4, #16]
    3f72:	e7af      	b.n	3ed4 <z_impl_k_mutex_lock+0x2c>
    3f74:	f385 8811 	msr	BASEPRI, r5
    3f78:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    3f7c:	f06f 000f 	mvn.w	r0, #15
    3f80:	e7b3      	b.n	3eea <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    3f82:	4601      	mov	r1, r0
    3f84:	4620      	mov	r0, r4
    3f86:	f003 f8c6 	bl	7116 <adjust_owner_prio>
    3f8a:	4680      	mov	r8, r0
    3f8c:	e7c4      	b.n	3f18 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3f8e:	6921      	ldr	r1, [r4, #16]
    3f90:	e7e0      	b.n	3f54 <z_impl_k_mutex_lock+0xac>
	if (resched) {
    3f92:	f1b8 0f00 	cmp.w	r8, #0
    3f96:	d0e4      	beq.n	3f62 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
    3f98:	4629      	mov	r1, r5
    3f9a:	4804      	ldr	r0, [pc, #16]	; (3fac <z_impl_k_mutex_lock+0x104>)
    3f9c:	f000 f90e 	bl	41bc <z_reschedule>
	return -EAGAIN;
    3fa0:	f06f 000a 	mvn.w	r0, #10
    3fa4:	e7a1      	b.n	3eea <z_impl_k_mutex_lock+0x42>
    3fa6:	bf00      	nop
    3fa8:	20000aac 	.word	0x20000aac
    3fac:	20000ad8 	.word	0x20000ad8

00003fb0 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3fb0:	6883      	ldr	r3, [r0, #8]
    3fb2:	b38b      	cbz	r3, 4018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
{
    3fb4:	b570      	push	{r4, r5, r6, lr}
    3fb6:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3fb8:	4a1a      	ldr	r2, [pc, #104]	; (4024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
    3fba:	6892      	ldr	r2, [r2, #8]
    3fbc:	4293      	cmp	r3, r2
    3fbe:	d12e      	bne.n	401e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3fc0:	68c3      	ldr	r3, [r0, #12]
    3fc2:	2b01      	cmp	r3, #1
    3fc4:	d903      	bls.n	3fce <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    3fc6:	3b01      	subs	r3, #1
    3fc8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    3fca:	2000      	movs	r0, #0
}
    3fcc:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    3fce:	f04f 0320 	mov.w	r3, #32
    3fd2:	f3ef 8511 	mrs	r5, BASEPRI
    3fd6:	f383 8812 	msr	BASEPRI_MAX, r3
    3fda:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3fde:	6901      	ldr	r1, [r0, #16]
    3fe0:	f003 f899 	bl	7116 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3fe4:	4620      	mov	r0, r4
    3fe6:	f003 f9b9 	bl	735c <z_unpend_first_thread>
	mutex->owner = new_owner;
    3fea:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3fec:	b168      	cbz	r0, 400a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
		mutex->owner_orig_prio = new_owner->base.prio;
    3fee:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3ff2:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3ff4:	2400      	movs	r4, #0
    3ff6:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    3ffa:	f003 f8fa 	bl	71f2 <z_ready_thread>
		z_reschedule(&lock, key);
    3ffe:	4629      	mov	r1, r5
    4000:	4809      	ldr	r0, [pc, #36]	; (4028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
    4002:	f000 f8db 	bl	41bc <z_reschedule>
	return 0;
    4006:	4620      	mov	r0, r4
    4008:	e7e0      	b.n	3fcc <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    400a:	2000      	movs	r0, #0
    400c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    400e:	f385 8811 	msr	BASEPRI, r5
    4012:	f3bf 8f6f 	isb	sy
    4016:	e7d9      	b.n	3fcc <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    4018:	f06f 0015 	mvn.w	r0, #21
}
    401c:	4770      	bx	lr
		return -EPERM;
    401e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4022:	e7d3      	b.n	3fcc <z_impl_k_mutex_unlock+0x1c>
    4024:	20000aac 	.word	0x20000aac
    4028:	20000ad8 	.word	0x20000ad8

0000402c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    402c:	b538      	push	{r3, r4, r5, lr}
    402e:	4604      	mov	r4, r0
	__asm__ volatile(
    4030:	f04f 0320 	mov.w	r3, #32
    4034:	f3ef 8511 	mrs	r5, BASEPRI
    4038:	f383 8812 	msr	BASEPRI_MAX, r3
    403c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    4040:	f003 f98c 	bl	735c <z_unpend_first_thread>

	if (thread != NULL) {
    4044:	b148      	cbz	r0, 405a <z_impl_k_sem_give+0x2e>
    4046:	2200      	movs	r2, #0
    4048:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    404c:	f003 f8d1 	bl	71f2 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    4050:	4629      	mov	r1, r5
    4052:	4807      	ldr	r0, [pc, #28]	; (4070 <z_impl_k_sem_give+0x44>)
    4054:	f000 f8b2 	bl	41bc <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    4058:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    405a:	68a3      	ldr	r3, [r4, #8]
    405c:	68e2      	ldr	r2, [r4, #12]
    405e:	4293      	cmp	r3, r2
    4060:	d003      	beq.n	406a <z_impl_k_sem_give+0x3e>
    4062:	2201      	movs	r2, #1
    4064:	4413      	add	r3, r2
    4066:	60a3      	str	r3, [r4, #8]
}
    4068:	e7f2      	b.n	4050 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    406a:	2200      	movs	r2, #0
    406c:	e7fa      	b.n	4064 <z_impl_k_sem_give+0x38>
    406e:	bf00      	nop
    4070:	20000ad8 	.word	0x20000ad8

00004074 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4074:	b510      	push	{r4, lr}
    4076:	b082      	sub	sp, #8
    4078:	f04f 0420 	mov.w	r4, #32
    407c:	f3ef 8111 	mrs	r1, BASEPRI
    4080:	f384 8812 	msr	BASEPRI_MAX, r4
    4084:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4088:	6884      	ldr	r4, [r0, #8]
    408a:	b144      	cbz	r4, 409e <z_impl_k_sem_take+0x2a>
		sem->count--;
    408c:	3c01      	subs	r4, #1
    408e:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4090:	f381 8811 	msr	BASEPRI, r1
    4094:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4098:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    409a:	b002      	add	sp, #8
    409c:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    409e:	ea53 0402 	orrs.w	r4, r3, r2
    40a2:	d006      	beq.n	40b2 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    40a4:	9200      	str	r2, [sp, #0]
    40a6:	9301      	str	r3, [sp, #4]
    40a8:	4602      	mov	r2, r0
    40aa:	4805      	ldr	r0, [pc, #20]	; (40c0 <z_impl_k_sem_take+0x4c>)
    40ac:	f000 f9ea 	bl	4484 <z_pend_curr>
	return ret;
    40b0:	e7f3      	b.n	409a <z_impl_k_sem_take+0x26>
    40b2:	f381 8811 	msr	BASEPRI, r1
    40b6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    40ba:	f06f 000f 	mvn.w	r0, #15
    40be:	e7ec      	b.n	409a <z_impl_k_sem_take+0x26>
    40c0:	20000ad8 	.word	0x20000ad8

000040c4 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    40c4:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
    40c6:	2b7f      	cmp	r3, #127	; 0x7f
    40c8:	d80e      	bhi.n	40e8 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
    40ca:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    40cc:	f013 0f1f 	tst.w	r3, #31
    40d0:	d10c      	bne.n	40ec <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    40d2:	f990 200e 	ldrsb.w	r2, [r0, #14]
    40d6:	4b08      	ldr	r3, [pc, #32]	; (40f8 <sliceable+0x34>)
    40d8:	681b      	ldr	r3, [r3, #0]
    40da:	429a      	cmp	r2, r3
    40dc:	db08      	blt.n	40f0 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    40de:	4b07      	ldr	r3, [pc, #28]	; (40fc <sliceable+0x38>)
    40e0:	4298      	cmp	r0, r3
    40e2:	d007      	beq.n	40f4 <sliceable+0x30>
    40e4:	2001      	movs	r0, #1
    40e6:	4770      	bx	lr
    40e8:	2000      	movs	r0, #0
    40ea:	4770      	bx	lr
    40ec:	2000      	movs	r0, #0
    40ee:	4770      	bx	lr
    40f0:	2000      	movs	r0, #0
    40f2:	4770      	bx	lr
    40f4:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    40f6:	4770      	bx	lr
    40f8:	20000adc 	.word	0x20000adc
    40fc:	200002f8 	.word	0x200002f8

00004100 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4104:	bf08      	it	eq
    4106:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    410a:	d100      	bne.n	410e <add_thread_timeout+0xe>
    410c:	4770      	bx	lr
{
    410e:	b508      	push	{r3, lr}
    4110:	4902      	ldr	r1, [pc, #8]	; (411c <add_thread_timeout+0x1c>)
    4112:	3018      	adds	r0, #24
    4114:	f000 fc24 	bl	4960 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    4118:	bd08      	pop	{r3, pc}
    411a:	bf00      	nop
    411c:	0000722b 	.word	0x0000722b

00004120 <z_reset_time_slice>:
{
    4120:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    4122:	4b07      	ldr	r3, [pc, #28]	; (4140 <z_reset_time_slice+0x20>)
    4124:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    4126:	b904      	cbnz	r4, 412a <z_reset_time_slice+0xa>
}
    4128:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    412a:	f7fe fce9 	bl	2b00 <sys_clock_elapsed>
    412e:	4404      	add	r4, r0
    4130:	4b04      	ldr	r3, [pc, #16]	; (4144 <z_reset_time_slice+0x24>)
    4132:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    4134:	2100      	movs	r1, #0
    4136:	4b02      	ldr	r3, [pc, #8]	; (4140 <z_reset_time_slice+0x20>)
    4138:	6818      	ldr	r0, [r3, #0]
    413a:	f003 f981 	bl	7440 <z_set_timeout_expiry>
}
    413e:	e7f3      	b.n	4128 <z_reset_time_slice+0x8>
    4140:	20000ae0 	.word	0x20000ae0
    4144:	20000aac 	.word	0x20000aac

00004148 <k_sched_time_slice_set>:
{
    4148:	b570      	push	{r4, r5, r6, lr}
    414a:	4604      	mov	r4, r0
    414c:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    414e:	2300      	movs	r3, #0
	__asm__ volatile(
    4150:	f04f 0220 	mov.w	r2, #32
    4154:	f3ef 8511 	mrs	r5, BASEPRI
    4158:	f382 8812 	msr	BASEPRI_MAX, r2
    415c:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    4160:	e00e      	b.n	4180 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    4162:	2802      	cmp	r0, #2
    4164:	bfb8      	it	lt
    4166:	2002      	movlt	r0, #2
    4168:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    416a:	4b11      	ldr	r3, [pc, #68]	; (41b0 <k_sched_time_slice_set+0x68>)
    416c:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
    416e:	4b11      	ldr	r3, [pc, #68]	; (41b4 <k_sched_time_slice_set+0x6c>)
    4170:	6898      	ldr	r0, [r3, #8]
    4172:	f7ff ffd5 	bl	4120 <z_reset_time_slice>
	__asm__ volatile(
    4176:	f385 8811 	msr	BASEPRI, r5
    417a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    417e:	2301      	movs	r3, #1
    4180:	b9a3      	cbnz	r3, 41ac <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    4182:	4b0c      	ldr	r3, [pc, #48]	; (41b4 <k_sched_time_slice_set+0x6c>)
    4184:	2200      	movs	r2, #0
    4186:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    4188:	0c61      	lsrs	r1, r4, #17
    418a:	03e0      	lsls	r0, r4, #15
    418c:	f240 33e7 	movw	r3, #999	; 0x3e7
    4190:	18c0      	adds	r0, r0, r3
    4192:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4196:	f04f 0300 	mov.w	r3, #0
    419a:	f141 0100 	adc.w	r1, r1, #0
    419e:	f7fb ffd9 	bl	154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    41a2:	4b05      	ldr	r3, [pc, #20]	; (41b8 <k_sched_time_slice_set+0x70>)
    41a4:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    41a6:	2c00      	cmp	r4, #0
    41a8:	dcdb      	bgt.n	4162 <k_sched_time_slice_set+0x1a>
    41aa:	e7de      	b.n	416a <k_sched_time_slice_set+0x22>
}
    41ac:	bd70      	pop	{r4, r5, r6, pc}
    41ae:	bf00      	nop
    41b0:	20000adc 	.word	0x20000adc
    41b4:	20000aac 	.word	0x20000aac
    41b8:	20000ae0 	.word	0x20000ae0

000041bc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    41bc:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    41be:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    41c0:	b959      	cbnz	r1, 41da <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    41c2:	f3ef 8205 	mrs	r2, IPSR
    41c6:	b942      	cbnz	r2, 41da <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    41c8:	4a06      	ldr	r2, [pc, #24]	; (41e4 <z_reschedule+0x28>)
    41ca:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
    41cc:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    41ce:	4290      	cmp	r0, r2
    41d0:	d003      	beq.n	41da <z_reschedule+0x1e>
	ret = arch_swap(key);
    41d2:	4608      	mov	r0, r1
    41d4:	f7fd f8ec 	bl	13b0 <arch_swap>
		z_swap(lock, key);
    41d8:	e003      	b.n	41e2 <z_reschedule+0x26>
    41da:	f383 8811 	msr	BASEPRI, r3
    41de:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    41e2:	bd08      	pop	{r3, pc}
    41e4:	20000aac 	.word	0x20000aac

000041e8 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    41e8:	2300      	movs	r3, #0
	__asm__ volatile(
    41ea:	f04f 0220 	mov.w	r2, #32
    41ee:	f3ef 8111 	mrs	r1, BASEPRI
    41f2:	f382 8812 	msr	BASEPRI_MAX, r2
    41f6:	f3bf 8f6f 	isb	sy
    41fa:	e009      	b.n	4210 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    41fc:	4b06      	ldr	r3, [pc, #24]	; (4218 <k_sched_lock+0x30>)
    41fe:	689a      	ldr	r2, [r3, #8]
    4200:	7bd3      	ldrb	r3, [r2, #15]
    4202:	3b01      	subs	r3, #1
    4204:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4206:	f381 8811 	msr	BASEPRI, r1
    420a:	f3bf 8f6f 	isb	sy
    420e:	2301      	movs	r3, #1
    4210:	2b00      	cmp	r3, #0
    4212:	d0f3      	beq.n	41fc <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    4214:	4770      	bx	lr
    4216:	bf00      	nop
    4218:	20000aac 	.word	0x20000aac

0000421c <update_cache>:
{
    421c:	b538      	push	{r3, r4, r5, lr}
    421e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    4220:	4810      	ldr	r0, [pc, #64]	; (4264 <update_cache+0x48>)
    4222:	f002 ffdf 	bl	71e4 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4226:	4605      	mov	r5, r0
    4228:	b170      	cbz	r0, 4248 <update_cache+0x2c>
	if (preempt_ok != 0) {
    422a:	b984      	cbnz	r4, 424e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    422c:	4b0e      	ldr	r3, [pc, #56]	; (4268 <update_cache+0x4c>)
    422e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4230:	7b5a      	ldrb	r2, [r3, #13]
    4232:	f012 0f1f 	tst.w	r2, #31
    4236:	d10a      	bne.n	424e <update_cache+0x32>
	return node->next != NULL;
    4238:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    423a:	b942      	cbnz	r2, 424e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    423c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    423e:	2a7f      	cmp	r2, #127	; 0x7f
    4240:	d905      	bls.n	424e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    4242:	4a09      	ldr	r2, [pc, #36]	; (4268 <update_cache+0x4c>)
    4244:	61d3      	str	r3, [r2, #28]
    4246:	e00b      	b.n	4260 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    4248:	4b07      	ldr	r3, [pc, #28]	; (4268 <update_cache+0x4c>)
    424a:	68dd      	ldr	r5, [r3, #12]
    424c:	e7ed      	b.n	422a <update_cache+0xe>
		if (thread != _current) {
    424e:	4b06      	ldr	r3, [pc, #24]	; (4268 <update_cache+0x4c>)
    4250:	689b      	ldr	r3, [r3, #8]
    4252:	42ab      	cmp	r3, r5
    4254:	d002      	beq.n	425c <update_cache+0x40>
			z_reset_time_slice(thread);
    4256:	4628      	mov	r0, r5
    4258:	f7ff ff62 	bl	4120 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    425c:	4b02      	ldr	r3, [pc, #8]	; (4268 <update_cache+0x4c>)
    425e:	61dd      	str	r5, [r3, #28]
}
    4260:	bd38      	pop	{r3, r4, r5, pc}
    4262:	bf00      	nop
    4264:	20000acc 	.word	0x20000acc
    4268:	20000aac 	.word	0x20000aac

0000426c <move_thread_to_end_of_prio_q>:
{
    426c:	b538      	push	{r3, r4, r5, lr}
    426e:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    4270:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    4272:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4276:	2b00      	cmp	r3, #0
    4278:	db0a      	blt.n	4290 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    427a:	7b6b      	ldrb	r3, [r5, #13]
    427c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4280:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    4282:	4b1b      	ldr	r3, [pc, #108]	; (42f0 <move_thread_to_end_of_prio_q+0x84>)
    4284:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4288:	429c      	cmp	r4, r3
    428a:	d110      	bne.n	42ae <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    428c:	2400      	movs	r4, #0
    428e:	e00e      	b.n	42ae <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4290:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4294:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4296:	4601      	mov	r1, r0
    4298:	4816      	ldr	r0, [pc, #88]	; (42f4 <move_thread_to_end_of_prio_q+0x88>)
    429a:	f002 ff8d 	bl	71b8 <z_priq_dumb_remove>
}
    429e:	e7ec      	b.n	427a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    42a0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    42a2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    42a4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    42a6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    42a8:	6065      	str	r5, [r4, #4]
}
    42aa:	e017      	b.n	42dc <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    42ac:	2400      	movs	r4, #0
    42ae:	b16c      	cbz	r4, 42cc <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    42b0:	4621      	mov	r1, r4
    42b2:	4628      	mov	r0, r5
    42b4:	f002 ff45 	bl	7142 <z_sched_prio_cmp>
    42b8:	2800      	cmp	r0, #0
    42ba:	dcf1      	bgt.n	42a0 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    42bc:	2c00      	cmp	r4, #0
    42be:	d0f6      	beq.n	42ae <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    42c0:	4b0b      	ldr	r3, [pc, #44]	; (42f0 <move_thread_to_end_of_prio_q+0x84>)
    42c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    42c4:	429c      	cmp	r4, r3
    42c6:	d0f1      	beq.n	42ac <move_thread_to_end_of_prio_q+0x40>
    42c8:	6824      	ldr	r4, [r4, #0]
    42ca:	e7f0      	b.n	42ae <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    42cc:	4b08      	ldr	r3, [pc, #32]	; (42f0 <move_thread_to_end_of_prio_q+0x84>)
    42ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    42d0:	f103 0120 	add.w	r1, r3, #32
    42d4:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    42d6:	606a      	str	r2, [r5, #4]
	tail->next = node;
    42d8:	6015      	str	r5, [r2, #0]
	list->tail = node;
    42da:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    42dc:	4b04      	ldr	r3, [pc, #16]	; (42f0 <move_thread_to_end_of_prio_q+0x84>)
    42de:	6898      	ldr	r0, [r3, #8]
    42e0:	42a8      	cmp	r0, r5
    42e2:	bf14      	ite	ne
    42e4:	2000      	movne	r0, #0
    42e6:	2001      	moveq	r0, #1
    42e8:	f7ff ff98 	bl	421c <update_cache>
}
    42ec:	bd38      	pop	{r3, r4, r5, pc}
    42ee:	bf00      	nop
    42f0:	20000aac 	.word	0x20000aac
    42f4:	20000acc 	.word	0x20000acc

000042f8 <slice_expired_locked>:
{
    42f8:	b538      	push	{r3, r4, r5, lr}
    42fa:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    42fc:	4b07      	ldr	r3, [pc, #28]	; (431c <slice_expired_locked+0x24>)
    42fe:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4300:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    4302:	f013 0f1f 	tst.w	r3, #31
    4306:	d004      	beq.n	4312 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    4308:	4628      	mov	r0, r5
    430a:	f7ff ff09 	bl	4120 <z_reset_time_slice>
}
    430e:	4620      	mov	r0, r4
    4310:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    4312:	4628      	mov	r0, r5
    4314:	f7ff ffaa 	bl	426c <move_thread_to_end_of_prio_q>
    4318:	e7f6      	b.n	4308 <slice_expired_locked+0x10>
    431a:	bf00      	nop
    431c:	20000aac 	.word	0x20000aac

00004320 <z_time_slice>:
{
    4320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4322:	4605      	mov	r5, r0
	__asm__ volatile(
    4324:	f04f 0320 	mov.w	r3, #32
    4328:	f3ef 8611 	mrs	r6, BASEPRI
    432c:	f383 8812 	msr	BASEPRI_MAX, r3
    4330:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    4334:	4b15      	ldr	r3, [pc, #84]	; (438c <z_time_slice+0x6c>)
    4336:	6898      	ldr	r0, [r3, #8]
    4338:	4b15      	ldr	r3, [pc, #84]	; (4390 <z_time_slice+0x70>)
    433a:	681b      	ldr	r3, [r3, #0]
    433c:	4298      	cmp	r0, r3
    433e:	d011      	beq.n	4364 <z_time_slice+0x44>
    4340:	4634      	mov	r4, r6
	pending_current = NULL;
    4342:	4b13      	ldr	r3, [pc, #76]	; (4390 <z_time_slice+0x70>)
    4344:	2200      	movs	r2, #0
    4346:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
    4348:	4b12      	ldr	r3, [pc, #72]	; (4394 <z_time_slice+0x74>)
    434a:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
    434c:	b1b3      	cbz	r3, 437c <z_time_slice+0x5c>
    434e:	f7ff feb9 	bl	40c4 <sliceable>
    4352:	b198      	cbz	r0, 437c <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
    4354:	4b0d      	ldr	r3, [pc, #52]	; (438c <z_time_slice+0x6c>)
    4356:	691b      	ldr	r3, [r3, #16]
    4358:	42ab      	cmp	r3, r5
    435a:	dd0a      	ble.n	4372 <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
    435c:	1b5b      	subs	r3, r3, r5
    435e:	4a0b      	ldr	r2, [pc, #44]	; (438c <z_time_slice+0x6c>)
    4360:	6113      	str	r3, [r2, #16]
    4362:	e00e      	b.n	4382 <z_time_slice+0x62>
		z_reset_time_slice(_current);
    4364:	f7ff fedc 	bl	4120 <z_reset_time_slice>
	__asm__ volatile(
    4368:	f386 8811 	msr	BASEPRI, r6
    436c:	f3bf 8f6f 	isb	sy
		return;
    4370:	e00b      	b.n	438a <z_time_slice+0x6a>
			key = slice_expired_locked(key);
    4372:	4630      	mov	r0, r6
    4374:	f7ff ffc0 	bl	42f8 <slice_expired_locked>
    4378:	4604      	mov	r4, r0
    437a:	e002      	b.n	4382 <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
    437c:	4b03      	ldr	r3, [pc, #12]	; (438c <z_time_slice+0x6c>)
    437e:	2200      	movs	r2, #0
    4380:	611a      	str	r2, [r3, #16]
    4382:	f384 8811 	msr	BASEPRI, r4
    4386:	f3bf 8f6f 	isb	sy
}
    438a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    438c:	20000aac 	.word	0x20000aac
    4390:	20000ad8 	.word	0x20000ad8
    4394:	20000ae0 	.word	0x20000ae0

00004398 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    4398:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    439a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    439e:	2b00      	cmp	r3, #0
    43a0:	db33      	blt.n	440a <ready_thread+0x72>
{
    43a2:	b570      	push	{r4, r5, r6, lr}
    43a4:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    43a6:	f012 0f1f 	tst.w	r2, #31
    43aa:	d101      	bne.n	43b0 <ready_thread+0x18>
	return node->next != NULL;
    43ac:	6986      	ldr	r6, [r0, #24]
    43ae:	b106      	cbz	r6, 43b2 <ready_thread+0x1a>
}
    43b0:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    43b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    43b6:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    43b8:	4b14      	ldr	r3, [pc, #80]	; (440c <ready_thread+0x74>)
    43ba:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43be:	429d      	cmp	r5, r3
    43c0:	d108      	bne.n	43d4 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    43c2:	4635      	mov	r5, r6
    43c4:	e006      	b.n	43d4 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    43c6:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    43c8:	6063      	str	r3, [r4, #4]
	node->next = successor;
    43ca:	6025      	str	r5, [r4, #0]
	prev->next = node;
    43cc:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    43ce:	606c      	str	r4, [r5, #4]
}
    43d0:	e017      	b.n	4402 <ready_thread+0x6a>
    43d2:	4635      	mov	r5, r6
    43d4:	b16d      	cbz	r5, 43f2 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    43d6:	4629      	mov	r1, r5
    43d8:	4620      	mov	r0, r4
    43da:	f002 feb2 	bl	7142 <z_sched_prio_cmp>
    43de:	2800      	cmp	r0, #0
    43e0:	dcf1      	bgt.n	43c6 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    43e2:	2d00      	cmp	r5, #0
    43e4:	d0f6      	beq.n	43d4 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    43e6:	4b09      	ldr	r3, [pc, #36]	; (440c <ready_thread+0x74>)
    43e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    43ea:	429d      	cmp	r5, r3
    43ec:	d0f1      	beq.n	43d2 <ready_thread+0x3a>
    43ee:	682d      	ldr	r5, [r5, #0]
    43f0:	e7f0      	b.n	43d4 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    43f2:	4b06      	ldr	r3, [pc, #24]	; (440c <ready_thread+0x74>)
    43f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    43f6:	f103 0120 	add.w	r1, r3, #32
    43fa:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    43fc:	6062      	str	r2, [r4, #4]
	tail->next = node;
    43fe:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4400:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    4402:	2000      	movs	r0, #0
    4404:	f7ff ff0a 	bl	421c <update_cache>
}
    4408:	e7d2      	b.n	43b0 <ready_thread+0x18>
    440a:	4770      	bx	lr
    440c:	20000aac 	.word	0x20000aac

00004410 <z_sched_start>:
{
    4410:	b510      	push	{r4, lr}
	__asm__ volatile(
    4412:	f04f 0320 	mov.w	r3, #32
    4416:	f3ef 8411 	mrs	r4, BASEPRI
    441a:	f383 8812 	msr	BASEPRI_MAX, r3
    441e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    4422:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    4424:	f013 0f04 	tst.w	r3, #4
    4428:	d104      	bne.n	4434 <z_sched_start+0x24>
	__asm__ volatile(
    442a:	f384 8811 	msr	BASEPRI, r4
    442e:	f3bf 8f6f 	isb	sy
}
    4432:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4434:	f023 0304 	bic.w	r3, r3, #4
    4438:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    443a:	f7ff ffad 	bl	4398 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    443e:	4621      	mov	r1, r4
    4440:	4801      	ldr	r0, [pc, #4]	; (4448 <z_sched_start+0x38>)
    4442:	f7ff febb 	bl	41bc <z_reschedule>
    4446:	e7f4      	b.n	4432 <z_sched_start+0x22>
    4448:	20000ae4 	.word	0x20000ae4

0000444c <unready_thread>:
{
    444c:	b510      	push	{r4, lr}
    444e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    4450:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    4452:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4456:	2b00      	cmp	r3, #0
    4458:	db08      	blt.n	446c <unready_thread+0x20>
	update_cache(thread == _current);
    445a:	4b08      	ldr	r3, [pc, #32]	; (447c <unready_thread+0x30>)
    445c:	6898      	ldr	r0, [r3, #8]
    445e:	42a0      	cmp	r0, r4
    4460:	bf14      	ite	ne
    4462:	2000      	movne	r0, #0
    4464:	2001      	moveq	r0, #1
    4466:	f7ff fed9 	bl	421c <update_cache>
}
    446a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    446c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4470:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4472:	4601      	mov	r1, r0
    4474:	4802      	ldr	r0, [pc, #8]	; (4480 <unready_thread+0x34>)
    4476:	f002 fe9f 	bl	71b8 <z_priq_dumb_remove>
}
    447a:	e7ee      	b.n	445a <unready_thread+0xe>
    447c:	20000aac 	.word	0x20000aac
    4480:	20000acc 	.word	0x20000acc

00004484 <z_pend_curr>:
{
    4484:	b510      	push	{r4, lr}
    4486:	460c      	mov	r4, r1
    4488:	4611      	mov	r1, r2
	pending_current = _current;
    448a:	480a      	ldr	r0, [pc, #40]	; (44b4 <z_pend_curr+0x30>)
    448c:	6882      	ldr	r2, [r0, #8]
    448e:	4b0a      	ldr	r3, [pc, #40]	; (44b8 <z_pend_curr+0x34>)
    4490:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    4492:	f04f 0220 	mov.w	r2, #32
    4496:	f3ef 8311 	mrs	r3, BASEPRI
    449a:	f382 8812 	msr	BASEPRI_MAX, r2
    449e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    44a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    44a6:	6880      	ldr	r0, [r0, #8]
    44a8:	f002 ff2e 	bl	7308 <pend_locked>
    44ac:	4620      	mov	r0, r4
    44ae:	f7fc ff7f 	bl	13b0 <arch_swap>
}
    44b2:	bd10      	pop	{r4, pc}
    44b4:	20000aac 	.word	0x20000aac
    44b8:	20000ad8 	.word	0x20000ad8

000044bc <z_set_prio>:
{
    44bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    44c0:	4605      	mov	r5, r0
    44c2:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    44c4:	2300      	movs	r3, #0
    44c6:	f04f 0220 	mov.w	r2, #32
    44ca:	f3ef 8611 	mrs	r6, BASEPRI
    44ce:	f382 8812 	msr	BASEPRI_MAX, r2
    44d2:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    44d6:	4618      	mov	r0, r3
    44d8:	e029      	b.n	452e <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    44da:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    44dc:	606b      	str	r3, [r5, #4]
	node->next = successor;
    44de:	602c      	str	r4, [r5, #0]
	prev->next = node;
    44e0:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    44e2:	6065      	str	r5, [r4, #4]
}
    44e4:	e017      	b.n	4516 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    44e6:	4644      	mov	r4, r8
    44e8:	b16c      	cbz	r4, 4506 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    44ea:	4621      	mov	r1, r4
    44ec:	4628      	mov	r0, r5
    44ee:	f002 fe28 	bl	7142 <z_sched_prio_cmp>
    44f2:	2800      	cmp	r0, #0
    44f4:	dcf1      	bgt.n	44da <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    44f6:	2c00      	cmp	r4, #0
    44f8:	d0f6      	beq.n	44e8 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    44fa:	4b1d      	ldr	r3, [pc, #116]	; (4570 <z_set_prio+0xb4>)
    44fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44fe:	429c      	cmp	r4, r3
    4500:	d0f1      	beq.n	44e6 <z_set_prio+0x2a>
    4502:	6824      	ldr	r4, [r4, #0]
    4504:	e7f0      	b.n	44e8 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    4506:	4b1a      	ldr	r3, [pc, #104]	; (4570 <z_set_prio+0xb4>)
    4508:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    450a:	f103 0120 	add.w	r1, r3, #32
    450e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4510:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4512:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4514:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
    4516:	2001      	movs	r0, #1
    4518:	f7ff fe80 	bl	421c <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    451c:	2001      	movs	r0, #1
    451e:	e001      	b.n	4524 <z_set_prio+0x68>
			thread->base.prio = prio;
    4520:	73af      	strb	r7, [r5, #14]
    4522:	2000      	movs	r0, #0
	__asm__ volatile(
    4524:	f386 8811 	msr	BASEPRI, r6
    4528:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    452c:	2301      	movs	r3, #1
    452e:	b9e3      	cbnz	r3, 456a <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    4530:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4532:	f013 0f1f 	tst.w	r3, #31
    4536:	d1f3      	bne.n	4520 <z_set_prio+0x64>
	return node->next != NULL;
    4538:	f8d5 8018 	ldr.w	r8, [r5, #24]
    453c:	f1b8 0f00 	cmp.w	r8, #0
    4540:	d1ee      	bne.n	4520 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4546:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4548:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4574 <z_set_prio+0xb8>
    454c:	4629      	mov	r1, r5
    454e:	4648      	mov	r0, r9
    4550:	f002 fe32 	bl	71b8 <z_priq_dumb_remove>
				thread->base.prio = prio;
    4554:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4556:	7b6b      	ldrb	r3, [r5, #13]
    4558:	f063 037f 	orn	r3, r3, #127	; 0x7f
    455c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    455e:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4562:	454c      	cmp	r4, r9
    4564:	d1c0      	bne.n	44e8 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4566:	4644      	mov	r4, r8
    4568:	e7be      	b.n	44e8 <z_set_prio+0x2c>
}
    456a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    456e:	bf00      	nop
    4570:	20000aac 	.word	0x20000aac
    4574:	20000acc 	.word	0x20000acc

00004578 <z_impl_k_thread_suspend>:
{
    4578:	b538      	push	{r3, r4, r5, lr}
    457a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    457c:	3018      	adds	r0, #24
    457e:	f002 ff2a 	bl	73d6 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    4582:	2300      	movs	r3, #0
	__asm__ volatile(
    4584:	f04f 0220 	mov.w	r2, #32
    4588:	f3ef 8511 	mrs	r5, BASEPRI
    458c:	f382 8812 	msr	BASEPRI_MAX, r2
    4590:	f3bf 8f6f 	isb	sy
    4594:	e010      	b.n	45b8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4596:	7b63      	ldrb	r3, [r4, #13]
    4598:	f043 0310 	orr.w	r3, r3, #16
    459c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    459e:	4b11      	ldr	r3, [pc, #68]	; (45e4 <z_impl_k_thread_suspend+0x6c>)
    45a0:	6898      	ldr	r0, [r3, #8]
    45a2:	42a0      	cmp	r0, r4
    45a4:	bf14      	ite	ne
    45a6:	2000      	movne	r0, #0
    45a8:	2001      	moveq	r0, #1
    45aa:	f7ff fe37 	bl	421c <update_cache>
	__asm__ volatile(
    45ae:	f385 8811 	msr	BASEPRI, r5
    45b2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    45b6:	2301      	movs	r3, #1
    45b8:	b963      	cbnz	r3, 45d4 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    45ba:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    45bc:	f994 300d 	ldrsb.w	r3, [r4, #13]
    45c0:	2b00      	cmp	r3, #0
    45c2:	dae8      	bge.n	4596 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    45c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    45c8:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    45ca:	4621      	mov	r1, r4
    45cc:	4806      	ldr	r0, [pc, #24]	; (45e8 <z_impl_k_thread_suspend+0x70>)
    45ce:	f002 fdf3 	bl	71b8 <z_priq_dumb_remove>
}
    45d2:	e7e0      	b.n	4596 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    45d4:	4b03      	ldr	r3, [pc, #12]	; (45e4 <z_impl_k_thread_suspend+0x6c>)
    45d6:	689b      	ldr	r3, [r3, #8]
    45d8:	42a3      	cmp	r3, r4
    45da:	d000      	beq.n	45de <z_impl_k_thread_suspend+0x66>
}
    45dc:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    45de:	f002 fddf 	bl	71a0 <z_reschedule_unlocked>
}
    45e2:	e7fb      	b.n	45dc <z_impl_k_thread_suspend+0x64>
    45e4:	20000aac 	.word	0x20000aac
    45e8:	20000acc 	.word	0x20000acc

000045ec <k_sched_unlock>:

void k_sched_unlock(void)
{
    45ec:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    45ee:	2300      	movs	r3, #0
	__asm__ volatile(
    45f0:	f04f 0220 	mov.w	r2, #32
    45f4:	f3ef 8411 	mrs	r4, BASEPRI
    45f8:	f382 8812 	msr	BASEPRI_MAX, r2
    45fc:	f3bf 8f6f 	isb	sy
    4600:	e00c      	b.n	461c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    4602:	4b09      	ldr	r3, [pc, #36]	; (4628 <k_sched_unlock+0x3c>)
    4604:	689a      	ldr	r2, [r3, #8]
    4606:	7bd3      	ldrb	r3, [r2, #15]
    4608:	3301      	adds	r3, #1
    460a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    460c:	2000      	movs	r0, #0
    460e:	f7ff fe05 	bl	421c <update_cache>
	__asm__ volatile(
    4612:	f384 8811 	msr	BASEPRI, r4
    4616:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    461a:	2301      	movs	r3, #1
    461c:	2b00      	cmp	r3, #0
    461e:	d0f0      	beq.n	4602 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    4620:	f002 fdbe 	bl	71a0 <z_reschedule_unlocked>
}
    4624:	bd10      	pop	{r4, pc}
    4626:	bf00      	nop
    4628:	20000aac 	.word	0x20000aac

0000462c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    462c:	7b43      	ldrb	r3, [r0, #13]
    462e:	f013 0f08 	tst.w	r3, #8
    4632:	d12a      	bne.n	468a <end_thread+0x5e>
{
    4634:	b510      	push	{r4, lr}
    4636:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    4638:	f043 0208 	orr.w	r2, r3, #8
    463c:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    463e:	f023 0220 	bic.w	r2, r3, #32
    4642:	f042 0208 	orr.w	r2, r2, #8
    4646:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    4648:	f012 0f80 	tst.w	r2, #128	; 0x80
    464c:	d113      	bne.n	4676 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    464e:	68a3      	ldr	r3, [r4, #8]
    4650:	b113      	cbz	r3, 4658 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    4652:	4620      	mov	r0, r4
    4654:	f002 fdb8 	bl	71c8 <unpend_thread_no_timeout>
    4658:	f104 0018 	add.w	r0, r4, #24
    465c:	f002 febb 	bl	73d6 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    4660:	f104 0058 	add.w	r0, r4, #88	; 0x58
    4664:	f002 fe10 	bl	7288 <unpend_all>
		update_cache(1);
    4668:	2001      	movs	r0, #1
    466a:	f7ff fdd7 	bl	421c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    466e:	4620      	mov	r0, r4
    4670:	f7ff fb20 	bl	3cb4 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    4674:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4676:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    467a:	f043 0308 	orr.w	r3, r3, #8
    467e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4680:	4601      	mov	r1, r0
    4682:	4802      	ldr	r0, [pc, #8]	; (468c <end_thread+0x60>)
    4684:	f002 fd98 	bl	71b8 <z_priq_dumb_remove>
}
    4688:	e7e1      	b.n	464e <end_thread+0x22>
    468a:	4770      	bx	lr
    468c:	20000acc 	.word	0x20000acc

00004690 <z_sched_init>:
{
    4690:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    4692:	4804      	ldr	r0, [pc, #16]	; (46a4 <z_sched_init+0x14>)
    4694:	f002 fe84 	bl	73a0 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4698:	2100      	movs	r1, #0
    469a:	4608      	mov	r0, r1
    469c:	f7ff fd54 	bl	4148 <k_sched_time_slice_set>
}
    46a0:	bd08      	pop	{r3, pc}
    46a2:	bf00      	nop
    46a4:	20000ac8 	.word	0x20000ac8

000046a8 <z_impl_k_yield>:
{
    46a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    46aa:	f04f 0320 	mov.w	r3, #32
    46ae:	f3ef 8611 	mrs	r6, BASEPRI
    46b2:	f383 8812 	msr	BASEPRI_MAX, r3
    46b6:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    46ba:	4c1d      	ldr	r4, [pc, #116]	; (4730 <z_impl_k_yield+0x88>)
    46bc:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    46be:	7b4b      	ldrb	r3, [r1, #13]
    46c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    46c4:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    46c6:	f104 0720 	add.w	r7, r4, #32
    46ca:	4638      	mov	r0, r7
    46cc:	f002 fd74 	bl	71b8 <z_priq_dumb_remove>
	queue_thread(_current);
    46d0:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    46d2:	7b6b      	ldrb	r3, [r5, #13]
    46d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    46d8:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    46da:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    46dc:	42bc      	cmp	r4, r7
    46de:	d108      	bne.n	46f2 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    46e0:	2400      	movs	r4, #0
    46e2:	e006      	b.n	46f2 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    46e4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    46e6:	606b      	str	r3, [r5, #4]
	node->next = successor;
    46e8:	602c      	str	r4, [r5, #0]
	prev->next = node;
    46ea:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    46ec:	6065      	str	r5, [r4, #4]
}
    46ee:	e017      	b.n	4720 <z_impl_k_yield+0x78>
    46f0:	2400      	movs	r4, #0
    46f2:	b16c      	cbz	r4, 4710 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    46f4:	4621      	mov	r1, r4
    46f6:	4628      	mov	r0, r5
    46f8:	f002 fd23 	bl	7142 <z_sched_prio_cmp>
    46fc:	2800      	cmp	r0, #0
    46fe:	dcf1      	bgt.n	46e4 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4700:	2c00      	cmp	r4, #0
    4702:	d0f6      	beq.n	46f2 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    4704:	4b0a      	ldr	r3, [pc, #40]	; (4730 <z_impl_k_yield+0x88>)
    4706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4708:	429c      	cmp	r4, r3
    470a:	d0f1      	beq.n	46f0 <z_impl_k_yield+0x48>
    470c:	6824      	ldr	r4, [r4, #0]
    470e:	e7f0      	b.n	46f2 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    4710:	4b07      	ldr	r3, [pc, #28]	; (4730 <z_impl_k_yield+0x88>)
    4712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4714:	f103 0120 	add.w	r1, r3, #32
    4718:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    471a:	606a      	str	r2, [r5, #4]
	tail->next = node;
    471c:	6015      	str	r5, [r2, #0]
	list->tail = node;
    471e:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    4720:	2001      	movs	r0, #1
    4722:	f7ff fd7b 	bl	421c <update_cache>
    4726:	4630      	mov	r0, r6
    4728:	f7fc fe42 	bl	13b0 <arch_swap>
}
    472c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    472e:	bf00      	nop
    4730:	20000aac 	.word	0x20000aac

00004734 <z_tick_sleep>:
{
    4734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    4738:	ea50 0301 	orrs.w	r3, r0, r1
    473c:	d038      	beq.n	47b0 <z_tick_sleep+0x7c>
    473e:	4604      	mov	r4, r0
    4740:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    4742:	f06f 0301 	mvn.w	r3, #1
    4746:	1a1b      	subs	r3, r3, r0
    4748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    474c:	eb62 0201 	sbc.w	r2, r2, r1
    4750:	2b01      	cmp	r3, #1
    4752:	f172 0200 	sbcs.w	r2, r2, #0
    4756:	db2f      	blt.n	47b8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4758:	f06f 0501 	mvn.w	r5, #1
    475c:	1a2d      	subs	r5, r5, r0
    475e:	f04f 0320 	mov.w	r3, #32
    4762:	f3ef 8811 	mrs	r8, BASEPRI
    4766:	f383 8812 	msr	BASEPRI_MAX, r3
    476a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    476e:	4f14      	ldr	r7, [pc, #80]	; (47c0 <z_tick_sleep+0x8c>)
    4770:	68b8      	ldr	r0, [r7, #8]
    4772:	4b14      	ldr	r3, [pc, #80]	; (47c4 <z_tick_sleep+0x90>)
    4774:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4776:	f7ff fe69 	bl	444c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    477a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    477c:	4622      	mov	r2, r4
    477e:	4633      	mov	r3, r6
    4780:	4911      	ldr	r1, [pc, #68]	; (47c8 <z_tick_sleep+0x94>)
    4782:	3018      	adds	r0, #24
    4784:	f000 f8ec 	bl	4960 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4788:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    478a:	7b53      	ldrb	r3, [r2, #13]
    478c:	f043 0310 	orr.w	r3, r3, #16
    4790:	7353      	strb	r3, [r2, #13]
    4792:	4640      	mov	r0, r8
    4794:	f7fc fe0c 	bl	13b0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4798:	f002 fe7d 	bl	7496 <sys_clock_tick_get_32>
    479c:	1a28      	subs	r0, r5, r0
    479e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    47a2:	2801      	cmp	r0, #1
    47a4:	f173 0300 	sbcs.w	r3, r3, #0
    47a8:	da00      	bge.n	47ac <z_tick_sleep+0x78>
	return 0;
    47aa:	2000      	movs	r0, #0
}
    47ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    47b0:	f7ff ff7a 	bl	46a8 <z_impl_k_yield>
		return 0;
    47b4:	2000      	movs	r0, #0
    47b6:	e7f9      	b.n	47ac <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    47b8:	f002 fe6d 	bl	7496 <sys_clock_tick_get_32>
    47bc:	1905      	adds	r5, r0, r4
    47be:	e7ce      	b.n	475e <z_tick_sleep+0x2a>
    47c0:	20000aac 	.word	0x20000aac
    47c4:	20000ad8 	.word	0x20000ad8
    47c8:	0000722b 	.word	0x0000722b

000047cc <z_impl_k_sleep>:
{
    47cc:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    47ce:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    47d2:	bf08      	it	eq
    47d4:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    47d8:	d018      	beq.n	480c <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    47da:	f7ff ffab 	bl	4734 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    47de:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    47e0:	0151      	lsls	r1, r2, #5
    47e2:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    47e6:	0143      	lsls	r3, r0, #5
    47e8:	1a1b      	subs	r3, r3, r0
    47ea:	eb61 0102 	sbc.w	r1, r1, r2
    47ee:	0089      	lsls	r1, r1, #2
    47f0:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    47f4:	009b      	lsls	r3, r3, #2
    47f6:	181b      	adds	r3, r3, r0
    47f8:	eb42 0201 	adc.w	r2, r2, r1
    47fc:	00d2      	lsls	r2, r2, #3
    47fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    4802:	f3c3 3310 	ubfx	r3, r3, #12, #17
    4806:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    480a:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    480c:	4b03      	ldr	r3, [pc, #12]	; (481c <z_impl_k_sleep+0x50>)
    480e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4810:	f7ff feb2 	bl	4578 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4814:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4818:	e7f7      	b.n	480a <z_impl_k_sleep+0x3e>
    481a:	bf00      	nop
    481c:	20000aac 	.word	0x20000aac

00004820 <z_impl_z_current_get>:
}
    4820:	4b01      	ldr	r3, [pc, #4]	; (4828 <z_impl_z_current_get+0x8>)
    4822:	6898      	ldr	r0, [r3, #8]
    4824:	4770      	bx	lr
    4826:	bf00      	nop
    4828:	20000aac 	.word	0x20000aac

0000482c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    482c:	b570      	push	{r4, r5, r6, lr}
    482e:	f04f 0320 	mov.w	r3, #32
    4832:	f3ef 8511 	mrs	r5, BASEPRI
    4836:	f383 8812 	msr	BASEPRI_MAX, r3
    483a:	f3bf 8f6f 	isb	sy
    483e:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    4840:	7b03      	ldrb	r3, [r0, #12]
    4842:	f013 0f01 	tst.w	r3, #1
    4846:	d109      	bne.n	485c <z_thread_abort+0x30>
    4848:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    484a:	7b43      	ldrb	r3, [r0, #13]
    484c:	f013 0f08 	tst.w	r3, #8
    4850:	d00f      	beq.n	4872 <z_thread_abort+0x46>
	__asm__ volatile(
    4852:	f385 8811 	msr	BASEPRI, r5
    4856:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    485a:	e009      	b.n	4870 <z_thread_abort+0x44>
    485c:	f385 8811 	msr	BASEPRI, r5
    4860:	f3bf 8f6f 	isb	sy
		k_panic();
    4864:	4040      	eors	r0, r0
    4866:	f380 8811 	msr	BASEPRI, r0
    486a:	f04f 0004 	mov.w	r0, #4
    486e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4870:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    4872:	f7ff fedb 	bl	462c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    4876:	4b08      	ldr	r3, [pc, #32]	; (4898 <z_thread_abort+0x6c>)
    4878:	689b      	ldr	r3, [r3, #8]
    487a:	42a3      	cmp	r3, r4
    487c:	d004      	beq.n	4888 <z_thread_abort+0x5c>
    487e:	f386 8811 	msr	BASEPRI, r6
    4882:	f3bf 8f6f 	isb	sy
    4886:	e7f3      	b.n	4870 <z_thread_abort+0x44>
    4888:	f3ef 8305 	mrs	r3, IPSR
    488c:	2b00      	cmp	r3, #0
    488e:	d1f6      	bne.n	487e <z_thread_abort+0x52>
    4890:	4628      	mov	r0, r5
    4892:	f7fc fd8d 	bl	13b0 <arch_swap>
	return ret;
    4896:	e7f2      	b.n	487e <z_thread_abort+0x52>
    4898:	20000aac 	.word	0x20000aac

0000489c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    489c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    489e:	4806      	ldr	r0, [pc, #24]	; (48b8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    48a0:	4a06      	ldr	r2, [pc, #24]	; (48bc <z_data_copy+0x20>)
    48a2:	1a12      	subs	r2, r2, r0
    48a4:	4906      	ldr	r1, [pc, #24]	; (48c0 <z_data_copy+0x24>)
    48a6:	f002 fbac 	bl	7002 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    48aa:	4a06      	ldr	r2, [pc, #24]	; (48c4 <z_data_copy+0x28>)
    48ac:	4906      	ldr	r1, [pc, #24]	; (48c8 <z_data_copy+0x2c>)
    48ae:	4807      	ldr	r0, [pc, #28]	; (48cc <z_data_copy+0x30>)
    48b0:	f002 fba7 	bl	7002 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    48b4:	bd08      	pop	{r3, pc}
    48b6:	bf00      	nop
    48b8:	20000000 	.word	0x20000000
    48bc:	200002d4 	.word	0x200002d4
    48c0:	00007bbc 	.word	0x00007bbc
    48c4:	00000000 	.word	0x00000000
    48c8:	00007bbc 	.word	0x00007bbc
    48cc:	20000000 	.word	0x20000000

000048d0 <first>:
	return list->head == list;
    48d0:	4b03      	ldr	r3, [pc, #12]	; (48e0 <first+0x10>)
    48d2:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    48d4:	4298      	cmp	r0, r3
    48d6:	d000      	beq.n	48da <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    48d8:	4770      	bx	lr
    48da:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    48dc:	e7fc      	b.n	48d8 <first+0x8>
    48de:	bf00      	nop
    48e0:	20000214 	.word	0x20000214

000048e4 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    48e4:	b130      	cbz	r0, 48f4 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    48e6:	4a04      	ldr	r2, [pc, #16]	; (48f8 <next+0x14>)
    48e8:	6852      	ldr	r2, [r2, #4]
    48ea:	4290      	cmp	r0, r2
    48ec:	d001      	beq.n	48f2 <next+0xe>
    48ee:	6800      	ldr	r0, [r0, #0]
    48f0:	4770      	bx	lr
    48f2:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    48f4:	4770      	bx	lr
    48f6:	bf00      	nop
    48f8:	20000214 	.word	0x20000214

000048fc <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    48fc:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    48fe:	4b04      	ldr	r3, [pc, #16]	; (4910 <elapsed+0x14>)
    4900:	681b      	ldr	r3, [r3, #0]
    4902:	b10b      	cbz	r3, 4908 <elapsed+0xc>
    4904:	2000      	movs	r0, #0
}
    4906:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4908:	f7fe f8fa 	bl	2b00 <sys_clock_elapsed>
    490c:	e7fb      	b.n	4906 <elapsed+0xa>
    490e:	bf00      	nop
    4910:	20000ae4 	.word	0x20000ae4

00004914 <next_timeout>:

static int32_t next_timeout(void)
{
    4914:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    4916:	f7ff ffdb 	bl	48d0 <first>
    491a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    491c:	f7ff ffee 	bl	48fc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4920:	b17c      	cbz	r4, 4942 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4922:	6923      	ldr	r3, [r4, #16]
    4924:	6962      	ldr	r2, [r4, #20]
    4926:	1a1b      	subs	r3, r3, r0
    4928:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    492c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4930:	f172 0100 	sbcs.w	r1, r2, #0
    4934:	da08      	bge.n	4948 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    4936:	2a00      	cmp	r2, #0
    4938:	db01      	blt.n	493e <next_timeout+0x2a>
    493a:	4618      	mov	r0, r3
    493c:	e006      	b.n	494c <next_timeout+0x38>
    493e:	2300      	movs	r3, #0
    4940:	e7fb      	b.n	493a <next_timeout+0x26>
		ret = MAX_WAIT;
    4942:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4946:	e001      	b.n	494c <next_timeout+0x38>
    4948:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    494c:	4b03      	ldr	r3, [pc, #12]	; (495c <next_timeout+0x48>)
    494e:	691b      	ldr	r3, [r3, #16]
    4950:	b113      	cbz	r3, 4958 <next_timeout+0x44>
    4952:	4283      	cmp	r3, r0
    4954:	da00      	bge.n	4958 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    4956:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    4958:	bd10      	pop	{r4, pc}
    495a:	bf00      	nop
    495c:	20000aac 	.word	0x20000aac

00004960 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4964:	bf08      	it	eq
    4966:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    496a:	d07b      	beq.n	4a64 <z_add_timeout+0x104>
{
    496c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4970:	4604      	mov	r4, r0
    4972:	4692      	mov	sl, r2
    4974:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4976:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    4978:	2300      	movs	r3, #0
	__asm__ volatile(
    497a:	f04f 0220 	mov.w	r2, #32
    497e:	f3ef 8711 	mrs	r7, BASEPRI
    4982:	f382 8812 	msr	BASEPRI_MAX, r2
    4986:	f3bf 8f6f 	isb	sy
    498a:	e026      	b.n	49da <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    498c:	f11a 0801 	adds.w	r8, sl, #1
    4990:	f145 0900 	adc.w	r9, r5, #0
    4994:	f7ff ffb2 	bl	48fc <elapsed>
    4998:	eb18 0300 	adds.w	r3, r8, r0
    499c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    49a0:	6123      	str	r3, [r4, #16]
    49a2:	6160      	str	r0, [r4, #20]
    49a4:	e03b      	b.n	4a1e <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    49a6:	1a52      	subs	r2, r2, r1
    49a8:	eb66 0303 	sbc.w	r3, r6, r3
    49ac:	6102      	str	r2, [r0, #16]
    49ae:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    49b0:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    49b2:	6063      	str	r3, [r4, #4]
	node->next = successor;
    49b4:	6020      	str	r0, [r4, #0]
	prev->next = node;
    49b6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    49b8:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    49ba:	e005      	b.n	49c8 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    49bc:	4b2a      	ldr	r3, [pc, #168]	; (4a68 <z_add_timeout+0x108>)
    49be:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    49c0:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    49c2:	6062      	str	r2, [r4, #4]
	tail->next = node;
    49c4:	6014      	str	r4, [r2, #0]
	list->tail = node;
    49c6:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    49c8:	f7ff ff82 	bl	48d0 <first>
    49cc:	4284      	cmp	r4, r0
    49ce:	d03a      	beq.n	4a46 <z_add_timeout+0xe6>
	__asm__ volatile(
    49d0:	f387 8811 	msr	BASEPRI, r7
    49d4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    49d8:	2301      	movs	r3, #1
    49da:	2b00      	cmp	r3, #0
    49dc:	d140      	bne.n	4a60 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    49de:	4653      	mov	r3, sl
    49e0:	f06f 0101 	mvn.w	r1, #1
    49e4:	ebb1 010a 	subs.w	r1, r1, sl
    49e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    49ec:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    49f0:	2a00      	cmp	r2, #0
    49f2:	dbcb      	blt.n	498c <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    49f4:	4a1d      	ldr	r2, [pc, #116]	; (4a6c <z_add_timeout+0x10c>)
    49f6:	6811      	ldr	r1, [r2, #0]
    49f8:	6852      	ldr	r2, [r2, #4]
    49fa:	185b      	adds	r3, r3, r1
    49fc:	eb42 0205 	adc.w	r2, r2, r5
    4a00:	f06f 0101 	mvn.w	r1, #1
    4a04:	1ac9      	subs	r1, r1, r3
    4a06:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    4a0a:	4608      	mov	r0, r1
    4a0c:	461a      	mov	r2, r3
    4a0e:	2901      	cmp	r1, #1
    4a10:	f173 0300 	sbcs.w	r3, r3, #0
    4a14:	da01      	bge.n	4a1a <z_add_timeout+0xba>
    4a16:	2001      	movs	r0, #1
    4a18:	2200      	movs	r2, #0
    4a1a:	6120      	str	r0, [r4, #16]
    4a1c:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4a1e:	f7ff ff57 	bl	48d0 <first>
    4a22:	2800      	cmp	r0, #0
    4a24:	d0ca      	beq.n	49bc <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    4a26:	6902      	ldr	r2, [r0, #16]
    4a28:	6946      	ldr	r6, [r0, #20]
    4a2a:	6921      	ldr	r1, [r4, #16]
    4a2c:	6963      	ldr	r3, [r4, #20]
    4a2e:	4291      	cmp	r1, r2
    4a30:	eb73 0e06 	sbcs.w	lr, r3, r6
    4a34:	dbb7      	blt.n	49a6 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    4a36:	1a89      	subs	r1, r1, r2
    4a38:	eb63 0306 	sbc.w	r3, r3, r6
    4a3c:	6121      	str	r1, [r4, #16]
    4a3e:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4a40:	f7ff ff50 	bl	48e4 <next>
    4a44:	e7ed      	b.n	4a22 <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4a46:	f7ff ff65 	bl	4914 <next_timeout>

			if (next_time == 0 ||
    4a4a:	4603      	mov	r3, r0
    4a4c:	b118      	cbz	r0, 4a56 <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
    4a4e:	4a08      	ldr	r2, [pc, #32]	; (4a70 <z_add_timeout+0x110>)
    4a50:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    4a52:	4282      	cmp	r2, r0
    4a54:	d0bc      	beq.n	49d0 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
    4a56:	2100      	movs	r1, #0
    4a58:	4618      	mov	r0, r3
    4a5a:	f7fe f81f 	bl	2a9c <sys_clock_set_timeout>
    4a5e:	e7b7      	b.n	49d0 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4a64:	4770      	bx	lr
    4a66:	bf00      	nop
    4a68:	20000214 	.word	0x20000214
    4a6c:	20000458 	.word	0x20000458
    4a70:	20000aac 	.word	0x20000aac

00004a74 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4a74:	b570      	push	{r4, r5, r6, lr}
    4a76:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4a78:	f7ff fc52 	bl	4320 <z_time_slice>
	__asm__ volatile(
    4a7c:	f04f 0320 	mov.w	r3, #32
    4a80:	f3ef 8611 	mrs	r6, BASEPRI
    4a84:	f383 8812 	msr	BASEPRI_MAX, r3
    4a88:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    4a8c:	4b28      	ldr	r3, [pc, #160]	; (4b30 <sys_clock_announce+0xbc>)
    4a8e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4a90:	e021      	b.n	4ad6 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4a92:	4a28      	ldr	r2, [pc, #160]	; (4b34 <sys_clock_announce+0xc0>)
    4a94:	6813      	ldr	r3, [r2, #0]
    4a96:	6851      	ldr	r1, [r2, #4]
    4a98:	195b      	adds	r3, r3, r5
    4a9a:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    4a9e:	6013      	str	r3, [r2, #0]
    4aa0:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    4aa2:	2200      	movs	r2, #0
    4aa4:	2300      	movs	r3, #0
    4aa6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    4aaa:	4620      	mov	r0, r4
    4aac:	f002 fc7c 	bl	73a8 <remove_timeout>
	__asm__ volatile(
    4ab0:	f386 8811 	msr	BASEPRI, r6
    4ab4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4ab8:	68a3      	ldr	r3, [r4, #8]
    4aba:	4620      	mov	r0, r4
    4abc:	4798      	blx	r3
	__asm__ volatile(
    4abe:	f04f 0320 	mov.w	r3, #32
    4ac2:	f3ef 8611 	mrs	r6, BASEPRI
    4ac6:	f383 8812 	msr	BASEPRI_MAX, r3
    4aca:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    4ace:	4a18      	ldr	r2, [pc, #96]	; (4b30 <sys_clock_announce+0xbc>)
    4ad0:	6813      	ldr	r3, [r2, #0]
    4ad2:	1b5b      	subs	r3, r3, r5
    4ad4:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4ad6:	f7ff fefb 	bl	48d0 <first>
    4ada:	4604      	mov	r4, r0
    4adc:	b138      	cbz	r0, 4aee <sys_clock_announce+0x7a>
    4ade:	6905      	ldr	r5, [r0, #16]
    4ae0:	6941      	ldr	r1, [r0, #20]
    4ae2:	4b13      	ldr	r3, [pc, #76]	; (4b30 <sys_clock_announce+0xbc>)
    4ae4:	681a      	ldr	r2, [r3, #0]
    4ae6:	17d3      	asrs	r3, r2, #31
    4ae8:	42aa      	cmp	r2, r5
    4aea:	418b      	sbcs	r3, r1
    4aec:	dad1      	bge.n	4a92 <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
    4aee:	b144      	cbz	r4, 4b02 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    4af0:	6923      	ldr	r3, [r4, #16]
    4af2:	6962      	ldr	r2, [r4, #20]
    4af4:	490e      	ldr	r1, [pc, #56]	; (4b30 <sys_clock_announce+0xbc>)
    4af6:	6809      	ldr	r1, [r1, #0]
    4af8:	1a5b      	subs	r3, r3, r1
    4afa:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    4afe:	6123      	str	r3, [r4, #16]
    4b00:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    4b02:	4a0c      	ldr	r2, [pc, #48]	; (4b34 <sys_clock_announce+0xc0>)
    4b04:	4d0a      	ldr	r5, [pc, #40]	; (4b30 <sys_clock_announce+0xbc>)
    4b06:	6828      	ldr	r0, [r5, #0]
    4b08:	6813      	ldr	r3, [r2, #0]
    4b0a:	6851      	ldr	r1, [r2, #4]
    4b0c:	181b      	adds	r3, r3, r0
    4b0e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    4b12:	6013      	str	r3, [r2, #0]
    4b14:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    4b16:	2400      	movs	r4, #0
    4b18:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4b1a:	f7ff fefb 	bl	4914 <next_timeout>
    4b1e:	4621      	mov	r1, r4
    4b20:	f7fd ffbc 	bl	2a9c <sys_clock_set_timeout>
	__asm__ volatile(
    4b24:	f386 8811 	msr	BASEPRI, r6
    4b28:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4b2c:	bd70      	pop	{r4, r5, r6, pc}
    4b2e:	bf00      	nop
    4b30:	20000ae4 	.word	0x20000ae4
    4b34:	20000458 	.word	0x20000458

00004b38 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4b38:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    4b3a:	2200      	movs	r2, #0
	__asm__ volatile(
    4b3c:	f04f 0320 	mov.w	r3, #32
    4b40:	f3ef 8411 	mrs	r4, BASEPRI
    4b44:	f383 8812 	msr	BASEPRI_MAX, r3
    4b48:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    4b4c:	4613      	mov	r3, r2
    4b4e:	4611      	mov	r1, r2
    4b50:	e00c      	b.n	4b6c <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    4b52:	f7ff fed3 	bl	48fc <elapsed>
    4b56:	4a07      	ldr	r2, [pc, #28]	; (4b74 <sys_clock_tick_get+0x3c>)
    4b58:	6813      	ldr	r3, [r2, #0]
    4b5a:	6851      	ldr	r1, [r2, #4]
    4b5c:	18c3      	adds	r3, r0, r3
    4b5e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    4b62:	f384 8811 	msr	BASEPRI, r4
    4b66:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4b6a:	2201      	movs	r2, #1
    4b6c:	2a00      	cmp	r2, #0
    4b6e:	d0f0      	beq.n	4b52 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    4b70:	4618      	mov	r0, r3
    4b72:	bd10      	pop	{r4, pc}
    4b74:	20000458 	.word	0x20000458

00004b78 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    4b78:	b538      	push	{r3, r4, r5, lr}
    4b7a:	4604      	mov	r4, r0
	__asm__ volatile(
    4b7c:	f04f 0320 	mov.w	r3, #32
    4b80:	f3ef 8511 	mrs	r5, BASEPRI
    4b84:	f383 8812 	msr	BASEPRI_MAX, r3
    4b88:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    4b8c:	6a82      	ldr	r2, [r0, #40]	; 0x28
    4b8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4b90:	ea52 0103 	orrs.w	r1, r2, r3
    4b94:	d005      	beq.n	4ba2 <z_timer_expiration_handler+0x2a>
    4b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4b9a:	bf08      	it	eq
    4b9c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    4ba0:	d128      	bne.n	4bf4 <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    4ba2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4ba4:	3301      	adds	r3, #1
    4ba6:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    4ba8:	6a23      	ldr	r3, [r4, #32]
    4baa:	b173      	cbz	r3, 4bca <z_timer_expiration_handler+0x52>
	__asm__ volatile(
    4bac:	f385 8811 	msr	BASEPRI, r5
    4bb0:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    4bb4:	6a23      	ldr	r3, [r4, #32]
    4bb6:	4620      	mov	r0, r4
    4bb8:	4798      	blx	r3
	__asm__ volatile(
    4bba:	f04f 0320 	mov.w	r3, #32
    4bbe:	f3ef 8511 	mrs	r5, BASEPRI
    4bc2:	f383 8812 	msr	BASEPRI_MAX, r3
    4bc6:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    4bca:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    4bce:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4bd0:	42a3      	cmp	r3, r4
    4bd2:	d038      	beq.n	4c46 <z_timer_expiration_handler+0xce>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    4bd4:	2c00      	cmp	r4, #0
    4bd6:	d036      	beq.n	4c46 <z_timer_expiration_handler+0xce>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    4bd8:	4620      	mov	r0, r4
    4bda:	f002 fabc 	bl	7156 <z_unpend_thread_no_timeout>
    4bde:	2300      	movs	r3, #0
    4be0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    4be4:	f385 8811 	msr	BASEPRI, r5
    4be8:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    4bec:	4620      	mov	r0, r4
    4bee:	f002 fb00 	bl	71f2 <z_ready_thread>
}
    4bf2:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_uptime_ticks();
    4bf4:	f002 fc53 	bl	749e <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    4bf8:	3001      	adds	r0, #1
    4bfa:	f141 0100 	adc.w	r1, r1, #0
    4bfe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4c00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4c02:	18c0      	adds	r0, r0, r3
    4c04:	eb41 0102 	adc.w	r1, r1, r2
    4c08:	2801      	cmp	r0, #1
    4c0a:	f171 0100 	sbcs.w	r1, r1, #0
    4c0e:	da08      	bge.n	4c22 <z_timer_expiration_handler+0xaa>
    4c10:	f06f 0201 	mvn.w	r2, #1
    4c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4c18:	490d      	ldr	r1, [pc, #52]	; (4c50 <z_timer_expiration_handler+0xd8>)
    4c1a:	4620      	mov	r0, r4
    4c1c:	f7ff fea0 	bl	4960 <z_add_timeout>
    4c20:	e7bf      	b.n	4ba2 <z_timer_expiration_handler+0x2a>
    4c22:	f002 fc3c 	bl	749e <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    4c26:	3001      	adds	r0, #1
    4c28:	f141 0300 	adc.w	r3, r1, #0
    4c2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4c2e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    4c30:	1880      	adds	r0, r0, r2
    4c32:	eb43 0301 	adc.w	r3, r3, r1
    4c36:	f06f 0201 	mvn.w	r2, #1
    4c3a:	1a12      	subs	r2, r2, r0
    4c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4c40:	eb61 0303 	sbc.w	r3, r1, r3
    4c44:	e7e8      	b.n	4c18 <z_timer_expiration_handler+0xa0>
    4c46:	f385 8811 	msr	BASEPRI, r5
    4c4a:	f3bf 8f6f 	isb	sy
		return;
    4c4e:	e7d0      	b.n	4bf2 <z_timer_expiration_handler+0x7a>
    4c50:	00004b79 	.word	0x00004b79

00004c54 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    4c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4c58:	461e      	mov	r6, r3
    4c5a:	9f06      	ldr	r7, [sp, #24]
    4c5c:	f8dd 801c 	ldr.w	r8, [sp, #28]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    4c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4c64:	bf08      	it	eq
    4c66:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    4c6a:	d02f      	beq.n	4ccc <z_impl_k_timer_start+0x78>
    4c6c:	4605      	mov	r5, r0
    4c6e:	4614      	mov	r4, r2
    4c70:	4613      	mov	r3, r2
    4c72:	4631      	mov	r1, r6
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    4c74:	4640      	mov	r0, r8
    4c76:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
    4c7a:	bf08      	it	eq
    4c7c:	f1b7 3fff 	cmpeq.w	r7, #4294967295	; 0xffffffff
    4c80:	d00d      	beq.n	4c9e <z_impl_k_timer_start+0x4a>
    4c82:	ea57 0c08 	orrs.w	ip, r7, r8
    4c86:	d00a      	beq.n	4c9e <z_impl_k_timer_start+0x4a>
	    Z_TICK_ABS(period.ticks) < 0) {
    4c88:	f06f 0c01 	mvn.w	ip, #1
    4c8c:	ebbc 0c07 	subs.w	ip, ip, r7
    4c90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    4c94:	eb6c 0c08 	sbc.w	ip, ip, r8
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    4c98:	f1bc 0f00 	cmp.w	ip, #0
    4c9c:	db18      	blt.n	4cd0 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    4c9e:	f06f 0201 	mvn.w	r2, #1
    4ca2:	1ad2      	subs	r2, r2, r3
    4ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4ca8:	eb62 0201 	sbc.w	r2, r2, r1
    4cac:	2a00      	cmp	r2, #0
    4cae:	db1a      	blt.n	4ce6 <z_impl_k_timer_start+0x92>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    4cb0:	4628      	mov	r0, r5
    4cb2:	f002 fb90 	bl	73d6 <z_abort_timeout>
	timer->period = period;
    4cb6:	62af      	str	r7, [r5, #40]	; 0x28
    4cb8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
	timer->status = 0U;
    4cbc:	2300      	movs	r3, #0
    4cbe:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4cc0:	4622      	mov	r2, r4
    4cc2:	4633      	mov	r3, r6
    4cc4:	490e      	ldr	r1, [pc, #56]	; (4d00 <z_impl_k_timer_start+0xac>)
    4cc6:	4628      	mov	r0, r5
    4cc8:	f7ff fe4a 	bl	4960 <z_add_timeout>
		     duration);
}
    4ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    4cd0:	2f02      	cmp	r7, #2
    4cd2:	f170 0000 	sbcs.w	r0, r0, #0
    4cd6:	da02      	bge.n	4cde <z_impl_k_timer_start+0x8a>
    4cd8:	2702      	movs	r7, #2
    4cda:	f04f 0800 	mov.w	r8, #0
    4cde:	3f01      	subs	r7, #1
    4ce0:	f148 38ff 	adc.w	r8, r8, #4294967295	; 0xffffffff
    4ce4:	e7db      	b.n	4c9e <z_impl_k_timer_start+0x4a>
		duration.ticks = MAX(duration.ticks - 1, 0);
    4ce6:	461c      	mov	r4, r3
    4ce8:	460e      	mov	r6, r1
    4cea:	2b01      	cmp	r3, #1
    4cec:	f171 0100 	sbcs.w	r1, r1, #0
    4cf0:	da01      	bge.n	4cf6 <z_impl_k_timer_start+0xa2>
    4cf2:	2401      	movs	r4, #1
    4cf4:	2600      	movs	r6, #0
    4cf6:	3c01      	subs	r4, #1
    4cf8:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
    4cfc:	e7d8      	b.n	4cb0 <z_impl_k_timer_start+0x5c>
    4cfe:	bf00      	nop
    4d00:	00004b79 	.word	0x00004b79

00004d04 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    4d04:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    4d06:	4802      	ldr	r0, [pc, #8]	; (4d10 <boot_banner+0xc>)
    4d08:	f000 f9eb 	bl	50e2 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    4d0c:	bd08      	pop	{r3, pc}
    4d0e:	bf00      	nop
    4d10:	00007b00 	.word	0x00007b00

00004d14 <nrf_cc3xx_platform_init_no_rng>:
    4d14:	b510      	push	{r4, lr}
    4d16:	4c0a      	ldr	r4, [pc, #40]	; (4d40 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4d18:	6823      	ldr	r3, [r4, #0]
    4d1a:	b11b      	cbz	r3, 4d24 <nrf_cc3xx_platform_init_no_rng+0x10>
    4d1c:	2301      	movs	r3, #1
    4d1e:	2000      	movs	r0, #0
    4d20:	6023      	str	r3, [r4, #0]
    4d22:	bd10      	pop	{r4, pc}
    4d24:	f000 f8f4 	bl	4f10 <CC_LibInitNoRng>
    4d28:	2800      	cmp	r0, #0
    4d2a:	d0f7      	beq.n	4d1c <nrf_cc3xx_platform_init_no_rng+0x8>
    4d2c:	3801      	subs	r0, #1
    4d2e:	2807      	cmp	r0, #7
    4d30:	d803      	bhi.n	4d3a <nrf_cc3xx_platform_init_no_rng+0x26>
    4d32:	4b04      	ldr	r3, [pc, #16]	; (4d44 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4d34:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4d38:	bd10      	pop	{r4, pc}
    4d3a:	4803      	ldr	r0, [pc, #12]	; (4d48 <nrf_cc3xx_platform_init_no_rng+0x34>)
    4d3c:	bd10      	pop	{r4, pc}
    4d3e:	bf00      	nop
    4d40:	20000ae8 	.word	0x20000ae8
    4d44:	00007b30 	.word	0x00007b30
    4d48:	ffff8ffe 	.word	0xffff8ffe

00004d4c <nrf_cc3xx_platform_abort>:
    4d4c:	f3bf 8f4f 	dsb	sy
    4d50:	4905      	ldr	r1, [pc, #20]	; (4d68 <nrf_cc3xx_platform_abort+0x1c>)
    4d52:	4b06      	ldr	r3, [pc, #24]	; (4d6c <nrf_cc3xx_platform_abort+0x20>)
    4d54:	68ca      	ldr	r2, [r1, #12]
    4d56:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4d5a:	4313      	orrs	r3, r2
    4d5c:	60cb      	str	r3, [r1, #12]
    4d5e:	f3bf 8f4f 	dsb	sy
    4d62:	bf00      	nop
    4d64:	e7fd      	b.n	4d62 <nrf_cc3xx_platform_abort+0x16>
    4d66:	bf00      	nop
    4d68:	e000ed00 	.word	0xe000ed00
    4d6c:	05fa0004 	.word	0x05fa0004

00004d70 <CC_PalAbort>:
    4d70:	b430      	push	{r4, r5}
    4d72:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    4d76:	2500      	movs	r5, #0
    4d78:	4b0b      	ldr	r3, [pc, #44]	; (4da8 <CC_PalAbort+0x38>)
    4d7a:	4c0c      	ldr	r4, [pc, #48]	; (4dac <CC_PalAbort+0x3c>)
    4d7c:	490c      	ldr	r1, [pc, #48]	; (4db0 <CC_PalAbort+0x40>)
    4d7e:	6849      	ldr	r1, [r1, #4]
    4d80:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4d84:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    4d88:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4d8c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4d90:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    4d94:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    4d98:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    4d9c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    4da0:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    4da4:	bc30      	pop	{r4, r5}
    4da6:	4708      	bx	r1
    4da8:	50845000 	.word	0x50845000
    4dac:	50844000 	.word	0x50844000
    4db0:	2000021c 	.word	0x2000021c

00004db4 <nrf_cc3xx_platform_set_abort>:
    4db4:	4b02      	ldr	r3, [pc, #8]	; (4dc0 <nrf_cc3xx_platform_set_abort+0xc>)
    4db6:	e9d0 1200 	ldrd	r1, r2, [r0]
    4dba:	e9c3 1200 	strd	r1, r2, [r3]
    4dbe:	4770      	bx	lr
    4dc0:	2000021c 	.word	0x2000021c

00004dc4 <mutex_free>:
    4dc4:	b510      	push	{r4, lr}
    4dc6:	4604      	mov	r4, r0
    4dc8:	b150      	cbz	r0, 4de0 <mutex_free+0x1c>
    4dca:	6863      	ldr	r3, [r4, #4]
    4dcc:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4dd0:	d005      	beq.n	4dde <mutex_free+0x1a>
    4dd2:	4a06      	ldr	r2, [pc, #24]	; (4dec <mutex_free+0x28>)
    4dd4:	4293      	cmp	r3, r2
    4dd6:	d002      	beq.n	4dde <mutex_free+0x1a>
    4dd8:	2300      	movs	r3, #0
    4dda:	6062      	str	r2, [r4, #4]
    4ddc:	6023      	str	r3, [r4, #0]
    4dde:	bd10      	pop	{r4, pc}
    4de0:	4b03      	ldr	r3, [pc, #12]	; (4df0 <mutex_free+0x2c>)
    4de2:	4804      	ldr	r0, [pc, #16]	; (4df4 <mutex_free+0x30>)
    4de4:	685b      	ldr	r3, [r3, #4]
    4de6:	4798      	blx	r3
    4de8:	e7ef      	b.n	4dca <mutex_free+0x6>
    4dea:	bf00      	nop
    4dec:	a95c5f2c 	.word	0xa95c5f2c
    4df0:	2000021c 	.word	0x2000021c
    4df4:	00007b50 	.word	0x00007b50

00004df8 <mutex_lock>:
    4df8:	b1c8      	cbz	r0, 4e2e <mutex_lock+0x36>
    4dfa:	6843      	ldr	r3, [r0, #4]
    4dfc:	4a0d      	ldr	r2, [pc, #52]	; (4e34 <mutex_lock+0x3c>)
    4dfe:	4293      	cmp	r3, r2
    4e00:	d013      	beq.n	4e2a <mutex_lock+0x32>
    4e02:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4e06:	d00e      	beq.n	4e26 <mutex_lock+0x2e>
    4e08:	2301      	movs	r3, #1
    4e0a:	e850 2f00 	ldrex	r2, [r0]
    4e0e:	4619      	mov	r1, r3
    4e10:	e840 1c00 	strex	ip, r1, [r0]
    4e14:	f09c 0f00 	teq	ip, #0
    4e18:	d1f7      	bne.n	4e0a <mutex_lock+0x12>
    4e1a:	2a01      	cmp	r2, #1
    4e1c:	d0f5      	beq.n	4e0a <mutex_lock+0x12>
    4e1e:	f3bf 8f5f 	dmb	sy
    4e22:	2000      	movs	r0, #0
    4e24:	4770      	bx	lr
    4e26:	4804      	ldr	r0, [pc, #16]	; (4e38 <mutex_lock+0x40>)
    4e28:	4770      	bx	lr
    4e2a:	4804      	ldr	r0, [pc, #16]	; (4e3c <mutex_lock+0x44>)
    4e2c:	4770      	bx	lr
    4e2e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4e32:	4770      	bx	lr
    4e34:	a95c5f2c 	.word	0xa95c5f2c
    4e38:	ffff8fe9 	.word	0xffff8fe9
    4e3c:	ffff8fea 	.word	0xffff8fea

00004e40 <mutex_unlock>:
    4e40:	4603      	mov	r3, r0
    4e42:	b180      	cbz	r0, 4e66 <mutex_unlock+0x26>
    4e44:	6842      	ldr	r2, [r0, #4]
    4e46:	4909      	ldr	r1, [pc, #36]	; (4e6c <mutex_unlock+0x2c>)
    4e48:	428a      	cmp	r2, r1
    4e4a:	d00a      	beq.n	4e62 <mutex_unlock+0x22>
    4e4c:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    4e50:	d005      	beq.n	4e5e <mutex_unlock+0x1e>
    4e52:	f3bf 8f5f 	dmb	sy
    4e56:	2200      	movs	r2, #0
    4e58:	4610      	mov	r0, r2
    4e5a:	601a      	str	r2, [r3, #0]
    4e5c:	4770      	bx	lr
    4e5e:	4804      	ldr	r0, [pc, #16]	; (4e70 <mutex_unlock+0x30>)
    4e60:	4770      	bx	lr
    4e62:	4804      	ldr	r0, [pc, #16]	; (4e74 <mutex_unlock+0x34>)
    4e64:	4770      	bx	lr
    4e66:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4e6a:	4770      	bx	lr
    4e6c:	a95c5f2c 	.word	0xa95c5f2c
    4e70:	ffff8fe9 	.word	0xffff8fe9
    4e74:	ffff8fea 	.word	0xffff8fea

00004e78 <mutex_init>:
    4e78:	b510      	push	{r4, lr}
    4e7a:	4604      	mov	r4, r0
    4e7c:	b120      	cbz	r0, 4e88 <mutex_init+0x10>
    4e7e:	2300      	movs	r3, #0
    4e80:	4a03      	ldr	r2, [pc, #12]	; (4e90 <mutex_init+0x18>)
    4e82:	6023      	str	r3, [r4, #0]
    4e84:	6062      	str	r2, [r4, #4]
    4e86:	bd10      	pop	{r4, pc}
    4e88:	4802      	ldr	r0, [pc, #8]	; (4e94 <mutex_init+0x1c>)
    4e8a:	f7ff ff71 	bl	4d70 <CC_PalAbort>
    4e8e:	e7f6      	b.n	4e7e <mutex_init+0x6>
    4e90:	3a00003a 	.word	0x3a00003a
    4e94:	00007b78 	.word	0x00007b78

00004e98 <nrf_cc3xx_platform_set_mutexes>:
    4e98:	b570      	push	{r4, r5, r6, lr}
    4e9a:	4c19      	ldr	r4, [pc, #100]	; (4f00 <nrf_cc3xx_platform_set_mutexes+0x68>)
    4e9c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4ea0:	6806      	ldr	r6, [r0, #0]
    4ea2:	f8c4 c004 	str.w	ip, [r4, #4]
    4ea6:	f8d0 c008 	ldr.w	ip, [r0, #8]
    4eaa:	68c0      	ldr	r0, [r0, #12]
    4eac:	f8c4 c008 	str.w	ip, [r4, #8]
    4eb0:	60e0      	str	r0, [r4, #12]
    4eb2:	6026      	str	r6, [r4, #0]
    4eb4:	6808      	ldr	r0, [r1, #0]
    4eb6:	4b13      	ldr	r3, [pc, #76]	; (4f04 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    4eb8:	4d13      	ldr	r5, [pc, #76]	; (4f08 <nrf_cc3xx_platform_set_mutexes+0x70>)
    4eba:	6018      	str	r0, [r3, #0]
    4ebc:	6848      	ldr	r0, [r1, #4]
    4ebe:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    4ec2:	6058      	str	r0, [r3, #4]
    4ec4:	6888      	ldr	r0, [r1, #8]
    4ec6:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    4eca:	6098      	str	r0, [r3, #8]
    4ecc:	68c8      	ldr	r0, [r1, #12]
    4ece:	6909      	ldr	r1, [r1, #16]
    4ed0:	60d8      	str	r0, [r3, #12]
    4ed2:	6119      	str	r1, [r3, #16]
    4ed4:	d012      	beq.n	4efc <nrf_cc3xx_platform_set_mutexes+0x64>
    4ed6:	2300      	movs	r3, #0
    4ed8:	4a0c      	ldr	r2, [pc, #48]	; (4f0c <nrf_cc3xx_platform_set_mutexes+0x74>)
    4eda:	f505 708a 	add.w	r0, r5, #276	; 0x114
    4ede:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    4ee2:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    4ee6:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    4eea:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    4eee:	47b0      	blx	r6
    4ef0:	6823      	ldr	r3, [r4, #0]
    4ef2:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    4ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4efa:	4718      	bx	r3
    4efc:	bd70      	pop	{r4, r5, r6, pc}
    4efe:	bf00      	nop
    4f00:	2000022c 	.word	0x2000022c
    4f04:	2000023c 	.word	0x2000023c
    4f08:	20000b00 	.word	0x20000b00
    4f0c:	a95c5f2c 	.word	0xa95c5f2c

00004f10 <CC_LibInitNoRng>:
    4f10:	b508      	push	{r3, lr}
    4f12:	f000 f811 	bl	4f38 <CC_HalInit>
    4f16:	b930      	cbnz	r0, 4f26 <CC_LibInitNoRng+0x16>
    4f18:	f000 f810 	bl	4f3c <CC_PalInit>
    4f1c:	b938      	cbnz	r0, 4f2e <CC_LibInitNoRng+0x1e>
    4f1e:	4a05      	ldr	r2, [pc, #20]	; (4f34 <CC_LibInitNoRng+0x24>)
    4f20:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    4f24:	bd08      	pop	{r3, pc}
    4f26:	f000 f837 	bl	4f98 <CC_PalTerminate>
    4f2a:	2003      	movs	r0, #3
    4f2c:	bd08      	pop	{r3, pc}
    4f2e:	2004      	movs	r0, #4
    4f30:	bd08      	pop	{r3, pc}
    4f32:	bf00      	nop
    4f34:	50845000 	.word	0x50845000

00004f38 <CC_HalInit>:
    4f38:	2000      	movs	r0, #0
    4f3a:	4770      	bx	lr

00004f3c <CC_PalInit>:
    4f3c:	b510      	push	{r4, lr}
    4f3e:	4811      	ldr	r0, [pc, #68]	; (4f84 <CC_PalInit+0x48>)
    4f40:	f000 f848 	bl	4fd4 <CC_PalMutexCreate>
    4f44:	b100      	cbz	r0, 4f48 <CC_PalInit+0xc>
    4f46:	bd10      	pop	{r4, pc}
    4f48:	480f      	ldr	r0, [pc, #60]	; (4f88 <CC_PalInit+0x4c>)
    4f4a:	f000 f843 	bl	4fd4 <CC_PalMutexCreate>
    4f4e:	2800      	cmp	r0, #0
    4f50:	d1f9      	bne.n	4f46 <CC_PalInit+0xa>
    4f52:	4c0e      	ldr	r4, [pc, #56]	; (4f8c <CC_PalInit+0x50>)
    4f54:	4620      	mov	r0, r4
    4f56:	f000 f83d 	bl	4fd4 <CC_PalMutexCreate>
    4f5a:	2800      	cmp	r0, #0
    4f5c:	d1f3      	bne.n	4f46 <CC_PalInit+0xa>
    4f5e:	4b0c      	ldr	r3, [pc, #48]	; (4f90 <CC_PalInit+0x54>)
    4f60:	480c      	ldr	r0, [pc, #48]	; (4f94 <CC_PalInit+0x58>)
    4f62:	601c      	str	r4, [r3, #0]
    4f64:	f000 f836 	bl	4fd4 <CC_PalMutexCreate>
    4f68:	4601      	mov	r1, r0
    4f6a:	2800      	cmp	r0, #0
    4f6c:	d1eb      	bne.n	4f46 <CC_PalInit+0xa>
    4f6e:	f000 f82d 	bl	4fcc <CC_PalDmaInit>
    4f72:	4604      	mov	r4, r0
    4f74:	b108      	cbz	r0, 4f7a <CC_PalInit+0x3e>
    4f76:	4620      	mov	r0, r4
    4f78:	bd10      	pop	{r4, pc}
    4f7a:	f000 f83f 	bl	4ffc <CC_PalPowerSaveModeInit>
    4f7e:	4620      	mov	r0, r4
    4f80:	e7fa      	b.n	4f78 <CC_PalInit+0x3c>
    4f82:	bf00      	nop
    4f84:	20000274 	.word	0x20000274
    4f88:	20000268 	.word	0x20000268
    4f8c:	20000270 	.word	0x20000270
    4f90:	20000278 	.word	0x20000278
    4f94:	2000026c 	.word	0x2000026c

00004f98 <CC_PalTerminate>:
    4f98:	b508      	push	{r3, lr}
    4f9a:	4808      	ldr	r0, [pc, #32]	; (4fbc <CC_PalTerminate+0x24>)
    4f9c:	f000 f824 	bl	4fe8 <CC_PalMutexDestroy>
    4fa0:	4807      	ldr	r0, [pc, #28]	; (4fc0 <CC_PalTerminate+0x28>)
    4fa2:	f000 f821 	bl	4fe8 <CC_PalMutexDestroy>
    4fa6:	4807      	ldr	r0, [pc, #28]	; (4fc4 <CC_PalTerminate+0x2c>)
    4fa8:	f000 f81e 	bl	4fe8 <CC_PalMutexDestroy>
    4fac:	4806      	ldr	r0, [pc, #24]	; (4fc8 <CC_PalTerminate+0x30>)
    4fae:	f000 f81b 	bl	4fe8 <CC_PalMutexDestroy>
    4fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4fb6:	f000 b80b 	b.w	4fd0 <CC_PalDmaTerminate>
    4fba:	bf00      	nop
    4fbc:	20000274 	.word	0x20000274
    4fc0:	20000268 	.word	0x20000268
    4fc4:	20000270 	.word	0x20000270
    4fc8:	2000026c 	.word	0x2000026c

00004fcc <CC_PalDmaInit>:
    4fcc:	2000      	movs	r0, #0
    4fce:	4770      	bx	lr

00004fd0 <CC_PalDmaTerminate>:
    4fd0:	4770      	bx	lr
    4fd2:	bf00      	nop

00004fd4 <CC_PalMutexCreate>:
    4fd4:	b508      	push	{r3, lr}
    4fd6:	4b03      	ldr	r3, [pc, #12]	; (4fe4 <CC_PalMutexCreate+0x10>)
    4fd8:	6802      	ldr	r2, [r0, #0]
    4fda:	681b      	ldr	r3, [r3, #0]
    4fdc:	6810      	ldr	r0, [r2, #0]
    4fde:	4798      	blx	r3
    4fe0:	2000      	movs	r0, #0
    4fe2:	bd08      	pop	{r3, pc}
    4fe4:	2000022c 	.word	0x2000022c

00004fe8 <CC_PalMutexDestroy>:
    4fe8:	b508      	push	{r3, lr}
    4fea:	4b03      	ldr	r3, [pc, #12]	; (4ff8 <CC_PalMutexDestroy+0x10>)
    4fec:	6802      	ldr	r2, [r0, #0]
    4fee:	685b      	ldr	r3, [r3, #4]
    4ff0:	6810      	ldr	r0, [r2, #0]
    4ff2:	4798      	blx	r3
    4ff4:	2000      	movs	r0, #0
    4ff6:	bd08      	pop	{r3, pc}
    4ff8:	2000022c 	.word	0x2000022c

00004ffc <CC_PalPowerSaveModeInit>:
    4ffc:	b570      	push	{r4, r5, r6, lr}
    4ffe:	4c09      	ldr	r4, [pc, #36]	; (5024 <CC_PalPowerSaveModeInit+0x28>)
    5000:	4d09      	ldr	r5, [pc, #36]	; (5028 <CC_PalPowerSaveModeInit+0x2c>)
    5002:	6920      	ldr	r0, [r4, #16]
    5004:	68ab      	ldr	r3, [r5, #8]
    5006:	4798      	blx	r3
    5008:	b118      	cbz	r0, 5012 <CC_PalPowerSaveModeInit+0x16>
    500a:	4b08      	ldr	r3, [pc, #32]	; (502c <CC_PalPowerSaveModeInit+0x30>)
    500c:	4808      	ldr	r0, [pc, #32]	; (5030 <CC_PalPowerSaveModeInit+0x34>)
    500e:	685b      	ldr	r3, [r3, #4]
    5010:	4798      	blx	r3
    5012:	2100      	movs	r1, #0
    5014:	4a07      	ldr	r2, [pc, #28]	; (5034 <CC_PalPowerSaveModeInit+0x38>)
    5016:	68eb      	ldr	r3, [r5, #12]
    5018:	6011      	str	r1, [r2, #0]
    501a:	6920      	ldr	r0, [r4, #16]
    501c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5020:	4718      	bx	r3
    5022:	bf00      	nop
    5024:	2000023c 	.word	0x2000023c
    5028:	2000022c 	.word	0x2000022c
    502c:	2000021c 	.word	0x2000021c
    5030:	00007b9c 	.word	0x00007b9c
    5034:	20000afc 	.word	0x20000afc

00005038 <z_impl_gpio_pin_configure>:
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
					    gpio_pin_t pin,
					    gpio_flags_t flags)
{
    5038:	b538      	push	{r3, r4, r5, lr}
    503a:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    503c:	6885      	ldr	r5, [r0, #8]
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    503e:	6904      	ldr	r4, [r0, #16]

	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH))
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    5040:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    5044:	d007      	beq.n	5056 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    5046:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    504a:	d004      	beq.n	5056 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    504c:	f012 0f01 	tst.w	r2, #1
    5050:	d001      	beq.n	5056 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    5052:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	}

	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5056:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    505a:	f013 0f01 	tst.w	r3, #1
    505e:	d00a      	beq.n	5076 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5060:	6823      	ldr	r3, [r4, #0]
    5062:	f04f 0c01 	mov.w	ip, #1
    5066:	fa0c fc01 	lsl.w	ip, ip, r1
    506a:	ea43 030c 	orr.w	r3, r3, ip
    506e:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
    5070:	682b      	ldr	r3, [r5, #0]
    5072:	4798      	blx	r3
}
    5074:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5076:	6823      	ldr	r3, [r4, #0]
    5078:	f04f 0c01 	mov.w	ip, #1
    507c:	fa0c fc01 	lsl.w	ip, ip, r1
    5080:	ea23 030c 	bic.w	r3, r3, ip
    5084:	6023      	str	r3, [r4, #0]
    5086:	e7f3      	b.n	5070 <z_impl_gpio_pin_configure+0x38>

00005088 <gpio_pin_configure_dt>:
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
    5088:	b508      	push	{r3, lr}
    508a:	4603      	mov	r3, r0
    508c:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    508e:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    5090:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    5092:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    5094:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    5098:	f7ff ffce 	bl	5038 <z_impl_gpio_pin_configure>
}
    509c:	bd08      	pop	{r3, pc}

0000509e <gpio_pin_toggle_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
    509e:	b508      	push	{r3, lr}
    50a0:	4603      	mov	r3, r0
	return gpio_pin_toggle(spec->port, spec->pin);
    50a2:	6800      	ldr	r0, [r0, #0]
    50a4:	791b      	ldrb	r3, [r3, #4]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    50a6:	2101      	movs	r1, #1
    50a8:	4099      	lsls	r1, r3
	const struct gpio_driver_api *api =
    50aa:	6883      	ldr	r3, [r0, #8]
	return api->port_toggle_bits(port, pins);
    50ac:	695b      	ldr	r3, [r3, #20]
    50ae:	4798      	blx	r3
}
    50b0:	bd08      	pop	{r3, pc}

000050b2 <k_msleep>:
{
    50b2:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    50b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    50b8:	17c1      	asrs	r1, r0, #31
    50ba:	03c9      	lsls	r1, r1, #15
    50bc:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    50c0:	03c0      	lsls	r0, r0, #15
    50c2:	f240 33e7 	movw	r3, #999	; 0x3e7
    50c6:	18c0      	adds	r0, r0, r3
    50c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    50cc:	f04f 0300 	mov.w	r3, #0
    50d0:	f141 0100 	adc.w	r1, r1, #0
    50d4:	f7fb f83e 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    50d8:	f7ff fb78 	bl	47cc <z_impl_k_sleep>
}
    50dc:	bd08      	pop	{r3, pc}

000050de <arch_printk_char_out>:
}
    50de:	2000      	movs	r0, #0
    50e0:	4770      	bx	lr

000050e2 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    50e2:	b40f      	push	{r0, r1, r2, r3}
    50e4:	b500      	push	{lr}
    50e6:	b083      	sub	sp, #12
    50e8:	a904      	add	r1, sp, #16
    50ea:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    50ee:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    50f0:	f7fb fa34 	bl	55c <vprintk>

	va_end(ap);
}
    50f4:	b003      	add	sp, #12
    50f6:	f85d eb04 	ldr.w	lr, [sp], #4
    50fa:	b004      	add	sp, #16
    50fc:	4770      	bx	lr

000050fe <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    50fe:	b508      	push	{r3, lr}
    5100:	4604      	mov	r4, r0
    5102:	4608      	mov	r0, r1
    5104:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    5106:	461a      	mov	r2, r3
    5108:	47a0      	blx	r4
	return z_impl_z_current_get();
    510a:	f7ff fb89 	bl	4820 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    510e:	f7fc fbdf 	bl	18d0 <z_impl_k_thread_abort>

00005112 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    5112:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5116:	8b03      	ldrh	r3, [r0, #24]
    5118:	f023 0307 	bic.w	r3, r3, #7
    511c:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    511e:	8303      	strh	r3, [r0, #24]
}
    5120:	4770      	bx	lr

00005122 <notify_monitors>:
{
    5122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5126:	4606      	mov	r6, r0
    5128:	460f      	mov	r7, r1
    512a:	4690      	mov	r8, r2
	return list->head;
    512c:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    512e:	b121      	cbz	r1, 513a <notify_monitors+0x18>
	return node->next;
    5130:	680c      	ldr	r4, [r1, #0]
    5132:	b13c      	cbz	r4, 5144 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    5134:	b931      	cbnz	r1, 5144 <notify_monitors+0x22>
    5136:	460c      	mov	r4, r1
    5138:	e004      	b.n	5144 <notify_monitors+0x22>
    513a:	460c      	mov	r4, r1
    513c:	e002      	b.n	5144 <notify_monitors+0x22>
    513e:	4623      	mov	r3, r4
    5140:	4621      	mov	r1, r4
    5142:	461c      	mov	r4, r3
    5144:	b169      	cbz	r1, 5162 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    5146:	684d      	ldr	r5, [r1, #4]
    5148:	4643      	mov	r3, r8
    514a:	463a      	mov	r2, r7
    514c:	4630      	mov	r0, r6
    514e:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5150:	2c00      	cmp	r4, #0
    5152:	d0f4      	beq.n	513e <notify_monitors+0x1c>
	return node->next;
    5154:	6823      	ldr	r3, [r4, #0]
    5156:	2b00      	cmp	r3, #0
    5158:	d0f2      	beq.n	5140 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    515a:	2c00      	cmp	r4, #0
    515c:	d1f0      	bne.n	5140 <notify_monitors+0x1e>
    515e:	4623      	mov	r3, r4
    5160:	e7ee      	b.n	5140 <notify_monitors+0x1e>
}
    5162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005166 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5166:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5168:	f013 0307 	ands.w	r3, r3, #7
    516c:	d103      	bne.n	5176 <process_recheck+0x10>
	return list->head;
    516e:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    5170:	b10a      	cbz	r2, 5176 <process_recheck+0x10>
		evt = EVT_START;
    5172:	2003      	movs	r0, #3
    5174:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    5176:	2b02      	cmp	r3, #2
    5178:	d003      	beq.n	5182 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    517a:	2b01      	cmp	r3, #1
    517c:	d006      	beq.n	518c <process_recheck+0x26>
	int evt = EVT_NOP;
    517e:	2000      	movs	r0, #0
    5180:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    5182:	8b42      	ldrh	r2, [r0, #26]
    5184:	2a00      	cmp	r2, #0
    5186:	d1f8      	bne.n	517a <process_recheck+0x14>
		evt = EVT_STOP;
    5188:	2004      	movs	r0, #4
    518a:	4770      	bx	lr
    518c:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    518e:	b10b      	cbz	r3, 5194 <process_recheck+0x2e>
		evt = EVT_RESET;
    5190:	2005      	movs	r0, #5
}
    5192:	4770      	bx	lr
	int evt = EVT_NOP;
    5194:	2000      	movs	r0, #0
    5196:	4770      	bx	lr

00005198 <process_complete>:
{
    5198:	b510      	push	{r4, lr}
    519a:	4604      	mov	r4, r0
    519c:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    519e:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    51a0:	2a00      	cmp	r2, #0
    51a2:	db07      	blt.n	51b4 <process_complete+0x1c>
    51a4:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    51a8:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    51aa:	2a01      	cmp	r2, #1
    51ac:	d90e      	bls.n	51cc <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    51ae:	2b04      	cmp	r3, #4
    51b0:	d036      	beq.n	5220 <process_complete+0x88>
}
    51b2:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    51b4:	e9d0 0100 	ldrd	r0, r1, [r0]
    51b8:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    51bc:	2300      	movs	r3, #0
    51be:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    51c0:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    51c2:	2101      	movs	r1, #1
    51c4:	4620      	mov	r0, r4
    51c6:	f7ff ffa4 	bl	5112 <set_state>
    51ca:	e7f2      	b.n	51b2 <process_complete+0x1a>
		*clients = mgr->clients;
    51cc:	e9d0 0100 	ldrd	r0, r1, [r0]
    51d0:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    51d4:	2200      	movs	r2, #0
    51d6:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    51d8:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    51da:	2b06      	cmp	r3, #6
    51dc:	d11b      	bne.n	5216 <process_complete+0x7e>
	return list->head;
    51de:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    51e2:	b153      	cbz	r3, 51fa <process_complete+0x62>
				mgr->refs += 1U;
    51e4:	8b62      	ldrh	r2, [r4, #26]
    51e6:	3201      	adds	r2, #1
    51e8:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    51ea:	461a      	mov	r2, r3
	return node->next;
    51ec:	681b      	ldr	r3, [r3, #0]
    51ee:	2b00      	cmp	r3, #0
    51f0:	d0f7      	beq.n	51e2 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    51f2:	2a00      	cmp	r2, #0
    51f4:	d1f5      	bne.n	51e2 <process_complete+0x4a>
    51f6:	4613      	mov	r3, r2
    51f8:	e7f3      	b.n	51e2 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    51fa:	2102      	movs	r1, #2
    51fc:	4620      	mov	r0, r4
    51fe:	f7ff ff88 	bl	5112 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    5202:	4620      	mov	r0, r4
    5204:	f7ff ffaf 	bl	5166 <process_recheck>
    5208:	2800      	cmp	r0, #0
    520a:	d0d2      	beq.n	51b2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    520c:	8b23      	ldrh	r3, [r4, #24]
    520e:	f043 0320 	orr.w	r3, r3, #32
    5212:	8323      	strh	r3, [r4, #24]
    5214:	e7cd      	b.n	51b2 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    5216:	2100      	movs	r1, #0
    5218:	4620      	mov	r0, r4
    521a:	f7ff ff7a 	bl	5112 <set_state>
    521e:	e7f0      	b.n	5202 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    5220:	2100      	movs	r1, #0
    5222:	f7ff ff76 	bl	5112 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    5226:	4620      	mov	r0, r4
    5228:	f7ff ff9d 	bl	5166 <process_recheck>
    522c:	2800      	cmp	r0, #0
    522e:	d0c0      	beq.n	51b2 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5230:	8b23      	ldrh	r3, [r4, #24]
    5232:	f043 0320 	orr.w	r3, r3, #32
    5236:	8323      	strh	r3, [r4, #24]
}
    5238:	e7bb      	b.n	51b2 <process_complete+0x1a>

0000523a <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    523a:	b150      	cbz	r0, 5252 <validate_args+0x18>
{
    523c:	b510      	push	{r4, lr}
    523e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    5240:	b151      	cbz	r1, 5258 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    5242:	1d08      	adds	r0, r1, #4
    5244:	f000 f8c4 	bl	53d0 <sys_notify_validate>
	if ((rv == 0)
    5248:	b910      	cbnz	r0, 5250 <validate_args+0x16>
	    && ((cli->notify.flags
    524a:	68a3      	ldr	r3, [r4, #8]
    524c:	2b03      	cmp	r3, #3
    524e:	d806      	bhi.n	525e <validate_args+0x24>
}
    5250:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5252:	f06f 0015 	mvn.w	r0, #21
}
    5256:	4770      	bx	lr
		return -EINVAL;
    5258:	f06f 0015 	mvn.w	r0, #21
    525c:	e7f8      	b.n	5250 <validate_args+0x16>
		rv = -EINVAL;
    525e:	f06f 0015 	mvn.w	r0, #21
    5262:	e7f5      	b.n	5250 <validate_args+0x16>

00005264 <notify_one>:
{
    5264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5268:	4607      	mov	r7, r0
    526a:	460c      	mov	r4, r1
    526c:	4616      	mov	r6, r2
    526e:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    5270:	4619      	mov	r1, r3
    5272:	1d20      	adds	r0, r4, #4
    5274:	f000 f8c3 	bl	53fe <sys_notify_finalize>
	if (cb) {
    5278:	b128      	cbz	r0, 5286 <notify_one+0x22>
    527a:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    527c:	462b      	mov	r3, r5
    527e:	4632      	mov	r2, r6
    5280:	4621      	mov	r1, r4
    5282:	4638      	mov	r0, r7
    5284:	47c0      	blx	r8
}
    5286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000528a <notify_all>:
{
    528a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    528e:	4680      	mov	r8, r0
    5290:	460c      	mov	r4, r1
    5292:	4617      	mov	r7, r2
    5294:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    5296:	e004      	b.n	52a2 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    5298:	4633      	mov	r3, r6
    529a:	463a      	mov	r2, r7
    529c:	4640      	mov	r0, r8
    529e:	f7ff ffe1 	bl	5264 <notify_one>
	return list->head;
    52a2:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    52a4:	b131      	cbz	r1, 52b4 <notify_all+0x2a>
	return node->next;
    52a6:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    52a8:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    52aa:	6863      	ldr	r3, [r4, #4]
    52ac:	428b      	cmp	r3, r1
    52ae:	d1f3      	bne.n	5298 <notify_all+0xe>
	list->tail = node;
    52b0:	6065      	str	r5, [r4, #4]
}
    52b2:	e7f1      	b.n	5298 <notify_all+0xe>
}
    52b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000052b8 <transition_complete>:
{
    52b8:	b508      	push	{r3, lr}
	__asm__ volatile(
    52ba:	f04f 0c20 	mov.w	ip, #32
    52be:	f3ef 8211 	mrs	r2, BASEPRI
    52c2:	f38c 8812 	msr	BASEPRI_MAX, ip
    52c6:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    52ca:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    52cc:	2101      	movs	r1, #1
    52ce:	f7fb f953 	bl	578 <process_event>
}
    52d2:	bd08      	pop	{r3, pc}

000052d4 <onoff_manager_init>:
	if ((mgr == NULL)
    52d4:	4603      	mov	r3, r0
    52d6:	b170      	cbz	r0, 52f6 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    52d8:	b181      	cbz	r1, 52fc <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    52da:	680a      	ldr	r2, [r1, #0]
    52dc:	b18a      	cbz	r2, 5302 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    52de:	684a      	ldr	r2, [r1, #4]
    52e0:	b192      	cbz	r2, 5308 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    52e2:	2000      	movs	r0, #0
    52e4:	6018      	str	r0, [r3, #0]
    52e6:	6058      	str	r0, [r3, #4]
    52e8:	6098      	str	r0, [r3, #8]
    52ea:	60d8      	str	r0, [r3, #12]
    52ec:	6118      	str	r0, [r3, #16]
    52ee:	6158      	str	r0, [r3, #20]
    52f0:	6198      	str	r0, [r3, #24]
    52f2:	6119      	str	r1, [r3, #16]
	return 0;
    52f4:	4770      	bx	lr
		return -EINVAL;
    52f6:	f06f 0015 	mvn.w	r0, #21
    52fa:	4770      	bx	lr
    52fc:	f06f 0015 	mvn.w	r0, #21
    5300:	4770      	bx	lr
    5302:	f06f 0015 	mvn.w	r0, #21
    5306:	4770      	bx	lr
    5308:	f06f 0015 	mvn.w	r0, #21
}
    530c:	4770      	bx	lr

0000530e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    530e:	b570      	push	{r4, r5, r6, lr}
    5310:	4605      	mov	r5, r0
    5312:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5314:	f7ff ff91 	bl	523a <validate_args>

	if (rv < 0) {
    5318:	1e04      	subs	r4, r0, #0
    531a:	db30      	blt.n	537e <onoff_request+0x70>
    531c:	f04f 0320 	mov.w	r3, #32
    5320:	f3ef 8211 	mrs	r2, BASEPRI
    5324:	f383 8812 	msr	BASEPRI_MAX, r3
    5328:	f3bf 8f6f 	isb	sy
    532c:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    532e:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    5332:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5336:	8b6b      	ldrh	r3, [r5, #26]
    5338:	f64f 71ff 	movw	r1, #65535	; 0xffff
    533c:	428b      	cmp	r3, r1
    533e:	d02c      	beq.n	539a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    5340:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    5342:	f1bc 0f02 	cmp.w	ip, #2
    5346:	d008      	beq.n	535a <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    5348:	f1bc 0f06 	cmp.w	ip, #6
    534c:	d819      	bhi.n	5382 <onoff_request+0x74>
    534e:	e8df f00c 	tbb	[pc, ip]
    5352:	181e      	.short	0x181e
    5354:	2a1e1818 	.word	0x2a1e1818
    5358:	1e          	.byte	0x1e
    5359:	00          	.byte	0x00
		mgr->refs += 1U;
    535a:	3301      	adds	r3, #1
    535c:	836b      	strh	r3, [r5, #26]
		notify = true;
    535e:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    5360:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    5362:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    5364:	b128      	cbz	r0, 5372 <onoff_request+0x64>
	parent->next = child;
    5366:	2000      	movs	r0, #0
    5368:	6030      	str	r0, [r6, #0]
	return list->tail;
    536a:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    536c:	b308      	cbz	r0, 53b2 <onoff_request+0xa4>
	parent->next = child;
    536e:	6006      	str	r6, [r0, #0]
	list->tail = node;
    5370:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    5372:	bb09      	cbnz	r1, 53b8 <onoff_request+0xaa>
	__asm__ volatile(
    5374:	f38e 8811 	msr	BASEPRI, lr
    5378:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    537c:	bb0b      	cbnz	r3, 53c2 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    537e:	4620      	mov	r0, r4
    5380:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    5382:	f06f 0404 	mvn.w	r4, #4
    5386:	2300      	movs	r3, #0
    5388:	4619      	mov	r1, r3
    538a:	4618      	mov	r0, r3
    538c:	e7ea      	b.n	5364 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    538e:	fabc f18c 	clz	r1, ip
    5392:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    5394:	2300      	movs	r3, #0
		add_client = true;
    5396:	2001      	movs	r0, #1
    5398:	e7e4      	b.n	5364 <onoff_request+0x56>
		rv = -EAGAIN;
    539a:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    539e:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    53a0:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    53a2:	4618      	mov	r0, r3
    53a4:	e7de      	b.n	5364 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    53a6:	f06f 0485 	mvn.w	r4, #133	; 0x85
    53aa:	2300      	movs	r3, #0
    53ac:	4619      	mov	r1, r3
    53ae:	4618      	mov	r0, r3
    53b0:	e7d8      	b.n	5364 <onoff_request+0x56>
    53b2:	606e      	str	r6, [r5, #4]
	list->head = node;
    53b4:	602e      	str	r6, [r5, #0]
}
    53b6:	e7dc      	b.n	5372 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    53b8:	2102      	movs	r1, #2
    53ba:	4628      	mov	r0, r5
    53bc:	f7fb f8dc 	bl	578 <process_event>
    53c0:	e7dd      	b.n	537e <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    53c2:	2300      	movs	r3, #0
    53c4:	4662      	mov	r2, ip
    53c6:	4631      	mov	r1, r6
    53c8:	4628      	mov	r0, r5
    53ca:	f7ff ff4b 	bl	5264 <notify_one>
    53ce:	e7d6      	b.n	537e <onoff_request+0x70>

000053d0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    53d0:	4602      	mov	r2, r0
    53d2:	b158      	cbz	r0, 53ec <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    53d4:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    53d6:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    53da:	2b01      	cmp	r3, #1
    53dc:	d003      	beq.n	53e6 <sys_notify_validate+0x16>
    53de:	2b03      	cmp	r3, #3
    53e0:	d107      	bne.n	53f2 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    53e2:	6803      	ldr	r3, [r0, #0]
    53e4:	b143      	cbz	r3, 53f8 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    53e6:	2000      	movs	r0, #0
    53e8:	6090      	str	r0, [r2, #8]
    53ea:	4770      	bx	lr
		return -EINVAL;
    53ec:	f06f 0015 	mvn.w	r0, #21
    53f0:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    53f2:	f06f 0015 	mvn.w	r0, #21
    53f6:	4770      	bx	lr
			rv = -EINVAL;
    53f8:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    53fc:	4770      	bx	lr

000053fe <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    53fe:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5400:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5402:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5406:	6081      	str	r1, [r0, #8]
	switch (method) {
    5408:	2a03      	cmp	r2, #3
    540a:	d103      	bne.n	5414 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    540c:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    540e:	2200      	movs	r2, #0
    5410:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    5412:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    5414:	2000      	movs	r0, #0
    5416:	e7fa      	b.n	540e <sys_notify_finalize+0x10>

00005418 <extract_decimal>:
{
    5418:	4684      	mov	ip, r0
	const char *sp = *str;
    541a:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    541c:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    541e:	e006      	b.n	542e <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    5420:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5424:	3201      	adds	r2, #1
    5426:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    542a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    542e:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    5430:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    5434:	2909      	cmp	r1, #9
    5436:	d9f3      	bls.n	5420 <extract_decimal+0x8>
	*str = sp;
    5438:	f8cc 2000 	str.w	r2, [ip]
}
    543c:	4770      	bx	lr

0000543e <extract_width>:
{
    543e:	b530      	push	{r4, r5, lr}
    5440:	b083      	sub	sp, #12
    5442:	4604      	mov	r4, r0
    5444:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    5446:	7803      	ldrb	r3, [r0, #0]
    5448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    544c:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    544e:	460d      	mov	r5, r1
    5450:	780b      	ldrb	r3, [r1, #0]
    5452:	2b2a      	cmp	r3, #42	; 0x2a
    5454:	d018      	beq.n	5488 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    5456:	a801      	add	r0, sp, #4
    5458:	f7ff ffde 	bl	5418 <extract_decimal>
	if (sp != wp) {
    545c:	9b01      	ldr	r3, [sp, #4]
    545e:	429d      	cmp	r5, r3
    5460:	d00f      	beq.n	5482 <extract_width+0x44>
		conv->width_present = true;
    5462:	7823      	ldrb	r3, [r4, #0]
    5464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5468:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    546a:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    546c:	b2db      	uxtb	r3, r3
    546e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    5472:	2800      	cmp	r0, #0
    5474:	db10      	blt.n	5498 <extract_width+0x5a>
    5476:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    5478:	4313      	orrs	r3, r2
    547a:	7822      	ldrb	r2, [r4, #0]
    547c:	f363 0241 	bfi	r2, r3, #1, #1
    5480:	7022      	strb	r2, [r4, #0]
	return sp;
    5482:	9801      	ldr	r0, [sp, #4]
}
    5484:	b003      	add	sp, #12
    5486:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    5488:	7843      	ldrb	r3, [r0, #1]
    548a:	f043 0301 	orr.w	r3, r3, #1
    548e:	7043      	strb	r3, [r0, #1]
		return ++sp;
    5490:	4608      	mov	r0, r1
    5492:	3001      	adds	r0, #1
    5494:	9001      	str	r0, [sp, #4]
    5496:	e7f5      	b.n	5484 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    5498:	2201      	movs	r2, #1
    549a:	e7ed      	b.n	5478 <extract_width+0x3a>

0000549c <extract_prec>:
{
    549c:	b510      	push	{r4, lr}
    549e:	b082      	sub	sp, #8
    54a0:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    54a2:	780b      	ldrb	r3, [r1, #0]
    54a4:	2b2e      	cmp	r3, #46	; 0x2e
    54a6:	bf14      	ite	ne
    54a8:	2300      	movne	r3, #0
    54aa:	2301      	moveq	r3, #1
    54ac:	7842      	ldrb	r2, [r0, #1]
    54ae:	f363 0241 	bfi	r2, r3, #1, #1
    54b2:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    54b4:	b1c3      	cbz	r3, 54e8 <extract_prec+0x4c>
    54b6:	4604      	mov	r4, r0
	++sp;
    54b8:	9b01      	ldr	r3, [sp, #4]
    54ba:	1c5a      	adds	r2, r3, #1
    54bc:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    54be:	785b      	ldrb	r3, [r3, #1]
    54c0:	2b2a      	cmp	r3, #42	; 0x2a
    54c2:	d013      	beq.n	54ec <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    54c4:	a801      	add	r0, sp, #4
    54c6:	f7ff ffa7 	bl	5418 <extract_decimal>
	conv->prec_value = prec;
    54ca:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    54cc:	7823      	ldrb	r3, [r4, #0]
    54ce:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    54d2:	2800      	cmp	r0, #0
    54d4:	db12      	blt.n	54fc <extract_prec+0x60>
    54d6:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    54d8:	4313      	orrs	r3, r2
    54da:	7822      	ldrb	r2, [r4, #0]
    54dc:	f363 0241 	bfi	r2, r3, #1, #1
    54e0:	7022      	strb	r2, [r4, #0]
	return sp;
    54e2:	9801      	ldr	r0, [sp, #4]
}
    54e4:	b002      	add	sp, #8
    54e6:	bd10      	pop	{r4, pc}
		return sp;
    54e8:	4608      	mov	r0, r1
    54ea:	e7fb      	b.n	54e4 <extract_prec+0x48>
		conv->prec_star = true;
    54ec:	7843      	ldrb	r3, [r0, #1]
    54ee:	f043 0304 	orr.w	r3, r3, #4
    54f2:	7043      	strb	r3, [r0, #1]
		return ++sp;
    54f4:	4610      	mov	r0, r2
    54f6:	3001      	adds	r0, #1
    54f8:	9001      	str	r0, [sp, #4]
    54fa:	e7f3      	b.n	54e4 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    54fc:	2201      	movs	r2, #1
    54fe:	e7eb      	b.n	54d8 <extract_prec+0x3c>

00005500 <extract_length>:
{
    5500:	4602      	mov	r2, r0
	switch (*sp) {
    5502:	780b      	ldrb	r3, [r1, #0]
    5504:	3b4c      	subs	r3, #76	; 0x4c
    5506:	2b2e      	cmp	r3, #46	; 0x2e
    5508:	d85b      	bhi.n	55c2 <extract_length+0xc2>
    550a:	e8df f003 	tbb	[pc, r3]
    550e:	5a4f      	.short	0x5a4f
    5510:	5a5a5a5a 	.word	0x5a5a5a5a
    5514:	5a5a5a5a 	.word	0x5a5a5a5a
    5518:	5a5a5a5a 	.word	0x5a5a5a5a
    551c:	5a5a5a5a 	.word	0x5a5a5a5a
    5520:	5a5a5a5a 	.word	0x5a5a5a5a
    5524:	5a5a5a5a 	.word	0x5a5a5a5a
    5528:	5a185a5a 	.word	0x5a185a5a
    552c:	5a295a3a 	.word	0x5a295a3a
    5530:	5a5a5a5a 	.word	0x5a5a5a5a
    5534:	5a485a5a 	.word	0x5a485a5a
    5538:	5a5a5a5a 	.word	0x5a5a5a5a
    553c:	41          	.byte	0x41
    553d:	00          	.byte	0x00
		if (*++sp == 'h') {
    553e:	1c48      	adds	r0, r1, #1
    5540:	784b      	ldrb	r3, [r1, #1]
    5542:	2b68      	cmp	r3, #104	; 0x68
    5544:	d005      	beq.n	5552 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    5546:	7853      	ldrb	r3, [r2, #1]
    5548:	2102      	movs	r1, #2
    554a:	f361 03c6 	bfi	r3, r1, #3, #4
    554e:	7053      	strb	r3, [r2, #1]
    5550:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    5552:	7853      	ldrb	r3, [r2, #1]
    5554:	2001      	movs	r0, #1
    5556:	f360 03c6 	bfi	r3, r0, #3, #4
    555a:	7053      	strb	r3, [r2, #1]
			++sp;
    555c:	1c88      	adds	r0, r1, #2
    555e:	4770      	bx	lr
		if (*++sp == 'l') {
    5560:	1c48      	adds	r0, r1, #1
    5562:	784b      	ldrb	r3, [r1, #1]
    5564:	2b6c      	cmp	r3, #108	; 0x6c
    5566:	d005      	beq.n	5574 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    5568:	7853      	ldrb	r3, [r2, #1]
    556a:	2103      	movs	r1, #3
    556c:	f361 03c6 	bfi	r3, r1, #3, #4
    5570:	7053      	strb	r3, [r2, #1]
    5572:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    5574:	7853      	ldrb	r3, [r2, #1]
    5576:	2004      	movs	r0, #4
    5578:	f360 03c6 	bfi	r3, r0, #3, #4
    557c:	7053      	strb	r3, [r2, #1]
			++sp;
    557e:	1c88      	adds	r0, r1, #2
    5580:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    5582:	7853      	ldrb	r3, [r2, #1]
    5584:	2005      	movs	r0, #5
    5586:	f360 03c6 	bfi	r3, r0, #3, #4
    558a:	7053      	strb	r3, [r2, #1]
		++sp;
    558c:	1c48      	adds	r0, r1, #1
		break;
    558e:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    5590:	7853      	ldrb	r3, [r2, #1]
    5592:	2006      	movs	r0, #6
    5594:	f360 03c6 	bfi	r3, r0, #3, #4
    5598:	7053      	strb	r3, [r2, #1]
		++sp;
    559a:	1c48      	adds	r0, r1, #1
		break;
    559c:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    559e:	7853      	ldrb	r3, [r2, #1]
    55a0:	2007      	movs	r0, #7
    55a2:	f360 03c6 	bfi	r3, r0, #3, #4
    55a6:	7053      	strb	r3, [r2, #1]
		++sp;
    55a8:	1c48      	adds	r0, r1, #1
		break;
    55aa:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    55ac:	7853      	ldrb	r3, [r2, #1]
    55ae:	2008      	movs	r0, #8
    55b0:	f360 03c6 	bfi	r3, r0, #3, #4
    55b4:	7053      	strb	r3, [r2, #1]
		++sp;
    55b6:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    55b8:	7813      	ldrb	r3, [r2, #0]
    55ba:	f043 0302 	orr.w	r3, r3, #2
    55be:	7013      	strb	r3, [r2, #0]
		break;
    55c0:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    55c2:	7853      	ldrb	r3, [r2, #1]
    55c4:	f36f 03c6 	bfc	r3, #3, #4
    55c8:	7053      	strb	r3, [r2, #1]
		break;
    55ca:	4608      	mov	r0, r1
}
    55cc:	4770      	bx	lr

000055ce <extract_specifier>:
{
    55ce:	b500      	push	{lr}
    55d0:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    55d2:	4608      	mov	r0, r1
    55d4:	f810 3b01 	ldrb.w	r3, [r0], #1
    55d8:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    55da:	2b78      	cmp	r3, #120	; 0x78
    55dc:	d817      	bhi.n	560e <extract_specifier+0x40>
    55de:	2b6e      	cmp	r3, #110	; 0x6e
    55e0:	d229      	bcs.n	5636 <extract_specifier+0x68>
    55e2:	2b69      	cmp	r3, #105	; 0x69
    55e4:	d813      	bhi.n	560e <extract_specifier+0x40>
    55e6:	2b58      	cmp	r3, #88	; 0x58
    55e8:	d317      	bcc.n	561a <extract_specifier+0x4c>
    55ea:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    55ee:	fa5f fc8c 	uxtb.w	ip, ip
    55f2:	2101      	movs	r1, #1
    55f4:	fa01 f10c 	lsl.w	r1, r1, ip
    55f8:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    55fc:	d114      	bne.n	5628 <extract_specifier+0x5a>
    55fe:	f640 0c01 	movw	ip, #2049	; 0x801
    5602:	ea11 0f0c 	tst.w	r1, ip
    5606:	d155      	bne.n	56b4 <extract_specifier+0xe6>
    5608:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    560c:	d13a      	bne.n	5684 <extract_specifier+0xb6>
		conv->invalid = true;
    560e:	7813      	ldrb	r3, [r2, #0]
    5610:	f043 0301 	orr.w	r3, r3, #1
    5614:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    5616:	2100      	movs	r1, #0
		break;
    5618:	e042      	b.n	56a0 <extract_specifier+0xd2>
	switch (conv->specifier) {
    561a:	2b41      	cmp	r3, #65	; 0x41
    561c:	d004      	beq.n	5628 <extract_specifier+0x5a>
    561e:	d3f6      	bcc.n	560e <extract_specifier+0x40>
    5620:	3b45      	subs	r3, #69	; 0x45
    5622:	b2db      	uxtb	r3, r3
    5624:	2b02      	cmp	r3, #2
    5626:	d8f2      	bhi.n	560e <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    5628:	7893      	ldrb	r3, [r2, #2]
    562a:	2104      	movs	r1, #4
    562c:	f361 0302 	bfi	r3, r1, #0, #3
    5630:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    5632:	2101      	movs	r1, #1
			break;
    5634:	e034      	b.n	56a0 <extract_specifier+0xd2>
	switch (conv->specifier) {
    5636:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    563a:	b2c9      	uxtb	r1, r1
    563c:	f04f 0c01 	mov.w	ip, #1
    5640:	fa0c fc01 	lsl.w	ip, ip, r1
    5644:	f240 4182 	movw	r1, #1154	; 0x482
    5648:	ea1c 0f01 	tst.w	ip, r1
    564c:	bf14      	ite	ne
    564e:	f04f 0e01 	movne.w	lr, #1
    5652:	f04f 0e00 	moveq.w	lr, #0
    5656:	d12d      	bne.n	56b4 <extract_specifier+0xe6>
    5658:	f01c 0f24 	tst.w	ip, #36	; 0x24
    565c:	bf14      	ite	ne
    565e:	2101      	movne	r1, #1
    5660:	2100      	moveq	r1, #0
    5662:	d139      	bne.n	56d8 <extract_specifier+0x10a>
    5664:	f01c 0c01 	ands.w	ip, ip, #1
    5668:	d0d1      	beq.n	560e <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    566a:	7893      	ldrb	r3, [r2, #2]
    566c:	f04f 0e03 	mov.w	lr, #3
    5670:	f36e 0302 	bfi	r3, lr, #0, #3
    5674:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    5676:	7853      	ldrb	r3, [r2, #1]
    5678:	f003 0378 	and.w	r3, r3, #120	; 0x78
    567c:	2b40      	cmp	r3, #64	; 0x40
    567e:	d10f      	bne.n	56a0 <extract_specifier+0xd2>
			unsupported = true;
    5680:	4661      	mov	r1, ip
    5682:	e00d      	b.n	56a0 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    5684:	7891      	ldrb	r1, [r2, #2]
    5686:	f04f 0c01 	mov.w	ip, #1
    568a:	f36c 0102 	bfi	r1, ip, #0, #3
    568e:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    5690:	7851      	ldrb	r1, [r2, #1]
    5692:	f001 0178 	and.w	r1, r1, #120	; 0x78
    5696:	2940      	cmp	r1, #64	; 0x40
    5698:	d013      	beq.n	56c2 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    569a:	2b63      	cmp	r3, #99	; 0x63
    569c:	d018      	beq.n	56d0 <extract_specifier+0x102>
	bool unsupported = false;
    569e:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    56a0:	7813      	ldrb	r3, [r2, #0]
    56a2:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    56a6:	ea41 010c 	orr.w	r1, r1, ip
    56aa:	f361 0341 	bfi	r3, r1, #1, #1
    56ae:	7013      	strb	r3, [r2, #0]
}
    56b0:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    56b4:	7891      	ldrb	r1, [r2, #2]
    56b6:	f04f 0c02 	mov.w	ip, #2
    56ba:	f36c 0102 	bfi	r1, ip, #0, #3
    56be:	7091      	strb	r1, [r2, #2]
    56c0:	e7e6      	b.n	5690 <extract_specifier+0xc2>
			conv->invalid = true;
    56c2:	f892 c000 	ldrb.w	ip, [r2]
    56c6:	f04c 0c01 	orr.w	ip, ip, #1
    56ca:	f882 c000 	strb.w	ip, [r2]
    56ce:	e7e4      	b.n	569a <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    56d0:	3900      	subs	r1, #0
    56d2:	bf18      	it	ne
    56d4:	2101      	movne	r1, #1
    56d6:	e7e3      	b.n	56a0 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    56d8:	7893      	ldrb	r3, [r2, #2]
    56da:	f04f 0c03 	mov.w	ip, #3
    56de:	f36c 0302 	bfi	r3, ip, #0, #3
    56e2:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    56e4:	7853      	ldrb	r3, [r2, #1]
    56e6:	f013 0f78 	tst.w	r3, #120	; 0x78
    56ea:	d1d9      	bne.n	56a0 <extract_specifier+0xd2>
	bool unsupported = false;
    56ec:	4671      	mov	r1, lr
    56ee:	e7d7      	b.n	56a0 <extract_specifier+0xd2>

000056f0 <extract_conversion>:
{
    56f0:	b510      	push	{r4, lr}
    56f2:	4604      	mov	r4, r0
    56f4:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    56f6:	2300      	movs	r3, #0
    56f8:	6023      	str	r3, [r4, #0]
    56fa:	6063      	str	r3, [r4, #4]
    56fc:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    56fe:	784b      	ldrb	r3, [r1, #1]
    5700:	2b25      	cmp	r3, #37	; 0x25
    5702:	d014      	beq.n	572e <extract_conversion+0x3e>
    5704:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    5706:	4620      	mov	r0, r4
    5708:	f7fa ffec 	bl	6e4 <extract_flags>
    570c:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    570e:	4620      	mov	r0, r4
    5710:	f7ff fe95 	bl	543e <extract_width>
    5714:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    5716:	4620      	mov	r0, r4
    5718:	f7ff fec0 	bl	549c <extract_prec>
    571c:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    571e:	4620      	mov	r0, r4
    5720:	f7ff feee 	bl	5500 <extract_length>
    5724:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    5726:	4620      	mov	r0, r4
    5728:	f7ff ff51 	bl	55ce <extract_specifier>
}
    572c:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    572e:	3002      	adds	r0, #2
    5730:	70e3      	strb	r3, [r4, #3]
		return sp;
    5732:	e7fb      	b.n	572c <extract_conversion+0x3c>

00005734 <conversion_radix>:
	switch (specifier) {
    5734:	286f      	cmp	r0, #111	; 0x6f
    5736:	d00c      	beq.n	5752 <conversion_radix+0x1e>
    5738:	d905      	bls.n	5746 <conversion_radix+0x12>
    573a:	2870      	cmp	r0, #112	; 0x70
    573c:	d00b      	beq.n	5756 <conversion_radix+0x22>
    573e:	2878      	cmp	r0, #120	; 0x78
    5740:	d10b      	bne.n	575a <conversion_radix+0x26>
		return 16;
    5742:	2010      	movs	r0, #16
    5744:	4770      	bx	lr
	switch (specifier) {
    5746:	2858      	cmp	r0, #88	; 0x58
    5748:	d001      	beq.n	574e <conversion_radix+0x1a>
    574a:	200a      	movs	r0, #10
    574c:	4770      	bx	lr
		return 16;
    574e:	2010      	movs	r0, #16
    5750:	4770      	bx	lr
		return 8;
    5752:	2008      	movs	r0, #8
    5754:	4770      	bx	lr
		return 16;
    5756:	2010      	movs	r0, #16
    5758:	4770      	bx	lr
	switch (specifier) {
    575a:	200a      	movs	r0, #10
}
    575c:	4770      	bx	lr

0000575e <encode_uint>:
{
    575e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5762:	4605      	mov	r5, r0
    5764:	460c      	mov	r4, r1
    5766:	4693      	mov	fp, r2
    5768:	4699      	mov	r9, r3
    576a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
    576c:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    576e:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    5772:	f7ff ffdf 	bl	5734 <conversion_radix>
    5776:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    5778:	e015      	b.n	57a6 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    577a:	f1ba 0f19 	cmp.w	sl, #25
    577e:	d820      	bhi.n	57c2 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5780:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5782:	3237      	adds	r2, #55	; 0x37
    5784:	b2d2      	uxtb	r2, r2
    5786:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    578a:	4632      	mov	r2, r6
    578c:	4643      	mov	r3, r8
    578e:	4628      	mov	r0, r5
    5790:	4621      	mov	r1, r4
    5792:	f7fa fcdf 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    5796:	42b5      	cmp	r5, r6
    5798:	f174 0400 	sbcs.w	r4, r4, #0
    579c:	d315      	bcc.n	57ca <encode_uint+0x6c>
    579e:	454f      	cmp	r7, r9
    57a0:	d913      	bls.n	57ca <encode_uint+0x6c>
		value /= radix;
    57a2:	4605      	mov	r5, r0
    57a4:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    57a6:	f04f 0800 	mov.w	r8, #0
    57aa:	4632      	mov	r2, r6
    57ac:	4643      	mov	r3, r8
    57ae:	4628      	mov	r0, r5
    57b0:	4621      	mov	r1, r4
    57b2:	f7fa fccf 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    57b6:	2a09      	cmp	r2, #9
    57b8:	d8df      	bhi.n	577a <encode_uint+0x1c>
    57ba:	b2d2      	uxtb	r2, r2
    57bc:	3230      	adds	r2, #48	; 0x30
    57be:	b2d2      	uxtb	r2, r2
    57c0:	e7e1      	b.n	5786 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    57c2:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    57c4:	3257      	adds	r2, #87	; 0x57
    57c6:	b2d2      	uxtb	r2, r2
    57c8:	e7dd      	b.n	5786 <encode_uint+0x28>
	if (conv->flag_hash) {
    57ca:	f89b 3000 	ldrb.w	r3, [fp]
    57ce:	f013 0f20 	tst.w	r3, #32
    57d2:	d003      	beq.n	57dc <encode_uint+0x7e>
		if (radix == 8) {
    57d4:	2e08      	cmp	r6, #8
    57d6:	d004      	beq.n	57e2 <encode_uint+0x84>
		} else if (radix == 16) {
    57d8:	2e10      	cmp	r6, #16
    57da:	d009      	beq.n	57f0 <encode_uint+0x92>
}
    57dc:	4638      	mov	r0, r7
    57de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    57e2:	f89b 3002 	ldrb.w	r3, [fp, #2]
    57e6:	f043 0308 	orr.w	r3, r3, #8
    57ea:	f88b 3002 	strb.w	r3, [fp, #2]
    57ee:	e7f5      	b.n	57dc <encode_uint+0x7e>
			conv->altform_0c = true;
    57f0:	f89b 3002 	ldrb.w	r3, [fp, #2]
    57f4:	f043 0310 	orr.w	r3, r3, #16
    57f8:	f88b 3002 	strb.w	r3, [fp, #2]
    57fc:	e7ee      	b.n	57dc <encode_uint+0x7e>

000057fe <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    57fe:	7843      	ldrb	r3, [r0, #1]
    5800:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    5804:	2b07      	cmp	r3, #7
    5806:	d818      	bhi.n	583a <store_count+0x3c>
    5808:	e8df f003 	tbb	[pc, r3]
    580c:	0a080604 	.word	0x0a080604
    5810:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
    5814:	600a      	str	r2, [r1, #0]
		break;
    5816:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    5818:	700a      	strb	r2, [r1, #0]
		break;
    581a:	4770      	bx	lr
		*(short *)dp = (short)count;
    581c:	800a      	strh	r2, [r1, #0]
		break;
    581e:	4770      	bx	lr
		*(long *)dp = (long)count;
    5820:	600a      	str	r2, [r1, #0]
		break;
    5822:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    5824:	17d3      	asrs	r3, r2, #31
    5826:	600a      	str	r2, [r1, #0]
    5828:	604b      	str	r3, [r1, #4]
		break;
    582a:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    582c:	17d3      	asrs	r3, r2, #31
    582e:	600a      	str	r2, [r1, #0]
    5830:	604b      	str	r3, [r1, #4]
		break;
    5832:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    5834:	600a      	str	r2, [r1, #0]
		break;
    5836:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    5838:	600a      	str	r2, [r1, #0]
}
    583a:	4770      	bx	lr

0000583c <outs>:
{
    583c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5840:	4607      	mov	r7, r0
    5842:	460e      	mov	r6, r1
    5844:	4614      	mov	r4, r2
    5846:	4698      	mov	r8, r3
	size_t count = 0;
    5848:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    584a:	e006      	b.n	585a <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    584c:	4631      	mov	r1, r6
    584e:	f814 0b01 	ldrb.w	r0, [r4], #1
    5852:	47b8      	blx	r7
		if (rc < 0) {
    5854:	2800      	cmp	r0, #0
    5856:	db09      	blt.n	586c <outs+0x30>
		++count;
    5858:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    585a:	4544      	cmp	r4, r8
    585c:	d3f6      	bcc.n	584c <outs+0x10>
    585e:	f1b8 0f00 	cmp.w	r8, #0
    5862:	d102      	bne.n	586a <outs+0x2e>
    5864:	7823      	ldrb	r3, [r4, #0]
    5866:	2b00      	cmp	r3, #0
    5868:	d1f0      	bne.n	584c <outs+0x10>
	return (int)count;
    586a:	4628      	mov	r0, r5
}
    586c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005870 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5870:	4770      	bx	lr

00005872 <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
    5872:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
    5874:	f7fb fa78 	bl	d68 <nrfx_coredep_delay_us>
}
    5878:	bd08      	pop	{r3, pc}

0000587a <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    587a:	2301      	movs	r3, #1
    587c:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5880:	f3bf 8f4f 	dsb	sy
        __WFE();
    5884:	bf20      	wfe
    while (true)
    5886:	e7fd      	b.n	5884 <nrf_regulators_system_off+0xa>

00005888 <pm_state_exit_post_ops>:
    5888:	2300      	movs	r3, #0
    588a:	f383 8811 	msr	BASEPRI, r3
    588e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    5892:	4770      	bx	lr

00005894 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    5894:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    5896:	f001 021f 	and.w	r2, r1, #31
    589a:	2301      	movs	r3, #1
    589c:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    589e:	0949      	lsrs	r1, r1, #5
    58a0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    58a4:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    58a6:	e8d0 2fef 	ldaex	r2, [r0]
    58aa:	ea02 0c01 	and.w	ip, r2, r1
    58ae:	e8c0 cfee 	stlex	lr, ip, [r0]
    58b2:	f1be 0f00 	cmp.w	lr, #0
    58b6:	d1f6      	bne.n	58a6 <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
    58b8:	4213      	tst	r3, r2
}
    58ba:	bf14      	ite	ne
    58bc:	2001      	movne	r0, #1
    58be:	2000      	moveq	r0, #0
    58c0:	f85d fb04 	ldr.w	pc, [sp], #4

000058c4 <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    58c4:	f001 021f 	and.w	r2, r1, #31
    58c8:	2301      	movs	r3, #1
    58ca:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    58cc:	0949      	lsrs	r1, r1, #5
    58ce:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    58d2:	e8d0 2fef 	ldaex	r2, [r0]
    58d6:	431a      	orrs	r2, r3
    58d8:	e8c0 2fe1 	stlex	r1, r2, [r0]
    58dc:	2900      	cmp	r1, #0
    58de:	d1f8      	bne.n	58d2 <atomic_set_bit+0xe>
}
    58e0:	4770      	bx	lr

000058e2 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    58e2:	2000      	movs	r0, #0
    58e4:	4770      	bx	lr

000058e6 <abort_function>:
{
    58e6:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    58e8:	2000      	movs	r0, #0
    58ea:	f7fb fa29 	bl	d40 <sys_reboot>

000058ee <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    58ee:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    58f0:	f001 fb69 	bl	6fc6 <z_fatal_error>
}
    58f4:	bd08      	pop	{r3, pc}

000058f6 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    58f6:	b508      	push	{r3, lr}
    58f8:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    58fa:	6800      	ldr	r0, [r0, #0]
    58fc:	f7ff fff7 	bl	58ee <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    5900:	bd08      	pop	{r3, pc}

00005902 <arch_irq_enable>:
{
    5902:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    5904:	b240      	sxtb	r0, r0
    5906:	f7fb fd03 	bl	1310 <__NVIC_EnableIRQ>
}
    590a:	bd08      	pop	{r3, pc}

0000590c <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    590c:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    590e:	3101      	adds	r1, #1
    5910:	b240      	sxtb	r0, r0
    5912:	f7fb fd0b 	bl	132c <__NVIC_SetPriority>
}
    5916:	bd08      	pop	{r3, pc}

00005918 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    5918:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    591a:	2100      	movs	r1, #0
    591c:	2001      	movs	r0, #1
    591e:	f7ff ffe6 	bl	58ee <z_arm_fatal_error>
}
    5922:	bd08      	pop	{r3, pc}

00005924 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    5924:	b508      	push	{r3, lr}
	handler();
    5926:	f7fb fd23 	bl	1370 <z_SysNmiOnReset>
	z_arm_int_exit();
    592a:	f7fb fdf3 	bl	1514 <z_arm_exc_exit>
}
    592e:	bd08      	pop	{r3, pc}

00005930 <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    5930:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    5934:	f383 880b 	msr	PSPLIM, r3
}
    5938:	4770      	bx	lr

0000593a <memory_fault_recoverable>:
}
    593a:	2000      	movs	r0, #0
    593c:	4770      	bx	lr

0000593e <debug_monitor>:
	*recoverable = false;
    593e:	2300      	movs	r3, #0
    5940:	700b      	strb	r3, [r1, #0]
}
    5942:	4770      	bx	lr

00005944 <fault_handle>:
{
    5944:	b508      	push	{r3, lr}
	*recoverable = false;
    5946:	2300      	movs	r3, #0
    5948:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    594a:	1ecb      	subs	r3, r1, #3
    594c:	2b09      	cmp	r3, #9
    594e:	d81a      	bhi.n	5986 <fault_handle+0x42>
    5950:	e8df f003 	tbb	[pc, r3]
    5954:	110d0905 	.word	0x110d0905
    5958:	19191919 	.word	0x19191919
    595c:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    595e:	4611      	mov	r1, r2
    5960:	f7fb fe7c 	bl	165c <hard_fault>
		break;
    5964:	e010      	b.n	5988 <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    5966:	2100      	movs	r1, #0
    5968:	f7fb fde2 	bl	1530 <mem_manage_fault>
		break;
    596c:	e00c      	b.n	5988 <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    596e:	2100      	movs	r1, #0
    5970:	f7fb fe14 	bl	159c <bus_fault>
		break;
    5974:	e008      	b.n	5988 <fault_handle+0x44>
		reason = usage_fault(esf);
    5976:	f7fb fe3b 	bl	15f0 <usage_fault>
		break;
    597a:	e005      	b.n	5988 <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    597c:	4611      	mov	r1, r2
    597e:	f7ff ffde 	bl	593e <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5982:	2000      	movs	r0, #0
		break;
    5984:	e000      	b.n	5988 <fault_handle+0x44>
	switch (fault) {
    5986:	2000      	movs	r0, #0
}
    5988:	bd08      	pop	{r3, pc}

0000598a <sys_arch_reboot>:
{
    598a:	b508      	push	{r3, lr}
	NVIC_SystemReset();
    598c:	f7fb ff50 	bl	1830 <__NVIC_SystemReset>

00005990 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    5990:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    5994:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    5998:	d001      	beq.n	599e <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    599a:	b2c0      	uxtb	r0, r0
    599c:	4770      	bx	lr
	}

	return -EINVAL;
    599e:	f06f 0015 	mvn.w	r0, #21
}
    59a2:	4770      	bx	lr

000059a4 <region_init>:
{
    59a4:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
    59a6:	680b      	ldr	r3, [r1, #0]
    59a8:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
    59ac:	7a0b      	ldrb	r3, [r1, #8]
    59ae:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    59b2:	68ca      	ldr	r2, [r1, #12]
    59b4:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    59b8:	095b      	lsrs	r3, r3, #5
    59ba:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
    59be:	f042 0201 	orr.w	r2, r2, #1
    59c2:	ea4c 010e 	orr.w	r1, ip, lr
    59c6:	f7fb ffc7 	bl	1958 <mpu_set_region>
}
    59ca:	bd08      	pop	{r3, pc}

000059cc <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    59cc:	6843      	ldr	r3, [r0, #4]
		&&
    59ce:	2b1f      	cmp	r3, #31
    59d0:	d908      	bls.n	59e4 <mpu_partition_is_valid+0x18>
		&&
    59d2:	f013 0f1f 	tst.w	r3, #31
    59d6:	d107      	bne.n	59e8 <mpu_partition_is_valid+0x1c>
		((part->start &
    59d8:	6803      	ldr	r3, [r0, #0]
		&&
    59da:	f013 0f1f 	tst.w	r3, #31
    59de:	d005      	beq.n	59ec <mpu_partition_is_valid+0x20>
    59e0:	2000      	movs	r0, #0
    59e2:	4770      	bx	lr
    59e4:	2000      	movs	r0, #0
    59e6:	4770      	bx	lr
    59e8:	2000      	movs	r0, #0
    59ea:	4770      	bx	lr
    59ec:	2001      	movs	r0, #1
}
    59ee:	4770      	bx	lr

000059f0 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    59f0:	2807      	cmp	r0, #7
    59f2:	d805      	bhi.n	5a00 <region_allocate_and_init+0x10>
{
    59f4:	b510      	push	{r4, lr}
    59f6:	4604      	mov	r4, r0
	region_init(index, region_conf);
    59f8:	f7ff ffd4 	bl	59a4 <region_init>
	return index;
    59fc:	4620      	mov	r0, r4
}
    59fe:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5a00:	f06f 0015 	mvn.w	r0, #21
}
    5a04:	4770      	bx	lr

00005a06 <mpu_configure_region>:
{
    5a06:	b510      	push	{r4, lr}
    5a08:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
    5a0a:	680b      	ldr	r3, [r1, #0]
    5a0c:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
    5a0e:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    5a10:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    5a14:	f89d 2008 	ldrb.w	r2, [sp, #8]
    5a18:	f36c 0204 	bfi	r2, ip, #0, #5
    5a1c:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
    5a20:	8949      	ldrh	r1, [r1, #10]
    5a22:	b2d2      	uxtb	r2, r2
    5a24:	f361 1247 	bfi	r2, r1, #5, #3
    5a28:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    5a2c:	f023 031f 	bic.w	r3, r3, #31
    5a30:	4423      	add	r3, r4
    5a32:	3b01      	subs	r3, #1
    5a34:	f023 031f 	bic.w	r3, r3, #31
    5a38:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    5a3a:	4669      	mov	r1, sp
    5a3c:	f7ff ffd8 	bl	59f0 <region_allocate_and_init>
}
    5a40:	b004      	add	sp, #16
    5a42:	bd10      	pop	{r4, pc}

00005a44 <get_region_index>:
{
    5a44:	b570      	push	{r4, r5, r6, lr}
    5a46:	4604      	mov	r4, r0
    5a48:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    5a4a:	f7ff ffa1 	bl	5990 <arm_cmse_mpu_region_get>
    5a4e:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    5a50:	4434      	add	r4, r6
    5a52:	1e60      	subs	r0, r4, #1
    5a54:	f7ff ff9c 	bl	5990 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    5a58:	4285      	cmp	r5, r0
    5a5a:	d101      	bne.n	5a60 <get_region_index+0x1c>
}
    5a5c:	4628      	mov	r0, r5
    5a5e:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
    5a60:	f06f 0515 	mvn.w	r5, #21
    5a64:	e7fa      	b.n	5a5c <get_region_index+0x18>

00005a66 <arm_core_mpu_configure_static_mpu_regions>:
{
    5a66:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    5a68:	f7fc f864 	bl	1b34 <mpu_configure_static_mpu_regions>
}
    5a6c:	bd08      	pop	{r3, pc}

00005a6e <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    5a6e:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    5a70:	f7fc f86a 	bl	1b48 <mpu_mark_areas_for_dynamic_regions>
}
    5a74:	bd08      	pop	{r3, pc}

00005a76 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    5a76:	4603      	mov	r3, r0
    5a78:	b1a2      	cbz	r2, 5aa4 <strncpy+0x2e>
{
    5a7a:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    5a7c:	780c      	ldrb	r4, [r1, #0]
    5a7e:	b12c      	cbz	r4, 5a8c <strncpy+0x16>
		*d = *s;
    5a80:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    5a84:	3101      	adds	r1, #1
		d++;
		n--;
    5a86:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    5a88:	2a00      	cmp	r2, #0
    5a8a:	d1f7      	bne.n	5a7c <strncpy+0x6>
	}

	while (n > 0) {
    5a8c:	b122      	cbz	r2, 5a98 <strncpy+0x22>
		*d = '\0';
    5a8e:	2100      	movs	r1, #0
    5a90:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    5a94:	3a01      	subs	r2, #1
    5a96:	e7f9      	b.n	5a8c <strncpy+0x16>
	}

	return dest;
}
    5a98:	bc10      	pop	{r4}
    5a9a:	4770      	bx	lr
		*d = '\0';
    5a9c:	2100      	movs	r1, #0
    5a9e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5aa2:	3a01      	subs	r2, #1
	while (n > 0) {
    5aa4:	2a00      	cmp	r2, #0
    5aa6:	d1f9      	bne.n	5a9c <strncpy+0x26>
    5aa8:	4770      	bx	lr

00005aaa <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5aaa:	4603      	mov	r3, r0
	size_t n = 0;
    5aac:	2000      	movs	r0, #0

	while (*s != '\0') {
    5aae:	e001      	b.n	5ab4 <strlen+0xa>
		s++;
    5ab0:	3301      	adds	r3, #1
		n++;
    5ab2:	3001      	adds	r0, #1
	while (*s != '\0') {
    5ab4:	781a      	ldrb	r2, [r3, #0]
    5ab6:	2a00      	cmp	r2, #0
    5ab8:	d1fa      	bne.n	5ab0 <strlen+0x6>
	}

	return n;
}
    5aba:	4770      	bx	lr

00005abc <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5abc:	4603      	mov	r3, r0
	size_t n = 0;
    5abe:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5ac0:	e001      	b.n	5ac6 <strnlen+0xa>
		s++;
    5ac2:	3301      	adds	r3, #1
		n++;
    5ac4:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    5ac6:	781a      	ldrb	r2, [r3, #0]
    5ac8:	b10a      	cbz	r2, 5ace <strnlen+0x12>
    5aca:	4288      	cmp	r0, r1
    5acc:	d3f9      	bcc.n	5ac2 <strnlen+0x6>
	}

	return n;
}
    5ace:	4770      	bx	lr

00005ad0 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    5ad0:	ea80 0301 	eor.w	r3, r0, r1
    5ad4:	f013 0f03 	tst.w	r3, #3
    5ad8:	d001      	beq.n	5ade <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    5ada:	4603      	mov	r3, r0
    5adc:	e023      	b.n	5b26 <memcpy+0x56>
    5ade:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    5ae0:	f013 0f03 	tst.w	r3, #3
    5ae4:	d00f      	beq.n	5b06 <memcpy+0x36>
			if (n == 0) {
    5ae6:	b30a      	cbz	r2, 5b2c <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    5ae8:	f811 cb01 	ldrb.w	ip, [r1], #1
    5aec:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    5af0:	3a01      	subs	r2, #1
    5af2:	e7f5      	b.n	5ae0 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    5af4:	f811 cb01 	ldrb.w	ip, [r1], #1
    5af8:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5afc:	3a01      	subs	r2, #1
	while (n > 0) {
    5afe:	2a00      	cmp	r2, #0
    5b00:	d1f8      	bne.n	5af4 <memcpy+0x24>
	}

	return d;
}
    5b02:	bc10      	pop	{r4}
    5b04:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    5b06:	2a03      	cmp	r2, #3
    5b08:	d90d      	bls.n	5b26 <memcpy+0x56>
{
    5b0a:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    5b0c:	f851 4b04 	ldr.w	r4, [r1], #4
    5b10:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    5b14:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    5b16:	2a03      	cmp	r2, #3
    5b18:	d8f8      	bhi.n	5b0c <memcpy+0x3c>
    5b1a:	e7f0      	b.n	5afe <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    5b1c:	f811 cb01 	ldrb.w	ip, [r1], #1
    5b20:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5b24:	3a01      	subs	r2, #1
	while (n > 0) {
    5b26:	2a00      	cmp	r2, #0
    5b28:	d1f8      	bne.n	5b1c <memcpy+0x4c>
    5b2a:	4770      	bx	lr
}
    5b2c:	4770      	bx	lr

00005b2e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5b2e:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    5b32:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5b34:	e002      	b.n	5b3c <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    5b36:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5b3a:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5b3c:	f013 0f03 	tst.w	r3, #3
    5b40:	d002      	beq.n	5b48 <memset+0x1a>
		if (n == 0) {
    5b42:	2a00      	cmp	r2, #0
    5b44:	d1f7      	bne.n	5b36 <memset+0x8>
    5b46:	e00f      	b.n	5b68 <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    5b48:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    5b4a:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    5b4e:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    5b52:	2a03      	cmp	r2, #3
    5b54:	d906      	bls.n	5b64 <memset+0x36>
		*(d_word++) = c_word;
    5b56:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    5b5a:	3a04      	subs	r2, #4
    5b5c:	e7f9      	b.n	5b52 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    5b5e:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5b62:	3a01      	subs	r2, #1
	while (n > 0) {
    5b64:	2a00      	cmp	r2, #0
    5b66:	d1fa      	bne.n	5b5e <memset+0x30>
	}

	return buf;
}
    5b68:	4770      	bx	lr

00005b6a <_stdout_hook_default>:
}
    5b6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5b6e:	4770      	bx	lr

00005b70 <nrf_clock_is_running>:
    switch (domain)
    5b70:	2903      	cmp	r1, #3
    5b72:	d82f      	bhi.n	5bd4 <nrf_clock_is_running+0x64>
    5b74:	e8df f001 	tbb	[pc, r1]
    5b78:	291c0f02 	.word	0x291c0f02
            if (p_clk_src != NULL)
    5b7c:	b122      	cbz	r2, 5b88 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5b7e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    5b82:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5b86:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5b88:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    5b8c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5b90:	d122      	bne.n	5bd8 <nrf_clock_is_running+0x68>
    return false;
    5b92:	2000      	movs	r0, #0
    5b94:	4770      	bx	lr
            if (p_clk_src != NULL)
    5b96:	b122      	cbz	r2, 5ba2 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5b98:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    5b9c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5ba0:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5ba2:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    5ba6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5baa:	d117      	bne.n	5bdc <nrf_clock_is_running+0x6c>
    return false;
    5bac:	2000      	movs	r0, #0
    5bae:	4770      	bx	lr
            if (p_clk_src != NULL)
    5bb0:	b122      	cbz	r2, 5bbc <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    5bb2:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    5bb6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5bba:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    5bbc:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    5bc0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5bc4:	d10c      	bne.n	5be0 <nrf_clock_is_running+0x70>
    return false;
    5bc6:	2000      	movs	r0, #0
    5bc8:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    5bca:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    5bce:	f3c0 4000 	ubfx	r0, r0, #16, #1
    5bd2:	4770      	bx	lr
    switch (domain)
    5bd4:	2000      	movs	r0, #0
    5bd6:	4770      	bx	lr
                return true;
    5bd8:	2001      	movs	r0, #1
    5bda:	4770      	bx	lr
                return true;
    5bdc:	2001      	movs	r0, #1
    5bde:	4770      	bx	lr
                return true;
    5be0:	2001      	movs	r0, #1
}
    5be2:	4770      	bx	lr

00005be4 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    5be4:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    5be6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5bea:	0089      	lsls	r1, r1, #2
    5bec:	3170      	adds	r1, #112	; 0x70
}
    5bee:	4408      	add	r0, r1
    5bf0:	4770      	bx	lr

00005bf2 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    5bf2:	6840      	ldr	r0, [r0, #4]
}
    5bf4:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    5bf8:	4770      	bx	lr

00005bfa <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    5bfa:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    5bfc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    5c00:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5c04:	4770      	bx	lr

00005c06 <get_status>:
{
    5c06:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5c08:	b2c9      	uxtb	r1, r1
    5c0a:	f7ff ffeb 	bl	5be4 <get_sub_data>
    5c0e:	6880      	ldr	r0, [r0, #8]
}
    5c10:	f000 0007 	and.w	r0, r0, #7
    5c14:	bd08      	pop	{r3, pc}

00005c16 <set_off_state>:
	__asm__ volatile(
    5c16:	f04f 0320 	mov.w	r3, #32
    5c1a:	f3ef 8211 	mrs	r2, BASEPRI
    5c1e:	f383 8812 	msr	BASEPRI_MAX, r3
    5c22:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5c26:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5c28:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5c2c:	d001      	beq.n	5c32 <set_off_state+0x1c>
    5c2e:	428b      	cmp	r3, r1
    5c30:	d107      	bne.n	5c42 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5c32:	2301      	movs	r3, #1
    5c34:	6003      	str	r3, [r0, #0]
	int err = 0;
    5c36:	2000      	movs	r0, #0
	__asm__ volatile(
    5c38:	f382 8811 	msr	BASEPRI, r2
    5c3c:	f3bf 8f6f 	isb	sy
}
    5c40:	4770      	bx	lr
		err = -EPERM;
    5c42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5c46:	e7f7      	b.n	5c38 <set_off_state+0x22>

00005c48 <set_starting_state>:
	__asm__ volatile(
    5c48:	f04f 0320 	mov.w	r3, #32
    5c4c:	f3ef 8211 	mrs	r2, BASEPRI
    5c50:	f383 8812 	msr	BASEPRI_MAX, r3
    5c54:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5c58:	6803      	ldr	r3, [r0, #0]
    5c5a:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5c5e:	f003 0307 	and.w	r3, r3, #7
    5c62:	2b01      	cmp	r3, #1
    5c64:	d008      	beq.n	5c78 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    5c66:	458c      	cmp	ip, r1
    5c68:	d009      	beq.n	5c7e <set_starting_state+0x36>
		err = -EPERM;
    5c6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    5c6e:	f382 8811 	msr	BASEPRI, r2
    5c72:	f3bf 8f6f 	isb	sy
}
    5c76:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5c78:	6001      	str	r1, [r0, #0]
	int err = 0;
    5c7a:	2000      	movs	r0, #0
    5c7c:	e7f7      	b.n	5c6e <set_starting_state+0x26>
		err = -EALREADY;
    5c7e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5c82:	e7f4      	b.n	5c6e <set_starting_state+0x26>

00005c84 <set_on_state>:
	__asm__ volatile(
    5c84:	f04f 0320 	mov.w	r3, #32
    5c88:	f3ef 8211 	mrs	r2, BASEPRI
    5c8c:	f383 8812 	msr	BASEPRI_MAX, r3
    5c90:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5c94:	6803      	ldr	r3, [r0, #0]
    5c96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5c9a:	f043 0302 	orr.w	r3, r3, #2
    5c9e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5ca0:	f382 8811 	msr	BASEPRI, r2
    5ca4:	f3bf 8f6f 	isb	sy
}
    5ca8:	4770      	bx	lr

00005caa <clkstarted_handle>:
{
    5caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5cac:	4606      	mov	r6, r0
    5cae:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    5cb0:	f7ff ff98 	bl	5be4 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    5cb4:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    5cb6:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    5cb8:	2300      	movs	r3, #0
    5cba:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    5cbe:	f7ff ffe1 	bl	5c84 <set_on_state>
	if (callback) {
    5cc2:	b11d      	cbz	r5, 5ccc <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5cc4:	463a      	mov	r2, r7
    5cc6:	4621      	mov	r1, r4
    5cc8:	4630      	mov	r0, r6
    5cca:	47a8      	blx	r5
}
    5ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005cce <stop>:
{
    5cce:	b570      	push	{r4, r5, r6, lr}
    5cd0:	4606      	mov	r6, r0
    5cd2:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5cd4:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5cd6:	4621      	mov	r1, r4
    5cd8:	f7ff ff84 	bl	5be4 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    5cdc:	4629      	mov	r1, r5
    5cde:	3008      	adds	r0, #8
    5ce0:	f7ff ff99 	bl	5c16 <set_off_state>
	if (err < 0) {
    5ce4:	2800      	cmp	r0, #0
    5ce6:	db06      	blt.n	5cf6 <stop+0x28>
	get_sub_config(dev, type)->stop();
    5ce8:	4621      	mov	r1, r4
    5cea:	4630      	mov	r0, r6
    5cec:	f7ff ff81 	bl	5bf2 <get_sub_config>
    5cf0:	6843      	ldr	r3, [r0, #4]
    5cf2:	4798      	blx	r3
	return 0;
    5cf4:	2000      	movs	r0, #0
}
    5cf6:	bd70      	pop	{r4, r5, r6, pc}

00005cf8 <api_stop>:
{
    5cf8:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    5cfa:	2280      	movs	r2, #128	; 0x80
    5cfc:	f7ff ffe7 	bl	5cce <stop>
}
    5d00:	bd08      	pop	{r3, pc}

00005d02 <async_start>:
{
    5d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d06:	4606      	mov	r6, r0
    5d08:	4690      	mov	r8, r2
    5d0a:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5d0c:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5d0e:	4629      	mov	r1, r5
    5d10:	f7ff ff68 	bl	5be4 <get_sub_data>
    5d14:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    5d16:	9906      	ldr	r1, [sp, #24]
    5d18:	3008      	adds	r0, #8
    5d1a:	f7ff ff95 	bl	5c48 <set_starting_state>
	if (err < 0) {
    5d1e:	2800      	cmp	r0, #0
    5d20:	db09      	blt.n	5d36 <async_start+0x34>
	subdata->cb = cb;
    5d22:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    5d26:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    5d28:	4629      	mov	r1, r5
    5d2a:	4630      	mov	r0, r6
    5d2c:	f7ff ff61 	bl	5bf2 <get_sub_config>
    5d30:	6803      	ldr	r3, [r0, #0]
    5d32:	4798      	blx	r3
	return 0;
    5d34:	2000      	movs	r0, #0
}
    5d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005d3a <api_start>:
{
    5d3a:	b510      	push	{r4, lr}
    5d3c:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5d3e:	2480      	movs	r4, #128	; 0x80
    5d40:	9400      	str	r4, [sp, #0]
    5d42:	f7ff ffde 	bl	5d02 <async_start>
}
    5d46:	b002      	add	sp, #8
    5d48:	bd10      	pop	{r4, pc}

00005d4a <onoff_started_callback>:
{
    5d4a:	b510      	push	{r4, lr}
    5d4c:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    5d4e:	b2c9      	uxtb	r1, r1
    5d50:	f7ff ff53 	bl	5bfa <get_onoff_manager>
	notify(mgr, 0);
    5d54:	2100      	movs	r1, #0
    5d56:	47a0      	blx	r4
}
    5d58:	bd10      	pop	{r4, pc}

00005d5a <hfclk_start>:
{
    5d5a:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5d5c:	2001      	movs	r0, #1
    5d5e:	f001 f831 	bl	6dc4 <nrfx_clock_start>
}
    5d62:	bd08      	pop	{r3, pc}

00005d64 <hfclkaudio_start>:
{
    5d64:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5d66:	2003      	movs	r0, #3
    5d68:	f001 f82c 	bl	6dc4 <nrfx_clock_start>
}
    5d6c:	bd08      	pop	{r3, pc}

00005d6e <hfclk192m_start>:
{
    5d6e:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    5d70:	2002      	movs	r0, #2
    5d72:	f001 f827 	bl	6dc4 <nrfx_clock_start>
}
    5d76:	bd08      	pop	{r3, pc}

00005d78 <lfclk_start>:
{
    5d78:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5d7a:	2000      	movs	r0, #0
    5d7c:	f001 f822 	bl	6dc4 <nrfx_clock_start>
}
    5d80:	bd08      	pop	{r3, pc}

00005d82 <hfclk_stop>:
{
    5d82:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5d84:	2001      	movs	r0, #1
    5d86:	f001 f892 	bl	6eae <nrfx_clock_stop>
}
    5d8a:	bd08      	pop	{r3, pc}

00005d8c <hfclkaudio_stop>:
{
    5d8c:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5d8e:	2003      	movs	r0, #3
    5d90:	f001 f88d 	bl	6eae <nrfx_clock_stop>
}
    5d94:	bd08      	pop	{r3, pc}

00005d96 <hfclk192m_stop>:
{
    5d96:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    5d98:	2002      	movs	r0, #2
    5d9a:	f001 f888 	bl	6eae <nrfx_clock_stop>
}
    5d9e:	bd08      	pop	{r3, pc}

00005da0 <lfclk_stop>:
{
    5da0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5da2:	2000      	movs	r0, #0
    5da4:	f001 f883 	bl	6eae <nrfx_clock_stop>
}
    5da8:	bd08      	pop	{r3, pc}

00005daa <k_msleep>:
{
    5daa:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    5dac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    5db0:	17c1      	asrs	r1, r0, #31
    5db2:	03c9      	lsls	r1, r1, #15
    5db4:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    5db8:	03c0      	lsls	r0, r0, #15
    5dba:	f240 33e7 	movw	r3, #999	; 0x3e7
    5dbe:	18c0      	adds	r0, r0, r3
    5dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5dc4:	f04f 0300 	mov.w	r3, #0
    5dc8:	f141 0100 	adc.w	r1, r1, #0
    5dcc:	f7fa f9c2 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    5dd0:	f7fe fcfc 	bl	47cc <z_impl_k_sleep>
}
    5dd4:	bd08      	pop	{r3, pc}

00005dd6 <blocking_start_callback>:
{
    5dd6:	b508      	push	{r3, lr}
    5dd8:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5dda:	f7fe f927 	bl	402c <z_impl_k_sem_give>
}
    5dde:	bd08      	pop	{r3, pc}

00005de0 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    5de0:	460b      	mov	r3, r1
    5de2:	b139      	cbz	r1, 5df4 <sys_slist_remove+0x14>
	return node->next;
    5de4:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    5de6:	6019      	str	r1, [r3, #0]
	return list->tail;
    5de8:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    5dea:	428a      	cmp	r2, r1
    5dec:	d009      	beq.n	5e02 <sys_slist_remove+0x22>
	parent->next = child;
    5dee:	2300      	movs	r3, #0
    5df0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    5df2:	4770      	bx	lr
	return node->next;
    5df4:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    5df6:	6003      	str	r3, [r0, #0]
	return list->tail;
    5df8:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    5dfa:	428a      	cmp	r2, r1
    5dfc:	d1f7      	bne.n	5dee <sys_slist_remove+0xe>
	list->tail = node;
    5dfe:	6043      	str	r3, [r0, #4]
}
    5e00:	e7f5      	b.n	5dee <sys_slist_remove+0xe>
	list->tail = node;
    5e02:	6043      	str	r3, [r0, #4]
}
    5e04:	e7f3      	b.n	5dee <sys_slist_remove+0xe>

00005e06 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e06:	b508      	push	{r3, lr}
    5e08:	460a      	mov	r2, r1
	return list->head;
    5e0a:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e0c:	2100      	movs	r1, #0
    5e0e:	e001      	b.n	5e14 <sys_slist_find_and_remove+0xe>
    5e10:	4619      	mov	r1, r3
    5e12:	681b      	ldr	r3, [r3, #0]
    5e14:	b12b      	cbz	r3, 5e22 <sys_slist_find_and_remove+0x1c>
    5e16:	4293      	cmp	r3, r2
    5e18:	d1fa      	bne.n	5e10 <sys_slist_find_and_remove+0xa>
    5e1a:	f7ff ffe1 	bl	5de0 <sys_slist_remove>
    5e1e:	2001      	movs	r0, #1
    5e20:	e000      	b.n	5e24 <sys_slist_find_and_remove+0x1e>
    5e22:	2000      	movs	r0, #0
    5e24:	bd08      	pop	{r3, pc}

00005e26 <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    5e26:	b570      	push	{r4, r5, r6, lr}
    5e28:	4604      	mov	r4, r0
    5e2a:	460d      	mov	r5, r1
    5e2c:	4616      	mov	r6, r2
	return list->head;
    5e2e:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    5e30:	b133      	cbz	r3, 5e40 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    5e32:	f7ff ffe8 	bl	5e06 <sys_slist_find_and_remove>
    5e36:	b970      	cbnz	r0, 5e56 <gpio_manage_callback+0x30>
			if (!set) {
    5e38:	b91e      	cbnz	r6, 5e42 <gpio_manage_callback+0x1c>
				return -EINVAL;
    5e3a:	f06f 0015 	mvn.w	r0, #21
    5e3e:	e006      	b.n	5e4e <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    5e40:	b132      	cbz	r2, 5e50 <gpio_manage_callback+0x2a>
    5e42:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    5e44:	602b      	str	r3, [r5, #0]
	list->head = node;
    5e46:	6025      	str	r5, [r4, #0]
	return list->tail;
    5e48:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    5e4a:	b143      	cbz	r3, 5e5e <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5e4c:	2000      	movs	r0, #0
}
    5e4e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    5e50:	f06f 0015 	mvn.w	r0, #21
    5e54:	e7fb      	b.n	5e4e <gpio_manage_callback+0x28>
	if (set) {
    5e56:	2e00      	cmp	r6, #0
    5e58:	d1f3      	bne.n	5e42 <gpio_manage_callback+0x1c>
	return 0;
    5e5a:	2000      	movs	r0, #0
    5e5c:	e7f7      	b.n	5e4e <gpio_manage_callback+0x28>
	list->tail = node;
    5e5e:	6065      	str	r5, [r4, #4]
    5e60:	2000      	movs	r0, #0
}
    5e62:	e7f4      	b.n	5e4e <gpio_manage_callback+0x28>

00005e64 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    5e64:	b570      	push	{r4, r5, r6, lr}
    5e66:	460e      	mov	r6, r1
    5e68:	4615      	mov	r5, r2
	return list->head;
    5e6a:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5e6c:	b121      	cbz	r1, 5e78 <gpio_fire_callbacks+0x14>
	return node->next;
    5e6e:	680c      	ldr	r4, [r1, #0]
    5e70:	b13c      	cbz	r4, 5e82 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    5e72:	b931      	cbnz	r1, 5e82 <gpio_fire_callbacks+0x1e>
    5e74:	460c      	mov	r4, r1
    5e76:	e004      	b.n	5e82 <gpio_fire_callbacks+0x1e>
    5e78:	460c      	mov	r4, r1
    5e7a:	e002      	b.n	5e82 <gpio_fire_callbacks+0x1e>
    5e7c:	4623      	mov	r3, r4
    5e7e:	4621      	mov	r1, r4
    5e80:	461c      	mov	r4, r3
    5e82:	b171      	cbz	r1, 5ea2 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    5e84:	688a      	ldr	r2, [r1, #8]
    5e86:	402a      	ands	r2, r5
    5e88:	d002      	beq.n	5e90 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5e8a:	684b      	ldr	r3, [r1, #4]
    5e8c:	4630      	mov	r0, r6
    5e8e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5e90:	2c00      	cmp	r4, #0
    5e92:	d0f3      	beq.n	5e7c <gpio_fire_callbacks+0x18>
	return node->next;
    5e94:	6823      	ldr	r3, [r4, #0]
    5e96:	2b00      	cmp	r3, #0
    5e98:	d0f1      	beq.n	5e7e <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    5e9a:	2c00      	cmp	r4, #0
    5e9c:	d1ef      	bne.n	5e7e <gpio_fire_callbacks+0x1a>
    5e9e:	4623      	mov	r3, r4
    5ea0:	e7ed      	b.n	5e7e <gpio_fire_callbacks+0x1a>
		}
	}
}
    5ea2:	bd70      	pop	{r4, r5, r6, pc}

00005ea4 <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5ea4:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    5ea8:	0580      	lsls	r0, r0, #22
    5eaa:	0d80      	lsrs	r0, r0, #22
    5eac:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    5eb0:	d033      	beq.n	5f1a <get_drive+0x76>
    5eb2:	d816      	bhi.n	5ee2 <get_drive+0x3e>
    5eb4:	2806      	cmp	r0, #6
    5eb6:	d02c      	beq.n	5f12 <get_drive+0x6e>
    5eb8:	d906      	bls.n	5ec8 <get_drive+0x24>
    5eba:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    5ebe:	d10d      	bne.n	5edc <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    5ec0:	2301      	movs	r3, #1
    5ec2:	700b      	strb	r3, [r1, #0]
	return 0;
    5ec4:	2000      	movs	r0, #0
		break;
    5ec6:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5ec8:	b300      	cbz	r0, 5f0c <get_drive+0x68>
    5eca:	2802      	cmp	r0, #2
    5ecc:	d103      	bne.n	5ed6 <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    5ece:	2304      	movs	r3, #4
    5ed0:	700b      	strb	r3, [r1, #0]
	return 0;
    5ed2:	2000      	movs	r0, #0
		break;
    5ed4:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5ed6:	f06f 0015 	mvn.w	r0, #21
    5eda:	4770      	bx	lr
    5edc:	f06f 0015 	mvn.w	r0, #21
    5ee0:	4770      	bx	lr
    5ee2:	f240 2302 	movw	r3, #514	; 0x202
    5ee6:	4298      	cmp	r0, r3
    5ee8:	d01b      	beq.n	5f22 <get_drive+0x7e>
    5eea:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    5eee:	d103      	bne.n	5ef8 <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    5ef0:	2303      	movs	r3, #3
    5ef2:	700b      	strb	r3, [r1, #0]
	return 0;
    5ef4:	2000      	movs	r0, #0
		break;
    5ef6:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5ef8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    5efc:	d103      	bne.n	5f06 <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    5efe:	2302      	movs	r3, #2
    5f00:	700b      	strb	r3, [r1, #0]
	return 0;
    5f02:	2000      	movs	r0, #0
		break;
    5f04:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5f06:	f06f 0015 	mvn.w	r0, #21
    5f0a:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    5f0c:	2000      	movs	r0, #0
    5f0e:	7008      	strb	r0, [r1, #0]
		break;
    5f10:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    5f12:	2306      	movs	r3, #6
    5f14:	700b      	strb	r3, [r1, #0]
	return 0;
    5f16:	2000      	movs	r0, #0
		break;
    5f18:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    5f1a:	2307      	movs	r3, #7
    5f1c:	700b      	strb	r3, [r1, #0]
	return 0;
    5f1e:	2000      	movs	r0, #0
		break;
    5f20:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    5f22:	2305      	movs	r3, #5
    5f24:	700b      	strb	r3, [r1, #0]
	return 0;
    5f26:	2000      	movs	r0, #0
}
    5f28:	4770      	bx	lr

00005f2a <get_pull>:
	if (flags & GPIO_PULL_UP) {
    5f2a:	f010 0f10 	tst.w	r0, #16
    5f2e:	d104      	bne.n	5f3a <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    5f30:	f010 0f20 	tst.w	r0, #32
    5f34:	d103      	bne.n	5f3e <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    5f36:	2000      	movs	r0, #0
    5f38:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    5f3a:	2003      	movs	r0, #3
    5f3c:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    5f3e:	2001      	movs	r0, #1
}
    5f40:	4770      	bx	lr

00005f42 <gpio_nrfx_port_get_raw>:
	return port->config;
    5f42:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f44:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5f46:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    5f48:	600b      	str	r3, [r1, #0]
}
    5f4a:	2000      	movs	r0, #0
    5f4c:	4770      	bx	lr

00005f4e <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    5f4e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f50:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    5f52:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    5f56:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    5f5a:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
    5f5c:	60d9      	str	r1, [r3, #12]
}
    5f5e:	2000      	movs	r0, #0
    5f60:	4770      	bx	lr

00005f62 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    5f62:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f64:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    5f66:	6099      	str	r1, [r3, #8]
}
    5f68:	2000      	movs	r0, #0
    5f6a:	4770      	bx	lr

00005f6c <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    5f6c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f6e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    5f70:	60d9      	str	r1, [r3, #12]
}
    5f72:	2000      	movs	r0, #0
    5f74:	4770      	bx	lr

00005f76 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    5f76:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5f78:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5f7a:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    5f7c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    5f80:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    5f82:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
    5f84:	60d3      	str	r3, [r2, #12]
}
    5f86:	2000      	movs	r0, #0
    5f88:	4770      	bx	lr

00005f8a <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    5f8a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    5f8e:	d007      	beq.n	5fa0 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5f90:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    5f94:	d00d      	beq.n	5fb2 <get_trigger+0x28>
    5f96:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5f9a:	d008      	beq.n	5fae <get_trigger+0x24>
    5f9c:	2001      	movs	r0, #1
}
    5f9e:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5fa0:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5fa4:	d001      	beq.n	5faa <get_trigger+0x20>
    5fa6:	2005      	movs	r0, #5
    5fa8:	4770      	bx	lr
    5faa:	2004      	movs	r0, #4
    5fac:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5fae:	2002      	movs	r0, #2
    5fb0:	4770      	bx	lr
    5fb2:	2003      	movs	r0, #3
    5fb4:	4770      	bx	lr

00005fb6 <gpio_nrfx_manage_callback>:
{
    5fb6:	b508      	push	{r3, lr}
	return port->data;
    5fb8:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5fba:	3004      	adds	r0, #4
    5fbc:	f7ff ff33 	bl	5e26 <gpio_manage_callback>
}
    5fc0:	bd08      	pop	{r3, pc}

00005fc2 <nrfx_gpio_handler>:
{
    5fc2:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    5fc4:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    5fc8:	0940      	lsrs	r0, r0, #5
    5fca:	f7fb ffe3 	bl	1f94 <get_dev>
	if (port == NULL) {
    5fce:	b130      	cbz	r0, 5fde <nrfx_gpio_handler+0x1c>
    5fd0:	4601      	mov	r1, r0
	return port->data;
    5fd2:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    5fd4:	2201      	movs	r2, #1
    5fd6:	40a2      	lsls	r2, r4
    5fd8:	3004      	adds	r0, #4
    5fda:	f7ff ff43 	bl	5e64 <gpio_fire_callbacks>
}
    5fde:	bd10      	pop	{r4, pc}

00005fe0 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    5fe0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5fe2:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    5fe4:	f04f 0120 	mov.w	r1, #32
    5fe8:	f3ef 8311 	mrs	r3, BASEPRI
    5fec:	f381 8812 	msr	BASEPRI_MAX, r1
    5ff0:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ff4:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5ff8:	b131      	cbz	r1, 6008 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5ffa:	2100      	movs	r1, #0
    5ffc:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    6000:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6004:	2101      	movs	r1, #1
    6006:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    6008:	f383 8811 	msr	BASEPRI, r3
    600c:	f3bf 8f6f 	isb	sy
}
    6010:	4770      	bx	lr

00006012 <uarte_nrfx_configure>:
{
    6012:	b570      	push	{r4, r5, r6, lr}
    6014:	b082      	sub	sp, #8
    6016:	4605      	mov	r5, r0
    6018:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    601a:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    601c:	794b      	ldrb	r3, [r1, #5]
    601e:	2b01      	cmp	r3, #1
    6020:	d006      	beq.n	6030 <uarte_nrfx_configure+0x1e>
    6022:	2b03      	cmp	r3, #3
    6024:	d011      	beq.n	604a <uarte_nrfx_configure+0x38>
    6026:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    602a:	4610      	mov	r0, r2
    602c:	b002      	add	sp, #8
    602e:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    6030:	2300      	movs	r3, #0
    6032:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    6036:	79a3      	ldrb	r3, [r4, #6]
    6038:	2b03      	cmp	r3, #3
    603a:	d146      	bne.n	60ca <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    603c:	79e3      	ldrb	r3, [r4, #7]
    603e:	b143      	cbz	r3, 6052 <uarte_nrfx_configure+0x40>
    6040:	2b01      	cmp	r3, #1
    6042:	d015      	beq.n	6070 <uarte_nrfx_configure+0x5e>
    6044:	f06f 0285 	mvn.w	r2, #133	; 0x85
    6048:	e7ef      	b.n	602a <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    604a:	2310      	movs	r3, #16
    604c:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    6050:	e7f1      	b.n	6036 <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    6052:	2300      	movs	r3, #0
    6054:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    6058:	2300      	movs	r3, #0
    605a:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    605e:	7923      	ldrb	r3, [r4, #4]
    6060:	2b01      	cmp	r3, #1
    6062:	d02a      	beq.n	60ba <uarte_nrfx_configure+0xa8>
    6064:	2b02      	cmp	r3, #2
    6066:	d024      	beq.n	60b2 <uarte_nrfx_configure+0xa0>
    6068:	b133      	cbz	r3, 6078 <uarte_nrfx_configure+0x66>
    606a:	f06f 0285 	mvn.w	r2, #133	; 0x85
    606e:	e7dc      	b.n	602a <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    6070:	2301      	movs	r3, #1
    6072:	f88d 3000 	strb.w	r3, [sp]
		break;
    6076:	e7ef      	b.n	6058 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    6078:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    607c:	6821      	ldr	r1, [r4, #0]
    607e:	4628      	mov	r0, r5
    6080:	f7fc f89e 	bl	21c0 <baudrate_set>
    6084:	4602      	mov	r2, r0
    6086:	bb18      	cbnz	r0, 60d0 <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    6088:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    608a:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    608c:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    6090:	f89d 0002 	ldrb.w	r0, [sp, #2]
    6094:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    6096:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    609a:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    609c:	f89d 0000 	ldrb.w	r0, [sp]
    60a0:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    60a2:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    60a6:	3604      	adds	r6, #4
    60a8:	e894 0003 	ldmia.w	r4, {r0, r1}
    60ac:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    60b0:	e7bb      	b.n	602a <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    60b2:	230e      	movs	r3, #14
    60b4:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    60b8:	e7e0      	b.n	607c <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    60ba:	230e      	movs	r3, #14
    60bc:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    60c0:	f44f 7380 	mov.w	r3, #256	; 0x100
    60c4:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    60c8:	e7d8      	b.n	607c <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    60ca:	f06f 0285 	mvn.w	r2, #133	; 0x85
    60ce:	e7ac      	b.n	602a <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    60d0:	f06f 0285 	mvn.w	r2, #133	; 0x85
    60d4:	e7a9      	b.n	602a <uarte_nrfx_configure+0x18>

000060d6 <uarte_nrfx_config_get>:
{
    60d6:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    60d8:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    60da:	3304      	adds	r3, #4
    60dc:	e893 0003 	ldmia.w	r3, {r0, r1}
    60e0:	e882 0003 	stmia.w	r2, {r0, r1}
}
    60e4:	2000      	movs	r0, #0
    60e6:	4770      	bx	lr

000060e8 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    60e8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    60ea:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    60ec:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    60f0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    60f4:	4770      	bx	lr

000060f6 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    60f6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    60f8:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    60fa:	685b      	ldr	r3, [r3, #4]
    60fc:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6100:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6104:	b929      	cbnz	r1, 6112 <is_tx_ready+0x1c>
    6106:	b933      	cbnz	r3, 6116 <is_tx_ready+0x20>
    6108:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    610c:	b92b      	cbnz	r3, 611a <is_tx_ready+0x24>
    610e:	2000      	movs	r0, #0
    6110:	4770      	bx	lr
    6112:	2001      	movs	r0, #1
    6114:	4770      	bx	lr
    6116:	2000      	movs	r0, #0
    6118:	4770      	bx	lr
    611a:	2001      	movs	r0, #1
}
    611c:	4770      	bx	lr

0000611e <uarte_enable>:
	struct uarte_nrfx_data *data = dev->data;
    611e:	6903      	ldr	r3, [r0, #16]
	if (data->async) {
    6120:	68db      	ldr	r3, [r3, #12]
    6122:	b123      	cbz	r3, 612e <uarte_enable+0x10>
		bool disabled = data->async->low_power_mask == 0;
    6124:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
		data->async->low_power_mask |= mask;
    6128:	4311      	orrs	r1, r2
    612a:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
	const struct uarte_nrfx_config *config = dev->config;
    612e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6130:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6132:	2208      	movs	r2, #8
    6134:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    6138:	4770      	bx	lr

0000613a <tx_start>:
{
    613a:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    613c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    613e:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6140:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6144:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6148:	2200      	movs	r2, #0
    614a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    614e:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    6152:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    6156:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    615a:	685b      	ldr	r3, [r3, #4]
    615c:	f013 0f10 	tst.w	r3, #16
    6160:	d102      	bne.n	6168 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6162:	2301      	movs	r3, #1
    6164:	60a3      	str	r3, [r4, #8]
}
    6166:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    6168:	2101      	movs	r1, #1
    616a:	f7ff ffd8 	bl	611e <uarte_enable>
    p_reg->INTENSET = mask;
    616e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    6172:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    6176:	e7f4      	b.n	6162 <tx_start+0x28>

00006178 <uart_disable>:
	const struct uarte_nrfx_config *config = dev->config;
    6178:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    617a:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    617c:	2200      	movs	r2, #0
    617e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    6182:	4770      	bx	lr

00006184 <uarte_nrfx_rx_counting_init>:
	const struct uarte_nrfx_config *cfg = dev->config;
    6184:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6186:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    6188:	2204      	movs	r2, #4
    618a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    618e:	2000      	movs	r0, #0
    6190:	4770      	bx	lr

00006192 <start_tx_locked>:
{
    6192:	b538      	push	{r3, r4, r5, lr}
    6194:	4605      	mov	r5, r0
    6196:	460c      	mov	r4, r1
	if (!is_tx_ready(dev)) {
    6198:	f7ff ffad 	bl	60f6 <is_tx_ready>
    619c:	b920      	cbnz	r0, 61a8 <start_tx_locked+0x16>
		data->async->pending_tx = true;
    619e:	68e3      	ldr	r3, [r4, #12]
    61a0:	2201      	movs	r2, #1
    61a2:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
}
    61a6:	bd38      	pop	{r3, r4, r5, pc}
		data->async->pending_tx = false;
    61a8:	68e3      	ldr	r3, [r4, #12]
    61aa:	2200      	movs	r2, #0
    61ac:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
		data->async->tx_amount = -1;
    61b0:	68e3      	ldr	r3, [r4, #12]
    61b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    61b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    61ba:	68e3      	ldr	r3, [r4, #12]
    61bc:	695a      	ldr	r2, [r3, #20]
    61be:	6919      	ldr	r1, [r3, #16]
    61c0:	4628      	mov	r0, r5
    61c2:	f7ff ffba 	bl	613a <tx_start>
}
    61c6:	e7ee      	b.n	61a6 <start_tx_locked+0x14>

000061c8 <user_callback>:
{
    61c8:	b508      	push	{r3, lr}
	struct uarte_nrfx_data *data = dev->data;
    61ca:	6903      	ldr	r3, [r0, #16]
	if (data->async->user_callback) {
    61cc:	68da      	ldr	r2, [r3, #12]
    61ce:	6813      	ldr	r3, [r2, #0]
    61d0:	b10b      	cbz	r3, 61d6 <user_callback+0xe>
		data->async->user_callback(dev, evt, data->async->user_data);
    61d2:	6852      	ldr	r2, [r2, #4]
    61d4:	4798      	blx	r3
}
    61d6:	bd08      	pop	{r3, pc}

000061d8 <notify_uart_rx_rdy>:
{
    61d8:	b500      	push	{lr}
    61da:	b087      	sub	sp, #28
	struct uarte_nrfx_data *data = dev->data;
    61dc:	6902      	ldr	r2, [r0, #16]
	struct uart_event evt = {
    61de:	2300      	movs	r3, #0
    61e0:	9301      	str	r3, [sp, #4]
    61e2:	9302      	str	r3, [sp, #8]
    61e4:	9303      	str	r3, [sp, #12]
    61e6:	9304      	str	r3, [sp, #16]
    61e8:	9305      	str	r3, [sp, #20]
    61ea:	2302      	movs	r3, #2
    61ec:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    61f0:	68d3      	ldr	r3, [r2, #12]
    61f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
	struct uart_event evt = {
    61f4:	9202      	str	r2, [sp, #8]
		.data.rx.offset = data->async->rx_offset
    61f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	struct uart_event evt = {
    61f8:	9303      	str	r3, [sp, #12]
    61fa:	9104      	str	r1, [sp, #16]
	user_callback(dev, &evt);
    61fc:	a901      	add	r1, sp, #4
    61fe:	f7ff ffe3 	bl	61c8 <user_callback>
}
    6202:	b007      	add	sp, #28
    6204:	f85d fb04 	ldr.w	pc, [sp], #4

00006208 <rx_buf_release>:
	if (*buf) {
    6208:	680b      	ldr	r3, [r1, #0]
    620a:	b19b      	cbz	r3, 6234 <rx_buf_release+0x2c>
{
    620c:	b530      	push	{r4, r5, lr}
    620e:	b087      	sub	sp, #28
    6210:	460c      	mov	r4, r1
		struct uart_event evt = {
    6212:	2500      	movs	r5, #0
    6214:	9501      	str	r5, [sp, #4]
    6216:	9502      	str	r5, [sp, #8]
    6218:	9503      	str	r5, [sp, #12]
    621a:	9504      	str	r5, [sp, #16]
    621c:	9505      	str	r5, [sp, #20]
    621e:	2304      	movs	r3, #4
    6220:	f88d 3004 	strb.w	r3, [sp, #4]
			.data.rx_buf.buf = *buf,
    6224:	680b      	ldr	r3, [r1, #0]
		struct uart_event evt = {
    6226:	9302      	str	r3, [sp, #8]
		user_callback(dev, &evt);
    6228:	a901      	add	r1, sp, #4
    622a:	f7ff ffcd 	bl	61c8 <user_callback>
		*buf = NULL;
    622e:	6025      	str	r5, [r4, #0]
}
    6230:	b007      	add	sp, #28
    6232:	bd30      	pop	{r4, r5, pc}
    6234:	4770      	bx	lr

00006236 <notify_rx_disable>:
{
    6236:	b500      	push	{lr}
    6238:	b087      	sub	sp, #28
	struct uart_event evt = {
    623a:	2300      	movs	r3, #0
    623c:	9301      	str	r3, [sp, #4]
    623e:	9302      	str	r3, [sp, #8]
    6240:	9303      	str	r3, [sp, #12]
    6242:	9304      	str	r3, [sp, #16]
    6244:	9305      	str	r3, [sp, #20]
    6246:	2305      	movs	r3, #5
    6248:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    624c:	a901      	add	r1, sp, #4
    624e:	f7ff ffbb 	bl	61c8 <user_callback>
}
    6252:	b007      	add	sp, #28
    6254:	f85d fb04 	ldr.w	pc, [sp], #4

00006258 <uarte_nrfx_rx_buf_rsp>:
{
    6258:	b430      	push	{r4, r5}
	struct uarte_nrfx_data *data = dev->data;
    625a:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    625c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    625e:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    6260:	f04f 0020 	mov.w	r0, #32
    6264:	f3ef 8c11 	mrs	ip, BASEPRI
    6268:	f380 8812 	msr	BASEPRI_MAX, r0
    626c:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    6270:	68e0      	ldr	r0, [r4, #12]
    6272:	6d85      	ldr	r5, [r0, #88]	; 0x58
    6274:	b1ad      	cbz	r5, 62a2 <uarte_nrfx_rx_buf_rsp+0x4a>
	} else if (data->async->rx_next_buf == NULL) {
    6276:	6e45      	ldr	r5, [r0, #100]	; 0x64
    6278:	b9b5      	cbnz	r5, 62a8 <uarte_nrfx_rx_buf_rsp+0x50>
		data->async->rx_next_buf = buf;
    627a:	6641      	str	r1, [r0, #100]	; 0x64
		data->async->rx_next_buf_len = len;
    627c:	68e0      	ldr	r0, [r4, #12]
    627e:	6682      	str	r2, [r0, #104]	; 0x68
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6280:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6284:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    6288:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    628c:	f042 0220 	orr.w	r2, r2, #32
    6290:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		err = 0;
    6294:	2000      	movs	r0, #0
	__asm__ volatile(
    6296:	f38c 8811 	msr	BASEPRI, ip
    629a:	f3bf 8f6f 	isb	sy
}
    629e:	bc30      	pop	{r4, r5}
    62a0:	4770      	bx	lr
		err = -EACCES;
    62a2:	f06f 000c 	mvn.w	r0, #12
    62a6:	e7f6      	b.n	6296 <uarte_nrfx_rx_buf_rsp+0x3e>
		err = -EBUSY;
    62a8:	f06f 000f 	mvn.w	r0, #15
    62ac:	e7f3      	b.n	6296 <uarte_nrfx_rx_buf_rsp+0x3e>

000062ae <uarte_nrfx_callback_set>:
	struct uarte_nrfx_data *data = dev->data;
    62ae:	6903      	ldr	r3, [r0, #16]
	if (!data->async) {
    62b0:	68d8      	ldr	r0, [r3, #12]
    62b2:	b120      	cbz	r0, 62be <uarte_nrfx_callback_set+0x10>
	data->async->user_callback = callback;
    62b4:	6001      	str	r1, [r0, #0]
	data->async->user_data = user_data;
    62b6:	68db      	ldr	r3, [r3, #12]
    62b8:	605a      	str	r2, [r3, #4]
	return 0;
    62ba:	2000      	movs	r0, #0
    62bc:	4770      	bx	lr
		return -ENOTSUP;
    62be:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    62c2:	4770      	bx	lr

000062c4 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    62c4:	6902      	ldr	r2, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    62c6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    62c8:	681b      	ldr	r3, [r3, #0]
	if (data->async) {
    62ca:	68d0      	ldr	r0, [r2, #12]
    62cc:	b968      	cbnz	r0, 62ea <uarte_nrfx_poll_in+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    62ce:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    62d2:	b168      	cbz	r0, 62f0 <uarte_nrfx_poll_in+0x2c>
	*c = *data->rx_data;
    62d4:	6992      	ldr	r2, [r2, #24]
    62d6:	7812      	ldrb	r2, [r2, #0]
    62d8:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62da:	2000      	movs	r0, #0
    62dc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    62e0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    62e4:	2201      	movs	r2, #1
    62e6:	601a      	str	r2, [r3, #0]
	return 0;
    62e8:	4770      	bx	lr
		return -ENOTSUP;
    62ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
    62ee:	4770      	bx	lr
		return -1;
    62f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    62f4:	4770      	bx	lr

000062f6 <k_msleep>:
{
    62f6:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    62f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    62fc:	17c1      	asrs	r1, r0, #31
    62fe:	03c9      	lsls	r1, r1, #15
    6300:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    6304:	03c0      	lsls	r0, r0, #15
    6306:	f240 33e7 	movw	r3, #999	; 0x3e7
    630a:	18c0      	adds	r0, r0, r3
    630c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6310:	f04f 0300 	mov.w	r3, #0
    6314:	f141 0100 	adc.w	r1, r1, #0
    6318:	f7f9 ff1c 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    631c:	f7fe fa56 	bl	47cc <z_impl_k_sleep>
}
    6320:	bd08      	pop	{r3, pc}

00006322 <wait_tx_ready>:
{
    6322:	b570      	push	{r4, r5, r6, lr}
    6324:	4606      	mov	r6, r0
    6326:	e013      	b.n	6350 <wait_tx_ready+0x2e>
		if (res) {
    6328:	b17d      	cbz	r5, 634a <wait_tx_ready+0x28>
	__asm__ volatile(
    632a:	f04f 0320 	mov.w	r3, #32
    632e:	f3ef 8411 	mrs	r4, BASEPRI
    6332:	f383 8812 	msr	BASEPRI_MAX, r3
    6336:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    633a:	4630      	mov	r0, r6
    633c:	f7ff fedb 	bl	60f6 <is_tx_ready>
    6340:	b998      	cbnz	r0, 636a <wait_tx_ready+0x48>
	__asm__ volatile(
    6342:	f384 8811 	msr	BASEPRI, r4
    6346:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    634a:	2001      	movs	r0, #1
    634c:	f7ff ffd3 	bl	62f6 <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    6350:	2464      	movs	r4, #100	; 0x64
    6352:	4630      	mov	r0, r6
    6354:	f7ff fecf 	bl	60f6 <is_tx_ready>
    6358:	4605      	mov	r5, r0
    635a:	2800      	cmp	r0, #0
    635c:	d1e4      	bne.n	6328 <wait_tx_ready+0x6>
    635e:	2001      	movs	r0, #1
    6360:	f000 fc65 	bl	6c2e <nrfx_busy_wait>
    6364:	3c01      	subs	r4, #1
    6366:	d1f4      	bne.n	6352 <wait_tx_ready+0x30>
    6368:	e7de      	b.n	6328 <wait_tx_ready+0x6>
}
    636a:	4620      	mov	r0, r4
    636c:	bd70      	pop	{r4, r5, r6, pc}

0000636e <uarte_nrfx_rx_disable>:
{
    636e:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    6370:	6905      	ldr	r5, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    6372:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6374:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    6376:	68eb      	ldr	r3, [r5, #12]
    6378:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    637a:	b1ba      	cbz	r2, 63ac <uarte_nrfx_rx_disable+0x3e>
	if (data->async->rx_next_buf != NULL) {
    637c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    637e:	b153      	cbz	r3, 6396 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    6380:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    6384:	f023 0320 	bic.w	r3, r3, #32
    6388:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    638c:	2300      	movs	r3, #0
    638e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    6392:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	k_timer_stop(&data->async->rx_timeout_timer);
    6396:	68e8      	ldr	r0, [r5, #12]
    6398:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
    639a:	f001 f8a2 	bl	74e2 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    639e:	68eb      	ldr	r3, [r5, #12]
    63a0:	2000      	movs	r0, #0
    63a2:	f883 00ca 	strb.w	r0, [r3, #202]	; 0xca
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    63a6:	2301      	movs	r3, #1
    63a8:	6063      	str	r3, [r4, #4]
}
    63aa:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    63ac:	f06f 000d 	mvn.w	r0, #13
    63b0:	e7fb      	b.n	63aa <uarte_nrfx_rx_disable+0x3c>

000063b2 <error_isr>:
{
    63b2:	b510      	push	{r4, lr}
    63b4:	b086      	sub	sp, #24
    63b6:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    63b8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    63ba:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    63bc:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    63c0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
	struct uart_event evt = {
    63c4:	2300      	movs	r3, #0
    63c6:	9301      	str	r3, [sp, #4]
    63c8:	9302      	str	r3, [sp, #8]
    63ca:	9303      	str	r3, [sp, #12]
    63cc:	9304      	str	r3, [sp, #16]
    63ce:	9305      	str	r3, [sp, #20]
    63d0:	2306      	movs	r3, #6
    63d2:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    63d6:	f012 0f01 	tst.w	r2, #1
    63da:	d108      	bne.n	63ee <error_isr+0x3c>
    63dc:	f012 0f02 	tst.w	r2, #2
    63e0:	d111      	bne.n	6406 <error_isr+0x54>
    63e2:	f012 0f04 	tst.w	r2, #4
    63e6:	d110      	bne.n	640a <error_isr+0x58>
    63e8:	f002 0208 	and.w	r2, r2, #8
    63ec:	e000      	b.n	63f0 <error_isr+0x3e>
    63ee:	2201      	movs	r2, #1
	struct uart_event evt = {
    63f0:	f88d 2008 	strb.w	r2, [sp, #8]
	user_callback(dev, &evt);
    63f4:	a901      	add	r1, sp, #4
    63f6:	4620      	mov	r0, r4
    63f8:	f7ff fee6 	bl	61c8 <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    63fc:	4620      	mov	r0, r4
    63fe:	f7ff ffb6 	bl	636e <uarte_nrfx_rx_disable>
}
    6402:	b006      	add	sp, #24
    6404:	bd10      	pop	{r4, pc}
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    6406:	2202      	movs	r2, #2
    6408:	e7f2      	b.n	63f0 <error_isr+0x3e>
    640a:	2204      	movs	r2, #4
    640c:	e7f0      	b.n	63f0 <error_isr+0x3e>

0000640e <uarte_nrfx_tx_abort>:
{
    640e:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    6410:	6903      	ldr	r3, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    6412:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    6414:	6815      	ldr	r5, [r2, #0]
	if (data->async->tx_buf == NULL) {
    6416:	68da      	ldr	r2, [r3, #12]
    6418:	6891      	ldr	r1, [r2, #8]
    641a:	b151      	cbz	r1, 6432 <uarte_nrfx_tx_abort+0x24>
	data->async->pending_tx = false;
    641c:	2400      	movs	r4, #0
    641e:	f882 40cc 	strb.w	r4, [r2, #204]	; 0xcc
	k_timer_stop(&data->async->tx_timeout_timer);
    6422:	68d8      	ldr	r0, [r3, #12]
    6424:	3020      	adds	r0, #32
    6426:	f001 f85c 	bl	74e2 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    642a:	2301      	movs	r3, #1
    642c:	60eb      	str	r3, [r5, #12]
	return 0;
    642e:	4620      	mov	r0, r4
}
    6430:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    6432:	f06f 000d 	mvn.w	r0, #13
    6436:	e7fb      	b.n	6430 <uarte_nrfx_tx_abort+0x22>

00006438 <tx_timeout>:
{
    6438:	b508      	push	{r3, lr}
	return timer->user_data;
    643a:	6b43      	ldr	r3, [r0, #52]	; 0x34
	(void) uarte_nrfx_tx_abort(data->dev);
    643c:	6818      	ldr	r0, [r3, #0]
    643e:	f7ff ffe6 	bl	640e <uarte_nrfx_tx_abort>
}
    6442:	bd08      	pop	{r3, pc}

00006444 <rx_timeout>:
{
    6444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6446:	6b44      	ldr	r4, [r0, #52]	; 0x34
	const struct device *dev = data->dev;
    6448:	6826      	ldr	r6, [r4, #0]
	const struct uarte_nrfx_config *cfg = dev->config;
    644a:	6872      	ldr	r2, [r6, #4]
	if (data->async->is_in_irq) {
    644c:	68e3      	ldr	r3, [r4, #12]
    644e:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
    6452:	2b00      	cmp	r3, #0
    6454:	d135      	bne.n	64c2 <rx_timeout+0x7e>
    6456:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	return config->uarte_regs;
    645a:	6813      	ldr	r3, [r2, #0]
    p_reg->INTENCLR = mask;
    645c:	2210      	movs	r2, #16
    645e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    6462:	68e3      	ldr	r3, [r4, #12]
    6464:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
	if (read != data->async->rx_total_byte_cnt) {
    6468:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
    646a:	4291      	cmp	r1, r2
    646c:	d003      	beq.n	6476 <rx_timeout+0x32>
		data->async->rx_total_byte_cnt = read;
    646e:	66da      	str	r2, [r3, #108]	; 0x6c
		data->async->rx_timeout_left = data->async->rx_timeout;
    6470:	68e3      	ldr	r3, [r4, #12]
    6472:	6f5a      	ldr	r2, [r3, #116]	; 0x74
    6474:	67da      	str	r2, [r3, #124]	; 0x7c
	int32_t len = data->async->rx_total_byte_cnt
    6476:	68e3      	ldr	r3, [r4, #12]
    6478:	6edd      	ldr	r5, [r3, #108]	; 0x6c
		    - data->async->rx_total_user_byte_cnt;
    647a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
	if (!HW_RX_COUNTING_ENABLED(data) &&
    647c:	1aad      	subs	r5, r5, r2
    647e:	d421      	bmi.n	64c4 <rx_timeout+0x80>
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    6480:	68e3      	ldr	r3, [r4, #12]
    6482:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    6484:	18a8      	adds	r0, r5, r2
    6486:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
    6488:	4288      	cmp	r0, r1
    648a:	d901      	bls.n	6490 <rx_timeout+0x4c>
		len = data->async->rx_buf_len - data->async->rx_offset;
    648c:	1a8d      	subs	r5, r1, r2
		clipped = true;
    648e:	2701      	movs	r7, #1
	if (len > 0) {
    6490:	2d00      	cmp	r5, #0
    6492:	dd11      	ble.n	64b8 <rx_timeout+0x74>
		if (clipped ||
    6494:	b91f      	cbnz	r7, 649e <rx_timeout+0x5a>
			(data->async->rx_timeout_left
    6496:	6fda      	ldr	r2, [r3, #124]	; 0x7c
				< data->async->rx_timeout_slab)) {
    6498:	6f99      	ldr	r1, [r3, #120]	; 0x78
		if (clipped ||
    649a:	428a      	cmp	r2, r1
    649c:	da16      	bge.n	64cc <rx_timeout+0x88>
			notify_uart_rx_rdy(dev, len);
    649e:	4629      	mov	r1, r5
    64a0:	4630      	mov	r0, r6
    64a2:	f7ff fe99 	bl	61d8 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    64a6:	68e2      	ldr	r2, [r4, #12]
    64a8:	6e13      	ldr	r3, [r2, #96]	; 0x60
    64aa:	442b      	add	r3, r5
    64ac:	6613      	str	r3, [r2, #96]	; 0x60
			data->async->rx_total_user_byte_cnt += len;
    64ae:	68e3      	ldr	r3, [r4, #12]
    64b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    64b2:	4415      	add	r5, r2
    64b4:	671d      	str	r5, [r3, #112]	; 0x70
		if (clipped) {
    64b6:	b967      	cbnz	r7, 64d2 <rx_timeout+0x8e>
	const struct uarte_nrfx_config *config = dev->config;
    64b8:	6873      	ldr	r3, [r6, #4]
	return config->uarte_regs;
    64ba:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    64bc:	2210      	movs	r2, #16
    64be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    64c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    64c4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		len = 0;
    64c8:	2500      	movs	r5, #0
    64ca:	e7d9      	b.n	6480 <rx_timeout+0x3c>
			data->async->rx_timeout_left -=
    64cc:	1a52      	subs	r2, r2, r1
    64ce:	67da      	str	r2, [r3, #124]	; 0x7c
    64d0:	e7f1      	b.n	64b6 <rx_timeout+0x72>
			k_timer_stop(&data->async->rx_timeout_timer);
    64d2:	68e0      	ldr	r0, [r4, #12]
    64d4:	3080      	adds	r0, #128	; 0x80
    64d6:	f001 f804 	bl	74e2 <z_impl_k_timer_stop>
}
    64da:	e7ed      	b.n	64b8 <rx_timeout+0x74>

000064dc <endrx_isr>:
{
    64dc:	b570      	push	{r4, r5, r6, lr}
    64de:	4605      	mov	r5, r0
	struct uarte_nrfx_data *data = dev->data;
    64e0:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    64e2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    64e4:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    64e6:	68e3      	ldr	r3, [r4, #12]
    64e8:	2201      	movs	r2, #1
    64ea:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
	k_timer_stop(&data->async->rx_timeout_timer);
    64ee:	68e0      	ldr	r0, [r4, #12]
    64f0:	3080      	adds	r0, #128	; 0x80
	z_impl_k_timer_stop(timer);
    64f2:	f000 fff6 	bl	74e2 <z_impl_k_timer_stop>
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    64f6:	f8d6 253c 	ldr.w	r2, [r6, #1340]	; 0x53c
				data->async->rx_flush_cnt;
    64fa:	68e3      	ldr	r3, [r4, #12]
    64fc:	f893 10c9 	ldrb.w	r1, [r3, #201]	; 0xc9
	const int rx_amount = nrf_uarte_rx_amount_get(uarte) +
    6500:	4411      	add	r1, r2
	data->async->rx_flush_cnt = 0;
    6502:	2200      	movs	r2, #0
    6504:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
	int rx_len = rx_amount - data->async->rx_offset;
    6508:	68e3      	ldr	r3, [r4, #12]
    650a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
	if (rx_len < 0) {
    650c:	1a89      	subs	r1, r1, r2
    650e:	d40b      	bmi.n	6528 <endrx_isr+0x4c>
	data->async->rx_total_user_byte_cnt += rx_len;
    6510:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    6512:	440a      	add	r2, r1
    6514:	671a      	str	r2, [r3, #112]	; 0x70
	if (rx_len > 0) {
    6516:	2900      	cmp	r1, #0
    6518:	dc08      	bgt.n	652c <endrx_isr+0x50>
	if (!data->async->rx_enabled) {
    651a:	68e1      	ldr	r1, [r4, #12]
    651c:	f891 30ca 	ldrb.w	r3, [r1, #202]	; 0xca
    6520:	b943      	cbnz	r3, 6534 <endrx_isr+0x58>
		data->async->is_in_irq = false;
    6522:	f881 30cd 	strb.w	r3, [r1, #205]	; 0xcd
}
    6526:	bd70      	pop	{r4, r5, r6, pc}
		rx_len = 0;
    6528:	2100      	movs	r1, #0
    652a:	e7f1      	b.n	6510 <endrx_isr+0x34>
		notify_uart_rx_rdy(dev, rx_len);
    652c:	4628      	mov	r0, r5
    652e:	f7ff fe53 	bl	61d8 <notify_uart_rx_rdy>
    6532:	e7f2      	b.n	651a <endrx_isr+0x3e>
	rx_buf_release(dev, &data->async->rx_buf);
    6534:	3158      	adds	r1, #88	; 0x58
    6536:	4628      	mov	r0, r5
    6538:	f7ff fe66 	bl	6208 <rx_buf_release>
	__asm__ volatile(
    653c:	f04f 0220 	mov.w	r2, #32
    6540:	f3ef 8311 	mrs	r3, BASEPRI
    6544:	f382 8812 	msr	BASEPRI_MAX, r2
    6548:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    654c:	68e2      	ldr	r2, [r4, #12]
    654e:	6e51      	ldr	r1, [r2, #100]	; 0x64
    6550:	b1f1      	cbz	r1, 6590 <endrx_isr+0xb4>
		data->async->rx_buf = data->async->rx_next_buf;
    6552:	6591      	str	r1, [r2, #88]	; 0x58
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    6554:	68e2      	ldr	r2, [r4, #12]
    6556:	6e91      	ldr	r1, [r2, #104]	; 0x68
    6558:	65d1      	str	r1, [r2, #92]	; 0x5c
		data->async->rx_next_buf = NULL;
    655a:	68e1      	ldr	r1, [r4, #12]
    655c:	2200      	movs	r2, #0
    655e:	664a      	str	r2, [r1, #100]	; 0x64
		data->async->rx_next_buf_len = 0;
    6560:	68e1      	ldr	r1, [r4, #12]
    6562:	668a      	str	r2, [r1, #104]	; 0x68
		data->async->rx_offset = 0;
    6564:	68e1      	ldr	r1, [r4, #12]
    6566:	660a      	str	r2, [r1, #96]	; 0x60
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6568:	f8d6 214c 	ldr.w	r2, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    656c:	b90a      	cbnz	r2, 6572 <endrx_isr+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    656e:	2201      	movs	r2, #1
    6570:	6032      	str	r2, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    6572:	f8d6 2200 	ldr.w	r2, [r6, #512]	; 0x200
    6576:	f022 0220 	bic.w	r2, r2, #32
    657a:	f8c6 2200 	str.w	r2, [r6, #512]	; 0x200
	__asm__ volatile(
    657e:	f383 8811 	msr	BASEPRI, r3
    6582:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    6586:	68e3      	ldr	r3, [r4, #12]
    6588:	2200      	movs	r2, #0
    658a:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
    658e:	e7ca      	b.n	6526 <endrx_isr+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6590:	2201      	movs	r2, #1
    6592:	6072      	str	r2, [r6, #4]
}
    6594:	e7f3      	b.n	657e <endrx_isr+0xa2>

00006596 <setup_tx_cache>:
{
    6596:	b508      	push	{r3, lr}
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    6598:	68c3      	ldr	r3, [r0, #12]
    659a:	68da      	ldr	r2, [r3, #12]
    659c:	69d9      	ldr	r1, [r3, #28]
	if (!remaining) {
    659e:	1a52      	subs	r2, r2, r1
    65a0:	d101      	bne.n	65a6 <setup_tx_cache+0x10>
		return false;
    65a2:	2000      	movs	r0, #0
}
    65a4:	bd08      	pop	{r3, pc}
	size_t len = MIN(remaining, CONFIG_UART_ASYNC_TX_CACHE_SIZE);
    65a6:	2a08      	cmp	r2, #8
    65a8:	bf28      	it	cs
    65aa:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    65ac:	615a      	str	r2, [r3, #20]
	data->async->xfer_buf = data->async->tx_cache;
    65ae:	68c3      	ldr	r3, [r0, #12]
    65b0:	6999      	ldr	r1, [r3, #24]
    65b2:	6119      	str	r1, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    65b4:	68c3      	ldr	r3, [r0, #12]
    65b6:	6898      	ldr	r0, [r3, #8]
    65b8:	69d9      	ldr	r1, [r3, #28]
    65ba:	4401      	add	r1, r0
    65bc:	6998      	ldr	r0, [r3, #24]
    65be:	f7ff fa87 	bl	5ad0 <memcpy>
	return true;
    65c2:	2001      	movs	r0, #1
    65c4:	e7ee      	b.n	65a4 <setup_tx_cache+0xe>

000065c6 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    65c6:	b510      	push	{r4, lr}
    65c8:	b082      	sub	sp, #8
    65ca:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    65cc:	aa01      	add	r2, sp, #4
    65ce:	f000 fa6b 	bl	6aa8 <pinctrl_lookup_state>
	if (ret < 0) {
    65d2:	2800      	cmp	r0, #0
    65d4:	db05      	blt.n	65e2 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    65d6:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    65d8:	6822      	ldr	r2, [r4, #0]
    65da:	7919      	ldrb	r1, [r3, #4]
    65dc:	6818      	ldr	r0, [r3, #0]
    65de:	f7fc fadd 	bl	2b9c <pinctrl_configure_pins>
}
    65e2:	b002      	add	sp, #8
    65e4:	bd10      	pop	{r4, pc}

000065e6 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    65e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65ea:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    65ec:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    65ee:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    65f0:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    65f4:	2100      	movs	r1, #0
    65f6:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    65fa:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    65fe:	68f8      	ldr	r0, [r7, #12]
    6600:	f7ff ffe1 	bl	65c6 <pinctrl_apply_state>
	if (err < 0) {
    6604:	1e05      	subs	r5, r0, #0
    6606:	db2c      	blt.n	6662 <uarte_instance_init+0x7c>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    6608:	f108 0104 	add.w	r1, r8, #4
    660c:	4620      	mov	r0, r4
    660e:	f7ff fd00 	bl	6012 <uarte_nrfx_configure>
	if (err) {
    6612:	4605      	mov	r5, r0
    6614:	bb28      	cbnz	r0, 6662 <uarte_instance_init+0x7c>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    6616:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    6618:	f013 0f02 	tst.w	r3, #2
    661c:	d124      	bne.n	6668 <uarte_instance_init+0x82>
		}
	}


#ifdef UARTE_ANY_ASYNC
	if (data->async) {
    661e:	f8d8 300c 	ldr.w	r3, [r8, #12]
    6622:	b34b      	cbz	r3, 6678 <uarte_instance_init+0x92>
		err = uarte_nrfx_init(dev);
    6624:	4620      	mov	r0, r4
    6626:	f7fb fffb 	bl	2620 <uarte_nrfx_init>
		if (err < 0) {
    662a:	2800      	cmp	r0, #0
    662c:	db37      	blt.n	669e <uarte_instance_init+0xb8>
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    662e:	687b      	ldr	r3, [r7, #4]
    6630:	f013 0f02 	tst.w	r3, #2
    6634:	d103      	bne.n	663e <uarte_instance_init+0x58>
    p_reg->INTENSET = mask;
    6636:	f44f 7380 	mov.w	r3, #256	; 0x100
    663a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    663e:	687b      	ldr	r3, [r7, #4]
    6640:	f013 0f10 	tst.w	r3, #16
    6644:	d003      	beq.n	664e <uarte_instance_init+0x68>
    6646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    664a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    664e:	f8d8 3014 	ldr.w	r3, [r8, #20]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6652:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6656:	2300      	movs	r3, #0
    6658:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    665c:	2301      	movs	r3, #1
    665e:	60b3      	str	r3, [r6, #8]
    6660:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    6662:	4628      	mov	r0, r5
    6664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    6668:	4641      	mov	r1, r8
    666a:	4630      	mov	r0, r6
    666c:	f7fb ffb8 	bl	25e0 <endtx_stoptx_ppi_init>
		if (err < 0) {
    6670:	2800      	cmp	r0, #0
    6672:	dad4      	bge.n	661e <uarte_instance_init+0x38>
			return err;
    6674:	4605      	mov	r5, r0
    6676:	e7f4      	b.n	6662 <uarte_instance_init+0x7c>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6678:	2308      	movs	r3, #8
    667a:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
		if (!cfg->disable_rx) {
    667e:	7a3b      	ldrb	r3, [r7, #8]
    6680:	2b00      	cmp	r3, #0
    6682:	d1d4      	bne.n	662e <uarte_instance_init+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6684:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    6688:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    668c:	f8d8 3018 	ldr.w	r3, [r8, #24]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6690:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6694:	2301      	movs	r3, #1
    6696:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    669a:	6033      	str	r3, [r6, #0]
}
    669c:	e7c7      	b.n	662e <uarte_instance_init+0x48>
			return err;
    669e:	4605      	mov	r5, r0
    66a0:	e7df      	b.n	6662 <uarte_instance_init+0x7c>

000066a2 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    66a2:	b510      	push	{r4, lr}
    66a4:	4604      	mov	r4, r0
    66a6:	2200      	movs	r2, #0
    66a8:	2101      	movs	r1, #1
    66aa:	2008      	movs	r0, #8
    66ac:	f7ff f92e 	bl	590c <z_arm_irq_priority_set>
    66b0:	2008      	movs	r0, #8
    66b2:	f7ff f926 	bl	5902 <arch_irq_enable>
    66b6:	2100      	movs	r1, #0
    66b8:	4620      	mov	r0, r4
    66ba:	f7ff ff94 	bl	65e6 <uarte_instance_init>
    66be:	bd10      	pop	{r4, pc}

000066c0 <rx_flush>:
{
    66c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    66c2:	b083      	sub	sp, #12
	const struct uarte_nrfx_config *config = dev->config;
    66c4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    66c6:	681c      	ldr	r4, [r3, #0]
    return p_reg->RXD.AMOUNT;
    66c8:	f8d4 753c 	ldr.w	r7, [r4, #1340]	; 0x53c
	uint8_t *flush_buf = buf ? buf : tmp_buf;
    66cc:	460e      	mov	r6, r1
    66ce:	b309      	cbz	r1, 6714 <rx_flush+0x54>
    66d0:	4615      	mov	r5, r2
		memset(buf, dirty, len);
    66d2:	2100      	movs	r1, #0
    66d4:	4630      	mov	r0, r6
    66d6:	f7ff fa2a 	bl	5b2e <memset>
		flush_buf = buf;
    66da:	4633      	mov	r3, r6
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    66dc:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    66e0:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    66e4:	2300      	movs	r3, #0
    66e6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    66ea:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    66ee:	2301      	movs	r3, #1
    66f0:	62e3      	str	r3, [r4, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    66f2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    66f6:	2b00      	cmp	r3, #0
    66f8:	d0fb      	beq.n	66f2 <rx_flush+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    66fa:	2300      	movs	r3, #0
    66fc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    6700:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (!buf) {
    6704:	b14e      	cbz	r6, 671a <rx_flush+0x5a>
    return p_reg->RXD.AMOUNT;
    6706:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
	if (rx_amount != prev_rx_amount) {
    670a:	4287      	cmp	r7, r0
    670c:	d00b      	beq.n	6726 <rx_flush+0x66>
		return rx_amount;
    670e:	b2c0      	uxtb	r0, r0
}
    6710:	b003      	add	sp, #12
    6712:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flush_len = sizeof(tmp_buf);
    6714:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
    6716:	466b      	mov	r3, sp
    6718:	e7e0      	b.n	66dc <rx_flush+0x1c>
    671a:	f8d4 053c 	ldr.w	r0, [r4, #1340]	; 0x53c
		return nrf_uarte_rx_amount_get(uarte);
    671e:	b2c0      	uxtb	r0, r0
    6720:	e7f6      	b.n	6710 <rx_flush+0x50>
			return rx_amount;
    6722:	b2c0      	uxtb	r0, r0
    6724:	e7f4      	b.n	6710 <rx_flush+0x50>
	for (int i = 0; i < flush_len; i++) {
    6726:	2300      	movs	r3, #0
    6728:	42ab      	cmp	r3, r5
    672a:	d204      	bcs.n	6736 <rx_flush+0x76>
		if (buf[i] != dirty) {
    672c:	5cf2      	ldrb	r2, [r6, r3]
    672e:	2a00      	cmp	r2, #0
    6730:	d1f7      	bne.n	6722 <rx_flush+0x62>
	for (int i = 0; i < flush_len; i++) {
    6732:	3301      	adds	r3, #1
    6734:	e7f8      	b.n	6728 <rx_flush+0x68>
	return 0;
    6736:	2000      	movs	r0, #0
    6738:	e7ea      	b.n	6710 <rx_flush+0x50>

0000673a <async_uart_release>:
{
    673a:	b570      	push	{r4, r5, r6, lr}
    673c:	4604      	mov	r4, r0
	struct uarte_nrfx_data *data = dev->data;
    673e:	6902      	ldr	r2, [r0, #16]
	__asm__ volatile(
    6740:	f04f 0320 	mov.w	r3, #32
    6744:	f3ef 8511 	mrs	r5, BASEPRI
    6748:	f383 8812 	msr	BASEPRI_MAX, r3
    674c:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    6750:	68d0      	ldr	r0, [r2, #12]
    6752:	f8d0 30c0 	ldr.w	r3, [r0, #192]	; 0xc0
    6756:	ea23 0301 	bic.w	r3, r3, r1
    675a:	f8c0 30c0 	str.w	r3, [r0, #192]	; 0xc0
	if (!data->async->low_power_mask) {
    675e:	68d6      	ldr	r6, [r2, #12]
    6760:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
    6764:	b923      	cbnz	r3, 6770 <async_uart_release+0x36>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    6766:	2902      	cmp	r1, #2
    6768:	d007      	beq.n	677a <async_uart_release+0x40>
		uart_disable(dev);
    676a:	4620      	mov	r0, r4
    676c:	f7ff fd04 	bl	6178 <uart_disable>
	__asm__ volatile(
    6770:	f385 8811 	msr	BASEPRI, r5
    6774:	f3bf 8f6f 	isb	sy
}
    6778:	bd70      	pop	{r4, r5, r6, pc}
				rx_flush(dev, data->async->rx_flush_buffer,
    677a:	2205      	movs	r2, #5
    677c:	f106 01c4 	add.w	r1, r6, #196	; 0xc4
    6780:	4620      	mov	r0, r4
    6782:	f7ff ff9d 	bl	66c0 <rx_flush>
			data->async->rx_flush_cnt =
    6786:	f886 00c9 	strb.w	r0, [r6, #201]	; 0xc9
    678a:	e7ee      	b.n	676a <async_uart_release+0x30>

0000678c <txstopped_isr>:
{
    678c:	b5f0      	push	{r4, r5, r6, r7, lr}
    678e:	b087      	sub	sp, #28
    6790:	4605      	mov	r5, r0
	const struct uarte_nrfx_config *config = dev->config;
    6792:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    6794:	6904      	ldr	r4, [r0, #16]
	return config->uarte_regs;
    6796:	681f      	ldr	r7, [r3, #0]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6798:	685b      	ldr	r3, [r3, #4]
    679a:	f013 0f10 	tst.w	r3, #16
    679e:	d147      	bne.n	6830 <txstopped_isr+0xa4>
	if (!data->async->tx_buf) {
    67a0:	68e3      	ldr	r3, [r4, #12]
    67a2:	689b      	ldr	r3, [r3, #8]
    67a4:	2b00      	cmp	r3, #0
    67a6:	d041      	beq.n	682c <txstopped_isr+0xa0>
	__asm__ volatile(
    67a8:	f04f 0220 	mov.w	r2, #32
    67ac:	f3ef 8311 	mrs	r3, BASEPRI
    67b0:	f382 8812 	msr	BASEPRI_MAX, r2
    67b4:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    67b8:	68e2      	ldr	r2, [r4, #12]
    67ba:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    67be:	2900      	cmp	r1, #0
    67c0:	db42      	blt.n	6848 <txstopped_isr+0xbc>
    67c2:	f8d2 60bc 	ldr.w	r6, [r2, #188]	; 0xbc
	__asm__ volatile(
    67c6:	f383 8811 	msr	BASEPRI, r3
    67ca:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    67ce:	68e3      	ldr	r3, [r4, #12]
    67d0:	f893 20cc 	ldrb.w	r2, [r3, #204]	; 0xcc
    67d4:	2a00      	cmp	r2, #0
    67d6:	d13a      	bne.n	684e <txstopped_isr+0xc2>
	if (data->async->tx_buf != data->async->xfer_buf) {
    67d8:	6899      	ldr	r1, [r3, #8]
    67da:	691a      	ldr	r2, [r3, #16]
    67dc:	4291      	cmp	r1, r2
    67de:	d004      	beq.n	67ea <txstopped_isr+0x5e>
		if (amount == data->async->xfer_len) {
    67e0:	695a      	ldr	r2, [r3, #20]
    67e2:	42b2      	cmp	r2, r6
    67e4:	d044      	beq.n	6870 <txstopped_isr+0xe4>
			amount += data->async->tx_cache_offset;
    67e6:	69db      	ldr	r3, [r3, #28]
    67e8:	441e      	add	r6, r3
	k_timer_stop(&data->async->tx_timeout_timer);
    67ea:	68e0      	ldr	r0, [r4, #12]
    67ec:	3020      	adds	r0, #32
    67ee:	f000 fe78 	bl	74e2 <z_impl_k_timer_stop>
	struct uart_event evt = {
    67f2:	2300      	movs	r3, #0
    67f4:	9301      	str	r3, [sp, #4]
    67f6:	9302      	str	r3, [sp, #8]
    67f8:	9303      	str	r3, [sp, #12]
    67fa:	9304      	str	r3, [sp, #16]
    67fc:	9305      	str	r3, [sp, #20]
		.data.tx.buf = data->async->tx_buf,
    67fe:	68e3      	ldr	r3, [r4, #12]
    6800:	689a      	ldr	r2, [r3, #8]
	struct uart_event evt = {
    6802:	9202      	str	r2, [sp, #8]
    6804:	9603      	str	r6, [sp, #12]
	if (amount == data->async->tx_size) {
    6806:	68db      	ldr	r3, [r3, #12]
    6808:	42b3      	cmp	r3, r6
    680a:	d002      	beq.n	6812 <txstopped_isr+0x86>
		evt.type = UART_TX_ABORTED;
    680c:	2301      	movs	r3, #1
    680e:	f88d 3004 	strb.w	r3, [sp, #4]
    p_reg->INTENCLR = mask;
    6812:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    6816:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    681a:	68e2      	ldr	r2, [r4, #12]
    681c:	2300      	movs	r3, #0
    681e:	6093      	str	r3, [r2, #8]
	data->async->tx_size = 0;
    6820:	68e2      	ldr	r2, [r4, #12]
    6822:	60d3      	str	r3, [r2, #12]
	user_callback(dev, &evt);
    6824:	a901      	add	r1, sp, #4
    6826:	4628      	mov	r0, r5
    6828:	f7ff fcce 	bl	61c8 <user_callback>
}
    682c:	b007      	add	sp, #28
    682e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6830:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    6834:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    6838:	2101      	movs	r1, #1
    683a:	f7ff ff7e 	bl	673a <async_uart_release>
		if (!data->async->tx_size) {
    683e:	68e3      	ldr	r3, [r4, #12]
    6840:	68db      	ldr	r3, [r3, #12]
    6842:	2b00      	cmp	r3, #0
    6844:	d1ac      	bne.n	67a0 <txstopped_isr+0x14>
    6846:	e7f1      	b.n	682c <txstopped_isr+0xa0>
    return p_reg->TXD.AMOUNT;
    6848:	f8d7 654c 	ldr.w	r6, [r7, #1356]	; 0x54c
    684c:	e7bb      	b.n	67c6 <txstopped_isr+0x3a>
	__asm__ volatile(
    684e:	f04f 0320 	mov.w	r3, #32
    6852:	f3ef 8611 	mrs	r6, BASEPRI
    6856:	f383 8812 	msr	BASEPRI_MAX, r3
    685a:	f3bf 8f6f 	isb	sy
		start_tx_locked(dev, data);
    685e:	4621      	mov	r1, r4
    6860:	4628      	mov	r0, r5
    6862:	f7ff fc96 	bl	6192 <start_tx_locked>
	__asm__ volatile(
    6866:	f386 8811 	msr	BASEPRI, r6
    686a:	f3bf 8f6f 	isb	sy
		return;
    686e:	e7dd      	b.n	682c <txstopped_isr+0xa0>
			data->async->tx_cache_offset += amount;
    6870:	69da      	ldr	r2, [r3, #28]
    6872:	4432      	add	r2, r6
    6874:	61da      	str	r2, [r3, #28]
			if (setup_tx_cache(data)) {
    6876:	4620      	mov	r0, r4
    6878:	f7ff fe8d 	bl	6596 <setup_tx_cache>
    687c:	b910      	cbnz	r0, 6884 <txstopped_isr+0xf8>
			amount = data->async->tx_cache_offset;
    687e:	68e3      	ldr	r3, [r4, #12]
    6880:	69de      	ldr	r6, [r3, #28]
    6882:	e7b2      	b.n	67ea <txstopped_isr+0x5e>
	__asm__ volatile(
    6884:	f04f 0320 	mov.w	r3, #32
    6888:	f3ef 8611 	mrs	r6, BASEPRI
    688c:	f383 8812 	msr	BASEPRI_MAX, r3
    6890:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    6894:	4621      	mov	r1, r4
    6896:	4628      	mov	r0, r5
    6898:	f7ff fc7b 	bl	6192 <start_tx_locked>
	__asm__ volatile(
    689c:	f386 8811 	msr	BASEPRI, r6
    68a0:	f3bf 8f6f 	isb	sy
				return;
    68a4:	e7c2      	b.n	682c <txstopped_isr+0xa0>

000068a6 <rxto_isr>:
{
    68a6:	b570      	push	{r4, r5, r6, lr}
    68a8:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    68aa:	6846      	ldr	r6, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    68ac:	6905      	ldr	r5, [r0, #16]
	rx_buf_release(dev, &data->async->rx_buf);
    68ae:	68e9      	ldr	r1, [r5, #12]
    68b0:	3158      	adds	r1, #88	; 0x58
    68b2:	f7ff fca9 	bl	6208 <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    68b6:	68e9      	ldr	r1, [r5, #12]
    68b8:	3164      	adds	r1, #100	; 0x64
    68ba:	4620      	mov	r0, r4
    68bc:	f7ff fca4 	bl	6208 <rx_buf_release>
	if (data->async->rx_enabled) {
    68c0:	68eb      	ldr	r3, [r5, #12]
    68c2:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
    68c6:	b152      	cbz	r2, 68de <rxto_isr+0x38>
		data->async->rx_enabled = false;
    68c8:	2200      	movs	r2, #0
    68ca:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    68ce:	6873      	ldr	r3, [r6, #4]
    68d0:	f013 0f10 	tst.w	r3, #16
    68d4:	d109      	bne.n	68ea <rxto_isr+0x44>
	notify_rx_disable(dev);
    68d6:	4620      	mov	r0, r4
    68d8:	f7ff fcad 	bl	6236 <notify_rx_disable>
}
    68dc:	bd70      	pop	{r4, r5, r6, pc}
		(void)rx_flush(dev, NULL, 0);
    68de:	2200      	movs	r2, #0
    68e0:	4611      	mov	r1, r2
    68e2:	4620      	mov	r0, r4
    68e4:	f7ff feec 	bl	66c0 <rx_flush>
    68e8:	e7f1      	b.n	68ce <rxto_isr+0x28>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    68ea:	2102      	movs	r1, #2
    68ec:	4620      	mov	r0, r4
    68ee:	f7ff ff24 	bl	673a <async_uart_release>
    68f2:	e7f0      	b.n	68d6 <rxto_isr+0x30>

000068f4 <uarte_nrfx_isr_async>:
{
    68f4:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    68f6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    68f8:	681c      	ldr	r4, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    68fa:	6902      	ldr	r2, [r0, #16]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    68fc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
	if (!HW_RX_COUNTING_ENABLED(data)
    6900:	bb5b      	cbnz	r3, 695a <uarte_nrfx_isr_async+0x66>
    6902:	4605      	mov	r5, r0
    6904:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    6908:	bb9b      	cbnz	r3, 6972 <uarte_nrfx_isr_async+0x7e>
    690a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    690e:	b123      	cbz	r3, 691a <uarte_nrfx_isr_async+0x26>
    return p_reg->INTENSET & mask;
    6910:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    6914:	f013 0f10 	tst.w	r3, #16
    6918:	d133      	bne.n	6982 <uarte_nrfx_isr_async+0x8e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    691a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    691e:	b113      	cbz	r3, 6926 <uarte_nrfx_isr_async+0x32>
    6920:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    6924:	b3b3      	cbz	r3, 6994 <uarte_nrfx_isr_async+0xa0>
    6926:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    692a:	b113      	cbz	r3, 6932 <uarte_nrfx_isr_async+0x3e>
    692c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    6930:	b3c3      	cbz	r3, 69a4 <uarte_nrfx_isr_async+0xb0>
    6932:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    6936:	b123      	cbz	r3, 6942 <uarte_nrfx_isr_async+0x4e>
    return p_reg->INTENSET & mask;
    6938:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    693c:	f413 7f80 	tst.w	r3, #256	; 0x100
    6940:	d138      	bne.n	69b4 <uarte_nrfx_isr_async+0xc0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6942:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    6946:	b19b      	cbz	r3, 6970 <uarte_nrfx_isr_async+0x7c>
    return p_reg->INTENSET & mask;
    6948:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    694c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    6950:	d00e      	beq.n	6970 <uarte_nrfx_isr_async+0x7c>
		txstopped_isr(dev);
    6952:	4628      	mov	r0, r5
    6954:	f7ff ff1a 	bl	678c <txstopped_isr>
    6958:	e00a      	b.n	6970 <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    695a:	2300      	movs	r3, #0
    695c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    6960:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    6964:	68d2      	ldr	r2, [r2, #12]
    6966:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
    696a:	3301      	adds	r3, #1
    696c:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
}
    6970:	bd38      	pop	{r3, r4, r5, pc}
    6972:	2300      	movs	r3, #0
    6974:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    6978:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
		error_isr(dev);
    697c:	f7ff fd19 	bl	63b2 <error_isr>
    6980:	e7c3      	b.n	690a <uarte_nrfx_isr_async+0x16>
    6982:	2300      	movs	r3, #0
    6984:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    6988:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
		endrx_isr(dev);
    698c:	4628      	mov	r0, r5
    698e:	f7ff fda5 	bl	64dc <endrx_isr>
    6992:	e7c2      	b.n	691a <uarte_nrfx_isr_async+0x26>
    6994:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    6998:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
		rxstarted_isr(dev);
    699c:	4628      	mov	r0, r5
    699e:	f7fb fde7 	bl	2570 <rxstarted_isr>
    69a2:	e7c0      	b.n	6926 <uarte_nrfx_isr_async+0x32>
    69a4:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
    69a8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
		rxto_isr(dev);
    69ac:	4628      	mov	r0, r5
    69ae:	f7ff ff7a 	bl	68a6 <rxto_isr>
    69b2:	e7be      	b.n	6932 <uarte_nrfx_isr_async+0x3e>
		endtx_isr(dev);
    69b4:	4628      	mov	r0, r5
    69b6:	f7ff fb13 	bl	5fe0 <endtx_isr>
    69ba:	e7c2      	b.n	6942 <uarte_nrfx_isr_async+0x4e>

000069bc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    69bc:	4770      	bx	lr

000069be <counter_sub>:
	return (a - b) & COUNTER_MAX;
    69be:	1a40      	subs	r0, r0, r1
}
    69c0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    69c4:	4770      	bx	lr

000069c6 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    69c6:	f100 0350 	add.w	r3, r0, #80	; 0x50
    69ca:	009b      	lsls	r3, r3, #2
    69cc:	b29b      	uxth	r3, r3
    69ce:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    69d2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    69d6:	2200      	movs	r2, #0
    69d8:	601a      	str	r2, [r3, #0]
    69da:	681b      	ldr	r3, [r3, #0]
}
    69dc:	4770      	bx	lr

000069de <absolute_time_to_cc>:
}
    69de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    69e2:	4770      	bx	lr

000069e4 <full_int_lock>:
	__asm__ volatile(
    69e4:	f04f 0320 	mov.w	r3, #32
    69e8:	f3ef 8011 	mrs	r0, BASEPRI
    69ec:	f383 8812 	msr	BASEPRI_MAX, r3
    69f0:	f3bf 8f6f 	isb	sy
}
    69f4:	4770      	bx	lr

000069f6 <full_int_unlock>:
	__asm__ volatile(
    69f6:	f380 8811 	msr	BASEPRI, r0
    69fa:	f3bf 8f6f 	isb	sy
}
    69fe:	4770      	bx	lr

00006a00 <set_absolute_alarm>:
{
    6a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a02:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    6a04:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    6a08:	f7fb fe58 	bl	26bc <get_comparator>
    6a0c:	4607      	mov	r7, r0
    6a0e:	e019      	b.n	6a44 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    6a10:	2013      	movs	r0, #19
    6a12:	f000 fd48 	bl	74a6 <z_impl_k_busy_wait>
}
    6a16:	e022      	b.n	6a5e <set_absolute_alarm+0x5e>
		event_clear(chan);
    6a18:	4630      	mov	r0, r6
    6a1a:	f7ff ffd4 	bl	69c6 <event_clear>
		event_enable(chan);
    6a1e:	4630      	mov	r0, r6
    6a20:	f7fb fe54 	bl	26cc <event_enable>
		set_comparator(chan, cc_val);
    6a24:	4629      	mov	r1, r5
    6a26:	4630      	mov	r0, r6
    6a28:	f7fb fe3e 	bl	26a8 <set_comparator>
		now2 = counter();
    6a2c:	f7fb fe62 	bl	26f4 <counter>
	} while ((now2 != now) &&
    6a30:	4284      	cmp	r4, r0
    6a32:	d01e      	beq.n	6a72 <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    6a34:	1c81      	adds	r1, r0, #2
    6a36:	4628      	mov	r0, r5
    6a38:	f7ff ffc1 	bl	69be <counter_sub>
	} while ((now2 != now) &&
    6a3c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6a40:	d917      	bls.n	6a72 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    6a42:	462f      	mov	r7, r5
		now = counter();
    6a44:	f7fb fe56 	bl	26f4 <counter>
    6a48:	4604      	mov	r4, r0
		set_comparator(chan, now);
    6a4a:	4601      	mov	r1, r0
    6a4c:	4630      	mov	r0, r6
    6a4e:	f7fb fe2b 	bl	26a8 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    6a52:	4621      	mov	r1, r4
    6a54:	4638      	mov	r0, r7
    6a56:	f7ff ffb2 	bl	69be <counter_sub>
    6a5a:	2801      	cmp	r0, #1
    6a5c:	d0d8      	beq.n	6a10 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    6a5e:	1ca7      	adds	r7, r4, #2
    6a60:	4639      	mov	r1, r7
    6a62:	4628      	mov	r0, r5
    6a64:	f7ff ffab 	bl	69be <counter_sub>
    6a68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6a6c:	d9d4      	bls.n	6a18 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    6a6e:	463d      	mov	r5, r7
    6a70:	e7d2      	b.n	6a18 <set_absolute_alarm+0x18>
}
    6a72:	4628      	mov	r0, r5
    6a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006a76 <compare_set>:
{
    6a76:	b5f0      	push	{r4, r5, r6, r7, lr}
    6a78:	b083      	sub	sp, #12
    6a7a:	4604      	mov	r4, r0
    6a7c:	4617      	mov	r7, r2
    6a7e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    6a80:	f7fb fe3e 	bl	2700 <compare_int_lock>
    6a84:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    6a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6a88:	9301      	str	r3, [sp, #4]
    6a8a:	9b08      	ldr	r3, [sp, #32]
    6a8c:	9300      	str	r3, [sp, #0]
    6a8e:	463a      	mov	r2, r7
    6a90:	462b      	mov	r3, r5
    6a92:	4620      	mov	r0, r4
    6a94:	f7fb ff10 	bl	28b8 <compare_set_nolocks>
    6a98:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    6a9a:	4631      	mov	r1, r6
    6a9c:	4620      	mov	r0, r4
    6a9e:	f7fb fe87 	bl	27b0 <compare_int_unlock>
}
    6aa2:	4628      	mov	r0, r5
    6aa4:	b003      	add	sp, #12
    6aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006aa8 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6aa8:	b410      	push	{r4}
	*state = &config->states[0];
    6aaa:	6843      	ldr	r3, [r0, #4]
    6aac:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    6aae:	e001      	b.n	6ab4 <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    6ab0:	3408      	adds	r4, #8
    6ab2:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    6ab4:	6814      	ldr	r4, [r2, #0]
    6ab6:	7a03      	ldrb	r3, [r0, #8]
    6ab8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    6abc:	3b01      	subs	r3, #1
    6abe:	f8d0 c004 	ldr.w	ip, [r0, #4]
    6ac2:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    6ac6:	429c      	cmp	r4, r3
    6ac8:	d804      	bhi.n	6ad4 <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    6aca:	7963      	ldrb	r3, [r4, #5]
    6acc:	428b      	cmp	r3, r1
    6ace:	d1ef      	bne.n	6ab0 <pinctrl_lookup_state+0x8>
			return 0;
    6ad0:	2000      	movs	r0, #0
    6ad2:	e001      	b.n	6ad8 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    6ad4:	f06f 0001 	mvn.w	r0, #1
}
    6ad8:	bc10      	pop	{r4}
    6ada:	4770      	bx	lr

00006adc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6adc:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    6ade:	2000      	movs	r0, #0
    6ae0:	f7fe ff53 	bl	598a <sys_arch_reboot>

00006ae4 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    6ae4:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    6ae6:	f7fe f915 	bl	4d14 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    6aea:	bd08      	pop	{r3, pc}

00006aec <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    6aec:	b510      	push	{r4, lr}
    6aee:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    6af0:	f7fa fac8 	bl	1084 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    6af4:	f7fa fbda 	bl	12ac <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    6af8:	4620      	mov	r0, r4
    6afa:	f7ff fff3 	bl	6ae4 <hw_cc3xx_init_internal>
	return res;
}
    6afe:	bd10      	pop	{r4, pc}

00006b00 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6b00:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6b04:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6b08:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6b0c:	2a07      	cmp	r2, #7
    6b0e:	d001      	beq.n	6b14 <nrf53_errata_42+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6b10:	2000      	movs	r0, #0
    6b12:	4770      	bx	lr
                    switch(var2)
    6b14:	3b02      	subs	r3, #2
    6b16:	2b00      	cmp	r3, #0
    6b18:	d804      	bhi.n	6b24 <nrf53_errata_42+0x24>
    6b1a:	e8df f003 	tbb	[pc, r3]
    6b1e:	01          	.byte	0x01
    6b1f:	00          	.byte	0x00
    6b20:	2001      	movs	r0, #1
    6b22:	4770      	bx	lr
                            return false;
    6b24:	2000      	movs	r0, #0
    #endif
}
    6b26:	4770      	bx	lr

00006b28 <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6b28:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6b2c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6b30:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6b34:	2a07      	cmp	r2, #7
    6b36:	d001      	beq.n	6b3c <nrf53_errata_46+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6b38:	2000      	movs	r0, #0
    6b3a:	4770      	bx	lr
                    switch(var2)
    6b3c:	2b04      	cmp	r3, #4
    6b3e:	d007      	beq.n	6b50 <nrf53_errata_46+0x28>
    6b40:	d808      	bhi.n	6b54 <nrf53_errata_46+0x2c>
    6b42:	3b02      	subs	r3, #2
    6b44:	2b01      	cmp	r3, #1
    6b46:	d801      	bhi.n	6b4c <nrf53_errata_46+0x24>
    6b48:	2001      	movs	r0, #1
    #endif
}
    6b4a:	4770      	bx	lr
                            return false;
    6b4c:	2000      	movs	r0, #0
    6b4e:	4770      	bx	lr
                            return false;
    6b50:	2000      	movs	r0, #0
    6b52:	4770      	bx	lr
                            return false;
    6b54:	2000      	movs	r0, #0
    6b56:	4770      	bx	lr

00006b58 <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6b58:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6b5c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6b60:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6b64:	2a07      	cmp	r2, #7
    6b66:	d001      	beq.n	6b6c <nrf53_errata_49+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6b68:	2000      	movs	r0, #0
    6b6a:	4770      	bx	lr
                    switch(var2)
    6b6c:	3b02      	subs	r3, #2
    6b6e:	2b00      	cmp	r3, #0
    6b70:	d804      	bhi.n	6b7c <nrf53_errata_49+0x24>
    6b72:	e8df f003 	tbb	[pc, r3]
    6b76:	01          	.byte	0x01
    6b77:	00          	.byte	0x00
    6b78:	2001      	movs	r0, #1
    6b7a:	4770      	bx	lr
                            return false;
    6b7c:	2000      	movs	r0, #0
    #endif
}
    6b7e:	4770      	bx	lr

00006b80 <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6b80:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6b84:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6b88:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6b8c:	2a07      	cmp	r2, #7
    6b8e:	d001      	beq.n	6b94 <nrf53_errata_55+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    6b90:	2000      	movs	r0, #0
    6b92:	4770      	bx	lr
                            return true;
    6b94:	2001      	movs	r0, #1
    #endif
}
    6b96:	4770      	bx	lr

00006b98 <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6b98:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6b9c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6ba0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6ba4:	2a07      	cmp	r2, #7
    6ba6:	d001      	beq.n	6bac <nrf53_errata_64+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6ba8:	2000      	movs	r0, #0
    6baa:	4770      	bx	lr
                    switch(var2)
    6bac:	3b02      	subs	r3, #2
    6bae:	2b00      	cmp	r3, #0
    6bb0:	d804      	bhi.n	6bbc <nrf53_errata_64+0x24>
    6bb2:	e8df f003 	tbb	[pc, r3]
    6bb6:	01          	.byte	0x01
    6bb7:	00          	.byte	0x00
    6bb8:	2001      	movs	r0, #1
    6bba:	4770      	bx	lr
                            return false;
    6bbc:	2000      	movs	r0, #0
    #endif
}
    6bbe:	4770      	bx	lr

00006bc0 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6bc0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6bc4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6bc8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6bcc:	2a07      	cmp	r2, #7
    6bce:	d001      	beq.n	6bd4 <nrf53_errata_69+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6bd0:	2000      	movs	r0, #0
    6bd2:	4770      	bx	lr
                    switch(var2)
    6bd4:	3b02      	subs	r3, #2
    6bd6:	2b00      	cmp	r3, #0
    6bd8:	d804      	bhi.n	6be4 <nrf53_errata_69+0x24>
    6bda:	e8df f003 	tbb	[pc, r3]
    6bde:	01          	.byte	0x01
    6bdf:	00          	.byte	0x00
    6be0:	2001      	movs	r0, #1
    6be2:	4770      	bx	lr
                            return false;
    6be4:	2000      	movs	r0, #0
    #endif
}
    6be6:	4770      	bx	lr

00006be8 <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6be8:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6bec:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6bf0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6bf4:	2a07      	cmp	r2, #7
    6bf6:	d001      	beq.n	6bfc <nrf53_errata_97+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    6bf8:	2000      	movs	r0, #0
    6bfa:	4770      	bx	lr
                    switch(var2)
    6bfc:	3b02      	subs	r3, #2
    6bfe:	2b00      	cmp	r3, #0
    6c00:	d804      	bhi.n	6c0c <nrf53_errata_97+0x24>
    6c02:	e8df f003 	tbb	[pc, r3]
    6c06:	01          	.byte	0x01
    6c07:	00          	.byte	0x00
    6c08:	2001      	movs	r0, #1
    6c0a:	4770      	bx	lr
                            return false;
    6c0c:	2000      	movs	r0, #0
    #endif
}
    6c0e:	4770      	bx	lr

00006c10 <nrf53_errata_140>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6c10:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6c14:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6c18:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6c1c:	2a07      	cmp	r2, #7
    6c1e:	d001      	beq.n	6c24 <nrf53_errata_140+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    6c20:	2000      	movs	r0, #0
    6c22:	4770      	bx	lr
                            return true;
    6c24:	2001      	movs	r0, #1
    #endif
}
    6c26:	4770      	bx	lr

00006c28 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    6c28:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    6c2a:	4780      	blx	r0
}
    6c2c:	bd08      	pop	{r3, pc}

00006c2e <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    6c2e:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    6c30:	f000 fc39 	bl	74a6 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    6c34:	bd08      	pop	{r3, pc}

00006c36 <nrf_clock_is_running>:
    switch (domain)
    6c36:	2903      	cmp	r1, #3
    6c38:	d82f      	bhi.n	6c9a <nrf_clock_is_running+0x64>
    6c3a:	e8df f001 	tbb	[pc, r1]
    6c3e:	0f02      	.short	0x0f02
    6c40:	291c      	.short	0x291c
            if (p_clk_src != NULL)
    6c42:	b122      	cbz	r2, 6c4e <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6c44:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    6c48:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6c4c:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6c4e:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    6c52:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6c56:	d122      	bne.n	6c9e <nrf_clock_is_running+0x68>
    return false;
    6c58:	2000      	movs	r0, #0
    6c5a:	4770      	bx	lr
            if (p_clk_src != NULL)
    6c5c:	b122      	cbz	r2, 6c68 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6c5e:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6c62:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6c66:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6c68:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6c6c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6c70:	d117      	bne.n	6ca2 <nrf_clock_is_running+0x6c>
    return false;
    6c72:	2000      	movs	r0, #0
    6c74:	4770      	bx	lr
            if (p_clk_src != NULL)
    6c76:	b122      	cbz	r2, 6c82 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    6c78:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    6c7c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6c80:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    6c82:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    6c86:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6c8a:	d10c      	bne.n	6ca6 <nrf_clock_is_running+0x70>
    return false;
    6c8c:	2000      	movs	r0, #0
    6c8e:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    6c90:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    6c94:	f3c0 4000 	ubfx	r0, r0, #16, #1
    6c98:	4770      	bx	lr
    switch (domain)
    6c9a:	2000      	movs	r0, #0
    6c9c:	4770      	bx	lr
                return true;
    6c9e:	2001      	movs	r0, #1
    6ca0:	4770      	bx	lr
                return true;
    6ca2:	2001      	movs	r0, #1
    6ca4:	4770      	bx	lr
                return true;
    6ca6:	2001      	movs	r0, #1
}
    6ca8:	4770      	bx	lr

00006caa <clock_initial_lfclksrc_get>:
}
    6caa:	2001      	movs	r0, #1
    6cac:	4770      	bx	lr

00006cae <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    6cae:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6cb0:	2005      	movs	r0, #5
    6cb2:	f7fa fb4f 	bl	1354 <arch_irq_is_enabled>
    6cb6:	b100      	cbz	r0, 6cba <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    6cb8:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6cba:	2005      	movs	r0, #5
    6cbc:	f7fe fe21 	bl	5902 <arch_irq_enable>
}
    6cc0:	e7fa      	b.n	6cb8 <nrfx_power_clock_irq_init+0xa>

00006cc2 <clock_stop>:
{
    6cc2:	b570      	push	{r4, r5, r6, lr}
    6cc4:	b082      	sub	sp, #8
    6cc6:	4606      	mov	r6, r0
    switch (domain)
    6cc8:	2803      	cmp	r0, #3
    6cca:	d855      	bhi.n	6d78 <clock_stop+0xb6>
    6ccc:	e8df f000 	tbb	[pc, r0]
    6cd0:	31231702 	.word	0x31231702
    p_reg->INTENCLR = mask;
    6cd4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6cd8:	2202      	movs	r2, #2
    6cda:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6cde:	2200      	movs	r2, #0
    6ce0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6ce4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ce8:	2201      	movs	r2, #1
    6cea:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6cec:	2301      	movs	r3, #1
    6cee:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6cf2:	429e      	cmp	r6, r3
    6cf4:	d02b      	beq.n	6d4e <clock_stop+0x8c>
    6cf6:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6cf8:	f242 7410 	movw	r4, #10000	; 0x2710
    6cfc:	e02f      	b.n	6d5e <clock_stop+0x9c>
    p_reg->INTENCLR = mask;
    6cfe:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6d02:	2201      	movs	r2, #1
    6d04:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d08:	2100      	movs	r1, #0
    6d0a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    6d0e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d12:	605a      	str	r2, [r3, #4]
}
    6d14:	e7ea      	b.n	6cec <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    6d16:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
    6d1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d22:	2200      	movs	r2, #0
    6d24:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    6d28:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d2c:	2201      	movs	r2, #1
    6d2e:	625a      	str	r2, [r3, #36]	; 0x24
}
    6d30:	e7dc      	b.n	6cec <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    6d32:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6d36:	f44f 7280 	mov.w	r2, #256	; 0x100
    6d3a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d3e:	2200      	movs	r2, #0
    6d40:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    6d44:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d48:	2201      	movs	r2, #1
    6d4a:	61da      	str	r2, [r3, #28]
}
    6d4c:	e7ce      	b.n	6cec <clock_stop+0x2a>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6d4e:	f10d 0507 	add.w	r5, sp, #7
    6d52:	e7d1      	b.n	6cf8 <clock_stop+0x36>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6d54:	2001      	movs	r0, #1
    6d56:	f7ff ff6a 	bl	6c2e <nrfx_busy_wait>
    6d5a:	3c01      	subs	r4, #1
    6d5c:	d00c      	beq.n	6d78 <clock_stop+0xb6>
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    6d5e:	462a      	mov	r2, r5
    6d60:	4631      	mov	r1, r6
    6d62:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    6d66:	f7ff ff66 	bl	6c36 <nrf_clock_is_running>
    6d6a:	b128      	cbz	r0, 6d78 <clock_stop+0xb6>
    6d6c:	2d00      	cmp	r5, #0
    6d6e:	d0f1      	beq.n	6d54 <clock_stop+0x92>
    6d70:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d74:	2b01      	cmp	r3, #1
    6d76:	d0ed      	beq.n	6d54 <clock_stop+0x92>
}
    6d78:	b002      	add	sp, #8
    6d7a:	bd70      	pop	{r4, r5, r6, pc}

00006d7c <clock_lfclksrc_tweak>:
{
    6d7c:	b538      	push	{r3, r4, r5, lr}
    6d7e:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    6d80:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6d82:	2b02      	cmp	r3, #2
    6d84:	d006      	beq.n	6d94 <clock_lfclksrc_tweak+0x18>
    6d86:	2b01      	cmp	r3, #1
    6d88:	d000      	beq.n	6d8c <clock_lfclksrc_tweak+0x10>
    6d8a:	2300      	movs	r3, #0
    if (!is_correct_clk)
    6d8c:	461d      	mov	r5, r3
    6d8e:	b11b      	cbz	r3, 6d98 <clock_lfclksrc_tweak+0x1c>
}
    6d90:	4628      	mov	r0, r5
    6d92:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6d94:	2301      	movs	r3, #1
    6d96:	e7f9      	b.n	6d8c <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6d98:	2000      	movs	r0, #0
    6d9a:	f7ff ff92 	bl	6cc2 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    6d9e:	f7ff ff84 	bl	6caa <clock_initial_lfclksrc_get>
    6da2:	7020      	strb	r0, [r4, #0]
    6da4:	e7f4      	b.n	6d90 <clock_lfclksrc_tweak+0x14>

00006da6 <nrfx_clock_enable>:
{
    6da6:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    6da8:	f7ff ff81 	bl	6cae <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    6dac:	f7ff ff7d 	bl	6caa <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6db0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6db4:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    6db8:	2201      	movs	r2, #1
    6dba:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    6dbe:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    6dc2:	bd08      	pop	{r3, pc}

00006dc4 <nrfx_clock_start>:
    switch (domain)
    6dc4:	2803      	cmp	r0, #3
    6dc6:	d871      	bhi.n	6eac <nrfx_clock_start+0xe8>
    6dc8:	e8df f000 	tbb	[pc, r0]
    6dcc:	62544802 	.word	0x62544802
{
    6dd0:	b500      	push	{lr}
    6dd2:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6dd4:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    6dd8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6ddc:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6de0:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6de4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    6de8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6dec:	d11d      	bne.n	6e2a <nrfx_clock_start+0x66>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6dee:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6df2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6df6:	f013 0f01 	tst.w	r3, #1
    6dfa:	d11b      	bne.n	6e34 <nrfx_clock_start+0x70>
                    lfclksrc = clock_initial_lfclksrc_get();
    6dfc:	f7ff ff55 	bl	6caa <clock_initial_lfclksrc_get>
    6e00:	f88d 0007 	strb.w	r0, [sp, #7]
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
    6e04:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
    6e08:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6e0c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e10:	2200      	movs	r2, #0
    6e12:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6e16:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    6e1a:	2202      	movs	r2, #2
    6e1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e20:	2201      	movs	r2, #1
    6e22:	609a      	str	r2, [r3, #8]
}
    6e24:	b003      	add	sp, #12
    6e26:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    6e2a:	f10d 0007 	add.w	r0, sp, #7
    6e2e:	f7ff ffa5 	bl	6d7c <clock_lfclksrc_tweak>
    6e32:	e7e7      	b.n	6e04 <nrfx_clock_start+0x40>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6e34:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6e38:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6e3c:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    6e40:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    6e44:	f10d 0007 	add.w	r0, sp, #7
    6e48:	f7ff ff98 	bl	6d7c <clock_lfclksrc_tweak>
    6e4c:	2800      	cmp	r0, #0
    6e4e:	d0d9      	beq.n	6e04 <nrfx_clock_start+0x40>
    p_reg->INTENSET = mask;
    6e50:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6e54:	2202      	movs	r2, #2
    6e56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    6e5a:	e7e3      	b.n	6e24 <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e5c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6e60:	2200      	movs	r2, #0
    6e62:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6e66:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6e6a:	2201      	movs	r2, #1
    6e6c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e70:	601a      	str	r2, [r3, #0]
}
    6e72:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e74:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6e78:	2200      	movs	r2, #0
    6e7a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    6e7e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    6e82:	f44f 7200 	mov.w	r2, #512	; 0x200
    6e86:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e8a:	2201      	movs	r2, #1
    6e8c:	621a      	str	r2, [r3, #32]
}
    6e8e:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6e90:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6e94:	2200      	movs	r2, #0
    6e96:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    6e9a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    6e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6ea2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ea6:	2201      	movs	r2, #1
    6ea8:	619a      	str	r2, [r3, #24]
}
    6eaa:	4770      	bx	lr
    6eac:	4770      	bx	lr

00006eae <nrfx_clock_stop>:
{
    6eae:	b508      	push	{r3, lr}
    clock_stop(domain);
    6eb0:	f7ff ff07 	bl	6cc2 <clock_stop>
}
    6eb4:	bd08      	pop	{r3, pc}

00006eb6 <nrf_gpiote_event_configure>:
{
    6eb6:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6eb8:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    6ebc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6ec0:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    6ec4:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    6ec8:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6ecc:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6ed0:	0212      	lsls	r2, r2, #8
    6ed2:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    6ed6:	041b      	lsls	r3, r3, #16
    6ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6edc:	431a      	orrs	r2, r3
    6ede:	4314      	orrs	r4, r2
    6ee0:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    6ee4:	bc10      	pop	{r4}
    6ee6:	4770      	bx	lr

00006ee8 <nrf_gpiote_task_configure>:
{
    6ee8:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6eea:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    6eee:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6ef2:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    6ef6:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    6efa:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6efe:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6f02:	0212      	lsls	r2, r2, #8
    6f04:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6f08:	041b      	lsls	r3, r3, #16
    6f0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6f0e:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6f10:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6f14:	051b      	lsls	r3, r3, #20
    6f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6f1a:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6f1c:	4314      	orrs	r4, r2
    6f1e:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    6f22:	bc10      	pop	{r4}
    6f24:	4770      	bx	lr

00006f26 <nrf_gpio_cfg_sense_set>:
{
    6f26:	b500      	push	{lr}
    6f28:	b085      	sub	sp, #20
    6f2a:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6f2e:	f10d 030f 	add.w	r3, sp, #15
    6f32:	9301      	str	r3, [sp, #4]
    6f34:	2100      	movs	r1, #0
    6f36:	9100      	str	r1, [sp, #0]
    6f38:	460b      	mov	r3, r1
    6f3a:	460a      	mov	r2, r1
    6f3c:	f7fc f8de 	bl	30fc <nrf_gpio_reconfigure>
}
    6f40:	b005      	add	sp, #20
    6f42:	f85d fb04 	ldr.w	pc, [sp], #4

00006f46 <pin_is_task_output>:
{
    6f46:	b510      	push	{r4, lr}
    6f48:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6f4a:	f7fc f989 	bl	3260 <pin_is_output>
    6f4e:	b128      	cbz	r0, 6f5c <pin_is_task_output+0x16>
    6f50:	4620      	mov	r0, r4
    6f52:	f7fc f96f 	bl	3234 <pin_in_use_by_te>
    6f56:	b118      	cbz	r0, 6f60 <pin_is_task_output+0x1a>
    6f58:	2001      	movs	r0, #1
    6f5a:	e000      	b.n	6f5e <pin_is_task_output+0x18>
    6f5c:	2000      	movs	r0, #0
}
    6f5e:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6f60:	2000      	movs	r0, #0
    6f62:	e7fc      	b.n	6f5e <pin_is_task_output+0x18>

00006f64 <pin_is_input>:
{
    6f64:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    6f66:	f7fc f97b 	bl	3260 <pin_is_output>
    6f6a:	f080 0001 	eor.w	r0, r0, #1
}
    6f6e:	b2c0      	uxtb	r0, r0
    6f70:	bd08      	pop	{r3, pc}

00006f72 <gpiote_polarity_to_trigger>:
}
    6f72:	4770      	bx	lr

00006f74 <gpiote_trigger_to_polarity>:
}
    6f74:	4770      	bx	lr

00006f76 <is_level>:
}
    6f76:	2803      	cmp	r0, #3
    6f78:	bf94      	ite	ls
    6f7a:	2000      	movls	r0, #0
    6f7c:	2001      	movhi	r0, #1
    6f7e:	4770      	bx	lr

00006f80 <latch_pending_read_and_check>:
{
    6f80:	b510      	push	{r4, lr}
    6f82:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    6f84:	4602      	mov	r2, r0
    6f86:	2102      	movs	r1, #2
    6f88:	2000      	movs	r0, #0
    6f8a:	f7fc f929 	bl	31e0 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6f8e:	2300      	movs	r3, #0
    6f90:	2b01      	cmp	r3, #1
    6f92:	d804      	bhi.n	6f9e <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    6f94:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    6f98:	b91a      	cbnz	r2, 6fa2 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6f9a:	3301      	adds	r3, #1
    6f9c:	e7f8      	b.n	6f90 <latch_pending_read_and_check+0x10>
    return false;
    6f9e:	2000      	movs	r0, #0
}
    6fa0:	bd10      	pop	{r4, pc}
            return true;
    6fa2:	2001      	movs	r0, #1
    6fa4:	e7fc      	b.n	6fa0 <latch_pending_read_and_check+0x20>

00006fa6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6fa6:	b160      	cbz	r0, 6fc2 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6fa8:	68c3      	ldr	r3, [r0, #12]
    6faa:	785a      	ldrb	r2, [r3, #1]
    6fac:	f012 0f01 	tst.w	r2, #1
    6fb0:	d003      	beq.n	6fba <z_device_is_ready+0x14>
    6fb2:	781b      	ldrb	r3, [r3, #0]
    6fb4:	b11b      	cbz	r3, 6fbe <z_device_is_ready+0x18>
    6fb6:	2000      	movs	r0, #0
    6fb8:	4770      	bx	lr
    6fba:	2000      	movs	r0, #0
    6fbc:	4770      	bx	lr
    6fbe:	2001      	movs	r0, #1
    6fc0:	4770      	bx	lr
		return false;
    6fc2:	2000      	movs	r0, #0
}
    6fc4:	4770      	bx	lr

00006fc6 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6fc8:	4605      	mov	r5, r0
    6fca:	460e      	mov	r6, r1
	__asm__ volatile(
    6fcc:	f04f 0320 	mov.w	r3, #32
    6fd0:	f3ef 8711 	mrs	r7, BASEPRI
    6fd4:	f383 8812 	msr	BASEPRI_MAX, r3
    6fd8:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6fdc:	f7fd fc20 	bl	4820 <z_impl_z_current_get>
    6fe0:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    6fe2:	4631      	mov	r1, r6
    6fe4:	4628      	mov	r0, r5
    6fe6:	f7ff fd79 	bl	6adc <k_sys_fatal_error_handler>
	__asm__ volatile(
    6fea:	f387 8811 	msr	BASEPRI, r7
    6fee:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6ff2:	4620      	mov	r0, r4
    6ff4:	f7fa fc6c 	bl	18d0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006ffa <z_early_memset>:
{
    6ffa:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    6ffc:	f7fe fd97 	bl	5b2e <memset>
}
    7000:	bd08      	pop	{r3, pc}

00007002 <z_early_memcpy>:
{
    7002:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    7004:	f7fe fd64 	bl	5ad0 <memcpy>
}
    7008:	bd08      	pop	{r3, pc}

0000700a <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    700a:	68c2      	ldr	r2, [r0, #12]
    700c:	6903      	ldr	r3, [r0, #16]
    700e:	431a      	orrs	r2, r3
    7010:	f012 0203 	ands.w	r2, r2, #3
    7014:	d10d      	bne.n	7032 <create_free_list+0x28>
	slab->free_list = NULL;
    7016:	2100      	movs	r1, #0
    7018:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    701a:	e005      	b.n	7028 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    701c:	6941      	ldr	r1, [r0, #20]
    701e:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    7020:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    7022:	68c1      	ldr	r1, [r0, #12]
    7024:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    7026:	3201      	adds	r2, #1
    7028:	6881      	ldr	r1, [r0, #8]
    702a:	4291      	cmp	r1, r2
    702c:	d8f6      	bhi.n	701c <create_free_list+0x12>
	return 0;
    702e:	2000      	movs	r0, #0
    7030:	4770      	bx	lr
		return -EINVAL;
    7032:	f06f 0015 	mvn.w	r0, #21
}
    7036:	4770      	bx	lr

00007038 <k_mem_slab_init>:
{
    7038:	b510      	push	{r4, lr}
    703a:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    703c:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    703e:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    7040:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    7042:	2300      	movs	r3, #0
    7044:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    7046:	f7ff ffe0 	bl	700a <create_free_list>
	if (rc < 0) {
    704a:	2800      	cmp	r0, #0
    704c:	db01      	blt.n	7052 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    704e:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    7050:	6064      	str	r4, [r4, #4]
}
    7052:	bd10      	pop	{r4, pc}

00007054 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    7054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7058:	4604      	mov	r4, r0
    705a:	460d      	mov	r5, r1
	__asm__ volatile(
    705c:	f04f 0320 	mov.w	r3, #32
    7060:	f3ef 8611 	mrs	r6, BASEPRI
    7064:	f383 8812 	msr	BASEPRI_MAX, r3
    7068:	f3bf 8f6f 	isb	sy
    706c:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    706e:	6943      	ldr	r3, [r0, #20]
    7070:	b16b      	cbz	r3, 708e <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    7072:	682b      	ldr	r3, [r5, #0]
    7074:	6962      	ldr	r2, [r4, #20]
    7076:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    7078:	682b      	ldr	r3, [r5, #0]
    707a:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    707c:	69a3      	ldr	r3, [r4, #24]
    707e:	3b01      	subs	r3, #1
    7080:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    7082:	f387 8811 	msr	BASEPRI, r7
    7086:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    708a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    708e:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7092:	f000 f963 	bl	735c <z_unpend_first_thread>
		if (pending_thread != NULL) {
    7096:	2800      	cmp	r0, #0
    7098:	d0eb      	beq.n	7072 <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    709a:	682a      	ldr	r2, [r5, #0]
    709c:	2100      	movs	r1, #0
    709e:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    70a2:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    70a4:	f000 f8a5 	bl	71f2 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    70a8:	4631      	mov	r1, r6
    70aa:	4640      	mov	r0, r8
    70ac:	f7fd f886 	bl	41bc <z_reschedule>
			return;
    70b0:	e7eb      	b.n	708a <k_mem_slab_free+0x36>

000070b2 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    70b2:	3207      	adds	r2, #7
    70b4:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    70b8:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    70bc:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    70c0:	2300      	movs	r3, #0
    70c2:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    70c6:	1888      	adds	r0, r1, r2
    70c8:	4770      	bx	lr

000070ca <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    70ca:	f3ef 8005 	mrs	r0, IPSR
}
    70ce:	3800      	subs	r0, #0
    70d0:	bf18      	it	ne
    70d2:	2001      	movne	r0, #1
    70d4:	4770      	bx	lr

000070d6 <z_impl_k_thread_start>:
{
    70d6:	b508      	push	{r3, lr}
	z_sched_start(thread);
    70d8:	f7fd f99a 	bl	4410 <z_sched_start>
}
    70dc:	bd08      	pop	{r3, pc}

000070de <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    70de:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    70e0:	2400      	movs	r4, #0
    70e2:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    70e4:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    70e6:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    70e8:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    70ea:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    70ec:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    70ee:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    70f0:	bc10      	pop	{r4}
    70f2:	4770      	bx	lr

000070f4 <z_pm_save_idle_exit>:
{
    70f4:	b508      	push	{r3, lr}
	pm_system_resume();
    70f6:	f7f9 fecb 	bl	e90 <pm_system_resume>
	sys_clock_idle_exit();
    70fa:	f7ff fc5f 	bl	69bc <sys_clock_idle_exit>
}
    70fe:	bd08      	pop	{r3, pc}

00007100 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    7100:	4288      	cmp	r0, r1
    7102:	da00      	bge.n	7106 <new_prio_for_inheritance+0x6>
    7104:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    7106:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    710a:	db01      	blt.n	7110 <new_prio_for_inheritance+0x10>
    710c:	4608      	mov	r0, r1
    710e:	4770      	bx	lr
    7110:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    7114:	4770      	bx	lr

00007116 <adjust_owner_prio>:
{
    7116:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    7118:	6880      	ldr	r0, [r0, #8]
    711a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    711e:	428b      	cmp	r3, r1
    7120:	d101      	bne.n	7126 <adjust_owner_prio+0x10>
	return false;
    7122:	2000      	movs	r0, #0
}
    7124:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    7126:	f7fd f9c9 	bl	44bc <z_set_prio>
    712a:	e7fb      	b.n	7124 <adjust_owner_prio+0xe>

0000712c <z_impl_k_mutex_init>:
{
    712c:	4603      	mov	r3, r0
	mutex->owner = NULL;
    712e:	2000      	movs	r0, #0
    7130:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    7132:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    7134:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    7136:	605b      	str	r3, [r3, #4]
}
    7138:	4770      	bx	lr

0000713a <thread_active_elsewhere>:
}
    713a:	2000      	movs	r0, #0
    713c:	4770      	bx	lr

0000713e <pended_on_thread>:
}
    713e:	6880      	ldr	r0, [r0, #8]
    7140:	4770      	bx	lr

00007142 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    7142:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    7146:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    714a:	4283      	cmp	r3, r0
    714c:	d001      	beq.n	7152 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    714e:	1ac0      	subs	r0, r0, r3
    7150:	4770      	bx	lr
	return 0;
    7152:	2000      	movs	r0, #0
}
    7154:	4770      	bx	lr

00007156 <z_unpend_thread_no_timeout>:
{
    7156:	b538      	push	{r3, r4, r5, lr}
    7158:	4605      	mov	r5, r0
	LOCKED(&sched_spinlock) {
    715a:	2300      	movs	r3, #0
	__asm__ volatile(
    715c:	f04f 0220 	mov.w	r2, #32
    7160:	f3ef 8411 	mrs	r4, BASEPRI
    7164:	f382 8812 	msr	BASEPRI_MAX, r2
    7168:	f3bf 8f6f 	isb	sy
    716c:	e007      	b.n	717e <z_unpend_thread_no_timeout+0x28>
		unpend_thread_no_timeout(thread);
    716e:	4628      	mov	r0, r5
    7170:	f000 f82a 	bl	71c8 <unpend_thread_no_timeout>
	__asm__ volatile(
    7174:	f384 8811 	msr	BASEPRI, r4
    7178:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    717c:	2301      	movs	r3, #1
    717e:	2b00      	cmp	r3, #0
    7180:	d0f5      	beq.n	716e <z_unpend_thread_no_timeout+0x18>
}
    7182:	bd38      	pop	{r3, r4, r5, pc}

00007184 <z_reschedule_irqlock>:
{
    7184:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7186:	4603      	mov	r3, r0
    7188:	b928      	cbnz	r0, 7196 <z_reschedule_irqlock+0x12>
    718a:	f3ef 8205 	mrs	r2, IPSR
    718e:	b912      	cbnz	r2, 7196 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    7190:	f7fa f90e 	bl	13b0 <arch_swap>
	return ret;
    7194:	e003      	b.n	719e <z_reschedule_irqlock+0x1a>
    7196:	f383 8811 	msr	BASEPRI, r3
    719a:	f3bf 8f6f 	isb	sy
}
    719e:	bd08      	pop	{r3, pc}

000071a0 <z_reschedule_unlocked>:
{
    71a0:	b508      	push	{r3, lr}
	__asm__ volatile(
    71a2:	f04f 0320 	mov.w	r3, #32
    71a6:	f3ef 8011 	mrs	r0, BASEPRI
    71aa:	f383 8812 	msr	BASEPRI_MAX, r3
    71ae:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    71b2:	f7ff ffe7 	bl	7184 <z_reschedule_irqlock>
}
    71b6:	bd08      	pop	{r3, pc}

000071b8 <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    71b8:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    71ba:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    71bc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    71be:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    71c0:	2300      	movs	r3, #0
    71c2:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    71c4:	604b      	str	r3, [r1, #4]
}
    71c6:	4770      	bx	lr

000071c8 <unpend_thread_no_timeout>:
{
    71c8:	b510      	push	{r4, lr}
    71ca:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    71cc:	f7ff ffb7 	bl	713e <pended_on_thread>
    71d0:	4621      	mov	r1, r4
    71d2:	f7ff fff1 	bl	71b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    71d6:	7b63      	ldrb	r3, [r4, #13]
    71d8:	f023 0302 	bic.w	r3, r3, #2
    71dc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    71de:	2300      	movs	r3, #0
    71e0:	60a3      	str	r3, [r4, #8]
}
    71e2:	bd10      	pop	{r4, pc}

000071e4 <z_priq_dumb_best>:
{
    71e4:	4603      	mov	r3, r0
	return list->head == list;
    71e6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    71e8:	4283      	cmp	r3, r0
    71ea:	d000      	beq.n	71ee <z_priq_dumb_best+0xa>
}
    71ec:	4770      	bx	lr
	struct k_thread *thread = NULL;
    71ee:	2000      	movs	r0, #0
	return thread;
    71f0:	e7fc      	b.n	71ec <z_priq_dumb_best+0x8>

000071f2 <z_ready_thread>:
{
    71f2:	b538      	push	{r3, r4, r5, lr}
    71f4:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    71f6:	2300      	movs	r3, #0
    71f8:	f04f 0220 	mov.w	r2, #32
    71fc:	f3ef 8511 	mrs	r5, BASEPRI
    7200:	f382 8812 	msr	BASEPRI_MAX, r2
    7204:	f3bf 8f6f 	isb	sy
    7208:	e004      	b.n	7214 <z_ready_thread+0x22>
	__asm__ volatile(
    720a:	f385 8811 	msr	BASEPRI, r5
    720e:	f3bf 8f6f 	isb	sy
    7212:	2301      	movs	r3, #1
    7214:	b943      	cbnz	r3, 7228 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    7216:	4620      	mov	r0, r4
    7218:	f7ff ff8f 	bl	713a <thread_active_elsewhere>
    721c:	2800      	cmp	r0, #0
    721e:	d1f4      	bne.n	720a <z_ready_thread+0x18>
			ready_thread(thread);
    7220:	4620      	mov	r0, r4
    7222:	f7fd f8b9 	bl	4398 <ready_thread>
    7226:	e7f0      	b.n	720a <z_ready_thread+0x18>
}
    7228:	bd38      	pop	{r3, r4, r5, pc}

0000722a <z_thread_timeout>:
{
    722a:	b570      	push	{r4, r5, r6, lr}
    722c:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    722e:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    7232:	2300      	movs	r3, #0
	__asm__ volatile(
    7234:	f04f 0220 	mov.w	r2, #32
    7238:	f3ef 8511 	mrs	r5, BASEPRI
    723c:	f382 8812 	msr	BASEPRI_MAX, r2
    7240:	f3bf 8f6f 	isb	sy
    7244:	e011      	b.n	726a <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7246:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    724a:	f023 0204 	bic.w	r2, r3, #4
    724e:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    7252:	f023 0314 	bic.w	r3, r3, #20
    7256:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    725a:	4630      	mov	r0, r6
    725c:	f7fd f89c 	bl	4398 <ready_thread>
	__asm__ volatile(
    7260:	f385 8811 	msr	BASEPRI, r5
    7264:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7268:	2301      	movs	r3, #1
    726a:	b963      	cbnz	r3, 7286 <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    726c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    7270:	f013 0f28 	tst.w	r3, #40	; 0x28
    7274:	d1f4      	bne.n	7260 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    7276:	f854 3c10 	ldr.w	r3, [r4, #-16]
    727a:	2b00      	cmp	r3, #0
    727c:	d0e3      	beq.n	7246 <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
    727e:	4630      	mov	r0, r6
    7280:	f7ff ffa2 	bl	71c8 <unpend_thread_no_timeout>
    7284:	e7df      	b.n	7246 <z_thread_timeout+0x1c>
}
    7286:	bd70      	pop	{r4, r5, r6, pc}

00007288 <unpend_all>:
{
    7288:	b538      	push	{r3, r4, r5, lr}
    728a:	4605      	mov	r5, r0
	return list->head == list;
    728c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    728e:	42a5      	cmp	r5, r4
    7290:	d00e      	beq.n	72b0 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    7292:	b16c      	cbz	r4, 72b0 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    7294:	4620      	mov	r0, r4
    7296:	f7ff ff97 	bl	71c8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    729a:	f104 0018 	add.w	r0, r4, #24
    729e:	f000 f89a 	bl	73d6 <z_abort_timeout>
    72a2:	2300      	movs	r3, #0
    72a4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    72a8:	4620      	mov	r0, r4
    72aa:	f7fd f875 	bl	4398 <ready_thread>
    72ae:	e7ed      	b.n	728c <unpend_all+0x4>
}
    72b0:	bd38      	pop	{r3, r4, r5, pc}

000072b2 <add_to_waitq_locked>:
{
    72b2:	b570      	push	{r4, r5, r6, lr}
    72b4:	4605      	mov	r5, r0
    72b6:	460e      	mov	r6, r1
	unready_thread(thread);
    72b8:	f7fd f8c8 	bl	444c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    72bc:	7b6b      	ldrb	r3, [r5, #13]
    72be:	f043 0302 	orr.w	r3, r3, #2
    72c2:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    72c4:	b1fe      	cbz	r6, 7306 <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    72c6:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    72c8:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    72ca:	42a6      	cmp	r6, r4
    72cc:	d108      	bne.n	72e0 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    72ce:	2400      	movs	r4, #0
    72d0:	e006      	b.n	72e0 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    72d2:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    72d4:	606b      	str	r3, [r5, #4]
	node->next = successor;
    72d6:	602c      	str	r4, [r5, #0]
	prev->next = node;
    72d8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    72da:	6065      	str	r5, [r4, #4]
}
    72dc:	e013      	b.n	7306 <add_to_waitq_locked+0x54>
    72de:	2400      	movs	r4, #0
    72e0:	b164      	cbz	r4, 72fc <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    72e2:	4621      	mov	r1, r4
    72e4:	4628      	mov	r0, r5
    72e6:	f7ff ff2c 	bl	7142 <z_sched_prio_cmp>
    72ea:	2800      	cmp	r0, #0
    72ec:	dcf1      	bgt.n	72d2 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    72ee:	2c00      	cmp	r4, #0
    72f0:	d0f6      	beq.n	72e0 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    72f2:	6873      	ldr	r3, [r6, #4]
    72f4:	429c      	cmp	r4, r3
    72f6:	d0f2      	beq.n	72de <add_to_waitq_locked+0x2c>
    72f8:	6824      	ldr	r4, [r4, #0]
    72fa:	e7f1      	b.n	72e0 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    72fc:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    72fe:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    7300:	606b      	str	r3, [r5, #4]
	tail->next = node;
    7302:	601d      	str	r5, [r3, #0]
	list->tail = node;
    7304:	6075      	str	r5, [r6, #4]
}
    7306:	bd70      	pop	{r4, r5, r6, pc}

00007308 <pend_locked>:
{
    7308:	b570      	push	{r4, r5, r6, lr}
    730a:	4604      	mov	r4, r0
    730c:	4616      	mov	r6, r2
    730e:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    7310:	f7ff ffcf 	bl	72b2 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    7314:	4632      	mov	r2, r6
    7316:	462b      	mov	r3, r5
    7318:	4620      	mov	r0, r4
    731a:	f7fc fef1 	bl	4100 <add_thread_timeout>
}
    731e:	bd70      	pop	{r4, r5, r6, pc}

00007320 <z_unpend1_no_timeout>:
{
    7320:	b570      	push	{r4, r5, r6, lr}
    7322:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    7324:	2300      	movs	r3, #0
	__asm__ volatile(
    7326:	f04f 0220 	mov.w	r2, #32
    732a:	f3ef 8511 	mrs	r5, BASEPRI
    732e:	f382 8812 	msr	BASEPRI_MAX, r2
    7332:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    7336:	461c      	mov	r4, r3
    7338:	e004      	b.n	7344 <z_unpend1_no_timeout+0x24>
	__asm__ volatile(
    733a:	f385 8811 	msr	BASEPRI, r5
    733e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    7342:	2301      	movs	r3, #1
    7344:	b943      	cbnz	r3, 7358 <z_unpend1_no_timeout+0x38>
		thread = _priq_wait_best(&wait_q->waitq);
    7346:	4630      	mov	r0, r6
    7348:	f7ff ff4c 	bl	71e4 <z_priq_dumb_best>
		if (thread != NULL) {
    734c:	4604      	mov	r4, r0
    734e:	2800      	cmp	r0, #0
    7350:	d0f3      	beq.n	733a <z_unpend1_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    7352:	f7ff ff39 	bl	71c8 <unpend_thread_no_timeout>
    7356:	e7f0      	b.n	733a <z_unpend1_no_timeout+0x1a>
}
    7358:	4620      	mov	r0, r4
    735a:	bd70      	pop	{r4, r5, r6, pc}

0000735c <z_unpend_first_thread>:
{
    735c:	b570      	push	{r4, r5, r6, lr}
    735e:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    7360:	2300      	movs	r3, #0
	__asm__ volatile(
    7362:	f04f 0220 	mov.w	r2, #32
    7366:	f3ef 8511 	mrs	r5, BASEPRI
    736a:	f382 8812 	msr	BASEPRI_MAX, r2
    736e:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    7372:	461c      	mov	r4, r3
    7374:	e004      	b.n	7380 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    7376:	f385 8811 	msr	BASEPRI, r5
    737a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    737e:	2301      	movs	r3, #1
    7380:	b963      	cbnz	r3, 739c <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    7382:	4630      	mov	r0, r6
    7384:	f7ff ff2e 	bl	71e4 <z_priq_dumb_best>
		if (thread != NULL) {
    7388:	4604      	mov	r4, r0
    738a:	2800      	cmp	r0, #0
    738c:	d0f3      	beq.n	7376 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    738e:	f7ff ff1b 	bl	71c8 <unpend_thread_no_timeout>
    7392:	f104 0018 	add.w	r0, r4, #24
    7396:	f000 f81e 	bl	73d6 <z_abort_timeout>
    739a:	e7ec      	b.n	7376 <z_unpend_first_thread+0x1a>
}
    739c:	4620      	mov	r0, r4
    739e:	bd70      	pop	{r4, r5, r6, pc}

000073a0 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    73a0:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    73a2:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    73a4:	6083      	str	r3, [r0, #8]
}
    73a6:	4770      	bx	lr

000073a8 <remove_timeout>:
{
    73a8:	b510      	push	{r4, lr}
    73aa:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    73ac:	f7fd fa9a 	bl	48e4 <next>
    73b0:	b148      	cbz	r0, 73c6 <remove_timeout+0x1e>
    73b2:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    73b4:	6903      	ldr	r3, [r0, #16]
    73b6:	6941      	ldr	r1, [r0, #20]
    73b8:	6920      	ldr	r0, [r4, #16]
    73ba:	181b      	adds	r3, r3, r0
    73bc:	6960      	ldr	r0, [r4, #20]
    73be:	eb41 0100 	adc.w	r1, r1, r0
    73c2:	6113      	str	r3, [r2, #16]
    73c4:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    73c6:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    73c8:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    73ca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    73cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    73ce:	2300      	movs	r3, #0
    73d0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    73d2:	6063      	str	r3, [r4, #4]
}
    73d4:	bd10      	pop	{r4, pc}

000073d6 <z_abort_timeout>:
{
    73d6:	b570      	push	{r4, r5, r6, lr}
    73d8:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    73da:	2300      	movs	r3, #0
	__asm__ volatile(
    73dc:	f04f 0220 	mov.w	r2, #32
    73e0:	f3ef 8611 	mrs	r6, BASEPRI
    73e4:	f382 8812 	msr	BASEPRI_MAX, r2
    73e8:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    73ec:	f06f 0015 	mvn.w	r0, #21
    73f0:	e004      	b.n	73fc <z_abort_timeout+0x26>
	__asm__ volatile(
    73f2:	f386 8811 	msr	BASEPRI, r6
    73f6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    73fa:	2301      	movs	r3, #1
    73fc:	461d      	mov	r5, r3
    73fe:	b93b      	cbnz	r3, 7410 <z_abort_timeout+0x3a>
	return node->next != NULL;
    7400:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    7402:	2b00      	cmp	r3, #0
    7404:	d0f5      	beq.n	73f2 <z_abort_timeout+0x1c>
			remove_timeout(to);
    7406:	4620      	mov	r0, r4
    7408:	f7ff ffce 	bl	73a8 <remove_timeout>
			ret = 0;
    740c:	4628      	mov	r0, r5
    740e:	e7f0      	b.n	73f2 <z_abort_timeout+0x1c>
}
    7410:	bd70      	pop	{r4, r5, r6, pc}

00007412 <z_get_next_timeout_expiry>:
{
    7412:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    7414:	2300      	movs	r3, #0
	__asm__ volatile(
    7416:	f04f 0220 	mov.w	r2, #32
    741a:	f3ef 8411 	mrs	r4, BASEPRI
    741e:	f382 8812 	msr	BASEPRI_MAX, r2
    7422:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    7426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    742a:	e006      	b.n	743a <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    742c:	f7fd fa72 	bl	4914 <next_timeout>
	__asm__ volatile(
    7430:	f384 8811 	msr	BASEPRI, r4
    7434:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    7438:	2301      	movs	r3, #1
    743a:	2b00      	cmp	r3, #0
    743c:	d0f6      	beq.n	742c <z_get_next_timeout_expiry+0x1a>
}
    743e:	bd10      	pop	{r4, pc}

00007440 <z_set_timeout_expiry>:
{
    7440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7442:	4606      	mov	r6, r0
    7444:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    7446:	2300      	movs	r3, #0
	__asm__ volatile(
    7448:	f04f 0220 	mov.w	r2, #32
    744c:	f3ef 8511 	mrs	r5, BASEPRI
    7450:	f382 8812 	msr	BASEPRI_MAX, r2
    7454:	f3bf 8f6f 	isb	sy
    7458:	e00a      	b.n	7470 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    745a:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    745c:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7460:	2801      	cmp	r0, #1
    7462:	dd00      	ble.n	7466 <z_set_timeout_expiry+0x26>
    7464:	b97c      	cbnz	r4, 7486 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    7466:	f385 8811 	msr	BASEPRI, r5
    746a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    746e:	2301      	movs	r3, #1
    7470:	461c      	mov	r4, r3
    7472:	b97b      	cbnz	r3, 7494 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    7474:	f7fd fa4e 	bl	4914 <next_timeout>
			      || (ticks <= next_to);
    7478:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    747c:	d0ed      	beq.n	745a <z_set_timeout_expiry+0x1a>
    747e:	42b0      	cmp	r0, r6
    7480:	dbec      	blt.n	745c <z_set_timeout_expiry+0x1c>
    7482:	2401      	movs	r4, #1
    7484:	e7ea      	b.n	745c <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7486:	4639      	mov	r1, r7
    7488:	42b0      	cmp	r0, r6
    748a:	bfa8      	it	ge
    748c:	4630      	movge	r0, r6
    748e:	f7fb fb05 	bl	2a9c <sys_clock_set_timeout>
    7492:	e7e8      	b.n	7466 <z_set_timeout_expiry+0x26>
}
    7494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007496 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    7496:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7498:	f7fd fb4e 	bl	4b38 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    749c:	bd08      	pop	{r3, pc}

0000749e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
    749e:	b508      	push	{r3, lr}
	return sys_clock_tick_get();
    74a0:	f7fd fb4a 	bl	4b38 <sys_clock_tick_get>
}
    74a4:	bd08      	pop	{r3, pc}

000074a6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    74a6:	b900      	cbnz	r0, 74aa <z_impl_k_busy_wait+0x4>
    74a8:	4770      	bx	lr
{
    74aa:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    74ac:	f7fe f9e1 	bl	5872 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    74b0:	bd08      	pop	{r3, pc}

000074b2 <z_reschedule_unlocked>:
{
    74b2:	b508      	push	{r3, lr}
	__asm__ volatile(
    74b4:	f04f 0320 	mov.w	r3, #32
    74b8:	f3ef 8011 	mrs	r0, BASEPRI
    74bc:	f383 8812 	msr	BASEPRI_MAX, r3
    74c0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    74c4:	f7ff fe5e 	bl	7184 <z_reschedule_irqlock>
}
    74c8:	bd08      	pop	{r3, pc}

000074ca <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    74ca:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    74cc:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    74ce:	2300      	movs	r3, #0
    74d0:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    74d2:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    74d6:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    74d8:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    74da:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    74dc:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    74de:	6343      	str	r3, [r0, #52]	; 0x34
}
    74e0:	4770      	bx	lr

000074e2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    74e2:	b510      	push	{r4, lr}
    74e4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    74e6:	f7ff ff76 	bl	73d6 <z_abort_timeout>

	if (inactive) {
    74ea:	b960      	cbnz	r0, 7506 <z_impl_k_timer_stop+0x24>
		return;
	}

	if (timer->stop_fn != NULL) {
    74ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    74ee:	b10b      	cbz	r3, 74f4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    74f0:	4620      	mov	r0, r4
    74f2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    74f4:	f104 0018 	add.w	r0, r4, #24
    74f8:	f7ff ff12 	bl	7320 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    74fc:	b118      	cbz	r0, 7506 <z_impl_k_timer_stop+0x24>
			z_ready_thread(pending_thread);
    74fe:	f7ff fe78 	bl	71f2 <z_ready_thread>
			z_reschedule_unlocked();
    7502:	f7ff ffd6 	bl	74b2 <z_reschedule_unlocked>
		}
	}
}
    7506:	bd10      	pop	{r4, pc}

00007508 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7508:	4770      	bx	lr
	...
