
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
   0:	b8 18 00 20 15 1b 00 00 9f 59 00 00 cd 1a 00 00     ... .....Y......
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
  10:	cd 1a 00 00 cd 1a 00 00 cd 1a 00 00 cd 1a 00 00     ................
	...

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
  2c:	2d 15 00 00 cd 1a 00 00 00 00 00 00 d1 14 00 00     -...............
	unsigned int s_ro_cnt = 0; /* number of ro strings */
  3c:	cd 1a 00 00                                         ....

00000040 <_irq_vector_table>:
	unsigned int s_rw_cnt = 0; /* number of rw strings */
  40:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................

		/* copy va_list data over to our buffer */
		if (is_str_arg) {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
  50:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
  60:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
  70:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
				}

				if (buf0 != NULL) {
  80:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
  90:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
					str_ptr_arg[s_idx] = arg_idx;
					if (is_ro) {
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
  a0:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
				}

				s_idx++;
  b0:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
  c0:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
				parsing = false;
  d0:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
					arg_idx++;
  e0:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
			switch (*fmt) {
  f0:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
 100:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
 110:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
				arg_idx--;
 120:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
			switch (*fmt) {
 130:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
			if (*++fmt == '\0') {
 140:	bd 15 00 00 bd 15 00 00 bd 15 00 00 bd 15 00 00     ................
			switch (*fmt) {
 150:	bd 15 00 00                                         ....

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     164:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     168:	f000 b80c 	b.w	184 <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f808 	bl	188 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__aeabi_idiv0>:
     184:	4770      	bx	lr
     186:	bf00      	nop

00000188 <__udivmoddi4>:
     188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     18c:	4686      	mov	lr, r0
     18e:	468c      	mov	ip, r1
     190:	4608      	mov	r0, r1
     192:	9e08      	ldr	r6, [sp, #32]
     194:	4615      	mov	r5, r2
     196:	4674      	mov	r4, lr
     198:	4619      	mov	r1, r3
     19a:	2b00      	cmp	r3, #0
     19c:	f040 80c1 	bne.w	322 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa2>
     1a0:	4285      	cmp	r5, r0
     1a2:	fab2 f282 	clz	r2, r2
     1a6:	d945      	bls.n	234 <CONFIG_SRAM_SIZE+0x74>
     1a8:	b14a      	cbz	r2, 1be <__udivmoddi4+0x36>
     1aa:	f1c2 0320 	rsb	r3, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	4095      	lsls	r5, r2
     1b4:	4094      	lsls	r4, r2
     1b6:	fa2e f303 	lsr.w	r3, lr, r3
     1ba:	ea43 0c0c 	orr.w	ip, r3, ip
     1be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1c2:	b2a8      	uxth	r0, r5
     1c4:	0c23      	lsrs	r3, r4, #16
     1c6:	fbbc f8fe 	udiv	r8, ip, lr
     1ca:	fb0e cc18 	mls	ip, lr, r8, ip
     1ce:	fb08 f900 	mul.w	r9, r8, r0
     1d2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1d6:	4599      	cmp	r9, r3
     1d8:	d928      	bls.n	22c <CONFIG_SRAM_SIZE+0x6c>
     1da:	18eb      	adds	r3, r5, r3
     1dc:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     1e0:	d204      	bcs.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e2:	4599      	cmp	r9, r3
     1e4:	d902      	bls.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     1e6:	f1a8 0702 	sub.w	r7, r8, #2
     1ea:	442b      	add	r3, r5
     1ec:	eba3 0309 	sub.w	r3, r3, r9
     1f0:	b2a4      	uxth	r4, r4
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	fb0e 331c 	mls	r3, lr, ip, r3
     1fa:	fb0c f000 	mul.w	r0, ip, r0
     1fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     202:	42a0      	cmp	r0, r4
     204:	d914      	bls.n	230 <CONFIG_SRAM_SIZE+0x70>
     206:	192c      	adds	r4, r5, r4
     208:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     20c:	d204      	bcs.n	218 <CONFIG_SRAM_SIZE+0x58>
     20e:	42a0      	cmp	r0, r4
     210:	d902      	bls.n	218 <CONFIG_SRAM_SIZE+0x58>
     212:	f1ac 0302 	sub.w	r3, ip, #2
     216:	442c      	add	r4, r5
				parsing = false;
     218:	1a24      	subs	r4, r4, r0
     21a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
				align = VA_STACK_ALIGN(size_t);
     21e:	b11e      	cbz	r6, 228 <CONFIG_SRAM_SIZE+0x68>
				size = sizeof(size_t);
     220:	40d4      	lsrs	r4, r2
				continue;
     222:	2300      	movs	r3, #0
				align = VA_STACK_ALIGN(ptrdiff_t);
     224:	6034      	str	r4, [r6, #0]
     226:	6073      	str	r3, [r6, #4]
				size = sizeof(ptrdiff_t);
     228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (fmt[-1] == 'l') {
     22c:	4647      	mov	r7, r8
     22e:	e7dd      	b.n	1ec <CONFIG_SRAM_SIZE+0x2c>
     230:	4663      	mov	r3, ip
				parsing = false;
     232:	e7f1      	b.n	218 <CONFIG_SRAM_SIZE+0x58>
		buf = (void *) ROUND_UP(buf, align);
     234:	bb92      	cbnz	r2, 29c <CONFIG_PM_PARTITION_SIZE_PROVISION+0x1c>
     236:	1b43      	subs	r3, r0, r5
     238:	2101      	movs	r1, #1
     23a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     23e:	b2af      	uxth	r7, r5
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     240:	0c20      	lsrs	r0, r4, #16
     242:	fbb3 fcfe 	udiv	ip, r3, lr
     246:	fb0e 331c 	mls	r3, lr, ip, r3
     24a:	fb0c f807 	mul.w	r8, ip, r7
		if (is_str_arg) {
     24e:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
			}
			buf += sizeof(char *);

			is_str_arg = false;
		} else if (size == sizeof(int)) {
     252:	4598      	cmp	r8, r3
     254:	d961      	bls.n	31a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9a>
     256:	18eb      	adds	r3, r5, r3

			if (buf0 != NULL) {
				*(long *)buf = v;
			}
			buf += sizeof(long);
		} else if (size == sizeof(long long)) {
     258:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     25c:	d204      	bcs.n	268 <CONFIG_SRAM_SIZE+0xa8>
     25e:	4598      	cmp	r8, r3
			long long v = va_arg(ap, long long);
     260:	d902      	bls.n	268 <CONFIG_SRAM_SIZE+0xa8>
     262:	f1ac 0002 	sub.w	r0, ip, #2
     266:	442b      	add	r3, r5
     268:	eba3 0308 	sub.w	r3, r3, r8
     26c:	b2a4      	uxth	r4, r4
     26e:	fbb3 fcfe 	udiv	ip, r3, lr

			if (buf0 != NULL) {
     272:	fb0e 331c 	mls	r3, lr, ip, r3
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     276:	fb0c f707 	mul.w	r7, ip, r7
				}
			}
			buf += sizeof(long long);
     27a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
					if (fmt[-2] == 'l') {
     27e:	42a7      	cmp	r7, r4
     280:	d94d      	bls.n	31e <CONFIG_PM_PARTITION_SIZE_PROVISION+0x9e>
     282:	192c      	adds	r4, r5, r4
				parsing = false;
     284:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
						align = VA_STACK_ALIGN(long);
     288:	d204      	bcs.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
						size = sizeof(long);
     28a:	42a7      	cmp	r7, r4
     28c:	d902      	bls.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
				parsing = false;
     28e:	f1ac 0302 	sub.w	r3, ip, #2
						align = VA_STACK_ALIGN(long long);
     292:	442c      	add	r4, r5
						size = sizeof(long long);
     294:	1be4      	subs	r4, r4, r7
     296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
				if (fmt[-1] == 'L') {
     29a:	e7c0      	b.n	21e <CONFIG_SRAM_SIZE+0x5e>
     29c:	f1c2 0320 	rsb	r3, r2, #32
					v.d = va_arg(ap, double);
     2a0:	4095      	lsls	r5, r2
     2a2:	4094      	lsls	r4, r2
     2a4:	fa20 f103 	lsr.w	r1, r0, r3
     2a8:	fa2e f303 	lsr.w	r3, lr, r3
     2ac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
				buf = (void *) ROUND_UP(buf, align);
     2b0:	4090      	lsls	r0, r2
     2b2:	b2af      	uxth	r7, r5
     2b4:	4303      	orrs	r3, r0
				if (buf0 != NULL) {
     2b6:	fbb1 fcfe 	udiv	ip, r1, lr
					if (BUF_OFFSET + size > len) {
     2ba:	fb0e 101c 	mls	r0, lr, ip, r1
     2be:	0c19      	lsrs	r1, r3, #16
					} else if (fmt[-1] == 'L') {
     2c0:	fb0c f807 	mul.w	r8, ip, r7
     2c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
						*(double *)buf = v.d;
     2c8:	4588      	cmp	r8, r1
				buf += size;
     2ca:	d922      	bls.n	312 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x92>
				parsing = false;
     2cc:	1869      	adds	r1, r5, r1
				continue;
     2ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     2d2:	d204      	bcs.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d4:	4588      	cmp	r8, r1
					v.ld = va_arg(ap, long double);
     2d6:	d902      	bls.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     2d8:	f1ac 0002 	sub.w	r0, ip, #2
     2dc:	4429      	add	r1, r5
     2de:	eba1 0108 	sub.w	r1, r1, r8
     2e2:	b29b      	uxth	r3, r3
     2e4:	fbb1 fcfe 	udiv	ip, r1, lr
					size = sizeof(long double);
     2e8:	fb0e 111c 	mls	r1, lr, ip, r1
						return -ENOSPC;
     2ec:	fb0c f707 	mul.w	r7, ip, r7
						*(long double *)buf = v.ld;
     2f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2f4:	429f      	cmp	r7, r3
				parsing = false;
     2f6:	d90e      	bls.n	316 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x96>
				align = VA_STACK_ALIGN(void *);
     2f8:	18eb      	adds	r3, r5, r3
     2fa:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
				size = sizeof(void *);
     2fe:	d204      	bcs.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
				is_str_arg = true;
     300:	429f      	cmp	r7, r3
				parsing = false;
     302:	d902      	bls.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
				align = VA_STACK_ALIGN(void *);
     304:	f1ac 0102 	sub.w	r1, ip, #2
				size = sizeof(void *);
     308:	442b      	add	r3, r5
     30a:	1bdb      	subs	r3, r3, r7
			s = va_arg(ap, char *);
     30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     310:	e793      	b.n	23a <CONFIG_SRAM_SIZE+0x7a>
     312:	4660      	mov	r0, ip
     314:	e7e3      	b.n	2de <CONFIG_PM_PARTITION_SIZE_PROVISION+0x5e>
     316:	4661      	mov	r1, ip
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     318:	e7f7      	b.n	30a <CONFIG_PM_PARTITION_SIZE_PROVISION+0x8a>
			if (*++fmt == '\0') {
     31a:	4660      	mov	r0, ip
     31c:	e7a4      	b.n	268 <CONFIG_SRAM_SIZE+0xa8>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     31e:	4663      	mov	r3, ip
     320:	e7b8      	b.n	294 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x14>
     322:	4283      	cmp	r3, r0
     324:	d906      	bls.n	334 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xb4>
     326:	b916      	cbnz	r6, 32e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xae>
     328:	2100      	movs	r1, #0
     32a:	4608      	mov	r0, r1
     32c:	e77c      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     32e:	e9c6 e000 	strd	lr, r0, [r6]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     332:	e7f9      	b.n	328 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xa8>
     334:	fab3 f783 	clz	r7, r3
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     338:	b98f      	cbnz	r7, 35e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xde>
     33a:	4283      	cmp	r3, r0
     33c:	d301      	bcc.n	342 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xc2>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     33e:	4572      	cmp	r2, lr
     340:	d808      	bhi.n	354 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd4>
     342:	ebbe 0402 	subs.w	r4, lr, r2
						s_rw_cnt++;
     346:	eb60 0303 	sbc.w	r3, r0, r3
     34a:	2001      	movs	r0, #1
     34c:	469c      	mov	ip, r3
				} else if (is_ro) {
     34e:	b91e      	cbnz	r6, 358 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd8>
					len += 1;
     350:	2100      	movs	r1, #0
     352:	e769      	b.n	228 <CONFIG_SRAM_SIZE+0x68>
     354:	4638      	mov	r0, r7
				} else if (rws_pos_en) {
     356:	e7fa      	b.n	34e <CONFIG_PM_PARTITION_SIZE_PROVISION+0xce>
     358:	e9c6 4c00 	strd	r4, ip, [r6]
					len += 2;
     35c:	e7f8      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     35e:	f1c7 0c20 	rsb	ip, r7, #32
					len += strlen(s) + 1 + 1;
     362:	40bb      	lsls	r3, r7
     364:	fa0e f507 	lsl.w	r5, lr, r7
     368:	fa22 f40c 	lsr.w	r4, r2, ip
			int v = va_arg(ap, int);
     36c:	fa2e f10c 	lsr.w	r1, lr, ip
     370:	40ba      	lsls	r2, r7
     372:	431c      	orrs	r4, r3
			if (buf0 != NULL) {
     374:	fa20 f30c 	lsr.w	r3, r0, ip
			buf += sizeof(int);
     378:	40b8      	lsls	r0, r7
     37a:	ea4f 4914 	mov.w	r9, r4, lsr #16
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     37e:	4301      	orrs	r1, r0
     380:	fa1f fe84 	uxth.w	lr, r4
     384:	fbb3 f8f9 	udiv	r8, r3, r9
	if (buf0 == NULL) {
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     388:	fb09 3018 	mls	r0, r9, r8, r3

	/* Record end of argument list. */
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     38c:	0c0b      	lsrs	r3, r1, #16
     38e:	fb08 fa0e 	mul.w	sl, r8, lr

	if (rws_pos_en) {
     392:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
		/* Strings are appended, update location counter. */
		pkg_hdr->desc.str_cnt = 0;
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     396:	459a      	cmp	sl, r3
		/* Strings are appended, update append counter. */
		pkg_hdr->desc.str_cnt = s_rw_cnt;
		pkg_hdr->desc.rw_str_cnt = 0;
	}

	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     398:	d940      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     39a:	18e3      	adds	r3, r4, r3
#ifdef CONFIG_CBPRINTF_PACKAGE_HEADER_STORE_CREATION_FLAGS
	pkg_hdr->desc.pkg_flags = flags;
#endif

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     39c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
     3a0:	d204      	bcs.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a2:	459a      	cmp	sl, r3
     3a4:	d902      	bls.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     3a6:	f1a8 0002 	sub.w	r0, r8, #2
     3aa:	4423      	add	r3, r4
     3ac:	eba3 030a 	sub.w	r3, r3, sl
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     3b0:	b289      	uxth	r1, r1
     3b2:	fbb3 f8f9 	udiv	r8, r3, r9
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     3b6:	fb09 3318 	mls	r3, r9, r8, r3
		pkg_hdr->desc.rw_str_cnt = 0;
     3ba:	fb08 fe0e 	mul.w	lr, r8, lr
		for (i = 0; i < s_idx; i++) {
     3be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     3c2:	458e      	cmp	lr, r1
     3c4:	d92c      	bls.n	420 <CONFIG_FLASH_SIZE+0x20>
     3c6:	1861      	adds	r1, r4, r1
     3c8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     3cc:	d204      	bcs.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3ce:	458e      	cmp	lr, r1
     3d0:	d902      	bls.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>
     3d2:	f1a8 0302 	sub.w	r3, r8, #2
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     3d6:	4421      	add	r1, r4
			if (BUF_OFFSET + 1 > len) {
     3d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     3dc:	eba1 010e 	sub.w	r1, r1, lr
			*buf++ = pos;
     3e0:	fba0 9802 	umull	r9, r8, r0, r2
     3e4:	4541      	cmp	r1, r8
		for (i = 0; i < s_idx; i++) {
     3e6:	46ce      	mov	lr, r9
     3e8:	4643      	mov	r3, r8
     3ea:	d302      	bcc.n	3f2 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x172>
		if (rws_pos_en) {
     3ec:	d106      	bne.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3ee:	454d      	cmp	r5, r9
			*buf++ = str_ptr_arg[i];
     3f0:	d204      	bcs.n	3fc <CONFIG_PM_PARTITION_SIZE_PROVISION+0x17c>
     3f2:	3801      	subs	r0, #1
     3f4:	ebb9 0e02 	subs.w	lr, r9, r2
     3f8:	eb68 0304 	sbc.w	r3, r8, r4
     3fc:	2e00      	cmp	r6, #0
			size = 0;
     3fe:	d0a7      	beq.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     400:	ebb5 020e 	subs.w	r2, r5, lr
     404:	eb61 0103 	sbc.w	r1, r1, r3
     408:	fa01 fc0c 	lsl.w	ip, r1, ip
			return -ENOSPC;
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     40c:	fa22 f307 	lsr.w	r3, r2, r7
     410:	40f9      	lsrs	r1, r7
     412:	ea4c 0303 	orr.w	r3, ip, r3
     416:	e9c6 3100 	strd	r3, r1, [r6]
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
     41a:	e799      	b.n	350 <CONFIG_PM_PARTITION_SIZE_PROVISION+0xd0>
     41c:	4640      	mov	r0, r8
     41e:	e7c5      	b.n	3ac <CONFIG_PM_PARTITION_SIZE_PROVISION+0x12c>
     420:	4643      	mov	r3, r8
		buf += size;
     422:	e7d9      	b.n	3d8 <CONFIG_PM_PARTITION_SIZE_PROVISION+0x158>

00000424 <button_pressed>:

LOG_MODULE_REGISTER(Less4_Exer3,LOG_LEVEL_DBG);

void button_pressed(const struct device *dev, struct gpio_callback *cb,
            uint32_t pins)
{
     424:	b510      	push	{r4, lr}
  int i;
  int j;
  long int factorial;
  LOG_INF("Calculating the factorials of numbers 1 to %d:",MAX_NUMBER_FACT);
     426:	220a      	movs	r2, #10
     428:	2149      	movs	r1, #73	; 0x49
     42a:	480b      	ldr	r0, [pc, #44]	; (458 <button_pressed+0x34>)
     42c:	f005 fa59 	bl	58e2 <z_log_minimal_printk>
  for (i=1;i<=MAX_NUMBER_FACT;i++){
     430:	2401      	movs	r4, #1
     432:	e00a      	b.n	44a <button_pressed+0x26>
       factorial =1;
        for (j=1;j<=i;j++){
            factorial = factorial*j;
     434:	fb02 f303 	mul.w	r3, r2, r3
        for (j=1;j<=i;j++){
     438:	3201      	adds	r2, #1
     43a:	4294      	cmp	r4, r2
     43c:	dafa      	bge.n	434 <button_pressed+0x10>
        }
        LOG_INF("The factorial of %2d = %ld",i,factorial);
     43e:	4622      	mov	r2, r4
     440:	2149      	movs	r1, #73	; 0x49
     442:	4806      	ldr	r0, [pc, #24]	; (45c <button_pressed+0x38>)
     444:	f005 fa4d 	bl	58e2 <z_log_minimal_printk>
  for (i=1;i<=MAX_NUMBER_FACT;i++){
     448:	3401      	adds	r4, #1
     44a:	2c0a      	cmp	r4, #10
     44c:	dc02      	bgt.n	454 <button_pressed+0x30>
       factorial =1;
     44e:	2301      	movs	r3, #1
        for (j=1;j<=i;j++){
     450:	461a      	mov	r2, r3
     452:	e7f2      	b.n	43a <button_pressed+0x16>
  }
  /*Important note! 
  Code in ISR runs at a high priority, therefore, it should be written with timing in mind.
  Too lengthy or too complex tasks should not be performed by an ISR, they should be deferred to a thread 
  */
}
     454:	bd10      	pop	{r4, pc}
     456:	bf00      	nop
     458:	000071a8 	.word	0x000071a8
     45c:	000071dc 	.word	0x000071dc

00000460 <main>:

static struct gpio_callback button_cb_data;

void main(void)
{
     460:	b510      	push	{r4, lr}
     462:	b084      	sub	sp, #16
	int ret;
    int exercise_num = 3;
    uint8_t data[] = {0x00, 0x01, 0x02, 0x03,
     464:	4b25      	ldr	r3, [pc, #148]	; (4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>)
     466:	46ec      	mov	ip, sp
     468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     46a:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
     46e:	f88c 3000 	strb.w	r3, [ip]
                      0x04, 0x05, 0x06, 0x07,
                      'H', 'e', 'l', 'l','o'};
    //Printf-like messages
    LOG_INF("nRF Connect SDK Fundamentals");
     472:	2149      	movs	r1, #73	; 0x49
     474:	4822      	ldr	r0, [pc, #136]	; (500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>)
     476:	f005 fa34 	bl	58e2 <z_log_minimal_printk>
    LOG_INF("Exercise %d",exercise_num);    
     47a:	2203      	movs	r2, #3
     47c:	2149      	movs	r1, #73	; 0x49
     47e:	4821      	ldr	r0, [pc, #132]	; (504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>)
     480:	f005 fa2f 	bl	58e2 <z_log_minimal_printk>
    LOG_DBG("A log message in debug level");
     484:	2144      	movs	r1, #68	; 0x44
     486:	4820      	ldr	r0, [pc, #128]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     488:	f005 fa2b 	bl	58e2 <z_log_minimal_printk>
    LOG_WRN("A log message in warning level!");
     48c:	2157      	movs	r1, #87	; 0x57
     48e:	481f      	ldr	r0, [pc, #124]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     490:	f005 fa27 	bl	58e2 <z_log_minimal_printk>
    LOG_ERR("A log message in error level!");
     494:	2145      	movs	r1, #69	; 0x45
     496:	481e      	ldr	r0, [pc, #120]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     498:	f005 fa23 	bl	58e2 <z_log_minimal_printk>
    //Hexdump some data
    LOG_HEXDUMP_INF(data, sizeof(data),"Sample Data!"); 
     49c:	4a1d      	ldr	r2, [pc, #116]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     49e:	2149      	movs	r1, #73	; 0x49
     4a0:	481d      	ldr	r0, [pc, #116]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     4a2:	f005 fa1e 	bl	58e2 <z_log_minimal_printk>
     4a6:	220d      	movs	r2, #13
     4a8:	4669      	mov	r1, sp
     4aa:	2003      	movs	r0, #3
     4ac:	f000 fce6 	bl	e7c <z_log_minimal_hexdump_print>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     4b0:	481a      	ldr	r0, [pc, #104]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4b2:	f006 fa69 	bl	6988 <z_device_is_ready>

	/* Only checking one since led.port and button.port point to the same device, &gpio0 */
	if (!device_is_ready(led.port)) {
     4b6:	b908      	cbnz	r0, 4bc <main+0x5c>

	gpio_add_callback(button.port, &button_cb_data);
	while (1) {
        k_msleep(SLEEP_TIME_MS); 
	}
     4b8:	b004      	add	sp, #16
     4ba:	bd10      	pop	{r4, pc}
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
     4bc:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     4c0:	4817      	ldr	r0, [pc, #92]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     4c2:	f004 fdf7 	bl	50b4 <gpio_pin_configure_dt>
	if (ret < 0) {
     4c6:	2800      	cmp	r0, #0
     4c8:	dbf6      	blt.n	4b8 <main+0x58>
	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
     4ca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     4ce:	4815      	ldr	r0, [pc, #84]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
     4d0:	f004 fdf0 	bl	50b4 <gpio_pin_configure_dt>
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
     4d4:	4c11      	ldr	r4, [pc, #68]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4d6:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
     4da:	2117      	movs	r1, #23
     4dc:	4620      	mov	r0, r4
     4de:	f004 fdad 	bl	503c <z_impl_gpio_pin_interrupt_configure>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     4e2:	4911      	ldr	r1, [pc, #68]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
     4e4:	4b11      	ldr	r3, [pc, #68]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     4e6:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     4e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
     4ec:	608b      	str	r3, [r1, #8]
	gpio_add_callback(button.port, &button_cb_data);
     4ee:	4620      	mov	r0, r4
     4f0:	f004 fdeb 	bl	50ca <gpio_add_callback>
        k_msleep(SLEEP_TIME_MS); 
     4f4:	480e      	ldr	r0, [pc, #56]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     4f6:	f004 fdf2 	bl	50de <k_msleep>
	while (1) {
     4fa:	e7fb      	b.n	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
     4fc:	00007180 	.word	0x00007180
     500:	000071fc 	.word	0x000071fc
     504:	00007220 	.word	0x00007220
     508:	00007234 	.word	0x00007234
     50c:	00007258 	.word	0x00007258
     510:	00007280 	.word	0x00007280
     514:	000072a4 	.word	0x000072a4
     518:	000072b4 	.word	0x000072b4
     51c:	00006e7c 	.word	0x00006e7c
     520:	000072c8 	.word	0x000072c8
     524:	000072d0 	.word	0x000072d0
     528:	20000318 	.word	0x20000318
     52c:	00000425 	.word	0x00000425
     530:	000927c0 	.word	0x000927c0

00000534 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
     534:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
     536:	4b02      	ldr	r3, [pc, #8]	; (540 <char_out+0xc>)
     538:	681b      	ldr	r3, [r3, #0]
     53a:	4798      	blx	r3
}
     53c:	bd08      	pop	{r3, pc}
     53e:	bf00      	nop
     540:	20000000 	.word	0x20000000

00000544 <__printk_hook_install>:
	_char_out = fn;
     544:	4b01      	ldr	r3, [pc, #4]	; (54c <__printk_hook_install+0x8>)
     546:	6018      	str	r0, [r3, #0]
}
     548:	4770      	bx	lr
     54a:	bf00      	nop
     54c:	20000000 	.word	0x20000000

00000550 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     550:	b500      	push	{lr}
     552:	b083      	sub	sp, #12
     554:	4602      	mov	r2, r0
     556:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     558:	2100      	movs	r1, #0
     55a:	9100      	str	r1, [sp, #0]
     55c:	4802      	ldr	r0, [pc, #8]	; (568 <vprintk+0x18>)
     55e:	f000 f91d 	bl	79c <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     562:	b003      	add	sp, #12
     564:	f85d fb04 	ldr.w	pc, [sp], #4
     568:	00000535 	.word	0x00000535

0000056c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     56c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     570:	b083      	sub	sp, #12
     572:	4604      	mov	r4, r0
     574:	4608      	mov	r0, r1
     576:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     578:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     57a:	f013 0f08 	tst.w	r3, #8
     57e:	d105      	bne.n	58c <process_event+0x20>
     580:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     584:	2300      	movs	r3, #0
     586:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     588:	9301      	str	r3, [sp, #4]
}
     58a:	e055      	b.n	638 <process_event+0xcc>
		if (evt == EVT_COMPLETE) {
     58c:	2901      	cmp	r1, #1
     58e:	d009      	beq.n	5a4 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     590:	f043 0320 	orr.w	r3, r3, #32
     594:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     596:	f385 8811 	msr	BASEPRI, r5
     59a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     59e:	b003      	add	sp, #12
     5a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     5a4:	f043 0310 	orr.w	r3, r3, #16
     5a8:	8323      	strh	r3, [r4, #24]
     5aa:	e7f4      	b.n	596 <process_event+0x2a>
			evt = process_recheck(mgr);
     5ac:	4620      	mov	r0, r4
     5ae:	f004 fdf0 	bl	5192 <process_recheck>
     5b2:	e043      	b.n	63c <process_event+0xd0>
			res = mgr->last_res;
     5b4:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     5b8:	464a      	mov	r2, r9
     5ba:	4669      	mov	r1, sp
     5bc:	4620      	mov	r0, r4
     5be:	f004 fe01 	bl	51c4 <process_complete>
		onoff_transition_fn transit = NULL;
     5c2:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5c6:	8b23      	ldrh	r3, [r4, #24]
     5c8:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5cc:	42b7      	cmp	r7, r6
     5ce:	d069      	beq.n	6a4 <process_event+0x138>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     5d0:	68a2      	ldr	r2, [r4, #8]
     5d2:	2a00      	cmp	r2, #0
     5d4:	d066      	beq.n	6a4 <process_event+0x138>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5d6:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     5d8:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     5dc:	8323      	strh	r3, [r4, #24]
     5de:	f385 8811 	msr	BASEPRI, r5
     5e2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     5e6:	2a00      	cmp	r2, #0
     5e8:	d164      	bne.n	6b4 <process_event+0x148>
     5ea:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     5ec:	b12b      	cbz	r3, 5fa <process_event+0x8e>
				notify_all(mgr, &clients, state, res);
     5ee:	464b      	mov	r3, r9
     5f0:	463a      	mov	r2, r7
     5f2:	4669      	mov	r1, sp
     5f4:	4620      	mov	r0, r4
     5f6:	f004 fe5e 	bl	52b6 <notify_all>
			if (transit != NULL) {
     5fa:	f1b8 0f00 	cmp.w	r8, #0
     5fe:	d002      	beq.n	606 <process_event+0x9a>
				transit(mgr, transition_complete);
     600:	4934      	ldr	r1, [pc, #208]	; (6d4 <process_event+0x168>)
     602:	4620      	mov	r0, r4
     604:	47c0      	blx	r8
	__asm__ volatile(
     606:	f04f 0320 	mov.w	r3, #32
     60a:	f3ef 8511 	mrs	r5, BASEPRI
     60e:	f383 8812 	msr	BASEPRI_MAX, r3
     612:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     616:	8b23      	ldrh	r3, [r4, #24]
     618:	f023 0308 	bic.w	r3, r3, #8
     61c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     61e:	8b23      	ldrh	r3, [r4, #24]
     620:	f013 0f10 	tst.w	r3, #16
     624:	d04c      	beq.n	6c0 <process_event+0x154>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     626:	f023 0310 	bic.w	r3, r3, #16
     62a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     62c:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     62e:	8b26      	ldrh	r6, [r4, #24]
     630:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     634:	2800      	cmp	r0, #0
     636:	d0ae      	beq.n	596 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     638:	2802      	cmp	r0, #2
     63a:	d0b7      	beq.n	5ac <process_event+0x40>
		if (evt == EVT_NOP) {
     63c:	2800      	cmp	r0, #0
     63e:	d0aa      	beq.n	596 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     640:	3801      	subs	r0, #1
     642:	2804      	cmp	r0, #4
     644:	d82a      	bhi.n	69c <process_event+0x130>
     646:	a301      	add	r3, pc, #4	; (adr r3, 64c <process_event+0xe0>)
     648:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     64c:	000005b5 	.word	0x000005b5
     650:	0000069d 	.word	0x0000069d
     654:	00000661 	.word	0x00000661
     658:	00000675 	.word	0x00000675
     65c:	00000689 	.word	0x00000689
			transit = mgr->transitions->start;
     660:	6923      	ldr	r3, [r4, #16]
     662:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
     666:	2106      	movs	r1, #6
     668:	4620      	mov	r0, r4
     66a:	f004 fd68 	bl	513e <set_state>
		res = 0;
     66e:	f04f 0900 	mov.w	r9, #0
     672:	e7a8      	b.n	5c6 <process_event+0x5a>
			transit = mgr->transitions->stop;
     674:	6923      	ldr	r3, [r4, #16]
     676:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     67a:	2104      	movs	r1, #4
     67c:	4620      	mov	r0, r4
     67e:	f004 fd5e 	bl	513e <set_state>
		res = 0;
     682:	f04f 0900 	mov.w	r9, #0
     686:	e79e      	b.n	5c6 <process_event+0x5a>
			transit = mgr->transitions->reset;
     688:	6923      	ldr	r3, [r4, #16]
     68a:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     68e:	2105      	movs	r1, #5
     690:	4620      	mov	r0, r4
     692:	f004 fd54 	bl	513e <set_state>
		res = 0;
     696:	f04f 0900 	mov.w	r9, #0
     69a:	e794      	b.n	5c6 <process_event+0x5a>
		if (evt == EVT_NOP) {
     69c:	f04f 0800 	mov.w	r8, #0
     6a0:	46c1      	mov	r9, r8
     6a2:	e790      	b.n	5c6 <process_event+0x5a>
     6a4:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     6a6:	b10a      	cbz	r2, 6ac <process_event+0x140>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6a8:	2200      	movs	r2, #0
     6aa:	e795      	b.n	5d8 <process_event+0x6c>
		    || (transit != NULL)) {
     6ac:	f1b8 0f00 	cmp.w	r8, #0
     6b0:	d192      	bne.n	5d8 <process_event+0x6c>
     6b2:	e7b4      	b.n	61e <process_event+0xb2>
				notify_monitors(mgr, state, res);
     6b4:	464a      	mov	r2, r9
     6b6:	4639      	mov	r1, r7
     6b8:	4620      	mov	r0, r4
     6ba:	f004 fd48 	bl	514e <notify_monitors>
     6be:	e794      	b.n	5ea <process_event+0x7e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     6c0:	f013 0f20 	tst.w	r3, #32
     6c4:	d004      	beq.n	6d0 <process_event+0x164>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     6c6:	f023 0320 	bic.w	r3, r3, #32
     6ca:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     6cc:	2002      	movs	r0, #2
     6ce:	e7ae      	b.n	62e <process_event+0xc2>
		evt = EVT_NOP;
     6d0:	2000      	movs	r0, #0
     6d2:	e7ac      	b.n	62e <process_event+0xc2>
     6d4:	000052e5 	.word	0x000052e5

000006d8 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
     6d8:	4684      	mov	ip, r0
     6da:	4608      	mov	r0, r1
	bool loop = true;
     6dc:	2201      	movs	r2, #1
     6de:	e026      	b.n	72e <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
     6e0:	f89c 3000 	ldrb.w	r3, [ip]
     6e4:	f043 0304 	orr.w	r3, r3, #4
     6e8:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
     6ec:	b1f2      	cbz	r2, 72c <extract_flags+0x54>
			++sp;
     6ee:	3001      	adds	r0, #1
     6f0:	e01c      	b.n	72c <extract_flags+0x54>
			conv->flag_plus = true;
     6f2:	f89c 3000 	ldrb.w	r3, [ip]
     6f6:	f043 0308 	orr.w	r3, r3, #8
     6fa:	f88c 3000 	strb.w	r3, [ip]
			break;
     6fe:	e7f5      	b.n	6ec <extract_flags+0x14>
			conv->flag_space = true;
     700:	f89c 3000 	ldrb.w	r3, [ip]
     704:	f043 0310 	orr.w	r3, r3, #16
     708:	f88c 3000 	strb.w	r3, [ip]
			break;
     70c:	e7ee      	b.n	6ec <extract_flags+0x14>
			conv->flag_hash = true;
     70e:	f89c 3000 	ldrb.w	r3, [ip]
     712:	f043 0320 	orr.w	r3, r3, #32
     716:	f88c 3000 	strb.w	r3, [ip]
			break;
     71a:	e7e7      	b.n	6ec <extract_flags+0x14>
			conv->flag_zero = true;
     71c:	f89c 3000 	ldrb.w	r3, [ip]
     720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     724:	f88c 3000 	strb.w	r3, [ip]
			break;
     728:	e7e0      	b.n	6ec <extract_flags+0x14>
		switch (*sp) {
     72a:	2200      	movs	r2, #0
		}
	} while (loop);
     72c:	b342      	cbz	r2, 780 <extract_flags+0xa8>
		switch (*sp) {
     72e:	7803      	ldrb	r3, [r0, #0]
     730:	3b20      	subs	r3, #32
     732:	2b10      	cmp	r3, #16
     734:	d8f9      	bhi.n	72a <extract_flags+0x52>
     736:	a101      	add	r1, pc, #4	; (adr r1, 73c <extract_flags+0x64>)
     738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     73c:	00000701 	.word	0x00000701
     740:	0000072b 	.word	0x0000072b
     744:	0000072b 	.word	0x0000072b
     748:	0000070f 	.word	0x0000070f
     74c:	0000072b 	.word	0x0000072b
     750:	0000072b 	.word	0x0000072b
     754:	0000072b 	.word	0x0000072b
     758:	0000072b 	.word	0x0000072b
     75c:	0000072b 	.word	0x0000072b
     760:	0000072b 	.word	0x0000072b
     764:	0000072b 	.word	0x0000072b
     768:	000006f3 	.word	0x000006f3
     76c:	0000072b 	.word	0x0000072b
     770:	000006e1 	.word	0x000006e1
     774:	0000072b 	.word	0x0000072b
     778:	0000072b 	.word	0x0000072b
     77c:	0000071d 	.word	0x0000071d

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
     780:	f89c 3000 	ldrb.w	r3, [ip]
     784:	f003 0344 	and.w	r3, r3, #68	; 0x44
     788:	2b44      	cmp	r3, #68	; 0x44
     78a:	d000      	beq.n	78e <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
     78c:	4770      	bx	lr
		conv->flag_zero = false;
     78e:	f89c 3000 	ldrb.w	r3, [ip]
     792:	f36f 1386 	bfc	r3, #6, #1
     796:	f88c 3000 	strb.w	r3, [ip]
     79a:	e7f7      	b.n	78c <extract_flags+0xb4>

0000079c <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7a0:	b091      	sub	sp, #68	; 0x44
     7a2:	4606      	mov	r6, r0
     7a4:	460d      	mov	r5, r1
     7a6:	4691      	mov	r9, r2
     7a8:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     7aa:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     7ac:	f899 0000 	ldrb.w	r0, [r9]
     7b0:	2800      	cmp	r0, #0
     7b2:	f000 82b9 	beq.w	d28 <CONFIG_ISR_STACK_SIZE+0x528>
		if (*fp != '%') {
     7b6:	2825      	cmp	r0, #37	; 0x25
     7b8:	d008      	beq.n	7cc <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     7ba:	f109 0901 	add.w	r9, r9, #1
     7be:	4629      	mov	r1, r5
     7c0:	47b0      	blx	r6
     7c2:	2800      	cmp	r0, #0
     7c4:	f2c0 82b1 	blt.w	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
     7c8:	3401      	adds	r4, #1
			continue;
     7ca:	e7ef      	b.n	7ac <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     7cc:	2300      	movs	r3, #0
     7ce:	9304      	str	r3, [sp, #16]
     7d0:	9305      	str	r3, [sp, #20]
     7d2:	9306      	str	r3, [sp, #24]
     7d4:	9307      	str	r3, [sp, #28]
     7d6:	9308      	str	r3, [sp, #32]
     7d8:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     7da:	4649      	mov	r1, r9
     7dc:	a806      	add	r0, sp, #24
     7de:	f004 ff9d 	bl	571c <extract_conversion>
     7e2:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     7e4:	f89d 3019 	ldrb.w	r3, [sp, #25]
     7e8:	f013 0f01 	tst.w	r3, #1
     7ec:	f000 8097 	beq.w	91e <CONFIG_ISR_STACK_SIZE+0x11e>
			width = va_arg(ap, int);
     7f0:	9b03      	ldr	r3, [sp, #12]
     7f2:	1d1a      	adds	r2, r3, #4
     7f4:	9203      	str	r2, [sp, #12]
     7f6:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     7f8:	2f00      	cmp	r7, #0
     7fa:	f2c0 8088 	blt.w	90e <CONFIG_ISR_STACK_SIZE+0x10e>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     7fe:	f89d 3019 	ldrb.w	r3, [sp, #25]
     802:	f013 0f04 	tst.w	r3, #4
     806:	f000 809c 	beq.w	942 <CONFIG_ISR_STACK_SIZE+0x142>
			int arg = va_arg(ap, int);
     80a:	9b03      	ldr	r3, [sp, #12]
     80c:	1d1a      	adds	r2, r3, #4
     80e:	9203      	str	r2, [sp, #12]
     810:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     814:	f1ba 0f00 	cmp.w	sl, #0
     818:	f2c0 808a 	blt.w	930 <CONFIG_ISR_STACK_SIZE+0x130>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     81c:	2300      	movs	r3, #0
     81e:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     820:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     822:	f89d 301a 	ldrb.w	r3, [sp, #26]
     826:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     82a:	f89d 1019 	ldrb.w	r1, [sp, #25]
     82e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     832:	2b01      	cmp	r3, #1
     834:	f000 808e 	beq.w	954 <CONFIG_ISR_STACK_SIZE+0x154>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     838:	2b02      	cmp	r3, #2
     83a:	f000 80d3 	beq.w	9e4 <CONFIG_ISR_STACK_SIZE+0x1e4>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     83e:	2b04      	cmp	r3, #4
     840:	f000 8124 	beq.w	a8c <CONFIG_ISR_STACK_SIZE+0x28c>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     844:	2b03      	cmp	r3, #3
     846:	f000 813b 	beq.w	ac0 <CONFIG_ISR_STACK_SIZE+0x2c0>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     84a:	f89d 8018 	ldrb.w	r8, [sp, #24]
     84e:	f018 0b03 	ands.w	fp, r8, #3
     852:	f040 813b 	bne.w	acc <CONFIG_ISR_STACK_SIZE+0x2cc>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     856:	f89d 301b 	ldrb.w	r3, [sp, #27]
     85a:	3b25      	subs	r3, #37	; 0x25
     85c:	2b53      	cmp	r3, #83	; 0x53
     85e:	f200 81ca 	bhi.w	bf6 <CONFIG_ISR_STACK_SIZE+0x3f6>
     862:	e8df f013 	tbh	[pc, r3, lsl #1]
     866:	0140      	.short	0x0140
     868:	01c801c8 	.word	0x01c801c8
     86c:	01c801c8 	.word	0x01c801c8
     870:	01c801c8 	.word	0x01c801c8
     874:	01c801c8 	.word	0x01c801c8
     878:	01c801c8 	.word	0x01c801c8
     87c:	01c801c8 	.word	0x01c801c8
     880:	01c801c8 	.word	0x01c801c8
     884:	01c801c8 	.word	0x01c801c8
     888:	01c801c8 	.word	0x01c801c8
     88c:	01c801c8 	.word	0x01c801c8
     890:	01c801c8 	.word	0x01c801c8
     894:	01c801c8 	.word	0x01c801c8
     898:	01c801c8 	.word	0x01c801c8
     89c:	01c801c8 	.word	0x01c801c8
     8a0:	01c801c8 	.word	0x01c801c8
     8a4:	01c801c8 	.word	0x01c801c8
     8a8:	01c801c8 	.word	0x01c801c8
     8ac:	01c801c8 	.word	0x01c801c8
     8b0:	01c801c8 	.word	0x01c801c8
     8b4:	01c801c8 	.word	0x01c801c8
     8b8:	01c801c8 	.word	0x01c801c8
     8bc:	01c801c8 	.word	0x01c801c8
     8c0:	01c801c8 	.word	0x01c801c8
     8c4:	01c801c8 	.word	0x01c801c8
     8c8:	01c801c8 	.word	0x01c801c8
     8cc:	01c80181 	.word	0x01c80181
     8d0:	01c801c8 	.word	0x01c801c8
     8d4:	01c801c8 	.word	0x01c801c8
     8d8:	01c801c8 	.word	0x01c801c8
     8dc:	01c801c8 	.word	0x01c801c8
     8e0:	015e01c8 	.word	0x015e01c8
     8e4:	01c80167 	.word	0x01c80167
     8e8:	01c801c8 	.word	0x01c801c8
     8ec:	016701c8 	.word	0x016701c8
     8f0:	01c801c8 	.word	0x01c801c8
     8f4:	01c801c8 	.word	0x01c801c8
     8f8:	018101bd 	.word	0x018101bd
     8fc:	01c801a1 	.word	0x01c801a1
     900:	014d01c8 	.word	0x014d01c8
     904:	018101c8 	.word	0x018101c8
     908:	01c801c8 	.word	0x01c801c8
     90c:	0181      	.short	0x0181
				conv->flag_dash = true;
     90e:	f89d 3018 	ldrb.w	r3, [sp, #24]
     912:	f043 0304 	orr.w	r3, r3, #4
     916:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     91a:	427f      	negs	r7, r7
     91c:	e76f      	b.n	7fe <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
     91e:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     922:	2b00      	cmp	r3, #0
     924:	db02      	blt.n	92c <CONFIG_ISR_STACK_SIZE+0x12c>
		int width = -1;
     926:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     92a:	e768      	b.n	7fe <z_cbvprintf_impl+0x62>
			width = conv->width_value;
     92c:	9f07      	ldr	r7, [sp, #28]
     92e:	e766      	b.n	7fe <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
     930:	f89d 3019 	ldrb.w	r3, [sp, #25]
     934:	f36f 0341 	bfc	r3, #1, #1
     938:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     93c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     940:	e76c      	b.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
		} else if (conv->prec_present) {
     942:	f013 0f02 	tst.w	r3, #2
     946:	d002      	beq.n	94e <CONFIG_ISR_STACK_SIZE+0x14e>
			precision = conv->prec_value;
     948:	f8dd a020 	ldr.w	sl, [sp, #32]
     94c:	e766      	b.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
		int precision = -1;
     94e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     952:	e763      	b.n	81c <CONFIG_ISR_STACK_SIZE+0x1c>
			switch (length_mod) {
     954:	1ecb      	subs	r3, r1, #3
     956:	2b04      	cmp	r3, #4
     958:	d804      	bhi.n	964 <CONFIG_ISR_STACK_SIZE+0x164>
     95a:	e8df f003 	tbb	[pc, r3]
     95e:	1d0b      	.short	0x1d0b
     960:	3529      	.short	0x3529
     962:	35          	.byte	0x35
     963:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     964:	9b03      	ldr	r3, [sp, #12]
     966:	1d1a      	adds	r2, r3, #4
     968:	9203      	str	r2, [sp, #12]
     96a:	681b      	ldr	r3, [r3, #0]
     96c:	17da      	asrs	r2, r3, #31
     96e:	9304      	str	r3, [sp, #16]
     970:	9205      	str	r2, [sp, #20]
				break;
     972:	e006      	b.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
					value->sint = va_arg(ap, long);
     974:	9b03      	ldr	r3, [sp, #12]
     976:	1d1a      	adds	r2, r3, #4
     978:	9203      	str	r2, [sp, #12]
     97a:	681b      	ldr	r3, [r3, #0]
     97c:	17da      	asrs	r2, r3, #31
     97e:	9304      	str	r3, [sp, #16]
     980:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     982:	2901      	cmp	r1, #1
     984:	d028      	beq.n	9d8 <CONFIG_ISR_STACK_SIZE+0x1d8>
			} else if (length_mod == LENGTH_H) {
     986:	2902      	cmp	r1, #2
     988:	f47f af5f 	bne.w	84a <CONFIG_ISR_STACK_SIZE+0x4a>
				value->sint = (short)value->sint;
     98c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     990:	17da      	asrs	r2, r3, #31
     992:	9304      	str	r3, [sp, #16]
     994:	9205      	str	r2, [sp, #20]
     996:	e758      	b.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
					(sint_value_type)va_arg(ap, long long);
     998:	9b03      	ldr	r3, [sp, #12]
     99a:	3307      	adds	r3, #7
     99c:	f023 0307 	bic.w	r3, r3, #7
     9a0:	f103 0208 	add.w	r2, r3, #8
     9a4:	9203      	str	r2, [sp, #12]
     9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     9aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     9ae:	e7e8      	b.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
					(sint_value_type)va_arg(ap, intmax_t);
     9b0:	9b03      	ldr	r3, [sp, #12]
     9b2:	3307      	adds	r3, #7
     9b4:	f023 0307 	bic.w	r3, r3, #7
     9b8:	f103 0208 	add.w	r2, r3, #8
     9bc:	9203      	str	r2, [sp, #12]
     9be:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     9c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     9c6:	e7dc      	b.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     9c8:	9b03      	ldr	r3, [sp, #12]
     9ca:	1d1a      	adds	r2, r3, #4
     9cc:	9203      	str	r2, [sp, #12]
     9ce:	681b      	ldr	r3, [r3, #0]
     9d0:	17da      	asrs	r2, r3, #31
				value->sint =
     9d2:	9304      	str	r3, [sp, #16]
     9d4:	9205      	str	r2, [sp, #20]
				break;
     9d6:	e7d4      	b.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
				value->sint = (signed char)value->sint;
     9d8:	f99d 3010 	ldrsb.w	r3, [sp, #16]
     9dc:	17da      	asrs	r2, r3, #31
     9de:	9304      	str	r3, [sp, #16]
     9e0:	9205      	str	r2, [sp, #20]
     9e2:	e732      	b.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
			switch (length_mod) {
     9e4:	1ecb      	subs	r3, r1, #3
     9e6:	2b04      	cmp	r3, #4
     9e8:	d804      	bhi.n	9f4 <CONFIG_ISR_STACK_SIZE+0x1f4>
     9ea:	e8df f003 	tbb	[pc, r3]
     9ee:	1f0b      	.short	0x1f0b
     9f0:	4135      	.short	0x4135
     9f2:	41          	.byte	0x41
     9f3:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     9f4:	9b03      	ldr	r3, [sp, #12]
     9f6:	1d1a      	adds	r2, r3, #4
     9f8:	9203      	str	r2, [sp, #12]
     9fa:	681b      	ldr	r3, [r3, #0]
     9fc:	9304      	str	r3, [sp, #16]
     9fe:	2300      	movs	r3, #0
     a00:	9305      	str	r3, [sp, #20]
				break;
     a02:	e01e      	b.n	a42 <CONFIG_ISR_STACK_SIZE+0x242>
				    && (conv->specifier == 'c')) {
     a04:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     a08:	2b63      	cmp	r3, #99	; 0x63
     a0a:	d007      	beq.n	a1c <CONFIG_ISR_STACK_SIZE+0x21c>
					value->uint = va_arg(ap, unsigned long);
     a0c:	9b03      	ldr	r3, [sp, #12]
     a0e:	1d1a      	adds	r2, r3, #4
     a10:	9203      	str	r2, [sp, #12]
     a12:	681b      	ldr	r3, [r3, #0]
     a14:	9304      	str	r3, [sp, #16]
     a16:	2300      	movs	r3, #0
     a18:	9305      	str	r3, [sp, #20]
     a1a:	e012      	b.n	a42 <CONFIG_ISR_STACK_SIZE+0x242>
					value->uint = (wchar_t)va_arg(ap,
     a1c:	9b03      	ldr	r3, [sp, #12]
     a1e:	1d1a      	adds	r2, r3, #4
     a20:	9203      	str	r2, [sp, #12]
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	9304      	str	r3, [sp, #16]
     a26:	2300      	movs	r3, #0
     a28:	9305      	str	r3, [sp, #20]
     a2a:	e00a      	b.n	a42 <CONFIG_ISR_STACK_SIZE+0x242>
					(uint_value_type)va_arg(ap,
     a2c:	9b03      	ldr	r3, [sp, #12]
     a2e:	3307      	adds	r3, #7
     a30:	f023 0307 	bic.w	r3, r3, #7
     a34:	f103 0208 	add.w	r2, r3, #8
     a38:	9203      	str	r2, [sp, #12]
     a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     a3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     a42:	2901      	cmp	r1, #1
     a44:	d01c      	beq.n	a80 <CONFIG_ISR_STACK_SIZE+0x280>
			} else if (length_mod == LENGTH_H) {
     a46:	2902      	cmp	r1, #2
     a48:	f47f aeff 	bne.w	84a <CONFIG_ISR_STACK_SIZE+0x4a>
				value->uint = (unsigned short)value->uint;
     a4c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     a50:	9304      	str	r3, [sp, #16]
     a52:	2300      	movs	r3, #0
     a54:	9305      	str	r3, [sp, #20]
     a56:	e6f8      	b.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
					(uint_value_type)va_arg(ap,
     a58:	9b03      	ldr	r3, [sp, #12]
     a5a:	3307      	adds	r3, #7
     a5c:	f023 0307 	bic.w	r3, r3, #7
     a60:	f103 0208 	add.w	r2, r3, #8
     a64:	9203      	str	r2, [sp, #12]
     a66:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     a6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     a6e:	e7e8      	b.n	a42 <CONFIG_ISR_STACK_SIZE+0x242>
					(uint_value_type)va_arg(ap, size_t);
     a70:	9b03      	ldr	r3, [sp, #12]
     a72:	1d1a      	adds	r2, r3, #4
     a74:	9203      	str	r2, [sp, #12]
     a76:	681b      	ldr	r3, [r3, #0]
				value->uint =
     a78:	9304      	str	r3, [sp, #16]
     a7a:	2300      	movs	r3, #0
     a7c:	9305      	str	r3, [sp, #20]
				break;
     a7e:	e7e0      	b.n	a42 <CONFIG_ISR_STACK_SIZE+0x242>
				value->uint = (unsigned char)value->uint;
     a80:	f89d 3010 	ldrb.w	r3, [sp, #16]
     a84:	9304      	str	r3, [sp, #16]
     a86:	2300      	movs	r3, #0
     a88:	9305      	str	r3, [sp, #20]
     a8a:	e6de      	b.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
			if (length_mod == LENGTH_UPPER_L) {
     a8c:	2908      	cmp	r1, #8
     a8e:	d00b      	beq.n	aa8 <CONFIG_ISR_STACK_SIZE+0x2a8>
				value->dbl = va_arg(ap, double);
     a90:	9b03      	ldr	r3, [sp, #12]
     a92:	3307      	adds	r3, #7
     a94:	f023 0307 	bic.w	r3, r3, #7
     a98:	f103 0208 	add.w	r2, r3, #8
     a9c:	9203      	str	r2, [sp, #12]
     a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
     aa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
     aa6:	e6d0      	b.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
				value->ldbl = va_arg(ap, long double);
     aa8:	9b03      	ldr	r3, [sp, #12]
     aaa:	3307      	adds	r3, #7
     aac:	f023 0307 	bic.w	r3, r3, #7
     ab0:	f103 0208 	add.w	r2, r3, #8
     ab4:	9203      	str	r2, [sp, #12]
     ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
     aba:	e9cd 2304 	strd	r2, r3, [sp, #16]
     abe:	e6c4      	b.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
			value->ptr = va_arg(ap, void *);
     ac0:	9b03      	ldr	r3, [sp, #12]
     ac2:	1d1a      	adds	r2, r3, #4
     ac4:	9203      	str	r2, [sp, #12]
     ac6:	681b      	ldr	r3, [r3, #0]
     ac8:	9304      	str	r3, [sp, #16]
     aca:	e6be      	b.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
			OUTS(sp, fp);
     acc:	9f02      	ldr	r7, [sp, #8]
     ace:	463b      	mov	r3, r7
     ad0:	464a      	mov	r2, r9
     ad2:	4629      	mov	r1, r5
     ad4:	4630      	mov	r0, r6
     ad6:	f004 fec7 	bl	5868 <outs>
     ada:	2800      	cmp	r0, #0
     adc:	f2c0 8125 	blt.w	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
     ae0:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     ae2:	46b9      	mov	r9, r7
			continue;
     ae4:	e662      	b.n	7ac <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
     ae6:	4629      	mov	r1, r5
     ae8:	2025      	movs	r0, #37	; 0x25
     aea:	47b0      	blx	r6
     aec:	2800      	cmp	r0, #0
     aee:	f2c0 811c 	blt.w	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
     af2:	3401      	adds	r4, #1
		char sign = 0;
     af4:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     af6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     afa:	f04f 0900 	mov.w	r9, #0
			break;
     afe:	e07f      	b.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
		case 's': {
			bps = (const char *)value->ptr;
     b00:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     b04:	f1ba 0f00 	cmp.w	sl, #0
     b08:	db07      	blt.n	b1a <CONFIG_ISR_STACK_SIZE+0x31a>
				len = strnlen(bps, precision);
     b0a:	4651      	mov	r1, sl
     b0c:	4648      	mov	r0, r9
     b0e:	f005 f806 	bl	5b1e <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     b12:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     b16:	46d8      	mov	r8, fp
			precision = -1;

			break;
     b18:	e072      	b.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
				len = strlen(bps);
     b1a:	4648      	mov	r0, r9
     b1c:	f004 fff6 	bl	5b0c <strlen>
     b20:	e7f7      	b.n	b12 <CONFIG_ISR_STACK_SIZE+0x312>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     b22:	9b04      	ldr	r3, [sp, #16]
     b24:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     b28:	46d8      	mov	r8, fp
			bpe = buf + 1;
     b2a:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     b2e:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     b32:	e065      	b.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     b34:	f018 0f08 	tst.w	r8, #8
     b38:	d105      	bne.n	b46 <CONFIG_ISR_STACK_SIZE+0x346>
				sign = '+';
			} else if (conv->flag_space) {
     b3a:	f018 0810 	ands.w	r8, r8, #16
     b3e:	d004      	beq.n	b4a <CONFIG_ISR_STACK_SIZE+0x34a>
				sign = ' ';
     b40:	f04f 0820 	mov.w	r8, #32
     b44:	e001      	b.n	b4a <CONFIG_ISR_STACK_SIZE+0x34a>
				sign = '+';
     b46:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     b4a:	9a04      	ldr	r2, [sp, #16]
     b4c:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     b4e:	2b00      	cmp	r3, #0
     b50:	db02      	blt.n	b58 <CONFIG_ISR_STACK_SIZE+0x358>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     b52:	9204      	str	r2, [sp, #16]
     b54:	9305      	str	r3, [sp, #20]
     b56:	e008      	b.n	b6a <CONFIG_ISR_STACK_SIZE+0x36a>
				value->uint = (uint_value_type)-sint;
     b58:	4252      	negs	r2, r2
     b5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     b5e:	9204      	str	r2, [sp, #16]
     b60:	9305      	str	r3, [sp, #20]
				sign = '-';
     b62:	f04f 082d 	mov.w	r8, #45	; 0x2d
     b66:	e000      	b.n	b6a <CONFIG_ISR_STACK_SIZE+0x36a>
		switch (conv->specifier) {
     b68:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     b6a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     b6e:	9300      	str	r3, [sp, #0]
     b70:	ab0a      	add	r3, sp, #40	; 0x28
     b72:	aa06      	add	r2, sp, #24
     b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     b78:	f004 fe07 	bl	578a <encode_uint>
     b7c:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     b7e:	f1ba 0f00 	cmp.w	sl, #0
     b82:	db6c      	blt.n	c5e <CONFIG_ISR_STACK_SIZE+0x45e>
				size_t len = bpe - bps;
     b84:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     b88:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     b8c:	f89d 2018 	ldrb.w	r2, [sp, #24]
     b90:	f36f 1286 	bfc	r2, #6, #1
     b94:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     b98:	459a      	cmp	sl, r3
     b9a:	d963      	bls.n	c64 <CONFIG_ISR_STACK_SIZE+0x464>
					conv->pad0_value = precision - (int)len;
     b9c:	ebaa 0303 	sub.w	r3, sl, r3
     ba0:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     ba2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     ba6:	e02b      	b.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     ba8:	9804      	ldr	r0, [sp, #16]
     baa:	b928      	cbnz	r0, bb8 <CONFIG_ISR_STACK_SIZE+0x3b8>
		char sign = 0;
     bac:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     bae:	f8df a180 	ldr.w	sl, [pc, #384]	; d30 <CONFIG_ISR_STACK_SIZE+0x530>
			bps = "(nil)";
     bb2:	f1aa 0905 	sub.w	r9, sl, #5
     bb6:	e023      	b.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     bb8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     bbc:	9300      	str	r3, [sp, #0]
     bbe:	ab0a      	add	r3, sp, #40	; 0x28
     bc0:	aa06      	add	r2, sp, #24
     bc2:	2100      	movs	r1, #0
     bc4:	f004 fde1 	bl	578a <encode_uint>
     bc8:	4681      	mov	r9, r0
				conv->altform_0c = true;
     bca:	f89d 301a 	ldrb.w	r3, [sp, #26]
     bce:	f043 0310 	orr.w	r3, r3, #16
     bd2:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     bd6:	2378      	movs	r3, #120	; 0x78
     bd8:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     bdc:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     bde:	e7ce      	b.n	b7e <CONFIG_ISR_STACK_SIZE+0x37e>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     be0:	4622      	mov	r2, r4
     be2:	9904      	ldr	r1, [sp, #16]
     be4:	a806      	add	r0, sp, #24
     be6:	f004 fe20 	bl	582a <store_count>
		char sign = 0;
     bea:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     bec:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     bf0:	f04f 0900 	mov.w	r9, #0
			}

			break;
     bf4:	e004      	b.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
		switch (conv->specifier) {
     bf6:	46d8      	mov	r8, fp
     bf8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     bfc:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     c00:	f1b9 0f00 	cmp.w	r9, #0
     c04:	f000 808d 	beq.w	d22 <CONFIG_ISR_STACK_SIZE+0x522>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     c08:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     c0c:	f1b8 0f00 	cmp.w	r8, #0
     c10:	d000      	beq.n	c14 <CONFIG_ISR_STACK_SIZE+0x414>
			nj_len += 1U;
     c12:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     c14:	f89d 201a 	ldrb.w	r2, [sp, #26]
     c18:	f012 0f10 	tst.w	r2, #16
     c1c:	d025      	beq.n	c6a <CONFIG_ISR_STACK_SIZE+0x46a>
			nj_len += 2U;
     c1e:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     c20:	9907      	ldr	r1, [sp, #28]
     c22:	440b      	add	r3, r1
		if (conv->pad_fp) {
     c24:	f012 0f40 	tst.w	r2, #64	; 0x40
     c28:	d001      	beq.n	c2e <CONFIG_ISR_STACK_SIZE+0x42e>
			nj_len += conv->pad0_pre_exp;
     c2a:	9a08      	ldr	r2, [sp, #32]
     c2c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     c2e:	2f00      	cmp	r7, #0
     c30:	dd31      	ble.n	c96 <CONFIG_ISR_STACK_SIZE+0x496>
			width -= (int)nj_len;
     c32:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     c34:	f89d 3018 	ldrb.w	r3, [sp, #24]
     c38:	f013 0f04 	tst.w	r3, #4
     c3c:	d12b      	bne.n	c96 <CONFIG_ISR_STACK_SIZE+0x496>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     c3e:	f013 0f40 	tst.w	r3, #64	; 0x40
     c42:	d017      	beq.n	c74 <CONFIG_ISR_STACK_SIZE+0x474>
					if (sign != 0) {
     c44:	f1b8 0f00 	cmp.w	r8, #0
     c48:	d017      	beq.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
						OUTC(sign);
     c4a:	4629      	mov	r1, r5
     c4c:	4640      	mov	r0, r8
     c4e:	47b0      	blx	r6
     c50:	2800      	cmp	r0, #0
     c52:	db6a      	blt.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
     c54:	3401      	adds	r4, #1
						sign = 0;
     c56:	46d8      	mov	r8, fp
					}
					pad = '0';
     c58:	f04f 0b30 	mov.w	fp, #48	; 0x30
     c5c:	e00f      	b.n	c7e <CONFIG_ISR_STACK_SIZE+0x47e>
		const char *bpe = buf + sizeof(buf);
     c5e:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     c62:	e7cd      	b.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
     c64:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     c68:	e7ca      	b.n	c00 <CONFIG_ISR_STACK_SIZE+0x400>
		} else if (conv->altform_0) {
     c6a:	f012 0f08 	tst.w	r2, #8
     c6e:	d0d7      	beq.n	c20 <CONFIG_ISR_STACK_SIZE+0x420>
			nj_len += 1U;
     c70:	3301      	adds	r3, #1
     c72:	e7d5      	b.n	c20 <CONFIG_ISR_STACK_SIZE+0x420>
				char pad = ' ';
     c74:	f04f 0b20 	mov.w	fp, #32
     c78:	e001      	b.n	c7e <CONFIG_ISR_STACK_SIZE+0x47e>
					pad = '0';
     c7a:	f04f 0b30 	mov.w	fp, #48	; 0x30
     c7e:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     c80:	1e5f      	subs	r7, r3, #1
     c82:	2b00      	cmp	r3, #0
     c84:	dd07      	ble.n	c96 <CONFIG_ISR_STACK_SIZE+0x496>
					OUTC(pad);
     c86:	4629      	mov	r1, r5
     c88:	4658      	mov	r0, fp
     c8a:	47b0      	blx	r6
     c8c:	2800      	cmp	r0, #0
     c8e:	db4c      	blt.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
     c90:	3401      	adds	r4, #1
				while (width-- > 0) {
     c92:	463b      	mov	r3, r7
     c94:	e7f4      	b.n	c80 <CONFIG_ISR_STACK_SIZE+0x480>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     c96:	f1b8 0f00 	cmp.w	r8, #0
     c9a:	d005      	beq.n	ca8 <CONFIG_ISR_STACK_SIZE+0x4a8>
			OUTC(sign);
     c9c:	4629      	mov	r1, r5
     c9e:	4640      	mov	r0, r8
     ca0:	47b0      	blx	r6
     ca2:	2800      	cmp	r0, #0
     ca4:	db41      	blt.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
     ca6:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     ca8:	f89d 301a 	ldrb.w	r3, [sp, #26]
     cac:	f3c3 1200 	ubfx	r2, r3, #4, #1
     cb0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     cb4:	431a      	orrs	r2, r3
     cb6:	d005      	beq.n	cc4 <CONFIG_ISR_STACK_SIZE+0x4c4>
				OUTC('0');
     cb8:	4629      	mov	r1, r5
     cba:	2030      	movs	r0, #48	; 0x30
     cbc:	47b0      	blx	r6
     cbe:	2800      	cmp	r0, #0
     cc0:	db33      	blt.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
     cc2:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     cc4:	f89d 301a 	ldrb.w	r3, [sp, #26]
     cc8:	f013 0f10 	tst.w	r3, #16
     ccc:	d006      	beq.n	cdc <CONFIG_ISR_STACK_SIZE+0x4dc>
				OUTC(conv->specifier);
     cce:	4629      	mov	r1, r5
     cd0:	f89d 001b 	ldrb.w	r0, [sp, #27]
     cd4:	47b0      	blx	r6
     cd6:	2800      	cmp	r0, #0
     cd8:	db27      	blt.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
     cda:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     cdc:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     cde:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     ce2:	2b00      	cmp	r3, #0
     ce4:	dd07      	ble.n	cf6 <CONFIG_ISR_STACK_SIZE+0x4f6>
				OUTC('0');
     ce6:	4629      	mov	r1, r5
     ce8:	2030      	movs	r0, #48	; 0x30
     cea:	47b0      	blx	r6
     cec:	2800      	cmp	r0, #0
     cee:	db1c      	blt.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
     cf0:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     cf2:	4643      	mov	r3, r8
     cf4:	e7f3      	b.n	cde <CONFIG_ISR_STACK_SIZE+0x4de>
			}

			OUTS(bps, bpe);
     cf6:	4653      	mov	r3, sl
     cf8:	464a      	mov	r2, r9
     cfa:	4629      	mov	r1, r5
     cfc:	4630      	mov	r0, r6
     cfe:	f004 fdb3 	bl	5868 <outs>
     d02:	2800      	cmp	r0, #0
     d04:	db11      	blt.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
     d06:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     d08:	2f00      	cmp	r7, #0
     d0a:	dd07      	ble.n	d1c <CONFIG_ISR_STACK_SIZE+0x51c>
			OUTC(' ');
     d0c:	4629      	mov	r1, r5
     d0e:	2020      	movs	r0, #32
     d10:	47b0      	blx	r6
     d12:	2800      	cmp	r0, #0
     d14:	db09      	blt.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
     d16:	3401      	adds	r4, #1
			--width;
     d18:	3f01      	subs	r7, #1
     d1a:	e7f5      	b.n	d08 <CONFIG_ISR_STACK_SIZE+0x508>
		fp = extract_conversion(conv, sp);
     d1c:	f8dd 9008 	ldr.w	r9, [sp, #8]
     d20:	e544      	b.n	7ac <z_cbvprintf_impl+0x10>
     d22:	f8dd 9008 	ldr.w	r9, [sp, #8]
     d26:	e541      	b.n	7ac <z_cbvprintf_impl+0x10>
		}
	}

	return count;
     d28:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     d2a:	b011      	add	sp, #68	; 0x44
     d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d30:	000072f1 	.word	0x000072f1

00000d34 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     d34:	b508      	push	{r3, lr}
     d36:	f04f 0220 	mov.w	r2, #32
     d3a:	f3ef 8311 	mrs	r3, BASEPRI
     d3e:	f382 8812 	msr	BASEPRI_MAX, r2
     d42:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     d46:	f004 fe5c 	bl	5a02 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     d4a:	4803      	ldr	r0, [pc, #12]	; (d58 <sys_reboot+0x24>)
     d4c:	f004 f9df 	bl	510e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     d50:	f000 fb12 	bl	1378 <arch_cpu_idle>
     d54:	e7fc      	b.n	d50 <sys_reboot+0x1c>
     d56:	bf00      	nop
     d58:	000072f4 	.word	0x000072f4

00000d5c <nrfx_coredep_delay_us>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     d5c:	b168      	cbz	r0, d7a <nrfx_coredep_delay_us+0x1e>
{
     d5e:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     d60:	4a06      	ldr	r2, [pc, #24]	; (d7c <nrfx_coredep_delay_us+0x20>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     d62:	4b07      	ldr	r3, [pc, #28]	; (d80 <nrfx_coredep_delay_us+0x24>)
     d64:	681b      	ldr	r3, [r3, #0]
     d66:	4907      	ldr	r1, [pc, #28]	; (d84 <nrfx_coredep_delay_us+0x28>)
     d68:	fba1 1303 	umull	r1, r3, r1, r3
     d6c:	0c9b      	lsrs	r3, r3, #18
    delay_cycles(cycles);
     d6e:	fb00 f003 	mul.w	r0, r0, r3
     d72:	f042 0301 	orr.w	r3, r2, #1
     d76:	4798      	blx	r3
}
     d78:	bd08      	pop	{r3, pc}
     d7a:	4770      	bx	lr
     d7c:	000071a0 	.word	0x000071a0
     d80:	20000048 	.word	0x20000048
     d84:	431bde83 	.word	0x431bde83

00000d88 <nordicsemi_nrf53_init>:
     d88:	f04f 0320 	mov.w	r3, #32
     d8c:	f3ef 8c11 	mrs	ip, BASEPRI
     d90:	f383 8812 	msr	BASEPRI_MAX, r3
     d94:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     d98:	2101      	movs	r1, #1
     d9a:	4b12      	ldr	r3, [pc, #72]	; (de4 <nordicsemi_nrf53_init+0x5c>)
     d9c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     da0:	4a11      	ldr	r2, [pc, #68]	; (de8 <nordicsemi_nrf53_init+0x60>)
     da2:	2302      	movs	r3, #2
     da4:	f8c2 36d0 	str.w	r3, [r2, #1744]	; 0x6d0

#if NRF_GPIO_HAS_SEL
NRF_STATIC_INLINE void nrf_gpio_pin_control_select(uint32_t pin_number, nrf_gpio_pin_sel_t ctrl)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     da8:	4810      	ldr	r0, [pc, #64]	; (dec <nordicsemi_nrf53_init+0x64>)
     daa:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     dae:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     db2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     db6:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     dba:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
     dbe:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (ctrl << GPIO_PIN_CNF_MCUSEL_Pos);
     dc2:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     dc6:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     dca:	f8c2 1704 	str.w	r1, [r2, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     dce:	f8c2 1904 	str.w	r1, [r2, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     dd2:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	__asm__ volatile(
     dd6:	f38c 8811 	msr	BASEPRI, ip
     dda:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     dde:	2000      	movs	r0, #0
     de0:	4770      	bx	lr
     de2:	bf00      	nop
     de4:	50001000 	.word	0x50001000
     de8:	50004000 	.word	0x50004000
     dec:	50842500 	.word	0x50842500

00000df0 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
     df0:	2806      	cmp	r0, #6
     df2:	d000      	beq.n	df6 <pm_state_set+0x6>
     df4:	4770      	bx	lr
{
     df6:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_regulators_system_off(NRF_REGULATORS);
     df8:	4801      	ldr	r0, [pc, #4]	; (e00 <pm_state_set+0x10>)
     dfa:	f004 fd54 	bl	58a6 <nrf_regulators_system_off>
     dfe:	bf00      	nop
     e00:	50004000 	.word	0x50004000

00000e04 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     e04:	f002 b862 	b.w	2ecc <SystemInit>

00000e08 <minimal_hexdump_line_print>:
{
	vprintk(fmt, ap);
}

static void minimal_hexdump_line_print(const char *data, size_t length)
{
     e08:	b570      	push	{r4, r5, r6, lr}
     e0a:	4606      	mov	r6, r0
     e0c:	460d      	mov	r5, r1
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
     e0e:	2400      	movs	r4, #0
     e10:	e003      	b.n	e1a <minimal_hexdump_line_print+0x12>
		if (i < length) {
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
		} else {
			printk("   ");
     e12:	4814      	ldr	r0, [pc, #80]	; (e64 <minimal_hexdump_line_print+0x5c>)
     e14:	f004 f97b 	bl	510e <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
     e18:	3401      	adds	r4, #1
     e1a:	2c07      	cmp	r4, #7
     e1c:	d806      	bhi.n	e2c <minimal_hexdump_line_print+0x24>
		if (i < length) {
     e1e:	42ac      	cmp	r4, r5
     e20:	d2f7      	bcs.n	e12 <minimal_hexdump_line_print+0xa>
			printk("%02x ", (unsigned char)data[i] & 0xFFu);
     e22:	5d31      	ldrb	r1, [r6, r4]
     e24:	4810      	ldr	r0, [pc, #64]	; (e68 <minimal_hexdump_line_print+0x60>)
     e26:	f004 f972 	bl	510e <printk>
     e2a:	e7f5      	b.n	e18 <minimal_hexdump_line_print+0x10>
		}
	}

	printk("|");
     e2c:	480f      	ldr	r0, [pc, #60]	; (e6c <minimal_hexdump_line_print+0x64>)
     e2e:	f004 f96e 	bl	510e <printk>

	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
     e32:	2400      	movs	r4, #0
     e34:	e003      	b.n	e3e <minimal_hexdump_line_print+0x36>
		if (i < length) {
			unsigned char c = data[i];

			printk("%c", isprint((int)c) != 0 ? c : '.');
     e36:	480e      	ldr	r0, [pc, #56]	; (e70 <minimal_hexdump_line_print+0x68>)
     e38:	f004 f969 	bl	510e <printk>
	for (size_t i = 0U; i < HEXDUMP_BYTES_IN_LINE; i++) {
     e3c:	3401      	adds	r4, #1
     e3e:	2c07      	cmp	r4, #7
     e40:	d80c      	bhi.n	e5c <minimal_hexdump_line_print+0x54>
		if (i < length) {
     e42:	42ac      	cmp	r4, r5
     e44:	d206      	bcs.n	e54 <minimal_hexdump_line_print+0x4c>
			unsigned char c = data[i];
     e46:	5d31      	ldrb	r1, [r6, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
     e48:	f1a1 0320 	sub.w	r3, r1, #32
			printk("%c", isprint((int)c) != 0 ? c : '.');
     e4c:	2b5e      	cmp	r3, #94	; 0x5e
     e4e:	d9f2      	bls.n	e36 <minimal_hexdump_line_print+0x2e>
     e50:	212e      	movs	r1, #46	; 0x2e
     e52:	e7f0      	b.n	e36 <minimal_hexdump_line_print+0x2e>
		} else {
			printk(" ");
     e54:	4807      	ldr	r0, [pc, #28]	; (e74 <minimal_hexdump_line_print+0x6c>)
     e56:	f004 f95a 	bl	510e <printk>
     e5a:	e7ef      	b.n	e3c <minimal_hexdump_line_print+0x34>
		}
	}
	printk("\n");
     e5c:	4806      	ldr	r0, [pc, #24]	; (e78 <minimal_hexdump_line_print+0x70>)
     e5e:	f004 f956 	bl	510e <printk>
}
     e62:	bd70      	pop	{r4, r5, r6, pc}
     e64:	0000732c 	.word	0x0000732c
     e68:	00007324 	.word	0x00007324
     e6c:	00007330 	.word	0x00007330
     e70:	00007334 	.word	0x00007334
     e74:	00007328 	.word	0x00007328
     e78:	00007bc0 	.word	0x00007bc0

00000e7c <z_log_minimal_hexdump_print>:

void z_log_minimal_hexdump_print(int level, const void *data, size_t size)
{
     e7c:	b570      	push	{r4, r5, r6, lr}
     e7e:	4606      	mov	r6, r0
     e80:	460d      	mov	r5, r1
     e82:	4614      	mov	r4, r2
	const char *data_buffer = (const char *)data;
	while (size > 0U) {
     e84:	e001      	b.n	e8a <z_log_minimal_hexdump_print+0xe>

		if (size < HEXDUMP_BYTES_IN_LINE) {
			break;
		}

		size -= HEXDUMP_BYTES_IN_LINE;
     e86:	3c08      	subs	r4, #8
		data_buffer += HEXDUMP_BYTES_IN_LINE;
     e88:	3508      	adds	r5, #8
	while (size > 0U) {
     e8a:	b164      	cbz	r4, ea6 <z_log_minimal_hexdump_print+0x2a>
		printk("%c: ", z_log_minimal_level_to_char(level));
     e8c:	4630      	mov	r0, r6
     e8e:	f004 fd17 	bl	58c0 <z_log_minimal_level_to_char>
     e92:	4601      	mov	r1, r0
     e94:	4804      	ldr	r0, [pc, #16]	; (ea8 <z_log_minimal_hexdump_print+0x2c>)
     e96:	f004 f93a 	bl	510e <printk>
		minimal_hexdump_line_print(data_buffer, size);
     e9a:	4621      	mov	r1, r4
     e9c:	4628      	mov	r0, r5
     e9e:	f7ff ffb3 	bl	e08 <minimal_hexdump_line_print>
		if (size < HEXDUMP_BYTES_IN_LINE) {
     ea2:	2c07      	cmp	r4, #7
     ea4:	d8ef      	bhi.n	e86 <z_log_minimal_hexdump_print+0xa>
	}
}
     ea6:	bd70      	pop	{r4, r5, r6, pc}
     ea8:	00007338 	.word	0x00007338

00000eac <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     eac:	b570      	push	{r4, r5, r6, lr}
     eae:	4605      	mov	r5, r0
	__asm__ volatile(
     eb0:	f04f 0320 	mov.w	r3, #32
     eb4:	f3ef 8611 	mrs	r6, BASEPRI
     eb8:	f383 8812 	msr	BASEPRI_MAX, r3
     ebc:	f3bf 8f6f 	isb	sy
     ec0:	4b0e      	ldr	r3, [pc, #56]	; (efc <pm_state_notify+0x50>)
     ec2:	681c      	ldr	r4, [r3, #0]
     ec4:	e00d      	b.n	ee2 <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
     ec6:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
     ec8:	b13a      	cbz	r2, eda <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     eca:	4b0d      	ldr	r3, [pc, #52]	; (f00 <pm_state_notify+0x54>)
     ecc:	7d1b      	ldrb	r3, [r3, #20]
     ece:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     ed2:	490c      	ldr	r1, [pc, #48]	; (f04 <pm_state_notify+0x58>)
     ed4:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
     ed8:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     eda:	4623      	mov	r3, r4
	return node->next;
     edc:	6824      	ldr	r4, [r4, #0]
     ede:	b104      	cbz	r4, ee2 <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     ee0:	b123      	cbz	r3, eec <pm_state_notify+0x40>
     ee2:	b12c      	cbz	r4, ef0 <pm_state_notify+0x44>
		if (entering_state) {
     ee4:	2d00      	cmp	r5, #0
     ee6:	d0ee      	beq.n	ec6 <pm_state_notify+0x1a>
			callback = notifier->state_entry;
     ee8:	6862      	ldr	r2, [r4, #4]
     eea:	e7ed      	b.n	ec8 <pm_state_notify+0x1c>
     eec:	461c      	mov	r4, r3
     eee:	e7f8      	b.n	ee2 <pm_state_notify+0x36>
	__asm__ volatile(
     ef0:	f386 8811 	msr	BASEPRI, r6
     ef4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     ef8:	bd70      	pop	{r4, r5, r6, pc}
     efa:	bf00      	nop
     efc:	2000033c 	.word	0x2000033c
     f00:	2000095c 	.word	0x2000095c
     f04:	20000330 	.word	0x20000330

00000f08 <pm_exit_pos_ops>:
{
     f08:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
     f0a:	4b06      	ldr	r3, [pc, #24]	; (f24 <pm_exit_pos_ops+0x1c>)
     f0c:	b123      	cbz	r3, f18 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
     f0e:	7841      	ldrb	r1, [r0, #1]
     f10:	7800      	ldrb	r0, [r0, #0]
     f12:	f004 fccf 	bl	58b4 <pm_state_exit_post_ops>
}
     f16:	bd08      	pop	{r3, pc}
     f18:	2300      	movs	r3, #0
     f1a:	f383 8811 	msr	BASEPRI, r3
     f1e:	f3bf 8f6f 	isb	sy
     f22:	e7f8      	b.n	f16 <pm_exit_pos_ops+0xe>
     f24:	000058b5 	.word	0x000058b5

00000f28 <pm_system_resume>:

void pm_system_resume(void)
{
     f28:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     f2a:	4b0e      	ldr	r3, [pc, #56]	; (f64 <pm_system_resume+0x3c>)
     f2c:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     f2e:	4621      	mov	r1, r4
     f30:	480d      	ldr	r0, [pc, #52]	; (f68 <pm_system_resume+0x40>)
     f32:	f004 fce4 	bl	58fe <atomic_test_and_clear_bit>
     f36:	b900      	cbnz	r0, f3a <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
     f38:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
     f3a:	0065      	lsls	r5, r4, #1
     f3c:	eb04 0044 	add.w	r0, r4, r4, lsl #1
     f40:	4e0a      	ldr	r6, [pc, #40]	; (f6c <pm_system_resume+0x44>)
     f42:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     f46:	f7ff ffdf 	bl	f08 <pm_exit_pos_ops>
		pm_state_notify(false);
     f4a:	2000      	movs	r0, #0
     f4c:	f7ff ffae 	bl	eac <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     f50:	192b      	adds	r3, r5, r4
     f52:	0099      	lsls	r1, r3, #2
     f54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     f58:	2200      	movs	r2, #0
     f5a:	5072      	str	r2, [r6, r1]
     f5c:	605a      	str	r2, [r3, #4]
     f5e:	609a      	str	r2, [r3, #8]
}
     f60:	e7ea      	b.n	f38 <pm_system_resume+0x10>
     f62:	bf00      	nop
     f64:	2000095c 	.word	0x2000095c
     f68:	20000344 	.word	0x20000344
     f6c:	20000330 	.word	0x20000330

00000f70 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f72:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
     f74:	4b38      	ldr	r3, [pc, #224]	; (1058 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x58>)
     f76:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
     f78:	f04f 0320 	mov.w	r3, #32
     f7c:	f3ef 8611 	mrs	r6, BASEPRI
     f80:	f383 8812 	msr	BASEPRI_MAX, r3
     f84:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     f88:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     f8c:	4b33      	ldr	r3, [pc, #204]	; (105c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5c>)
     f8e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
     f92:	2b00      	cmp	r3, #0
     f94:	d039      	beq.n	100a <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0xa>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     f96:	4b32      	ldr	r3, [pc, #200]	; (1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>)
     f98:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
     f9c:	4f2f      	ldr	r7, [pc, #188]	; (105c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x5c>)
     f9e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
     fa2:	eb07 0382 	add.w	r3, r7, r2, lsl #2
     fa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     faa:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     fae:	2300      	movs	r3, #0
     fb0:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
     fb4:	f386 8811 	msr	BASEPRI, r6
     fb8:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     fbc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     fc0:	4a27      	ldr	r2, [pc, #156]	; (1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>)
     fc2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     fc6:	2b00      	cmp	r3, #0
     fc8:	d044      	beq.n	1054 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x54>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
     fca:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
     fce:	d12b      	bne.n	1028 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x28>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     fd0:	f003 f9d2 	bl	4378 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     fd4:	2001      	movs	r0, #1
     fd6:	f7ff ff69 	bl	eac <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
     fda:	4621      	mov	r1, r4
     fdc:	4821      	ldr	r0, [pc, #132]	; (1064 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x64>)
     fde:	f004 fca6 	bl	592e <atomic_set_bit>
	if (pm_state_set != NULL) {
     fe2:	4b21      	ldr	r3, [pc, #132]	; (1068 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x68>)
     fe4:	b15b      	cbz	r3, ffe <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
     fe6:	4a1e      	ldr	r2, [pc, #120]	; (1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>)
     fe8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     fec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     ff0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     ff4:	7859      	ldrb	r1, [r3, #1]
     ff6:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
     ffa:	f7ff fef9 	bl	df0 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
     ffe:	f7ff ff93 	bl	f28 <pm_system_resume>
	k_sched_unlock();
    1002:	f003 fbbb 	bl	477c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    1006:	2001      	movs	r0, #1
}
    1008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
    100a:	4601      	mov	r1, r0
    100c:	4620      	mov	r0, r4
    100e:	f000 f831 	bl	1074 <pm_policy_next_state>
		if (info != NULL) {
    1012:	2800      	cmp	r0, #0
    1014:	d0ce      	beq.n	fb4 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    1016:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    101a:	4b11      	ldr	r3, [pc, #68]	; (1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>)
    101c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1020:	c807      	ldmia	r0, {r0, r1, r2}
    1022:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    1026:	e7c5      	b.n	fb4 <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
    1028:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    102c:	4b0c      	ldr	r3, [pc, #48]	; (1060 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x60>)
    102e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1032:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1034:	0c41      	lsrs	r1, r0, #17
    1036:	03c0      	lsls	r0, r0, #15
    1038:	4b0c      	ldr	r3, [pc, #48]	; (106c <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x6c>)
    103a:	18c0      	adds	r0, r0, r3
    103c:	4a0c      	ldr	r2, [pc, #48]	; (1070 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x70>)
    103e:	f04f 0300 	mov.w	r3, #0
    1042:	f141 0100 	adc.w	r1, r1, #0
    1046:	f7ff f885 	bl	154 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    104a:	2101      	movs	r1, #1
    104c:	1a28      	subs	r0, r5, r0
    104e:	f005 fe9b 	bl	6d88 <z_set_timeout_expiry>
    1052:	e7bd      	b.n	fd0 <pm_system_suspend+0x60>
		return false;
    1054:	2000      	movs	r0, #0
    1056:	e7d7      	b.n	1008 <CONFIG_NORDIC_QSPI_NOR_FLASH_LAYOUT_PAGE_SIZE+0x8>
    1058:	2000095c 	.word	0x2000095c
    105c:	20000324 	.word	0x20000324
    1060:	20000330 	.word	0x20000330
    1064:	20000344 	.word	0x20000344
    1068:	00000df1 	.word	0x00000df1
    106c:	000f423f 	.word	0x000f423f
    1070:	000f4240 	.word	0x000f4240

00001074 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    1074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1078:	b082      	sub	sp, #8
    107a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    107c:	a901      	add	r1, sp, #4
    107e:	f000 f845 	bl	110c <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1082:	1e44      	subs	r4, r0, #1
    1084:	b224      	sxth	r4, r4
    1086:	e007      	b.n	1098 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
    1088:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
    108c:	d033      	beq.n	10f6 <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
    108e:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
    1090:	45b0      	cmp	r8, r6
    1092:	d930      	bls.n	10f6 <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1094:	3c01      	subs	r4, #1
    1096:	b224      	sxth	r4, r4
    1098:	2c00      	cmp	r4, #0
    109a:	db2b      	blt.n	10f4 <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
    109c:	9b01      	ldr	r3, [sp, #4]
    109e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    10a2:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
    10a6:	7869      	ldrb	r1, [r5, #1]
    10a8:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
    10ac:	f004 fc4e 	bl	594c <pm_policy_state_lock_is_active>
    10b0:	2800      	cmp	r0, #0
    10b2:	d1ef      	bne.n	1094 <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
    10b4:	6868      	ldr	r0, [r5, #4]
    10b6:	0c41      	lsrs	r1, r0, #17
    10b8:	03c0      	lsls	r0, r0, #15
    10ba:	4f11      	ldr	r7, [pc, #68]	; (1100 <pm_policy_next_state+0x8c>)
    10bc:	19c0      	adds	r0, r0, r7
    10be:	4a11      	ldr	r2, [pc, #68]	; (1104 <pm_policy_next_state+0x90>)
    10c0:	f04f 0300 	mov.w	r3, #0
    10c4:	f141 0100 	adc.w	r1, r1, #0
    10c8:	f7ff f844 	bl	154 <__aeabi_uldivmod>
    10cc:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
    10ce:	68ab      	ldr	r3, [r5, #8]
    10d0:	0c59      	lsrs	r1, r3, #17
    10d2:	03db      	lsls	r3, r3, #15
    10d4:	19d8      	adds	r0, r3, r7
    10d6:	4a0b      	ldr	r2, [pc, #44]	; (1104 <pm_policy_next_state+0x90>)
    10d8:	f04f 0300 	mov.w	r3, #0
    10dc:	f141 0100 	adc.w	r1, r1, #0
    10e0:	f7ff f838 	bl	154 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    10e4:	4b08      	ldr	r3, [pc, #32]	; (1108 <pm_policy_next_state+0x94>)
    10e6:	681b      	ldr	r3, [r3, #0]
    10e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    10ec:	d0cc      	beq.n	1088 <pm_policy_next_state+0x14>
    10ee:	4283      	cmp	r3, r0
    10f0:	d8ca      	bhi.n	1088 <pm_policy_next_state+0x14>
    10f2:	e7cf      	b.n	1094 <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
    10f4:	2500      	movs	r5, #0
}
    10f6:	4628      	mov	r0, r5
    10f8:	b002      	add	sp, #8
    10fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10fe:	bf00      	nop
    1100:	000f423f 	.word	0x000f423f
    1104:	000f4240 	.word	0x000f4240
    1108:	20000004 	.word	0x20000004

0000110c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    110c:	b908      	cbnz	r0, 1112 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    110e:	4b02      	ldr	r3, [pc, #8]	; (1118 <pm_state_cpu_get_all+0xc>)
    1110:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1112:	2000      	movs	r0, #0
    1114:	4770      	bx	lr
    1116:	bf00      	nop
    1118:	00007344 	.word	0x00007344

0000111c <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    111c:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    111e:	4802      	ldr	r0, [pc, #8]	; (1128 <nrf_cc3xx_platform_abort_init+0xc>)
    1120:	f003 fe4a 	bl	4db8 <nrf_cc3xx_platform_set_abort>
}
    1124:	bd08      	pop	{r3, pc}
    1126:	bf00      	nop
    1128:	00007344 	.word	0x00007344

0000112c <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
    112c:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    1130:	d017      	beq.n	1162 <mutex_flags_unknown+0x36>
    1132:	d80c      	bhi.n	114e <mutex_flags_unknown+0x22>
    1134:	f640 63ba 	movw	r3, #3770	; 0xeba
    1138:	4298      	cmp	r0, r3
    113a:	d014      	beq.n	1166 <mutex_flags_unknown+0x3a>
    113c:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    1140:	d013      	beq.n	116a <mutex_flags_unknown+0x3e>
    1142:	283a      	cmp	r0, #58	; 0x3a
    1144:	d001      	beq.n	114a <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
    1146:	2001      	movs	r0, #1
    1148:	4770      	bx	lr
    switch(flags){
    114a:	2000      	movs	r0, #0
    114c:	4770      	bx	lr
    114e:	4b09      	ldr	r3, [pc, #36]	; (1174 <mutex_flags_unknown+0x48>)
    1150:	4298      	cmp	r0, r3
    1152:	d00c      	beq.n	116e <mutex_flags_unknown+0x42>
    1154:	4b08      	ldr	r3, [pc, #32]	; (1178 <mutex_flags_unknown+0x4c>)
    1156:	4298      	cmp	r0, r3
    1158:	d001      	beq.n	115e <mutex_flags_unknown+0x32>
            return true;
    115a:	2001      	movs	r0, #1
    }
}
    115c:	4770      	bx	lr
    switch(flags){
    115e:	2000      	movs	r0, #0
    1160:	4770      	bx	lr
    1162:	2000      	movs	r0, #0
    1164:	4770      	bx	lr
    1166:	2000      	movs	r0, #0
    1168:	4770      	bx	lr
    116a:	2000      	movs	r0, #0
    116c:	4770      	bx	lr
    116e:	2000      	movs	r0, #0
    1170:	4770      	bx	lr
    1172:	bf00      	nop
    1174:	3a00003a 	.word	0x3a00003a
    1178:	a95c5f2c 	.word	0xa95c5f2c

0000117c <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    117c:	b328      	cbz	r0, 11ca <mutex_unlock_platform+0x4e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    117e:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1180:	6843      	ldr	r3, [r0, #4]
    1182:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1186:	d00a      	beq.n	119e <mutex_unlock_platform+0x22>
    1188:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    118c:	d014      	beq.n	11b8 <mutex_unlock_platform+0x3c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    118e:	4912      	ldr	r1, [pc, #72]	; (11d8 <mutex_unlock_platform+0x5c>)
    1190:	428b      	cmp	r3, r1
    1192:	d01f      	beq.n	11d4 <mutex_unlock_platform+0x58>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    1194:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
    1196:	f002 ffd3 	bl	4140 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    119a:	2000      	movs	r0, #0
    119c:	e014      	b.n	11c8 <mutex_unlock_platform+0x4c>
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    119e:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    11a0:	2200      	movs	r2, #0
    11a2:	e8d3 1fef 	ldaex	r1, [r3]
    11a6:	2901      	cmp	r1, #1
    11a8:	d103      	bne.n	11b2 <mutex_unlock_platform+0x36>
    11aa:	e8c3 2fe0 	stlex	r0, r2, [r3]
    11ae:	2800      	cmp	r0, #0
    11b0:	d1f7      	bne.n	11a2 <mutex_unlock_platform+0x26>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11b2:	d10d      	bne.n	11d0 <mutex_unlock_platform+0x54>
    11b4:	4610      	mov	r0, r2
    11b6:	e007      	b.n	11c8 <mutex_unlock_platform+0x4c>
        nrf_mutex_unlock(NRF_MUTEX, *((uint8_t *)mutex->mutex));
    11b8:	6803      	ldr	r3, [r0, #0]
    11ba:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
}

NRF_STATIC_INLINE void nrf_mutex_unlock(NRF_MUTEX_Type * p_reg, uint8_t mutex)
{
    p_reg->MUTEX[mutex] = MUTEX_MUTEX_MUTEX_Unlocked;
    11bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
    11c0:	2000      	movs	r0, #0
    11c2:	4a06      	ldr	r2, [pc, #24]	; (11dc <mutex_unlock_platform+0x60>)
    11c4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    }
}
    11c8:	bd08      	pop	{r3, pc}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    11ca:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    11ce:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    11d0:	4803      	ldr	r0, [pc, #12]	; (11e0 <mutex_unlock_platform+0x64>)
    11d2:	e7f9      	b.n	11c8 <mutex_unlock_platform+0x4c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    11d4:	4803      	ldr	r0, [pc, #12]	; (11e4 <mutex_unlock_platform+0x68>)
    11d6:	e7f7      	b.n	11c8 <mutex_unlock_platform+0x4c>
    11d8:	a95c5f2c 	.word	0xa95c5f2c
    11dc:	50030000 	.word	0x50030000
    11e0:	ffff8fe9 	.word	0xffff8fe9
    11e4:	ffff8fea 	.word	0xffff8fea

000011e8 <mutex_lock_platform>:
    if(mutex == NULL) {
    11e8:	b388      	cbz	r0, 124e <mutex_lock_platform+0x66>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    11ea:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    11ec:	6843      	ldr	r3, [r0, #4]
    11ee:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    11f2:	d00f      	beq.n	1214 <mutex_lock_platform+0x2c>
    11f4:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    11f8:	d019      	beq.n	122e <mutex_lock_platform+0x46>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    11fa:	4916      	ldr	r1, [pc, #88]	; (1254 <mutex_lock_platform+0x6c>)
    11fc:	428b      	cmp	r3, r1
    11fe:	d024      	beq.n	124a <mutex_lock_platform+0x62>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1200:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    120a:	f002 ff15 	bl	4038 <z_impl_k_mutex_lock>
        if (ret == 0) {
    120e:	b168      	cbz	r0, 122c <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    1210:	4811      	ldr	r0, [pc, #68]	; (1258 <mutex_lock_platform+0x70>)
    1212:	e00b      	b.n	122c <mutex_lock_platform+0x44>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    1214:	6803      	ldr	r3, [r0, #0]
    1216:	2201      	movs	r2, #1
    1218:	e8d3 1fef 	ldaex	r1, [r3]
    121c:	2900      	cmp	r1, #0
    121e:	d103      	bne.n	1228 <mutex_lock_platform+0x40>
    1220:	e8c3 2fe0 	stlex	r0, r2, [r3]
    1224:	2800      	cmp	r0, #0
    1226:	d1f7      	bne.n	1218 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1228:	d10b      	bne.n	1242 <mutex_lock_platform+0x5a>
    122a:	2000      	movs	r0, #0
}
    122c:	bd08      	pop	{r3, pc}
        return nrf_mutex_lock(NRF_MUTEX, *((uint8_t *)mutex->mutex)) ?
    122e:	6803      	ldr	r3, [r0, #0]
    1230:	781b      	ldrb	r3, [r3, #0]
    return (p_reg->MUTEX[mutex] == MUTEX_MUTEX_MUTEX_Unlocked);
    1232:	f503 7380 	add.w	r3, r3, #256	; 0x100
    1236:	4a09      	ldr	r2, [pc, #36]	; (125c <mutex_lock_platform+0x74>)
    1238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                       NRF_CC3XX_PLATFORM_SUCCESS :
    123c:	b91b      	cbnz	r3, 1246 <mutex_lock_platform+0x5e>
    123e:	2000      	movs	r0, #0
    1240:	e7f4      	b.n	122c <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1242:	4805      	ldr	r0, [pc, #20]	; (1258 <mutex_lock_platform+0x70>)
    1244:	e7f2      	b.n	122c <mutex_lock_platform+0x44>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1246:	4804      	ldr	r0, [pc, #16]	; (1258 <mutex_lock_platform+0x70>)
    1248:	e7f0      	b.n	122c <mutex_lock_platform+0x44>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    124a:	4805      	ldr	r0, [pc, #20]	; (1260 <mutex_lock_platform+0x78>)
    124c:	e7ee      	b.n	122c <mutex_lock_platform+0x44>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    124e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1252:	4770      	bx	lr
    1254:	a95c5f2c 	.word	0xa95c5f2c
    1258:	ffff8fe9 	.word	0xffff8fe9
    125c:	50030000 	.word	0x50030000
    1260:	ffff8fea 	.word	0xffff8fea

00001264 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1264:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1266:	4604      	mov	r4, r0
    1268:	b1a8      	cbz	r0, 1296 <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    126a:	6863      	ldr	r3, [r4, #4]
    126c:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    1270:	d010      	beq.n	1294 <mutex_free_platform+0x30>
    1272:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1276:	d00d      	beq.n	1294 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1278:	4a0c      	ldr	r2, [pc, #48]	; (12ac <mutex_free_platform+0x48>)
    127a:	4293      	cmp	r3, r2
    127c:	d00a      	beq.n	1294 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    127e:	f413 6f68 	tst.w	r3, #3712	; 0xe80
    1282:	d00d      	beq.n	12a0 <mutex_free_platform+0x3c>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1284:	4621      	mov	r1, r4
    1286:	480a      	ldr	r0, [pc, #40]	; (12b0 <mutex_free_platform+0x4c>)
    1288:	f005 fbbb 	bl	6a02 <k_mem_slab_free>
        mutex->mutex = NULL;
    128c:	2300      	movs	r3, #0
    128e:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1290:	4b06      	ldr	r3, [pc, #24]	; (12ac <mutex_free_platform+0x48>)
    1292:	6063      	str	r3, [r4, #4]
}
    1294:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1296:	4b07      	ldr	r3, [pc, #28]	; (12b4 <mutex_free_platform+0x50>)
    1298:	685b      	ldr	r3, [r3, #4]
    129a:	4807      	ldr	r0, [pc, #28]	; (12b8 <mutex_free_platform+0x54>)
    129c:	4798      	blx	r3
    129e:	e7e4      	b.n	126a <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    12a0:	2214      	movs	r2, #20
    12a2:	2100      	movs	r1, #0
    12a4:	6820      	ldr	r0, [r4, #0]
    12a6:	f004 fc73 	bl	5b90 <memset>
    12aa:	e7f1      	b.n	1290 <mutex_free_platform+0x2c>
    12ac:	a95c5f2c 	.word	0xa95c5f2c
    12b0:	20000848 	.word	0x20000848
    12b4:	200000d4 	.word	0x200000d4
    12b8:	0000734c 	.word	0x0000734c

000012bc <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    12bc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    12be:	4604      	mov	r4, r0
    12c0:	b368      	cbz	r0, 131e <mutex_init_platform+0x62>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    12c2:	6860      	ldr	r0, [r4, #4]
    12c4:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    12c8:	d028      	beq.n	131c <mutex_init_platform+0x60>
    12ca:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    12ce:	d025      	beq.n	131c <mutex_init_platform+0x60>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    12d0:	4b17      	ldr	r3, [pc, #92]	; (1330 <mutex_init_platform+0x74>)
    12d2:	4298      	cmp	r0, r3
    12d4:	d028      	beq.n	1328 <mutex_init_platform+0x6c>
        mutex_flags_unknown(mutex->flags)) {
    12d6:	f7ff ff29 	bl	112c <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    12da:	b1c0      	cbz	r0, 130e <mutex_init_platform+0x52>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    12dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    12e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    12e4:	4621      	mov	r1, r4
    12e6:	4813      	ldr	r0, [pc, #76]	; (1334 <mutex_init_platform+0x78>)
    12e8:	f002 fd78 	bl	3ddc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    12ec:	b908      	cbnz	r0, 12f2 <mutex_init_platform+0x36>
    12ee:	6823      	ldr	r3, [r4, #0]
    12f0:	b91b      	cbnz	r3, 12fa <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
    12f2:	4b11      	ldr	r3, [pc, #68]	; (1338 <mutex_init_platform+0x7c>)
    12f4:	685b      	ldr	r3, [r3, #4]
    12f6:	4811      	ldr	r0, [pc, #68]	; (133c <mutex_init_platform+0x80>)
    12f8:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    12fa:	2214      	movs	r2, #20
    12fc:	2100      	movs	r1, #0
    12fe:	6820      	ldr	r0, [r4, #0]
    1300:	f004 fc46 	bl	5b90 <memset>
        mutex->flags = 0;
    1304:	2300      	movs	r3, #0
    1306:	6063      	str	r3, [r4, #4]
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1308:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    130c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    130e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1310:	f005 fbe5 	bl	6ade <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1314:	6863      	ldr	r3, [r4, #4]
    1316:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    131a:	6063      	str	r3, [r4, #4]
}
    131c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    131e:	4b06      	ldr	r3, [pc, #24]	; (1338 <mutex_init_platform+0x7c>)
    1320:	685b      	ldr	r3, [r3, #4]
    1322:	4807      	ldr	r0, [pc, #28]	; (1340 <mutex_init_platform+0x84>)
    1324:	4798      	blx	r3
    1326:	e7cc      	b.n	12c2 <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1328:	6823      	ldr	r3, [r4, #0]
    132a:	2b00      	cmp	r3, #0
    132c:	d1d3      	bne.n	12d6 <mutex_init_platform+0x1a>
    132e:	e7d5      	b.n	12dc <mutex_init_platform+0x20>
    1330:	a95c5f2c 	.word	0xa95c5f2c
    1334:	20000848 	.word	0x20000848
    1338:	200000d4 	.word	0x200000d4
    133c:	00007374 	.word	0x00007374
    1340:	0000734c 	.word	0x0000734c

00001344 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1344:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1346:	2340      	movs	r3, #64	; 0x40
    1348:	2214      	movs	r2, #20
    134a:	4904      	ldr	r1, [pc, #16]	; (135c <nrf_cc3xx_platform_mutex_init+0x18>)
    134c:	4804      	ldr	r0, [pc, #16]	; (1360 <nrf_cc3xx_platform_mutex_init+0x1c>)
    134e:	f005 fb4a 	bl	69e6 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1352:	4904      	ldr	r1, [pc, #16]	; (1364 <nrf_cc3xx_platform_mutex_init+0x20>)
    1354:	4804      	ldr	r0, [pc, #16]	; (1368 <nrf_cc3xx_platform_mutex_init+0x24>)
    1356:	f003 fda1 	bl	4e9c <nrf_cc3xx_platform_set_mutexes>
}
    135a:	bd08      	pop	{r3, pc}
    135c:	20000348 	.word	0x20000348
    1360:	20000848 	.word	0x20000848
    1364:	000073a4 	.word	0x000073a4
    1368:	000073b8 	.word	0x000073b8

0000136c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    136c:	4901      	ldr	r1, [pc, #4]	; (1374 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    136e:	2210      	movs	r2, #16
	str	r2, [r1]
    1370:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1372:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1374:	e000ed10 	.word	0xe000ed10

00001378 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1378:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    137a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    137c:	f380 8811 	msr	BASEPRI, r0
	isb
    1380:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1384:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1388:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    138a:	b662      	cpsie	i
	isb
    138c:	f3bf 8f6f 	isb	sy

	bx	lr
    1390:	4770      	bx	lr
    1392:	bf00      	nop

00001394 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1394:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1396:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1398:	f381 8811 	msr	BASEPRI, r1

	wfe
    139c:	bf20      	wfe

	msr	BASEPRI, r0
    139e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    13a2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    13a4:	4770      	bx	lr
    13a6:	bf00      	nop

000013a8 <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    13a8:	b510      	push	{r4, lr}
    13aa:	b082      	sub	sp, #8
    13ac:	4604      	mov	r4, r0
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    13ae:	6883      	ldr	r3, [r0, #8]
    13b0:	9300      	str	r3, [sp, #0]
    13b2:	6843      	ldr	r3, [r0, #4]
    13b4:	6802      	ldr	r2, [r0, #0]
    13b6:	2145      	movs	r1, #69	; 0x45
    13b8:	480b      	ldr	r0, [pc, #44]	; (13e8 <esf_dump+0x40>)
    13ba:	f004 fa92 	bl	58e2 <z_log_minimal_printk>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    13be:	6963      	ldr	r3, [r4, #20]
    13c0:	9300      	str	r3, [sp, #0]
    13c2:	6923      	ldr	r3, [r4, #16]
    13c4:	68e2      	ldr	r2, [r4, #12]
    13c6:	2145      	movs	r1, #69	; 0x45
    13c8:	4808      	ldr	r0, [pc, #32]	; (13ec <esf_dump+0x44>)
    13ca:	f004 fa8a 	bl	58e2 <z_log_minimal_printk>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    13ce:	69e2      	ldr	r2, [r4, #28]
    13d0:	2145      	movs	r1, #69	; 0x45
    13d2:	4807      	ldr	r0, [pc, #28]	; (13f0 <esf_dump+0x48>)
    13d4:	f004 fa85 	bl	58e2 <z_log_minimal_printk>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    13d8:	69a2      	ldr	r2, [r4, #24]
    13da:	2145      	movs	r1, #69	; 0x45
    13dc:	4805      	ldr	r0, [pc, #20]	; (13f4 <esf_dump+0x4c>)
    13de:	f004 fa80 	bl	58e2 <z_log_minimal_printk>
		esf->basic.pc);
}
    13e2:	b002      	add	sp, #8
    13e4:	bd10      	pop	{r4, pc}
    13e6:	bf00      	nop
    13e8:	000073c8 	.word	0x000073c8
    13ec:	000073fc 	.word	0x000073fc
    13f0:	00007430 	.word	0x00007430
    13f4:	00007444 	.word	0x00007444

000013f8 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    13f8:	2800      	cmp	r0, #0
    13fa:	db07      	blt.n	140c <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13fc:	f000 021f 	and.w	r2, r0, #31
    1400:	0940      	lsrs	r0, r0, #5
    1402:	2301      	movs	r3, #1
    1404:	4093      	lsls	r3, r2
    1406:	4a02      	ldr	r2, [pc, #8]	; (1410 <__NVIC_EnableIRQ+0x18>)
    1408:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    140c:	4770      	bx	lr
    140e:	bf00      	nop
    1410:	e000e100 	.word	0xe000e100

00001414 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1414:	2800      	cmp	r0, #0
    1416:	db08      	blt.n	142a <__NVIC_SetPriority+0x16>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1418:	0149      	lsls	r1, r1, #5
    141a:	b2c9      	uxtb	r1, r1
    141c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    1420:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    1424:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    1428:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    142a:	f000 000f 	and.w	r0, r0, #15
    142e:	0149      	lsls	r1, r1, #5
    1430:	b2c9      	uxtb	r1, r1
    1432:	4b01      	ldr	r3, [pc, #4]	; (1438 <__NVIC_SetPriority+0x24>)
    1434:	5419      	strb	r1, [r3, r0]
  }
}
    1436:	4770      	bx	lr
    1438:	e000ed14 	.word	0xe000ed14

0000143c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    143c:	0942      	lsrs	r2, r0, #5
    143e:	4b05      	ldr	r3, [pc, #20]	; (1454 <arch_irq_is_enabled+0x18>)
    1440:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1444:	f000 001f 	and.w	r0, r0, #31
    1448:	2301      	movs	r3, #1
    144a:	fa03 f000 	lsl.w	r0, r3, r0
}
    144e:	4010      	ands	r0, r2
    1450:	4770      	bx	lr
    1452:	bf00      	nop
    1454:	e000e100 	.word	0xe000e100

00001458 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1458:	bf30      	wfi
    b z_SysNmiOnReset
    145a:	f7ff bffd 	b.w	1458 <z_SysNmiOnReset>
    145e:	bf00      	nop

00001460 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1460:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1462:	4b0b      	ldr	r3, [pc, #44]	; (1490 <z_arm_prep_c+0x30>)
    1464:	4a0b      	ldr	r2, [pc, #44]	; (1494 <z_arm_prep_c+0x34>)
    1466:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    146a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    146c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1470:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1474:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1478:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    147c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1480:	f002 fbf8 	bl	3c74 <z_bss_zero>
	z_data_copy();
    1484:	f003 fad2 	bl	4a2c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1488:	f000 fb2a 	bl	1ae0 <z_arm_interrupt_init>
	z_cstart();
    148c:	f002 fc4e 	bl	3d2c <z_cstart>
    1490:	e000ed00 	.word	0xe000ed00
    1494:	00000000 	.word	0x00000000

00001498 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1498:	4a0a      	ldr	r2, [pc, #40]	; (14c4 <arch_swap+0x2c>)
    149a:	6893      	ldr	r3, [r2, #8]
    149c:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    14a0:	4909      	ldr	r1, [pc, #36]	; (14c8 <arch_swap+0x30>)
    14a2:	6809      	ldr	r1, [r1, #0]
    14a4:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    14a8:	4908      	ldr	r1, [pc, #32]	; (14cc <arch_swap+0x34>)
    14aa:	684b      	ldr	r3, [r1, #4]
    14ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    14b0:	604b      	str	r3, [r1, #4]
    14b2:	2300      	movs	r3, #0
    14b4:	f383 8811 	msr	BASEPRI, r3
    14b8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    14bc:	6893      	ldr	r3, [r2, #8]
}
    14be:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    14c2:	4770      	bx	lr
    14c4:	2000095c 	.word	0x2000095c
    14c8:	00007b00 	.word	0x00007b00
    14cc:	e000ed00 	.word	0xe000ed00

000014d0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    14d0:	4914      	ldr	r1, [pc, #80]	; (1524 <z_arm_pendsv+0x54>)
    ldr r2, [r1, #_kernel_offset_to_current]
    14d2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    14d4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    14d8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    14da:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    14de:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    14e2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    14e4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    14e8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    14ec:	4f0e      	ldr	r7, [pc, #56]	; (1528 <z_arm_pendsv+0x58>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    14ee:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    14f2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    14f4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    14f6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    14f8:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    14fc:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    14fe:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1502:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    1506:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    150a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    150e:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    1512:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    1516:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    1518:	f004 fa47 	bl	59aa <configure_builtin_stack_guard>
    pop {r2, lr}
    151c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1520:	4770      	bx	lr
    1522:	0000      	.short	0x0000
    ldr r1, =_kernel
    1524:	2000095c 	.word	0x2000095c
    ldr v4, =_SCS_ICSR
    1528:	e000ed04 	.word	0xe000ed04

0000152c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    152c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1530:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1532:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1536:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    153a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    153c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1540:	2902      	cmp	r1, #2
    beq _oops
    1542:	d0ff      	beq.n	1544 <_oops>

00001544 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1544:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    1546:	f004 fa13 	bl	5970 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    154a:	bd01      	pop	{r0, pc}

0000154c <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    154c:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    154e:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    1552:	490e      	ldr	r1, [pc, #56]	; (158c <arch_new_thread+0x40>)
    1554:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    1558:	f021 0101 	bic.w	r1, r1, #1
    155c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    1560:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    1564:	9b01      	ldr	r3, [sp, #4]
    1566:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    156a:	9b02      	ldr	r3, [sp, #8]
    156c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    1570:	9b03      	ldr	r3, [sp, #12]
    1572:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1576:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    157a:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    157e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1580:	2300      	movs	r3, #0
    1582:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1586:	bc10      	pop	{r4}
    1588:	4770      	bx	lr
    158a:	bf00      	nop
    158c:	0000512b 	.word	0x0000512b

00001590 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1590:	4b09      	ldr	r3, [pc, #36]	; (15b8 <arch_switch_to_main_thread+0x28>)
    1592:	6098      	str	r0, [r3, #8]
#endif

#if defined(CONFIG_BUILTIN_STACK_GUARD)
	/* Set PSPLIM register for built-in stack guarding of main thread. */
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
	__set_PSPLIM(main_thread->stack_info.start);
    1594:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure PSPLIM is RAZ/WI
  (void)ProcStackPtrLimit;
#else
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1598:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    159c:	4610      	mov	r0, r2
    159e:	f381 8809 	msr	PSP, r1
    15a2:	2100      	movs	r1, #0
    15a4:	b663      	cpsie	if
    15a6:	f381 8811 	msr	BASEPRI, r1
    15aa:	f3bf 8f6f 	isb	sy
    15ae:	2200      	movs	r2, #0
    15b0:	2300      	movs	r3, #0
    15b2:	f003 fdba 	bl	512a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    15b6:	bf00      	nop
    15b8:	2000095c 	.word	0x2000095c

000015bc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    15bc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    15be:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    15c0:	4a0b      	ldr	r2, [pc, #44]	; (15f0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    15c2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    15c4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    15c6:	bf1e      	ittt	ne
	movne	r1, #0
    15c8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    15ca:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    15cc:	f005 fa6b 	blne	6aa6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    15d0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    15d2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    15d6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    15da:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    15de:	4905      	ldr	r1, [pc, #20]	; (15f4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    15e0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    15e2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    15e4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    15e6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    15ea:	4903      	ldr	r1, [pc, #12]	; (15f8 <_isr_wrapper+0x3c>)
	bx r1
    15ec:	4708      	bx	r1
    15ee:	0000      	.short	0x0000
	ldr r2, =_kernel
    15f0:	2000095c 	.word	0x2000095c
	ldr r1, =_sw_isr_table
    15f4:	00006eac 	.word	0x00006eac
	ldr r1, =z_arm_int_exit
    15f8:	000015fd 	.word	0x000015fd

000015fc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    15fc:	4b04      	ldr	r3, [pc, #16]	; (1610 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    15fe:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    1600:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    1602:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    1604:	d003      	beq.n	160e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    1606:	4903      	ldr	r1, [pc, #12]	; (1614 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    1608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    160c:	600a      	str	r2, [r1, #0]

0000160e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    160e:	4770      	bx	lr
	ldr r3, =_kernel
    1610:	2000095c 	.word	0x2000095c
	ldr r1, =_SCS_ICSR
    1614:	e000ed04 	.word	0xe000ed04

00001618 <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    1618:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    161a:	4b0d      	ldr	r3, [pc, #52]	; (1650 <z_arm_is_synchronous_svc+0x38>)
    161c:	695a      	ldr	r2, [r3, #20]
    161e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1622:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1624:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1628:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    162c:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1630:	695a      	ldr	r2, [r3, #20]
    1632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    1636:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1638:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    163c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1640:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1644:	4299      	cmp	r1, r3
    1646:	d001      	beq.n	164c <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    1648:	2000      	movs	r0, #0
    164a:	4770      	bx	lr
		return true;
    164c:	2001      	movs	r0, #1
}
    164e:	4770      	bx	lr
    1650:	e000ed00 	.word	0xe000ed00

00001654 <get_esf>:
	bool *nested_exc)
{
	bool alternative_state_exc = false;
	z_arch_esf_t *ptr_esf = NULL;

	*nested_exc = false;
    1654:	f04f 0c00 	mov.w	ip, #0
    1658:	f883 c000 	strb.w	ip, [r3]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    165c:	f002 4c7f 	and.w	ip, r2, #4278190080	; 0xff000000
    1660:	f1bc 4f7f 	cmp.w	ip, #4278190080	; 0xff000000
    1664:	d113      	bne.n	168e <get_esf+0x3a>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1666:	f002 0c0c 	and.w	ip, r2, #12
    166a:	f1bc 0f08 	cmp.w	ip, #8
    166e:	d004      	beq.n	167a <get_esf+0x26>
		return NULL;
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1670:	f012 0f08 	tst.w	r2, #8
    1674:	d008      	beq.n	1688 <get_esf+0x34>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
    1676:	4608      	mov	r0, r1
    1678:	4770      	bx	lr
{
    167a:	b508      	push	{r3, lr}
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    167c:	2145      	movs	r1, #69	; 0x45
    167e:	4805      	ldr	r0, [pc, #20]	; (1694 <get_esf+0x40>)
    1680:	f004 f92f 	bl	58e2 <z_log_minimal_printk>
		return NULL;
    1684:	2000      	movs	r0, #0
			*nested_exc = true;
		}
	}

	return ptr_esf;
}
    1686:	bd08      	pop	{r3, pc}
			*nested_exc = true;
    1688:	2201      	movs	r2, #1
    168a:	701a      	strb	r2, [r3, #0]
    168c:	4770      	bx	lr
		return NULL;
    168e:	2000      	movs	r0, #0
}
    1690:	4770      	bx	lr
    1692:	bf00      	nop
    1694:	00007478 	.word	0x00007478

00001698 <mem_manage_fault>:
{
    1698:	b570      	push	{r4, r5, r6, lr}
    169a:	4605      	mov	r5, r0
    169c:	460e      	mov	r6, r1
    169e:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    16a0:	2145      	movs	r1, #69	; 0x45
    16a2:	4831      	ldr	r0, [pc, #196]	; (1768 <mem_manage_fault+0xd0>)
    16a4:	f004 f91d 	bl	58e2 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    16a8:	4b30      	ldr	r3, [pc, #192]	; (176c <mem_manage_fault+0xd4>)
    16aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16ac:	f013 0f10 	tst.w	r3, #16
    16b0:	d130      	bne.n	1714 <mem_manage_fault+0x7c>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    16b2:	4b2e      	ldr	r3, [pc, #184]	; (176c <mem_manage_fault+0xd4>)
    16b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16b6:	f013 0f08 	tst.w	r3, #8
    16ba:	d130      	bne.n	171e <mem_manage_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    16bc:	4b2b      	ldr	r3, [pc, #172]	; (176c <mem_manage_fault+0xd4>)
    16be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16c0:	f013 0f02 	tst.w	r3, #2
    16c4:	d130      	bne.n	1728 <mem_manage_fault+0x90>
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    16c6:	4b29      	ldr	r3, [pc, #164]	; (176c <mem_manage_fault+0xd4>)
    16c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16ca:	f013 0f01 	tst.w	r3, #1
    16ce:	d141      	bne.n	1754 <mem_manage_fault+0xbc>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    16d0:	4b26      	ldr	r3, [pc, #152]	; (176c <mem_manage_fault+0xd4>)
    16d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16d4:	f013 0f20 	tst.w	r3, #32
    16d8:	d141      	bne.n	175e <mem_manage_fault+0xc6>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    16da:	4b24      	ldr	r3, [pc, #144]	; (176c <mem_manage_fault+0xd4>)
    16dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16de:	f013 0f10 	tst.w	r3, #16
    16e2:	d101      	bne.n	16e8 <mem_manage_fault+0x50>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    16e4:	4b21      	ldr	r3, [pc, #132]	; (176c <mem_manage_fault+0xd4>)
    16e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    16e8:	4b20      	ldr	r3, [pc, #128]	; (176c <mem_manage_fault+0xd4>)
    16ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16ec:	f013 0f20 	tst.w	r3, #32
    16f0:	d004      	beq.n	16fc <mem_manage_fault+0x64>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    16f2:	4a1e      	ldr	r2, [pc, #120]	; (176c <mem_manage_fault+0xd4>)
    16f4:	6a53      	ldr	r3, [r2, #36]	; 0x24
    16f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    16fa:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    16fc:	4a1b      	ldr	r2, [pc, #108]	; (176c <mem_manage_fault+0xd4>)
    16fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1700:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1704:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1706:	2101      	movs	r1, #1
    1708:	4628      	mov	r0, r5
    170a:	f004 f953 	bl	59b4 <memory_fault_recoverable>
    170e:	7020      	strb	r0, [r4, #0]
}
    1710:	2000      	movs	r0, #0
    1712:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error (context area might be"
    1714:	2145      	movs	r1, #69	; 0x45
    1716:	4816      	ldr	r0, [pc, #88]	; (1770 <mem_manage_fault+0xd8>)
    1718:	f004 f8e3 	bl	58e2 <z_log_minimal_printk>
    171c:	e7c9      	b.n	16b2 <mem_manage_fault+0x1a>
		PR_FAULT_INFO("  Unstacking error");
    171e:	2145      	movs	r1, #69	; 0x45
    1720:	4814      	ldr	r0, [pc, #80]	; (1774 <mem_manage_fault+0xdc>)
    1722:	f004 f8de 	bl	58e2 <z_log_minimal_printk>
    1726:	e7c9      	b.n	16bc <mem_manage_fault+0x24>
		PR_FAULT_INFO("  Data Access Violation");
    1728:	2145      	movs	r1, #69	; 0x45
    172a:	4813      	ldr	r0, [pc, #76]	; (1778 <mem_manage_fault+0xe0>)
    172c:	f004 f8d9 	bl	58e2 <z_log_minimal_printk>
		uint32_t temp = SCB->MMFAR;
    1730:	4b0e      	ldr	r3, [pc, #56]	; (176c <mem_manage_fault+0xd4>)
    1732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1736:	f013 0f80 	tst.w	r3, #128	; 0x80
    173a:	d0c4      	beq.n	16c6 <mem_manage_fault+0x2e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    173c:	2145      	movs	r1, #69	; 0x45
    173e:	480f      	ldr	r0, [pc, #60]	; (177c <mem_manage_fault+0xe4>)
    1740:	f004 f8cf 	bl	58e2 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    1744:	2e00      	cmp	r6, #0
    1746:	d0be      	beq.n	16c6 <mem_manage_fault+0x2e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1748:	4a08      	ldr	r2, [pc, #32]	; (176c <mem_manage_fault+0xd4>)
    174a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    174c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1750:	6293      	str	r3, [r2, #40]	; 0x28
    1752:	e7b8      	b.n	16c6 <mem_manage_fault+0x2e>
		PR_FAULT_INFO("  Instruction Access Violation");
    1754:	2145      	movs	r1, #69	; 0x45
    1756:	480a      	ldr	r0, [pc, #40]	; (1780 <mem_manage_fault+0xe8>)
    1758:	f004 f8c3 	bl	58e2 <z_log_minimal_printk>
    175c:	e7b8      	b.n	16d0 <mem_manage_fault+0x38>
		PR_FAULT_INFO(
    175e:	2145      	movs	r1, #69	; 0x45
    1760:	4808      	ldr	r0, [pc, #32]	; (1784 <mem_manage_fault+0xec>)
    1762:	f004 f8be 	bl	58e2 <z_log_minimal_printk>
    1766:	e7b8      	b.n	16da <mem_manage_fault+0x42>
    1768:	000074a8 	.word	0x000074a8
    176c:	e000ed00 	.word	0xe000ed00
    1770:	000074c4 	.word	0x000074c4
    1774:	000074fc 	.word	0x000074fc
    1778:	00007514 	.word	0x00007514
    177c:	00007534 	.word	0x00007534
    1780:	00007550 	.word	0x00007550
    1784:	00007574 	.word	0x00007574

00001788 <bus_fault>:
{
    1788:	b570      	push	{r4, r5, r6, lr}
    178a:	4605      	mov	r5, r0
    178c:	460e      	mov	r6, r1
    178e:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** BUS FAULT *****");
    1790:	2145      	movs	r1, #69	; 0x45
    1792:	482e      	ldr	r0, [pc, #184]	; (184c <bus_fault+0xc4>)
    1794:	f004 f8a5 	bl	58e2 <z_log_minimal_printk>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1798:	4b2d      	ldr	r3, [pc, #180]	; (1850 <bus_fault+0xc8>)
    179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    179c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    17a0:	d124      	bne.n	17ec <bus_fault+0x64>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    17a2:	4b2b      	ldr	r3, [pc, #172]	; (1850 <bus_fault+0xc8>)
    17a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17a6:	f413 6f00 	tst.w	r3, #2048	; 0x800
    17aa:	d124      	bne.n	17f6 <bus_fault+0x6e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    17ac:	4b28      	ldr	r3, [pc, #160]	; (1850 <bus_fault+0xc8>)
    17ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17b0:	f413 7f00 	tst.w	r3, #512	; 0x200
    17b4:	d124      	bne.n	1800 <bus_fault+0x78>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    17b6:	4b26      	ldr	r3, [pc, #152]	; (1850 <bus_fault+0xc8>)
    17b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17ba:	f413 6f80 	tst.w	r3, #1024	; 0x400
    17be:	d135      	bne.n	182c <bus_fault+0xa4>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    17c0:	4b23      	ldr	r3, [pc, #140]	; (1850 <bus_fault+0xc8>)
    17c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17c4:	f413 7f80 	tst.w	r3, #256	; 0x100
    17c8:	d135      	bne.n	1836 <bus_fault+0xae>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    17ca:	4b21      	ldr	r3, [pc, #132]	; (1850 <bus_fault+0xc8>)
    17cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17ce:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    17d2:	d135      	bne.n	1840 <bus_fault+0xb8>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    17d4:	4a1e      	ldr	r2, [pc, #120]	; (1850 <bus_fault+0xc8>)
    17d6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    17d8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    17dc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    17de:	2101      	movs	r1, #1
    17e0:	4628      	mov	r0, r5
    17e2:	f004 f8e7 	bl	59b4 <memory_fault_recoverable>
    17e6:	7020      	strb	r0, [r4, #0]
}
    17e8:	2000      	movs	r0, #0
    17ea:	bd70      	pop	{r4, r5, r6, pc}
		PR_FAULT_INFO("  Stacking error");
    17ec:	2145      	movs	r1, #69	; 0x45
    17ee:	4819      	ldr	r0, [pc, #100]	; (1854 <bus_fault+0xcc>)
    17f0:	f004 f877 	bl	58e2 <z_log_minimal_printk>
    17f4:	e7d5      	b.n	17a2 <bus_fault+0x1a>
		PR_FAULT_INFO("  Unstacking error");
    17f6:	2145      	movs	r1, #69	; 0x45
    17f8:	4817      	ldr	r0, [pc, #92]	; (1858 <bus_fault+0xd0>)
    17fa:	f004 f872 	bl	58e2 <z_log_minimal_printk>
    17fe:	e7d5      	b.n	17ac <bus_fault+0x24>
		PR_FAULT_INFO("  Precise data bus error");
    1800:	2145      	movs	r1, #69	; 0x45
    1802:	4816      	ldr	r0, [pc, #88]	; (185c <bus_fault+0xd4>)
    1804:	f004 f86d 	bl	58e2 <z_log_minimal_printk>
		STORE_xFAR(bfar, SCB->BFAR);
    1808:	4b11      	ldr	r3, [pc, #68]	; (1850 <bus_fault+0xc8>)
    180a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    180c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    180e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1812:	d0d0      	beq.n	17b6 <bus_fault+0x2e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1814:	2145      	movs	r1, #69	; 0x45
    1816:	4812      	ldr	r0, [pc, #72]	; (1860 <bus_fault+0xd8>)
    1818:	f004 f863 	bl	58e2 <z_log_minimal_printk>
			if (from_hard_fault != 0) {
    181c:	2e00      	cmp	r6, #0
    181e:	d0ca      	beq.n	17b6 <bus_fault+0x2e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1820:	4a0b      	ldr	r2, [pc, #44]	; (1850 <bus_fault+0xc8>)
    1822:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1824:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1828:	6293      	str	r3, [r2, #40]	; 0x28
    182a:	e7c4      	b.n	17b6 <bus_fault+0x2e>
		PR_FAULT_INFO("  Imprecise data bus error");
    182c:	2145      	movs	r1, #69	; 0x45
    182e:	480d      	ldr	r0, [pc, #52]	; (1864 <bus_fault+0xdc>)
    1830:	f004 f857 	bl	58e2 <z_log_minimal_printk>
    1834:	e7c4      	b.n	17c0 <bus_fault+0x38>
		PR_FAULT_INFO("  Instruction bus error");
    1836:	2145      	movs	r1, #69	; 0x45
    1838:	480b      	ldr	r0, [pc, #44]	; (1868 <bus_fault+0xe0>)
    183a:	f004 f852 	bl	58e2 <z_log_minimal_printk>
    183e:	e7c9      	b.n	17d4 <bus_fault+0x4c>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1840:	2145      	movs	r1, #69	; 0x45
    1842:	480a      	ldr	r0, [pc, #40]	; (186c <bus_fault+0xe4>)
    1844:	f004 f84d 	bl	58e2 <z_log_minimal_printk>
    1848:	e7c4      	b.n	17d4 <bus_fault+0x4c>
    184a:	bf00      	nop
    184c:	000075a8 	.word	0x000075a8
    1850:	e000ed00 	.word	0xe000ed00
    1854:	000075c4 	.word	0x000075c4
    1858:	000074fc 	.word	0x000074fc
    185c:	000075dc 	.word	0x000075dc
    1860:	000075fc 	.word	0x000075fc
    1864:	00007618 	.word	0x00007618
    1868:	00007638 	.word	0x00007638
    186c:	00007574 	.word	0x00007574

00001870 <usage_fault>:
{
    1870:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1872:	2145      	movs	r1, #69	; 0x45
    1874:	4829      	ldr	r0, [pc, #164]	; (191c <usage_fault+0xac>)
    1876:	f004 f834 	bl	58e2 <z_log_minimal_printk>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    187a:	4b29      	ldr	r3, [pc, #164]	; (1920 <usage_fault+0xb0>)
    187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    187e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    1882:	d126      	bne.n	18d2 <usage_fault+0x62>
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1884:	4b26      	ldr	r3, [pc, #152]	; (1920 <usage_fault+0xb0>)
    1886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1888:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    188c:	d126      	bne.n	18dc <usage_fault+0x6c>
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    188e:	4b24      	ldr	r3, [pc, #144]	; (1920 <usage_fault+0xb0>)
    1890:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    1892:	f414 1480 	ands.w	r4, r4, #1048576	; 0x100000
    1896:	d126      	bne.n	18e6 <usage_fault+0x76>
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1898:	4b21      	ldr	r3, [pc, #132]	; (1920 <usage_fault+0xb0>)
    189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    189c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    18a0:	d127      	bne.n	18f2 <usage_fault+0x82>
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    18a2:	4b1f      	ldr	r3, [pc, #124]	; (1920 <usage_fault+0xb0>)
    18a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18a6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    18aa:	d127      	bne.n	18fc <usage_fault+0x8c>
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    18ac:	4b1c      	ldr	r3, [pc, #112]	; (1920 <usage_fault+0xb0>)
    18ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18b0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    18b4:	d127      	bne.n	1906 <usage_fault+0x96>
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    18b6:	4b1a      	ldr	r3, [pc, #104]	; (1920 <usage_fault+0xb0>)
    18b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18ba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    18be:	d127      	bne.n	1910 <usage_fault+0xa0>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    18c0:	4a17      	ldr	r2, [pc, #92]	; (1920 <usage_fault+0xb0>)
    18c2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    18c4:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    18c8:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    18cc:	6293      	str	r3, [r2, #40]	; 0x28
}
    18ce:	4620      	mov	r0, r4
    18d0:	bd10      	pop	{r4, pc}
		PR_FAULT_INFO("  Division by zero");
    18d2:	2145      	movs	r1, #69	; 0x45
    18d4:	4813      	ldr	r0, [pc, #76]	; (1924 <usage_fault+0xb4>)
    18d6:	f004 f804 	bl	58e2 <z_log_minimal_printk>
    18da:	e7d3      	b.n	1884 <usage_fault+0x14>
		PR_FAULT_INFO("  Unaligned memory access");
    18dc:	2145      	movs	r1, #69	; 0x45
    18de:	4812      	ldr	r0, [pc, #72]	; (1928 <usage_fault+0xb8>)
    18e0:	f003 ffff 	bl	58e2 <z_log_minimal_printk>
    18e4:	e7d3      	b.n	188e <usage_fault+0x1e>
		PR_FAULT_INFO("  Stack overflow (context area not valid)");
    18e6:	2145      	movs	r1, #69	; 0x45
    18e8:	4810      	ldr	r0, [pc, #64]	; (192c <usage_fault+0xbc>)
    18ea:	f003 fffa 	bl	58e2 <z_log_minimal_printk>
		reason = K_ERR_STACK_CHK_FAIL;
    18ee:	2402      	movs	r4, #2
    18f0:	e7d2      	b.n	1898 <usage_fault+0x28>
		PR_FAULT_INFO("  No coprocessor instructions");
    18f2:	2145      	movs	r1, #69	; 0x45
    18f4:	480e      	ldr	r0, [pc, #56]	; (1930 <usage_fault+0xc0>)
    18f6:	f003 fff4 	bl	58e2 <z_log_minimal_printk>
    18fa:	e7d2      	b.n	18a2 <usage_fault+0x32>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    18fc:	2145      	movs	r1, #69	; 0x45
    18fe:	480d      	ldr	r0, [pc, #52]	; (1934 <usage_fault+0xc4>)
    1900:	f003 ffef 	bl	58e2 <z_log_minimal_printk>
    1904:	e7d2      	b.n	18ac <usage_fault+0x3c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1906:	2145      	movs	r1, #69	; 0x45
    1908:	480b      	ldr	r0, [pc, #44]	; (1938 <usage_fault+0xc8>)
    190a:	f003 ffea 	bl	58e2 <z_log_minimal_printk>
    190e:	e7d2      	b.n	18b6 <usage_fault+0x46>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1910:	2145      	movs	r1, #69	; 0x45
    1912:	480a      	ldr	r0, [pc, #40]	; (193c <usage_fault+0xcc>)
    1914:	f003 ffe5 	bl	58e2 <z_log_minimal_printk>
    1918:	e7d2      	b.n	18c0 <usage_fault+0x50>
    191a:	bf00      	nop
    191c:	00007658 	.word	0x00007658
    1920:	e000ed00 	.word	0xe000ed00
    1924:	00007678 	.word	0x00007678
    1928:	00007690 	.word	0x00007690
    192c:	000076b0 	.word	0x000076b0
    1930:	000076e0 	.word	0x000076e0
    1934:	00007704 	.word	0x00007704
    1938:	00007730 	.word	0x00007730
    193c:	00007750 	.word	0x00007750

00001940 <hard_fault>:
{
    1940:	b570      	push	{r4, r5, r6, lr}
    1942:	4606      	mov	r6, r0
    1944:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** HARD FAULT *****");
    1946:	2145      	movs	r1, #69	; 0x45
    1948:	4828      	ldr	r0, [pc, #160]	; (19ec <hard_fault+0xac>)
    194a:	f003 ffca 	bl	58e2 <z_log_minimal_printk>
	*recoverable = false;
    194e:	2300      	movs	r3, #0
    1950:	702b      	strb	r3, [r5, #0]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1952:	4b27      	ldr	r3, [pc, #156]	; (19f0 <hard_fault+0xb0>)
    1954:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1956:	f014 0402 	ands.w	r4, r4, #2
    195a:	d10a      	bne.n	1972 <hard_fault+0x32>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    195c:	4b24      	ldr	r3, [pc, #144]	; (19f0 <hard_fault+0xb0>)
    195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1960:	2b00      	cmp	r3, #0
    1962:	db0c      	blt.n	197e <hard_fault+0x3e>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1964:	4b22      	ldr	r3, [pc, #136]	; (19f0 <hard_fault+0xb0>)
    1966:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1968:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    196c:	d10c      	bne.n	1988 <hard_fault+0x48>
}
    196e:	4620      	mov	r0, r4
    1970:	bd70      	pop	{r4, r5, r6, pc}
		PR_EXC("  Bus fault on vector table read");
    1972:	2145      	movs	r1, #69	; 0x45
    1974:	481f      	ldr	r0, [pc, #124]	; (19f4 <hard_fault+0xb4>)
    1976:	f003 ffb4 	bl	58e2 <z_log_minimal_printk>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    197a:	2400      	movs	r4, #0
    197c:	e7f7      	b.n	196e <hard_fault+0x2e>
		PR_EXC("  Debug event");
    197e:	2145      	movs	r1, #69	; 0x45
    1980:	481d      	ldr	r0, [pc, #116]	; (19f8 <hard_fault+0xb8>)
    1982:	f003 ffae 	bl	58e2 <z_log_minimal_printk>
    1986:	e7f2      	b.n	196e <hard_fault+0x2e>
		PR_EXC("  Fault escalation (see below)");
    1988:	2145      	movs	r1, #69	; 0x45
    198a:	481c      	ldr	r0, [pc, #112]	; (19fc <hard_fault+0xbc>)
    198c:	f003 ffa9 	bl	58e2 <z_log_minimal_printk>
		if (z_arm_is_synchronous_svc(esf)) {
    1990:	4630      	mov	r0, r6
    1992:	f7ff fe41 	bl	1618 <z_arm_is_synchronous_svc>
    1996:	b998      	cbnz	r0, 19c0 <hard_fault+0x80>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1998:	4b15      	ldr	r3, [pc, #84]	; (19f0 <hard_fault+0xb0>)
    199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    199c:	f013 0fff 	tst.w	r3, #255	; 0xff
    19a0:	d115      	bne.n	19ce <hard_fault+0x8e>
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    19a2:	4b13      	ldr	r3, [pc, #76]	; (19f0 <hard_fault+0xb0>)
    19a4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    19a6:	f414 447f 	ands.w	r4, r4, #65280	; 0xff00
    19aa:	d117      	bne.n	19dc <hard_fault+0x9c>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    19ac:	4b10      	ldr	r3, [pc, #64]	; (19f0 <hard_fault+0xb0>)
    19ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    19b4:	d3db      	bcc.n	196e <hard_fault+0x2e>
			reason = usage_fault(esf);
    19b6:	4630      	mov	r0, r6
    19b8:	f7ff ff5a 	bl	1870 <usage_fault>
    19bc:	4604      	mov	r4, r0
	return reason;
    19be:	e7d6      	b.n	196e <hard_fault+0x2e>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    19c0:	6832      	ldr	r2, [r6, #0]
    19c2:	2145      	movs	r1, #69	; 0x45
    19c4:	480e      	ldr	r0, [pc, #56]	; (1a00 <hard_fault+0xc0>)
    19c6:	f003 ff8c 	bl	58e2 <z_log_minimal_printk>
			reason = esf->basic.r0;
    19ca:	6834      	ldr	r4, [r6, #0]
    19cc:	e7cf      	b.n	196e <hard_fault+0x2e>
			reason = mem_manage_fault(esf, 1, recoverable);
    19ce:	462a      	mov	r2, r5
    19d0:	2101      	movs	r1, #1
    19d2:	4630      	mov	r0, r6
    19d4:	f7ff fe60 	bl	1698 <mem_manage_fault>
    19d8:	4604      	mov	r4, r0
    19da:	e7c8      	b.n	196e <hard_fault+0x2e>
			reason = bus_fault(esf, 1, recoverable);
    19dc:	462a      	mov	r2, r5
    19de:	2101      	movs	r1, #1
    19e0:	4630      	mov	r0, r6
    19e2:	f7ff fed1 	bl	1788 <bus_fault>
    19e6:	4604      	mov	r4, r0
    19e8:	e7c1      	b.n	196e <hard_fault+0x2e>
    19ea:	bf00      	nop
    19ec:	00007780 	.word	0x00007780
    19f0:	e000ed00 	.word	0xe000ed00
    19f4:	0000779c 	.word	0x0000779c
    19f8:	000077c4 	.word	0x000077c4
    19fc:	000077d8 	.word	0x000077d8
    1a00:	000077fc 	.word	0x000077fc

00001a04 <debug_monitor>:
{
    1a04:	b508      	push	{r3, lr}
	*recoverable = false;
    1a06:	2300      	movs	r3, #0
    1a08:	700b      	strb	r3, [r1, #0]
	PR_FAULT_INFO(
    1a0a:	2145      	movs	r1, #69	; 0x45
    1a0c:	4801      	ldr	r0, [pc, #4]	; (1a14 <debug_monitor+0x10>)
    1a0e:	f003 ff68 	bl	58e2 <z_log_minimal_printk>
}
    1a12:	bd08      	pop	{r3, pc}
    1a14:	00007820 	.word	0x00007820

00001a18 <reserved_exception>:
{
    1a18:	b508      	push	{r3, lr}
	PR_FAULT_INFO("***** %s %d) *****",
    1a1a:	290f      	cmp	r1, #15
    1a1c:	dc07      	bgt.n	1a2e <reserved_exception+0x16>
    1a1e:	4a05      	ldr	r2, [pc, #20]	; (1a34 <reserved_exception+0x1c>)
    1a20:	f1a1 0310 	sub.w	r3, r1, #16
    1a24:	2145      	movs	r1, #69	; 0x45
    1a26:	4804      	ldr	r0, [pc, #16]	; (1a38 <reserved_exception+0x20>)
    1a28:	f003 ff5b 	bl	58e2 <z_log_minimal_printk>
}
    1a2c:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    1a2e:	4a03      	ldr	r2, [pc, #12]	; (1a3c <reserved_exception+0x24>)
    1a30:	e7f6      	b.n	1a20 <reserved_exception+0x8>
    1a32:	bf00      	nop
    1a34:	0000784c 	.word	0x0000784c
    1a38:	00007880 	.word	0x00007880
    1a3c:	00007864 	.word	0x00007864

00001a40 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1a40:	b530      	push	{r4, r5, lr}
    1a42:	b08b      	sub	sp, #44	; 0x2c
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1a44:	4b1a      	ldr	r3, [pc, #104]	; (1ab0 <z_arm_fault+0x70>)
    1a46:	685c      	ldr	r4, [r3, #4]
    1a48:	f3c4 0408 	ubfx	r4, r4, #0, #9
    1a4c:	2300      	movs	r3, #0
    1a4e:	f383 8811 	msr	BASEPRI, r3
    1a52:	f3bf 8f6f 	isb	sy
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
    1a56:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1a5a:	f7ff fdfb 	bl	1654 <get_esf>
    1a5e:	4605      	mov	r5, r0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    1a60:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    1a64:	4621      	mov	r1, r4
    1a66:	f003 ffa7 	bl	59b8 <fault_handle>
	if (recoverable) {
    1a6a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    1a6e:	b10b      	cbz	r3, 1a74 <z_arm_fault+0x34>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    1a70:	b00b      	add	sp, #44	; 0x2c
    1a72:	bd30      	pop	{r4, r5, pc}
    1a74:	4604      	mov	r4, r0
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1a76:	2220      	movs	r2, #32
    1a78:	4629      	mov	r1, r5
    1a7a:	a801      	add	r0, sp, #4
    1a7c:	f004 f859 	bl	5b32 <memcpy>
	if (nested_exc) {
    1a80:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
    1a84:	b14b      	cbz	r3, 1a9a <z_arm_fault+0x5a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1a86:	9b08      	ldr	r3, [sp, #32]
    1a88:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1a8c:	b95a      	cbnz	r2, 1aa6 <z_arm_fault+0x66>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1a8e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1a92:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    1a96:	9308      	str	r3, [sp, #32]
    1a98:	e005      	b.n	1aa6 <z_arm_fault+0x66>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1a9a:	9b08      	ldr	r3, [sp, #32]
    1a9c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1aa0:	f023 0301 	bic.w	r3, r3, #1
    1aa4:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    1aa6:	a901      	add	r1, sp, #4
    1aa8:	4620      	mov	r0, r4
    1aaa:	f003 ff55 	bl	5958 <z_arm_fatal_error>
    1aae:	e7df      	b.n	1a70 <z_arm_fault+0x30>
    1ab0:	e000ed00 	.word	0xe000ed00

00001ab4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1ab4:	4b04      	ldr	r3, [pc, #16]	; (1ac8 <z_arm_fault_init+0x14>)
    1ab6:	695a      	ldr	r2, [r3, #20]
    1ab8:	f042 0210 	orr.w	r2, r2, #16
    1abc:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    1abe:	695a      	ldr	r2, [r3, #20]
    1ac0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    1ac4:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1ac6:	4770      	bx	lr
    1ac8:	e000ed00 	.word	0xe000ed00

00001acc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1acc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1ad0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1ad4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1ad6:	4672      	mov	r2, lr
	bl z_arm_fault
    1ad8:	f7ff ffb2 	bl	1a40 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1adc:	bd01      	pop	{r0, pc}
    1ade:	bf00      	nop

00001ae0 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1ae0:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1ae2:	e007      	b.n	1af4 <z_arm_interrupt_init+0x14>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1ae4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1ae8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    1aec:	2120      	movs	r1, #32
    1aee:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    1af2:	3201      	adds	r2, #1
    1af4:	2a44      	cmp	r2, #68	; 0x44
    1af6:	dc09      	bgt.n	1b0c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    1af8:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1afa:	2b00      	cmp	r3, #0
    1afc:	daf2      	bge.n	1ae4 <z_arm_interrupt_init+0x4>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1afe:	f003 030f 	and.w	r3, r3, #15
    1b02:	4903      	ldr	r1, [pc, #12]	; (1b10 <z_arm_interrupt_init+0x30>)
    1b04:	4419      	add	r1, r3
    1b06:	2320      	movs	r3, #32
    1b08:	760b      	strb	r3, [r1, #24]
    1b0a:	e7f2      	b.n	1af2 <z_arm_interrupt_init+0x12>
	}
}
    1b0c:	4770      	bx	lr
    1b0e:	bf00      	nop
    1b10:	e000ecfc 	.word	0xe000ecfc

00001b14 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    1b14:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    1b16:	4915      	ldr	r1, [pc, #84]	; (1b6c <__start+0x58>)
    strb r0, [r1]
    1b18:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1b1a:	2000      	movs	r0, #0
    msr CONTROL, r0
    1b1c:	f380 8814 	msr	CONTROL, r0
    isb
    1b20:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_CPU_CORTEX_M_HAS_SPLIM)
    /* Clear SPLIM registers */
    movs.n r0, #0
    1b24:	2000      	movs	r0, #0
    msr MSPLIM, r0
    1b26:	f380 880a 	msr	MSPLIM, r0
    msr PSPLIM, r0
    1b2a:	f380 880b 	msr	PSPLIM, r0
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1b2e:	f7ff f969 	bl	e04 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1b32:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1b34:	490e      	ldr	r1, [pc, #56]	; (1b70 <__start+0x5c>)
    str r0, [r1]
    1b36:	6008      	str	r0, [r1, #0]
    dsb
    1b38:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1b3c:	480d      	ldr	r0, [pc, #52]	; (1b74 <__start+0x60>)
    msr msp, r0
    1b3e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1b42:	f000 f841 	bl	1bc8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1b46:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1b48:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1b4c:	480a      	ldr	r0, [pc, #40]	; (1b78 <__start+0x64>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1b52:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1b54:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1b58:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1b5c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1b5e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1b60:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1b64:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1b68:	f7ff fc7a 	bl	1460 <z_arm_prep_c>
    ldr r1, =z_sys_post_kernel
    1b6c:	20000b73 	.word	0x20000b73
    ldr r1, =_SCS_MPU_CTRL
    1b70:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1b74:	200018b8 	.word	0x200018b8
    ldr r0, =z_interrupt_stacks
    1b78:	20000b78 	.word	0x20000b78

00001b7c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    1b7c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1b80:	4905      	ldr	r1, [pc, #20]	; (1b98 <__NVIC_SystemReset+0x1c>)
    1b82:	68ca      	ldr	r2, [r1, #12]
    1b84:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1b88:	4b04      	ldr	r3, [pc, #16]	; (1b9c <__NVIC_SystemReset+0x20>)
    1b8a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1b8c:	60cb      	str	r3, [r1, #12]
    1b8e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1b92:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1b94:	e7fd      	b.n	1b92 <__NVIC_SystemReset+0x16>
    1b96:	bf00      	nop
    1b98:	e000ed00 	.word	0xe000ed00
    1b9c:	05fa0004 	.word	0x05fa0004

00001ba0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1ba0:	4b08      	ldr	r3, [pc, #32]	; (1bc4 <z_arm_clear_arm_mpu_config+0x24>)
    1ba2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    1ba6:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    1baa:	2300      	movs	r3, #0
    1bac:	e006      	b.n	1bbc <z_arm_clear_arm_mpu_config+0x1c>
* \param mpu Pointer to MPU to be used.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegionEx(MPU_Type* mpu, uint32_t rnr)
{
  mpu->RNR = rnr;
    1bae:	4a05      	ldr	r2, [pc, #20]	; (1bc4 <z_arm_clear_arm_mpu_config+0x24>)
    1bb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  mpu->RLAR = 0U;
    1bb4:	2100      	movs	r1, #0
    1bb6:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    1bba:	3301      	adds	r3, #1
    1bbc:	4283      	cmp	r3, r0
    1bbe:	dbf6      	blt.n	1bae <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    1bc0:	4770      	bx	lr
    1bc2:	bf00      	nop
    1bc4:	e000ed00 	.word	0xe000ed00

00001bc8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1bc8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1bca:	b672      	cpsid	i
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1bcc:	2400      	movs	r4, #0
    1bce:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1bd2:	f7ff ffe5 	bl	1ba0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1bd6:	4623      	mov	r3, r4
    1bd8:	e008      	b.n	1bec <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    1bda:	f103 0120 	add.w	r1, r3, #32
    1bde:	4a0e      	ldr	r2, [pc, #56]	; (1c18 <z_arm_init_arch_hw_at_boot+0x50>)
    1be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1be4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1be8:	3301      	adds	r3, #1
    1bea:	b2db      	uxtb	r3, r3
    1bec:	2b0f      	cmp	r3, #15
    1bee:	d9f4      	bls.n	1bda <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1bf0:	2300      	movs	r3, #0
    1bf2:	e008      	b.n	1c06 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1bf4:	f103 0160 	add.w	r1, r3, #96	; 0x60
    1bf8:	4a07      	ldr	r2, [pc, #28]	; (1c18 <z_arm_init_arch_hw_at_boot+0x50>)
    1bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1bfe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    1c02:	3301      	adds	r3, #1
    1c04:	b2db      	uxtb	r3, r3
    1c06:	2b0f      	cmp	r3, #15
    1c08:	d9f4      	bls.n	1bf4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1c0a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1c0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1c10:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1c14:	bd10      	pop	{r4, pc}
    1c16:	bf00      	nop
    1c18:	e000e100 	.word	0xe000e100

00001c1c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1c1c:	b508      	push	{r3, lr}
	if (_current == thread) {
    1c1e:	4b0a      	ldr	r3, [pc, #40]	; (1c48 <z_impl_k_thread_abort+0x2c>)
    1c20:	689b      	ldr	r3, [r3, #8]
    1c22:	4283      	cmp	r3, r0
    1c24:	d002      	beq.n	1c2c <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    1c26:	f002 fec9 	bl	49bc <z_thread_abort>
}
    1c2a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1c2c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1c30:	2b00      	cmp	r3, #0
    1c32:	d0f8      	beq.n	1c26 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1c34:	4b05      	ldr	r3, [pc, #20]	; (1c4c <z_impl_k_thread_abort+0x30>)
    1c36:	685a      	ldr	r2, [r3, #4]
    1c38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1c3c:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1c3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1c40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1c44:	625a      	str	r2, [r3, #36]	; 0x24
    1c46:	e7ee      	b.n	1c26 <z_impl_k_thread_abort+0xa>
    1c48:	2000095c 	.word	0x2000095c
    1c4c:	e000ed00 	.word	0xe000ed00

00001c50 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1c50:	b510      	push	{r4, lr}
    1c52:	b084      	sub	sp, #16
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1c54:	4c0a      	ldr	r4, [pc, #40]	; (1c80 <z_arm_configure_static_mpu_regions+0x30>)
    1c56:	4623      	mov	r3, r4
    1c58:	4a0a      	ldr	r2, [pc, #40]	; (1c84 <z_arm_configure_static_mpu_regions+0x34>)
    1c5a:	2101      	movs	r1, #1
    1c5c:	480a      	ldr	r0, [pc, #40]	; (1c88 <z_arm_configure_static_mpu_regions+0x38>)
    1c5e:	f003 ff33 	bl	5ac8 <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1c62:	2300      	movs	r3, #0
    1c64:	9301      	str	r3, [sp, #4]
    1c66:	9302      	str	r3, [sp, #8]
    1c68:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1c6a:	4b08      	ldr	r3, [pc, #32]	; (1c8c <z_arm_configure_static_mpu_regions+0x3c>)
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1c6c:	9301      	str	r3, [sp, #4]
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1c6e:	1ae4      	subs	r4, r4, r3
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1c70:	9402      	str	r4, [sp, #8]
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1c72:	2101      	movs	r1, #1
    1c74:	a801      	add	r0, sp, #4
    1c76:	f003 ff2b 	bl	5ad0 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1c7a:	b004      	add	sp, #16
    1c7c:	bd10      	pop	{r4, pc}
    1c7e:	bf00      	nop
    1c80:	20070000 	.word	0x20070000
    1c84:	20000000 	.word	0x20000000
    1c88:	00007898 	.word	0x00007898
    1c8c:	20000190 	.word	0x20000190

00001c90 <mpu_init>:
static struct dynamic_region_info dyn_reg_info[MPU_DYNAMIC_REGION_AREAS_NUM];
#if defined(CONFIG_CPU_CORTEX_M23) || defined(CONFIG_CPU_CORTEX_M33) || \
	defined(CONFIG_CPU_CORTEX_M55)
static inline void mpu_set_mair0(uint32_t mair0)
{
	MPU->MAIR0 = mair0;
    1c90:	4b02      	ldr	r3, [pc, #8]	; (1c9c <mpu_init+0xc>)
    1c92:	4a03      	ldr	r2, [pc, #12]	; (1ca0 <mpu_init+0x10>)
    1c94:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
{
	/* Configure the cache-ability attributes for all the
	 * different types of memory regions.
	 */
	mpu_set_mair0(MPU_MAIR_ATTRS);
}
    1c98:	4770      	bx	lr
    1c9a:	bf00      	nop
    1c9c:	e000ed00 	.word	0xe000ed00
    1ca0:	0044ffaa 	.word	0x0044ffaa

00001ca4 <mpu_set_region>:
	MPU->RNR = rnr;
    1ca4:	4b03      	ldr	r3, [pc, #12]	; (1cb4 <mpu_set_region+0x10>)
    1ca6:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	MPU->RBAR = rbar;
    1caa:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
	MPU->RLAR = rlar;
    1cae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
static void mpu_set_region(uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
	mpu_set_rnr(rnr);
	mpu_set_rbar(rbar);
	mpu_set_rlar(rlar);
}
    1cb2:	4770      	bx	lr
    1cb4:	e000ed00 	.word	0xe000ed00

00001cb8 <mpu_region_get_conf>:
	MPU->RNR = rnr;
    1cb8:	4b0e      	ldr	r3, [pc, #56]	; (1cf4 <mpu_region_get_conf+0x3c>)
    1cba:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
    1cbe:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    1cc2:	f8d3 009c 	ldr.w	r0, [r3, #156]	; 0x9c
static inline void mpu_region_get_access_attr(const uint32_t index,
	arm_mpu_region_attr_t *attr)
{
	mpu_set_rnr(index);

	attr->rbar = mpu_get_rbar() &
    1cc6:	7a0a      	ldrb	r2, [r1, #8]
    1cc8:	f360 0204 	bfi	r2, r0, #0, #5
    1ccc:	720a      	strb	r2, [r1, #8]
	return MPU->RLAR;
    1cce:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk);
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1cd2:	f3c2 0242 	ubfx	r2, r2, #1, #3
    1cd6:	7a08      	ldrb	r0, [r1, #8]
    1cd8:	f362 1047 	bfi	r0, r2, #5, #3
    1cdc:	7208      	strb	r0, [r1, #8]
	return MPU->RBAR;
    1cde:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	 * - Access Permissions
	 */
	mpu_region_get_access_attr(index, &region_conf->attr);

	/* Region base address */
	region_conf->base = mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1ce2:	f022 021f 	bic.w	r2, r2, #31
    1ce6:	600a      	str	r2, [r1, #0]
	return MPU->RLAR;
    1ce8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0

	/* Region limit address */
	region_conf->attr.r_limit = mpu_get_rlar() & MPU_RLAR_LIMIT_Msk;
    1cec:	f023 031f 	bic.w	r3, r3, #31
    1cf0:	60cb      	str	r3, [r1, #12]
}
    1cf2:	4770      	bx	lr
    1cf4:	e000ed00 	.word	0xe000ed00

00001cf8 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    1cf8:	b510      	push	{r4, lr}
    1cfa:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    1cfc:	2807      	cmp	r0, #7
    1cfe:	d803      	bhi.n	1d08 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1d00:	f003 fe8c 	bl	5a1c <region_init>

	return index;
    1d04:	4620      	mov	r0, r4
}
    1d06:	bd10      	pop	{r4, pc}
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    1d08:	4602      	mov	r2, r0
    1d0a:	2145      	movs	r1, #69	; 0x45
    1d0c:	4802      	ldr	r0, [pc, #8]	; (1d18 <region_allocate_and_init+0x20>)
    1d0e:	f003 fde8 	bl	58e2 <z_log_minimal_printk>
		return -EINVAL;
    1d12:	f06f 0015 	mvn.w	r0, #21
    1d16:	e7f6      	b.n	1d06 <region_allocate_and_init+0xe>
    1d18:	000078a8 	.word	0x000078a8

00001d1c <mpu_configure_regions_and_partition>:
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d20:	b087      	sub	sp, #28
    1d22:	4681      	mov	r9, r0
    1d24:	9100      	str	r1, [sp, #0]
    1d26:	9301      	str	r3, [sp, #4]
	int i;
	int reg_index = start_reg_index;
    1d28:	4614      	mov	r4, r2

	for (i = 0; i < regions_num; i++) {
    1d2a:	2700      	movs	r7, #0
    1d2c:	e046      	b.n	1dbc <mpu_configure_regions_and_partition+0xa0>
		}
		/* Non-empty region. */

		if (do_sanity_check &&
			(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    1d2e:	463a      	mov	r2, r7
    1d30:	2145      	movs	r1, #69	; 0x45
    1d32:	4860      	ldr	r0, [pc, #384]	; (1eb4 <mpu_configure_regions_and_partition+0x198>)
    1d34:	f003 fdd5 	bl	58e2 <z_log_minimal_printk>
			return -EINVAL;
    1d38:	f06f 0415 	mvn.w	r4, #21
    1d3c:	e006      	b.n	1d4c <mpu_configure_regions_and_partition+0x30>
		int u_reg_index =
			get_region_index(regions[i].start, regions[i].size);

		if ((u_reg_index == -EINVAL) ||
			(u_reg_index > (reg_index - 1))) {
			LOG_ERR("Invalid underlying region index %u",
    1d3e:	4632      	mov	r2, r6
    1d40:	2145      	movs	r1, #69	; 0x45
    1d42:	485d      	ldr	r0, [pc, #372]	; (1eb8 <mpu_configure_regions_and_partition+0x19c>)
    1d44:	f003 fdcd 	bl	58e2 <z_log_minimal_printk>
				u_reg_index);
			return -EINVAL;
    1d48:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    1d4c:	4620      	mov	r0, r4
    1d4e:	b007      	add	sp, #28
    1d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((regions[i].start == u_reg_base) &&
    1d54:	45d8      	cmp	r8, fp
    1d56:	d164      	bne.n	1e22 <mpu_configure_regions_and_partition+0x106>
			mpu_configure_region(u_reg_index, &regions[i]);
    1d58:	4629      	mov	r1, r5
    1d5a:	b2c0      	uxtb	r0, r0
    1d5c:	f003 fe84 	bl	5a68 <mpu_configure_region>
    1d60:	e02b      	b.n	1dba <mpu_configure_regions_and_partition+0x9e>
	MPU->RNR = rnr;
    1d62:	4a56      	ldr	r2, [pc, #344]	; (1ebc <mpu_configure_regions_and_partition+0x1a0>)
    1d64:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
	return MPU->RBAR;
    1d68:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	mpu_set_rbar((mpu_get_rbar() & (~MPU_RBAR_BASE_Msk))
    1d6c:	f003 031f 	and.w	r3, r3, #31
		     | (base & MPU_RBAR_BASE_Msk));
    1d70:	f021 011f 	bic.w	r1, r1, #31
    1d74:	430b      	orrs	r3, r1
	MPU->RBAR = rbar;
    1d76:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    1d7a:	4629      	mov	r1, r5
    1d7c:	b2e0      	uxtb	r0, r4
    1d7e:	f003 fe73 	bl	5a68 <mpu_configure_region>
    1d82:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    1d84:	f110 0f16 	cmn.w	r0, #22
    1d88:	d0e0      	beq.n	1d4c <mpu_configure_regions_and_partition+0x30>
			reg_index++;
    1d8a:	3401      	adds	r4, #1
    1d8c:	e015      	b.n	1dba <mpu_configure_regions_and_partition+0x9e>
				regions[i].start - 1);
    1d8e:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    1d90:	494a      	ldr	r1, [pc, #296]	; (1ebc <mpu_configure_regions_and_partition+0x1a0>)
    1d92:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    1d96:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1d9a:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1d9e:	f023 031f 	bic.w	r3, r3, #31
    1da2:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    1da4:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    1da8:	4629      	mov	r1, r5
    1daa:	b2e0      	uxtb	r0, r4
    1dac:	f003 fe5c 	bl	5a68 <mpu_configure_region>
    1db0:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    1db2:	f110 0f16 	cmn.w	r0, #22
    1db6:	d0c9      	beq.n	1d4c <mpu_configure_regions_and_partition+0x30>
			reg_index++;
    1db8:	3401      	adds	r4, #1
	for (i = 0; i < regions_num; i++) {
    1dba:	3701      	adds	r7, #1
    1dbc:	9b00      	ldr	r3, [sp, #0]
    1dbe:	429f      	cmp	r7, r3
    1dc0:	dac4      	bge.n	1d4c <mpu_configure_regions_and_partition+0x30>
		if (regions[i].size == 0U) {
    1dc2:	eb07 0547 	add.w	r5, r7, r7, lsl #1
    1dc6:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    1dca:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    1dce:	686e      	ldr	r6, [r5, #4]
    1dd0:	2e00      	cmp	r6, #0
    1dd2:	d0f2      	beq.n	1dba <mpu_configure_regions_and_partition+0x9e>
		if (do_sanity_check &&
    1dd4:	9b01      	ldr	r3, [sp, #4]
    1dd6:	b123      	cbz	r3, 1de2 <mpu_configure_regions_and_partition+0xc6>
			(!mpu_partition_is_valid(&regions[i]))) {
    1dd8:	4628      	mov	r0, r5
    1dda:	f003 fe33 	bl	5a44 <mpu_partition_is_valid>
		if (do_sanity_check &&
    1dde:	2800      	cmp	r0, #0
    1de0:	d0a5      	beq.n	1d2e <mpu_configure_regions_and_partition+0x12>
			get_region_index(regions[i].start, regions[i].size);
    1de2:	4631      	mov	r1, r6
    1de4:	f859 000a 	ldr.w	r0, [r9, sl]
    1de8:	f003 fe5d 	bl	5aa6 <get_region_index>
    1dec:	4606      	mov	r6, r0
		if ((u_reg_index == -EINVAL) ||
    1dee:	f110 0f16 	cmn.w	r0, #22
    1df2:	d0a4      	beq.n	1d3e <mpu_configure_regions_and_partition+0x22>
    1df4:	42a0      	cmp	r0, r4
    1df6:	daa2      	bge.n	1d3e <mpu_configure_regions_and_partition+0x22>
	MPU->RNR = rnr;
    1df8:	4b30      	ldr	r3, [pc, #192]	; (1ebc <mpu_configure_regions_and_partition+0x1a0>)
    1dfa:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RBAR;
    1dfe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
	return mpu_get_rbar() & MPU_RBAR_BASE_Msk;
    1e02:	f022 021f 	bic.w	r2, r2, #31
	MPU->RNR = rnr;
    1e06:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
	return MPU->RLAR;
    1e0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	return (mpu_get_rlar() & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1e0e:	f043 081f 	orr.w	r8, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1e12:	f859 300a 	ldr.w	r3, [r9, sl]
    1e16:	6869      	ldr	r1, [r5, #4]
    1e18:	4419      	add	r1, r3
    1e1a:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
		if ((regions[i].start == u_reg_base) &&
    1e1e:	429a      	cmp	r2, r3
    1e20:	d098      	beq.n	1d54 <mpu_configure_regions_and_partition+0x38>
		} else if (regions[i].start == u_reg_base) {
    1e22:	429a      	cmp	r2, r3
    1e24:	d09d      	beq.n	1d62 <mpu_configure_regions_and_partition+0x46>
		} else if (reg_last == u_reg_last) {
    1e26:	45d8      	cmp	r8, fp
    1e28:	d0b1      	beq.n	1d8e <mpu_configure_regions_and_partition+0x72>
				regions[i].start - 1);
    1e2a:	3b01      	subs	r3, #1
	MPU->RNR = rnr;
    1e2c:	4923      	ldr	r1, [pc, #140]	; (1ebc <mpu_configure_regions_and_partition+0x1a0>)
    1e2e:	f8c1 6098 	str.w	r6, [r1, #152]	; 0x98
	return MPU->RLAR;
    1e32:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
	mpu_set_rlar((mpu_get_rlar() & (~MPU_RLAR_LIMIT_Msk))
    1e36:	f002 021f 	and.w	r2, r2, #31
		     | (limit & MPU_RLAR_LIMIT_Msk));
    1e3a:	f023 031f 	bic.w	r3, r3, #31
    1e3e:	4313      	orrs	r3, r2
	MPU->RLAR = rlar;
    1e40:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    1e44:	4629      	mov	r1, r5
    1e46:	b2e0      	uxtb	r0, r4
    1e48:	f003 fe0e 	bl	5a68 <mpu_configure_region>
    1e4c:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    1e4e:	f110 0f16 	cmn.w	r0, #22
    1e52:	f43f af7b 	beq.w	1d4c <mpu_configure_regions_and_partition+0x30>
			reg_index++;
    1e56:	3001      	adds	r0, #1
	MPU->RNR = rnr;
    1e58:	4b18      	ldr	r3, [pc, #96]	; (1ebc <mpu_configure_regions_and_partition+0x1a0>)
    1e5a:	f8c3 6098 	str.w	r6, [r3, #152]	; 0x98
	return MPU->RBAR;
    1e5e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
	attr->rbar = mpu_get_rbar() &
    1e62:	f89d 2010 	ldrb.w	r2, [sp, #16]
    1e66:	f361 0204 	bfi	r2, r1, #0, #5
    1e6a:	f88d 2010 	strb.w	r2, [sp, #16]
	return MPU->RLAR;
    1e6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	attr->mair_idx = (mpu_get_rlar() & MPU_RLAR_AttrIndx_Msk) >>
    1e72:	f3c3 0342 	ubfx	r3, r3, #1, #3
    1e76:	b2d2      	uxtb	r2, r2
    1e78:	f363 1247 	bfi	r2, r3, #5, #3
    1e7c:	f88d 2010 	strb.w	r2, [sp, #16]
			fill_region.base = regions[i].start +
    1e80:	f859 300a 	ldr.w	r3, [r9, sl]
				regions[i].size;
    1e84:	686a      	ldr	r2, [r5, #4]
			fill_region.base = regions[i].start +
    1e86:	4413      	add	r3, r2
    1e88:	9302      	str	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    1e8a:	f023 031f 	bic.w	r3, r3, #31
    1e8e:	eba8 080b 	sub.w	r8, r8, fp
    1e92:	4443      	add	r3, r8
    1e94:	3b01      	subs	r3, #1
    1e96:	f023 031f 	bic.w	r3, r3, #31
			fill_region.attr.r_limit =
    1e9a:	9305      	str	r3, [sp, #20]
				region_allocate_and_init(reg_index,
    1e9c:	a902      	add	r1, sp, #8
    1e9e:	b2c0      	uxtb	r0, r0
    1ea0:	f7ff ff2a 	bl	1cf8 <region_allocate_and_init>
    1ea4:	4604      	mov	r4, r0
			if (reg_index == -EINVAL) {
    1ea6:	f110 0f16 	cmn.w	r0, #22
    1eaa:	f43f af4f 	beq.w	1d4c <mpu_configure_regions_and_partition+0x30>
			reg_index++;
    1eae:	3401      	adds	r4, #1
    1eb0:	e783      	b.n	1dba <mpu_configure_regions_and_partition+0x9e>
    1eb2:	bf00      	nop
    1eb4:	000078d4 	.word	0x000078d4
    1eb8:	000078fc 	.word	0x000078fc
    1ebc:	e000ed00 	.word	0xe000ed00

00001ec0 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1ec0:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1ec2:	4c03      	ldr	r4, [pc, #12]	; (1ed0 <mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1ec4:	2301      	movs	r3, #1
    1ec6:	7822      	ldrb	r2, [r4, #0]
    1ec8:	f7ff ff28 	bl	1d1c <mpu_configure_regions_and_partition>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1ecc:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1ece:	bd10      	pop	{r4, pc}
    1ed0:	20000b70 	.word	0x20000b70

00001ed4 <mpu_mark_areas_for_dynamic_regions>:
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
		const struct z_arm_mpu_partition dyn_region_areas[],
		const uint8_t dyn_region_areas_num)
{
    1ed4:	b570      	push	{r4, r5, r6, lr}
    1ed6:	4605      	mov	r5, r0
    1ed8:	460e      	mov	r6, r1
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1eda:	2400      	movs	r4, #0
    1edc:	e000      	b.n	1ee0 <mpu_mark_areas_for_dynamic_regions+0xc>
    1ede:	3401      	adds	r4, #1
    1ee0:	42a6      	cmp	r6, r4
    1ee2:	dd1e      	ble.n	1f22 <mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1ee4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1ee8:	009a      	lsls	r2, r3, #2
    1eea:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    1eee:	6859      	ldr	r1, [r3, #4]
    1ef0:	2900      	cmp	r1, #0
    1ef2:	d0f4      	beq.n	1ede <mpu_mark_areas_for_dynamic_regions+0xa>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1ef4:	58a8      	ldr	r0, [r5, r2]
    1ef6:	f003 fdd6 	bl	5aa6 <get_region_index>
		dyn_reg_info[i].index =
    1efa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1efe:	4a0b      	ldr	r2, [pc, #44]	; (1f2c <mpu_mark_areas_for_dynamic_regions+0x58>)
    1f00:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1f04:	f110 0f16 	cmn.w	r0, #22
    1f08:	d00c      	beq.n	1f24 <mpu_mark_areas_for_dynamic_regions+0x50>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1f0a:	4b09      	ldr	r3, [pc, #36]	; (1f30 <mpu_mark_areas_for_dynamic_regions+0x5c>)
    1f0c:	781b      	ldrb	r3, [r3, #0]
    1f0e:	4298      	cmp	r0, r3
    1f10:	da09      	bge.n	1f26 <mpu_mark_areas_for_dynamic_regions+0x52>

			return -EINVAL;
		}

		/* Store default configuration */
		mpu_region_get_conf(dyn_reg_info[i].index,
    1f12:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    1f16:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    1f1a:	3104      	adds	r1, #4
    1f1c:	f7ff fecc 	bl	1cb8 <mpu_region_get_conf>
    1f20:	e7dd      	b.n	1ede <mpu_mark_areas_for_dynamic_regions+0xa>
			&dyn_reg_info[i].region_conf);
	}

	return 0;
    1f22:	2000      	movs	r0, #0
}
    1f24:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    1f26:	f06f 0015 	mvn.w	r0, #21
    1f2a:	e7fb      	b.n	1f24 <mpu_mark_areas_for_dynamic_regions+0x50>
    1f2c:	20000864 	.word	0x20000864
    1f30:	20000b70 	.word	0x20000b70

00001f34 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1f34:	4b04      	ldr	r3, [pc, #16]	; (1f48 <arm_core_mpu_enable+0x14>)
    1f36:	2205      	movs	r2, #5
    1f38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1f3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1f40:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1f44:	4770      	bx	lr
    1f46:	bf00      	nop
    1f48:	e000ed00 	.word	0xe000ed00

00001f4c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1f4c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1f50:	4b02      	ldr	r3, [pc, #8]	; (1f5c <arm_core_mpu_disable+0x10>)
    1f52:	2200      	movs	r2, #0
    1f54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1f58:	4770      	bx	lr
    1f5a:	bf00      	nop
    1f5c:	e000ed00 	.word	0xe000ed00

00001f60 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1f60:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1f62:	4b0e      	ldr	r3, [pc, #56]	; (1f9c <z_arm_mpu_init+0x3c>)
    1f64:	681d      	ldr	r5, [r3, #0]
    1f66:	2d08      	cmp	r5, #8
    1f68:	d815      	bhi.n	1f96 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1f6a:	f7ff ffef 	bl	1f4c <arm_core_mpu_disable>
	}
#endif
#endif /* CONFIG_NOCACHE_MEMORY */

	/* Architecture-specific configuration */
	mpu_init();
    1f6e:	f7ff fe8f 	bl	1c90 <mpu_init>

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1f72:	2400      	movs	r4, #0
    1f74:	e007      	b.n	1f86 <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1f76:	4b09      	ldr	r3, [pc, #36]	; (1f9c <z_arm_mpu_init+0x3c>)
    1f78:	6859      	ldr	r1, [r3, #4]
    1f7a:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    1f7e:	4620      	mov	r0, r4
    1f80:	f003 fd4c 	bl	5a1c <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1f84:	3401      	adds	r4, #1
    1f86:	42a5      	cmp	r5, r4
    1f88:	d8f5      	bhi.n	1f76 <z_arm_mpu_init+0x16>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1f8a:	4b05      	ldr	r3, [pc, #20]	; (1fa0 <z_arm_mpu_init+0x40>)
    1f8c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    1f8e:	f7ff ffd1 	bl	1f34 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1f92:	2000      	movs	r0, #0
}
    1f94:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    1f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1f9a:	e7fb      	b.n	1f94 <z_arm_mpu_init+0x34>
    1f9c:	00007924 	.word	0x00007924
    1fa0:	20000b70 	.word	0x20000b70

00001fa4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1fa4:	4b01      	ldr	r3, [pc, #4]	; (1fac <__stdout_hook_install+0x8>)
    1fa6:	6018      	str	r0, [r3, #0]
}
    1fa8:	4770      	bx	lr
    1faa:	bf00      	nop
    1fac:	20000028 	.word	0x20000028

00001fb0 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1fb0:	4800      	ldr	r0, [pc, #0]	; (1fb4 <get_hf_flags+0x4>)
    1fb2:	4770      	bx	lr
    1fb4:	20000904 	.word	0x20000904

00001fb8 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1fb8:	4b03      	ldr	r3, [pc, #12]	; (1fc8 <get_subsys+0x10>)
    1fba:	1ac0      	subs	r0, r0, r3
    1fbc:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    1fbe:	4b03      	ldr	r3, [pc, #12]	; (1fcc <get_subsys+0x14>)
    1fc0:	fb03 f000 	mul.w	r0, r3, r0
    1fc4:	4770      	bx	lr
    1fc6:	bf00      	nop
    1fc8:	2000088c 	.word	0x2000088c
    1fcc:	b6db6db7 	.word	0xb6db6db7

00001fd0 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1fd0:	b538      	push	{r3, r4, r5, lr}
    1fd2:	4605      	mov	r5, r0
    1fd4:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1fd6:	f7ff ffef 	bl	1fb8 <get_subsys>
    1fda:	4601      	mov	r1, r0
    1fdc:	2240      	movs	r2, #64	; 0x40
    1fde:	4803      	ldr	r0, [pc, #12]	; (1fec <onoff_stop+0x1c>)
    1fe0:	f003 fea8 	bl	5d34 <stop>
    1fe4:	4601      	mov	r1, r0
	notify(mgr, res);
    1fe6:	4628      	mov	r0, r5
    1fe8:	47a0      	blx	r4
}
    1fea:	bd38      	pop	{r3, r4, r5, pc}
    1fec:	00006e4c 	.word	0x00006e4c

00001ff0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1ff0:	b530      	push	{r4, r5, lr}
    1ff2:	b083      	sub	sp, #12
    1ff4:	4605      	mov	r5, r0
    1ff6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1ff8:	f7ff ffde 	bl	1fb8 <get_subsys>
    1ffc:	4601      	mov	r1, r0
    1ffe:	2340      	movs	r3, #64	; 0x40
    2000:	9300      	str	r3, [sp, #0]
    2002:	4623      	mov	r3, r4
    2004:	4a05      	ldr	r2, [pc, #20]	; (201c <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x1c>)
    2006:	4806      	ldr	r0, [pc, #24]	; (2020 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x20>)
    2008:	f003 feae 	bl	5d68 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    200c:	1e01      	subs	r1, r0, #0
    200e:	db01      	blt.n	2014 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x14>
		notify(mgr, err);
	}
}
    2010:	b003      	add	sp, #12
    2012:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    2014:	4628      	mov	r0, r5
    2016:	47a0      	blx	r4
}
    2018:	e7fa      	b.n	2010 <CONFIG_NRF_SPU_RAM_REGION_SIZE+0x10>
    201a:	bf00      	nop
    201c:	00005db1 	.word	0x00005db1
    2020:	00006e4c 	.word	0x00006e4c

00002024 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    2024:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    2026:	2805      	cmp	r0, #5
    2028:	d815      	bhi.n	2056 <clock_event_handler+0x32>
    202a:	e8df f000 	tbb	[pc, r0]
    202e:	1a03      	.short	0x1a03
    2030:	10151414 	.word	0x10151414
	case NRFX_CLOCK_EVT_HFCLK_STARTED:
	{
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2034:	2100      	movs	r1, #0
    2036:	480d      	ldr	r0, [pc, #52]	; (206c <clock_event_handler+0x48>)
    2038:	f003 fe05 	bl	5c46 <get_sub_data>

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    203c:	6883      	ldr	r3, [r0, #8]
    203e:	f013 0f07 	tst.w	r3, #7
    2042:	d108      	bne.n	2056 <clock_event_handler+0x32>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    2044:	2100      	movs	r1, #0
    2046:	4809      	ldr	r0, [pc, #36]	; (206c <clock_event_handler+0x48>)
    2048:	f003 fe62 	bl	5d10 <clkstarted_handle>
    204c:	e003      	b.n	2056 <clock_event_handler+0x32>

		break;
	}
#if NRF_CLOCK_HAS_HFCLK192M
	case NRFX_CLOCK_EVT_HFCLK192M_STARTED:
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    204e:	2102      	movs	r1, #2
    2050:	4806      	ldr	r0, [pc, #24]	; (206c <clock_event_handler+0x48>)
    2052:	f003 fe5d 	bl	5d10 <clkstarted_handle>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    2056:	bd08      	pop	{r3, pc}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    2058:	2103      	movs	r1, #3
    205a:	4804      	ldr	r0, [pc, #16]	; (206c <clock_event_handler+0x48>)
    205c:	f003 fe58 	bl	5d10 <clkstarted_handle>
		break;
    2060:	e7f9      	b.n	2056 <clock_event_handler+0x32>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2062:	2101      	movs	r1, #1
    2064:	4801      	ldr	r0, [pc, #4]	; (206c <clock_event_handler+0x48>)
    2066:	f003 fe53 	bl	5d10 <clkstarted_handle>
}
    206a:	e7f4      	b.n	2056 <clock_event_handler+0x32>
    206c:	00006e4c 	.word	0x00006e4c

00002070 <generic_hfclk_start>:
{
    2070:	b510      	push	{r4, lr}
    2072:	b082      	sub	sp, #8
	__asm__ volatile(
    2074:	f04f 0320 	mov.w	r3, #32
    2078:	f3ef 8411 	mrs	r4, BASEPRI
    207c:	f383 8812 	msr	BASEPRI_MAX, r3
    2080:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2084:	4a14      	ldr	r2, [pc, #80]	; (20d8 <generic_hfclk_start+0x68>)
    2086:	6813      	ldr	r3, [r2, #0]
    2088:	f043 0102 	orr.w	r1, r3, #2
    208c:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    208e:	f013 0f01 	tst.w	r3, #1
    2092:	d109      	bne.n	20a8 <generic_hfclk_start+0x38>
	bool already_started = false;
    2094:	2300      	movs	r3, #0
	__asm__ volatile(
    2096:	f384 8811 	msr	BASEPRI, r4
    209a:	f3bf 8f6f 	isb	sy
	if (already_started) {
    209e:	b9b3      	cbnz	r3, 20ce <generic_hfclk_start+0x5e>
	hfclk_start();
    20a0:	f003 fe8e 	bl	5dc0 <hfclk_start>
}
    20a4:	b002      	add	sp, #8
    20a6:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    20a8:	f10d 0207 	add.w	r2, sp, #7
    20ac:	2101      	movs	r1, #1
    20ae:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    20b2:	f003 fd8e 	bl	5bd2 <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    20b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    20ba:	2b01      	cmp	r3, #1
    20bc:	d001      	beq.n	20c2 <generic_hfclk_start+0x52>
	bool already_started = false;
    20be:	2300      	movs	r3, #0
    20c0:	e7e9      	b.n	2096 <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    20c2:	f7ff ff75 	bl	1fb0 <get_hf_flags>
    20c6:	f003 fe10 	bl	5cea <set_on_state>
			already_started = true;
    20ca:	2301      	movs	r3, #1
    20cc:	e7e3      	b.n	2096 <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    20ce:	2100      	movs	r1, #0
    20d0:	4802      	ldr	r0, [pc, #8]	; (20dc <generic_hfclk_start+0x6c>)
    20d2:	f003 fe1d 	bl	5d10 <clkstarted_handle>
		return;
    20d6:	e7e5      	b.n	20a4 <generic_hfclk_start+0x34>
    20d8:	2000092c 	.word	0x2000092c
    20dc:	00006e4c 	.word	0x00006e4c

000020e0 <generic_hfclk_stop>:
{
    20e0:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    20e2:	4b08      	ldr	r3, [pc, #32]	; (2104 <generic_hfclk_stop+0x24>)
    20e4:	e8d3 2fef 	ldaex	r2, [r3]
    20e8:	f022 0102 	bic.w	r1, r2, #2
    20ec:	e8c3 1fe0 	stlex	r0, r1, [r3]
    20f0:	2800      	cmp	r0, #0
    20f2:	d1f7      	bne.n	20e4 <generic_hfclk_stop+0x4>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    20f4:	f012 0f01 	tst.w	r2, #1
    20f8:	d000      	beq.n	20fc <generic_hfclk_stop+0x1c>
}
    20fa:	bd08      	pop	{r3, pc}
	hfclk_stop();
    20fc:	f003 fe74 	bl	5de8 <hfclk_stop>
    2100:	e7fb      	b.n	20fa <generic_hfclk_stop+0x1a>
    2102:	bf00      	nop
    2104:	2000092c 	.word	0x2000092c

00002108 <lfclk_spinwait>:
{
    2108:	b570      	push	{r4, r5, r6, lr}
    210a:	b082      	sub	sp, #8
    210c:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    210e:	2801      	cmp	r0, #1
    2110:	d107      	bne.n	2122 <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2112:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2116:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    211a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    211e:	2b02      	cmp	r3, #2
    2120:	d037      	beq.n	2192 <lfclk_spinwait+0x8a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2122:	f004 fca9 	bl	6a78 <k_is_in_isr>
    2126:	4604      	mov	r4, r0
    2128:	b910      	cbnz	r0, 2130 <lfclk_spinwait+0x28>
	return !z_sys_post_kernel;
    212a:	4b2b      	ldr	r3, [pc, #172]	; (21d8 <lfclk_spinwait+0xd0>)
    212c:	781b      	ldrb	r3, [r3, #0]
    212e:	b97b      	cbnz	r3, 2150 <lfclk_spinwait+0x48>
	__asm__ volatile(
    2130:	f04f 0320 	mov.w	r3, #32
    2134:	f3ef 8611 	mrs	r6, BASEPRI
    2138:	f383 8812 	msr	BASEPRI_MAX, r3
    213c:	f3bf 8f6f 	isb	sy
    2140:	2401      	movs	r4, #1
	if (!isr_mode) {
    2142:	b994      	cbnz	r4, 216a <lfclk_spinwait+0x62>
    p_reg->INTENCLR = mask;
    2144:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2148:	2202      	movs	r2, #2
    214a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    214e:	e00c      	b.n	216a <lfclk_spinwait+0x62>
	int key = isr_mode ? irq_lock() : 0;
    2150:	2600      	movs	r6, #0
    2152:	e7f6      	b.n	2142 <lfclk_spinwait+0x3a>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2154:	b1fc      	cbz	r4, 2196 <lfclk_spinwait+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2156:	4630      	mov	r0, r6
    2158:	f7ff f91c 	bl	1394 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    215c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2160:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2164:	b2db      	uxtb	r3, r3
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2166:	2b01      	cmp	r3, #1
    2168:	d019      	beq.n	219e <lfclk_spinwait+0x96>
    216a:	f10d 0207 	add.w	r2, sp, #7
    216e:	2100      	movs	r1, #0
    2170:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    2174:	f003 fd2d 	bl	5bd2 <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2178:	2800      	cmp	r0, #0
    217a:	d0eb      	beq.n	2154 <lfclk_spinwait+0x4c>
		 && ((type == target_type)
    217c:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2180:	2b02      	cmp	r3, #2
    2182:	d001      	beq.n	2188 <lfclk_spinwait+0x80>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2184:	2d01      	cmp	r5, #1
    2186:	d1e5      	bne.n	2154 <lfclk_spinwait+0x4c>
	if (isr_mode) {
    2188:	b304      	cbz	r4, 21cc <lfclk_spinwait+0xc4>
	__asm__ volatile(
    218a:	f386 8811 	msr	BASEPRI, r6
    218e:	f3bf 8f6f 	isb	sy
}
    2192:	b002      	add	sp, #8
    2194:	bd70      	pop	{r4, r5, r6, pc}
				k_msleep(1);
    2196:	2001      	movs	r0, #1
    2198:	f003 fe3a 	bl	5e10 <k_msleep>
    219c:	e7de      	b.n	215c <lfclk_spinwait+0x54>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    219e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21a2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    21a6:	2b00      	cmp	r3, #0
    21a8:	d0df      	beq.n	216a <lfclk_spinwait+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    21aa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21ae:	2200      	movs	r2, #0
    21b0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    21b4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    21b8:	2202      	movs	r2, #2
    21ba:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    21be:	4a07      	ldr	r2, [pc, #28]	; (21dc <lfclk_spinwait+0xd4>)
    21c0:	2120      	movs	r1, #32
    21c2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21c6:	2201      	movs	r2, #1
    21c8:	609a      	str	r2, [r3, #8]
}
    21ca:	e7ce      	b.n	216a <lfclk_spinwait+0x62>
    p_reg->INTENSET = mask;
    21cc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    21d0:	2202      	movs	r2, #2
    21d2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    21d6:	e7dc      	b.n	2192 <lfclk_spinwait+0x8a>
    21d8:	20000b73 	.word	0x20000b73
    21dc:	e000e100 	.word	0xe000e100

000021e0 <api_blocking_start>:
{
    21e0:	b500      	push	{lr}
    21e2:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    21e4:	f8cd d000 	str.w	sp, [sp]
    21e8:	f8cd d004 	str.w	sp, [sp, #4]
    21ec:	2300      	movs	r3, #0
    21ee:	9302      	str	r3, [sp, #8]
    21f0:	2301      	movs	r3, #1
    21f2:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    21f4:	466b      	mov	r3, sp
    21f6:	4a07      	ldr	r2, [pc, #28]	; (2214 <api_blocking_start+0x34>)
    21f8:	f003 fdd2 	bl	5da0 <api_start>
	if (err < 0) {
    21fc:	2800      	cmp	r0, #0
    21fe:	db05      	blt.n	220c <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2200:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2204:	2300      	movs	r3, #0
    2206:	4668      	mov	r0, sp
    2208:	f001 fffc 	bl	4204 <z_impl_k_sem_take>
}
    220c:	b005      	add	sp, #20
    220e:	f85d fb04 	ldr.w	pc, [sp], #4
    2212:	bf00      	nop
    2214:	00005e3d 	.word	0x00005e3d

00002218 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    2218:	b570      	push	{r4, r5, r6, lr}
    221a:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    221c:	2200      	movs	r2, #0
    221e:	2101      	movs	r1, #1
    2220:	2005      	movs	r0, #5
    2222:	f003 fbb0 	bl	5986 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2226:	4811      	ldr	r0, [pc, #68]	; (226c <clk_init+0x54>)
    2228:	f000 ff42 	bl	30b0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    222c:	4b10      	ldr	r3, [pc, #64]	; (2270 <clk_init+0x58>)
    222e:	4298      	cmp	r0, r3
    2230:	d119      	bne.n	2266 <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2232:	f004 faa9 	bl	6788 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    2236:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    2238:	2c03      	cmp	r4, #3
    223a:	d812      	bhi.n	2262 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    223c:	4621      	mov	r1, r4
    223e:	4630      	mov	r0, r6
    2240:	f003 fd01 	bl	5c46 <get_sub_data>
    2244:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2246:	4621      	mov	r1, r4
    2248:	4630      	mov	r0, r6
    224a:	f003 fd09 	bl	5c60 <get_onoff_manager>
    224e:	4909      	ldr	r1, [pc, #36]	; (2274 <clk_init+0x5c>)
    2250:	f003 f856 	bl	5300 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2254:	2800      	cmp	r0, #0
    2256:	db05      	blt.n	2264 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2258:	2301      	movs	r3, #1
    225a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    225c:	441c      	add	r4, r3
    225e:	b2e4      	uxtb	r4, r4
    2260:	e7ea      	b.n	2238 <clk_init+0x20>
	}

	return 0;
    2262:	2000      	movs	r0, #0
}
    2264:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2266:	f06f 0004 	mvn.w	r0, #4
    226a:	e7fb      	b.n	2264 <clk_init+0x4c>
    226c:	00002025 	.word	0x00002025
    2270:	0bad0000 	.word	0x0bad0000
    2274:	0000795c 	.word	0x0000795c

00002278 <z_nrf_clock_control_lf_on>:
{
    2278:	b510      	push	{r4, lr}
    227a:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    227c:	4b0e      	ldr	r3, [pc, #56]	; (22b8 <z_nrf_clock_control_lf_on+0x40>)
    227e:	2101      	movs	r1, #1
    2280:	e8d3 2fef 	ldaex	r2, [r3]
    2284:	e8c3 1fe0 	stlex	r0, r1, [r3]
    2288:	2800      	cmp	r0, #0
    228a:	d1f9      	bne.n	2280 <z_nrf_clock_control_lf_on+0x8>
	if (atomic_set(&on, 1) == 0) {
    228c:	b11a      	cbz	r2, 2296 <z_nrf_clock_control_lf_on+0x1e>
	switch (start_mode) {
    228e:	1e63      	subs	r3, r4, #1
    2290:	2b01      	cmp	r3, #1
    2292:	d90d      	bls.n	22b0 <z_nrf_clock_control_lf_on+0x38>
}
    2294:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    2296:	4809      	ldr	r0, [pc, #36]	; (22bc <z_nrf_clock_control_lf_on+0x44>)
    2298:	f003 fce2 	bl	5c60 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    229c:	4908      	ldr	r1, [pc, #32]	; (22c0 <z_nrf_clock_control_lf_on+0x48>)
    229e:	2300      	movs	r3, #0
    22a0:	604b      	str	r3, [r1, #4]
    22a2:	608b      	str	r3, [r1, #8]
    22a4:	60cb      	str	r3, [r1, #12]
    22a6:	2301      	movs	r3, #1
    22a8:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    22aa:	f003 f846 	bl	533a <onoff_request>
    22ae:	e7ee      	b.n	228e <z_nrf_clock_control_lf_on+0x16>
		lfclk_spinwait(start_mode);
    22b0:	4620      	mov	r0, r4
    22b2:	f7ff ff29 	bl	2108 <lfclk_spinwait>
		break;
    22b6:	e7ed      	b.n	2294 <z_nrf_clock_control_lf_on+0x1c>
    22b8:	20000888 	.word	0x20000888
    22bc:	00006e4c 	.word	0x00006e4c
    22c0:	20000878 	.word	0x20000878

000022c4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    22c4:	b510      	push	{r4, lr}
    22c6:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    22c8:	280a      	cmp	r0, #10
    22ca:	d006      	beq.n	22da <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    22cc:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    22ce:	4806      	ldr	r0, [pc, #24]	; (22e8 <console_out+0x24>)
    22d0:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    22d2:	685b      	ldr	r3, [r3, #4]
    22d4:	4798      	blx	r3

	return c;
}
    22d6:	4620      	mov	r0, r4
    22d8:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    22da:	4803      	ldr	r0, [pc, #12]	; (22e8 <console_out+0x24>)
    22dc:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    22de:	685b      	ldr	r3, [r3, #4]
    22e0:	210d      	movs	r1, #13
    22e2:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    22e4:	e7f2      	b.n	22cc <console_out+0x8>
    22e6:	bf00      	nop
    22e8:	00006e94 	.word	0x00006e94

000022ec <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    22ec:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    22ee:	4c04      	ldr	r4, [pc, #16]	; (2300 <uart_console_hook_install+0x14>)
    22f0:	4620      	mov	r0, r4
    22f2:	f7ff fe57 	bl	1fa4 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    22f6:	4620      	mov	r0, r4
    22f8:	f7fe f924 	bl	544 <__printk_hook_install>
#endif
}
    22fc:	bd10      	pop	{r4, pc}
    22fe:	bf00      	nop
    2300:	000022c5 	.word	0x000022c5

00002304 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2304:	b508      	push	{r3, lr}
    2306:	4805      	ldr	r0, [pc, #20]	; (231c <uart_console_init+0x18>)
    2308:	f004 fb3e 	bl	6988 <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    230c:	b118      	cbz	r0, 2316 <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    230e:	f7ff ffed 	bl	22ec <uart_console_hook_install>

	return 0;
    2312:	2000      	movs	r0, #0
}
    2314:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2316:	f06f 0012 	mvn.w	r0, #18
    231a:	e7fb      	b.n	2314 <uart_console_init+0x10>
    231c:	00006e94 	.word	0x00006e94

00002320 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2320:	b128      	cbz	r0, 232e <get_dev+0xe>
    2322:	2801      	cmp	r0, #1
    2324:	d101      	bne.n	232a <get_dev+0xa>
    2326:	4803      	ldr	r0, [pc, #12]	; (2334 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    2328:	4770      	bx	lr
	const struct device *dev = NULL;
    232a:	2000      	movs	r0, #0
    232c:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    232e:	4802      	ldr	r0, [pc, #8]	; (2338 <get_dev+0x18>)
    2330:	4770      	bx	lr
    2332:	bf00      	nop
    2334:	00006e64 	.word	0x00006e64
    2338:	00006e7c 	.word	0x00006e7c

0000233c <gpio_nrfx_pin_interrupt_configure>:
{
    233c:	b5f0      	push	{r4, r5, r6, r7, lr}
    233e:	b085      	sub	sp, #20
    2340:	460e      	mov	r6, r1
    2342:	4619      	mov	r1, r3
	return port->config;
    2344:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2346:	7b1b      	ldrb	r3, [r3, #12]
    2348:	f006 051f 	and.w	r5, r6, #31
    234c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    2350:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    2354:	d022      	beq.n	239c <gpio_nrfx_pin_interrupt_configure+0x60>
    2356:	4607      	mov	r7, r0
    2358:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    235a:	2300      	movs	r3, #0
    235c:	9301      	str	r3, [sp, #4]
    235e:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    2360:	4610      	mov	r0, r2
    2362:	f003 fe45 	bl	5ff0 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2366:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    236a:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    236c:	6899      	ldr	r1, [r3, #8]
    236e:	40f1      	lsrs	r1, r6
    2370:	f011 0f01 	tst.w	r1, #1
    2374:	d102      	bne.n	237c <gpio_nrfx_pin_interrupt_configure+0x40>
    2376:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    237a:	d014      	beq.n	23a6 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    237c:	2300      	movs	r3, #0
    237e:	aa01      	add	r2, sp, #4
    2380:	4619      	mov	r1, r3
    2382:	4628      	mov	r0, r5
    2384:	f001 f980 	bl	3688 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2388:	4b1a      	ldr	r3, [pc, #104]	; (23f4 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    238a:	4298      	cmp	r0, r3
    238c:	d12f      	bne.n	23ee <gpio_nrfx_pin_interrupt_configure+0xb2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    238e:	2101      	movs	r1, #1
    2390:	4628      	mov	r0, r5
    2392:	f001 fadd 	bl	3950 <nrfx_gpiote_trigger_enable>
	return 0;
    2396:	2000      	movs	r0, #0
}
    2398:	b005      	add	sp, #20
    239a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    239c:	4628      	mov	r0, r5
    239e:	f001 fb09 	bl	39b4 <nrfx_gpiote_trigger_disable>
		return 0;
    23a2:	2000      	movs	r0, #0
    23a4:	e7f8      	b.n	2398 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    23a6:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    23aa:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    23ac:	2a01      	cmp	r2, #1
    23ae:	d012      	beq.n	23d6 <gpio_nrfx_pin_interrupt_configure+0x9a>
        case 0: return NRF_P0;
    23b0:	4a11      	ldr	r2, [pc, #68]	; (23f8 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    23b2:	3380      	adds	r3, #128	; 0x80
    23b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    23b8:	f013 0f01 	tst.w	r3, #1
    23bc:	d1de      	bne.n	237c <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    23be:	f10d 010f 	add.w	r1, sp, #15
    23c2:	4628      	mov	r0, r5
    23c4:	f001 fa68 	bl	3898 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    23c8:	4b0c      	ldr	r3, [pc, #48]	; (23fc <gpio_nrfx_pin_interrupt_configure+0xc0>)
    23ca:	4298      	cmp	r0, r3
    23cc:	d005      	beq.n	23da <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    23ce:	f10d 030f 	add.w	r3, sp, #15
    23d2:	9302      	str	r3, [sp, #8]
    23d4:	e7d2      	b.n	237c <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    23d6:	4a0a      	ldr	r2, [pc, #40]	; (2400 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    23d8:	e7eb      	b.n	23b2 <gpio_nrfx_pin_interrupt_configure+0x76>
			err = nrfx_gpiote_channel_alloc(&ch);
    23da:	f10d 000f 	add.w	r0, sp, #15
    23de:	f001 faaf 	bl	3940 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    23e2:	4b04      	ldr	r3, [pc, #16]	; (23f4 <gpio_nrfx_pin_interrupt_configure+0xb8>)
    23e4:	4298      	cmp	r0, r3
    23e6:	d0f2      	beq.n	23ce <gpio_nrfx_pin_interrupt_configure+0x92>
				return -ENOMEM;
    23e8:	f06f 000b 	mvn.w	r0, #11
    23ec:	e7d4      	b.n	2398 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    23ee:	f06f 0015 	mvn.w	r0, #21
    23f2:	e7d1      	b.n	2398 <gpio_nrfx_pin_interrupt_configure+0x5c>
    23f4:	0bad0000 	.word	0x0bad0000
    23f8:	50842500 	.word	0x50842500
    23fc:	0bad0004 	.word	0x0bad0004
    2400:	50842800 	.word	0x50842800

00002404 <gpio_nrfx_pin_configure>:
{
    2404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2408:	b086      	sub	sp, #24
    240a:	460e      	mov	r6, r1
    240c:	4614      	mov	r4, r2
	return port->config;
    240e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2412:	f898 300c 	ldrb.w	r3, [r8, #12]
    2416:	f001 051f 	and.w	r5, r1, #31
    241a:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    241e:	f10d 0117 	add.w	r1, sp, #23
    2422:	4628      	mov	r0, r5
    2424:	f001 fa38 	bl	3898 <nrfx_gpiote_channel_get>
    2428:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    242a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    242e:	d039      	beq.n	24a4 <gpio_nrfx_pin_configure+0xa0>
	nrfx_gpiote_trigger_config_t trigger_config = {
    2430:	2100      	movs	r1, #0
    2432:	9103      	str	r1, [sp, #12]
    2434:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    2436:	460b      	mov	r3, r1
    2438:	aa03      	add	r2, sp, #12
    243a:	4628      	mov	r0, r5
    243c:	f001 f924 	bl	3688 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    2440:	4b32      	ldr	r3, [pc, #200]	; (250c <gpio_nrfx_pin_configure+0x108>)
    2442:	4298      	cmp	r0, r3
    2444:	d15f      	bne.n	2506 <gpio_nrfx_pin_configure+0x102>
	if (free_ch) {
    2446:	429f      	cmp	r7, r3
    2448:	d03c      	beq.n	24c4 <gpio_nrfx_pin_configure+0xc0>
	if (flags & GPIO_OUTPUT) {
    244a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    244e:	d047      	beq.n	24e0 <gpio_nrfx_pin_configure+0xdc>
		int rv = get_drive(flags, &drive);
    2450:	f10d 0103 	add.w	r1, sp, #3
    2454:	4620      	mov	r0, r4
    2456:	f003 fd58 	bl	5f0a <get_drive>
		if (rv != 0) {
    245a:	4607      	mov	r7, r0
    245c:	bb48      	cbnz	r0, 24b2 <gpio_nrfx_pin_configure+0xae>
		nrfx_gpiote_output_config_t output_config = {
    245e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2462:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2466:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    246a:	bf0c      	ite	eq
    246c:	2301      	moveq	r3, #1
    246e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    2470:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    2474:	4620      	mov	r0, r4
    2476:	f003 fd8b 	bl	5f90 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    247a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    247e:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    2482:	d024      	beq.n	24ce <gpio_nrfx_pin_configure+0xca>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2484:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2488:	2301      	movs	r3, #1
    248a:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    248c:	6093      	str	r3, [r2, #8]
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    248e:	2200      	movs	r2, #0
    2490:	a901      	add	r1, sp, #4
    2492:	4628      	mov	r0, r5
    2494:	f001 f98e 	bl	37b4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2498:	4b1c      	ldr	r3, [pc, #112]	; (250c <gpio_nrfx_pin_configure+0x108>)
    249a:	4298      	cmp	r0, r3
    249c:	d009      	beq.n	24b2 <gpio_nrfx_pin_configure+0xae>
    249e:	f06f 0715 	mvn.w	r7, #21
    24a2:	e006      	b.n	24b2 <gpio_nrfx_pin_configure+0xae>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    24a4:	4628      	mov	r0, r5
    24a6:	f001 faa7 	bl	39f8 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    24aa:	4b18      	ldr	r3, [pc, #96]	; (250c <gpio_nrfx_pin_configure+0x108>)
    24ac:	429f      	cmp	r7, r3
    24ae:	d004      	beq.n	24ba <gpio_nrfx_pin_configure+0xb6>
		return 0;
    24b0:	2700      	movs	r7, #0
}
    24b2:	4638      	mov	r0, r7
    24b4:	b006      	add	sp, #24
    24b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    24ba:	f89d 0017 	ldrb.w	r0, [sp, #23]
    24be:	f001 fa37 	bl	3930 <nrfx_gpiote_channel_free>
    24c2:	e7f5      	b.n	24b0 <gpio_nrfx_pin_configure+0xac>
		err = nrfx_gpiote_channel_free(ch);
    24c4:	f89d 0017 	ldrb.w	r0, [sp, #23]
    24c8:	f001 fa32 	bl	3930 <nrfx_gpiote_channel_free>
    24cc:	e7bd      	b.n	244a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    24ce:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    24d2:	d0dc      	beq.n	248e <gpio_nrfx_pin_configure+0x8a>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    24d4:	f8d8 2004 	ldr.w	r2, [r8, #4]
    24d8:	2301      	movs	r3, #1
    24da:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    24dc:	60d3      	str	r3, [r2, #12]
}
    24de:	e7d6      	b.n	248e <gpio_nrfx_pin_configure+0x8a>
		.pull = get_pull(flags)
    24e0:	4620      	mov	r0, r4
    24e2:	f003 fd55 	bl	5f90 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    24e6:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    24ea:	2300      	movs	r3, #0
    24ec:	461a      	mov	r2, r3
    24ee:	a902      	add	r1, sp, #8
    24f0:	4628      	mov	r0, r5
    24f2:	f001 f8c9 	bl	3688 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    24f6:	4b05      	ldr	r3, [pc, #20]	; (250c <gpio_nrfx_pin_configure+0x108>)
    24f8:	4298      	cmp	r0, r3
    24fa:	d101      	bne.n	2500 <gpio_nrfx_pin_configure+0xfc>
    24fc:	2700      	movs	r7, #0
    24fe:	e7d8      	b.n	24b2 <gpio_nrfx_pin_configure+0xae>
    2500:	f06f 0715 	mvn.w	r7, #21
    2504:	e7d5      	b.n	24b2 <gpio_nrfx_pin_configure+0xae>
		return -EINVAL;
    2506:	f06f 0715 	mvn.w	r7, #21
    250a:	e7d2      	b.n	24b2 <gpio_nrfx_pin_configure+0xae>
    250c:	0bad0000 	.word	0x0bad0000

00002510 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2510:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2512:	f001 fa03 	bl	391c <nrfx_gpiote_is_init>
    2516:	b108      	cbz	r0, 251c <gpio_nrfx_init+0xc>
		return 0;
    2518:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    251a:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    251c:	f001 f9d4 	bl	38c8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2520:	4b08      	ldr	r3, [pc, #32]	; (2544 <gpio_nrfx_init+0x34>)
    2522:	4298      	cmp	r0, r3
    2524:	d10a      	bne.n	253c <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2526:	2100      	movs	r1, #0
    2528:	4807      	ldr	r0, [pc, #28]	; (2548 <gpio_nrfx_init+0x38>)
    252a:	f001 f9af 	bl	388c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    252e:	2200      	movs	r2, #0
    2530:	2105      	movs	r1, #5
    2532:	200d      	movs	r0, #13
    2534:	f003 fa27 	bl	5986 <z_arm_irq_priority_set>
	return 0;
    2538:	2000      	movs	r0, #0
    253a:	e7ee      	b.n	251a <gpio_nrfx_init+0xa>
		return -EIO;
    253c:	f06f 0004 	mvn.w	r0, #4
    2540:	e7eb      	b.n	251a <gpio_nrfx_init+0xa>
    2542:	bf00      	nop
    2544:	0bad0000 	.word	0x0bad0000
    2548:	00006029 	.word	0x00006029

0000254c <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    254c:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    254e:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    2550:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    2554:	d06f      	beq.n	2636 <baudrate_set+0xea>
    2556:	d83a      	bhi.n	25ce <baudrate_set+0x82>
    2558:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    255c:	d06e      	beq.n	263c <baudrate_set+0xf0>
    255e:	d90a      	bls.n	2576 <baudrate_set+0x2a>
    2560:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    2564:	d075      	beq.n	2652 <baudrate_set+0x106>
    2566:	d924      	bls.n	25b2 <baudrate_set+0x66>
    2568:	f647 2312 	movw	r3, #31250	; 0x7a12
    256c:	4299      	cmp	r1, r3
    256e:	d12b      	bne.n	25c8 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2570:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2574:	e013      	b.n	259e <baudrate_set+0x52>
	switch (baudrate) {
    2576:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    257a:	d061      	beq.n	2640 <baudrate_set+0xf4>
    257c:	d907      	bls.n	258e <baudrate_set+0x42>
    257e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    2582:	d063      	beq.n	264c <baudrate_set+0x100>
    2584:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2588:	d110      	bne.n	25ac <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    258a:	4b3c      	ldr	r3, [pc, #240]	; (267c <baudrate_set+0x130>)
    258c:	e007      	b.n	259e <baudrate_set+0x52>
	switch (baudrate) {
    258e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2592:	d058      	beq.n	2646 <baudrate_set+0xfa>
    2594:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    2598:	d105      	bne.n	25a6 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    259a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    259e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    25a2:	2000      	movs	r0, #0
    25a4:	4770      	bx	lr
	switch (baudrate) {
    25a6:	f06f 0015 	mvn.w	r0, #21
    25aa:	4770      	bx	lr
    25ac:	f06f 0015 	mvn.w	r0, #21
    25b0:	4770      	bx	lr
    25b2:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    25b6:	d04e      	beq.n	2656 <baudrate_set+0x10a>
    25b8:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    25bc:	d101      	bne.n	25c2 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    25be:	4b30      	ldr	r3, [pc, #192]	; (2680 <baudrate_set+0x134>)
    25c0:	e7ed      	b.n	259e <baudrate_set+0x52>
	switch (baudrate) {
    25c2:	f06f 0015 	mvn.w	r0, #21
    25c6:	4770      	bx	lr
    25c8:	f06f 0015 	mvn.w	r0, #21
    25cc:	4770      	bx	lr
    25ce:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    25d2:	d042      	beq.n	265a <baudrate_set+0x10e>
    25d4:	d909      	bls.n	25ea <baudrate_set+0x9e>
    25d6:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    25da:	d046      	beq.n	266a <baudrate_set+0x11e>
    25dc:	d91f      	bls.n	261e <baudrate_set+0xd2>
    25de:	4b29      	ldr	r3, [pc, #164]	; (2684 <baudrate_set+0x138>)
    25e0:	4299      	cmp	r1, r3
    25e2:	d148      	bne.n	2676 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    25e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    25e8:	e7d9      	b.n	259e <baudrate_set+0x52>
	switch (baudrate) {
    25ea:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    25ee:	d037      	beq.n	2660 <baudrate_set+0x114>
    25f0:	d905      	bls.n	25fe <baudrate_set+0xb2>
    25f2:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    25f6:	d10f      	bne.n	2618 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    25f8:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    25fc:	e7cf      	b.n	259e <baudrate_set+0x52>
	switch (baudrate) {
    25fe:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    2602:	4299      	cmp	r1, r3
    2604:	d02e      	beq.n	2664 <baudrate_set+0x118>
    2606:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    260a:	d102      	bne.n	2612 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    260c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    2610:	e7c5      	b.n	259e <baudrate_set+0x52>
	switch (baudrate) {
    2612:	f06f 0015 	mvn.w	r0, #21
    2616:	4770      	bx	lr
    2618:	f06f 0015 	mvn.w	r0, #21
    261c:	4770      	bx	lr
    261e:	4b1a      	ldr	r3, [pc, #104]	; (2688 <baudrate_set+0x13c>)
    2620:	4299      	cmp	r1, r3
    2622:	d025      	beq.n	2670 <baudrate_set+0x124>
    2624:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    2628:	d102      	bne.n	2630 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    262a:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    262e:	e7b6      	b.n	259e <baudrate_set+0x52>
	switch (baudrate) {
    2630:	f06f 0015 	mvn.w	r0, #21
    2634:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    2636:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    263a:	e7b0      	b.n	259e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    263c:	4b13      	ldr	r3, [pc, #76]	; (268c <baudrate_set+0x140>)
    263e:	e7ae      	b.n	259e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2640:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2644:	e7ab      	b.n	259e <baudrate_set+0x52>
	switch (baudrate) {
    2646:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    264a:	e7a8      	b.n	259e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    264c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2650:	e7a5      	b.n	259e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    2652:	4b0f      	ldr	r3, [pc, #60]	; (2690 <baudrate_set+0x144>)
    2654:	e7a3      	b.n	259e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2656:	4b0f      	ldr	r3, [pc, #60]	; (2694 <baudrate_set+0x148>)
    2658:	e7a1      	b.n	259e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    265a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    265e:	e79e      	b.n	259e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2660:	4b0d      	ldr	r3, [pc, #52]	; (2698 <baudrate_set+0x14c>)
    2662:	e79c      	b.n	259e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2664:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2668:	e799      	b.n	259e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    266a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    266e:	e796      	b.n	259e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2670:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2674:	e793      	b.n	259e <baudrate_set+0x52>
	switch (baudrate) {
    2676:	f06f 0015 	mvn.w	r0, #21
}
    267a:	4770      	bx	lr
    267c:	0013b000 	.word	0x0013b000
    2680:	004ea000 	.word	0x004ea000
    2684:	000f4240 	.word	0x000f4240
    2688:	0003d090 	.word	0x0003d090
    268c:	00275000 	.word	0x00275000
    2690:	0075c000 	.word	0x0075c000
    2694:	003af000 	.word	0x003af000
    2698:	013a9000 	.word	0x013a9000

0000269c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    269c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    269e:	4605      	mov	r5, r0
    26a0:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    26a2:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    26a4:	f004 f9e8 	bl	6a78 <k_is_in_isr>
    26a8:	b910      	cbnz	r0, 26b0 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    26aa:	4b12      	ldr	r3, [pc, #72]	; (26f4 <uarte_nrfx_poll_out+0x58>)
    26ac:	781b      	ldrb	r3, [r3, #0]
    26ae:	b983      	cbnz	r3, 26d2 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    26b0:	f04f 0320 	mov.w	r3, #32
    26b4:	f3ef 8411 	mrs	r4, BASEPRI
    26b8:	f383 8812 	msr	BASEPRI_MAX, r3
    26bc:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    26c0:	4628      	mov	r0, r5
    26c2:	f003 fd74 	bl	61ae <is_tx_ready>
    26c6:	b940      	cbnz	r0, 26da <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    26c8:	f384 8811 	msr	BASEPRI, r4
    26cc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    26d0:	e7ee      	b.n	26b0 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    26d2:	4628      	mov	r0, r5
    26d4:	f003 fdd0 	bl	6278 <wait_tx_ready>
    26d8:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    26da:	693b      	ldr	r3, [r7, #16]
    26dc:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    26de:	2201      	movs	r2, #1
    26e0:	6939      	ldr	r1, [r7, #16]
    26e2:	4628      	mov	r0, r5
    26e4:	f003 fd7d 	bl	61e2 <tx_start>
	__asm__ volatile(
    26e8:	f384 8811 	msr	BASEPRI, r4
    26ec:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    26f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26f2:	bf00      	nop
    26f4:	20000b73 	.word	0x20000b73

000026f8 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    26f8:	b538      	push	{r3, r4, r5, lr}
    26fa:	4605      	mov	r5, r0
    26fc:	460c      	mov	r4, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    26fe:	f101 0018 	add.w	r0, r1, #24
    2702:	f000 fd4b 	bl	319c <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2706:	4b0c      	ldr	r3, [pc, #48]	; (2738 <endtx_stoptx_ppi_init+0x40>)
    2708:	4298      	cmp	r0, r3
    270a:	d10e      	bne.n	272a <endtx_stoptx_ppi_init+0x32>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    270c:	7e23      	ldrb	r3, [r4, #24]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    270e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2712:	f8c5 31a0 	str.w	r3, [r5, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2716:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    271a:	7e22      	ldrb	r2, [r4, #24]
    271c:	2301      	movs	r3, #1
    271e:	4093      	lsls	r3, r2
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    2720:	4a06      	ldr	r2, [pc, #24]	; (273c <endtx_stoptx_ppi_init+0x44>)
    2722:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    2726:	2000      	movs	r0, #0
}
    2728:	bd38      	pop	{r3, r4, r5, pc}
		LOG_ERR("Failed to allocate PPI Channel");
    272a:	2145      	movs	r1, #69	; 0x45
    272c:	4804      	ldr	r0, [pc, #16]	; (2740 <endtx_stoptx_ppi_init+0x48>)
    272e:	f003 f8d8 	bl	58e2 <z_log_minimal_printk>
		return -EIO;
    2732:	f06f 0004 	mvn.w	r0, #4
    2736:	e7f7      	b.n	2728 <endtx_stoptx_ppi_init+0x30>
    2738:	0bad0000 	.word	0x0bad0000
    273c:	50017000 	.word	0x50017000
    2740:	00007a54 	.word	0x00007a54

00002744 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2744:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    2748:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    274c:	4b01      	ldr	r3, [pc, #4]	; (2754 <set_comparator+0x10>)
    274e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    2752:	4770      	bx	lr
    2754:	50015000 	.word	0x50015000

00002758 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    2758:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    275c:	4b01      	ldr	r3, [pc, #4]	; (2764 <get_comparator+0xc>)
    275e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    2762:	4770      	bx	lr
    2764:	50015000 	.word	0x50015000

00002768 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2768:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    276c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    276e:	4a02      	ldr	r2, [pc, #8]	; (2778 <event_enable+0x10>)
    2770:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    2774:	4770      	bx	lr
    2776:	bf00      	nop
    2778:	50015000 	.word	0x50015000

0000277c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    277c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2780:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2782:	4a02      	ldr	r2, [pc, #8]	; (278c <event_disable+0x10>)
    2784:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    2788:	4770      	bx	lr
    278a:	bf00      	nop
    278c:	50015000 	.word	0x50015000

00002790 <counter>:
     return p_reg->COUNTER;
    2790:	4b01      	ldr	r3, [pc, #4]	; (2798 <counter+0x8>)
    2792:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    2796:	4770      	bx	lr
    2798:	50015000 	.word	0x50015000

0000279c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    279c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    279e:	2301      	movs	r3, #1
    27a0:	4083      	lsls	r3, r0
    27a2:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    27a6:	4a0c      	ldr	r2, [pc, #48]	; (27d8 <compare_int_lock+0x3c>)
    27a8:	e8d2 1fef 	ldaex	r1, [r2]
    27ac:	ea01 0e0c 	and.w	lr, r1, ip
    27b0:	e8c2 efe4 	stlex	r4, lr, [r2]
    27b4:	2c00      	cmp	r4, #0
    27b6:	d1f7      	bne.n	27a8 <compare_int_lock+0xc>

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    27b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    27bc:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    27be:	4807      	ldr	r0, [pc, #28]	; (27dc <compare_int_lock+0x40>)
    27c0:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
    27c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    27c8:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    27cc:	420b      	tst	r3, r1
}
    27ce:	bf14      	ite	ne
    27d0:	2001      	movne	r0, #1
    27d2:	2000      	moveq	r0, #0
    27d4:	bd10      	pop	{r4, pc}
    27d6:	bf00      	nop
    27d8:	2000094c 	.word	0x2000094c
    27dc:	50015000 	.word	0x50015000

000027e0 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    27e0:	b538      	push	{r3, r4, r5, lr}
    27e2:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    27e4:	f003 fdf3 	bl	63ce <full_int_lock>
    27e8:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    27ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    27ee:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    27f0:	4a14      	ldr	r2, [pc, #80]	; (2844 <channel_processing_check_and_clear+0x64>)
    27f2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    27f6:	4213      	tst	r3, r2
    27f8:	d105      	bne.n	2806 <channel_processing_check_and_clear+0x26>
	bool result = false;
    27fa:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    27fc:	4628      	mov	r0, r5
    27fe:	f003 fdef 	bl	63e0 <full_int_unlock>

	return result;
}
    2802:	4620      	mov	r0, r4
    2804:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2806:	2301      	movs	r3, #1
    2808:	40a3      	lsls	r3, r4
    280a:	43db      	mvns	r3, r3
    280c:	4a0e      	ldr	r2, [pc, #56]	; (2848 <channel_processing_check_and_clear+0x68>)
    280e:	e8d2 1fef 	ldaex	r1, [r2]
    2812:	ea01 0003 	and.w	r0, r1, r3
    2816:	e8c2 0fec 	stlex	ip, r0, [r2]
    281a:	f1bc 0f00 	cmp.w	ip, #0
    281e:	d1f6      	bne.n	280e <channel_processing_check_and_clear+0x2e>
    2820:	b949      	cbnz	r1, 2836 <channel_processing_check_and_clear+0x56>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2822:	f104 0350 	add.w	r3, r4, #80	; 0x50
    2826:	009b      	lsls	r3, r3, #2
    2828:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    282a:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    282e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    2832:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2834:	b123      	cbz	r3, 2840 <channel_processing_check_and_clear+0x60>
			event_clear(chan);
    2836:	4620      	mov	r0, r4
    2838:	f003 fdba 	bl	63b0 <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    283c:	2401      	movs	r4, #1
    283e:	e7dd      	b.n	27fc <channel_processing_check_and_clear+0x1c>
    2840:	2400      	movs	r4, #0
    2842:	e7db      	b.n	27fc <channel_processing_check_and_clear+0x1c>
    2844:	50015000 	.word	0x50015000
    2848:	20000948 	.word	0x20000948

0000284c <compare_int_unlock>:
	if (key) {
    284c:	b901      	cbnz	r1, 2850 <compare_int_unlock+0x4>
}
    284e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    2850:	2301      	movs	r3, #1
    2852:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2854:	4a0d      	ldr	r2, [pc, #52]	; (288c <compare_int_unlock+0x40>)
    2856:	e8d2 cfef 	ldaex	ip, [r2]
    285a:	ea4c 0c03 	orr.w	ip, ip, r3
    285e:	e8c2 cfe1 	stlex	r1, ip, [r2]
    2862:	2900      	cmp	r1, #0
    2864:	d1f7      	bne.n	2856 <compare_int_unlock+0xa>
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    286a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    286c:	4a08      	ldr	r2, [pc, #32]	; (2890 <compare_int_unlock+0x44>)
    286e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2872:	4b08      	ldr	r3, [pc, #32]	; (2894 <compare_int_unlock+0x48>)
    2874:	e8d3 3faf 	lda	r3, [r3]
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2878:	40c3      	lsrs	r3, r0
    287a:	f013 0f01 	tst.w	r3, #1
    287e:	d0e6      	beq.n	284e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2880:	4b05      	ldr	r3, [pc, #20]	; (2898 <compare_int_unlock+0x4c>)
    2882:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2886:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    288a:	e7e0      	b.n	284e <compare_int_unlock+0x2>
    288c:	2000094c 	.word	0x2000094c
    2890:	50015000 	.word	0x50015000
    2894:	20000948 	.word	0x20000948
    2898:	e000e100 	.word	0xe000e100

0000289c <sys_clock_timeout_handler>:
{
    289c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    28a0:	4607      	mov	r7, r0
    28a2:	4614      	mov	r4, r2
    28a4:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    28a6:	4610      	mov	r0, r2
    28a8:	4619      	mov	r1, r3
    28aa:	f003 fd8d 	bl	63c8 <absolute_time_to_cc>
    28ae:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    28b0:	4b15      	ldr	r3, [pc, #84]	; (2908 <sys_clock_timeout_handler+0x6c>)
    28b2:	681a      	ldr	r2, [r3, #0]
    28b4:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    28b6:	601c      	str	r4, [r3, #0]
    28b8:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    28ba:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    28be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    28c2:	d309      	bcc.n	28d8 <sys_clock_timeout_handler+0x3c>
	return false;
    28c4:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    28c6:	f002 f99d 	bl	4c04 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    28ca:	4638      	mov	r0, r7
    28cc:	f7ff ff44 	bl	2758 <get_comparator>
    28d0:	42a8      	cmp	r0, r5
    28d2:	d00e      	beq.n	28f2 <sys_clock_timeout_handler+0x56>
}
    28d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    28d8:	4b0c      	ldr	r3, [pc, #48]	; (290c <sys_clock_timeout_handler+0x70>)
    28da:	681b      	ldr	r3, [r3, #0]
    28dc:	0a1a      	lsrs	r2, r3, #8
    28de:	061b      	lsls	r3, r3, #24
    28e0:	eb15 0803 	adds.w	r8, r5, r3
    28e4:	f142 0900 	adc.w	r9, r2, #0
    28e8:	4b09      	ldr	r3, [pc, #36]	; (2910 <sys_clock_timeout_handler+0x74>)
    28ea:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    28ee:	2401      	movs	r4, #1
    28f0:	e7e9      	b.n	28c6 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    28f2:	b11c      	cbz	r4, 28fc <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    28f4:	4638      	mov	r0, r7
    28f6:	f7ff ff37 	bl	2768 <event_enable>
}
    28fa:	e7eb      	b.n	28d4 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    28fc:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    2900:	4638      	mov	r0, r7
    2902:	f7ff ff1f 	bl	2744 <set_comparator>
    2906:	e7f5      	b.n	28f4 <sys_clock_timeout_handler+0x58>
    2908:	200001a0 	.word	0x200001a0
    290c:	20000950 	.word	0x20000950
    2910:	200001a8 	.word	0x200001a8

00002914 <z_nrf_rtc_timer_read>:
{
    2914:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2916:	4b0d      	ldr	r3, [pc, #52]	; (294c <z_nrf_rtc_timer_read+0x38>)
    2918:	681c      	ldr	r4, [r3, #0]
    291a:	0a25      	lsrs	r5, r4, #8
    291c:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    291e:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    2922:	f7ff ff35 	bl	2790 <counter>
    2926:	4603      	mov	r3, r0
	val += cntr;
    2928:	1900      	adds	r0, r0, r4
    292a:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    292e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2932:	d20a      	bcs.n	294a <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    2934:	4b06      	ldr	r3, [pc, #24]	; (2950 <z_nrf_rtc_timer_read+0x3c>)
    2936:	e9d3 2300 	ldrd	r2, r3, [r3]
    293a:	4290      	cmp	r0, r2
    293c:	eb71 0303 	sbcs.w	r3, r1, r3
    2940:	d203      	bcs.n	294a <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    2942:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2946:	f141 0100 	adc.w	r1, r1, #0
}
    294a:	bd38      	pop	{r3, r4, r5, pc}
    294c:	20000950 	.word	0x20000950
    2950:	200001a8 	.word	0x200001a8

00002954 <compare_set_nolocks>:
{
    2954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2956:	4606      	mov	r6, r0
    2958:	4614      	mov	r4, r2
    295a:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    295c:	4610      	mov	r0, r2
    295e:	4619      	mov	r1, r3
    2960:	f003 fd32 	bl	63c8 <absolute_time_to_cc>
    2964:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2966:	f7ff ffd5 	bl	2914 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    296a:	42a0      	cmp	r0, r4
    296c:	eb71 0305 	sbcs.w	r3, r1, r5
    2970:	d21d      	bcs.n	29ae <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    2972:	1a20      	subs	r0, r4, r0
    2974:	eb65 0101 	sbc.w	r1, r5, r1
    2978:	4b19      	ldr	r3, [pc, #100]	; (29e0 <compare_set_nolocks+0x8c>)
    297a:	4298      	cmp	r0, r3
    297c:	f171 0100 	sbcs.w	r1, r1, #0
    2980:	d22b      	bcs.n	29da <compare_set_nolocks+0x86>
		if (target_time != cc_data[chan].target_time) {
    2982:	4b18      	ldr	r3, [pc, #96]	; (29e4 <compare_set_nolocks+0x90>)
    2984:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2988:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    298c:	42ab      	cmp	r3, r5
    298e:	bf08      	it	eq
    2990:	42a2      	cmpeq	r2, r4
    2992:	d016      	beq.n	29c2 <compare_set_nolocks+0x6e>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2994:	4639      	mov	r1, r7
    2996:	4630      	mov	r0, r6
    2998:	f003 fd27 	bl	63ea <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    299c:	4639      	mov	r1, r7
    299e:	f003 fd03 	bl	63a8 <counter_sub>
    29a2:	1900      	adds	r0, r0, r4
    29a4:	f145 0300 	adc.w	r3, r5, #0
    29a8:	4604      	mov	r4, r0
    29aa:	461d      	mov	r5, r3
    29ac:	e009      	b.n	29c2 <compare_set_nolocks+0x6e>
		atomic_or(&force_isr_mask, BIT(chan));
    29ae:	2301      	movs	r3, #1
    29b0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    29b2:	4a0d      	ldr	r2, [pc, #52]	; (29e8 <compare_set_nolocks+0x94>)
    29b4:	e8d2 0fef 	ldaex	r0, [r2]
    29b8:	4318      	orrs	r0, r3
    29ba:	e8c2 0fe1 	stlex	r1, r0, [r2]
    29be:	2900      	cmp	r1, #0
    29c0:	d1f8      	bne.n	29b4 <compare_set_nolocks+0x60>
	cc_data[chan].target_time = target_time;
    29c2:	4b08      	ldr	r3, [pc, #32]	; (29e4 <compare_set_nolocks+0x90>)
    29c4:	0132      	lsls	r2, r6, #4
    29c6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    29ca:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    29ce:	9906      	ldr	r1, [sp, #24]
    29d0:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    29d2:	9b07      	ldr	r3, [sp, #28]
    29d4:	6073      	str	r3, [r6, #4]
	return ret;
    29d6:	2000      	movs	r0, #0
}
    29d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    29da:	f06f 0015 	mvn.w	r0, #21
    29de:	e7fb      	b.n	29d8 <compare_set_nolocks+0x84>
    29e0:	01000001 	.word	0x01000001
    29e4:	20000190 	.word	0x20000190
    29e8:	20000948 	.word	0x20000948

000029ec <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    29ec:	b530      	push	{r4, r5, lr}
    29ee:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    29f0:	2300      	movs	r3, #0
    29f2:	4a1d      	ldr	r2, [pc, #116]	; (2a68 <sys_clock_driver_init+0x7c>)
    29f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    29f8:	2b00      	cmp	r3, #0
    29fa:	dd24      	ble.n	2a46 <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    29fc:	4c1a      	ldr	r4, [pc, #104]	; (2a68 <sys_clock_driver_init+0x7c>)
    29fe:	2502      	movs	r5, #2
    2a00:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a04:	4b19      	ldr	r3, [pc, #100]	; (2a6c <sys_clock_driver_init+0x80>)
    2a06:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    2a0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2a0e:	2200      	movs	r2, #0
    2a10:	2101      	movs	r1, #1
    2a12:	2015      	movs	r0, #21
    2a14:	f002 ffb7 	bl	5986 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2a18:	2015      	movs	r0, #21
    2a1a:	f002 ffaf 	bl	597c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2a1e:	2301      	movs	r3, #1
    2a20:	60a3      	str	r3, [r4, #8]
    2a22:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2a24:	4a12      	ldr	r2, [pc, #72]	; (2a70 <sys_clock_driver_init+0x84>)
    2a26:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2a28:	2400      	movs	r4, #0
    2a2a:	9401      	str	r4, [sp, #4]
    2a2c:	4b11      	ldr	r3, [pc, #68]	; (2a74 <sys_clock_driver_init+0x88>)
    2a2e:	9300      	str	r3, [sp, #0]
    2a30:	4a11      	ldr	r2, [pc, #68]	; (2a78 <sys_clock_driver_init+0x8c>)
    2a32:	2300      	movs	r3, #0
    2a34:	4620      	mov	r0, r4
    2a36:	f003 fd13 	bl	6460 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2a3a:	4628      	mov	r0, r5
    2a3c:	f7ff fc1c 	bl	2278 <z_nrf_clock_control_lf_on>

	return 0;
}
    2a40:	4620      	mov	r0, r4
    2a42:	b003      	add	sp, #12
    2a44:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2a46:	4a0d      	ldr	r2, [pc, #52]	; (2a7c <sys_clock_driver_init+0x90>)
    2a48:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2a54:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2a58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2a5c:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    2a5e:	4902      	ldr	r1, [pc, #8]	; (2a68 <sys_clock_driver_init+0x7c>)
    2a60:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2a64:	3301      	adds	r3, #1
    2a66:	e7c7      	b.n	29f8 <sys_clock_driver_init+0xc>
    2a68:	50015000 	.word	0x50015000
    2a6c:	e000e100 	.word	0xe000e100
    2a70:	2000094c 	.word	0x2000094c
    2a74:	0000289d 	.word	0x0000289d
    2a78:	007fffff 	.word	0x007fffff
    2a7c:	20000190 	.word	0x20000190

00002a80 <process_channel>:
{
    2a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a84:	b082      	sub	sp, #8
    2a86:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    2a88:	f7ff feaa 	bl	27e0 <channel_processing_check_and_clear>
    2a8c:	b910      	cbnz	r0, 2a94 <process_channel+0x14>
}
    2a8e:	b002      	add	sp, #8
    2a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2a94:	f7ff ff3e 	bl	2914 <z_nrf_rtc_timer_read>
    2a98:	4682      	mov	sl, r0
    2a9a:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    2a9c:	f003 fc97 	bl	63ce <full_int_lock>
    2aa0:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    2aa2:	4b13      	ldr	r3, [pc, #76]	; (2af0 <process_channel+0x70>)
    2aa4:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    2aa8:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2aac:	45c2      	cmp	sl, r8
    2aae:	eb75 0509 	sbcs.w	r5, r5, r9
    2ab2:	d20b      	bcs.n	2acc <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2ab4:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    2ab6:	4630      	mov	r0, r6
    2ab8:	f003 fc92 	bl	63e0 <full_int_unlock>
		if (handler) {
    2abc:	2d00      	cmp	r5, #0
    2abe:	d0e6      	beq.n	2a8e <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2ac0:	9700      	str	r7, [sp, #0]
    2ac2:	4642      	mov	r2, r8
    2ac4:	464b      	mov	r3, r9
    2ac6:	4620      	mov	r0, r4
    2ac8:	47a8      	blx	r5
}
    2aca:	e7e0      	b.n	2a8e <process_channel+0xe>
			handler = cc_data[chan].callback;
    2acc:	4a08      	ldr	r2, [pc, #32]	; (2af0 <process_channel+0x70>)
    2ace:	0123      	lsls	r3, r4, #4
    2ad0:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2ad4:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    2ad6:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    2ad8:	2000      	movs	r0, #0
    2ada:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2adc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ae0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2ae4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    2ae8:	4620      	mov	r0, r4
    2aea:	f7ff fe47 	bl	277c <event_disable>
    2aee:	e7e2      	b.n	2ab6 <process_channel+0x36>
    2af0:	20000190 	.word	0x20000190

00002af4 <rtc_nrf_isr>:
{
    2af4:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    2af6:	4b0e      	ldr	r3, [pc, #56]	; (2b30 <rtc_nrf_isr+0x3c>)
    2af8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2afc:	f013 0f02 	tst.w	r3, #2
    2b00:	d00d      	beq.n	2b1e <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2b02:	4b0b      	ldr	r3, [pc, #44]	; (2b30 <rtc_nrf_isr+0x3c>)
    2b04:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2b08:	b14b      	cbz	r3, 2b1e <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2b0a:	4b09      	ldr	r3, [pc, #36]	; (2b30 <rtc_nrf_isr+0x3c>)
    2b0c:	2200      	movs	r2, #0
    2b0e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2b12:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    2b16:	4a07      	ldr	r2, [pc, #28]	; (2b34 <rtc_nrf_isr+0x40>)
    2b18:	6813      	ldr	r3, [r2, #0]
    2b1a:	3301      	adds	r3, #1
    2b1c:	6013      	str	r3, [r2, #0]
{
    2b1e:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2b20:	2c00      	cmp	r4, #0
    2b22:	dd00      	ble.n	2b26 <rtc_nrf_isr+0x32>
}
    2b24:	bd10      	pop	{r4, pc}
		process_channel(chan);
    2b26:	4620      	mov	r0, r4
    2b28:	f7ff ffaa 	bl	2a80 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2b2c:	3401      	adds	r4, #1
    2b2e:	e7f7      	b.n	2b20 <rtc_nrf_isr+0x2c>
    2b30:	50015000 	.word	0x50015000
    2b34:	20000950 	.word	0x20000950

00002b38 <sys_clock_set_timeout>:
{
    2b38:	b510      	push	{r4, lr}
    2b3a:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2b3c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2b40:	d006      	beq.n	2b50 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2b42:	2801      	cmp	r0, #1
    2b44:	dd06      	ble.n	2b54 <sys_clock_set_timeout+0x1c>
    2b46:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2b4a:	da05      	bge.n	2b58 <sys_clock_set_timeout+0x20>
    2b4c:	1e44      	subs	r4, r0, #1
    2b4e:	e004      	b.n	2b5a <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2b50:	480f      	ldr	r0, [pc, #60]	; (2b90 <sys_clock_set_timeout+0x58>)
    2b52:	e7f8      	b.n	2b46 <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2b54:	2400      	movs	r4, #0
    2b56:	e000      	b.n	2b5a <sys_clock_set_timeout+0x22>
    2b58:	4c0d      	ldr	r4, [pc, #52]	; (2b90 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2b5a:	f7ff fedb 	bl	2914 <z_nrf_rtc_timer_read>
    2b5e:	4b0d      	ldr	r3, [pc, #52]	; (2b94 <sys_clock_set_timeout+0x5c>)
    2b60:	681a      	ldr	r2, [r3, #0]
    2b62:	685b      	ldr	r3, [r3, #4]
    2b64:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    2b66:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2b6a:	d300      	bcc.n	2b6e <sys_clock_set_timeout+0x36>
		ticks = 0;
    2b6c:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2b6e:	4420      	add	r0, r4
    2b70:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
    2b72:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    2b76:	d300      	bcc.n	2b7a <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    2b78:	4905      	ldr	r1, [pc, #20]	; (2b90 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    2b7a:	2000      	movs	r0, #0
    2b7c:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2b7e:	9001      	str	r0, [sp, #4]
    2b80:	4905      	ldr	r1, [pc, #20]	; (2b98 <sys_clock_set_timeout+0x60>)
    2b82:	9100      	str	r1, [sp, #0]
    2b84:	f143 0300 	adc.w	r3, r3, #0
    2b88:	f003 fc6a 	bl	6460 <compare_set>
}
    2b8c:	b002      	add	sp, #8
    2b8e:	bd10      	pop	{r4, pc}
    2b90:	007fffff 	.word	0x007fffff
    2b94:	200001a0 	.word	0x200001a0
    2b98:	0000289d 	.word	0x0000289d

00002b9c <sys_clock_elapsed>:
{
    2b9c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2b9e:	f7ff feb9 	bl	2914 <z_nrf_rtc_timer_read>
    2ba2:	4b02      	ldr	r3, [pc, #8]	; (2bac <sys_clock_elapsed+0x10>)
    2ba4:	681b      	ldr	r3, [r3, #0]
}
    2ba6:	1ac0      	subs	r0, r0, r3
    2ba8:	bd08      	pop	{r3, pc}
    2baa:	bf00      	nop
    2bac:	200001a0 	.word	0x200001a0

00002bb0 <nrf_gpio_cfg>:
{
    2bb0:	b430      	push	{r4, r5}
    *p_pin = pin_number & 0x1F;
    2bb2:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    2bb6:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2bb8:	2801      	cmp	r0, #1
    2bba:	d018      	beq.n	2bee <nrf_gpio_cfg+0x3e>
        case 0: return NRF_P0;
    2bbc:	4d0d      	ldr	r5, [pc, #52]	; (2bf4 <nrf_gpio_cfg+0x44>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    2bbe:	f10c 0080 	add.w	r0, ip, #128	; 0x80
    2bc2:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
    2bc6:	f004 4ce0 	and.w	ip, r4, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2bca:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    2bce:	ea41 0383 	orr.w	r3, r1, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    2bd2:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2bd6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    2bda:	f89d 200c 	ldrb.w	r2, [sp, #12]
    2bde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2be2:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
    2be6:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
}
    2bea:	bc30      	pop	{r4, r5}
    2bec:	4770      	bx	lr
        case 1: return NRF_P1;
    2bee:	4d02      	ldr	r5, [pc, #8]	; (2bf8 <nrf_gpio_cfg+0x48>)
    2bf0:	e7e5      	b.n	2bbe <nrf_gpio_cfg+0xe>
    2bf2:	bf00      	nop
    2bf4:	50842500 	.word	0x50842500
    2bf8:	50842800 	.word	0x50842800

00002bfc <nrf_gpio_pin_write>:
    if (value == 0)
    2bfc:	b959      	cbnz	r1, 2c16 <nrf_gpio_pin_write+0x1a>
    *p_pin = pin_number & 0x1F;
    2bfe:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2c02:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c04:	2801      	cmp	r0, #1
    2c06:	d004      	beq.n	2c12 <nrf_gpio_pin_write+0x16>
        case 0: return NRF_P0;
    2c08:	4a09      	ldr	r2, [pc, #36]	; (2c30 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2c0a:	2301      	movs	r3, #1
    2c0c:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    2c0e:	60d3      	str	r3, [r2, #12]
}
    2c10:	4770      	bx	lr
        case 1: return NRF_P1;
    2c12:	4a08      	ldr	r2, [pc, #32]	; (2c34 <nrf_gpio_pin_write+0x38>)
    2c14:	e7f9      	b.n	2c0a <nrf_gpio_pin_write+0xe>
    *p_pin = pin_number & 0x1F;
    2c16:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2c1a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2c1c:	2801      	cmp	r0, #1
    2c1e:	d004      	beq.n	2c2a <nrf_gpio_pin_write+0x2e>
        case 0: return NRF_P0;
    2c20:	4a03      	ldr	r2, [pc, #12]	; (2c30 <nrf_gpio_pin_write+0x34>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2c22:	2301      	movs	r3, #1
    2c24:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    2c26:	6093      	str	r3, [r2, #8]
}
    2c28:	4770      	bx	lr
        case 1: return NRF_P1;
    2c2a:	4a02      	ldr	r2, [pc, #8]	; (2c34 <nrf_gpio_pin_write+0x38>)
    2c2c:	e7f9      	b.n	2c22 <nrf_gpio_pin_write+0x26>
    2c2e:	bf00      	nop
    2c30:	50842500 	.word	0x50842500
    2c34:	50842800 	.word	0x50842800

00002c38 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    2c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c3c:	b085      	sub	sp, #20
    2c3e:	4607      	mov	r7, r0
    2c40:	468b      	mov	fp, r1
    2c42:	4690      	mov	r8, r2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2c44:	2400      	movs	r4, #0
    2c46:	e022      	b.n	2c8e <pinctrl_configure_pins+0x56>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    2c48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2c4c:	e02c      	b.n	2ca8 <pinctrl_configure_pins+0x70>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    2c4e:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2c52:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2c54:	9603      	str	r6, [sp, #12]
			write = 1U;
    2c56:	4631      	mov	r1, r6
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    2c58:	2d7f      	cmp	r5, #127	; 0x7f
    2c5a:	d016      	beq.n	2c8a <pinctrl_configure_pins+0x52>
			if (write != NO_WRITE) {
    2c5c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    2c60:	f040 810e 	bne.w	2e80 <pinctrl_configure_pins+0x248>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    2c64:	f857 300a 	ldr.w	r3, [r7, sl]
    2c68:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    2c6c:	d002      	beq.n	2c74 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2c6e:	2601      	movs	r6, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    2c70:	2200      	movs	r2, #0
    2c72:	9203      	str	r2, [sp, #12]
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    2c74:	2200      	movs	r2, #0
    2c76:	9201      	str	r2, [sp, #4]
    2c78:	f8cd 9000 	str.w	r9, [sp]
    2c7c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    2c80:	4632      	mov	r2, r6
    2c82:	9903      	ldr	r1, [sp, #12]
    2c84:	4628      	mov	r0, r5
    2c86:	f7ff ff93 	bl	2bb0 <nrf_gpio_cfg>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2c8a:	3401      	adds	r4, #1
    2c8c:	b2e4      	uxtb	r4, r4
    2c8e:	455c      	cmp	r4, fp
    2c90:	f080 80fa 	bcs.w	2e88 <pinctrl_configure_pins+0x250>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2c94:	ea4f 0a84 	mov.w	sl, r4, lsl #2
    2c98:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    2c9c:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    2ca0:	f003 057f 	and.w	r5, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    2ca4:	2d7f      	cmp	r5, #127	; 0x7f
    2ca6:	d0cf      	beq.n	2c48 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    2ca8:	0c1b      	lsrs	r3, r3, #16
    2caa:	2b22      	cmp	r3, #34	; 0x22
    2cac:	f200 80ee 	bhi.w	2e8c <pinctrl_configure_pins+0x254>
    2cb0:	a201      	add	r2, pc, #4	; (adr r2, 2cb8 <pinctrl_configure_pins+0x80>)
    2cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2cb6:	bf00      	nop
    2cb8:	00002c4f 	.word	0x00002c4f
    2cbc:	00002d45 	.word	0x00002d45
    2cc0:	00002d53 	.word	0x00002d53
    2cc4:	00002d5f 	.word	0x00002d5f
    2cc8:	00002d6d 	.word	0x00002d6d
    2ccc:	00002d7b 	.word	0x00002d7b
    2cd0:	00002d87 	.word	0x00002d87
    2cd4:	00002e8d 	.word	0x00002e8d
    2cd8:	00002e8d 	.word	0x00002e8d
    2cdc:	00002e8d 	.word	0x00002e8d
    2ce0:	00002e8d 	.word	0x00002e8d
    2ce4:	00002d95 	.word	0x00002d95
    2ce8:	00002da9 	.word	0x00002da9
    2cec:	00002e8d 	.word	0x00002e8d
    2cf0:	00002e8d 	.word	0x00002e8d
    2cf4:	00002e8d 	.word	0x00002e8d
    2cf8:	00002e8d 	.word	0x00002e8d
    2cfc:	00002e8d 	.word	0x00002e8d
    2d00:	00002e8d 	.word	0x00002e8d
    2d04:	00002e8d 	.word	0x00002e8d
    2d08:	00002e8d 	.word	0x00002e8d
    2d0c:	00002e8d 	.word	0x00002e8d
    2d10:	00002dbd 	.word	0x00002dbd
    2d14:	00002dcf 	.word	0x00002dcf
    2d18:	00002de1 	.word	0x00002de1
    2d1c:	00002df3 	.word	0x00002df3
    2d20:	00002e8d 	.word	0x00002e8d
    2d24:	00002e8d 	.word	0x00002e8d
    2d28:	00002e8d 	.word	0x00002e8d
    2d2c:	00002e05 	.word	0x00002e05
    2d30:	00002e15 	.word	0x00002e15
    2d34:	00002e21 	.word	0x00002e21
    2d38:	00002e31 	.word	0x00002e31
    2d3c:	00002e41 	.word	0x00002e41
    2d40:	00002e51 	.word	0x00002e51
			NRF_PSEL_UART(reg, RXD) = pin;
    2d44:	f8c8 5514 	str.w	r5, [r8, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2d48:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d4a:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2d4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2d50:	e782      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, RTS) = pin;
    2d52:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d56:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2d58:	9603      	str	r6, [sp, #12]
			write = 1U;
    2d5a:	4631      	mov	r1, r6
			break;
    2d5c:	e77c      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_UART(reg, CTS) = pin;
    2d5e:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2d62:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d64:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2d66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2d6a:	e775      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    2d6c:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2d70:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2d72:	2301      	movs	r3, #1
    2d74:	9303      	str	r3, [sp, #12]
			write = 0U;
    2d76:	4631      	mov	r1, r6
			break;
    2d78:	e76e      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    2d7a:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2d7e:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2d80:	9603      	str	r6, [sp, #12]
			write = 0U;
    2d82:	2100      	movs	r1, #0
			break;
    2d84:	e768      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    2d86:	f8c8 5510 	str.w	r5, [r8, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2d8a:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2d8c:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2d8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2d92:	e761      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    2d94:	f8c8 5508 	str.w	r5, [r8, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2d98:	f1b9 0f00 	cmp.w	r9, #0
    2d9c:	d060      	beq.n	2e60 <pinctrl_configure_pins+0x228>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2d9e:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2da0:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2da2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2da6:	e757      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    2da8:	f8c8 550c 	str.w	r5, [r8, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2dac:	f1b9 0f00 	cmp.w	r9, #0
    2db0:	d05e      	beq.n	2e70 <pinctrl_configure_pins+0x238>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2db2:	2600      	movs	r6, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2db4:	9603      	str	r6, [sp, #12]
		uint32_t write = NO_WRITE;
    2db6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2dba:	e74d      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    2dbc:	f8c8 5560 	str.w	r5, [r8, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    2dc0:	f857 100a 	ldr.w	r1, [r7, sl]
    2dc4:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2dc8:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2dca:	9603      	str	r6, [sp, #12]
			break;
    2dcc:	e744      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    2dce:	f8c8 5564 	str.w	r5, [r8, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2dd2:	f857 100a 	ldr.w	r1, [r7, sl]
    2dd6:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2dda:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2ddc:	9603      	str	r6, [sp, #12]
			break;
    2dde:	e73b      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    2de0:	f8c8 5568 	str.w	r5, [r8, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2de4:	f857 100a 	ldr.w	r1, [r7, sl]
    2de8:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2dec:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2dee:	9603      	str	r6, [sp, #12]
			break;
    2df0:	e732      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2df2:	f8c8 556c 	str.w	r5, [r8, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    2df6:	f857 100a 	ldr.w	r1, [r7, sl]
    2dfa:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2dfe:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2e00:	9603      	str	r6, [sp, #12]
			break;
    2e02:	e729      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    2e04:	f8c8 5524 	str.w	r5, [r8, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2e08:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2e0a:	2300      	movs	r3, #0
    2e0c:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2e0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2e12:	e721      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    2e14:	f8c8 5528 	str.w	r5, [r8, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2e18:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2e1a:	9603      	str	r6, [sp, #12]
			write = 1U;
    2e1c:	4631      	mov	r1, r6
			break;
    2e1e:	e71b      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    2e20:	f8c8 5530 	str.w	r5, [r8, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2e24:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2e26:	2300      	movs	r3, #0
    2e28:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2e2a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2e2e:	e713      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    2e30:	f8c8 5534 	str.w	r5, [r8, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2e34:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2e36:	2300      	movs	r3, #0
    2e38:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2e3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2e3e:	e70b      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    2e40:	f8c8 5538 	str.w	r5, [r8, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2e44:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2e46:	2300      	movs	r3, #0
    2e48:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2e4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2e4e:	e703      	b.n	2c58 <pinctrl_configure_pins+0x20>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    2e50:	f8c8 553c 	str.w	r5, [r8, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2e54:	2601      	movs	r6, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2e56:	2300      	movs	r3, #0
    2e58:	9303      	str	r3, [sp, #12]
		uint32_t write = NO_WRITE;
    2e5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2e5e:	e6fb      	b.n	2c58 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2e60:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2e62:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    2e66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
    2e6a:	f04f 0906 	mov.w	r9, #6
    2e6e:	e6f3      	b.n	2c58 <pinctrl_configure_pins+0x20>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2e70:	464e      	mov	r6, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2e72:	f8cd 900c 	str.w	r9, [sp, #12]
		uint32_t write = NO_WRITE;
    2e76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
    2e7a:	f04f 0906 	mov.w	r9, #6
    2e7e:	e6eb      	b.n	2c58 <pinctrl_configure_pins+0x20>
				nrf_gpio_pin_write(pin, write);
    2e80:	4628      	mov	r0, r5
    2e82:	f7ff febb 	bl	2bfc <nrf_gpio_pin_write>
    2e86:	e6ed      	b.n	2c64 <pinctrl_configure_pins+0x2c>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    2e88:	2000      	movs	r0, #0
    2e8a:	e001      	b.n	2e90 <pinctrl_configure_pins+0x258>
		switch (NRF_GET_FUN(pins[i])) {
    2e8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2e90:	b005      	add	sp, #20
    2e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2e96:	bf00      	nop

00002e98 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    2e98:	b508      	push	{r3, lr}
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    2e9a:	2145      	movs	r1, #69	; 0x45
    2e9c:	4802      	ldr	r0, [pc, #8]	; (2ea8 <k_sys_fatal_error_handler+0x10>)
    2e9e:	f002 fd20 	bl	58e2 <z_log_minimal_printk>
		sys_arch_reboot(0);
    2ea2:	2000      	movs	r0, #0
    2ea4:	f002 fdad 	bl	5a02 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    2ea8:	00007adc 	.word	0x00007adc

00002eac <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    2eac:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2eb0:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    2eb4:	f002 0203 	and.w	r2, r2, #3
    2eb8:	4b02      	ldr	r3, [pc, #8]	; (2ec4 <SystemCoreClockUpdate+0x18>)
    2eba:	40d3      	lsrs	r3, r2
    2ebc:	4a02      	ldr	r2, [pc, #8]	; (2ec8 <SystemCoreClockUpdate+0x1c>)
    2ebe:	6013      	str	r3, [r2, #0]
#endif
}
    2ec0:	4770      	bx	lr
    2ec2:	bf00      	nop
    2ec4:	07a12000 	.word	0x07a12000
    2ec8:	20000048 	.word	0x20000048

00002ecc <SystemInit>:

void SystemInit(void)
{
    2ecc:	b508      	push	{r3, lr}
            SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    2ece:	f003 fb7c 	bl	65ca <nrf53_errata_97>
    2ed2:	b168      	cbz	r0, 2ef0 <SystemInit+0x24>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    2ed4:	4b4e      	ldr	r3, [pc, #312]	; (3010 <SystemInit+0x144>)
    2ed6:	f8d3 3a20 	ldr.w	r3, [r3, #2592]	; 0xa20
    2eda:	b94b      	cbnz	r3, 2ef0 <SystemInit+0x24>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    2edc:	4b4c      	ldr	r3, [pc, #304]	; (3010 <SystemInit+0x144>)
    2ede:	220d      	movs	r2, #13
    2ee0:	f8c3 2a20 	str.w	r2, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    2ee4:	2201      	movs	r2, #1
    2ee6:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    2eea:	2200      	movs	r2, #0
    2eec:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    2ef0:	2200      	movs	r2, #0
    2ef2:	e00b      	b.n	2f0c <SystemInit+0x40>
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *((volatile uint32_t *)NRF_FICR_S->TRIMCNF[index].ADDR) = NRF_FICR_S->TRIMCNF[index].DATA;
    2ef4:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2ef8:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2efc:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
    2f00:	00db      	lsls	r3, r3, #3
    2f02:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
    2f06:	685b      	ldr	r3, [r3, #4]
    2f08:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    2f0a:	3201      	adds	r2, #1
    2f0c:	2a1f      	cmp	r2, #31
    2f0e:	d808      	bhi.n	2f22 <SystemInit+0x56>
    2f10:	f102 0360 	add.w	r3, r2, #96	; 0x60
    2f14:	f44f 017f 	mov.w	r1, #16711680	; 0xff0000
    2f18:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    2f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2f20:	d1e8      	bne.n	2ef4 <SystemInit+0x28>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    2f22:	f003 fb2a 	bl	657a <nrf53_errata_64>
    2f26:	b130      	cbz	r0, 2f36 <SystemInit+0x6a>
        {
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2f28:	4b39      	ldr	r3, [pc, #228]	; (3010 <SystemInit+0x144>)
    2f2a:	2229      	movs	r2, #41	; 0x29
    2f2c:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    2f30:	2203      	movs	r2, #3
    2f32:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    2f36:	f003 fad4 	bl	64e2 <nrf53_errata_42>
    2f3a:	b140      	cbz	r0, 2f4e <SystemInit+0x82>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2f3c:	4b35      	ldr	r3, [pc, #212]	; (3014 <SystemInit+0x148>)
    2f3e:	4a36      	ldr	r2, [pc, #216]	; (3018 <SystemInit+0x14c>)
    2f40:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    2f44:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f48:	2201      	movs	r2, #1
    2f4a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
        }

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
    2f4e:	f003 fadc 	bl	650a <nrf53_errata_46>
    2f52:	b118      	cbz	r0, 2f5c <SystemInit+0x90>
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    2f54:	4b31      	ldr	r3, [pc, #196]	; (301c <SystemInit+0x150>)
    2f56:	2200      	movs	r2, #0
    2f58:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    2f5c:	f003 faed 	bl	653a <nrf53_errata_49>
    2f60:	b168      	cbz	r0, 2f7e <SystemInit+0xb2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    2f62:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2f6a:	f013 0f01 	tst.w	r3, #1
    2f6e:	d006      	beq.n	2f7e <SystemInit+0xb2>
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    2f70:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f74:	2200      	movs	r2, #0
    2f76:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2f7a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
            }
        }

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
    2f7e:	f003 faf0 	bl	6562 <nrf53_errata_55>
    2f82:	b160      	cbz	r0, 2f9e <SystemInit+0xd2>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2f84:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f88:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    2f8c:	f013 0f01 	tst.w	r3, #1
    2f90:	d005      	beq.n	2f9e <SystemInit+0xd2>
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    2f92:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2f96:	f06f 0201 	mvn.w	r2, #1
    2f9a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2f9e:	f003 fb00 	bl	65a2 <nrf53_errata_69>
    2fa2:	b118      	cbz	r0, 2fac <SystemInit+0xe0>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    2fa4:	4b1a      	ldr	r3, [pc, #104]	; (3010 <SystemInit+0x144>)
    2fa6:	2265      	movs	r2, #101	; 0x65
    2fa8:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
        }

        if (nrf53_errata_140())
    2fac:	f003 fb21 	bl	65f2 <nrf53_errata_140>
    2fb0:	b120      	cbz	r0, 2fbc <SystemInit+0xf0>
        {
            if (*(volatile uint32_t *)0x50032420 & 0x80000000)
    2fb2:	4b1a      	ldr	r3, [pc, #104]	; (301c <SystemInit+0x150>)
    2fb4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
    2fb8:	2b00      	cmp	r3, #0
    2fba:	db11      	blt.n	2fe0 <SystemInit+0x114>

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2fbc:	4a18      	ldr	r2, [pc, #96]	; (3020 <SystemInit+0x154>)
    2fbe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2fc2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    2fc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2fca:	4a16      	ldr	r2, [pc, #88]	; (3024 <SystemInit+0x158>)
    2fcc:	6811      	ldr	r1, [r2, #0]
    2fce:	4b16      	ldr	r3, [pc, #88]	; (3028 <SystemInit+0x15c>)
    2fd0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    2fd4:	69d2      	ldr	r2, [r2, #28]
    2fd6:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
    2fda:	f7ff ff67 	bl	2eac <SystemCoreClockUpdate>
}
    2fde:	bd08      	pop	{r3, pc}
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFSYNT;
    2fe0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2fe4:	2203      	movs	r2, #3
    2fe6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
                NRF_CLOCK_S->TASKS_LFCLKSTART = 1;
    2fea:	2201      	movs	r2, #1
    2fec:	609a      	str	r2, [r3, #8]
                while (NRF_CLOCK_S->EVENTS_LFCLKSTARTED == 0) {}
    2fee:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ff2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2ff6:	2b00      	cmp	r3, #0
    2ff8:	d0f9      	beq.n	2fee <SystemInit+0x122>
                NRF_CLOCK_S->EVENTS_LFCLKSTARTED = 0;
    2ffa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2ffe:	2200      	movs	r2, #0
    3000:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                NRF_CLOCK_S->TASKS_LFCLKSTOP = 1;
    3004:	2201      	movs	r2, #1
    3006:	60da      	str	r2, [r3, #12]
                NRF_CLOCK_S->LFCLKSRC = CLOCK_LFCLKSRC_SRC_LFRC;
    3008:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    300c:	e7d6      	b.n	2fbc <SystemInit+0xf0>
    300e:	bf00      	nop
    3010:	50004000 	.word	0x50004000
    3014:	50039000 	.word	0x50039000
    3018:	beef0044 	.word	0xbeef0044
    301c:	50032000 	.word	0x50032000
    3020:	e000ed00 	.word	0xe000ed00
    3024:	00ff8000 	.word	0x00ff8000
    3028:	50006000 	.word	0x50006000

0000302c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    302c:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    302e:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    3030:	fab4 f384 	clz	r3, r4
    3034:	f1c3 031f 	rsb	r3, r3, #31
    3038:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    303c:	2b00      	cmp	r3, #0
    303e:	db12      	blt.n	3066 <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    3040:	2201      	movs	r2, #1
    3042:	fa02 f303 	lsl.w	r3, r2, r3
    3046:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    304a:	e8d0 2fef 	ldaex	r2, [r0]
    304e:	42a2      	cmp	r2, r4
    3050:	d104      	bne.n	305c <nrfx_flag32_alloc+0x30>
    3052:	e8c0 3fee 	stlex	lr, r3, [r0]
    3056:	f1be 0f00 	cmp.w	lr, #0
    305a:	d1f6      	bne.n	304a <nrfx_flag32_alloc+0x1e>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    305c:	d1e7      	bne.n	302e <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    305e:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    3062:	4802      	ldr	r0, [pc, #8]	; (306c <nrfx_flag32_alloc+0x40>)
}
    3064:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    3066:	4802      	ldr	r0, [pc, #8]	; (3070 <nrfx_flag32_alloc+0x44>)
    3068:	e7fc      	b.n	3064 <nrfx_flag32_alloc+0x38>
    306a:	bf00      	nop
    306c:	0bad0000 	.word	0x0bad0000
    3070:	0bad0002 	.word	0x0bad0002

00003074 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    3074:	6803      	ldr	r3, [r0, #0]
    3076:	40cb      	lsrs	r3, r1
    3078:	f013 0f01 	tst.w	r3, #1
    307c:	d111      	bne.n	30a2 <nrfx_flag32_free+0x2e>
{
    307e:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    3080:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    3082:	2301      	movs	r3, #1
    3084:	408b      	lsls	r3, r1
    3086:	4313      	orrs	r3, r2
    3088:	e8d0 cfef 	ldaex	ip, [r0]
    308c:	4594      	cmp	ip, r2
    308e:	d104      	bne.n	309a <nrfx_flag32_free+0x26>
    3090:	e8c0 3fee 	stlex	lr, r3, [r0]
    3094:	f1be 0f00 	cmp.w	lr, #0
    3098:	d1f6      	bne.n	3088 <nrfx_flag32_free+0x14>
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    309a:	d1f1      	bne.n	3080 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    309c:	4802      	ldr	r0, [pc, #8]	; (30a8 <nrfx_flag32_free+0x34>)
}
    309e:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    30a2:	4802      	ldr	r0, [pc, #8]	; (30ac <nrfx_flag32_free+0x38>)
}
    30a4:	4770      	bx	lr
    30a6:	bf00      	nop
    30a8:	0bad0000 	.word	0x0bad0000
    30ac:	0bad0004 	.word	0x0bad0004

000030b0 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    30b0:	4b05      	ldr	r3, [pc, #20]	; (30c8 <nrfx_clock_init+0x18>)
    30b2:	791b      	ldrb	r3, [r3, #4]
    30b4:	b92b      	cbnz	r3, 30c2 <nrfx_clock_init+0x12>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    30b6:	4b04      	ldr	r3, [pc, #16]	; (30c8 <nrfx_clock_init+0x18>)
    30b8:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    30ba:	2201      	movs	r2, #1
    30bc:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    30be:	4803      	ldr	r0, [pc, #12]	; (30cc <nrfx_clock_init+0x1c>)
    30c0:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    30c2:	4803      	ldr	r0, [pc, #12]	; (30d0 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    30c4:	4770      	bx	lr
    30c6:	bf00      	nop
    30c8:	20000954 	.word	0x20000954
    30cc:	0bad0000 	.word	0x0bad0000
    30d0:	0bad000c 	.word	0x0bad000c

000030d4 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    30d4:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    30d6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30da:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    30de:	b163      	cbz	r3, 30fa <nrfx_power_clock_irq_handler+0x26>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30e4:	2000      	movs	r0, #0
    30e6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    30ea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    30ee:	2201      	movs	r2, #1
    30f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    30f4:	4b28      	ldr	r3, [pc, #160]	; (3198 <nrfx_power_clock_irq_handler+0xc4>)
    30f6:	681b      	ldr	r3, [r3, #0]
    30f8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    30fa:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    30fe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    3102:	b1bb      	cbz	r3, 3134 <nrfx_power_clock_irq_handler+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3104:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3108:	2200      	movs	r2, #0
    310a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    310e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3112:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    3116:	f002 0203 	and.w	r2, r2, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    311a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    311e:	2a01      	cmp	r2, #1
    3120:	d031      	beq.n	3186 <nrfx_power_clock_irq_handler+0xb2>
    p_reg->INTENCLR = mask;
    3122:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3126:	2202      	movs	r2, #2
    3128:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    312c:	4b1a      	ldr	r3, [pc, #104]	; (3198 <nrfx_power_clock_irq_handler+0xc4>)
    312e:	681b      	ldr	r3, [r3, #0]
    3130:	2001      	movs	r0, #1
    3132:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3134:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3138:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    313c:	b173      	cbz	r3, 315c <nrfx_power_clock_irq_handler+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    313e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3142:	2200      	movs	r2, #0
    3144:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3148:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    314c:	f44f 7280 	mov.w	r2, #256	; 0x100
    3150:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    3154:	4b10      	ldr	r3, [pc, #64]	; (3198 <nrfx_power_clock_irq_handler+0xc4>)
    3156:	681b      	ldr	r3, [r3, #0]
    3158:	2004      	movs	r0, #4
    315a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    315c:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3160:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    3164:	b173      	cbz	r3, 3184 <nrfx_power_clock_irq_handler+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3166:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    316a:	2200      	movs	r2, #0
    316c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    3170:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    3174:	f44f 7200 	mov.w	r2, #512	; 0x200
    3178:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLK192MSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    317c:	4b06      	ldr	r3, [pc, #24]	; (3198 <nrfx_power_clock_irq_handler+0xc4>)
    317e:	681b      	ldr	r3, [r3, #0]
    3180:	2005      	movs	r0, #5
    3182:	4798      	blx	r3
    }
#endif
}
    3184:	bd08      	pop	{r3, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    3186:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    318a:	2202      	movs	r2, #2
    318c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3190:	2201      	movs	r2, #1
    3192:	609a      	str	r2, [r3, #8]
}
    3194:	e7ce      	b.n	3134 <nrfx_power_clock_irq_handler+0x60>
    3196:	bf00      	nop
    3198:	20000954 	.word	0x20000954

0000319c <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = DPPI_AVAILABLE_GROUPS_MASK;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    319c:	b508      	push	{r3, lr}
    319e:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_allocated_channels, p_channel);
    31a0:	4801      	ldr	r0, [pc, #4]	; (31a8 <nrfx_dppi_channel_alloc+0xc>)
    31a2:	f7ff ff43 	bl	302c <nrfx_flag32_alloc>
}
    31a6:	bd08      	pop	{r3, pc}
    31a8:	2000004c 	.word	0x2000004c

000031ac <nrf_gpio_reconfigure>:
{
    31ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    31ae:	461c      	mov	r4, r3
    31b0:	9f05      	ldr	r7, [sp, #20]
    31b2:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    31b4:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    31b8:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    31ba:	2801      	cmp	r0, #1
    31bc:	d034      	beq.n	3228 <nrf_gpio_reconfigure+0x7c>
        case 0: return NRF_P0;
    31be:	4d27      	ldr	r5, [pc, #156]	; (325c <nrf_gpio_reconfigure+0xb0>)
    uint32_t cnf = reg->PIN_CNF[pin_number];
    31c0:	f10c 0380 	add.w	r3, ip, #128	; 0x80
    31c4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    31c8:	b381      	cbz	r1, 322c <nrf_gpio_reconfigure+0x80>
    31ca:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    31cc:	b382      	cbz	r2, 3230 <nrf_gpio_reconfigure+0x84>
    31ce:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    31d2:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    31d6:	b374      	cbz	r4, 3236 <nrf_gpio_reconfigure+0x8a>
    31d8:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    31dc:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    31e0:	b367      	cbz	r7, 323c <nrf_gpio_reconfigure+0x90>
    31e2:	f44f 6e70 	mov.w	lr, #3840	; 0xf00
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    31e6:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    31ea:	b356      	cbz	r6, 3242 <nrf_gpio_reconfigure+0x96>
    31ec:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    31f0:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    31f4:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    31f8:	b331      	cbz	r1, 3248 <nrf_gpio_reconfigure+0x9c>
    31fa:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    31fc:	b332      	cbz	r2, 324c <nrf_gpio_reconfigure+0xa0>
    31fe:	7812      	ldrb	r2, [r2, #0]
    3200:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3202:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3204:	b324      	cbz	r4, 3250 <nrf_gpio_reconfigure+0xa4>
    3206:	7822      	ldrb	r2, [r4, #0]
    3208:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    320a:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    320c:	b317      	cbz	r7, 3254 <nrf_gpio_reconfigure+0xa8>
    320e:	783a      	ldrb	r2, [r7, #0]
    3210:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3212:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    3214:	b306      	cbz	r6, 3258 <nrf_gpio_reconfigure+0xac>
    3216:	7832      	ldrb	r2, [r6, #0]
    3218:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    321a:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    321c:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    321e:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
    3222:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    3226:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    3228:	4d0d      	ldr	r5, [pc, #52]	; (3260 <nrf_gpio_reconfigure+0xb4>)
    322a:	e7c9      	b.n	31c0 <nrf_gpio_reconfigure+0x14>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    322c:	2000      	movs	r0, #0
    322e:	e7cd      	b.n	31cc <nrf_gpio_reconfigure+0x20>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    3230:	f04f 0e00 	mov.w	lr, #0
    3234:	e7cd      	b.n	31d2 <nrf_gpio_reconfigure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    3236:	f04f 0e00 	mov.w	lr, #0
    323a:	e7cf      	b.n	31dc <nrf_gpio_reconfigure+0x30>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    323c:	f04f 0e00 	mov.w	lr, #0
    3240:	e7d1      	b.n	31e6 <nrf_gpio_reconfigure+0x3a>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    3242:	f04f 0e00 	mov.w	lr, #0
    3246:	e7d3      	b.n	31f0 <nrf_gpio_reconfigure+0x44>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    3248:	2300      	movs	r3, #0
    324a:	e7d7      	b.n	31fc <nrf_gpio_reconfigure+0x50>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    324c:	2200      	movs	r2, #0
    324e:	e7d8      	b.n	3202 <nrf_gpio_reconfigure+0x56>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3250:	2200      	movs	r2, #0
    3252:	e7da      	b.n	320a <nrf_gpio_reconfigure+0x5e>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3254:	2200      	movs	r2, #0
    3256:	e7dc      	b.n	3212 <nrf_gpio_reconfigure+0x66>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    3258:	2200      	movs	r2, #0
    325a:	e7de      	b.n	321a <nrf_gpio_reconfigure+0x6e>
    325c:	50842500 	.word	0x50842500
    3260:	50842800 	.word	0x50842800

00003264 <nrf_gpio_cfg_default>:
    *p_pin = pin_number & 0x1F;
    3264:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    3268:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    326a:	2801      	cmp	r0, #1
    326c:	d00a      	beq.n	3284 <nrf_gpio_cfg_default+0x20>
        case 0: return NRF_P0;
    326e:	4906      	ldr	r1, [pc, #24]	; (3288 <nrf_gpio_cfg_default+0x24>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & GPIO_PIN_CNF_MCUSEL_Msk;
    3270:	3280      	adds	r2, #128	; 0x80
    3272:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    3276:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    327a:	f043 0302 	orr.w	r3, r3, #2
    reg->PIN_CNF[pin_number] = cnf;
    327e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    3282:	4770      	bx	lr
        case 1: return NRF_P1;
    3284:	4901      	ldr	r1, [pc, #4]	; (328c <nrf_gpio_cfg_default+0x28>)
    3286:	e7f3      	b.n	3270 <nrf_gpio_cfg_default+0xc>
    3288:	50842500 	.word	0x50842500
    328c:	50842800 	.word	0x50842800

00003290 <nrf_gpio_latches_read_and_clear>:
{
    3290:	b500      	push	{lr}
    3292:	b083      	sub	sp, #12
    3294:	4684      	mov	ip, r0
    3296:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    3298:	4b0c      	ldr	r3, [pc, #48]	; (32cc <nrf_gpio_latches_read_and_clear+0x3c>)
    329a:	e893 0003 	ldmia.w	r3, {r0, r1}
    329e:	ab02      	add	r3, sp, #8
    32a0:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    32a4:	4663      	mov	r3, ip
    32a6:	e009      	b.n	32bc <nrf_gpio_latches_read_and_clear+0x2c>
        *p_masks = gpio_regs[i]->LATCH;
    32a8:	a902      	add	r1, sp, #8
    32aa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    32ae:	f851 1c08 	ldr.w	r1, [r1, #-8]
    32b2:	6a08      	ldr	r0, [r1, #32]
    32b4:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    32b8:	6208      	str	r0, [r1, #32]
    for (i = start_port; i < (start_port + length); i++)
    32ba:	3301      	adds	r3, #1
    32bc:	eb0c 000e 	add.w	r0, ip, lr
    32c0:	4298      	cmp	r0, r3
    32c2:	d8f1      	bhi.n	32a8 <nrf_gpio_latches_read_and_clear+0x18>
}
    32c4:	b003      	add	sp, #12
    32c6:	f85d fb04 	ldr.w	pc, [sp], #4
    32ca:	bf00      	nop
    32cc:	00007190 	.word	0x00007190

000032d0 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    32d0:	3008      	adds	r0, #8
    32d2:	4b03      	ldr	r3, [pc, #12]	; (32e0 <pin_in_use+0x10>)
    32d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    32d8:	f000 0001 	and.w	r0, r0, #1
    32dc:	4770      	bx	lr
    32de:	bf00      	nop
    32e0:	20000050 	.word	0x20000050

000032e4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    32e4:	3008      	adds	r0, #8
    32e6:	4b03      	ldr	r3, [pc, #12]	; (32f4 <pin_in_use_by_te+0x10>)
    32e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    32ec:	f3c0 1040 	ubfx	r0, r0, #5, #1
    32f0:	4770      	bx	lr
    32f2:	bf00      	nop
    32f4:	20000050 	.word	0x20000050

000032f8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    32f8:	3008      	adds	r0, #8
    32fa:	4b04      	ldr	r3, [pc, #16]	; (330c <pin_has_trigger+0x14>)
    32fc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3300:	f010 001c 	ands.w	r0, r0, #28
    3304:	bf18      	it	ne
    3306:	2001      	movne	r0, #1
    3308:	4770      	bx	lr
    330a:	bf00      	nop
    330c:	20000050 	.word	0x20000050

00003310 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3310:	3008      	adds	r0, #8
    3312:	4b03      	ldr	r3, [pc, #12]	; (3320 <pin_is_output+0x10>)
    3314:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    3318:	f3c0 0040 	ubfx	r0, r0, #1, #1
    331c:	4770      	bx	lr
    331e:	bf00      	nop
    3320:	20000050 	.word	0x20000050

00003324 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3324:	3008      	adds	r0, #8
    3326:	4b02      	ldr	r3, [pc, #8]	; (3330 <pin_te_get+0xc>)
    3328:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    332c:	0b40      	lsrs	r0, r0, #13
    332e:	4770      	bx	lr
    3330:	20000050 	.word	0x20000050

00003334 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3334:	2200      	movs	r2, #0
    3336:	e004      	b.n	3342 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    333c:	4283      	cmp	r3, r0
    333e:	d00f      	beq.n	3360 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3340:	3201      	adds	r2, #1
    3342:	2a2f      	cmp	r2, #47	; 0x2f
    3344:	d80a      	bhi.n	335c <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3346:	f102 0308 	add.w	r3, r2, #8
    334a:	4906      	ldr	r1, [pc, #24]	; (3364 <handler_in_use+0x30>)
    334c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    3350:	f413 7f80 	tst.w	r3, #256	; 0x100
    3354:	d0f0      	beq.n	3338 <handler_in_use+0x4>
    3356:	f3c3 2343 	ubfx	r3, r3, #9, #4
    335a:	e7ef      	b.n	333c <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    335c:	2000      	movs	r0, #0
    335e:	4770      	bx	lr
            return true;
    3360:	2001      	movs	r0, #1
}
    3362:	4770      	bx	lr
    3364:	20000050 	.word	0x20000050

00003368 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    3368:	2300      	movs	r3, #0
    336a:	b113      	cbz	r3, 3372 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    336c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    3370:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3372:	4a07      	ldr	r2, [pc, #28]	; (3390 <find_handler+0x28>)
    3374:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    3378:	4282      	cmp	r2, r0
    337a:	d001      	beq.n	3380 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    337c:	3301      	adds	r3, #1
    337e:	e7f4      	b.n	336a <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    3380:	4a03      	ldr	r2, [pc, #12]	; (3390 <find_handler+0x28>)
    3382:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    3386:	6852      	ldr	r2, [r2, #4]
    3388:	428a      	cmp	r2, r1
    338a:	d1f7      	bne.n	337c <find_handler+0x14>
            return i;
    338c:	4618      	mov	r0, r3
    338e:	4770      	bx	lr
    3390:	20000050 	.word	0x20000050

00003394 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3394:	f100 0208 	add.w	r2, r0, #8
    3398:	4b0e      	ldr	r3, [pc, #56]	; (33d4 <get_initial_sense+0x40>)
    339a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    339e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    33a2:	2b04      	cmp	r3, #4
    33a4:	d010      	beq.n	33c8 <get_initial_sense+0x34>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    33a6:	2b05      	cmp	r3, #5
    33a8:	d010      	beq.n	33cc <get_initial_sense+0x38>
    *p_pin = pin_number & 0x1F;
    33aa:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    33ae:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    33b0:	2801      	cmp	r0, #1
    33b2:	d007      	beq.n	33c4 <get_initial_sense+0x30>
        case 0: return NRF_P0;
    33b4:	4b08      	ldr	r3, [pc, #32]	; (33d8 <get_initial_sense+0x44>)
    return p_reg->IN;
    33b6:	691b      	ldr	r3, [r3, #16]
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    33b8:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    33ba:	f013 0f01 	tst.w	r3, #1
    33be:	d007      	beq.n	33d0 <get_initial_sense+0x3c>
    33c0:	2003      	movs	r0, #3
    33c2:	4770      	bx	lr
        case 1: return NRF_P1;
    33c4:	4b05      	ldr	r3, [pc, #20]	; (33dc <get_initial_sense+0x48>)
    33c6:	e7f6      	b.n	33b6 <get_initial_sense+0x22>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    33c8:	2003      	movs	r0, #3
    33ca:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    33cc:	2002      	movs	r0, #2
    33ce:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    33d0:	2002      	movs	r0, #2
    }

    return sense;
}
    33d2:	4770      	bx	lr
    33d4:	20000050 	.word	0x20000050
    33d8:	50842500 	.word	0x50842500
    33dc:	50842800 	.word	0x50842800

000033e0 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    33e0:	3008      	adds	r0, #8
    33e2:	4b06      	ldr	r3, [pc, #24]	; (33fc <channel_handler_get+0x1c>)
    33e4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    33e8:	f410 7f80 	tst.w	r0, #256	; 0x100
    33ec:	d004      	beq.n	33f8 <channel_handler_get+0x18>
    33ee:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    33f2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    33f6:	4770      	bx	lr
        return NULL;
    33f8:	2000      	movs	r0, #0
}
    33fa:	4770      	bx	lr
    33fc:	20000050 	.word	0x20000050

00003400 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    3400:	b570      	push	{r4, r5, r6, lr}
    3402:	4604      	mov	r4, r0
    3404:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    3406:	f7ff ffeb 	bl	33e0 <channel_handler_get>

    if (handler)
    340a:	b120      	cbz	r0, 3416 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    340c:	6806      	ldr	r6, [r0, #0]
    340e:	6842      	ldr	r2, [r0, #4]
    3410:	4629      	mov	r1, r5
    3412:	4620      	mov	r0, r4
    3414:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    3416:	4b04      	ldr	r3, [pc, #16]	; (3428 <call_handler+0x28>)
    3418:	689b      	ldr	r3, [r3, #8]
    341a:	b123      	cbz	r3, 3426 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    341c:	4a02      	ldr	r2, [pc, #8]	; (3428 <call_handler+0x28>)
    341e:	68d2      	ldr	r2, [r2, #12]
    3420:	4629      	mov	r1, r5
    3422:	4620      	mov	r0, r4
    3424:	4798      	blx	r3
    }
}
    3426:	bd70      	pop	{r4, r5, r6, pc}
    3428:	20000050 	.word	0x20000050

0000342c <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    342c:	b570      	push	{r4, r5, r6, lr}
    342e:	4606      	mov	r6, r0
    3430:	460c      	mov	r4, r1
    3432:	4615      	mov	r5, r2
    if (is_level(trigger))
    3434:	4608      	mov	r0, r1
    3436:	f003 fa8f 	bl	6958 <is_level>
    343a:	b960      	cbnz	r0, 3456 <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    343c:	2d02      	cmp	r5, #2
    343e:	d026      	beq.n	348e <next_sense_cond_call_handler+0x62>
    3440:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    3442:	4630      	mov	r0, r6
    3444:	f003 fa60 	bl	6908 <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3448:	2c03      	cmp	r4, #3
    344a:	d024      	beq.n	3496 <next_sense_cond_call_handler+0x6a>
    344c:	2d02      	cmp	r5, #2
    344e:	d020      	beq.n	3492 <next_sense_cond_call_handler+0x66>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3450:	2d03      	cmp	r5, #3
    3452:	d025      	beq.n	34a0 <next_sense_cond_call_handler+0x74>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    3454:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    3456:	4621      	mov	r1, r4
    3458:	4630      	mov	r0, r6
    345a:	f7ff ffd1 	bl	3400 <call_handler>
    *p_pin = pin_number & 0x1F;
    345e:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    3462:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3464:	2a01      	cmp	r2, #1
    3466:	d010      	beq.n	348a <next_sense_cond_call_handler+0x5e>
        case 0: return NRF_P0;
    3468:	4a0f      	ldr	r2, [pc, #60]	; (34a8 <next_sense_cond_call_handler+0x7c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    346a:	3380      	adds	r3, #128	; 0x80
    346c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3470:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3474:	429d      	cmp	r5, r3
    3476:	d1ed      	bne.n	3454 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3478:	2100      	movs	r1, #0
    347a:	4630      	mov	r0, r6
    347c:	f003 fa44 	bl	6908 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3480:	4629      	mov	r1, r5
    3482:	4630      	mov	r0, r6
    3484:	f003 fa40 	bl	6908 <nrf_gpio_cfg_sense_set>
    3488:	e7e4      	b.n	3454 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    348a:	4a08      	ldr	r2, [pc, #32]	; (34ac <next_sense_cond_call_handler+0x80>)
    348c:	e7ed      	b.n	346a <next_sense_cond_call_handler+0x3e>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    348e:	2103      	movs	r1, #3
    3490:	e7d7      	b.n	3442 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3492:	2c01      	cmp	r4, #1
    3494:	d1dc      	bne.n	3450 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    3496:	4621      	mov	r1, r4
    3498:	4630      	mov	r0, r6
    349a:	f7ff ffb1 	bl	3400 <call_handler>
}
    349e:	e7d9      	b.n	3454 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    34a0:	2c02      	cmp	r4, #2
    34a2:	d1d7      	bne.n	3454 <next_sense_cond_call_handler+0x28>
    34a4:	e7f7      	b.n	3496 <next_sense_cond_call_handler+0x6a>
    34a6:	bf00      	nop
    34a8:	50842500 	.word	0x50842500
    34ac:	50842800 	.word	0x50842800

000034b0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    34b0:	f100 0208 	add.w	r2, r0, #8
    34b4:	4b0e      	ldr	r3, [pc, #56]	; (34f0 <release_handler+0x40>)
    34b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    34ba:	f413 7f80 	tst.w	r3, #256	; 0x100
    34be:	d016      	beq.n	34ee <release_handler+0x3e>
{
    34c0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    34c2:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    34c6:	4610      	mov	r0, r2
    34c8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    34cc:	4a08      	ldr	r2, [pc, #32]	; (34f0 <release_handler+0x40>)
    34ce:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    34d2:	4620      	mov	r0, r4
    34d4:	f7ff ff2e 	bl	3334 <handler_in_use>
    34d8:	b100      	cbz	r0, 34dc <release_handler+0x2c>
}
    34da:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    34dc:	4804      	ldr	r0, [pc, #16]	; (34f0 <release_handler+0x40>)
    34de:	2300      	movs	r3, #0
    34e0:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    34e4:	4621      	mov	r1, r4
    34e6:	3074      	adds	r0, #116	; 0x74
    34e8:	f7ff fdc4 	bl	3074 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    34ec:	e7f5      	b.n	34da <release_handler+0x2a>
    34ee:	4770      	bx	lr
    34f0:	20000050 	.word	0x20000050

000034f4 <pin_handler_trigger_uninit>:
{
    34f4:	b510      	push	{r4, lr}
    34f6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    34f8:	f7ff fef4 	bl	32e4 <pin_in_use_by_te>
    34fc:	b150      	cbz	r0, 3514 <pin_handler_trigger_uninit+0x20>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    34fe:	4620      	mov	r0, r4
    3500:	f7ff ff10 	bl	3324 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    3504:	4b08      	ldr	r3, [pc, #32]	; (3528 <pin_handler_trigger_uninit+0x34>)
    3506:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    350a:	2200      	movs	r2, #0
    350c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
    3510:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    3514:	4620      	mov	r0, r4
    3516:	f7ff ffcb 	bl	34b0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    351a:	3408      	adds	r4, #8
    351c:	4b03      	ldr	r3, [pc, #12]	; (352c <pin_handler_trigger_uninit+0x38>)
    351e:	2200      	movs	r2, #0
    3520:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    3524:	bd10      	pop	{r4, pc}
    3526:	bf00      	nop
    3528:	5000d000 	.word	0x5000d000
    352c:	20000050 	.word	0x20000050

00003530 <pin_handler_set>:
{
    3530:	b570      	push	{r4, r5, r6, lr}
    3532:	b082      	sub	sp, #8
    3534:	4605      	mov	r5, r0
    3536:	460e      	mov	r6, r1
    3538:	4614      	mov	r4, r2
    release_handler(pin);
    353a:	f7ff ffb9 	bl	34b0 <release_handler>
    if (!handler)
    353e:	b326      	cbz	r6, 358a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    3540:	4621      	mov	r1, r4
    3542:	4630      	mov	r0, r6
    3544:	f7ff ff10 	bl	3368 <find_handler>
    if (handler_id < 0)
    3548:	1e03      	subs	r3, r0, #0
    354a:	db13      	blt.n	3574 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    354c:	4910      	ldr	r1, [pc, #64]	; (3590 <pin_handler_set+0x60>)
    354e:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    3552:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    3556:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    3558:	f105 0008 	add.w	r0, r5, #8
    355c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    3560:	025b      	lsls	r3, r3, #9
    3562:	b29b      	uxth	r3, r3
    3564:	4313      	orrs	r3, r2
    3566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    356a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    356e:	4809      	ldr	r0, [pc, #36]	; (3594 <pin_handler_set+0x64>)
}
    3570:	b002      	add	sp, #8
    3572:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    3574:	f10d 0107 	add.w	r1, sp, #7
    3578:	4807      	ldr	r0, [pc, #28]	; (3598 <pin_handler_set+0x68>)
    357a:	f7ff fd57 	bl	302c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    357e:	4b05      	ldr	r3, [pc, #20]	; (3594 <pin_handler_set+0x64>)
    3580:	4298      	cmp	r0, r3
    3582:	d1f5      	bne.n	3570 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    3584:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3588:	e7e0      	b.n	354c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    358a:	4802      	ldr	r0, [pc, #8]	; (3594 <pin_handler_set+0x64>)
    358c:	e7f0      	b.n	3570 <pin_handler_set+0x40>
    358e:	bf00      	nop
    3590:	20000050 	.word	0x20000050
    3594:	0bad0000 	.word	0x0bad0000
    3598:	200000c4 	.word	0x200000c4

0000359c <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    359c:	b570      	push	{r4, r5, r6, lr}
    359e:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    35a0:	466a      	mov	r2, sp
    35a2:	2102      	movs	r1, #2
    35a4:	2000      	movs	r0, #0
    35a6:	f7ff fe73 	bl	3290 <nrf_gpio_latches_read_and_clear>
    35aa:	e03e      	b.n	362a <port_event_handle+0x8e>
    35ac:	4e21      	ldr	r6, [pc, #132]	; (3634 <port_event_handle+0x98>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    35ae:	f105 0380 	add.w	r3, r5, #128	; 0x80
    35b2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    35b6:	f3c2 4201 	ubfx	r2, r2, #16, #2
    35ba:	f7ff ff37 	bl	342c <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    35be:	2301      	movs	r3, #1
    35c0:	40ab      	lsls	r3, r5
    35c2:	6233      	str	r3, [r6, #32]
            while (latch[i])
    35c4:	ab02      	add	r3, sp, #8
    35c6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    35ca:	f853 0c08 	ldr.w	r0, [r3, #-8]
    35ce:	b1f8      	cbz	r0, 3610 <port_event_handle+0x74>
                uint32_t pin = NRF_CTZ(latch[i]);
    35d0:	fa90 f0a0 	rbit	r0, r0
    35d4:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    35d8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    35dc:	f100 0208 	add.w	r2, r0, #8
    35e0:	4b15      	ldr	r3, [pc, #84]	; (3638 <port_event_handle+0x9c>)
    35e2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    35e6:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    35ea:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    35ec:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    35f0:	f81d 2005 	ldrb.w	r2, [sp, r5]
    35f4:	2301      	movs	r3, #1
    35f6:	40b3      	lsls	r3, r6
    35f8:	43db      	mvns	r3, r3
    35fa:	b25b      	sxtb	r3, r3
    35fc:	4013      	ands	r3, r2
    35fe:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    3602:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    3606:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3608:	2b01      	cmp	r3, #1
    360a:	d0cf      	beq.n	35ac <port_event_handle+0x10>
        case 0: return NRF_P0;
    360c:	4e0b      	ldr	r6, [pc, #44]	; (363c <port_event_handle+0xa0>)
    360e:	e7ce      	b.n	35ae <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3610:	3401      	adds	r4, #1
    3612:	2c01      	cmp	r4, #1
    3614:	d9d6      	bls.n	35c4 <port_event_handle+0x28>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3616:	4b0a      	ldr	r3, [pc, #40]	; (3640 <port_event_handle+0xa4>)
    3618:	2200      	movs	r2, #0
    361a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    361e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    3622:	4668      	mov	r0, sp
    3624:	f003 f99d 	bl	6962 <latch_pending_read_and_check>
    3628:	b108      	cbz	r0, 362e <port_event_handle+0x92>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    362a:	2400      	movs	r4, #0
    362c:	e7f1      	b.n	3612 <port_event_handle+0x76>
}
    362e:	b002      	add	sp, #8
    3630:	bd70      	pop	{r4, r5, r6, pc}
    3632:	bf00      	nop
    3634:	50842800 	.word	0x50842800
    3638:	20000050 	.word	0x20000050
    363c:	50842500 	.word	0x50842500
    3640:	5000d000 	.word	0x5000d000

00003644 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    3644:	b538      	push	{r3, r4, r5, lr}
    3646:	4604      	mov	r4, r0
    while (mask)
    3648:	e018      	b.n	367c <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    364a:	fa94 f3a4 	rbit	r3, r4
    364e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3652:	2201      	movs	r2, #1
    3654:	409a      	lsls	r2, r3
    3656:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    365a:	4a0a      	ldr	r2, [pc, #40]	; (3684 <gpiote_evt_handle+0x40>)
    365c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3660:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    3664:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3668:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    366c:	f3c0 4001 	ubfx	r0, r0, #16, #2
    3670:	f003 f970 	bl	6954 <gpiote_polarity_to_trigger>
    3674:	4601      	mov	r1, r0
    3676:	4628      	mov	r0, r5
    3678:	f7ff fec2 	bl	3400 <call_handler>
    while (mask)
    367c:	2c00      	cmp	r4, #0
    367e:	d1e4      	bne.n	364a <gpiote_evt_handle+0x6>
    }
}
    3680:	bd38      	pop	{r3, r4, r5, pc}
    3682:	bf00      	nop
    3684:	5000d000 	.word	0x5000d000

00003688 <nrfx_gpiote_input_configure>:
{
    3688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    368c:	b084      	sub	sp, #16
    368e:	4604      	mov	r4, r0
    3690:	4615      	mov	r5, r2
    3692:	461e      	mov	r6, r3
    if (p_input_config)
    3694:	b309      	cbz	r1, 36da <nrfx_gpiote_input_configure+0x52>
    3696:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    3698:	f003 f946 	bl	6928 <pin_is_task_output>
    369c:	2800      	cmp	r0, #0
    369e:	d13f      	bne.n	3720 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    36a0:	2300      	movs	r3, #0
    36a2:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    36a6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    36aa:	9301      	str	r3, [sp, #4]
    36ac:	9300      	str	r3, [sp, #0]
    36ae:	463b      	mov	r3, r7
    36b0:	f10d 020f 	add.w	r2, sp, #15
    36b4:	f10d 010e 	add.w	r1, sp, #14
    36b8:	4620      	mov	r0, r4
    36ba:	f7ff fd77 	bl	31ac <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    36be:	4a39      	ldr	r2, [pc, #228]	; (37a4 <nrfx_gpiote_input_configure+0x11c>)
    36c0:	f104 0108 	add.w	r1, r4, #8
    36c4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    36c8:	f023 0302 	bic.w	r3, r3, #2
    36cc:	b29b      	uxth	r3, r3
    36ce:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    36d2:	f043 0301 	orr.w	r3, r3, #1
    36d6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    36da:	b1bd      	cbz	r5, 370c <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    36dc:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    36de:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    36e2:	4620      	mov	r0, r4
    36e4:	f7ff fe14 	bl	3310 <pin_is_output>
    36e8:	b1e0      	cbz	r0, 3724 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    36ea:	f1b8 0f00 	cmp.w	r8, #0
    36ee:	d153      	bne.n	3798 <nrfx_gpiote_input_configure+0x110>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    36f0:	4a2c      	ldr	r2, [pc, #176]	; (37a4 <nrfx_gpiote_input_configure+0x11c>)
    36f2:	f104 0108 	add.w	r1, r4, #8
    36f6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    36fa:	f023 031c 	bic.w	r3, r3, #28
    36fe:	b29b      	uxth	r3, r3
    3700:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3704:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    3708:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    370c:	2e00      	cmp	r6, #0
    370e:	d047      	beq.n	37a0 <nrfx_gpiote_input_configure+0x118>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3710:	6872      	ldr	r2, [r6, #4]
    3712:	6831      	ldr	r1, [r6, #0]
    3714:	4620      	mov	r0, r4
    3716:	f7ff ff0b 	bl	3530 <pin_handler_set>
}
    371a:	b004      	add	sp, #16
    371c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3720:	4821      	ldr	r0, [pc, #132]	; (37a8 <nrfx_gpiote_input_configure+0x120>)
    3722:	e7fa      	b.n	371a <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3724:	4a1f      	ldr	r2, [pc, #124]	; (37a4 <nrfx_gpiote_input_configure+0x11c>)
    3726:	f104 0108 	add.w	r1, r4, #8
    372a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    372e:	f023 0320 	bic.w	r3, r3, #32
    3732:	04db      	lsls	r3, r3, #19
    3734:	0cdb      	lsrs	r3, r3, #19
    3736:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    373a:	f1b8 0f00 	cmp.w	r8, #0
    373e:	d0d7      	beq.n	36f0 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    3740:	2f03      	cmp	r7, #3
    3742:	d82b      	bhi.n	379c <nrfx_gpiote_input_configure+0x114>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3744:	686b      	ldr	r3, [r5, #4]
    3746:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3748:	b947      	cbnz	r7, 375c <nrfx_gpiote_input_configure+0xd4>
    p_reg->CONFIG[idx] = 0;
    374a:	4b18      	ldr	r3, [pc, #96]	; (37ac <nrfx_gpiote_input_configure+0x124>)
    374c:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    3750:	2200      	movs	r2, #0
    3752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    p_reg->CONFIG[idx] = 0;
    3756:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#endif
}
    375a:	e7c9      	b.n	36f0 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    375c:	4638      	mov	r0, r7
    375e:	f003 f8fa 	bl	6956 <gpiote_trigger_to_polarity>
    3762:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3764:	4811      	ldr	r0, [pc, #68]	; (37ac <nrfx_gpiote_input_configure+0x124>)
    3766:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    376a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    376e:	f022 0203 	bic.w	r2, r2, #3
    3772:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    3776:	4622      	mov	r2, r4
    3778:	4629      	mov	r1, r5
    377a:	f003 f88d 	bl	6898 <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    377e:	4a09      	ldr	r2, [pc, #36]	; (37a4 <nrfx_gpiote_input_configure+0x11c>)
    3780:	f104 0108 	add.w	r1, r4, #8
    3784:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3788:	036d      	lsls	r5, r5, #13
    378a:	b2ad      	uxth	r5, r5
    378c:	432b      	orrs	r3, r5
    378e:	f043 0320 	orr.w	r3, r3, #32
    3792:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    3796:	e7ab      	b.n	36f0 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    3798:	4803      	ldr	r0, [pc, #12]	; (37a8 <nrfx_gpiote_input_configure+0x120>)
    379a:	e7be      	b.n	371a <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    379c:	4802      	ldr	r0, [pc, #8]	; (37a8 <nrfx_gpiote_input_configure+0x120>)
    379e:	e7bc      	b.n	371a <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    37a0:	4803      	ldr	r0, [pc, #12]	; (37b0 <nrfx_gpiote_input_configure+0x128>)
    37a2:	e7ba      	b.n	371a <nrfx_gpiote_input_configure+0x92>
    37a4:	20000050 	.word	0x20000050
    37a8:	0bad0004 	.word	0x0bad0004
    37ac:	5000d000 	.word	0x5000d000
    37b0:	0bad0000 	.word	0x0bad0000

000037b4 <nrfx_gpiote_output_configure>:
{
    37b4:	b570      	push	{r4, r5, r6, lr}
    37b6:	b084      	sub	sp, #16
    37b8:	4604      	mov	r4, r0
    37ba:	4615      	mov	r5, r2
    if (p_config)
    37bc:	b329      	cbz	r1, 380a <nrfx_gpiote_output_configure+0x56>
    37be:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    37c0:	f003 f8c1 	bl	6946 <pin_is_input>
    37c4:	b120      	cbz	r0, 37d0 <nrfx_gpiote_output_configure+0x1c>
    37c6:	4620      	mov	r0, r4
    37c8:	f7ff fd8c 	bl	32e4 <pin_in_use_by_te>
    37cc:	2800      	cmp	r0, #0
    37ce:	d13a      	bne.n	3846 <nrfx_gpiote_output_configure+0x92>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    37d0:	4620      	mov	r0, r4
    37d2:	f7ff fd91 	bl	32f8 <pin_has_trigger>
    37d6:	b110      	cbz	r0, 37de <nrfx_gpiote_output_configure+0x2a>
    37d8:	7873      	ldrb	r3, [r6, #1]
    37da:	2b01      	cmp	r3, #1
    37dc:	d033      	beq.n	3846 <nrfx_gpiote_output_configure+0x92>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    37de:	2301      	movs	r3, #1
    37e0:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    37e4:	2300      	movs	r3, #0
    37e6:	9301      	str	r3, [sp, #4]
    37e8:	9600      	str	r6, [sp, #0]
    37ea:	1cb3      	adds	r3, r6, #2
    37ec:	1c72      	adds	r2, r6, #1
    37ee:	f10d 010f 	add.w	r1, sp, #15
    37f2:	4620      	mov	r0, r4
    37f4:	f7ff fcda 	bl	31ac <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    37f8:	4a20      	ldr	r2, [pc, #128]	; (387c <nrfx_gpiote_output_configure+0xc8>)
    37fa:	f104 0108 	add.w	r1, r4, #8
    37fe:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3802:	f043 0303 	orr.w	r3, r3, #3
    3806:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    380a:	b395      	cbz	r5, 3872 <nrfx_gpiote_output_configure+0xbe>
        if (pin_is_input(pin))
    380c:	4620      	mov	r0, r4
    380e:	f003 f89a 	bl	6946 <pin_is_input>
    3812:	bb80      	cbnz	r0, 3876 <nrfx_gpiote_output_configure+0xc2>
        uint32_t ch = p_task_config->task_ch;
    3814:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    3816:	4b1a      	ldr	r3, [pc, #104]	; (3880 <nrfx_gpiote_output_configure+0xcc>)
    3818:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    381c:	2100      	movs	r1, #0
    381e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    p_reg->CONFIG[idx] = 0;
    3822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3826:	4a15      	ldr	r2, [pc, #84]	; (387c <nrfx_gpiote_output_configure+0xc8>)
    3828:	f104 0108 	add.w	r1, r4, #8
    382c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3830:	f023 0320 	bic.w	r3, r3, #32
    3834:	04db      	lsls	r3, r3, #19
    3836:	0cdb      	lsrs	r3, r3, #19
    3838:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    383c:	786b      	ldrb	r3, [r5, #1]
    383e:	b923      	cbnz	r3, 384a <nrfx_gpiote_output_configure+0x96>
    return NRFX_SUCCESS;
    3840:	4810      	ldr	r0, [pc, #64]	; (3884 <nrfx_gpiote_output_configure+0xd0>)
}
    3842:	b004      	add	sp, #16
    3844:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3846:	4810      	ldr	r0, [pc, #64]	; (3888 <nrfx_gpiote_output_configure+0xd4>)
    3848:	e7fb      	b.n	3842 <nrfx_gpiote_output_configure+0x8e>
                                      p_task_config->init_val);
    384a:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    384c:	9200      	str	r2, [sp, #0]
    384e:	4622      	mov	r2, r4
    3850:	4631      	mov	r1, r6
    3852:	480b      	ldr	r0, [pc, #44]	; (3880 <nrfx_gpiote_output_configure+0xcc>)
    3854:	f003 f839 	bl	68ca <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3858:	4a08      	ldr	r2, [pc, #32]	; (387c <nrfx_gpiote_output_configure+0xc8>)
    385a:	3408      	adds	r4, #8
    385c:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    3860:	0376      	lsls	r6, r6, #13
    3862:	b2b6      	uxth	r6, r6
    3864:	4333      	orrs	r3, r6
    3866:	f043 0320 	orr.w	r3, r3, #32
    386a:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    386e:	4805      	ldr	r0, [pc, #20]	; (3884 <nrfx_gpiote_output_configure+0xd0>)
    3870:	e7e7      	b.n	3842 <nrfx_gpiote_output_configure+0x8e>
    3872:	4804      	ldr	r0, [pc, #16]	; (3884 <nrfx_gpiote_output_configure+0xd0>)
    3874:	e7e5      	b.n	3842 <nrfx_gpiote_output_configure+0x8e>
            return NRFX_ERROR_INVALID_PARAM;
    3876:	4804      	ldr	r0, [pc, #16]	; (3888 <nrfx_gpiote_output_configure+0xd4>)
    3878:	e7e3      	b.n	3842 <nrfx_gpiote_output_configure+0x8e>
    387a:	bf00      	nop
    387c:	20000050 	.word	0x20000050
    3880:	5000d000 	.word	0x5000d000
    3884:	0bad0000 	.word	0x0bad0000
    3888:	0bad0004 	.word	0x0bad0004

0000388c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    388c:	4b01      	ldr	r3, [pc, #4]	; (3894 <nrfx_gpiote_global_callback_set+0x8>)
    388e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    3890:	60d9      	str	r1, [r3, #12]
}
    3892:	4770      	bx	lr
    3894:	20000050 	.word	0x20000050

00003898 <nrfx_gpiote_channel_get>:
{
    3898:	b538      	push	{r3, r4, r5, lr}
    389a:	4604      	mov	r4, r0
    389c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    389e:	f7ff fd21 	bl	32e4 <pin_in_use_by_te>
    38a2:	b140      	cbz	r0, 38b6 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    38a4:	f104 0008 	add.w	r0, r4, #8
    38a8:	4b04      	ldr	r3, [pc, #16]	; (38bc <nrfx_gpiote_channel_get+0x24>)
    38aa:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    38ae:	0b5b      	lsrs	r3, r3, #13
    38b0:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    38b2:	4803      	ldr	r0, [pc, #12]	; (38c0 <nrfx_gpiote_channel_get+0x28>)
}
    38b4:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    38b6:	4803      	ldr	r0, [pc, #12]	; (38c4 <nrfx_gpiote_channel_get+0x2c>)
    38b8:	e7fc      	b.n	38b4 <nrfx_gpiote_channel_get+0x1c>
    38ba:	bf00      	nop
    38bc:	20000050 	.word	0x20000050
    38c0:	0bad0000 	.word	0x0bad0000
    38c4:	0bad0004 	.word	0x0bad0004

000038c8 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    38c8:	4b0f      	ldr	r3, [pc, #60]	; (3908 <nrfx_gpiote_init+0x40>)
    38ca:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    38ce:	b10b      	cbz	r3, 38d4 <nrfx_gpiote_init+0xc>
        return err_code;
    38d0:	480e      	ldr	r0, [pc, #56]	; (390c <nrfx_gpiote_init+0x44>)
}
    38d2:	4770      	bx	lr
{
    38d4:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    38d6:	4c0e      	ldr	r4, [pc, #56]	; (3910 <nrfx_gpiote_init+0x48>)
    38d8:	2260      	movs	r2, #96	; 0x60
    38da:	2100      	movs	r1, #0
    38dc:	4620      	mov	r0, r4
    38de:	f002 f957 	bl	5b90 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    38e2:	200d      	movs	r0, #13
    38e4:	f002 f84a 	bl	597c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    38e8:	4b0a      	ldr	r3, [pc, #40]	; (3914 <nrfx_gpiote_init+0x4c>)
    38ea:	2200      	movs	r2, #0
    38ec:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    38f0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    38f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    38f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    38fc:	2301      	movs	r3, #1
    38fe:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3902:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
    3904:	4804      	ldr	r0, [pc, #16]	; (3918 <nrfx_gpiote_init+0x50>)
}
    3906:	bd10      	pop	{r4, pc}
    3908:	20000050 	.word	0x20000050
    390c:	0bad0005 	.word	0x0bad0005
    3910:	20000060 	.word	0x20000060
    3914:	5000d000 	.word	0x5000d000
    3918:	0bad0000 	.word	0x0bad0000

0000391c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    391c:	4b03      	ldr	r3, [pc, #12]	; (392c <nrfx_gpiote_is_init+0x10>)
    391e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    3922:	3800      	subs	r0, #0
    3924:	bf18      	it	ne
    3926:	2001      	movne	r0, #1
    3928:	4770      	bx	lr
    392a:	bf00      	nop
    392c:	20000050 	.word	0x20000050

00003930 <nrfx_gpiote_channel_free>:
{
    3930:	b508      	push	{r3, lr}
    3932:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3934:	4801      	ldr	r0, [pc, #4]	; (393c <nrfx_gpiote_channel_free+0xc>)
    3936:	f7ff fb9d 	bl	3074 <nrfx_flag32_free>
}
    393a:	bd08      	pop	{r3, pc}
    393c:	200000c0 	.word	0x200000c0

00003940 <nrfx_gpiote_channel_alloc>:
{
    3940:	b508      	push	{r3, lr}
    3942:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    3944:	4801      	ldr	r0, [pc, #4]	; (394c <nrfx_gpiote_channel_alloc+0xc>)
    3946:	f7ff fb71 	bl	302c <nrfx_flag32_alloc>
}
    394a:	bd08      	pop	{r3, pc}
    394c:	200000c0 	.word	0x200000c0

00003950 <nrfx_gpiote_trigger_enable>:
{
    3950:	b538      	push	{r3, r4, r5, lr}
    3952:	4604      	mov	r4, r0
    3954:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3956:	f7ff fcc5 	bl	32e4 <pin_in_use_by_te>
    395a:	b300      	cbz	r0, 399e <nrfx_gpiote_trigger_enable+0x4e>
    395c:	4620      	mov	r0, r4
    395e:	f002 fff2 	bl	6946 <pin_is_input>
    3962:	b1e0      	cbz	r0, 399e <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    3964:	4620      	mov	r0, r4
    3966:	f7ff fcdd 	bl	3324 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    396a:	0083      	lsls	r3, r0, #2
    396c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    3970:	b29b      	uxth	r3, r3
    3972:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    3976:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    397a:	2200      	movs	r2, #0
    397c:	601a      	str	r2, [r3, #0]
    397e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3980:	4a0b      	ldr	r2, [pc, #44]	; (39b0 <nrfx_gpiote_trigger_enable+0x60>)
    3982:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    3986:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    398a:	f043 0301 	orr.w	r3, r3, #1
    398e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    3992:	b15d      	cbz	r5, 39ac <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    3994:	2301      	movs	r3, #1
    3996:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3998:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    399c:	e006      	b.n	39ac <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    399e:	4620      	mov	r0, r4
    39a0:	f7ff fcf8 	bl	3394 <get_initial_sense>
    39a4:	4601      	mov	r1, r0
    39a6:	4620      	mov	r0, r4
    39a8:	f002 ffae 	bl	6908 <nrf_gpio_cfg_sense_set>
}
    39ac:	bd38      	pop	{r3, r4, r5, pc}
    39ae:	bf00      	nop
    39b0:	5000d000 	.word	0x5000d000

000039b4 <nrfx_gpiote_trigger_disable>:
{
    39b4:	b510      	push	{r4, lr}
    39b6:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    39b8:	f7ff fc94 	bl	32e4 <pin_in_use_by_te>
    39bc:	b1a0      	cbz	r0, 39e8 <nrfx_gpiote_trigger_disable+0x34>
    39be:	4620      	mov	r0, r4
    39c0:	f002 ffc1 	bl	6946 <pin_is_input>
    39c4:	b180      	cbz	r0, 39e8 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    39c6:	4620      	mov	r0, r4
    39c8:	f7ff fcac 	bl	3324 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    39cc:	2201      	movs	r2, #1
    39ce:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    39d0:	4b08      	ldr	r3, [pc, #32]	; (39f4 <nrfx_gpiote_trigger_disable+0x40>)
    39d2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    39d6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    39da:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    39de:	f022 0203 	bic.w	r2, r2, #3
    39e2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    39e6:	e003      	b.n	39f0 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    39e8:	2100      	movs	r1, #0
    39ea:	4620      	mov	r0, r4
    39ec:	f002 ff8c 	bl	6908 <nrf_gpio_cfg_sense_set>
}
    39f0:	bd10      	pop	{r4, pc}
    39f2:	bf00      	nop
    39f4:	5000d000 	.word	0x5000d000

000039f8 <nrfx_gpiote_pin_uninit>:
{
    39f8:	b510      	push	{r4, lr}
    39fa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    39fc:	f7ff fc68 	bl	32d0 <pin_in_use>
    3a00:	b908      	cbnz	r0, 3a06 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    3a02:	4806      	ldr	r0, [pc, #24]	; (3a1c <nrfx_gpiote_pin_uninit+0x24>)
}
    3a04:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    3a06:	4620      	mov	r0, r4
    3a08:	f7ff ffd4 	bl	39b4 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3a0c:	4620      	mov	r0, r4
    3a0e:	f7ff fd71 	bl	34f4 <pin_handler_trigger_uninit>
    nrf_gpio_cfg_default(pin);
    3a12:	4620      	mov	r0, r4
    3a14:	f7ff fc26 	bl	3264 <nrf_gpio_cfg_default>
    return NRFX_SUCCESS;
    3a18:	4801      	ldr	r0, [pc, #4]	; (3a20 <nrfx_gpiote_pin_uninit+0x28>)
    3a1a:	e7f3      	b.n	3a04 <nrfx_gpiote_pin_uninit+0xc>
    3a1c:	0bad0004 	.word	0x0bad0004
    3a20:	0bad0000 	.word	0x0bad0000

00003a24 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3a24:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    3a26:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    3a28:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3a2c:	2100      	movs	r1, #0
    uint32_t status = 0;
    3a2e:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3a30:	e003      	b.n	3a3a <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    3a32:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    3a34:	3304      	adds	r3, #4
    3a36:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3a38:	3101      	adds	r1, #1
    3a3a:	2907      	cmp	r1, #7
    3a3c:	d814      	bhi.n	3a68 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3a3e:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    3a42:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    3a46:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    3a48:	2a00      	cmp	r2, #0
    3a4a:	d0f2      	beq.n	3a32 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    3a4c:	4a0c      	ldr	r2, [pc, #48]	; (3a80 <nrfx_gpiote_irq_handler+0x5c>)
    3a4e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3a52:	4210      	tst	r0, r2
    3a54:	d0ed      	beq.n	3a32 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    3a56:	f103 42a0 	add.w	r2, r3, #1342177280	; 0x50000000
    3a5a:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3a5e:	2500      	movs	r5, #0
    3a60:	6015      	str	r5, [r2, #0]
    3a62:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    3a64:	4304      	orrs	r4, r0
    3a66:	e7e4      	b.n	3a32 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3a68:	4b05      	ldr	r3, [pc, #20]	; (3a80 <nrfx_gpiote_irq_handler+0x5c>)
    3a6a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3a6e:	b91b      	cbnz	r3, 3a78 <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    3a70:	4620      	mov	r0, r4
    3a72:	f7ff fde7 	bl	3644 <gpiote_evt_handle>
}
    3a76:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    3a78:	f7ff fd90 	bl	359c <port_event_handle>
    3a7c:	e7f8      	b.n	3a70 <nrfx_gpiote_irq_handler+0x4c>
    3a7e:	bf00      	nop
    3a80:	5000d000 	.word	0x5000d000

00003a84 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    3a84:	4b03      	ldr	r3, [pc, #12]	; (3a94 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    3a86:	e000      	b.n	3a8a <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    3a88:	3318      	adds	r3, #24
	while (dev < __device_end) {
    3a8a:	4a03      	ldr	r2, [pc, #12]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a8c:	4293      	cmp	r3, r2
    3a8e:	d3fb      	bcc.n	3a88 <z_device_state_init+0x4>
	}
}
    3a90:	4770      	bx	lr
    3a92:	bf00      	nop
    3a94:	00006e4c 	.word	0x00006e4c
    3a98:	00006eac 	.word	0x00006eac

00003a9c <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    3a9c:	2804      	cmp	r0, #4
    3a9e:	d80c      	bhi.n	3aba <reason_to_str+0x1e>
    3aa0:	e8df f000 	tbb	[pc, r0]
    3aa4:	07050d03 	.word	0x07050d03
    3aa8:	09          	.byte	0x09
    3aa9:	00          	.byte	0x00
    3aaa:	4806      	ldr	r0, [pc, #24]	; (3ac4 <reason_to_str+0x28>)
    3aac:	4770      	bx	lr
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    3aae:	4806      	ldr	r0, [pc, #24]	; (3ac8 <reason_to_str+0x2c>)
    3ab0:	4770      	bx	lr
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    3ab2:	4806      	ldr	r0, [pc, #24]	; (3acc <reason_to_str+0x30>)
    3ab4:	4770      	bx	lr
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    3ab6:	4806      	ldr	r0, [pc, #24]	; (3ad0 <reason_to_str+0x34>)
    3ab8:	4770      	bx	lr
	default:
		return "Unknown error";
    3aba:	4806      	ldr	r0, [pc, #24]	; (3ad4 <reason_to_str+0x38>)
    3abc:	4770      	bx	lr
		return "Unhandled interrupt";
    3abe:	4806      	ldr	r0, [pc, #24]	; (3ad8 <reason_to_str+0x3c>)
	}
}
    3ac0:	4770      	bx	lr
    3ac2:	bf00      	nop
    3ac4:	00007b04 	.word	0x00007b04
    3ac8:	00007b28 	.word	0x00007b28
    3acc:	00007b38 	.word	0x00007b38
    3ad0:	00007b44 	.word	0x00007b44
    3ad4:	00007b54 	.word	0x00007b54
    3ad8:	00007b14 	.word	0x00007b14

00003adc <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    3adc:	b130      	cbz	r0, 3aec <thread_name_get+0x10>
{
    3ade:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    3ae0:	f002 ffd0 	bl	6a84 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    3ae4:	b120      	cbz	r0, 3af0 <thread_name_get+0x14>
    3ae6:	7803      	ldrb	r3, [r0, #0]
    3ae8:	b123      	cbz	r3, 3af4 <thread_name_get+0x18>
}
    3aea:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    3aec:	4802      	ldr	r0, [pc, #8]	; (3af8 <thread_name_get+0x1c>)
}
    3aee:	4770      	bx	lr
		thread_name = "unknown";
    3af0:	4801      	ldr	r0, [pc, #4]	; (3af8 <thread_name_get+0x1c>)
    3af2:	e7fa      	b.n	3aea <thread_name_get+0xe>
    3af4:	4800      	ldr	r0, [pc, #0]	; (3af8 <thread_name_get+0x1c>)
	return thread_name;
    3af6:	e7f8      	b.n	3aea <thread_name_get+0xe>
    3af8:	00007b64 	.word	0x00007b64

00003afc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3afc:	b5f0      	push	{r4, r5, r6, r7, lr}
    3afe:	b083      	sub	sp, #12
    3b00:	4605      	mov	r5, r0
    3b02:	460e      	mov	r6, r1
	__asm__ volatile(
    3b04:	f04f 0320 	mov.w	r3, #32
    3b08:	f3ef 8711 	mrs	r7, BASEPRI
    3b0c:	f383 8812 	msr	BASEPRI_MAX, r3
    3b10:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    3b14:	f000 ff4c 	bl	49b0 <z_impl_z_current_get>
    3b18:	4604      	mov	r4, r0
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3b1a:	4628      	mov	r0, r5
    3b1c:	f7ff ffbe 	bl	3a9c <reason_to_str>
    3b20:	4603      	mov	r3, r0
    3b22:	2200      	movs	r2, #0
    3b24:	9200      	str	r2, [sp, #0]
    3b26:	462a      	mov	r2, r5
    3b28:	2145      	movs	r1, #69	; 0x45
    3b2a:	4811      	ldr	r0, [pc, #68]	; (3b70 <z_fatal_error+0x74>)
    3b2c:	f001 fed9 	bl	58e2 <z_log_minimal_printk>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    3b30:	b11e      	cbz	r6, 3b3a <z_fatal_error+0x3e>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    3b32:	69f3      	ldr	r3, [r6, #28]
    3b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3b38:	b9ab      	cbnz	r3, 3b66 <z_fatal_error+0x6a>
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    3b3a:	4620      	mov	r0, r4
    3b3c:	f7ff ffce 	bl	3adc <thread_name_get>
    3b40:	4603      	mov	r3, r0
    3b42:	4622      	mov	r2, r4
    3b44:	2145      	movs	r1, #69	; 0x45
    3b46:	480b      	ldr	r0, [pc, #44]	; (3b74 <z_fatal_error+0x78>)
    3b48:	f001 fecb 	bl	58e2 <z_log_minimal_printk>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    3b4c:	4631      	mov	r1, r6
    3b4e:	4628      	mov	r0, r5
    3b50:	f7ff f9a2 	bl	2e98 <k_sys_fatal_error_handler>
	__asm__ volatile(
    3b54:	f387 8811 	msr	BASEPRI, r7
    3b58:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    3b5c:	4620      	mov	r0, r4
    3b5e:	f7fe f85d 	bl	1c1c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    3b62:	b003      	add	sp, #12
    3b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Fault during interrupt handling\n");
    3b66:	2145      	movs	r1, #69	; 0x45
    3b68:	4803      	ldr	r0, [pc, #12]	; (3b78 <z_fatal_error+0x7c>)
    3b6a:	f001 feba 	bl	58e2 <z_log_minimal_printk>
    3b6e:	e7e4      	b.n	3b3a <z_fatal_error+0x3e>
    3b70:	00007b6c 	.word	0x00007b6c
    3b74:	00007bc4 	.word	0x00007bc4
    3b78:	00007b9c 	.word	0x00007b9c

00003b7c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    3b7c:	b570      	push	{r4, r5, r6, lr}
    3b7e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3b80:	4b11      	ldr	r3, [pc, #68]	; (3bc8 <z_sys_init_run_level+0x4c>)
    3b82:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3b86:	e009      	b.n	3b9c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3b88:	4240      	negs	r0, r0
    3b8a:	e017      	b.n	3bbc <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    3b8c:	68eb      	ldr	r3, [r5, #12]
    3b8e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3b90:	68ea      	ldr	r2, [r5, #12]
    3b92:	7853      	ldrb	r3, [r2, #1]
    3b94:	f043 0301 	orr.w	r3, r3, #1
    3b98:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3b9a:	3408      	adds	r4, #8
    3b9c:	1c73      	adds	r3, r6, #1
    3b9e:	4a0a      	ldr	r2, [pc, #40]	; (3bc8 <z_sys_init_run_level+0x4c>)
    3ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3ba4:	42a3      	cmp	r3, r4
    3ba6:	d90d      	bls.n	3bc4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3ba8:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    3baa:	6823      	ldr	r3, [r4, #0]
    3bac:	4628      	mov	r0, r5
    3bae:	4798      	blx	r3
		if (dev != NULL) {
    3bb0:	2d00      	cmp	r5, #0
    3bb2:	d0f2      	beq.n	3b9a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3bb4:	2800      	cmp	r0, #0
    3bb6:	d0eb      	beq.n	3b90 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3bb8:	2800      	cmp	r0, #0
    3bba:	dbe5      	blt.n	3b88 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    3bbc:	28ff      	cmp	r0, #255	; 0xff
    3bbe:	dde5      	ble.n	3b8c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3bc0:	20ff      	movs	r0, #255	; 0xff
    3bc2:	e7e3      	b.n	3b8c <z_sys_init_run_level+0x10>
		}
	}
}
    3bc4:	bd70      	pop	{r4, r5, r6, pc}
    3bc6:	bf00      	nop
    3bc8:	00007bf4 	.word	0x00007bf4

00003bcc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    3bcc:	b510      	push	{r4, lr}
    3bce:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    3bd0:	23b0      	movs	r3, #176	; 0xb0
    3bd2:	4c11      	ldr	r4, [pc, #68]	; (3c18 <init_idle_thread+0x4c>)
    3bd4:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    3bd8:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3bdc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3be0:	4b0e      	ldr	r3, [pc, #56]	; (3c1c <init_idle_thread+0x50>)
    3be2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	z_setup_new_thread(thread, stack,
    3be6:	4a0e      	ldr	r2, [pc, #56]	; (3c20 <init_idle_thread+0x54>)
    3be8:	9205      	str	r2, [sp, #20]
    3bea:	2201      	movs	r2, #1
    3bec:	9204      	str	r2, [sp, #16]
    3bee:	220f      	movs	r2, #15
    3bf0:	9203      	str	r2, [sp, #12]
    3bf2:	2200      	movs	r2, #0
    3bf4:	9202      	str	r2, [sp, #8]
    3bf6:	9201      	str	r2, [sp, #4]
    3bf8:	9300      	str	r3, [sp, #0]
    3bfa:	4b0a      	ldr	r3, [pc, #40]	; (3c24 <init_idle_thread+0x58>)
    3bfc:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3c00:	4909      	ldr	r1, [pc, #36]	; (3c28 <init_idle_thread+0x5c>)
    3c02:	eb01 118c 	add.w	r1, r1, ip, lsl #6
    3c06:	4620      	mov	r0, r4
    3c08:	f000 f94a 	bl	3ea0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3c0c:	7b63      	ldrb	r3, [r4, #13]
    3c0e:	f023 0304 	bic.w	r3, r3, #4
    3c12:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    3c14:	b006      	add	sp, #24
    3c16:	bd10      	pop	{r4, pc}
    3c18:	200001b0 	.word	0x200001b0
    3c1c:	2000095c 	.word	0x2000095c
    3c20:	00007be4 	.word	0x00007be4
    3c24:	00003ffd 	.word	0x00003ffd
    3c28:	20001378 	.word	0x20001378

00003c2c <bg_thread_main>:
{
    3c2c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    3c2e:	4b0a      	ldr	r3, [pc, #40]	; (3c58 <bg_thread_main+0x2c>)
    3c30:	2201      	movs	r2, #1
    3c32:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    3c34:	2003      	movs	r0, #3
    3c36:	f7ff ffa1 	bl	3b7c <z_sys_init_run_level>
	boot_banner();
    3c3a:	f001 f865 	bl	4d08 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    3c3e:	2004      	movs	r0, #4
    3c40:	f7ff ff9c 	bl	3b7c <z_sys_init_run_level>
	z_init_static_threads();
    3c44:	f000 f990 	bl	3f68 <z_init_static_threads>
	main();
    3c48:	f7fc fc0a 	bl	460 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3c4c:	4a03      	ldr	r2, [pc, #12]	; (3c5c <bg_thread_main+0x30>)
    3c4e:	7b13      	ldrb	r3, [r2, #12]
    3c50:	f023 0301 	bic.w	r3, r3, #1
    3c54:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3c56:	bd08      	pop	{r3, pc}
    3c58:	20000b73 	.word	0x20000b73
    3c5c:	20000260 	.word	0x20000260

00003c60 <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    3c60:	b508      	push	{r3, lr}
    3c62:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3c64:	4a01      	ldr	r2, [pc, #4]	; (3c6c <switch_to_main_thread+0xc>)
    3c66:	4802      	ldr	r0, [pc, #8]	; (3c70 <switch_to_main_thread+0x10>)
    3c68:	f7fd fc92 	bl	1590 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3c6c:	00003c2d 	.word	0x00003c2d
    3c70:	20000260 	.word	0x20000260

00003c74 <z_bss_zero>:
{
    3c74:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3c76:	4803      	ldr	r0, [pc, #12]	; (3c84 <z_bss_zero+0x10>)
    3c78:	4a03      	ldr	r2, [pc, #12]	; (3c88 <z_bss_zero+0x14>)
    3c7a:	1a12      	subs	r2, r2, r0
    3c7c:	2100      	movs	r1, #0
    3c7e:	f002 fe93 	bl	69a8 <z_early_memset>
}
    3c82:	bd08      	pop	{r3, pc}
    3c84:	20000190 	.word	0x20000190
    3c88:	20000b74 	.word	0x20000b74

00003c8c <z_init_cpu>:
{
    3c8c:	b510      	push	{r4, lr}
    3c8e:	4604      	mov	r4, r0
	init_idle_thread(id);
    3c90:	f7ff ff9c 	bl	3bcc <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3c94:	23b0      	movs	r3, #176	; 0xb0
    3c96:	490a      	ldr	r1, [pc, #40]	; (3cc0 <z_init_cpu+0x34>)
    3c98:	fb03 1104 	mla	r1, r3, r4, r1
    3c9c:	4a09      	ldr	r2, [pc, #36]	; (3cc4 <z_init_cpu+0x38>)
    3c9e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3ca2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3ca6:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    3ca8:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3caa:	4b07      	ldr	r3, [pc, #28]	; (3cc8 <z_init_cpu+0x3c>)
    3cac:	eb03 23c4 	add.w	r3, r3, r4, lsl #11
    3cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    3cb4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3cb8:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    3cbc:	6053      	str	r3, [r2, #4]
}
    3cbe:	bd10      	pop	{r4, pc}
    3cc0:	200001b0 	.word	0x200001b0
    3cc4:	2000095c 	.word	0x2000095c
    3cc8:	20000b78 	.word	0x20000b78

00003ccc <prepare_multithreading>:
{
    3ccc:	b570      	push	{r4, r5, r6, lr}
    3cce:	b086      	sub	sp, #24
	z_sched_init();
    3cd0:	f000 fda6 	bl	4820 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    3cd4:	4d10      	ldr	r5, [pc, #64]	; (3d18 <prepare_multithreading+0x4c>)
    3cd6:	4b11      	ldr	r3, [pc, #68]	; (3d1c <prepare_multithreading+0x50>)
    3cd8:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3cda:	4b11      	ldr	r3, [pc, #68]	; (3d20 <prepare_multithreading+0x54>)
    3cdc:	9305      	str	r3, [sp, #20]
    3cde:	2301      	movs	r3, #1
    3ce0:	9304      	str	r3, [sp, #16]
    3ce2:	2400      	movs	r4, #0
    3ce4:	9403      	str	r4, [sp, #12]
    3ce6:	9402      	str	r4, [sp, #8]
    3ce8:	9401      	str	r4, [sp, #4]
    3cea:	9400      	str	r4, [sp, #0]
    3cec:	4b0d      	ldr	r3, [pc, #52]	; (3d24 <prepare_multithreading+0x58>)
    3cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3cf2:	490d      	ldr	r1, [pc, #52]	; (3d28 <prepare_multithreading+0x5c>)
    3cf4:	4628      	mov	r0, r5
    3cf6:	f000 f8d3 	bl	3ea0 <z_setup_new_thread>
    3cfa:	4606      	mov	r6, r0
    3cfc:	7b6b      	ldrb	r3, [r5, #13]
    3cfe:	f023 0304 	bic.w	r3, r3, #4
    3d02:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    3d04:	4628      	mov	r0, r5
    3d06:	f002 ff36 	bl	6b76 <z_ready_thread>
	z_init_cpu(0);
    3d0a:	4620      	mov	r0, r4
    3d0c:	f7ff ffbe 	bl	3c8c <z_init_cpu>
}
    3d10:	4630      	mov	r0, r6
    3d12:	b006      	add	sp, #24
    3d14:	bd70      	pop	{r4, r5, r6, pc}
    3d16:	bf00      	nop
    3d18:	20000260 	.word	0x20000260
    3d1c:	2000095c 	.word	0x2000095c
    3d20:	00007bec 	.word	0x00007bec
    3d24:	00003c2d 	.word	0x00003c2d
    3d28:	200014b8 	.word	0x200014b8

00003d2c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3d2c:	b500      	push	{lr}
    3d2e:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    3d30:	2000      	movs	r0, #0
    3d32:	f7ff ff23 	bl	3b7c <z_sys_init_run_level>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    3d36:	4b1d      	ldr	r3, [pc, #116]	; (3dac <z_cstart+0x80>)
	uint32_t msp =
    3d38:	f503 6200 	add.w	r2, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3d3c:	f382 8808 	msr	MSP, r2
#if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
    (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
  // without main extensions, the non-secure MSPLIM is RAZ/WI
  (void)MainStackPtrLimit;
#else
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    3d40:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3d44:	4c1a      	ldr	r4, [pc, #104]	; (3db0 <z_cstart+0x84>)
    3d46:	23e0      	movs	r3, #224	; 0xe0
    3d48:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    3d4c:	2500      	movs	r5, #0
    3d4e:	77e5      	strb	r5, [r4, #31]
    3d50:	7625      	strb	r5, [r4, #24]
    3d52:	7665      	strb	r5, [r4, #25]
    3d54:	76a5      	strb	r5, [r4, #26]
    3d56:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3d5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3d5c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3d60:	6263      	str	r3, [r4, #36]	; 0x24
    3d62:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3d66:	f7fd fea5 	bl	1ab4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3d6a:	f7fd faff 	bl	136c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3d72:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3d74:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3d76:	f7fe f8f3 	bl	1f60 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3d7a:	f7fd ff69 	bl	1c50 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    3d7e:	2401      	movs	r4, #1
    3d80:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3d84:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3d88:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    3d8a:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    3d8c:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    3d8e:	4b09      	ldr	r3, [pc, #36]	; (3db4 <z_cstart+0x88>)
    3d90:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3d94:	f7ff fe76 	bl	3a84 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    3d98:	4620      	mov	r0, r4
    3d9a:	f7ff feef 	bl	3b7c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    3d9e:	2002      	movs	r0, #2
    3da0:	f7ff feec 	bl	3b7c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3da4:	f7ff ff92 	bl	3ccc <prepare_multithreading>
    3da8:	f7ff ff5a 	bl	3c60 <switch_to_main_thread>
    3dac:	20000b78 	.word	0x20000b78
    3db0:	e000ed00 	.word	0xe000ed00
    3db4:	2000095c 	.word	0x2000095c

00003db8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    3db8:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3dba:	4c06      	ldr	r4, [pc, #24]	; (3dd4 <init_mem_slab_module+0x1c>)
	int rc = 0;
    3dbc:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3dbe:	e000      	b.n	3dc2 <init_mem_slab_module+0xa>
    3dc0:	341c      	adds	r4, #28
    3dc2:	4b05      	ldr	r3, [pc, #20]	; (3dd8 <init_mem_slab_module+0x20>)
    3dc4:	429c      	cmp	r4, r3
    3dc6:	d204      	bcs.n	3dd2 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    3dc8:	4620      	mov	r0, r4
    3dca:	f002 fdf5 	bl	69b8 <create_free_list>
		if (rc < 0) {
    3dce:	2800      	cmp	r0, #0
    3dd0:	daf6      	bge.n	3dc0 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    3dd2:	bd10      	pop	{r4, pc}
    3dd4:	2000013c 	.word	0x2000013c
    3dd8:	2000013c 	.word	0x2000013c

00003ddc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3ddc:	b530      	push	{r4, r5, lr}
    3dde:	b083      	sub	sp, #12
    3de0:	460d      	mov	r5, r1
	__asm__ volatile(
    3de2:	f04f 0120 	mov.w	r1, #32
    3de6:	f3ef 8c11 	mrs	ip, BASEPRI
    3dea:	f381 8812 	msr	BASEPRI_MAX, r1
    3dee:	f3bf 8f6f 	isb	sy
    3df2:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    3df4:	6944      	ldr	r4, [r0, #20]
    3df6:	b164      	cbz	r4, 3e12 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    3df8:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    3dfa:	6823      	ldr	r3, [r4, #0]
    3dfc:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3dfe:	6983      	ldr	r3, [r0, #24]
    3e00:	3301      	adds	r3, #1
    3e02:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    3e04:	2000      	movs	r0, #0
	__asm__ volatile(
    3e06:	f381 8811 	msr	BASEPRI, r1
    3e0a:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    3e0e:	b003      	add	sp, #12
    3e10:	bd30      	pop	{r4, r5, pc}
    3e12:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    3e16:	ea53 0402 	orrs.w	r4, r3, r2
    3e1a:	d104      	bne.n	3e26 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    3e1c:	2300      	movs	r3, #0
    3e1e:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    3e20:	f06f 000b 	mvn.w	r0, #11
    3e24:	e7ef      	b.n	3e06 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    3e26:	9200      	str	r2, [sp, #0]
    3e28:	9301      	str	r3, [sp, #4]
    3e2a:	4602      	mov	r2, r0
    3e2c:	4670      	mov	r0, lr
    3e2e:	f000 fbf1 	bl	4614 <z_pend_curr>
		if (result == 0) {
    3e32:	2800      	cmp	r0, #0
    3e34:	d1eb      	bne.n	3e0e <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    3e36:	4b02      	ldr	r3, [pc, #8]	; (3e40 <k_mem_slab_alloc+0x64>)
    3e38:	689b      	ldr	r3, [r3, #8]
    3e3a:	695b      	ldr	r3, [r3, #20]
    3e3c:	602b      	str	r3, [r5, #0]
		return result;
    3e3e:	e7e6      	b.n	3e0e <k_mem_slab_alloc+0x32>
    3e40:	2000095c 	.word	0x2000095c

00003e44 <z_thread_monitor_exit>:
	__asm__ volatile(
    3e44:	f04f 0320 	mov.w	r3, #32
    3e48:	f3ef 8111 	mrs	r1, BASEPRI
    3e4c:	f383 8812 	msr	BASEPRI_MAX, r3
    3e50:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    3e54:	4b0a      	ldr	r3, [pc, #40]	; (3e80 <z_thread_monitor_exit+0x3c>)
    3e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e58:	4283      	cmp	r3, r0
    3e5a:	d104      	bne.n	3e66 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    3e5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3e5e:	4b08      	ldr	r3, [pc, #32]	; (3e80 <z_thread_monitor_exit+0x3c>)
    3e60:	629a      	str	r2, [r3, #40]	; 0x28
    3e62:	e007      	b.n	3e74 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    3e64:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    3e66:	b113      	cbz	r3, 3e6e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3e68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    3e6a:	4282      	cmp	r2, r0
    3e6c:	d1fa      	bne.n	3e64 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    3e6e:	b10b      	cbz	r3, 3e74 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3e70:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3e72:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    3e74:	f381 8811 	msr	BASEPRI, r1
    3e78:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    3e7c:	4770      	bx	lr
    3e7e:	bf00      	nop
    3e80:	2000095c 	.word	0x2000095c

00003e84 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    3e84:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3e86:	ea53 0102 	orrs.w	r1, r3, r2
    3e8a:	d102      	bne.n	3e92 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    3e8c:	f002 fdfc 	bl	6a88 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3e90:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3e92:	4902      	ldr	r1, [pc, #8]	; (3e9c <schedule_new_thread+0x18>)
    3e94:	3018      	adds	r0, #24
    3e96:	f000 fe2b 	bl	4af0 <z_add_timeout>
    3e9a:	e7f9      	b.n	3e90 <schedule_new_thread+0xc>
    3e9c:	00006baf 	.word	0x00006baf

00003ea0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ea4:	b085      	sub	sp, #20
    3ea6:	4604      	mov	r4, r0
    3ea8:	460f      	mov	r7, r1
    3eaa:	4615      	mov	r5, r2
    3eac:	461e      	mov	r6, r3
    3eae:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3eb2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3eb6:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    3eba:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3ebe:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3ec2:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    3ec4:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    3ec6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3ec8:	2204      	movs	r2, #4
    3eca:	9911      	ldr	r1, [sp, #68]	; 0x44
    3ecc:	f002 fde0 	bl	6a90 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    3ed0:	462a      	mov	r2, r5
    3ed2:	4639      	mov	r1, r7
    3ed4:	4620      	mov	r0, r4
    3ed6:	f002 fdc3 	bl	6a60 <setup_thread_stack>
    3eda:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3edc:	f8cd 8008 	str.w	r8, [sp, #8]
    3ee0:	f8cd 9004 	str.w	r9, [sp, #4]
    3ee4:	f8cd a000 	str.w	sl, [sp]
    3ee8:	4633      	mov	r3, r6
    3eea:	4602      	mov	r2, r0
    3eec:	4639      	mov	r1, r7
    3eee:	4620      	mov	r0, r4
    3ef0:	f7fd fb2c 	bl	154c <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    3ef4:	2300      	movs	r3, #0
    3ef6:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    3ef8:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    3efa:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    3efe:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    3f02:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    3f06:	f04f 0320 	mov.w	r3, #32
    3f0a:	f3ef 8211 	mrs	r2, BASEPRI
    3f0e:	f383 8812 	msr	BASEPRI_MAX, r3
    3f12:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    3f16:	4b13      	ldr	r3, [pc, #76]	; (3f64 <z_setup_new_thread+0xc4>)
    3f18:	6a99      	ldr	r1, [r3, #40]	; 0x28
    3f1a:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    3f1c:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    3f1e:	f382 8811 	msr	BASEPRI, r2
    3f22:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    3f26:	f1bb 0f00 	cmp.w	fp, #0
    3f2a:	d013      	beq.n	3f54 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    3f2c:	221f      	movs	r2, #31
    3f2e:	4659      	mov	r1, fp
    3f30:	f104 0074 	add.w	r0, r4, #116	; 0x74
    3f34:	f001 fdd0 	bl	5ad8 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    3f38:	2300      	movs	r3, #0
    3f3a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    3f3e:	4b09      	ldr	r3, [pc, #36]	; (3f64 <z_setup_new_thread+0xc4>)
    3f40:	689b      	ldr	r3, [r3, #8]
    3f42:	b15b      	cbz	r3, 3f5c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3f44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    3f48:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    3f4c:	4628      	mov	r0, r5
    3f4e:	b005      	add	sp, #20
    3f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    3f54:	2300      	movs	r3, #0
    3f56:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    3f5a:	e7f0      	b.n	3f3e <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    3f5c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    3f60:	e7f4      	b.n	3f4c <z_setup_new_thread+0xac>
    3f62:	bf00      	nop
    3f64:	2000095c 	.word	0x2000095c

00003f68 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3f68:	b530      	push	{r4, r5, lr}
    3f6a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    3f6c:	4c21      	ldr	r4, [pc, #132]	; (3ff4 <z_init_static_threads+0x8c>)
    3f6e:	e014      	b.n	3f9a <z_init_static_threads+0x32>
		z_setup_new_thread(
    3f70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3f72:	9305      	str	r3, [sp, #20]
    3f74:	6a23      	ldr	r3, [r4, #32]
    3f76:	9304      	str	r3, [sp, #16]
    3f78:	69e3      	ldr	r3, [r4, #28]
    3f7a:	9303      	str	r3, [sp, #12]
    3f7c:	69a3      	ldr	r3, [r4, #24]
    3f7e:	9302      	str	r3, [sp, #8]
    3f80:	6963      	ldr	r3, [r4, #20]
    3f82:	9301      	str	r3, [sp, #4]
    3f84:	6923      	ldr	r3, [r4, #16]
    3f86:	9300      	str	r3, [sp, #0]
    3f88:	68e3      	ldr	r3, [r4, #12]
    3f8a:	68a2      	ldr	r2, [r4, #8]
    3f8c:	6861      	ldr	r1, [r4, #4]
    3f8e:	6820      	ldr	r0, [r4, #0]
    3f90:	f7ff ff86 	bl	3ea0 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    3f94:	6823      	ldr	r3, [r4, #0]
    3f96:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3f98:	3430      	adds	r4, #48	; 0x30
    3f9a:	4b17      	ldr	r3, [pc, #92]	; (3ff8 <z_init_static_threads+0x90>)
    3f9c:	429c      	cmp	r4, r3
    3f9e:	d3e7      	bcc.n	3f70 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3fa0:	f000 f9ea 	bl	4378 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3fa4:	4c13      	ldr	r4, [pc, #76]	; (3ff4 <z_init_static_threads+0x8c>)
    3fa6:	e000      	b.n	3faa <z_init_static_threads+0x42>
    3fa8:	3430      	adds	r4, #48	; 0x30
    3faa:	4b13      	ldr	r3, [pc, #76]	; (3ff8 <z_init_static_threads+0x90>)
    3fac:	429c      	cmp	r4, r3
    3fae:	d21c      	bcs.n	3fea <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3fb0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3fb2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3fb6:	d0f7      	beq.n	3fa8 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    3fb8:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    3fba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    3fbe:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3fc0:	03c9      	lsls	r1, r1, #15
    3fc2:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    3fc6:	03c0      	lsls	r0, r0, #15
    3fc8:	f240 33e7 	movw	r3, #999	; 0x3e7
    3fcc:	18c0      	adds	r0, r0, r3
    3fce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3fd2:	f04f 0300 	mov.w	r3, #0
    3fd6:	f141 0100 	adc.w	r1, r1, #0
    3fda:	f7fc f8bb 	bl	154 <__aeabi_uldivmod>
    3fde:	4602      	mov	r2, r0
    3fe0:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    3fe2:	4628      	mov	r0, r5
    3fe4:	f7ff ff4e 	bl	3e84 <schedule_new_thread>
    3fe8:	e7de      	b.n	3fa8 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    3fea:	f000 fbc7 	bl	477c <k_sched_unlock>
}
    3fee:	b007      	add	sp, #28
    3ff0:	bd30      	pop	{r4, r5, pc}
    3ff2:	bf00      	nop
    3ff4:	000070d4 	.word	0x000070d4
    3ff8:	000070d4 	.word	0x000070d4

00003ffc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3ffc:	b508      	push	{r3, lr}
    3ffe:	e001      	b.n	4004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
	arch_cpu_idle();
    4000:	f7fd f9ba 	bl	1378 <arch_cpu_idle>
	__asm__ volatile(
    4004:	f04f 0220 	mov.w	r2, #32
    4008:	f3ef 8311 	mrs	r3, BASEPRI
    400c:	f382 8812 	msr	BASEPRI_MAX, r2
    4010:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    4014:	f002 fea1 	bl	6d5a <z_get_next_timeout_expiry>
    4018:	4b05      	ldr	r3, [pc, #20]	; (4030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
    401a:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    401c:	4b05      	ldr	r3, [pc, #20]	; (4034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
    401e:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    4020:	2b00      	cmp	r3, #0
    4022:	d0ed      	beq.n	4000 <CONFIG_FPROTECT_BLOCK_SIZE>
    4024:	f7fc ffa4 	bl	f70 <pm_system_suspend>
    4028:	2800      	cmp	r0, #0
    402a:	d1eb      	bne.n	4004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>
    402c:	e7e8      	b.n	4000 <CONFIG_FPROTECT_BLOCK_SIZE>
    402e:	bf00      	nop
    4030:	2000095c 	.word	0x2000095c
    4034:	20000b73 	.word	0x20000b73

00004038 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    4038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    403c:	b082      	sub	sp, #8
    403e:	4604      	mov	r4, r0
    4040:	461e      	mov	r6, r3
    4042:	f04f 0320 	mov.w	r3, #32
    4046:	f3ef 8511 	mrs	r5, BASEPRI
    404a:	f383 8812 	msr	BASEPRI_MAX, r3
    404e:	f3bf 8f6f 	isb	sy
    4052:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4054:	68c1      	ldr	r1, [r0, #12]
    4056:	b999      	cbnz	r1, 4080 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    4058:	2900      	cmp	r1, #0
    405a:	d151      	bne.n	4100 <z_impl_k_mutex_lock+0xc8>
    405c:	4a36      	ldr	r2, [pc, #216]	; (4138 <z_impl_k_mutex_lock+0x100>)
    405e:	6892      	ldr	r2, [r2, #8]
    4060:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    4064:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    4066:	3101      	adds	r1, #1
    4068:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    406a:	4a33      	ldr	r2, [pc, #204]	; (4138 <z_impl_k_mutex_lock+0x100>)
    406c:	6892      	ldr	r2, [r2, #8]
    406e:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    4070:	f383 8811 	msr	BASEPRI, r3
    4074:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    4078:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    407a:	b002      	add	sp, #8
    407c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4080:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    4082:	6880      	ldr	r0, [r0, #8]
    4084:	4a2c      	ldr	r2, [pc, #176]	; (4138 <z_impl_k_mutex_lock+0x100>)
    4086:	6892      	ldr	r2, [r2, #8]
    4088:	4290      	cmp	r0, r2
    408a:	d0e5      	beq.n	4058 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    408c:	ea56 0107 	orrs.w	r1, r6, r7
    4090:	d038      	beq.n	4104 <z_impl_k_mutex_lock+0xcc>
					    mutex->owner->base.prio);
    4092:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    4096:	4641      	mov	r1, r8
    4098:	f992 000e 	ldrsb.w	r0, [r2, #14]
    409c:	f002 fd09 	bl	6ab2 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    40a0:	4580      	cmp	r8, r0
    40a2:	dc36      	bgt.n	4112 <z_impl_k_mutex_lock+0xda>
	bool resched = false;
    40a4:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    40a8:	9700      	str	r7, [sp, #0]
    40aa:	9601      	str	r6, [sp, #4]
    40ac:	4622      	mov	r2, r4
    40ae:	4629      	mov	r1, r5
    40b0:	4822      	ldr	r0, [pc, #136]	; (413c <z_impl_k_mutex_lock+0x104>)
    40b2:	f000 faaf 	bl	4614 <z_pend_curr>
	if (got_mutex == 0) {
    40b6:	2800      	cmp	r0, #0
    40b8:	d0df      	beq.n	407a <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    40ba:	f04f 0320 	mov.w	r3, #32
    40be:	f3ef 8511 	mrs	r5, BASEPRI
    40c2:	f383 8812 	msr	BASEPRI_MAX, r3
    40c6:	f3bf 8f6f 	isb	sy
    40ca:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    40cc:	68a3      	ldr	r3, [r4, #8]
    40ce:	b343      	cbz	r3, 4122 <z_impl_k_mutex_lock+0xea>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    40d0:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    40d2:	429c      	cmp	r4, r3
    40d4:	d023      	beq.n	411e <z_impl_k_mutex_lock+0xe6>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    40d6:	b313      	cbz	r3, 411e <z_impl_k_mutex_lock+0xe6>
    40d8:	6921      	ldr	r1, [r4, #16]
    40da:	f993 000e 	ldrsb.w	r0, [r3, #14]
    40de:	f002 fce8 	bl	6ab2 <new_prio_for_inheritance>
    40e2:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    40e4:	4620      	mov	r0, r4
    40e6:	f002 fcef 	bl	6ac8 <adjust_owner_prio>
    40ea:	b9e8      	cbnz	r0, 4128 <z_impl_k_mutex_lock+0xf0>
    40ec:	f1b8 0f00 	cmp.w	r8, #0
    40f0:	d11a      	bne.n	4128 <z_impl_k_mutex_lock+0xf0>
	__asm__ volatile(
    40f2:	f386 8811 	msr	BASEPRI, r6
    40f6:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    40fa:	f06f 000a 	mvn.w	r0, #10
    40fe:	e7bc      	b.n	407a <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    4100:	6922      	ldr	r2, [r4, #16]
    4102:	e7af      	b.n	4064 <z_impl_k_mutex_lock+0x2c>
    4104:	f385 8811 	msr	BASEPRI, r5
    4108:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    410c:	f06f 000f 	mvn.w	r0, #15
    4110:	e7b3      	b.n	407a <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    4112:	4601      	mov	r1, r0
    4114:	4620      	mov	r0, r4
    4116:	f002 fcd7 	bl	6ac8 <adjust_owner_prio>
    411a:	4680      	mov	r8, r0
    411c:	e7c4      	b.n	40a8 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    411e:	6921      	ldr	r1, [r4, #16]
    4120:	e7e0      	b.n	40e4 <z_impl_k_mutex_lock+0xac>
	if (resched) {
    4122:	f1b8 0f00 	cmp.w	r8, #0
    4126:	d0e4      	beq.n	40f2 <z_impl_k_mutex_lock+0xba>
		z_reschedule(&lock, key);
    4128:	4629      	mov	r1, r5
    412a:	4804      	ldr	r0, [pc, #16]	; (413c <z_impl_k_mutex_lock+0x104>)
    412c:	f000 f90e 	bl	434c <z_reschedule>
	return -EAGAIN;
    4130:	f06f 000a 	mvn.w	r0, #10
    4134:	e7a1      	b.n	407a <z_impl_k_mutex_lock+0x42>
    4136:	bf00      	nop
    4138:	2000095c 	.word	0x2000095c
    413c:	20000988 	.word	0x20000988

00004140 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    4140:	6883      	ldr	r3, [r0, #8]
    4142:	b38b      	cbz	r3, 41a8 <z_impl_k_mutex_unlock+0x68>
{
    4144:	b570      	push	{r4, r5, r6, lr}
    4146:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    4148:	4a1a      	ldr	r2, [pc, #104]	; (41b4 <z_impl_k_mutex_unlock+0x74>)
    414a:	6892      	ldr	r2, [r2, #8]
    414c:	4293      	cmp	r3, r2
    414e:	d12e      	bne.n	41ae <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    4150:	68c3      	ldr	r3, [r0, #12]
    4152:	2b01      	cmp	r3, #1
    4154:	d903      	bls.n	415e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    4156:	3b01      	subs	r3, #1
    4158:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    415a:	2000      	movs	r0, #0
}
    415c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    415e:	f04f 0320 	mov.w	r3, #32
    4162:	f3ef 8511 	mrs	r5, BASEPRI
    4166:	f383 8812 	msr	BASEPRI_MAX, r3
    416a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    416e:	6901      	ldr	r1, [r0, #16]
    4170:	f002 fcaa 	bl	6ac8 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    4174:	4620      	mov	r0, r4
    4176:	f002 fd95 	bl	6ca4 <z_unpend_first_thread>
	mutex->owner = new_owner;
    417a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    417c:	b168      	cbz	r0, 419a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    417e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    4182:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    4184:	2400      	movs	r4, #0
    4186:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    418a:	f002 fcf4 	bl	6b76 <z_ready_thread>
		z_reschedule(&lock, key);
    418e:	4629      	mov	r1, r5
    4190:	4809      	ldr	r0, [pc, #36]	; (41b8 <z_impl_k_mutex_unlock+0x78>)
    4192:	f000 f8db 	bl	434c <z_reschedule>
	return 0;
    4196:	4620      	mov	r0, r4
    4198:	e7e0      	b.n	415c <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    419a:	2000      	movs	r0, #0
    419c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    419e:	f385 8811 	msr	BASEPRI, r5
    41a2:	f3bf 8f6f 	isb	sy
    41a6:	e7d9      	b.n	415c <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    41a8:	f06f 0015 	mvn.w	r0, #21
}
    41ac:	4770      	bx	lr
		return -EPERM;
    41ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    41b2:	e7d3      	b.n	415c <z_impl_k_mutex_unlock+0x1c>
    41b4:	2000095c 	.word	0x2000095c
    41b8:	20000988 	.word	0x20000988

000041bc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    41bc:	b538      	push	{r3, r4, r5, lr}
    41be:	4604      	mov	r4, r0
	__asm__ volatile(
    41c0:	f04f 0320 	mov.w	r3, #32
    41c4:	f3ef 8511 	mrs	r5, BASEPRI
    41c8:	f383 8812 	msr	BASEPRI_MAX, r3
    41cc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    41d0:	f002 fd68 	bl	6ca4 <z_unpend_first_thread>

	if (thread != NULL) {
    41d4:	b148      	cbz	r0, 41ea <z_impl_k_sem_give+0x2e>
    41d6:	2200      	movs	r2, #0
    41d8:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    41dc:	f002 fccb 	bl	6b76 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    41e0:	4629      	mov	r1, r5
    41e2:	4807      	ldr	r0, [pc, #28]	; (4200 <z_impl_k_sem_give+0x44>)
    41e4:	f000 f8b2 	bl	434c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    41e8:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    41ea:	68a3      	ldr	r3, [r4, #8]
    41ec:	68e2      	ldr	r2, [r4, #12]
    41ee:	4293      	cmp	r3, r2
    41f0:	d003      	beq.n	41fa <z_impl_k_sem_give+0x3e>
    41f2:	2201      	movs	r2, #1
    41f4:	4413      	add	r3, r2
    41f6:	60a3      	str	r3, [r4, #8]
}
    41f8:	e7f2      	b.n	41e0 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    41fa:	2200      	movs	r2, #0
    41fc:	e7fa      	b.n	41f4 <z_impl_k_sem_give+0x38>
    41fe:	bf00      	nop
    4200:	20000988 	.word	0x20000988

00004204 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4204:	b510      	push	{r4, lr}
    4206:	b082      	sub	sp, #8
    4208:	f04f 0420 	mov.w	r4, #32
    420c:	f3ef 8111 	mrs	r1, BASEPRI
    4210:	f384 8812 	msr	BASEPRI_MAX, r4
    4214:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    4218:	6884      	ldr	r4, [r0, #8]
    421a:	b144      	cbz	r4, 422e <z_impl_k_sem_take+0x2a>
		sem->count--;
    421c:	3c01      	subs	r4, #1
    421e:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    4220:	f381 8811 	msr	BASEPRI, r1
    4224:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    4228:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    422a:	b002      	add	sp, #8
    422c:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    422e:	ea53 0402 	orrs.w	r4, r3, r2
    4232:	d006      	beq.n	4242 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4234:	9200      	str	r2, [sp, #0]
    4236:	9301      	str	r3, [sp, #4]
    4238:	4602      	mov	r2, r0
    423a:	4805      	ldr	r0, [pc, #20]	; (4250 <z_impl_k_sem_take+0x4c>)
    423c:	f000 f9ea 	bl	4614 <z_pend_curr>
	return ret;
    4240:	e7f3      	b.n	422a <z_impl_k_sem_take+0x26>
    4242:	f381 8811 	msr	BASEPRI, r1
    4246:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    424a:	f06f 000f 	mvn.w	r0, #15
    424e:	e7ec      	b.n	422a <z_impl_k_sem_take+0x26>
    4250:	20000988 	.word	0x20000988

00004254 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    4254:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
    4256:	2b7f      	cmp	r3, #127	; 0x7f
    4258:	d80e      	bhi.n	4278 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
    425a:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    425c:	f013 0f1f 	tst.w	r3, #31
    4260:	d10c      	bne.n	427c <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    4262:	f990 200e 	ldrsb.w	r2, [r0, #14]
    4266:	4b08      	ldr	r3, [pc, #32]	; (4288 <sliceable+0x34>)
    4268:	681b      	ldr	r3, [r3, #0]
    426a:	429a      	cmp	r2, r3
    426c:	db08      	blt.n	4280 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    426e:	4b07      	ldr	r3, [pc, #28]	; (428c <sliceable+0x38>)
    4270:	4298      	cmp	r0, r3
    4272:	d007      	beq.n	4284 <sliceable+0x30>
    4274:	2001      	movs	r0, #1
    4276:	4770      	bx	lr
    4278:	2000      	movs	r0, #0
    427a:	4770      	bx	lr
    427c:	2000      	movs	r0, #0
    427e:	4770      	bx	lr
    4280:	2000      	movs	r0, #0
    4282:	4770      	bx	lr
    4284:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    4286:	4770      	bx	lr
    4288:	2000098c 	.word	0x2000098c
    428c:	200001b0 	.word	0x200001b0

00004290 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4294:	bf08      	it	eq
    4296:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    429a:	d100      	bne.n	429e <add_thread_timeout+0xe>
    429c:	4770      	bx	lr
{
    429e:	b508      	push	{r3, lr}
    42a0:	4902      	ldr	r1, [pc, #8]	; (42ac <add_thread_timeout+0x1c>)
    42a2:	3018      	adds	r0, #24
    42a4:	f000 fc24 	bl	4af0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    42a8:	bd08      	pop	{r3, pc}
    42aa:	bf00      	nop
    42ac:	00006baf 	.word	0x00006baf

000042b0 <z_reset_time_slice>:
{
    42b0:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    42b2:	4b07      	ldr	r3, [pc, #28]	; (42d0 <z_reset_time_slice+0x20>)
    42b4:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    42b6:	b904      	cbnz	r4, 42ba <z_reset_time_slice+0xa>
}
    42b8:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    42ba:	f7fe fc6f 	bl	2b9c <sys_clock_elapsed>
    42be:	4404      	add	r4, r0
    42c0:	4b04      	ldr	r3, [pc, #16]	; (42d4 <z_reset_time_slice+0x24>)
    42c2:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    42c4:	2100      	movs	r1, #0
    42c6:	4b02      	ldr	r3, [pc, #8]	; (42d0 <z_reset_time_slice+0x20>)
    42c8:	6818      	ldr	r0, [r3, #0]
    42ca:	f002 fd5d 	bl	6d88 <z_set_timeout_expiry>
}
    42ce:	e7f3      	b.n	42b8 <z_reset_time_slice+0x8>
    42d0:	20000990 	.word	0x20000990
    42d4:	2000095c 	.word	0x2000095c

000042d8 <k_sched_time_slice_set>:
{
    42d8:	b570      	push	{r4, r5, r6, lr}
    42da:	4604      	mov	r4, r0
    42dc:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    42de:	2300      	movs	r3, #0
	__asm__ volatile(
    42e0:	f04f 0220 	mov.w	r2, #32
    42e4:	f3ef 8511 	mrs	r5, BASEPRI
    42e8:	f382 8812 	msr	BASEPRI_MAX, r2
    42ec:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    42f0:	e00e      	b.n	4310 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    42f2:	2802      	cmp	r0, #2
    42f4:	bfb8      	it	lt
    42f6:	2002      	movlt	r0, #2
    42f8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    42fa:	4b11      	ldr	r3, [pc, #68]	; (4340 <k_sched_time_slice_set+0x68>)
    42fc:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
    42fe:	4b11      	ldr	r3, [pc, #68]	; (4344 <k_sched_time_slice_set+0x6c>)
    4300:	6898      	ldr	r0, [r3, #8]
    4302:	f7ff ffd5 	bl	42b0 <z_reset_time_slice>
	__asm__ volatile(
    4306:	f385 8811 	msr	BASEPRI, r5
    430a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    430e:	2301      	movs	r3, #1
    4310:	b9a3      	cbnz	r3, 433c <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    4312:	4b0c      	ldr	r3, [pc, #48]	; (4344 <k_sched_time_slice_set+0x6c>)
    4314:	2200      	movs	r2, #0
    4316:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    4318:	0c61      	lsrs	r1, r4, #17
    431a:	03e0      	lsls	r0, r4, #15
    431c:	f240 33e7 	movw	r3, #999	; 0x3e7
    4320:	18c0      	adds	r0, r0, r3
    4322:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4326:	f04f 0300 	mov.w	r3, #0
    432a:	f141 0100 	adc.w	r1, r1, #0
    432e:	f7fb ff11 	bl	154 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    4332:	4b05      	ldr	r3, [pc, #20]	; (4348 <k_sched_time_slice_set+0x70>)
    4334:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    4336:	2c00      	cmp	r4, #0
    4338:	dcdb      	bgt.n	42f2 <k_sched_time_slice_set+0x1a>
    433a:	e7de      	b.n	42fa <k_sched_time_slice_set+0x22>
}
    433c:	bd70      	pop	{r4, r5, r6, pc}
    433e:	bf00      	nop
    4340:	2000098c 	.word	0x2000098c
    4344:	2000095c 	.word	0x2000095c
    4348:	20000990 	.word	0x20000990

0000434c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    434c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    434e:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4350:	b959      	cbnz	r1, 436a <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4352:	f3ef 8205 	mrs	r2, IPSR
    4356:	b942      	cbnz	r2, 436a <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    4358:	4a06      	ldr	r2, [pc, #24]	; (4374 <z_reschedule+0x28>)
    435a:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
    435c:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    435e:	4290      	cmp	r0, r2
    4360:	d003      	beq.n	436a <z_reschedule+0x1e>
	ret = arch_swap(key);
    4362:	4608      	mov	r0, r1
    4364:	f7fd f898 	bl	1498 <arch_swap>
		z_swap(lock, key);
    4368:	e003      	b.n	4372 <z_reschedule+0x26>
    436a:	f383 8811 	msr	BASEPRI, r3
    436e:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    4372:	bd08      	pop	{r3, pc}
    4374:	2000095c 	.word	0x2000095c

00004378 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    4378:	2300      	movs	r3, #0
	__asm__ volatile(
    437a:	f04f 0220 	mov.w	r2, #32
    437e:	f3ef 8111 	mrs	r1, BASEPRI
    4382:	f382 8812 	msr	BASEPRI_MAX, r2
    4386:	f3bf 8f6f 	isb	sy
    438a:	e009      	b.n	43a0 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    438c:	4b06      	ldr	r3, [pc, #24]	; (43a8 <k_sched_lock+0x30>)
    438e:	689a      	ldr	r2, [r3, #8]
    4390:	7bd3      	ldrb	r3, [r2, #15]
    4392:	3b01      	subs	r3, #1
    4394:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    4396:	f381 8811 	msr	BASEPRI, r1
    439a:	f3bf 8f6f 	isb	sy
    439e:	2301      	movs	r3, #1
    43a0:	2b00      	cmp	r3, #0
    43a2:	d0f3      	beq.n	438c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    43a4:	4770      	bx	lr
    43a6:	bf00      	nop
    43a8:	2000095c 	.word	0x2000095c

000043ac <update_cache>:
{
    43ac:	b538      	push	{r3, r4, r5, lr}
    43ae:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    43b0:	4810      	ldr	r0, [pc, #64]	; (43f4 <update_cache+0x48>)
    43b2:	f002 fbd9 	bl	6b68 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    43b6:	4605      	mov	r5, r0
    43b8:	b170      	cbz	r0, 43d8 <update_cache+0x2c>
	if (preempt_ok != 0) {
    43ba:	b984      	cbnz	r4, 43de <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    43bc:	4b0e      	ldr	r3, [pc, #56]	; (43f8 <update_cache+0x4c>)
    43be:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    43c0:	7b5a      	ldrb	r2, [r3, #13]
    43c2:	f012 0f1f 	tst.w	r2, #31
    43c6:	d10a      	bne.n	43de <update_cache+0x32>
	return node->next != NULL;
    43c8:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    43ca:	b942      	cbnz	r2, 43de <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    43cc:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    43ce:	2a7f      	cmp	r2, #127	; 0x7f
    43d0:	d905      	bls.n	43de <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    43d2:	4a09      	ldr	r2, [pc, #36]	; (43f8 <update_cache+0x4c>)
    43d4:	61d3      	str	r3, [r2, #28]
    43d6:	e00b      	b.n	43f0 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    43d8:	4b07      	ldr	r3, [pc, #28]	; (43f8 <update_cache+0x4c>)
    43da:	68dd      	ldr	r5, [r3, #12]
    43dc:	e7ed      	b.n	43ba <update_cache+0xe>
		if (thread != _current) {
    43de:	4b06      	ldr	r3, [pc, #24]	; (43f8 <update_cache+0x4c>)
    43e0:	689b      	ldr	r3, [r3, #8]
    43e2:	42ab      	cmp	r3, r5
    43e4:	d002      	beq.n	43ec <update_cache+0x40>
			z_reset_time_slice(thread);
    43e6:	4628      	mov	r0, r5
    43e8:	f7ff ff62 	bl	42b0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    43ec:	4b02      	ldr	r3, [pc, #8]	; (43f8 <update_cache+0x4c>)
    43ee:	61dd      	str	r5, [r3, #28]
}
    43f0:	bd38      	pop	{r3, r4, r5, pc}
    43f2:	bf00      	nop
    43f4:	2000097c 	.word	0x2000097c
    43f8:	2000095c 	.word	0x2000095c

000043fc <move_thread_to_end_of_prio_q>:
{
    43fc:	b538      	push	{r3, r4, r5, lr}
    43fe:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    4400:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    4402:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4406:	2b00      	cmp	r3, #0
    4408:	db0a      	blt.n	4420 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    440a:	7b6b      	ldrb	r3, [r5, #13]
    440c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4410:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    4412:	4b1b      	ldr	r3, [pc, #108]	; (4480 <move_thread_to_end_of_prio_q+0x84>)
    4414:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4418:	429c      	cmp	r4, r3
    441a:	d110      	bne.n	443e <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    441c:	2400      	movs	r4, #0
    441e:	e00e      	b.n	443e <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4420:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4424:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4426:	4601      	mov	r1, r0
    4428:	4816      	ldr	r0, [pc, #88]	; (4484 <move_thread_to_end_of_prio_q+0x88>)
    442a:	f002 fb87 	bl	6b3c <z_priq_dumb_remove>
}
    442e:	e7ec      	b.n	440a <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    4430:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    4432:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4434:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4436:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4438:	6065      	str	r5, [r4, #4]
}
    443a:	e017      	b.n	446c <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    443c:	2400      	movs	r4, #0
    443e:	b16c      	cbz	r4, 445c <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4440:	4621      	mov	r1, r4
    4442:	4628      	mov	r0, r5
    4444:	f002 fb56 	bl	6af4 <z_sched_prio_cmp>
    4448:	2800      	cmp	r0, #0
    444a:	dcf1      	bgt.n	4430 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    444c:	2c00      	cmp	r4, #0
    444e:	d0f6      	beq.n	443e <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    4450:	4b0b      	ldr	r3, [pc, #44]	; (4480 <move_thread_to_end_of_prio_q+0x84>)
    4452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4454:	429c      	cmp	r4, r3
    4456:	d0f1      	beq.n	443c <move_thread_to_end_of_prio_q+0x40>
    4458:	6824      	ldr	r4, [r4, #0]
    445a:	e7f0      	b.n	443e <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    445c:	4b08      	ldr	r3, [pc, #32]	; (4480 <move_thread_to_end_of_prio_q+0x84>)
    445e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4460:	f103 0120 	add.w	r1, r3, #32
    4464:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4466:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4468:	6015      	str	r5, [r2, #0]
	list->tail = node;
    446a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    446c:	4b04      	ldr	r3, [pc, #16]	; (4480 <move_thread_to_end_of_prio_q+0x84>)
    446e:	6898      	ldr	r0, [r3, #8]
    4470:	42a8      	cmp	r0, r5
    4472:	bf14      	ite	ne
    4474:	2000      	movne	r0, #0
    4476:	2001      	moveq	r0, #1
    4478:	f7ff ff98 	bl	43ac <update_cache>
}
    447c:	bd38      	pop	{r3, r4, r5, pc}
    447e:	bf00      	nop
    4480:	2000095c 	.word	0x2000095c
    4484:	2000097c 	.word	0x2000097c

00004488 <slice_expired_locked>:
{
    4488:	b538      	push	{r3, r4, r5, lr}
    448a:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    448c:	4b07      	ldr	r3, [pc, #28]	; (44ac <slice_expired_locked+0x24>)
    448e:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    4490:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    4492:	f013 0f1f 	tst.w	r3, #31
    4496:	d004      	beq.n	44a2 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    4498:	4628      	mov	r0, r5
    449a:	f7ff ff09 	bl	42b0 <z_reset_time_slice>
}
    449e:	4620      	mov	r0, r4
    44a0:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    44a2:	4628      	mov	r0, r5
    44a4:	f7ff ffaa 	bl	43fc <move_thread_to_end_of_prio_q>
    44a8:	e7f6      	b.n	4498 <slice_expired_locked+0x10>
    44aa:	bf00      	nop
    44ac:	2000095c 	.word	0x2000095c

000044b0 <z_time_slice>:
{
    44b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44b2:	4605      	mov	r5, r0
	__asm__ volatile(
    44b4:	f04f 0320 	mov.w	r3, #32
    44b8:	f3ef 8611 	mrs	r6, BASEPRI
    44bc:	f383 8812 	msr	BASEPRI_MAX, r3
    44c0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    44c4:	4b15      	ldr	r3, [pc, #84]	; (451c <z_time_slice+0x6c>)
    44c6:	6898      	ldr	r0, [r3, #8]
    44c8:	4b15      	ldr	r3, [pc, #84]	; (4520 <z_time_slice+0x70>)
    44ca:	681b      	ldr	r3, [r3, #0]
    44cc:	4298      	cmp	r0, r3
    44ce:	d011      	beq.n	44f4 <z_time_slice+0x44>
    44d0:	4634      	mov	r4, r6
	pending_current = NULL;
    44d2:	4b13      	ldr	r3, [pc, #76]	; (4520 <z_time_slice+0x70>)
    44d4:	2200      	movs	r2, #0
    44d6:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
    44d8:	4b12      	ldr	r3, [pc, #72]	; (4524 <z_time_slice+0x74>)
    44da:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
    44dc:	b1b3      	cbz	r3, 450c <z_time_slice+0x5c>
    44de:	f7ff feb9 	bl	4254 <sliceable>
    44e2:	b198      	cbz	r0, 450c <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
    44e4:	4b0d      	ldr	r3, [pc, #52]	; (451c <z_time_slice+0x6c>)
    44e6:	691b      	ldr	r3, [r3, #16]
    44e8:	42ab      	cmp	r3, r5
    44ea:	dd0a      	ble.n	4502 <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
    44ec:	1b5b      	subs	r3, r3, r5
    44ee:	4a0b      	ldr	r2, [pc, #44]	; (451c <z_time_slice+0x6c>)
    44f0:	6113      	str	r3, [r2, #16]
    44f2:	e00e      	b.n	4512 <z_time_slice+0x62>
		z_reset_time_slice(_current);
    44f4:	f7ff fedc 	bl	42b0 <z_reset_time_slice>
	__asm__ volatile(
    44f8:	f386 8811 	msr	BASEPRI, r6
    44fc:	f3bf 8f6f 	isb	sy
		return;
    4500:	e00b      	b.n	451a <z_time_slice+0x6a>
			key = slice_expired_locked(key);
    4502:	4630      	mov	r0, r6
    4504:	f7ff ffc0 	bl	4488 <slice_expired_locked>
    4508:	4604      	mov	r4, r0
    450a:	e002      	b.n	4512 <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
    450c:	4b03      	ldr	r3, [pc, #12]	; (451c <z_time_slice+0x6c>)
    450e:	2200      	movs	r2, #0
    4510:	611a      	str	r2, [r3, #16]
    4512:	f384 8811 	msr	BASEPRI, r4
    4516:	f3bf 8f6f 	isb	sy
}
    451a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    451c:	2000095c 	.word	0x2000095c
    4520:	20000988 	.word	0x20000988
    4524:	20000990 	.word	0x20000990

00004528 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    4528:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    452a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    452e:	2b00      	cmp	r3, #0
    4530:	db33      	blt.n	459a <ready_thread+0x72>
{
    4532:	b570      	push	{r4, r5, r6, lr}
    4534:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4536:	f012 0f1f 	tst.w	r2, #31
    453a:	d101      	bne.n	4540 <ready_thread+0x18>
	return node->next != NULL;
    453c:	6986      	ldr	r6, [r0, #24]
    453e:	b106      	cbz	r6, 4542 <ready_thread+0x1a>
}
    4540:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    4542:	f062 027f 	orn	r2, r2, #127	; 0x7f
    4546:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    4548:	4b14      	ldr	r3, [pc, #80]	; (459c <ready_thread+0x74>)
    454a:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    454e:	429d      	cmp	r5, r3
    4550:	d108      	bne.n	4564 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4552:	4635      	mov	r5, r6
    4554:	e006      	b.n	4564 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    4556:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    4558:	6063      	str	r3, [r4, #4]
	node->next = successor;
    455a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    455c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    455e:	606c      	str	r4, [r5, #4]
}
    4560:	e017      	b.n	4592 <ready_thread+0x6a>
    4562:	4635      	mov	r5, r6
    4564:	b16d      	cbz	r5, 4582 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4566:	4629      	mov	r1, r5
    4568:	4620      	mov	r0, r4
    456a:	f002 fac3 	bl	6af4 <z_sched_prio_cmp>
    456e:	2800      	cmp	r0, #0
    4570:	dcf1      	bgt.n	4556 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4572:	2d00      	cmp	r5, #0
    4574:	d0f6      	beq.n	4564 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    4576:	4b09      	ldr	r3, [pc, #36]	; (459c <ready_thread+0x74>)
    4578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    457a:	429d      	cmp	r5, r3
    457c:	d0f1      	beq.n	4562 <ready_thread+0x3a>
    457e:	682d      	ldr	r5, [r5, #0]
    4580:	e7f0      	b.n	4564 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    4582:	4b06      	ldr	r3, [pc, #24]	; (459c <ready_thread+0x74>)
    4584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4586:	f103 0120 	add.w	r1, r3, #32
    458a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    458c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    458e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4590:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    4592:	2000      	movs	r0, #0
    4594:	f7ff ff0a 	bl	43ac <update_cache>
}
    4598:	e7d2      	b.n	4540 <ready_thread+0x18>
    459a:	4770      	bx	lr
    459c:	2000095c 	.word	0x2000095c

000045a0 <z_sched_start>:
{
    45a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    45a2:	f04f 0320 	mov.w	r3, #32
    45a6:	f3ef 8411 	mrs	r4, BASEPRI
    45aa:	f383 8812 	msr	BASEPRI_MAX, r3
    45ae:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    45b2:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    45b4:	f013 0f04 	tst.w	r3, #4
    45b8:	d104      	bne.n	45c4 <z_sched_start+0x24>
	__asm__ volatile(
    45ba:	f384 8811 	msr	BASEPRI, r4
    45be:	f3bf 8f6f 	isb	sy
}
    45c2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    45c4:	f023 0304 	bic.w	r3, r3, #4
    45c8:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    45ca:	f7ff ffad 	bl	4528 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    45ce:	4621      	mov	r1, r4
    45d0:	4801      	ldr	r0, [pc, #4]	; (45d8 <z_sched_start+0x38>)
    45d2:	f7ff febb 	bl	434c <z_reschedule>
    45d6:	e7f4      	b.n	45c2 <z_sched_start+0x22>
    45d8:	20000994 	.word	0x20000994

000045dc <unready_thread>:
{
    45dc:	b510      	push	{r4, lr}
    45de:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    45e0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    45e2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    45e6:	2b00      	cmp	r3, #0
    45e8:	db08      	blt.n	45fc <unready_thread+0x20>
	update_cache(thread == _current);
    45ea:	4b08      	ldr	r3, [pc, #32]	; (460c <unready_thread+0x30>)
    45ec:	6898      	ldr	r0, [r3, #8]
    45ee:	42a0      	cmp	r0, r4
    45f0:	bf14      	ite	ne
    45f2:	2000      	movne	r0, #0
    45f4:	2001      	moveq	r0, #1
    45f6:	f7ff fed9 	bl	43ac <update_cache>
}
    45fa:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    45fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4600:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4602:	4601      	mov	r1, r0
    4604:	4802      	ldr	r0, [pc, #8]	; (4610 <unready_thread+0x34>)
    4606:	f002 fa99 	bl	6b3c <z_priq_dumb_remove>
}
    460a:	e7ee      	b.n	45ea <unready_thread+0xe>
    460c:	2000095c 	.word	0x2000095c
    4610:	2000097c 	.word	0x2000097c

00004614 <z_pend_curr>:
{
    4614:	b510      	push	{r4, lr}
    4616:	460c      	mov	r4, r1
    4618:	4611      	mov	r1, r2
	pending_current = _current;
    461a:	480a      	ldr	r0, [pc, #40]	; (4644 <z_pend_curr+0x30>)
    461c:	6882      	ldr	r2, [r0, #8]
    461e:	4b0a      	ldr	r3, [pc, #40]	; (4648 <z_pend_curr+0x34>)
    4620:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    4622:	f04f 0220 	mov.w	r2, #32
    4626:	f3ef 8311 	mrs	r3, BASEPRI
    462a:	f382 8812 	msr	BASEPRI_MAX, r2
    462e:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    4632:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4636:	6880      	ldr	r0, [r0, #8]
    4638:	f002 fb28 	bl	6c8c <pend_locked>
    463c:	4620      	mov	r0, r4
    463e:	f7fc ff2b 	bl	1498 <arch_swap>
}
    4642:	bd10      	pop	{r4, pc}
    4644:	2000095c 	.word	0x2000095c
    4648:	20000988 	.word	0x20000988

0000464c <z_set_prio>:
{
    464c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4650:	4605      	mov	r5, r0
    4652:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    4654:	2300      	movs	r3, #0
    4656:	f04f 0220 	mov.w	r2, #32
    465a:	f3ef 8611 	mrs	r6, BASEPRI
    465e:	f382 8812 	msr	BASEPRI_MAX, r2
    4662:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    4666:	4618      	mov	r0, r3
    4668:	e029      	b.n	46be <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    466a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    466c:	606b      	str	r3, [r5, #4]
	node->next = successor;
    466e:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4670:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4672:	6065      	str	r5, [r4, #4]
}
    4674:	e017      	b.n	46a6 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4676:	4644      	mov	r4, r8
    4678:	b16c      	cbz	r4, 4696 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    467a:	4621      	mov	r1, r4
    467c:	4628      	mov	r0, r5
    467e:	f002 fa39 	bl	6af4 <z_sched_prio_cmp>
    4682:	2800      	cmp	r0, #0
    4684:	dcf1      	bgt.n	466a <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4686:	2c00      	cmp	r4, #0
    4688:	d0f6      	beq.n	4678 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    468a:	4b1d      	ldr	r3, [pc, #116]	; (4700 <z_set_prio+0xb4>)
    468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    468e:	429c      	cmp	r4, r3
    4690:	d0f1      	beq.n	4676 <z_set_prio+0x2a>
    4692:	6824      	ldr	r4, [r4, #0]
    4694:	e7f0      	b.n	4678 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    4696:	4b1a      	ldr	r3, [pc, #104]	; (4700 <z_set_prio+0xb4>)
    4698:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    469a:	f103 0120 	add.w	r1, r3, #32
    469e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    46a0:	606a      	str	r2, [r5, #4]
	tail->next = node;
    46a2:	6015      	str	r5, [r2, #0]
	list->tail = node;
    46a4:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
    46a6:	2001      	movs	r0, #1
    46a8:	f7ff fe80 	bl	43ac <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    46ac:	2001      	movs	r0, #1
    46ae:	e001      	b.n	46b4 <z_set_prio+0x68>
			thread->base.prio = prio;
    46b0:	73af      	strb	r7, [r5, #14]
    46b2:	2000      	movs	r0, #0
	__asm__ volatile(
    46b4:	f386 8811 	msr	BASEPRI, r6
    46b8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    46bc:	2301      	movs	r3, #1
    46be:	b9e3      	cbnz	r3, 46fa <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    46c0:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    46c2:	f013 0f1f 	tst.w	r3, #31
    46c6:	d1f3      	bne.n	46b0 <z_set_prio+0x64>
	return node->next != NULL;
    46c8:	f8d5 8018 	ldr.w	r8, [r5, #24]
    46cc:	f1b8 0f00 	cmp.w	r8, #0
    46d0:	d1ee      	bne.n	46b0 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    46d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    46d6:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    46d8:	f8df 9028 	ldr.w	r9, [pc, #40]	; 4704 <z_set_prio+0xb8>
    46dc:	4629      	mov	r1, r5
    46de:	4648      	mov	r0, r9
    46e0:	f002 fa2c 	bl	6b3c <z_priq_dumb_remove>
				thread->base.prio = prio;
    46e4:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    46e6:	7b6b      	ldrb	r3, [r5, #13]
    46e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    46ec:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    46ee:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    46f2:	454c      	cmp	r4, r9
    46f4:	d1c0      	bne.n	4678 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    46f6:	4644      	mov	r4, r8
    46f8:	e7be      	b.n	4678 <z_set_prio+0x2c>
}
    46fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    46fe:	bf00      	nop
    4700:	2000095c 	.word	0x2000095c
    4704:	2000097c 	.word	0x2000097c

00004708 <z_impl_k_thread_suspend>:
{
    4708:	b538      	push	{r3, r4, r5, lr}
    470a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    470c:	3018      	adds	r0, #24
    470e:	f002 fb06 	bl	6d1e <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    4712:	2300      	movs	r3, #0
	__asm__ volatile(
    4714:	f04f 0220 	mov.w	r2, #32
    4718:	f3ef 8511 	mrs	r5, BASEPRI
    471c:	f382 8812 	msr	BASEPRI_MAX, r2
    4720:	f3bf 8f6f 	isb	sy
    4724:	e010      	b.n	4748 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4726:	7b63      	ldrb	r3, [r4, #13]
    4728:	f043 0310 	orr.w	r3, r3, #16
    472c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    472e:	4b11      	ldr	r3, [pc, #68]	; (4774 <z_impl_k_thread_suspend+0x6c>)
    4730:	6898      	ldr	r0, [r3, #8]
    4732:	42a0      	cmp	r0, r4
    4734:	bf14      	ite	ne
    4736:	2000      	movne	r0, #0
    4738:	2001      	moveq	r0, #1
    473a:	f7ff fe37 	bl	43ac <update_cache>
	__asm__ volatile(
    473e:	f385 8811 	msr	BASEPRI, r5
    4742:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    4746:	2301      	movs	r3, #1
    4748:	b963      	cbnz	r3, 4764 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    474a:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    474c:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4750:	2b00      	cmp	r3, #0
    4752:	dae8      	bge.n	4726 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4754:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4758:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    475a:	4621      	mov	r1, r4
    475c:	4806      	ldr	r0, [pc, #24]	; (4778 <z_impl_k_thread_suspend+0x70>)
    475e:	f002 f9ed 	bl	6b3c <z_priq_dumb_remove>
}
    4762:	e7e0      	b.n	4726 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    4764:	4b03      	ldr	r3, [pc, #12]	; (4774 <z_impl_k_thread_suspend+0x6c>)
    4766:	689b      	ldr	r3, [r3, #8]
    4768:	42a3      	cmp	r3, r4
    476a:	d000      	beq.n	476e <z_impl_k_thread_suspend+0x66>
}
    476c:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    476e:	f002 f9d9 	bl	6b24 <z_reschedule_unlocked>
}
    4772:	e7fb      	b.n	476c <z_impl_k_thread_suspend+0x64>
    4774:	2000095c 	.word	0x2000095c
    4778:	2000097c 	.word	0x2000097c

0000477c <k_sched_unlock>:

void k_sched_unlock(void)
{
    477c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    477e:	2300      	movs	r3, #0
	__asm__ volatile(
    4780:	f04f 0220 	mov.w	r2, #32
    4784:	f3ef 8411 	mrs	r4, BASEPRI
    4788:	f382 8812 	msr	BASEPRI_MAX, r2
    478c:	f3bf 8f6f 	isb	sy
    4790:	e00c      	b.n	47ac <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    4792:	4b09      	ldr	r3, [pc, #36]	; (47b8 <k_sched_unlock+0x3c>)
    4794:	689a      	ldr	r2, [r3, #8]
    4796:	7bd3      	ldrb	r3, [r2, #15]
    4798:	3301      	adds	r3, #1
    479a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    479c:	2000      	movs	r0, #0
    479e:	f7ff fe05 	bl	43ac <update_cache>
	__asm__ volatile(
    47a2:	f384 8811 	msr	BASEPRI, r4
    47a6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    47aa:	2301      	movs	r3, #1
    47ac:	2b00      	cmp	r3, #0
    47ae:	d0f0      	beq.n	4792 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    47b0:	f002 f9b8 	bl	6b24 <z_reschedule_unlocked>
}
    47b4:	bd10      	pop	{r4, pc}
    47b6:	bf00      	nop
    47b8:	2000095c 	.word	0x2000095c

000047bc <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    47bc:	7b43      	ldrb	r3, [r0, #13]
    47be:	f013 0f08 	tst.w	r3, #8
    47c2:	d12a      	bne.n	481a <end_thread+0x5e>
{
    47c4:	b510      	push	{r4, lr}
    47c6:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    47c8:	f043 0208 	orr.w	r2, r3, #8
    47cc:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    47ce:	f023 0220 	bic.w	r2, r3, #32
    47d2:	f042 0208 	orr.w	r2, r2, #8
    47d6:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    47d8:	f012 0f80 	tst.w	r2, #128	; 0x80
    47dc:	d113      	bne.n	4806 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    47de:	68a3      	ldr	r3, [r4, #8]
    47e0:	b113      	cbz	r3, 47e8 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    47e2:	4620      	mov	r0, r4
    47e4:	f002 f9b2 	bl	6b4c <unpend_thread_no_timeout>
    47e8:	f104 0018 	add.w	r0, r4, #24
    47ec:	f002 fa97 	bl	6d1e <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    47f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    47f4:	f002 fa0a 	bl	6c0c <unpend_all>
		update_cache(1);
    47f8:	2001      	movs	r0, #1
    47fa:	f7ff fdd7 	bl	43ac <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    47fe:	4620      	mov	r0, r4
    4800:	f7ff fb20 	bl	3e44 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    4804:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4806:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    480a:	f043 0308 	orr.w	r3, r3, #8
    480e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4810:	4601      	mov	r1, r0
    4812:	4802      	ldr	r0, [pc, #8]	; (481c <end_thread+0x60>)
    4814:	f002 f992 	bl	6b3c <z_priq_dumb_remove>
}
    4818:	e7e1      	b.n	47de <end_thread+0x22>
    481a:	4770      	bx	lr
    481c:	2000097c 	.word	0x2000097c

00004820 <z_sched_init>:
{
    4820:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    4822:	4804      	ldr	r0, [pc, #16]	; (4834 <z_sched_init+0x14>)
    4824:	f002 fa60 	bl	6ce8 <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    4828:	2100      	movs	r1, #0
    482a:	4608      	mov	r0, r1
    482c:	f7ff fd54 	bl	42d8 <k_sched_time_slice_set>
}
    4830:	bd08      	pop	{r3, pc}
    4832:	bf00      	nop
    4834:	20000978 	.word	0x20000978

00004838 <z_impl_k_yield>:
{
    4838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    483a:	f04f 0320 	mov.w	r3, #32
    483e:	f3ef 8611 	mrs	r6, BASEPRI
    4842:	f383 8812 	msr	BASEPRI_MAX, r3
    4846:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    484a:	4c1d      	ldr	r4, [pc, #116]	; (48c0 <z_impl_k_yield+0x88>)
    484c:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    484e:	7b4b      	ldrb	r3, [r1, #13]
    4850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4854:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4856:	f104 0720 	add.w	r7, r4, #32
    485a:	4638      	mov	r0, r7
    485c:	f002 f96e 	bl	6b3c <z_priq_dumb_remove>
	queue_thread(_current);
    4860:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4862:	7b6b      	ldrb	r3, [r5, #13]
    4864:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4868:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    486a:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    486c:	42bc      	cmp	r4, r7
    486e:	d108      	bne.n	4882 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4870:	2400      	movs	r4, #0
    4872:	e006      	b.n	4882 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    4874:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    4876:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4878:	602c      	str	r4, [r5, #0]
	prev->next = node;
    487a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    487c:	6065      	str	r5, [r4, #4]
}
    487e:	e017      	b.n	48b0 <z_impl_k_yield+0x78>
    4880:	2400      	movs	r4, #0
    4882:	b16c      	cbz	r4, 48a0 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4884:	4621      	mov	r1, r4
    4886:	4628      	mov	r0, r5
    4888:	f002 f934 	bl	6af4 <z_sched_prio_cmp>
    488c:	2800      	cmp	r0, #0
    488e:	dcf1      	bgt.n	4874 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4890:	2c00      	cmp	r4, #0
    4892:	d0f6      	beq.n	4882 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    4894:	4b0a      	ldr	r3, [pc, #40]	; (48c0 <z_impl_k_yield+0x88>)
    4896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4898:	429c      	cmp	r4, r3
    489a:	d0f1      	beq.n	4880 <z_impl_k_yield+0x48>
    489c:	6824      	ldr	r4, [r4, #0]
    489e:	e7f0      	b.n	4882 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    48a0:	4b07      	ldr	r3, [pc, #28]	; (48c0 <z_impl_k_yield+0x88>)
    48a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    48a4:	f103 0120 	add.w	r1, r3, #32
    48a8:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    48aa:	606a      	str	r2, [r5, #4]
	tail->next = node;
    48ac:	6015      	str	r5, [r2, #0]
	list->tail = node;
    48ae:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    48b0:	2001      	movs	r0, #1
    48b2:	f7ff fd7b 	bl	43ac <update_cache>
    48b6:	4630      	mov	r0, r6
    48b8:	f7fc fdee 	bl	1498 <arch_swap>
}
    48bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    48be:	bf00      	nop
    48c0:	2000095c 	.word	0x2000095c

000048c4 <z_tick_sleep>:
{
    48c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    48c8:	ea50 0301 	orrs.w	r3, r0, r1
    48cc:	d038      	beq.n	4940 <z_tick_sleep+0x7c>
    48ce:	4604      	mov	r4, r0
    48d0:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    48d2:	f06f 0301 	mvn.w	r3, #1
    48d6:	1a1b      	subs	r3, r3, r0
    48d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    48dc:	eb62 0201 	sbc.w	r2, r2, r1
    48e0:	2b01      	cmp	r3, #1
    48e2:	f172 0200 	sbcs.w	r2, r2, #0
    48e6:	db2f      	blt.n	4948 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    48e8:	f06f 0501 	mvn.w	r5, #1
    48ec:	1a2d      	subs	r5, r5, r0
    48ee:	f04f 0320 	mov.w	r3, #32
    48f2:	f3ef 8811 	mrs	r8, BASEPRI
    48f6:	f383 8812 	msr	BASEPRI_MAX, r3
    48fa:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    48fe:	4f14      	ldr	r7, [pc, #80]	; (4950 <z_tick_sleep+0x8c>)
    4900:	68b8      	ldr	r0, [r7, #8]
    4902:	4b14      	ldr	r3, [pc, #80]	; (4954 <z_tick_sleep+0x90>)
    4904:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    4906:	f7ff fe69 	bl	45dc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    490a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    490c:	4622      	mov	r2, r4
    490e:	4633      	mov	r3, r6
    4910:	4911      	ldr	r1, [pc, #68]	; (4958 <z_tick_sleep+0x94>)
    4912:	3018      	adds	r0, #24
    4914:	f000 f8ec 	bl	4af0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4918:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    491a:	7b53      	ldrb	r3, [r2, #13]
    491c:	f043 0310 	orr.w	r3, r3, #16
    4920:	7353      	strb	r3, [r2, #13]
    4922:	4640      	mov	r0, r8
    4924:	f7fc fdb8 	bl	1498 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    4928:	f002 fa59 	bl	6dde <sys_clock_tick_get_32>
    492c:	1a28      	subs	r0, r5, r0
    492e:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4932:	2801      	cmp	r0, #1
    4934:	f173 0300 	sbcs.w	r3, r3, #0
    4938:	da00      	bge.n	493c <z_tick_sleep+0x78>
	return 0;
    493a:	2000      	movs	r0, #0
}
    493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    4940:	f7ff ff7a 	bl	4838 <z_impl_k_yield>
		return 0;
    4944:	2000      	movs	r0, #0
    4946:	e7f9      	b.n	493c <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    4948:	f002 fa49 	bl	6dde <sys_clock_tick_get_32>
    494c:	1905      	adds	r5, r0, r4
    494e:	e7ce      	b.n	48ee <z_tick_sleep+0x2a>
    4950:	2000095c 	.word	0x2000095c
    4954:	20000988 	.word	0x20000988
    4958:	00006baf 	.word	0x00006baf

0000495c <z_impl_k_sleep>:
{
    495c:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    495e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4962:	bf08      	it	eq
    4964:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    4968:	d018      	beq.n	499c <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    496a:	f7ff ffab 	bl	48c4 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    496e:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    4970:	0151      	lsls	r1, r2, #5
    4972:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    4976:	0143      	lsls	r3, r0, #5
    4978:	1a1b      	subs	r3, r3, r0
    497a:	eb61 0102 	sbc.w	r1, r1, r2
    497e:	0089      	lsls	r1, r1, #2
    4980:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    4984:	009b      	lsls	r3, r3, #2
    4986:	181b      	adds	r3, r3, r0
    4988:	eb42 0201 	adc.w	r2, r2, r1
    498c:	00d2      	lsls	r2, r2, #3
    498e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    4992:	f3c3 3310 	ubfx	r3, r3, #12, #17
    4996:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    499a:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    499c:	4b03      	ldr	r3, [pc, #12]	; (49ac <z_impl_k_sleep+0x50>)
    499e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    49a0:	f7ff feb2 	bl	4708 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    49a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    49a8:	e7f7      	b.n	499a <z_impl_k_sleep+0x3e>
    49aa:	bf00      	nop
    49ac:	2000095c 	.word	0x2000095c

000049b0 <z_impl_z_current_get>:
}
    49b0:	4b01      	ldr	r3, [pc, #4]	; (49b8 <z_impl_z_current_get+0x8>)
    49b2:	6898      	ldr	r0, [r3, #8]
    49b4:	4770      	bx	lr
    49b6:	bf00      	nop
    49b8:	2000095c 	.word	0x2000095c

000049bc <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    49bc:	b570      	push	{r4, r5, r6, lr}
    49be:	f04f 0320 	mov.w	r3, #32
    49c2:	f3ef 8511 	mrs	r5, BASEPRI
    49c6:	f383 8812 	msr	BASEPRI_MAX, r3
    49ca:	f3bf 8f6f 	isb	sy
    49ce:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    49d0:	7b03      	ldrb	r3, [r0, #12]
    49d2:	f013 0f01 	tst.w	r3, #1
    49d6:	d109      	bne.n	49ec <z_thread_abort+0x30>
    49d8:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    49da:	7b43      	ldrb	r3, [r0, #13]
    49dc:	f013 0f08 	tst.w	r3, #8
    49e0:	d00f      	beq.n	4a02 <z_thread_abort+0x46>
	__asm__ volatile(
    49e2:	f385 8811 	msr	BASEPRI, r5
    49e6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    49ea:	e009      	b.n	4a00 <z_thread_abort+0x44>
    49ec:	f385 8811 	msr	BASEPRI, r5
    49f0:	f3bf 8f6f 	isb	sy
		k_panic();
    49f4:	4040      	eors	r0, r0
    49f6:	f380 8811 	msr	BASEPRI, r0
    49fa:	f04f 0004 	mov.w	r0, #4
    49fe:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    4a00:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    4a02:	f7ff fedb 	bl	47bc <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    4a06:	4b08      	ldr	r3, [pc, #32]	; (4a28 <z_thread_abort+0x6c>)
    4a08:	689b      	ldr	r3, [r3, #8]
    4a0a:	42a3      	cmp	r3, r4
    4a0c:	d004      	beq.n	4a18 <z_thread_abort+0x5c>
    4a0e:	f386 8811 	msr	BASEPRI, r6
    4a12:	f3bf 8f6f 	isb	sy
    4a16:	e7f3      	b.n	4a00 <z_thread_abort+0x44>
    4a18:	f3ef 8305 	mrs	r3, IPSR
    4a1c:	2b00      	cmp	r3, #0
    4a1e:	d1f6      	bne.n	4a0e <z_thread_abort+0x52>
    4a20:	4628      	mov	r0, r5
    4a22:	f7fc fd39 	bl	1498 <arch_swap>
	return ret;
    4a26:	e7f2      	b.n	4a0e <z_thread_abort+0x52>
    4a28:	2000095c 	.word	0x2000095c

00004a2c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4a2c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4a2e:	4806      	ldr	r0, [pc, #24]	; (4a48 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4a30:	4a06      	ldr	r2, [pc, #24]	; (4a4c <z_data_copy+0x20>)
    4a32:	1a12      	subs	r2, r2, r0
    4a34:	4906      	ldr	r1, [pc, #24]	; (4a50 <z_data_copy+0x24>)
    4a36:	f001 ffbb 	bl	69b0 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4a3a:	4a06      	ldr	r2, [pc, #24]	; (4a54 <z_data_copy+0x28>)
    4a3c:	4906      	ldr	r1, [pc, #24]	; (4a58 <z_data_copy+0x2c>)
    4a3e:	4807      	ldr	r0, [pc, #28]	; (4a5c <z_data_copy+0x30>)
    4a40:	f001 ffb6 	bl	69b0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    4a44:	bd08      	pop	{r3, pc}
    4a46:	bf00      	nop
    4a48:	20000000 	.word	0x20000000
    4a4c:	2000018c 	.word	0x2000018c
    4a50:	00007ccc 	.word	0x00007ccc
    4a54:	00000000 	.word	0x00000000
    4a58:	00007ccc 	.word	0x00007ccc
    4a5c:	20000000 	.word	0x20000000

00004a60 <first>:
	return list->head == list;
    4a60:	4b03      	ldr	r3, [pc, #12]	; (4a70 <first+0x10>)
    4a62:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a64:	4298      	cmp	r0, r3
    4a66:	d000      	beq.n	4a6a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    4a68:	4770      	bx	lr
    4a6a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    4a6c:	e7fc      	b.n	4a68 <first+0x8>
    4a6e:	bf00      	nop
    4a70:	200000cc 	.word	0x200000cc

00004a74 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4a74:	b130      	cbz	r0, 4a84 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    4a76:	4a04      	ldr	r2, [pc, #16]	; (4a88 <next+0x14>)
    4a78:	6852      	ldr	r2, [r2, #4]
    4a7a:	4290      	cmp	r0, r2
    4a7c:	d001      	beq.n	4a82 <next+0xe>
    4a7e:	6800      	ldr	r0, [r0, #0]
    4a80:	4770      	bx	lr
    4a82:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4a84:	4770      	bx	lr
    4a86:	bf00      	nop
    4a88:	200000cc 	.word	0x200000cc

00004a8c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    4a8c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4a8e:	4b04      	ldr	r3, [pc, #16]	; (4aa0 <elapsed+0x14>)
    4a90:	681b      	ldr	r3, [r3, #0]
    4a92:	b10b      	cbz	r3, 4a98 <elapsed+0xc>
    4a94:	2000      	movs	r0, #0
}
    4a96:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4a98:	f7fe f880 	bl	2b9c <sys_clock_elapsed>
    4a9c:	e7fb      	b.n	4a96 <elapsed+0xa>
    4a9e:	bf00      	nop
    4aa0:	20000994 	.word	0x20000994

00004aa4 <next_timeout>:

static int32_t next_timeout(void)
{
    4aa4:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    4aa6:	f7ff ffdb 	bl	4a60 <first>
    4aaa:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    4aac:	f7ff ffee 	bl	4a8c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4ab0:	b17c      	cbz	r4, 4ad2 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4ab2:	6923      	ldr	r3, [r4, #16]
    4ab4:	6962      	ldr	r2, [r4, #20]
    4ab6:	1a1b      	subs	r3, r3, r0
    4ab8:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    4abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4ac0:	f172 0100 	sbcs.w	r1, r2, #0
    4ac4:	da08      	bge.n	4ad8 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    4ac6:	2a00      	cmp	r2, #0
    4ac8:	db01      	blt.n	4ace <next_timeout+0x2a>
    4aca:	4618      	mov	r0, r3
    4acc:	e006      	b.n	4adc <next_timeout+0x38>
    4ace:	2300      	movs	r3, #0
    4ad0:	e7fb      	b.n	4aca <next_timeout+0x26>
		ret = MAX_WAIT;
    4ad2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4ad6:	e001      	b.n	4adc <next_timeout+0x38>
    4ad8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    4adc:	4b03      	ldr	r3, [pc, #12]	; (4aec <next_timeout+0x48>)
    4ade:	691b      	ldr	r3, [r3, #16]
    4ae0:	b113      	cbz	r3, 4ae8 <next_timeout+0x44>
    4ae2:	4283      	cmp	r3, r0
    4ae4:	da00      	bge.n	4ae8 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    4ae6:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    4ae8:	bd10      	pop	{r4, pc}
    4aea:	bf00      	nop
    4aec:	2000095c 	.word	0x2000095c

00004af0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4af4:	bf08      	it	eq
    4af6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    4afa:	d07b      	beq.n	4bf4 <z_add_timeout+0x104>
{
    4afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b00:	4604      	mov	r4, r0
    4b02:	4692      	mov	sl, r2
    4b04:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4b06:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    4b08:	2300      	movs	r3, #0
	__asm__ volatile(
    4b0a:	f04f 0220 	mov.w	r2, #32
    4b0e:	f3ef 8711 	mrs	r7, BASEPRI
    4b12:	f382 8812 	msr	BASEPRI_MAX, r2
    4b16:	f3bf 8f6f 	isb	sy
    4b1a:	e026      	b.n	4b6a <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4b1c:	f11a 0801 	adds.w	r8, sl, #1
    4b20:	f145 0900 	adc.w	r9, r5, #0
    4b24:	f7ff ffb2 	bl	4a8c <elapsed>
    4b28:	eb18 0300 	adds.w	r3, r8, r0
    4b2c:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    4b30:	6123      	str	r3, [r4, #16]
    4b32:	6160      	str	r0, [r4, #20]
    4b34:	e03b      	b.n	4bae <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    4b36:	1a52      	subs	r2, r2, r1
    4b38:	eb66 0303 	sbc.w	r3, r6, r3
    4b3c:	6102      	str	r2, [r0, #16]
    4b3e:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    4b40:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    4b42:	6063      	str	r3, [r4, #4]
	node->next = successor;
    4b44:	6020      	str	r0, [r4, #0]
	prev->next = node;
    4b46:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    4b48:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    4b4a:	e005      	b.n	4b58 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    4b4c:	4b2a      	ldr	r3, [pc, #168]	; (4bf8 <z_add_timeout+0x108>)
    4b4e:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4b50:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    4b52:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4b54:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4b56:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4b58:	f7ff ff82 	bl	4a60 <first>
    4b5c:	4284      	cmp	r4, r0
    4b5e:	d03a      	beq.n	4bd6 <z_add_timeout+0xe6>
	__asm__ volatile(
    4b60:	f387 8811 	msr	BASEPRI, r7
    4b64:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4b68:	2301      	movs	r3, #1
    4b6a:	2b00      	cmp	r3, #0
    4b6c:	d140      	bne.n	4bf0 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4b6e:	4653      	mov	r3, sl
    4b70:	f06f 0101 	mvn.w	r1, #1
    4b74:	ebb1 010a 	subs.w	r1, r1, sl
    4b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4b7c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4b80:	2a00      	cmp	r2, #0
    4b82:	dbcb      	blt.n	4b1c <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4b84:	4a1d      	ldr	r2, [pc, #116]	; (4bfc <z_add_timeout+0x10c>)
    4b86:	6811      	ldr	r1, [r2, #0]
    4b88:	6852      	ldr	r2, [r2, #4]
    4b8a:	185b      	adds	r3, r3, r1
    4b8c:	eb42 0205 	adc.w	r2, r2, r5
    4b90:	f06f 0101 	mvn.w	r1, #1
    4b94:	1ac9      	subs	r1, r1, r3
    4b96:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    4b9a:	4608      	mov	r0, r1
    4b9c:	461a      	mov	r2, r3
    4b9e:	2901      	cmp	r1, #1
    4ba0:	f173 0300 	sbcs.w	r3, r3, #0
    4ba4:	da01      	bge.n	4baa <z_add_timeout+0xba>
    4ba6:	2001      	movs	r0, #1
    4ba8:	2200      	movs	r2, #0
    4baa:	6120      	str	r0, [r4, #16]
    4bac:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4bae:	f7ff ff57 	bl	4a60 <first>
    4bb2:	2800      	cmp	r0, #0
    4bb4:	d0ca      	beq.n	4b4c <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    4bb6:	6902      	ldr	r2, [r0, #16]
    4bb8:	6946      	ldr	r6, [r0, #20]
    4bba:	6921      	ldr	r1, [r4, #16]
    4bbc:	6963      	ldr	r3, [r4, #20]
    4bbe:	4291      	cmp	r1, r2
    4bc0:	eb73 0e06 	sbcs.w	lr, r3, r6
    4bc4:	dbb7      	blt.n	4b36 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    4bc6:	1a89      	subs	r1, r1, r2
    4bc8:	eb63 0306 	sbc.w	r3, r3, r6
    4bcc:	6121      	str	r1, [r4, #16]
    4bce:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4bd0:	f7ff ff50 	bl	4a74 <next>
    4bd4:	e7ed      	b.n	4bb2 <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4bd6:	f7ff ff65 	bl	4aa4 <next_timeout>

			if (next_time == 0 ||
    4bda:	4603      	mov	r3, r0
    4bdc:	b118      	cbz	r0, 4be6 <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
    4bde:	4a08      	ldr	r2, [pc, #32]	; (4c00 <z_add_timeout+0x110>)
    4be0:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    4be2:	4282      	cmp	r2, r0
    4be4:	d0bc      	beq.n	4b60 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
    4be6:	2100      	movs	r1, #0
    4be8:	4618      	mov	r0, r3
    4bea:	f7fd ffa5 	bl	2b38 <sys_clock_set_timeout>
    4bee:	e7b7      	b.n	4b60 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bf4:	4770      	bx	lr
    4bf6:	bf00      	nop
    4bf8:	200000cc 	.word	0x200000cc
    4bfc:	20000310 	.word	0x20000310
    4c00:	2000095c 	.word	0x2000095c

00004c04 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4c04:	b570      	push	{r4, r5, r6, lr}
    4c06:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4c08:	f7ff fc52 	bl	44b0 <z_time_slice>
	__asm__ volatile(
    4c0c:	f04f 0320 	mov.w	r3, #32
    4c10:	f3ef 8611 	mrs	r6, BASEPRI
    4c14:	f383 8812 	msr	BASEPRI_MAX, r3
    4c18:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    4c1c:	4b28      	ldr	r3, [pc, #160]	; (4cc0 <sys_clock_announce+0xbc>)
    4c1e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4c20:	e021      	b.n	4c66 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4c22:	4a28      	ldr	r2, [pc, #160]	; (4cc4 <sys_clock_announce+0xc0>)
    4c24:	6813      	ldr	r3, [r2, #0]
    4c26:	6851      	ldr	r1, [r2, #4]
    4c28:	195b      	adds	r3, r3, r5
    4c2a:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    4c2e:	6013      	str	r3, [r2, #0]
    4c30:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    4c32:	2200      	movs	r2, #0
    4c34:	2300      	movs	r3, #0
    4c36:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    4c3a:	4620      	mov	r0, r4
    4c3c:	f002 f858 	bl	6cf0 <remove_timeout>
	__asm__ volatile(
    4c40:	f386 8811 	msr	BASEPRI, r6
    4c44:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    4c48:	68a3      	ldr	r3, [r4, #8]
    4c4a:	4620      	mov	r0, r4
    4c4c:	4798      	blx	r3
	__asm__ volatile(
    4c4e:	f04f 0320 	mov.w	r3, #32
    4c52:	f3ef 8611 	mrs	r6, BASEPRI
    4c56:	f383 8812 	msr	BASEPRI_MAX, r3
    4c5a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    4c5e:	4a18      	ldr	r2, [pc, #96]	; (4cc0 <sys_clock_announce+0xbc>)
    4c60:	6813      	ldr	r3, [r2, #0]
    4c62:	1b5b      	subs	r3, r3, r5
    4c64:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4c66:	f7ff fefb 	bl	4a60 <first>
    4c6a:	4604      	mov	r4, r0
    4c6c:	b138      	cbz	r0, 4c7e <sys_clock_announce+0x7a>
    4c6e:	6905      	ldr	r5, [r0, #16]
    4c70:	6941      	ldr	r1, [r0, #20]
    4c72:	4b13      	ldr	r3, [pc, #76]	; (4cc0 <sys_clock_announce+0xbc>)
    4c74:	681a      	ldr	r2, [r3, #0]
    4c76:	17d3      	asrs	r3, r2, #31
    4c78:	42aa      	cmp	r2, r5
    4c7a:	418b      	sbcs	r3, r1
    4c7c:	dad1      	bge.n	4c22 <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
    4c7e:	b144      	cbz	r4, 4c92 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    4c80:	6923      	ldr	r3, [r4, #16]
    4c82:	6962      	ldr	r2, [r4, #20]
    4c84:	490e      	ldr	r1, [pc, #56]	; (4cc0 <sys_clock_announce+0xbc>)
    4c86:	6809      	ldr	r1, [r1, #0]
    4c88:	1a5b      	subs	r3, r3, r1
    4c8a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    4c8e:	6123      	str	r3, [r4, #16]
    4c90:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    4c92:	4a0c      	ldr	r2, [pc, #48]	; (4cc4 <sys_clock_announce+0xc0>)
    4c94:	4d0a      	ldr	r5, [pc, #40]	; (4cc0 <sys_clock_announce+0xbc>)
    4c96:	6828      	ldr	r0, [r5, #0]
    4c98:	6813      	ldr	r3, [r2, #0]
    4c9a:	6851      	ldr	r1, [r2, #4]
    4c9c:	181b      	adds	r3, r3, r0
    4c9e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    4ca2:	6013      	str	r3, [r2, #0]
    4ca4:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    4ca6:	2400      	movs	r4, #0
    4ca8:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4caa:	f7ff fefb 	bl	4aa4 <next_timeout>
    4cae:	4621      	mov	r1, r4
    4cb0:	f7fd ff42 	bl	2b38 <sys_clock_set_timeout>
	__asm__ volatile(
    4cb4:	f386 8811 	msr	BASEPRI, r6
    4cb8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4cbc:	bd70      	pop	{r4, r5, r6, pc}
    4cbe:	bf00      	nop
    4cc0:	20000994 	.word	0x20000994
    4cc4:	20000310 	.word	0x20000310

00004cc8 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4cc8:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    4cca:	2200      	movs	r2, #0
	__asm__ volatile(
    4ccc:	f04f 0320 	mov.w	r3, #32
    4cd0:	f3ef 8411 	mrs	r4, BASEPRI
    4cd4:	f383 8812 	msr	BASEPRI_MAX, r3
    4cd8:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    4cdc:	4613      	mov	r3, r2
    4cde:	4611      	mov	r1, r2
    4ce0:	e00c      	b.n	4cfc <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    4ce2:	f7ff fed3 	bl	4a8c <elapsed>
    4ce6:	4a07      	ldr	r2, [pc, #28]	; (4d04 <sys_clock_tick_get+0x3c>)
    4ce8:	6813      	ldr	r3, [r2, #0]
    4cea:	6851      	ldr	r1, [r2, #4]
    4cec:	18c3      	adds	r3, r0, r3
    4cee:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    4cf2:	f384 8811 	msr	BASEPRI, r4
    4cf6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4cfa:	2201      	movs	r2, #1
    4cfc:	2a00      	cmp	r2, #0
    4cfe:	d0f0      	beq.n	4ce2 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    4d00:	4618      	mov	r0, r3
    4d02:	bd10      	pop	{r4, pc}
    4d04:	20000310 	.word	0x20000310

00004d08 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    4d08:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    4d0a:	4802      	ldr	r0, [pc, #8]	; (4d14 <boot_banner+0xc>)
    4d0c:	f000 f9ff 	bl	510e <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    4d10:	bd08      	pop	{r3, pc}
    4d12:	bf00      	nop
    4d14:	00007c10 	.word	0x00007c10

00004d18 <nrf_cc3xx_platform_init_no_rng>:
    4d18:	b510      	push	{r4, lr}
    4d1a:	4c0a      	ldr	r4, [pc, #40]	; (4d44 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    4d1c:	6823      	ldr	r3, [r4, #0]
    4d1e:	b11b      	cbz	r3, 4d28 <nrf_cc3xx_platform_init_no_rng+0x10>
    4d20:	2301      	movs	r3, #1
    4d22:	2000      	movs	r0, #0
    4d24:	6023      	str	r3, [r4, #0]
    4d26:	bd10      	pop	{r4, pc}
    4d28:	f000 f8f4 	bl	4f14 <CC_LibInitNoRng>
    4d2c:	2800      	cmp	r0, #0
    4d2e:	d0f7      	beq.n	4d20 <nrf_cc3xx_platform_init_no_rng+0x8>
    4d30:	3801      	subs	r0, #1
    4d32:	2807      	cmp	r0, #7
    4d34:	d803      	bhi.n	4d3e <nrf_cc3xx_platform_init_no_rng+0x26>
    4d36:	4b04      	ldr	r3, [pc, #16]	; (4d48 <nrf_cc3xx_platform_init_no_rng+0x30>)
    4d38:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    4d3c:	bd10      	pop	{r4, pc}
    4d3e:	4803      	ldr	r0, [pc, #12]	; (4d4c <nrf_cc3xx_platform_init_no_rng+0x34>)
    4d40:	bd10      	pop	{r4, pc}
    4d42:	bf00      	nop
    4d44:	20000998 	.word	0x20000998
    4d48:	00007c40 	.word	0x00007c40
    4d4c:	ffff8ffe 	.word	0xffff8ffe

00004d50 <nrf_cc3xx_platform_abort>:
    4d50:	f3bf 8f4f 	dsb	sy
    4d54:	4905      	ldr	r1, [pc, #20]	; (4d6c <nrf_cc3xx_platform_abort+0x1c>)
    4d56:	4b06      	ldr	r3, [pc, #24]	; (4d70 <nrf_cc3xx_platform_abort+0x20>)
    4d58:	68ca      	ldr	r2, [r1, #12]
    4d5a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4d5e:	4313      	orrs	r3, r2
    4d60:	60cb      	str	r3, [r1, #12]
    4d62:	f3bf 8f4f 	dsb	sy
    4d66:	bf00      	nop
    4d68:	e7fd      	b.n	4d66 <nrf_cc3xx_platform_abort+0x16>
    4d6a:	bf00      	nop
    4d6c:	e000ed00 	.word	0xe000ed00
    4d70:	05fa0004 	.word	0x05fa0004

00004d74 <CC_PalAbort>:
    4d74:	b430      	push	{r4, r5}
    4d76:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    4d7a:	2500      	movs	r5, #0
    4d7c:	4b0b      	ldr	r3, [pc, #44]	; (4dac <CC_PalAbort+0x38>)
    4d7e:	4c0c      	ldr	r4, [pc, #48]	; (4db0 <CC_PalAbort+0x3c>)
    4d80:	490c      	ldr	r1, [pc, #48]	; (4db4 <CC_PalAbort+0x40>)
    4d82:	6849      	ldr	r1, [r1, #4]
    4d84:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4d88:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    4d8c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    4d90:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4d94:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
    4d98:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    4d9c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    4da0:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    4da4:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
    4da8:	bc30      	pop	{r4, r5}
    4daa:	4708      	bx	r1
    4dac:	50845000 	.word	0x50845000
    4db0:	50844000 	.word	0x50844000
    4db4:	200000d4 	.word	0x200000d4

00004db8 <nrf_cc3xx_platform_set_abort>:
    4db8:	4b02      	ldr	r3, [pc, #8]	; (4dc4 <nrf_cc3xx_platform_set_abort+0xc>)
    4dba:	e9d0 1200 	ldrd	r1, r2, [r0]
    4dbe:	e9c3 1200 	strd	r1, r2, [r3]
    4dc2:	4770      	bx	lr
    4dc4:	200000d4 	.word	0x200000d4

00004dc8 <mutex_free>:
    4dc8:	b510      	push	{r4, lr}
    4dca:	4604      	mov	r4, r0
    4dcc:	b150      	cbz	r0, 4de4 <mutex_free+0x1c>
    4dce:	6863      	ldr	r3, [r4, #4]
    4dd0:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4dd4:	d005      	beq.n	4de2 <mutex_free+0x1a>
    4dd6:	4a06      	ldr	r2, [pc, #24]	; (4df0 <mutex_free+0x28>)
    4dd8:	4293      	cmp	r3, r2
    4dda:	d002      	beq.n	4de2 <mutex_free+0x1a>
    4ddc:	2300      	movs	r3, #0
    4dde:	6062      	str	r2, [r4, #4]
    4de0:	6023      	str	r3, [r4, #0]
    4de2:	bd10      	pop	{r4, pc}
    4de4:	4b03      	ldr	r3, [pc, #12]	; (4df4 <mutex_free+0x2c>)
    4de6:	4804      	ldr	r0, [pc, #16]	; (4df8 <mutex_free+0x30>)
    4de8:	685b      	ldr	r3, [r3, #4]
    4dea:	4798      	blx	r3
    4dec:	e7ef      	b.n	4dce <mutex_free+0x6>
    4dee:	bf00      	nop
    4df0:	a95c5f2c 	.word	0xa95c5f2c
    4df4:	200000d4 	.word	0x200000d4
    4df8:	00007c60 	.word	0x00007c60

00004dfc <mutex_lock>:
    4dfc:	b1c8      	cbz	r0, 4e32 <mutex_lock+0x36>
    4dfe:	6843      	ldr	r3, [r0, #4]
    4e00:	4a0d      	ldr	r2, [pc, #52]	; (4e38 <mutex_lock+0x3c>)
    4e02:	4293      	cmp	r3, r2
    4e04:	d013      	beq.n	4e2e <mutex_lock+0x32>
    4e06:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4e0a:	d00e      	beq.n	4e2a <mutex_lock+0x2e>
    4e0c:	2301      	movs	r3, #1
    4e0e:	e850 2f00 	ldrex	r2, [r0]
    4e12:	4619      	mov	r1, r3
    4e14:	e840 1c00 	strex	ip, r1, [r0]
    4e18:	f09c 0f00 	teq	ip, #0
    4e1c:	d1f7      	bne.n	4e0e <mutex_lock+0x12>
    4e1e:	2a01      	cmp	r2, #1
    4e20:	d0f5      	beq.n	4e0e <mutex_lock+0x12>
    4e22:	f3bf 8f5f 	dmb	sy
    4e26:	2000      	movs	r0, #0
    4e28:	4770      	bx	lr
    4e2a:	4804      	ldr	r0, [pc, #16]	; (4e3c <mutex_lock+0x40>)
    4e2c:	4770      	bx	lr
    4e2e:	4804      	ldr	r0, [pc, #16]	; (4e40 <mutex_lock+0x44>)
    4e30:	4770      	bx	lr
    4e32:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4e36:	4770      	bx	lr
    4e38:	a95c5f2c 	.word	0xa95c5f2c
    4e3c:	ffff8fe9 	.word	0xffff8fe9
    4e40:	ffff8fea 	.word	0xffff8fea

00004e44 <mutex_unlock>:
    4e44:	4603      	mov	r3, r0
    4e46:	b180      	cbz	r0, 4e6a <mutex_unlock+0x26>
    4e48:	6842      	ldr	r2, [r0, #4]
    4e4a:	4909      	ldr	r1, [pc, #36]	; (4e70 <mutex_unlock+0x2c>)
    4e4c:	428a      	cmp	r2, r1
    4e4e:	d00a      	beq.n	4e66 <mutex_unlock+0x22>
    4e50:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    4e54:	d005      	beq.n	4e62 <mutex_unlock+0x1e>
    4e56:	f3bf 8f5f 	dmb	sy
    4e5a:	2200      	movs	r2, #0
    4e5c:	4610      	mov	r0, r2
    4e5e:	601a      	str	r2, [r3, #0]
    4e60:	4770      	bx	lr
    4e62:	4804      	ldr	r0, [pc, #16]	; (4e74 <mutex_unlock+0x30>)
    4e64:	4770      	bx	lr
    4e66:	4804      	ldr	r0, [pc, #16]	; (4e78 <mutex_unlock+0x34>)
    4e68:	4770      	bx	lr
    4e6a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    4e6e:	4770      	bx	lr
    4e70:	a95c5f2c 	.word	0xa95c5f2c
    4e74:	ffff8fe9 	.word	0xffff8fe9
    4e78:	ffff8fea 	.word	0xffff8fea

00004e7c <mutex_init>:
    4e7c:	b510      	push	{r4, lr}
    4e7e:	4604      	mov	r4, r0
    4e80:	b120      	cbz	r0, 4e8c <mutex_init+0x10>
    4e82:	2300      	movs	r3, #0
    4e84:	4a03      	ldr	r2, [pc, #12]	; (4e94 <mutex_init+0x18>)
    4e86:	6023      	str	r3, [r4, #0]
    4e88:	6062      	str	r2, [r4, #4]
    4e8a:	bd10      	pop	{r4, pc}
    4e8c:	4802      	ldr	r0, [pc, #8]	; (4e98 <mutex_init+0x1c>)
    4e8e:	f7ff ff71 	bl	4d74 <CC_PalAbort>
    4e92:	e7f6      	b.n	4e82 <mutex_init+0x6>
    4e94:	3a00003a 	.word	0x3a00003a
    4e98:	00007c88 	.word	0x00007c88

00004e9c <nrf_cc3xx_platform_set_mutexes>:
    4e9c:	b570      	push	{r4, r5, r6, lr}
    4e9e:	4c19      	ldr	r4, [pc, #100]	; (4f04 <nrf_cc3xx_platform_set_mutexes+0x68>)
    4ea0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    4ea4:	6806      	ldr	r6, [r0, #0]
    4ea6:	f8c4 c004 	str.w	ip, [r4, #4]
    4eaa:	f8d0 c008 	ldr.w	ip, [r0, #8]
    4eae:	68c0      	ldr	r0, [r0, #12]
    4eb0:	f8c4 c008 	str.w	ip, [r4, #8]
    4eb4:	60e0      	str	r0, [r4, #12]
    4eb6:	6026      	str	r6, [r4, #0]
    4eb8:	6808      	ldr	r0, [r1, #0]
    4eba:	4b13      	ldr	r3, [pc, #76]	; (4f08 <nrf_cc3xx_platform_set_mutexes+0x6c>)
    4ebc:	4d13      	ldr	r5, [pc, #76]	; (4f0c <nrf_cc3xx_platform_set_mutexes+0x70>)
    4ebe:	6018      	str	r0, [r3, #0]
    4ec0:	6848      	ldr	r0, [r1, #4]
    4ec2:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    4ec6:	6058      	str	r0, [r3, #4]
    4ec8:	6888      	ldr	r0, [r1, #8]
    4eca:	f012 5f68 	tst.w	r2, #973078528	; 0x3a000000
    4ece:	6098      	str	r0, [r3, #8]
    4ed0:	68c8      	ldr	r0, [r1, #12]
    4ed2:	6909      	ldr	r1, [r1, #16]
    4ed4:	60d8      	str	r0, [r3, #12]
    4ed6:	6119      	str	r1, [r3, #16]
    4ed8:	d012      	beq.n	4f00 <nrf_cc3xx_platform_set_mutexes+0x64>
    4eda:	2300      	movs	r3, #0
    4edc:	4a0c      	ldr	r2, [pc, #48]	; (4f10 <nrf_cc3xx_platform_set_mutexes+0x74>)
    4ede:	f505 708a 	add.w	r0, r5, #276	; 0x114
    4ee2:	f8c5 3114 	str.w	r3, [r5, #276]	; 0x114
    4ee6:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    4eea:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
    4eee:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
    4ef2:	47b0      	blx	r6
    4ef4:	6823      	ldr	r3, [r4, #0]
    4ef6:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    4efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4efe:	4718      	bx	r3
    4f00:	bd70      	pop	{r4, r5, r6, pc}
    4f02:	bf00      	nop
    4f04:	200000e4 	.word	0x200000e4
    4f08:	200000f4 	.word	0x200000f4
    4f0c:	200009b0 	.word	0x200009b0
    4f10:	a95c5f2c 	.word	0xa95c5f2c

00004f14 <CC_LibInitNoRng>:
    4f14:	b508      	push	{r3, lr}
    4f16:	f000 f811 	bl	4f3c <CC_HalInit>
    4f1a:	b930      	cbnz	r0, 4f2a <CC_LibInitNoRng+0x16>
    4f1c:	f000 f810 	bl	4f40 <CC_PalInit>
    4f20:	b938      	cbnz	r0, 4f32 <CC_LibInitNoRng+0x1e>
    4f22:	4a05      	ldr	r2, [pc, #20]	; (4f38 <CC_LibInitNoRng+0x24>)
    4f24:	f8c2 0a0c 	str.w	r0, [r2, #2572]	; 0xa0c
    4f28:	bd08      	pop	{r3, pc}
    4f2a:	f000 f837 	bl	4f9c <CC_PalTerminate>
    4f2e:	2003      	movs	r0, #3
    4f30:	bd08      	pop	{r3, pc}
    4f32:	2004      	movs	r0, #4
    4f34:	bd08      	pop	{r3, pc}
    4f36:	bf00      	nop
    4f38:	50845000 	.word	0x50845000

00004f3c <CC_HalInit>:
    4f3c:	2000      	movs	r0, #0
    4f3e:	4770      	bx	lr

00004f40 <CC_PalInit>:
    4f40:	b510      	push	{r4, lr}
    4f42:	4811      	ldr	r0, [pc, #68]	; (4f88 <CC_PalInit+0x48>)
    4f44:	f000 f848 	bl	4fd8 <CC_PalMutexCreate>
    4f48:	b100      	cbz	r0, 4f4c <CC_PalInit+0xc>
    4f4a:	bd10      	pop	{r4, pc}
    4f4c:	480f      	ldr	r0, [pc, #60]	; (4f8c <CC_PalInit+0x4c>)
    4f4e:	f000 f843 	bl	4fd8 <CC_PalMutexCreate>
    4f52:	2800      	cmp	r0, #0
    4f54:	d1f9      	bne.n	4f4a <CC_PalInit+0xa>
    4f56:	4c0e      	ldr	r4, [pc, #56]	; (4f90 <CC_PalInit+0x50>)
    4f58:	4620      	mov	r0, r4
    4f5a:	f000 f83d 	bl	4fd8 <CC_PalMutexCreate>
    4f5e:	2800      	cmp	r0, #0
    4f60:	d1f3      	bne.n	4f4a <CC_PalInit+0xa>
    4f62:	4b0c      	ldr	r3, [pc, #48]	; (4f94 <CC_PalInit+0x54>)
    4f64:	480c      	ldr	r0, [pc, #48]	; (4f98 <CC_PalInit+0x58>)
    4f66:	601c      	str	r4, [r3, #0]
    4f68:	f000 f836 	bl	4fd8 <CC_PalMutexCreate>
    4f6c:	4601      	mov	r1, r0
    4f6e:	2800      	cmp	r0, #0
    4f70:	d1eb      	bne.n	4f4a <CC_PalInit+0xa>
    4f72:	f000 f82d 	bl	4fd0 <CC_PalDmaInit>
    4f76:	4604      	mov	r4, r0
    4f78:	b108      	cbz	r0, 4f7e <CC_PalInit+0x3e>
    4f7a:	4620      	mov	r0, r4
    4f7c:	bd10      	pop	{r4, pc}
    4f7e:	f000 f83f 	bl	5000 <CC_PalPowerSaveModeInit>
    4f82:	4620      	mov	r0, r4
    4f84:	e7fa      	b.n	4f7c <CC_PalInit+0x3c>
    4f86:	bf00      	nop
    4f88:	2000012c 	.word	0x2000012c
    4f8c:	20000120 	.word	0x20000120
    4f90:	20000128 	.word	0x20000128
    4f94:	20000130 	.word	0x20000130
    4f98:	20000124 	.word	0x20000124

00004f9c <CC_PalTerminate>:
    4f9c:	b508      	push	{r3, lr}
    4f9e:	4808      	ldr	r0, [pc, #32]	; (4fc0 <CC_PalTerminate+0x24>)
    4fa0:	f000 f824 	bl	4fec <CC_PalMutexDestroy>
    4fa4:	4807      	ldr	r0, [pc, #28]	; (4fc4 <CC_PalTerminate+0x28>)
    4fa6:	f000 f821 	bl	4fec <CC_PalMutexDestroy>
    4faa:	4807      	ldr	r0, [pc, #28]	; (4fc8 <CC_PalTerminate+0x2c>)
    4fac:	f000 f81e 	bl	4fec <CC_PalMutexDestroy>
    4fb0:	4806      	ldr	r0, [pc, #24]	; (4fcc <CC_PalTerminate+0x30>)
    4fb2:	f000 f81b 	bl	4fec <CC_PalMutexDestroy>
    4fb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4fba:	f000 b80b 	b.w	4fd4 <CC_PalDmaTerminate>
    4fbe:	bf00      	nop
    4fc0:	2000012c 	.word	0x2000012c
    4fc4:	20000120 	.word	0x20000120
    4fc8:	20000128 	.word	0x20000128
    4fcc:	20000124 	.word	0x20000124

00004fd0 <CC_PalDmaInit>:
    4fd0:	2000      	movs	r0, #0
    4fd2:	4770      	bx	lr

00004fd4 <CC_PalDmaTerminate>:
    4fd4:	4770      	bx	lr
    4fd6:	bf00      	nop

00004fd8 <CC_PalMutexCreate>:
    4fd8:	b508      	push	{r3, lr}
    4fda:	4b03      	ldr	r3, [pc, #12]	; (4fe8 <CC_PalMutexCreate+0x10>)
    4fdc:	6802      	ldr	r2, [r0, #0]
    4fde:	681b      	ldr	r3, [r3, #0]
    4fe0:	6810      	ldr	r0, [r2, #0]
    4fe2:	4798      	blx	r3
    4fe4:	2000      	movs	r0, #0
    4fe6:	bd08      	pop	{r3, pc}
    4fe8:	200000e4 	.word	0x200000e4

00004fec <CC_PalMutexDestroy>:
    4fec:	b508      	push	{r3, lr}
    4fee:	4b03      	ldr	r3, [pc, #12]	; (4ffc <CC_PalMutexDestroy+0x10>)
    4ff0:	6802      	ldr	r2, [r0, #0]
    4ff2:	685b      	ldr	r3, [r3, #4]
    4ff4:	6810      	ldr	r0, [r2, #0]
    4ff6:	4798      	blx	r3
    4ff8:	2000      	movs	r0, #0
    4ffa:	bd08      	pop	{r3, pc}
    4ffc:	200000e4 	.word	0x200000e4

00005000 <CC_PalPowerSaveModeInit>:
    5000:	b570      	push	{r4, r5, r6, lr}
    5002:	4c09      	ldr	r4, [pc, #36]	; (5028 <CC_PalPowerSaveModeInit+0x28>)
    5004:	4d09      	ldr	r5, [pc, #36]	; (502c <CC_PalPowerSaveModeInit+0x2c>)
    5006:	6920      	ldr	r0, [r4, #16]
    5008:	68ab      	ldr	r3, [r5, #8]
    500a:	4798      	blx	r3
    500c:	b118      	cbz	r0, 5016 <CC_PalPowerSaveModeInit+0x16>
    500e:	4b08      	ldr	r3, [pc, #32]	; (5030 <CC_PalPowerSaveModeInit+0x30>)
    5010:	4808      	ldr	r0, [pc, #32]	; (5034 <CC_PalPowerSaveModeInit+0x34>)
    5012:	685b      	ldr	r3, [r3, #4]
    5014:	4798      	blx	r3
    5016:	2100      	movs	r1, #0
    5018:	4a07      	ldr	r2, [pc, #28]	; (5038 <CC_PalPowerSaveModeInit+0x38>)
    501a:	68eb      	ldr	r3, [r5, #12]
    501c:	6011      	str	r1, [r2, #0]
    501e:	6920      	ldr	r0, [r4, #16]
    5020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5024:	4718      	bx	r3
    5026:	bf00      	nop
    5028:	200000f4 	.word	0x200000f4
    502c:	200000e4 	.word	0x200000e4
    5030:	200000d4 	.word	0x200000d4
    5034:	00007cac 	.word	0x00007cac
    5038:	200009ac 	.word	0x200009ac

0000503c <z_impl_gpio_pin_interrupt_configure>:
{
    503c:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
    503e:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
    5040:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    5042:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    5046:	d006      	beq.n	5056 <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    5048:	6825      	ldr	r5, [r4, #0]
    504a:	2401      	movs	r4, #1
    504c:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    504e:	4225      	tst	r5, r4
    5050:	d001      	beq.n	5056 <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    5052:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    5056:	699c      	ldr	r4, [r3, #24]
    5058:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    505c:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
    5060:	47a0      	blx	r4
}
    5062:	bd38      	pop	{r3, r4, r5, pc}

00005064 <z_impl_gpio_pin_configure>:
{
    5064:	b538      	push	{r3, r4, r5, lr}
    5066:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    5068:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    506a:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    506c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    5070:	d007      	beq.n	5082 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    5072:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    5076:	d004      	beq.n	5082 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    5078:	f012 0f01 	tst.w	r2, #1
    507c:	d001      	beq.n	5082 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    507e:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5082:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    5086:	f013 0f01 	tst.w	r3, #1
    508a:	d00a      	beq.n	50a2 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    508c:	6823      	ldr	r3, [r4, #0]
    508e:	f04f 0c01 	mov.w	ip, #1
    5092:	fa0c fc01 	lsl.w	ip, ip, r1
    5096:	ea43 030c 	orr.w	r3, r3, ip
    509a:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    509c:	682b      	ldr	r3, [r5, #0]
    509e:	4798      	blx	r3
}
    50a0:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    50a2:	6823      	ldr	r3, [r4, #0]
    50a4:	f04f 0c01 	mov.w	ip, #1
    50a8:	fa0c fc01 	lsl.w	ip, ip, r1
    50ac:	ea23 030c 	bic.w	r3, r3, ip
    50b0:	6023      	str	r3, [r4, #0]
    50b2:	e7f3      	b.n	509c <z_impl_gpio_pin_configure+0x38>

000050b4 <gpio_pin_configure_dt>:
{
    50b4:	b508      	push	{r3, lr}
    50b6:	4603      	mov	r3, r0
    50b8:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    50ba:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    50bc:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    50be:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    50c0:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    50c4:	f7ff ffce 	bl	5064 <z_impl_gpio_pin_configure>
}
    50c8:	bd08      	pop	{r3, pc}

000050ca <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
    50ca:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
    50cc:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    50ce:	69db      	ldr	r3, [r3, #28]
    50d0:	b113      	cbz	r3, 50d8 <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    50d2:	2201      	movs	r2, #1
    50d4:	4798      	blx	r3
}
    50d6:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
    50d8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    50dc:	e7fb      	b.n	50d6 <gpio_add_callback+0xc>

000050de <k_msleep>:
{
    50de:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    50e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    50e4:	17c1      	asrs	r1, r0, #31
    50e6:	03c9      	lsls	r1, r1, #15
    50e8:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    50ec:	03c0      	lsls	r0, r0, #15
    50ee:	f240 33e7 	movw	r3, #999	; 0x3e7
    50f2:	18c0      	adds	r0, r0, r3
    50f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    50f8:	f04f 0300 	mov.w	r3, #0
    50fc:	f141 0100 	adc.w	r1, r1, #0
    5100:	f7fb f828 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    5104:	f7ff fc2a 	bl	495c <z_impl_k_sleep>
}
    5108:	bd08      	pop	{r3, pc}

0000510a <arch_printk_char_out>:
}
    510a:	2000      	movs	r0, #0
    510c:	4770      	bx	lr

0000510e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    510e:	b40f      	push	{r0, r1, r2, r3}
    5110:	b500      	push	{lr}
    5112:	b083      	sub	sp, #12
    5114:	a904      	add	r1, sp, #16
    5116:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    511a:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    511c:	f7fb fa18 	bl	550 <vprintk>

	va_end(ap);
}
    5120:	b003      	add	sp, #12
    5122:	f85d eb04 	ldr.w	lr, [sp], #4
    5126:	b004      	add	sp, #16
    5128:	4770      	bx	lr

0000512a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    512a:	b508      	push	{r3, lr}
    512c:	4604      	mov	r4, r0
    512e:	4608      	mov	r0, r1
    5130:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    5132:	461a      	mov	r2, r3
    5134:	47a0      	blx	r4
	return z_impl_z_current_get();
    5136:	f7ff fc3b 	bl	49b0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    513a:	f7fc fd6f 	bl	1c1c <z_impl_k_thread_abort>

0000513e <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    513e:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5142:	8b03      	ldrh	r3, [r0, #24]
    5144:	f023 0307 	bic.w	r3, r3, #7
    5148:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    514a:	8303      	strh	r3, [r0, #24]
}
    514c:	4770      	bx	lr

0000514e <notify_monitors>:
{
    514e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5152:	4606      	mov	r6, r0
    5154:	460f      	mov	r7, r1
    5156:	4690      	mov	r8, r2
	return list->head;
    5158:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    515a:	b121      	cbz	r1, 5166 <notify_monitors+0x18>
	return node->next;
    515c:	680c      	ldr	r4, [r1, #0]
    515e:	b13c      	cbz	r4, 5170 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    5160:	b931      	cbnz	r1, 5170 <notify_monitors+0x22>
    5162:	460c      	mov	r4, r1
    5164:	e004      	b.n	5170 <notify_monitors+0x22>
    5166:	460c      	mov	r4, r1
    5168:	e002      	b.n	5170 <notify_monitors+0x22>
    516a:	4623      	mov	r3, r4
    516c:	4621      	mov	r1, r4
    516e:	461c      	mov	r4, r3
    5170:	b169      	cbz	r1, 518e <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    5172:	684d      	ldr	r5, [r1, #4]
    5174:	4643      	mov	r3, r8
    5176:	463a      	mov	r2, r7
    5178:	4630      	mov	r0, r6
    517a:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    517c:	2c00      	cmp	r4, #0
    517e:	d0f4      	beq.n	516a <notify_monitors+0x1c>
	return node->next;
    5180:	6823      	ldr	r3, [r4, #0]
    5182:	2b00      	cmp	r3, #0
    5184:	d0f2      	beq.n	516c <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    5186:	2c00      	cmp	r4, #0
    5188:	d1f0      	bne.n	516c <notify_monitors+0x1e>
    518a:	4623      	mov	r3, r4
    518c:	e7ee      	b.n	516c <notify_monitors+0x1e>
}
    518e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005192 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5192:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    5194:	f013 0307 	ands.w	r3, r3, #7
    5198:	d103      	bne.n	51a2 <process_recheck+0x10>
	return list->head;
    519a:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    519c:	b10a      	cbz	r2, 51a2 <process_recheck+0x10>
		evt = EVT_START;
    519e:	2003      	movs	r0, #3
    51a0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    51a2:	2b02      	cmp	r3, #2
    51a4:	d003      	beq.n	51ae <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    51a6:	2b01      	cmp	r3, #1
    51a8:	d006      	beq.n	51b8 <process_recheck+0x26>
	int evt = EVT_NOP;
    51aa:	2000      	movs	r0, #0
    51ac:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    51ae:	8b42      	ldrh	r2, [r0, #26]
    51b0:	2a00      	cmp	r2, #0
    51b2:	d1f8      	bne.n	51a6 <process_recheck+0x14>
		evt = EVT_STOP;
    51b4:	2004      	movs	r0, #4
    51b6:	4770      	bx	lr
    51b8:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    51ba:	b10b      	cbz	r3, 51c0 <process_recheck+0x2e>
		evt = EVT_RESET;
    51bc:	2005      	movs	r0, #5
}
    51be:	4770      	bx	lr
	int evt = EVT_NOP;
    51c0:	2000      	movs	r0, #0
    51c2:	4770      	bx	lr

000051c4 <process_complete>:
{
    51c4:	b510      	push	{r4, lr}
    51c6:	4604      	mov	r4, r0
    51c8:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    51ca:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    51cc:	2a00      	cmp	r2, #0
    51ce:	db07      	blt.n	51e0 <process_complete+0x1c>
    51d0:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    51d4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    51d6:	2a01      	cmp	r2, #1
    51d8:	d90e      	bls.n	51f8 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    51da:	2b04      	cmp	r3, #4
    51dc:	d036      	beq.n	524c <process_complete+0x88>
}
    51de:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    51e0:	e9d0 0100 	ldrd	r0, r1, [r0]
    51e4:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    51e8:	2300      	movs	r3, #0
    51ea:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    51ec:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    51ee:	2101      	movs	r1, #1
    51f0:	4620      	mov	r0, r4
    51f2:	f7ff ffa4 	bl	513e <set_state>
    51f6:	e7f2      	b.n	51de <process_complete+0x1a>
		*clients = mgr->clients;
    51f8:	e9d0 0100 	ldrd	r0, r1, [r0]
    51fc:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    5200:	2200      	movs	r2, #0
    5202:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    5204:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    5206:	2b06      	cmp	r3, #6
    5208:	d11b      	bne.n	5242 <process_complete+0x7e>
	return list->head;
    520a:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    520e:	b153      	cbz	r3, 5226 <process_complete+0x62>
				mgr->refs += 1U;
    5210:	8b62      	ldrh	r2, [r4, #26]
    5212:	3201      	adds	r2, #1
    5214:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    5216:	461a      	mov	r2, r3
	return node->next;
    5218:	681b      	ldr	r3, [r3, #0]
    521a:	2b00      	cmp	r3, #0
    521c:	d0f7      	beq.n	520e <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    521e:	2a00      	cmp	r2, #0
    5220:	d1f5      	bne.n	520e <process_complete+0x4a>
    5222:	4613      	mov	r3, r2
    5224:	e7f3      	b.n	520e <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    5226:	2102      	movs	r1, #2
    5228:	4620      	mov	r0, r4
    522a:	f7ff ff88 	bl	513e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    522e:	4620      	mov	r0, r4
    5230:	f7ff ffaf 	bl	5192 <process_recheck>
    5234:	2800      	cmp	r0, #0
    5236:	d0d2      	beq.n	51de <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5238:	8b23      	ldrh	r3, [r4, #24]
    523a:	f043 0320 	orr.w	r3, r3, #32
    523e:	8323      	strh	r3, [r4, #24]
    5240:	e7cd      	b.n	51de <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    5242:	2100      	movs	r1, #0
    5244:	4620      	mov	r0, r4
    5246:	f7ff ff7a 	bl	513e <set_state>
    524a:	e7f0      	b.n	522e <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    524c:	2100      	movs	r1, #0
    524e:	f7ff ff76 	bl	513e <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    5252:	4620      	mov	r0, r4
    5254:	f7ff ff9d 	bl	5192 <process_recheck>
    5258:	2800      	cmp	r0, #0
    525a:	d0c0      	beq.n	51de <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    525c:	8b23      	ldrh	r3, [r4, #24]
    525e:	f043 0320 	orr.w	r3, r3, #32
    5262:	8323      	strh	r3, [r4, #24]
}
    5264:	e7bb      	b.n	51de <process_complete+0x1a>

00005266 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    5266:	b150      	cbz	r0, 527e <validate_args+0x18>
{
    5268:	b510      	push	{r4, lr}
    526a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    526c:	b151      	cbz	r1, 5284 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    526e:	1d08      	adds	r0, r1, #4
    5270:	f000 f8c4 	bl	53fc <sys_notify_validate>
	if ((rv == 0)
    5274:	b910      	cbnz	r0, 527c <validate_args+0x16>
	    && ((cli->notify.flags
    5276:	68a3      	ldr	r3, [r4, #8]
    5278:	2b03      	cmp	r3, #3
    527a:	d806      	bhi.n	528a <validate_args+0x24>
}
    527c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    527e:	f06f 0015 	mvn.w	r0, #21
}
    5282:	4770      	bx	lr
		return -EINVAL;
    5284:	f06f 0015 	mvn.w	r0, #21
    5288:	e7f8      	b.n	527c <validate_args+0x16>
		rv = -EINVAL;
    528a:	f06f 0015 	mvn.w	r0, #21
    528e:	e7f5      	b.n	527c <validate_args+0x16>

00005290 <notify_one>:
{
    5290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5294:	4607      	mov	r7, r0
    5296:	460c      	mov	r4, r1
    5298:	4616      	mov	r6, r2
    529a:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    529c:	4619      	mov	r1, r3
    529e:	1d20      	adds	r0, r4, #4
    52a0:	f000 f8c3 	bl	542a <sys_notify_finalize>
	if (cb) {
    52a4:	b128      	cbz	r0, 52b2 <notify_one+0x22>
    52a6:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    52a8:	462b      	mov	r3, r5
    52aa:	4632      	mov	r2, r6
    52ac:	4621      	mov	r1, r4
    52ae:	4638      	mov	r0, r7
    52b0:	47c0      	blx	r8
}
    52b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000052b6 <notify_all>:
{
    52b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52ba:	4680      	mov	r8, r0
    52bc:	460c      	mov	r4, r1
    52be:	4617      	mov	r7, r2
    52c0:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    52c2:	e004      	b.n	52ce <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    52c4:	4633      	mov	r3, r6
    52c6:	463a      	mov	r2, r7
    52c8:	4640      	mov	r0, r8
    52ca:	f7ff ffe1 	bl	5290 <notify_one>
	return list->head;
    52ce:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    52d0:	b131      	cbz	r1, 52e0 <notify_all+0x2a>
	return node->next;
    52d2:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    52d4:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    52d6:	6863      	ldr	r3, [r4, #4]
    52d8:	428b      	cmp	r3, r1
    52da:	d1f3      	bne.n	52c4 <notify_all+0xe>
	list->tail = node;
    52dc:	6065      	str	r5, [r4, #4]
}
    52de:	e7f1      	b.n	52c4 <notify_all+0xe>
}
    52e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000052e4 <transition_complete>:
{
    52e4:	b508      	push	{r3, lr}
	__asm__ volatile(
    52e6:	f04f 0c20 	mov.w	ip, #32
    52ea:	f3ef 8211 	mrs	r2, BASEPRI
    52ee:	f38c 8812 	msr	BASEPRI_MAX, ip
    52f2:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    52f6:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    52f8:	2101      	movs	r1, #1
    52fa:	f7fb f937 	bl	56c <process_event>
}
    52fe:	bd08      	pop	{r3, pc}

00005300 <onoff_manager_init>:
	if ((mgr == NULL)
    5300:	4603      	mov	r3, r0
    5302:	b170      	cbz	r0, 5322 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    5304:	b181      	cbz	r1, 5328 <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    5306:	680a      	ldr	r2, [r1, #0]
    5308:	b18a      	cbz	r2, 532e <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    530a:	684a      	ldr	r2, [r1, #4]
    530c:	b192      	cbz	r2, 5334 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    530e:	2000      	movs	r0, #0
    5310:	6018      	str	r0, [r3, #0]
    5312:	6058      	str	r0, [r3, #4]
    5314:	6098      	str	r0, [r3, #8]
    5316:	60d8      	str	r0, [r3, #12]
    5318:	6118      	str	r0, [r3, #16]
    531a:	6158      	str	r0, [r3, #20]
    531c:	6198      	str	r0, [r3, #24]
    531e:	6119      	str	r1, [r3, #16]
	return 0;
    5320:	4770      	bx	lr
		return -EINVAL;
    5322:	f06f 0015 	mvn.w	r0, #21
    5326:	4770      	bx	lr
    5328:	f06f 0015 	mvn.w	r0, #21
    532c:	4770      	bx	lr
    532e:	f06f 0015 	mvn.w	r0, #21
    5332:	4770      	bx	lr
    5334:	f06f 0015 	mvn.w	r0, #21
}
    5338:	4770      	bx	lr

0000533a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    533a:	b570      	push	{r4, r5, r6, lr}
    533c:	4605      	mov	r5, r0
    533e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    5340:	f7ff ff91 	bl	5266 <validate_args>

	if (rv < 0) {
    5344:	1e04      	subs	r4, r0, #0
    5346:	db30      	blt.n	53aa <onoff_request+0x70>
    5348:	f04f 0320 	mov.w	r3, #32
    534c:	f3ef 8211 	mrs	r2, BASEPRI
    5350:	f383 8812 	msr	BASEPRI_MAX, r3
    5354:	f3bf 8f6f 	isb	sy
    5358:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    535a:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    535e:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    5362:	8b6b      	ldrh	r3, [r5, #26]
    5364:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5368:	428b      	cmp	r3, r1
    536a:	d02c      	beq.n	53c6 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    536c:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    536e:	f1bc 0f02 	cmp.w	ip, #2
    5372:	d008      	beq.n	5386 <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    5374:	f1bc 0f06 	cmp.w	ip, #6
    5378:	d819      	bhi.n	53ae <onoff_request+0x74>
    537a:	e8df f00c 	tbb	[pc, ip]
    537e:	181e      	.short	0x181e
    5380:	2a1e1818 	.word	0x2a1e1818
    5384:	1e          	.byte	0x1e
    5385:	00          	.byte	0x00
		mgr->refs += 1U;
    5386:	3301      	adds	r3, #1
    5388:	836b      	strh	r3, [r5, #26]
		notify = true;
    538a:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    538c:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    538e:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    5390:	b128      	cbz	r0, 539e <onoff_request+0x64>
	parent->next = child;
    5392:	2000      	movs	r0, #0
    5394:	6030      	str	r0, [r6, #0]
	return list->tail;
    5396:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    5398:	b308      	cbz	r0, 53de <onoff_request+0xa4>
	parent->next = child;
    539a:	6006      	str	r6, [r0, #0]
	list->tail = node;
    539c:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    539e:	bb09      	cbnz	r1, 53e4 <onoff_request+0xaa>
	__asm__ volatile(
    53a0:	f38e 8811 	msr	BASEPRI, lr
    53a4:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    53a8:	bb0b      	cbnz	r3, 53ee <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    53aa:	4620      	mov	r0, r4
    53ac:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    53ae:	f06f 0404 	mvn.w	r4, #4
    53b2:	2300      	movs	r3, #0
    53b4:	4619      	mov	r1, r3
    53b6:	4618      	mov	r0, r3
    53b8:	e7ea      	b.n	5390 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    53ba:	fabc f18c 	clz	r1, ip
    53be:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    53c0:	2300      	movs	r3, #0
		add_client = true;
    53c2:	2001      	movs	r0, #1
    53c4:	e7e4      	b.n	5390 <onoff_request+0x56>
		rv = -EAGAIN;
    53c6:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    53ca:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    53cc:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    53ce:	4618      	mov	r0, r3
    53d0:	e7de      	b.n	5390 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    53d2:	f06f 0485 	mvn.w	r4, #133	; 0x85
    53d6:	2300      	movs	r3, #0
    53d8:	4619      	mov	r1, r3
    53da:	4618      	mov	r0, r3
    53dc:	e7d8      	b.n	5390 <onoff_request+0x56>
    53de:	606e      	str	r6, [r5, #4]
	list->head = node;
    53e0:	602e      	str	r6, [r5, #0]
}
    53e2:	e7dc      	b.n	539e <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    53e4:	2102      	movs	r1, #2
    53e6:	4628      	mov	r0, r5
    53e8:	f7fb f8c0 	bl	56c <process_event>
    53ec:	e7dd      	b.n	53aa <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    53ee:	2300      	movs	r3, #0
    53f0:	4662      	mov	r2, ip
    53f2:	4631      	mov	r1, r6
    53f4:	4628      	mov	r0, r5
    53f6:	f7ff ff4b 	bl	5290 <notify_one>
    53fa:	e7d6      	b.n	53aa <onoff_request+0x70>

000053fc <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    53fc:	4602      	mov	r2, r0
    53fe:	b158      	cbz	r0, 5418 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    5400:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    5402:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    5406:	2b01      	cmp	r3, #1
    5408:	d003      	beq.n	5412 <sys_notify_validate+0x16>
    540a:	2b03      	cmp	r3, #3
    540c:	d107      	bne.n	541e <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    540e:	6803      	ldr	r3, [r0, #0]
    5410:	b143      	cbz	r3, 5424 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    5412:	2000      	movs	r0, #0
    5414:	6090      	str	r0, [r2, #8]
    5416:	4770      	bx	lr
		return -EINVAL;
    5418:	f06f 0015 	mvn.w	r0, #21
    541c:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    541e:	f06f 0015 	mvn.w	r0, #21
    5422:	4770      	bx	lr
			rv = -EINVAL;
    5424:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    5428:	4770      	bx	lr

0000542a <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    542a:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    542c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    542e:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    5432:	6081      	str	r1, [r0, #8]
	switch (method) {
    5434:	2a03      	cmp	r2, #3
    5436:	d103      	bne.n	5440 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    5438:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    543a:	2200      	movs	r2, #0
    543c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    543e:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    5440:	2000      	movs	r0, #0
    5442:	e7fa      	b.n	543a <sys_notify_finalize+0x10>

00005444 <extract_decimal>:
{
    5444:	4684      	mov	ip, r0
	const char *sp = *str;
    5446:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    5448:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    544a:	e006      	b.n	545a <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    544c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5450:	3201      	adds	r2, #1
    5452:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    5456:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    545a:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    545c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    5460:	2909      	cmp	r1, #9
    5462:	d9f3      	bls.n	544c <extract_decimal+0x8>
	*str = sp;
    5464:	f8cc 2000 	str.w	r2, [ip]
}
    5468:	4770      	bx	lr

0000546a <extract_width>:
{
    546a:	b530      	push	{r4, r5, lr}
    546c:	b083      	sub	sp, #12
    546e:	4604      	mov	r4, r0
    5470:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    5472:	7803      	ldrb	r3, [r0, #0]
    5474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5478:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    547a:	460d      	mov	r5, r1
    547c:	780b      	ldrb	r3, [r1, #0]
    547e:	2b2a      	cmp	r3, #42	; 0x2a
    5480:	d018      	beq.n	54b4 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    5482:	a801      	add	r0, sp, #4
    5484:	f7ff ffde 	bl	5444 <extract_decimal>
	if (sp != wp) {
    5488:	9b01      	ldr	r3, [sp, #4]
    548a:	429d      	cmp	r5, r3
    548c:	d00f      	beq.n	54ae <extract_width+0x44>
		conv->width_present = true;
    548e:	7823      	ldrb	r3, [r4, #0]
    5490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5494:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    5496:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    5498:	b2db      	uxtb	r3, r3
    549a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    549e:	2800      	cmp	r0, #0
    54a0:	db10      	blt.n	54c4 <extract_width+0x5a>
    54a2:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    54a4:	4313      	orrs	r3, r2
    54a6:	7822      	ldrb	r2, [r4, #0]
    54a8:	f363 0241 	bfi	r2, r3, #1, #1
    54ac:	7022      	strb	r2, [r4, #0]
	return sp;
    54ae:	9801      	ldr	r0, [sp, #4]
}
    54b0:	b003      	add	sp, #12
    54b2:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    54b4:	7843      	ldrb	r3, [r0, #1]
    54b6:	f043 0301 	orr.w	r3, r3, #1
    54ba:	7043      	strb	r3, [r0, #1]
		return ++sp;
    54bc:	4608      	mov	r0, r1
    54be:	3001      	adds	r0, #1
    54c0:	9001      	str	r0, [sp, #4]
    54c2:	e7f5      	b.n	54b0 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    54c4:	2201      	movs	r2, #1
    54c6:	e7ed      	b.n	54a4 <extract_width+0x3a>

000054c8 <extract_prec>:
{
    54c8:	b510      	push	{r4, lr}
    54ca:	b082      	sub	sp, #8
    54cc:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    54ce:	780b      	ldrb	r3, [r1, #0]
    54d0:	2b2e      	cmp	r3, #46	; 0x2e
    54d2:	bf14      	ite	ne
    54d4:	2300      	movne	r3, #0
    54d6:	2301      	moveq	r3, #1
    54d8:	7842      	ldrb	r2, [r0, #1]
    54da:	f363 0241 	bfi	r2, r3, #1, #1
    54de:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    54e0:	b1c3      	cbz	r3, 5514 <extract_prec+0x4c>
    54e2:	4604      	mov	r4, r0
	++sp;
    54e4:	9b01      	ldr	r3, [sp, #4]
    54e6:	1c5a      	adds	r2, r3, #1
    54e8:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    54ea:	785b      	ldrb	r3, [r3, #1]
    54ec:	2b2a      	cmp	r3, #42	; 0x2a
    54ee:	d013      	beq.n	5518 <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    54f0:	a801      	add	r0, sp, #4
    54f2:	f7ff ffa7 	bl	5444 <extract_decimal>
	conv->prec_value = prec;
    54f6:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    54f8:	7823      	ldrb	r3, [r4, #0]
    54fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    54fe:	2800      	cmp	r0, #0
    5500:	db12      	blt.n	5528 <extract_prec+0x60>
    5502:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    5504:	4313      	orrs	r3, r2
    5506:	7822      	ldrb	r2, [r4, #0]
    5508:	f363 0241 	bfi	r2, r3, #1, #1
    550c:	7022      	strb	r2, [r4, #0]
	return sp;
    550e:	9801      	ldr	r0, [sp, #4]
}
    5510:	b002      	add	sp, #8
    5512:	bd10      	pop	{r4, pc}
		return sp;
    5514:	4608      	mov	r0, r1
    5516:	e7fb      	b.n	5510 <extract_prec+0x48>
		conv->prec_star = true;
    5518:	7843      	ldrb	r3, [r0, #1]
    551a:	f043 0304 	orr.w	r3, r3, #4
    551e:	7043      	strb	r3, [r0, #1]
		return ++sp;
    5520:	4610      	mov	r0, r2
    5522:	3001      	adds	r0, #1
    5524:	9001      	str	r0, [sp, #4]
    5526:	e7f3      	b.n	5510 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    5528:	2201      	movs	r2, #1
    552a:	e7eb      	b.n	5504 <extract_prec+0x3c>

0000552c <extract_length>:
{
    552c:	4602      	mov	r2, r0
	switch (*sp) {
    552e:	780b      	ldrb	r3, [r1, #0]
    5530:	3b4c      	subs	r3, #76	; 0x4c
    5532:	2b2e      	cmp	r3, #46	; 0x2e
    5534:	d85b      	bhi.n	55ee <extract_length+0xc2>
    5536:	e8df f003 	tbb	[pc, r3]
    553a:	5a4f      	.short	0x5a4f
    553c:	5a5a5a5a 	.word	0x5a5a5a5a
    5540:	5a5a5a5a 	.word	0x5a5a5a5a
    5544:	5a5a5a5a 	.word	0x5a5a5a5a
    5548:	5a5a5a5a 	.word	0x5a5a5a5a
    554c:	5a5a5a5a 	.word	0x5a5a5a5a
    5550:	5a5a5a5a 	.word	0x5a5a5a5a
    5554:	5a185a5a 	.word	0x5a185a5a
    5558:	5a295a3a 	.word	0x5a295a3a
    555c:	5a5a5a5a 	.word	0x5a5a5a5a
    5560:	5a485a5a 	.word	0x5a485a5a
    5564:	5a5a5a5a 	.word	0x5a5a5a5a
    5568:	41          	.byte	0x41
    5569:	00          	.byte	0x00
		if (*++sp == 'h') {
    556a:	1c48      	adds	r0, r1, #1
    556c:	784b      	ldrb	r3, [r1, #1]
    556e:	2b68      	cmp	r3, #104	; 0x68
    5570:	d005      	beq.n	557e <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    5572:	7853      	ldrb	r3, [r2, #1]
    5574:	2102      	movs	r1, #2
    5576:	f361 03c6 	bfi	r3, r1, #3, #4
    557a:	7053      	strb	r3, [r2, #1]
    557c:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    557e:	7853      	ldrb	r3, [r2, #1]
    5580:	2001      	movs	r0, #1
    5582:	f360 03c6 	bfi	r3, r0, #3, #4
    5586:	7053      	strb	r3, [r2, #1]
			++sp;
    5588:	1c88      	adds	r0, r1, #2
    558a:	4770      	bx	lr
		if (*++sp == 'l') {
    558c:	1c48      	adds	r0, r1, #1
    558e:	784b      	ldrb	r3, [r1, #1]
    5590:	2b6c      	cmp	r3, #108	; 0x6c
    5592:	d005      	beq.n	55a0 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    5594:	7853      	ldrb	r3, [r2, #1]
    5596:	2103      	movs	r1, #3
    5598:	f361 03c6 	bfi	r3, r1, #3, #4
    559c:	7053      	strb	r3, [r2, #1]
    559e:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    55a0:	7853      	ldrb	r3, [r2, #1]
    55a2:	2004      	movs	r0, #4
    55a4:	f360 03c6 	bfi	r3, r0, #3, #4
    55a8:	7053      	strb	r3, [r2, #1]
			++sp;
    55aa:	1c88      	adds	r0, r1, #2
    55ac:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    55ae:	7853      	ldrb	r3, [r2, #1]
    55b0:	2005      	movs	r0, #5
    55b2:	f360 03c6 	bfi	r3, r0, #3, #4
    55b6:	7053      	strb	r3, [r2, #1]
		++sp;
    55b8:	1c48      	adds	r0, r1, #1
		break;
    55ba:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    55bc:	7853      	ldrb	r3, [r2, #1]
    55be:	2006      	movs	r0, #6
    55c0:	f360 03c6 	bfi	r3, r0, #3, #4
    55c4:	7053      	strb	r3, [r2, #1]
		++sp;
    55c6:	1c48      	adds	r0, r1, #1
		break;
    55c8:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    55ca:	7853      	ldrb	r3, [r2, #1]
    55cc:	2007      	movs	r0, #7
    55ce:	f360 03c6 	bfi	r3, r0, #3, #4
    55d2:	7053      	strb	r3, [r2, #1]
		++sp;
    55d4:	1c48      	adds	r0, r1, #1
		break;
    55d6:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    55d8:	7853      	ldrb	r3, [r2, #1]
    55da:	2008      	movs	r0, #8
    55dc:	f360 03c6 	bfi	r3, r0, #3, #4
    55e0:	7053      	strb	r3, [r2, #1]
		++sp;
    55e2:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    55e4:	7813      	ldrb	r3, [r2, #0]
    55e6:	f043 0302 	orr.w	r3, r3, #2
    55ea:	7013      	strb	r3, [r2, #0]
		break;
    55ec:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    55ee:	7853      	ldrb	r3, [r2, #1]
    55f0:	f36f 03c6 	bfc	r3, #3, #4
    55f4:	7053      	strb	r3, [r2, #1]
		break;
    55f6:	4608      	mov	r0, r1
}
    55f8:	4770      	bx	lr

000055fa <extract_specifier>:
{
    55fa:	b500      	push	{lr}
    55fc:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    55fe:	4608      	mov	r0, r1
    5600:	f810 3b01 	ldrb.w	r3, [r0], #1
    5604:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    5606:	2b78      	cmp	r3, #120	; 0x78
    5608:	d817      	bhi.n	563a <extract_specifier+0x40>
    560a:	2b6e      	cmp	r3, #110	; 0x6e
    560c:	d229      	bcs.n	5662 <extract_specifier+0x68>
    560e:	2b69      	cmp	r3, #105	; 0x69
    5610:	d813      	bhi.n	563a <extract_specifier+0x40>
    5612:	2b58      	cmp	r3, #88	; 0x58
    5614:	d317      	bcc.n	5646 <extract_specifier+0x4c>
    5616:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    561a:	fa5f fc8c 	uxtb.w	ip, ip
    561e:	2101      	movs	r1, #1
    5620:	fa01 f10c 	lsl.w	r1, r1, ip
    5624:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    5628:	d114      	bne.n	5654 <extract_specifier+0x5a>
    562a:	f640 0c01 	movw	ip, #2049	; 0x801
    562e:	ea11 0f0c 	tst.w	r1, ip
    5632:	d155      	bne.n	56e0 <extract_specifier+0xe6>
    5634:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    5638:	d13a      	bne.n	56b0 <extract_specifier+0xb6>
		conv->invalid = true;
    563a:	7813      	ldrb	r3, [r2, #0]
    563c:	f043 0301 	orr.w	r3, r3, #1
    5640:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    5642:	2100      	movs	r1, #0
		break;
    5644:	e042      	b.n	56cc <extract_specifier+0xd2>
	switch (conv->specifier) {
    5646:	2b41      	cmp	r3, #65	; 0x41
    5648:	d004      	beq.n	5654 <extract_specifier+0x5a>
    564a:	d3f6      	bcc.n	563a <extract_specifier+0x40>
    564c:	3b45      	subs	r3, #69	; 0x45
    564e:	b2db      	uxtb	r3, r3
    5650:	2b02      	cmp	r3, #2
    5652:	d8f2      	bhi.n	563a <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    5654:	7893      	ldrb	r3, [r2, #2]
    5656:	2104      	movs	r1, #4
    5658:	f361 0302 	bfi	r3, r1, #0, #3
    565c:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    565e:	2101      	movs	r1, #1
			break;
    5660:	e034      	b.n	56cc <extract_specifier+0xd2>
	switch (conv->specifier) {
    5662:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    5666:	b2c9      	uxtb	r1, r1
    5668:	f04f 0c01 	mov.w	ip, #1
    566c:	fa0c fc01 	lsl.w	ip, ip, r1
    5670:	f240 4182 	movw	r1, #1154	; 0x482
    5674:	ea1c 0f01 	tst.w	ip, r1
    5678:	bf14      	ite	ne
    567a:	f04f 0e01 	movne.w	lr, #1
    567e:	f04f 0e00 	moveq.w	lr, #0
    5682:	d12d      	bne.n	56e0 <extract_specifier+0xe6>
    5684:	f01c 0f24 	tst.w	ip, #36	; 0x24
    5688:	bf14      	ite	ne
    568a:	2101      	movne	r1, #1
    568c:	2100      	moveq	r1, #0
    568e:	d139      	bne.n	5704 <extract_specifier+0x10a>
    5690:	f01c 0c01 	ands.w	ip, ip, #1
    5694:	d0d1      	beq.n	563a <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    5696:	7893      	ldrb	r3, [r2, #2]
    5698:	f04f 0e03 	mov.w	lr, #3
    569c:	f36e 0302 	bfi	r3, lr, #0, #3
    56a0:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    56a2:	7853      	ldrb	r3, [r2, #1]
    56a4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    56a8:	2b40      	cmp	r3, #64	; 0x40
    56aa:	d10f      	bne.n	56cc <extract_specifier+0xd2>
			unsupported = true;
    56ac:	4661      	mov	r1, ip
    56ae:	e00d      	b.n	56cc <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    56b0:	7891      	ldrb	r1, [r2, #2]
    56b2:	f04f 0c01 	mov.w	ip, #1
    56b6:	f36c 0102 	bfi	r1, ip, #0, #3
    56ba:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    56bc:	7851      	ldrb	r1, [r2, #1]
    56be:	f001 0178 	and.w	r1, r1, #120	; 0x78
    56c2:	2940      	cmp	r1, #64	; 0x40
    56c4:	d013      	beq.n	56ee <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    56c6:	2b63      	cmp	r3, #99	; 0x63
    56c8:	d018      	beq.n	56fc <extract_specifier+0x102>
	bool unsupported = false;
    56ca:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    56cc:	7813      	ldrb	r3, [r2, #0]
    56ce:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    56d2:	ea41 010c 	orr.w	r1, r1, ip
    56d6:	f361 0341 	bfi	r3, r1, #1, #1
    56da:	7013      	strb	r3, [r2, #0]
}
    56dc:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    56e0:	7891      	ldrb	r1, [r2, #2]
    56e2:	f04f 0c02 	mov.w	ip, #2
    56e6:	f36c 0102 	bfi	r1, ip, #0, #3
    56ea:	7091      	strb	r1, [r2, #2]
    56ec:	e7e6      	b.n	56bc <extract_specifier+0xc2>
			conv->invalid = true;
    56ee:	f892 c000 	ldrb.w	ip, [r2]
    56f2:	f04c 0c01 	orr.w	ip, ip, #1
    56f6:	f882 c000 	strb.w	ip, [r2]
    56fa:	e7e4      	b.n	56c6 <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    56fc:	3900      	subs	r1, #0
    56fe:	bf18      	it	ne
    5700:	2101      	movne	r1, #1
    5702:	e7e3      	b.n	56cc <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    5704:	7893      	ldrb	r3, [r2, #2]
    5706:	f04f 0c03 	mov.w	ip, #3
    570a:	f36c 0302 	bfi	r3, ip, #0, #3
    570e:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    5710:	7853      	ldrb	r3, [r2, #1]
    5712:	f013 0f78 	tst.w	r3, #120	; 0x78
    5716:	d1d9      	bne.n	56cc <extract_specifier+0xd2>
	bool unsupported = false;
    5718:	4671      	mov	r1, lr
    571a:	e7d7      	b.n	56cc <extract_specifier+0xd2>

0000571c <extract_conversion>:
{
    571c:	b510      	push	{r4, lr}
    571e:	4604      	mov	r4, r0
    5720:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    5722:	2300      	movs	r3, #0
    5724:	6023      	str	r3, [r4, #0]
    5726:	6063      	str	r3, [r4, #4]
    5728:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    572a:	784b      	ldrb	r3, [r1, #1]
    572c:	2b25      	cmp	r3, #37	; 0x25
    572e:	d014      	beq.n	575a <extract_conversion+0x3e>
    5730:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    5732:	4620      	mov	r0, r4
    5734:	f7fa ffd0 	bl	6d8 <extract_flags>
    5738:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    573a:	4620      	mov	r0, r4
    573c:	f7ff fe95 	bl	546a <extract_width>
    5740:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    5742:	4620      	mov	r0, r4
    5744:	f7ff fec0 	bl	54c8 <extract_prec>
    5748:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    574a:	4620      	mov	r0, r4
    574c:	f7ff feee 	bl	552c <extract_length>
    5750:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    5752:	4620      	mov	r0, r4
    5754:	f7ff ff51 	bl	55fa <extract_specifier>
}
    5758:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    575a:	3002      	adds	r0, #2
    575c:	70e3      	strb	r3, [r4, #3]
		return sp;
    575e:	e7fb      	b.n	5758 <extract_conversion+0x3c>

00005760 <conversion_radix>:
	switch (specifier) {
    5760:	286f      	cmp	r0, #111	; 0x6f
    5762:	d00c      	beq.n	577e <conversion_radix+0x1e>
    5764:	d905      	bls.n	5772 <conversion_radix+0x12>
    5766:	2870      	cmp	r0, #112	; 0x70
    5768:	d00b      	beq.n	5782 <conversion_radix+0x22>
    576a:	2878      	cmp	r0, #120	; 0x78
    576c:	d10b      	bne.n	5786 <conversion_radix+0x26>
		return 16;
    576e:	2010      	movs	r0, #16
    5770:	4770      	bx	lr
	switch (specifier) {
    5772:	2858      	cmp	r0, #88	; 0x58
    5774:	d001      	beq.n	577a <conversion_radix+0x1a>
    5776:	200a      	movs	r0, #10
    5778:	4770      	bx	lr
		return 16;
    577a:	2010      	movs	r0, #16
    577c:	4770      	bx	lr
		return 8;
    577e:	2008      	movs	r0, #8
    5780:	4770      	bx	lr
		return 16;
    5782:	2010      	movs	r0, #16
    5784:	4770      	bx	lr
	switch (specifier) {
    5786:	200a      	movs	r0, #10
}
    5788:	4770      	bx	lr

0000578a <encode_uint>:
{
    578a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    578e:	4605      	mov	r5, r0
    5790:	460c      	mov	r4, r1
    5792:	4693      	mov	fp, r2
    5794:	4699      	mov	r9, r3
    5796:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
    5798:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    579a:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    579e:	f7ff ffdf 	bl	5760 <conversion_radix>
    57a2:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    57a4:	e015      	b.n	57d2 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    57a6:	f1ba 0f19 	cmp.w	sl, #25
    57aa:	d820      	bhi.n	57ee <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    57ac:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    57ae:	3237      	adds	r2, #55	; 0x37
    57b0:	b2d2      	uxtb	r2, r2
    57b2:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    57b6:	4632      	mov	r2, r6
    57b8:	4643      	mov	r3, r8
    57ba:	4628      	mov	r0, r5
    57bc:	4621      	mov	r1, r4
    57be:	f7fa fcc9 	bl	154 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    57c2:	42b5      	cmp	r5, r6
    57c4:	f174 0400 	sbcs.w	r4, r4, #0
    57c8:	d315      	bcc.n	57f6 <encode_uint+0x6c>
    57ca:	454f      	cmp	r7, r9
    57cc:	d913      	bls.n	57f6 <encode_uint+0x6c>
		value /= radix;
    57ce:	4605      	mov	r5, r0
    57d0:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    57d2:	f04f 0800 	mov.w	r8, #0
    57d6:	4632      	mov	r2, r6
    57d8:	4643      	mov	r3, r8
    57da:	4628      	mov	r0, r5
    57dc:	4621      	mov	r1, r4
    57de:	f7fa fcb9 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    57e2:	2a09      	cmp	r2, #9
    57e4:	d8df      	bhi.n	57a6 <encode_uint+0x1c>
    57e6:	b2d2      	uxtb	r2, r2
    57e8:	3230      	adds	r2, #48	; 0x30
    57ea:	b2d2      	uxtb	r2, r2
    57ec:	e7e1      	b.n	57b2 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    57ee:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    57f0:	3257      	adds	r2, #87	; 0x57
    57f2:	b2d2      	uxtb	r2, r2
    57f4:	e7dd      	b.n	57b2 <encode_uint+0x28>
	if (conv->flag_hash) {
    57f6:	f89b 3000 	ldrb.w	r3, [fp]
    57fa:	f013 0f20 	tst.w	r3, #32
    57fe:	d003      	beq.n	5808 <encode_uint+0x7e>
		if (radix == 8) {
    5800:	2e08      	cmp	r6, #8
    5802:	d004      	beq.n	580e <encode_uint+0x84>
		} else if (radix == 16) {
    5804:	2e10      	cmp	r6, #16
    5806:	d009      	beq.n	581c <encode_uint+0x92>
}
    5808:	4638      	mov	r0, r7
    580a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    580e:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5812:	f043 0308 	orr.w	r3, r3, #8
    5816:	f88b 3002 	strb.w	r3, [fp, #2]
    581a:	e7f5      	b.n	5808 <encode_uint+0x7e>
			conv->altform_0c = true;
    581c:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5820:	f043 0310 	orr.w	r3, r3, #16
    5824:	f88b 3002 	strb.w	r3, [fp, #2]
    5828:	e7ee      	b.n	5808 <encode_uint+0x7e>

0000582a <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    582a:	7843      	ldrb	r3, [r0, #1]
    582c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    5830:	2b07      	cmp	r3, #7
    5832:	d818      	bhi.n	5866 <store_count+0x3c>
    5834:	e8df f003 	tbb	[pc, r3]
    5838:	0a080604 	.word	0x0a080604
    583c:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
    5840:	600a      	str	r2, [r1, #0]
		break;
    5842:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    5844:	700a      	strb	r2, [r1, #0]
		break;
    5846:	4770      	bx	lr
		*(short *)dp = (short)count;
    5848:	800a      	strh	r2, [r1, #0]
		break;
    584a:	4770      	bx	lr
		*(long *)dp = (long)count;
    584c:	600a      	str	r2, [r1, #0]
		break;
    584e:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    5850:	17d3      	asrs	r3, r2, #31
    5852:	600a      	str	r2, [r1, #0]
    5854:	604b      	str	r3, [r1, #4]
		break;
    5856:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    5858:	17d3      	asrs	r3, r2, #31
    585a:	600a      	str	r2, [r1, #0]
    585c:	604b      	str	r3, [r1, #4]
		break;
    585e:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    5860:	600a      	str	r2, [r1, #0]
		break;
    5862:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    5864:	600a      	str	r2, [r1, #0]
}
    5866:	4770      	bx	lr

00005868 <outs>:
{
    5868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    586c:	4607      	mov	r7, r0
    586e:	460e      	mov	r6, r1
    5870:	4614      	mov	r4, r2
    5872:	4698      	mov	r8, r3
	size_t count = 0;
    5874:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5876:	e006      	b.n	5886 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    5878:	4631      	mov	r1, r6
    587a:	f814 0b01 	ldrb.w	r0, [r4], #1
    587e:	47b8      	blx	r7
		if (rc < 0) {
    5880:	2800      	cmp	r0, #0
    5882:	db09      	blt.n	5898 <outs+0x30>
		++count;
    5884:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    5886:	4544      	cmp	r4, r8
    5888:	d3f6      	bcc.n	5878 <outs+0x10>
    588a:	f1b8 0f00 	cmp.w	r8, #0
    588e:	d102      	bne.n	5896 <outs+0x2e>
    5890:	7823      	ldrb	r3, [r4, #0]
    5892:	2b00      	cmp	r3, #0
    5894:	d1f0      	bne.n	5878 <outs+0x10>
	return (int)count;
    5896:	4628      	mov	r0, r5
}
    5898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000589c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    589c:	4770      	bx	lr

0000589e <arch_busy_wait>:

void arch_busy_wait(uint32_t time_us)
{
    589e:	b508      	push	{r3, lr}
	nrfx_coredep_delay_us(time_us);
    58a0:	f7fb fa5c 	bl	d5c <nrfx_coredep_delay_us>
}
    58a4:	bd08      	pop	{r3, pc}

000058a6 <nrf_regulators_system_off>:
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
    58a6:	2301      	movs	r3, #1
    58a8:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    58ac:	f3bf 8f4f 	dsb	sy
        __WFE();
    58b0:	bf20      	wfe
    while (true)
    58b2:	e7fd      	b.n	58b0 <nrf_regulators_system_off+0xa>

000058b4 <pm_state_exit_post_ops>:
    58b4:	2300      	movs	r3, #0
    58b6:	f383 8811 	msr	BASEPRI, r3
    58ba:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    58be:	4770      	bx	lr

000058c0 <z_log_minimal_level_to_char>:
	z_log_minimal_printk("\n"); \
} while (false)

static inline char z_log_minimal_level_to_char(int level)
{
	switch (level) {
    58c0:	3801      	subs	r0, #1
    58c2:	2803      	cmp	r0, #3
    58c4:	d809      	bhi.n	58da <z_log_minimal_level_to_char+0x1a>
    58c6:	e8df f000 	tbb	[pc, r0]
    58ca:	0a02      	.short	0x0a02
    58cc:	0604      	.short	0x0604
    58ce:	2045      	movs	r0, #69	; 0x45
    58d0:	4770      	bx	lr
	case LOG_LEVEL_ERR:
		return 'E';
	case LOG_LEVEL_WRN:
		return 'W';
	case LOG_LEVEL_INF:
		return 'I';
    58d2:	2049      	movs	r0, #73	; 0x49
    58d4:	4770      	bx	lr
	case LOG_LEVEL_DBG:
		return 'D';
    58d6:	2044      	movs	r0, #68	; 0x44
    58d8:	4770      	bx	lr
	default:
		return '?';
    58da:	203f      	movs	r0, #63	; 0x3f
    58dc:	4770      	bx	lr
		return 'W';
    58de:	2057      	movs	r0, #87	; 0x57
	}
}
    58e0:	4770      	bx	lr

000058e2 <z_log_minimal_printk>:
{
    58e2:	b40f      	push	{r0, r1, r2, r3}
    58e4:	b500      	push	{lr}
    58e6:	b083      	sub	sp, #12
    58e8:	a904      	add	r1, sp, #16
    58ea:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    58ee:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    58f0:	f7fa fe2e 	bl	550 <vprintk>
}
    58f4:	b003      	add	sp, #12
    58f6:	f85d eb04 	ldr.w	lr, [sp], #4
    58fa:	b004      	add	sp, #16
    58fc:	4770      	bx	lr

000058fe <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    58fe:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    5900:	f001 021f 	and.w	r2, r1, #31
    5904:	2301      	movs	r3, #1
    5906:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5908:	0949      	lsrs	r1, r1, #5
    590a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    590e:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5910:	e8d0 2fef 	ldaex	r2, [r0]
    5914:	ea02 0c01 	and.w	ip, r2, r1
    5918:	e8c0 cfee 	stlex	lr, ip, [r0]
    591c:	f1be 0f00 	cmp.w	lr, #0
    5920:	d1f6      	bne.n	5910 <atomic_test_and_clear_bit+0x12>

	return (old & mask) != 0;
    5922:	4213      	tst	r3, r2
}
    5924:	bf14      	ite	ne
    5926:	2001      	movne	r0, #1
    5928:	2000      	moveq	r0, #0
    592a:	f85d fb04 	ldr.w	pc, [sp], #4

0000592e <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    592e:	f001 021f 	and.w	r2, r1, #31
    5932:	2301      	movs	r3, #1
    5934:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5936:	0949      	lsrs	r1, r1, #5
    5938:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    593c:	e8d0 2fef 	ldaex	r2, [r0]
    5940:	431a      	orrs	r2, r3
    5942:	e8c0 2fe1 	stlex	r1, r2, [r0]
    5946:	2900      	cmp	r1, #0
    5948:	d1f8      	bne.n	593c <atomic_set_bit+0xe>
}
    594a:	4770      	bx	lr

0000594c <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    594c:	2000      	movs	r0, #0
    594e:	4770      	bx	lr

00005950 <abort_function>:
{
    5950:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5952:	2000      	movs	r0, #0
    5954:	f7fb f9ee 	bl	d34 <sys_reboot>

00005958 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5958:	b538      	push	{r3, r4, r5, lr}
    595a:	4604      	mov	r4, r0

	if (esf != NULL) {
    595c:	460d      	mov	r5, r1
    595e:	b111      	cbz	r1, 5966 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    5960:	4608      	mov	r0, r1
    5962:	f7fb fd21 	bl	13a8 <esf_dump>
	}
	z_fatal_error(reason, esf);
    5966:	4629      	mov	r1, r5
    5968:	4620      	mov	r0, r4
    596a:	f7fe f8c7 	bl	3afc <z_fatal_error>
}
    596e:	bd38      	pop	{r3, r4, r5, pc}

00005970 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    5970:	b508      	push	{r3, lr}
    5972:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5974:	6800      	ldr	r0, [r0, #0]
    5976:	f7ff ffef 	bl	5958 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    597a:	bd08      	pop	{r3, pc}

0000597c <arch_irq_enable>:
{
    597c:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    597e:	b240      	sxtb	r0, r0
    5980:	f7fb fd3a 	bl	13f8 <__NVIC_EnableIRQ>
}
    5984:	bd08      	pop	{r3, pc}

00005986 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    5986:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5988:	3101      	adds	r1, #1
    598a:	b240      	sxtb	r0, r0
    598c:	f7fb fd42 	bl	1414 <__NVIC_SetPriority>
}
    5990:	bd08      	pop	{r3, pc}

00005992 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    5992:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5994:	2100      	movs	r1, #0
    5996:	2001      	movs	r0, #1
    5998:	f7ff ffde 	bl	5958 <z_arm_fatal_error>
}
    599c:	bd08      	pop	{r3, pc}

0000599e <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    599e:	b508      	push	{r3, lr}
	handler();
    59a0:	f7fb fd5a 	bl	1458 <z_SysNmiOnReset>
	z_arm_int_exit();
    59a4:	f7fb fe2a 	bl	15fc <z_arm_exc_exit>
}
    59a8:	bd08      	pop	{r3, pc}

000059aa <configure_builtin_stack_guard>:
	uint32_t guard_start = thread->stack_info.start;
    59aa:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    59ae:	f383 880b 	msr	PSPLIM, r3
}
    59b2:	4770      	bx	lr

000059b4 <memory_fault_recoverable>:
}
    59b4:	2000      	movs	r0, #0
    59b6:	4770      	bx	lr

000059b8 <fault_handle>:
{
    59b8:	b508      	push	{r3, lr}
	*recoverable = false;
    59ba:	2300      	movs	r3, #0
    59bc:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    59be:	1ecb      	subs	r3, r1, #3
    59c0:	2b09      	cmp	r3, #9
    59c2:	d81a      	bhi.n	59fa <fault_handle+0x42>
    59c4:	e8df f003 	tbb	[pc, r3]
    59c8:	110d0905 	.word	0x110d0905
    59cc:	19191919 	.word	0x19191919
    59d0:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    59d2:	4611      	mov	r1, r2
    59d4:	f7fb ffb4 	bl	1940 <hard_fault>
}
    59d8:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    59da:	2100      	movs	r1, #0
    59dc:	f7fb fe5c 	bl	1698 <mem_manage_fault>
		break;
    59e0:	e7fa      	b.n	59d8 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    59e2:	2100      	movs	r1, #0
    59e4:	f7fb fed0 	bl	1788 <bus_fault>
		break;
    59e8:	e7f6      	b.n	59d8 <fault_handle+0x20>
		reason = usage_fault(esf);
    59ea:	f7fb ff41 	bl	1870 <usage_fault>
		break;
    59ee:	e7f3      	b.n	59d8 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    59f0:	4611      	mov	r1, r2
    59f2:	f7fc f807 	bl	1a04 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    59f6:	2000      	movs	r0, #0
		break;
    59f8:	e7ee      	b.n	59d8 <fault_handle+0x20>
		reserved_exception(esf, fault);
    59fa:	f7fc f80d 	bl	1a18 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    59fe:	2000      	movs	r0, #0
	return reason;
    5a00:	e7ea      	b.n	59d8 <fault_handle+0x20>

00005a02 <sys_arch_reboot>:
{
    5a02:	b508      	push	{r3, lr}
	NVIC_SystemReset();
    5a04:	f7fc f8ba 	bl	1b7c <__NVIC_SystemReset>

00005a08 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    5a08:	e840 f000 	tt	r0, r0

int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
    5a0c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    5a10:	d001      	beq.n	5a16 <arm_cmse_mpu_region_get+0xe>
		return addr_info.flags.mpu_region;
    5a12:	b2c0      	uxtb	r0, r0
    5a14:	4770      	bx	lr
	}

	return -EINVAL;
    5a16:	f06f 0015 	mvn.w	r0, #21
}
    5a1a:	4770      	bx	lr

00005a1c <region_init>:
{
    5a1c:	b508      	push	{r3, lr}
		(region_conf->base & MPU_RBAR_BASE_Msk)
    5a1e:	680b      	ldr	r3, [r1, #0]
    5a20:	f023 0c1f 	bic.w	ip, r3, #31
		| (region_conf->attr.rbar &
    5a24:	7a0b      	ldrb	r3, [r1, #8]
    5a26:	f003 0e1f 	and.w	lr, r3, #31
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    5a2a:	68ca      	ldr	r2, [r1, #12]
    5a2c:	f022 021f 	bic.w	r2, r2, #31
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    5a30:	095b      	lsrs	r3, r3, #5
    5a32:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
	mpu_set_region(
    5a36:	f042 0201 	orr.w	r2, r2, #1
    5a3a:	ea4c 010e 	orr.w	r1, ip, lr
    5a3e:	f7fc f931 	bl	1ca4 <mpu_set_region>
}
    5a42:	bd08      	pop	{r3, pc}

00005a44 <mpu_partition_is_valid>:
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
    5a44:	6843      	ldr	r3, [r0, #4]
		&&
    5a46:	2b1f      	cmp	r3, #31
    5a48:	d908      	bls.n	5a5c <mpu_partition_is_valid+0x18>
		&&
    5a4a:	f013 0f1f 	tst.w	r3, #31
    5a4e:	d107      	bne.n	5a60 <mpu_partition_is_valid+0x1c>
		((part->start &
    5a50:	6803      	ldr	r3, [r0, #0]
		&&
    5a52:	f013 0f1f 	tst.w	r3, #31
    5a56:	d005      	beq.n	5a64 <mpu_partition_is_valid+0x20>
    5a58:	2000      	movs	r0, #0
    5a5a:	4770      	bx	lr
    5a5c:	2000      	movs	r0, #0
    5a5e:	4770      	bx	lr
    5a60:	2000      	movs	r0, #0
    5a62:	4770      	bx	lr
    5a64:	2001      	movs	r0, #1
}
    5a66:	4770      	bx	lr

00005a68 <mpu_configure_region>:
{
    5a68:	b510      	push	{r4, lr}
    5a6a:	b084      	sub	sp, #16
	region_conf.base = new_region->start;
    5a6c:	680b      	ldr	r3, [r1, #0]
    5a6e:	9300      	str	r3, [sp, #0]
		&new_region->attr, new_region->start, new_region->size);
    5a70:	684c      	ldr	r4, [r1, #4]
	p_attr->rbar = attr->rbar &
    5a72:	f8b1 c008 	ldrh.w	ip, [r1, #8]
    5a76:	f89d 2008 	ldrb.w	r2, [sp, #8]
    5a7a:	f36c 0204 	bfi	r2, ip, #0, #5
    5a7e:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->mair_idx = attr->mair_idx;
    5a82:	8949      	ldrh	r1, [r1, #10]
    5a84:	b2d2      	uxtb	r2, r2
    5a86:	f361 1247 	bfi	r2, r1, #5, #3
    5a8a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    5a8e:	f023 031f 	bic.w	r3, r3, #31
    5a92:	4423      	add	r3, r4
    5a94:	3b01      	subs	r3, #1
    5a96:	f023 031f 	bic.w	r3, r3, #31
    5a9a:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    5a9c:	4669      	mov	r1, sp
    5a9e:	f7fc f92b 	bl	1cf8 <region_allocate_and_init>
}
    5aa2:	b004      	add	sp, #16
    5aa4:	bd10      	pop	{r4, pc}

00005aa6 <get_region_index>:
{
    5aa6:	b570      	push	{r4, r5, r6, lr}
    5aa8:	4604      	mov	r4, r0
    5aaa:	460e      	mov	r6, r1
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    5aac:	f7ff ffac 	bl	5a08 <arm_cmse_mpu_region_get>
    5ab0:	4605      	mov	r5, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    5ab2:	4434      	add	r4, r6
    5ab4:	1e60      	subs	r0, r4, #1
    5ab6:	f7ff ffa7 	bl	5a08 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    5aba:	4285      	cmp	r5, r0
    5abc:	d101      	bne.n	5ac2 <get_region_index+0x1c>
}
    5abe:	4628      	mov	r0, r5
    5ac0:	bd70      	pop	{r4, r5, r6, pc}
	return -EINVAL;
    5ac2:	f06f 0515 	mvn.w	r5, #21
    5ac6:	e7fa      	b.n	5abe <get_region_index+0x18>

00005ac8 <arm_core_mpu_configure_static_mpu_regions>:
{
    5ac8:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    5aca:	f7fc f9f9 	bl	1ec0 <mpu_configure_static_mpu_regions>
}
    5ace:	bd08      	pop	{r3, pc}

00005ad0 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    5ad0:	b508      	push	{r3, lr}
	if (mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    5ad2:	f7fc f9ff 	bl	1ed4 <mpu_mark_areas_for_dynamic_regions>
}
    5ad6:	bd08      	pop	{r3, pc}

00005ad8 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    5ad8:	4603      	mov	r3, r0
    5ada:	b1a2      	cbz	r2, 5b06 <strncpy+0x2e>
{
    5adc:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    5ade:	780c      	ldrb	r4, [r1, #0]
    5ae0:	b12c      	cbz	r4, 5aee <strncpy+0x16>
		*d = *s;
    5ae2:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    5ae6:	3101      	adds	r1, #1
		d++;
		n--;
    5ae8:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    5aea:	2a00      	cmp	r2, #0
    5aec:	d1f7      	bne.n	5ade <strncpy+0x6>
	}

	while (n > 0) {
    5aee:	b122      	cbz	r2, 5afa <strncpy+0x22>
		*d = '\0';
    5af0:	2100      	movs	r1, #0
    5af2:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    5af6:	3a01      	subs	r2, #1
    5af8:	e7f9      	b.n	5aee <strncpy+0x16>
	}

	return dest;
}
    5afa:	bc10      	pop	{r4}
    5afc:	4770      	bx	lr
		*d = '\0';
    5afe:	2100      	movs	r1, #0
    5b00:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5b04:	3a01      	subs	r2, #1
	while (n > 0) {
    5b06:	2a00      	cmp	r2, #0
    5b08:	d1f9      	bne.n	5afe <strncpy+0x26>
    5b0a:	4770      	bx	lr

00005b0c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    5b0c:	4603      	mov	r3, r0
	size_t n = 0;
    5b0e:	2000      	movs	r0, #0

	while (*s != '\0') {
    5b10:	e001      	b.n	5b16 <strlen+0xa>
		s++;
    5b12:	3301      	adds	r3, #1
		n++;
    5b14:	3001      	adds	r0, #1
	while (*s != '\0') {
    5b16:	781a      	ldrb	r2, [r3, #0]
    5b18:	2a00      	cmp	r2, #0
    5b1a:	d1fa      	bne.n	5b12 <strlen+0x6>
	}

	return n;
}
    5b1c:	4770      	bx	lr

00005b1e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    5b1e:	4603      	mov	r3, r0
	size_t n = 0;
    5b20:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5b22:	e001      	b.n	5b28 <strnlen+0xa>
		s++;
    5b24:	3301      	adds	r3, #1
		n++;
    5b26:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    5b28:	781a      	ldrb	r2, [r3, #0]
    5b2a:	b10a      	cbz	r2, 5b30 <strnlen+0x12>
    5b2c:	4288      	cmp	r0, r1
    5b2e:	d3f9      	bcc.n	5b24 <strnlen+0x6>
	}

	return n;
}
    5b30:	4770      	bx	lr

00005b32 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    5b32:	ea80 0301 	eor.w	r3, r0, r1
    5b36:	f013 0f03 	tst.w	r3, #3
    5b3a:	d001      	beq.n	5b40 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    5b3c:	4603      	mov	r3, r0
    5b3e:	e023      	b.n	5b88 <memcpy+0x56>
    5b40:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    5b42:	f013 0f03 	tst.w	r3, #3
    5b46:	d00f      	beq.n	5b68 <memcpy+0x36>
			if (n == 0) {
    5b48:	b30a      	cbz	r2, 5b8e <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    5b4a:	f811 cb01 	ldrb.w	ip, [r1], #1
    5b4e:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    5b52:	3a01      	subs	r2, #1
    5b54:	e7f5      	b.n	5b42 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    5b56:	f811 cb01 	ldrb.w	ip, [r1], #1
    5b5a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5b5e:	3a01      	subs	r2, #1
	while (n > 0) {
    5b60:	2a00      	cmp	r2, #0
    5b62:	d1f8      	bne.n	5b56 <memcpy+0x24>
	}

	return d;
}
    5b64:	bc10      	pop	{r4}
    5b66:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    5b68:	2a03      	cmp	r2, #3
    5b6a:	d90d      	bls.n	5b88 <memcpy+0x56>
{
    5b6c:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    5b6e:	f851 4b04 	ldr.w	r4, [r1], #4
    5b72:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    5b76:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    5b78:	2a03      	cmp	r2, #3
    5b7a:	d8f8      	bhi.n	5b6e <memcpy+0x3c>
    5b7c:	e7f0      	b.n	5b60 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    5b7e:	f811 cb01 	ldrb.w	ip, [r1], #1
    5b82:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5b86:	3a01      	subs	r2, #1
	while (n > 0) {
    5b88:	2a00      	cmp	r2, #0
    5b8a:	d1f8      	bne.n	5b7e <memcpy+0x4c>
    5b8c:	4770      	bx	lr
}
    5b8e:	4770      	bx	lr

00005b90 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5b90:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    5b94:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5b96:	e002      	b.n	5b9e <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    5b98:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5b9c:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5b9e:	f013 0f03 	tst.w	r3, #3
    5ba2:	d002      	beq.n	5baa <memset+0x1a>
		if (n == 0) {
    5ba4:	2a00      	cmp	r2, #0
    5ba6:	d1f7      	bne.n	5b98 <memset+0x8>
    5ba8:	e00f      	b.n	5bca <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    5baa:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    5bac:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    5bb0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    5bb4:	2a03      	cmp	r2, #3
    5bb6:	d906      	bls.n	5bc6 <memset+0x36>
		*(d_word++) = c_word;
    5bb8:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    5bbc:	3a04      	subs	r2, #4
    5bbe:	e7f9      	b.n	5bb4 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    5bc0:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5bc4:	3a01      	subs	r2, #1
	while (n > 0) {
    5bc6:	2a00      	cmp	r2, #0
    5bc8:	d1fa      	bne.n	5bc0 <memset+0x30>
	}

	return buf;
}
    5bca:	4770      	bx	lr

00005bcc <_stdout_hook_default>:
}
    5bcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5bd0:	4770      	bx	lr

00005bd2 <nrf_clock_is_running>:
    switch (domain)
    5bd2:	2903      	cmp	r1, #3
    5bd4:	d82f      	bhi.n	5c36 <nrf_clock_is_running+0x64>
    5bd6:	e8df f001 	tbb	[pc, r1]
    5bda:	0f02      	.short	0x0f02
    5bdc:	291c      	.short	0x291c
            if (p_clk_src != NULL)
    5bde:	b122      	cbz	r2, 5bea <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5be0:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    5be4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5be8:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5bea:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    5bee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5bf2:	d122      	bne.n	5c3a <nrf_clock_is_running+0x68>
    return false;
    5bf4:	2000      	movs	r0, #0
    5bf6:	4770      	bx	lr
            if (p_clk_src != NULL)
    5bf8:	b122      	cbz	r2, 5c04 <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5bfa:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    5bfe:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5c02:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5c04:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    5c08:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5c0c:	d117      	bne.n	5c3e <nrf_clock_is_running+0x6c>
    return false;
    5c0e:	2000      	movs	r0, #0
    5c10:	4770      	bx	lr
            if (p_clk_src != NULL)
    5c12:	b122      	cbz	r2, 5c1e <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    5c14:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    5c18:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    5c1c:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    5c1e:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    5c22:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5c26:	d10c      	bne.n	5c42 <nrf_clock_is_running+0x70>
    return false;
    5c28:	2000      	movs	r0, #0
    5c2a:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    5c2c:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    5c30:	f3c0 4000 	ubfx	r0, r0, #16, #1
    5c34:	4770      	bx	lr
    switch (domain)
    5c36:	2000      	movs	r0, #0
    5c38:	4770      	bx	lr
                return true;
    5c3a:	2001      	movs	r0, #1
    5c3c:	4770      	bx	lr
                return true;
    5c3e:	2001      	movs	r0, #1
    5c40:	4770      	bx	lr
                return true;
    5c42:	2001      	movs	r0, #1
}
    5c44:	4770      	bx	lr

00005c46 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    5c46:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    5c48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5c4c:	0089      	lsls	r1, r1, #2
    5c4e:	3170      	adds	r1, #112	; 0x70
}
    5c50:	4408      	add	r0, r1
    5c52:	4770      	bx	lr

00005c54 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    5c54:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    5c56:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    5c5a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5c5e:	4770      	bx	lr

00005c60 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    5c60:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    5c62:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    5c66:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5c6a:	4770      	bx	lr

00005c6c <get_status>:
{
    5c6c:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5c6e:	b2c9      	uxtb	r1, r1
    5c70:	f7ff ffe9 	bl	5c46 <get_sub_data>
    5c74:	6880      	ldr	r0, [r0, #8]
}
    5c76:	f000 0007 	and.w	r0, r0, #7
    5c7a:	bd08      	pop	{r3, pc}

00005c7c <set_off_state>:
	__asm__ volatile(
    5c7c:	f04f 0320 	mov.w	r3, #32
    5c80:	f3ef 8211 	mrs	r2, BASEPRI
    5c84:	f383 8812 	msr	BASEPRI_MAX, r3
    5c88:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5c8c:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    5c8e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5c92:	d001      	beq.n	5c98 <set_off_state+0x1c>
    5c94:	428b      	cmp	r3, r1
    5c96:	d107      	bne.n	5ca8 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5c98:	2301      	movs	r3, #1
    5c9a:	6003      	str	r3, [r0, #0]
	int err = 0;
    5c9c:	2000      	movs	r0, #0
	__asm__ volatile(
    5c9e:	f382 8811 	msr	BASEPRI, r2
    5ca2:	f3bf 8f6f 	isb	sy
}
    5ca6:	4770      	bx	lr
		err = -EPERM;
    5ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5cac:	e7f7      	b.n	5c9e <set_off_state+0x22>

00005cae <set_starting_state>:
	__asm__ volatile(
    5cae:	f04f 0320 	mov.w	r3, #32
    5cb2:	f3ef 8211 	mrs	r2, BASEPRI
    5cb6:	f383 8812 	msr	BASEPRI_MAX, r3
    5cba:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    5cbe:	6803      	ldr	r3, [r0, #0]
    5cc0:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5cc4:	f003 0307 	and.w	r3, r3, #7
    5cc8:	2b01      	cmp	r3, #1
    5cca:	d008      	beq.n	5cde <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    5ccc:	458c      	cmp	ip, r1
    5cce:	d009      	beq.n	5ce4 <set_starting_state+0x36>
		err = -EPERM;
    5cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    5cd4:	f382 8811 	msr	BASEPRI, r2
    5cd8:	f3bf 8f6f 	isb	sy
}
    5cdc:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5cde:	6001      	str	r1, [r0, #0]
	int err = 0;
    5ce0:	2000      	movs	r0, #0
    5ce2:	e7f7      	b.n	5cd4 <set_starting_state+0x26>
		err = -EALREADY;
    5ce4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5ce8:	e7f4      	b.n	5cd4 <set_starting_state+0x26>

00005cea <set_on_state>:
	__asm__ volatile(
    5cea:	f04f 0320 	mov.w	r3, #32
    5cee:	f3ef 8211 	mrs	r2, BASEPRI
    5cf2:	f383 8812 	msr	BASEPRI_MAX, r3
    5cf6:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5cfa:	6803      	ldr	r3, [r0, #0]
    5cfc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5d00:	f043 0302 	orr.w	r3, r3, #2
    5d04:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    5d06:	f382 8811 	msr	BASEPRI, r2
    5d0a:	f3bf 8f6f 	isb	sy
}
    5d0e:	4770      	bx	lr

00005d10 <clkstarted_handle>:
{
    5d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5d12:	4606      	mov	r6, r0
    5d14:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    5d16:	f7ff ff96 	bl	5c46 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    5d1a:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    5d1c:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    5d1e:	2300      	movs	r3, #0
    5d20:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    5d24:	f7ff ffe1 	bl	5cea <set_on_state>
	if (callback) {
    5d28:	b11d      	cbz	r5, 5d32 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5d2a:	463a      	mov	r2, r7
    5d2c:	4621      	mov	r1, r4
    5d2e:	4630      	mov	r0, r6
    5d30:	47a8      	blx	r5
}
    5d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005d34 <stop>:
{
    5d34:	b570      	push	{r4, r5, r6, lr}
    5d36:	4606      	mov	r6, r0
    5d38:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5d3a:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5d3c:	4621      	mov	r1, r4
    5d3e:	f7ff ff82 	bl	5c46 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    5d42:	4629      	mov	r1, r5
    5d44:	3008      	adds	r0, #8
    5d46:	f7ff ff99 	bl	5c7c <set_off_state>
	if (err < 0) {
    5d4a:	2800      	cmp	r0, #0
    5d4c:	db06      	blt.n	5d5c <stop+0x28>
	get_sub_config(dev, type)->stop();
    5d4e:	4621      	mov	r1, r4
    5d50:	4630      	mov	r0, r6
    5d52:	f7ff ff7f 	bl	5c54 <get_sub_config>
    5d56:	6843      	ldr	r3, [r0, #4]
    5d58:	4798      	blx	r3
	return 0;
    5d5a:	2000      	movs	r0, #0
}
    5d5c:	bd70      	pop	{r4, r5, r6, pc}

00005d5e <api_stop>:
{
    5d5e:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    5d60:	2280      	movs	r2, #128	; 0x80
    5d62:	f7ff ffe7 	bl	5d34 <stop>
}
    5d66:	bd08      	pop	{r3, pc}

00005d68 <async_start>:
{
    5d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d6c:	4606      	mov	r6, r0
    5d6e:	4690      	mov	r8, r2
    5d70:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5d72:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5d74:	4629      	mov	r1, r5
    5d76:	f7ff ff66 	bl	5c46 <get_sub_data>
    5d7a:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    5d7c:	9906      	ldr	r1, [sp, #24]
    5d7e:	3008      	adds	r0, #8
    5d80:	f7ff ff95 	bl	5cae <set_starting_state>
	if (err < 0) {
    5d84:	2800      	cmp	r0, #0
    5d86:	db09      	blt.n	5d9c <async_start+0x34>
	subdata->cb = cb;
    5d88:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    5d8c:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    5d8e:	4629      	mov	r1, r5
    5d90:	4630      	mov	r0, r6
    5d92:	f7ff ff5f 	bl	5c54 <get_sub_config>
    5d96:	6803      	ldr	r3, [r0, #0]
    5d98:	4798      	blx	r3
	return 0;
    5d9a:	2000      	movs	r0, #0
}
    5d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005da0 <api_start>:
{
    5da0:	b510      	push	{r4, lr}
    5da2:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    5da4:	2480      	movs	r4, #128	; 0x80
    5da6:	9400      	str	r4, [sp, #0]
    5da8:	f7ff ffde 	bl	5d68 <async_start>
}
    5dac:	b002      	add	sp, #8
    5dae:	bd10      	pop	{r4, pc}

00005db0 <onoff_started_callback>:
{
    5db0:	b510      	push	{r4, lr}
    5db2:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    5db4:	b2c9      	uxtb	r1, r1
    5db6:	f7ff ff53 	bl	5c60 <get_onoff_manager>
	notify(mgr, 0);
    5dba:	2100      	movs	r1, #0
    5dbc:	47a0      	blx	r4
}
    5dbe:	bd10      	pop	{r4, pc}

00005dc0 <hfclk_start>:
{
    5dc0:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5dc2:	2001      	movs	r0, #1
    5dc4:	f000 fcef 	bl	67a6 <nrfx_clock_start>
}
    5dc8:	bd08      	pop	{r3, pc}

00005dca <hfclkaudio_start>:
{
    5dca:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5dcc:	2003      	movs	r0, #3
    5dce:	f000 fcea 	bl	67a6 <nrfx_clock_start>
}
    5dd2:	bd08      	pop	{r3, pc}

00005dd4 <hfclk192m_start>:
{
    5dd4:	b508      	push	{r3, lr}
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    5dd6:	2002      	movs	r0, #2
    5dd8:	f000 fce5 	bl	67a6 <nrfx_clock_start>
}
    5ddc:	bd08      	pop	{r3, pc}

00005dde <lfclk_start>:
{
    5dde:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5de0:	2000      	movs	r0, #0
    5de2:	f000 fce0 	bl	67a6 <nrfx_clock_start>
}
    5de6:	bd08      	pop	{r3, pc}

00005de8 <hfclk_stop>:
{
    5de8:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5dea:	2001      	movs	r0, #1
    5dec:	f000 fd50 	bl	6890 <nrfx_clock_stop>
}
    5df0:	bd08      	pop	{r3, pc}

00005df2 <hfclkaudio_stop>:
{
    5df2:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    5df4:	2003      	movs	r0, #3
    5df6:	f000 fd4b 	bl	6890 <nrfx_clock_stop>
}
    5dfa:	bd08      	pop	{r3, pc}

00005dfc <hfclk192m_stop>:
{
    5dfc:	b508      	push	{r3, lr}
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    5dfe:	2002      	movs	r0, #2
    5e00:	f000 fd46 	bl	6890 <nrfx_clock_stop>
}
    5e04:	bd08      	pop	{r3, pc}

00005e06 <lfclk_stop>:
{
    5e06:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5e08:	2000      	movs	r0, #0
    5e0a:	f000 fd41 	bl	6890 <nrfx_clock_stop>
}
    5e0e:	bd08      	pop	{r3, pc}

00005e10 <k_msleep>:
{
    5e10:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    5e12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    5e16:	17c1      	asrs	r1, r0, #31
    5e18:	03c9      	lsls	r1, r1, #15
    5e1a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    5e1e:	03c0      	lsls	r0, r0, #15
    5e20:	f240 33e7 	movw	r3, #999	; 0x3e7
    5e24:	18c0      	adds	r0, r0, r3
    5e26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5e2a:	f04f 0300 	mov.w	r3, #0
    5e2e:	f141 0100 	adc.w	r1, r1, #0
    5e32:	f7fa f98f 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    5e36:	f7fe fd91 	bl	495c <z_impl_k_sleep>
}
    5e3a:	bd08      	pop	{r3, pc}

00005e3c <blocking_start_callback>:
{
    5e3c:	b508      	push	{r3, lr}
    5e3e:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5e40:	f7fe f9bc 	bl	41bc <z_impl_k_sem_give>
}
    5e44:	bd08      	pop	{r3, pc}

00005e46 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    5e46:	460b      	mov	r3, r1
    5e48:	b139      	cbz	r1, 5e5a <sys_slist_remove+0x14>
	return node->next;
    5e4a:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    5e4c:	6019      	str	r1, [r3, #0]
	return list->tail;
    5e4e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    5e50:	428a      	cmp	r2, r1
    5e52:	d009      	beq.n	5e68 <sys_slist_remove+0x22>
	parent->next = child;
    5e54:	2300      	movs	r3, #0
    5e56:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    5e58:	4770      	bx	lr
	return node->next;
    5e5a:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    5e5c:	6003      	str	r3, [r0, #0]
	return list->tail;
    5e5e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    5e60:	428a      	cmp	r2, r1
    5e62:	d1f7      	bne.n	5e54 <sys_slist_remove+0xe>
	list->tail = node;
    5e64:	6043      	str	r3, [r0, #4]
}
    5e66:	e7f5      	b.n	5e54 <sys_slist_remove+0xe>
	list->tail = node;
    5e68:	6043      	str	r3, [r0, #4]
}
    5e6a:	e7f3      	b.n	5e54 <sys_slist_remove+0xe>

00005e6c <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e6c:	b508      	push	{r3, lr}
    5e6e:	460a      	mov	r2, r1
	return list->head;
    5e70:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5e72:	2100      	movs	r1, #0
    5e74:	e001      	b.n	5e7a <sys_slist_find_and_remove+0xe>
    5e76:	4619      	mov	r1, r3
    5e78:	681b      	ldr	r3, [r3, #0]
    5e7a:	b12b      	cbz	r3, 5e88 <sys_slist_find_and_remove+0x1c>
    5e7c:	4293      	cmp	r3, r2
    5e7e:	d1fa      	bne.n	5e76 <sys_slist_find_and_remove+0xa>
    5e80:	f7ff ffe1 	bl	5e46 <sys_slist_remove>
    5e84:	2001      	movs	r0, #1
    5e86:	e000      	b.n	5e8a <sys_slist_find_and_remove+0x1e>
    5e88:	2000      	movs	r0, #0
    5e8a:	bd08      	pop	{r3, pc}

00005e8c <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    5e8c:	b570      	push	{r4, r5, r6, lr}
    5e8e:	4604      	mov	r4, r0
    5e90:	460d      	mov	r5, r1
    5e92:	4616      	mov	r6, r2
	return list->head;
    5e94:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    5e96:	b133      	cbz	r3, 5ea6 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    5e98:	f7ff ffe8 	bl	5e6c <sys_slist_find_and_remove>
    5e9c:	b970      	cbnz	r0, 5ebc <gpio_manage_callback+0x30>
			if (!set) {
    5e9e:	b91e      	cbnz	r6, 5ea8 <gpio_manage_callback+0x1c>
				return -EINVAL;
    5ea0:	f06f 0015 	mvn.w	r0, #21
    5ea4:	e006      	b.n	5eb4 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    5ea6:	b132      	cbz	r2, 5eb6 <gpio_manage_callback+0x2a>
    5ea8:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    5eaa:	602b      	str	r3, [r5, #0]
	list->head = node;
    5eac:	6025      	str	r5, [r4, #0]
	return list->tail;
    5eae:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    5eb0:	b143      	cbz	r3, 5ec4 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5eb2:	2000      	movs	r0, #0
}
    5eb4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    5eb6:	f06f 0015 	mvn.w	r0, #21
    5eba:	e7fb      	b.n	5eb4 <gpio_manage_callback+0x28>
	if (set) {
    5ebc:	2e00      	cmp	r6, #0
    5ebe:	d1f3      	bne.n	5ea8 <gpio_manage_callback+0x1c>
	return 0;
    5ec0:	2000      	movs	r0, #0
    5ec2:	e7f7      	b.n	5eb4 <gpio_manage_callback+0x28>
	list->tail = node;
    5ec4:	6065      	str	r5, [r4, #4]
    5ec6:	2000      	movs	r0, #0
}
    5ec8:	e7f4      	b.n	5eb4 <gpio_manage_callback+0x28>

00005eca <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    5eca:	b570      	push	{r4, r5, r6, lr}
    5ecc:	460e      	mov	r6, r1
    5ece:	4615      	mov	r5, r2
	return list->head;
    5ed0:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5ed2:	b121      	cbz	r1, 5ede <gpio_fire_callbacks+0x14>
	return node->next;
    5ed4:	680c      	ldr	r4, [r1, #0]
    5ed6:	b13c      	cbz	r4, 5ee8 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    5ed8:	b931      	cbnz	r1, 5ee8 <gpio_fire_callbacks+0x1e>
    5eda:	460c      	mov	r4, r1
    5edc:	e004      	b.n	5ee8 <gpio_fire_callbacks+0x1e>
    5ede:	460c      	mov	r4, r1
    5ee0:	e002      	b.n	5ee8 <gpio_fire_callbacks+0x1e>
    5ee2:	4623      	mov	r3, r4
    5ee4:	4621      	mov	r1, r4
    5ee6:	461c      	mov	r4, r3
    5ee8:	b171      	cbz	r1, 5f08 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    5eea:	688a      	ldr	r2, [r1, #8]
    5eec:	402a      	ands	r2, r5
    5eee:	d002      	beq.n	5ef6 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5ef0:	684b      	ldr	r3, [r1, #4]
    5ef2:	4630      	mov	r0, r6
    5ef4:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5ef6:	2c00      	cmp	r4, #0
    5ef8:	d0f3      	beq.n	5ee2 <gpio_fire_callbacks+0x18>
	return node->next;
    5efa:	6823      	ldr	r3, [r4, #0]
    5efc:	2b00      	cmp	r3, #0
    5efe:	d0f1      	beq.n	5ee4 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    5f00:	2c00      	cmp	r4, #0
    5f02:	d1ef      	bne.n	5ee4 <gpio_fire_callbacks+0x1a>
    5f04:	4623      	mov	r3, r4
    5f06:	e7ed      	b.n	5ee4 <gpio_fire_callbacks+0x1a>
		}
	}
}
    5f08:	bd70      	pop	{r4, r5, r6, pc}

00005f0a <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5f0a:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    5f0e:	0580      	lsls	r0, r0, #22
    5f10:	0d80      	lsrs	r0, r0, #22
    5f12:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    5f16:	d033      	beq.n	5f80 <get_drive+0x76>
    5f18:	d816      	bhi.n	5f48 <get_drive+0x3e>
    5f1a:	2806      	cmp	r0, #6
    5f1c:	d02c      	beq.n	5f78 <get_drive+0x6e>
    5f1e:	d906      	bls.n	5f2e <get_drive+0x24>
    5f20:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    5f24:	d10d      	bne.n	5f42 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    5f26:	2301      	movs	r3, #1
    5f28:	700b      	strb	r3, [r1, #0]
	return 0;
    5f2a:	2000      	movs	r0, #0
		break;
    5f2c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5f2e:	b300      	cbz	r0, 5f72 <get_drive+0x68>
    5f30:	2802      	cmp	r0, #2
    5f32:	d103      	bne.n	5f3c <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    5f34:	2304      	movs	r3, #4
    5f36:	700b      	strb	r3, [r1, #0]
	return 0;
    5f38:	2000      	movs	r0, #0
		break;
    5f3a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5f3c:	f06f 0015 	mvn.w	r0, #21
    5f40:	4770      	bx	lr
    5f42:	f06f 0015 	mvn.w	r0, #21
    5f46:	4770      	bx	lr
    5f48:	f240 2302 	movw	r3, #514	; 0x202
    5f4c:	4298      	cmp	r0, r3
    5f4e:	d01b      	beq.n	5f88 <get_drive+0x7e>
    5f50:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    5f54:	d103      	bne.n	5f5e <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    5f56:	2303      	movs	r3, #3
    5f58:	700b      	strb	r3, [r1, #0]
	return 0;
    5f5a:	2000      	movs	r0, #0
		break;
    5f5c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5f5e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    5f62:	d103      	bne.n	5f6c <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    5f64:	2302      	movs	r3, #2
    5f66:	700b      	strb	r3, [r1, #0]
	return 0;
    5f68:	2000      	movs	r0, #0
		break;
    5f6a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5f6c:	f06f 0015 	mvn.w	r0, #21
    5f70:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    5f72:	2000      	movs	r0, #0
    5f74:	7008      	strb	r0, [r1, #0]
		break;
    5f76:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    5f78:	2306      	movs	r3, #6
    5f7a:	700b      	strb	r3, [r1, #0]
	return 0;
    5f7c:	2000      	movs	r0, #0
		break;
    5f7e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    5f80:	2307      	movs	r3, #7
    5f82:	700b      	strb	r3, [r1, #0]
	return 0;
    5f84:	2000      	movs	r0, #0
		break;
    5f86:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    5f88:	2305      	movs	r3, #5
    5f8a:	700b      	strb	r3, [r1, #0]
	return 0;
    5f8c:	2000      	movs	r0, #0
}
    5f8e:	4770      	bx	lr

00005f90 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    5f90:	f010 0f10 	tst.w	r0, #16
    5f94:	d104      	bne.n	5fa0 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    5f96:	f010 0f20 	tst.w	r0, #32
    5f9a:	d103      	bne.n	5fa4 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    5f9c:	2000      	movs	r0, #0
    5f9e:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    5fa0:	2003      	movs	r0, #3
    5fa2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    5fa4:	2001      	movs	r0, #1
}
    5fa6:	4770      	bx	lr

00005fa8 <gpio_nrfx_port_get_raw>:
	return port->config;
    5fa8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5faa:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    5fac:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    5fae:	600b      	str	r3, [r1, #0]
}
    5fb0:	2000      	movs	r0, #0
    5fb2:	4770      	bx	lr

00005fb4 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    5fb4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5fb6:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    5fb8:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    5fbc:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    5fc0:	6098      	str	r0, [r3, #8]
    p_reg->OUTCLR = clr_mask;
    5fc2:	60d9      	str	r1, [r3, #12]
}
    5fc4:	2000      	movs	r0, #0
    5fc6:	4770      	bx	lr

00005fc8 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    5fc8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5fca:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    5fcc:	6099      	str	r1, [r3, #8]
}
    5fce:	2000      	movs	r0, #0
    5fd0:	4770      	bx	lr

00005fd2 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    5fd2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5fd4:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    5fd6:	60d9      	str	r1, [r3, #12]
}
    5fd8:	2000      	movs	r0, #0
    5fda:	4770      	bx	lr

00005fdc <gpio_nrfx_port_toggle_bits>:
	return port->config;
    5fdc:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5fde:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    5fe0:	6853      	ldr	r3, [r2, #4]
	const uint32_t set_mask = value & mask;
    5fe2:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    5fe6:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    5fe8:	6090      	str	r0, [r2, #8]
    p_reg->OUTCLR = clr_mask;
    5fea:	60d3      	str	r3, [r2, #12]
}
    5fec:	2000      	movs	r0, #0
    5fee:	4770      	bx	lr

00005ff0 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    5ff0:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    5ff4:	d007      	beq.n	6006 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5ff6:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    5ffa:	d00d      	beq.n	6018 <get_trigger+0x28>
    5ffc:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    6000:	d008      	beq.n	6014 <get_trigger+0x24>
    6002:	2001      	movs	r0, #1
}
    6004:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    6006:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    600a:	d001      	beq.n	6010 <get_trigger+0x20>
    600c:	2005      	movs	r0, #5
    600e:	4770      	bx	lr
    6010:	2004      	movs	r0, #4
    6012:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6014:	2002      	movs	r0, #2
    6016:	4770      	bx	lr
    6018:	2003      	movs	r0, #3
    601a:	4770      	bx	lr

0000601c <gpio_nrfx_manage_callback>:
{
    601c:	b508      	push	{r3, lr}
	return port->data;
    601e:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6020:	3004      	adds	r0, #4
    6022:	f7ff ff33 	bl	5e8c <gpio_manage_callback>
}
    6026:	bd08      	pop	{r3, pc}

00006028 <nrfx_gpio_handler>:
{
    6028:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    602a:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    602e:	0940      	lsrs	r0, r0, #5
    6030:	f7fc f976 	bl	2320 <get_dev>
	if (port == NULL) {
    6034:	b130      	cbz	r0, 6044 <nrfx_gpio_handler+0x1c>
    6036:	4601      	mov	r1, r0
	return port->data;
    6038:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    603a:	2201      	movs	r2, #1
    603c:	40a2      	lsls	r2, r4
    603e:	3004      	adds	r0, #4
    6040:	f7ff ff43 	bl	5eca <gpio_fire_callbacks>
}
    6044:	bd10      	pop	{r4, pc}

00006046 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    6046:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6048:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    604a:	f04f 0120 	mov.w	r1, #32
    604e:	f3ef 8311 	mrs	r3, BASEPRI
    6052:	f381 8812 	msr	BASEPRI_MAX, r1
    6056:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    605a:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    605e:	b131      	cbz	r1, 606e <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6060:	2100      	movs	r1, #0
    6062:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    6066:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    606a:	2101      	movs	r1, #1
    606c:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    606e:	f383 8811 	msr	BASEPRI, r3
    6072:	f3bf 8f6f 	isb	sy
}
    6076:	4770      	bx	lr

00006078 <uarte_nrfx_isr_int>:
{
    6078:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    607a:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    607c:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    607e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    6082:	f413 7f80 	tst.w	r3, #256	; 0x100
    6086:	d002      	beq.n	608e <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6088:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    608c:	b9d3      	cbnz	r3, 60c4 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    608e:	686b      	ldr	r3, [r5, #4]
    6090:	f013 0f10 	tst.w	r3, #16
    6094:	d015      	beq.n	60c2 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    6096:	f04f 0220 	mov.w	r2, #32
    609a:	f3ef 8311 	mrs	r3, BASEPRI
    609e:	f382 8812 	msr	BASEPRI_MAX, r2
    60a2:	f3bf 8f6f 	isb	sy
    60a6:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    60aa:	b112      	cbz	r2, 60b2 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    60ac:	2200      	movs	r2, #0
    60ae:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    60b2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    60b6:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    60ba:	f383 8811 	msr	BASEPRI, r3
    60be:	f3bf 8f6f 	isb	sy
}
    60c2:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    60c4:	f7ff ffbf 	bl	6046 <endtx_isr>
    60c8:	e7e1      	b.n	608e <uarte_nrfx_isr_int+0x16>

000060ca <uarte_nrfx_configure>:
{
    60ca:	b570      	push	{r4, r5, r6, lr}
    60cc:	b082      	sub	sp, #8
    60ce:	4605      	mov	r5, r0
    60d0:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    60d2:	6906      	ldr	r6, [r0, #16]
	switch (cfg->stop_bits) {
    60d4:	794b      	ldrb	r3, [r1, #5]
    60d6:	2b01      	cmp	r3, #1
    60d8:	d006      	beq.n	60e8 <uarte_nrfx_configure+0x1e>
    60da:	2b03      	cmp	r3, #3
    60dc:	d011      	beq.n	6102 <uarte_nrfx_configure+0x38>
    60de:	f06f 0285 	mvn.w	r2, #133	; 0x85
}
    60e2:	4610      	mov	r0, r2
    60e4:	b002      	add	sp, #8
    60e6:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    60e8:	2300      	movs	r3, #0
    60ea:	f88d 3002 	strb.w	r3, [sp, #2]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    60ee:	79a3      	ldrb	r3, [r4, #6]
    60f0:	2b03      	cmp	r3, #3
    60f2:	d146      	bne.n	6182 <uarte_nrfx_configure+0xb8>
	switch (cfg->flow_ctrl) {
    60f4:	79e3      	ldrb	r3, [r4, #7]
    60f6:	b143      	cbz	r3, 610a <uarte_nrfx_configure+0x40>
    60f8:	2b01      	cmp	r3, #1
    60fa:	d015      	beq.n	6128 <uarte_nrfx_configure+0x5e>
    60fc:	f06f 0285 	mvn.w	r2, #133	; 0x85
    6100:	e7ef      	b.n	60e2 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    6102:	2310      	movs	r3, #16
    6104:	f88d 3002 	strb.w	r3, [sp, #2]
		break;
    6108:	e7f1      	b.n	60ee <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    610a:	2300      	movs	r3, #0
    610c:	f88d 3000 	strb.w	r3, [sp]
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    6110:	2300      	movs	r3, #0
    6112:	f8ad 3004 	strh.w	r3, [sp, #4]
	switch (cfg->parity) {
    6116:	7923      	ldrb	r3, [r4, #4]
    6118:	2b01      	cmp	r3, #1
    611a:	d02a      	beq.n	6172 <uarte_nrfx_configure+0xa8>
    611c:	2b02      	cmp	r3, #2
    611e:	d024      	beq.n	616a <uarte_nrfx_configure+0xa0>
    6120:	b133      	cbz	r3, 6130 <uarte_nrfx_configure+0x66>
    6122:	f06f 0285 	mvn.w	r2, #133	; 0x85
    6126:	e7dc      	b.n	60e2 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    6128:	2301      	movs	r3, #1
    612a:	f88d 3000 	strb.w	r3, [sp]
		break;
    612e:	e7ef      	b.n	6110 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    6130:	f88d 3001 	strb.w	r3, [sp, #1]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    6134:	6821      	ldr	r1, [r4, #0]
    6136:	4628      	mov	r0, r5
    6138:	f7fc fa08 	bl	254c <baudrate_set>
    613c:	4602      	mov	r2, r0
    613e:	bb18      	cbnz	r0, 6188 <uarte_nrfx_configure+0xbe>
	const struct uarte_nrfx_config *config = dev->config;
    6140:	686b      	ldr	r3, [r5, #4]
	return config->uarte_regs;
    6142:	6819      	ldr	r1, [r3, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    6144:	f89d 3001 	ldrb.w	r3, [sp, #1]
                    | (uint32_t)p_cfg->stop
    6148:	f89d 0002 	ldrb.w	r0, [sp, #2]
    614c:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->paritytype
    614e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    6152:	4303      	orrs	r3, r0
                    | (uint32_t)p_cfg->hwfc;
    6154:	f89d 0000 	ldrb.w	r0, [sp]
    6158:	4303      	orrs	r3, r0
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    615a:	f8c1 356c 	str.w	r3, [r1, #1388]	; 0x56c
	data->uart_config = *cfg;
    615e:	3604      	adds	r6, #4
    6160:	e894 0003 	ldmia.w	r4, {r0, r1}
    6164:	e886 0003 	stmia.w	r6, {r0, r1}
	return 0;
    6168:	e7bb      	b.n	60e2 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    616a:	230e      	movs	r3, #14
    616c:	f88d 3001 	strb.w	r3, [sp, #1]
		break;
    6170:	e7e0      	b.n	6134 <uarte_nrfx_configure+0x6a>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    6172:	230e      	movs	r3, #14
    6174:	f88d 3001 	strb.w	r3, [sp, #1]
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    6178:	f44f 7380 	mov.w	r3, #256	; 0x100
    617c:	f8ad 3004 	strh.w	r3, [sp, #4]
		break;
    6180:	e7d8      	b.n	6134 <uarte_nrfx_configure+0x6a>
		return -ENOTSUP;
    6182:	f06f 0285 	mvn.w	r2, #133	; 0x85
    6186:	e7ac      	b.n	60e2 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    6188:	f06f 0285 	mvn.w	r2, #133	; 0x85
    618c:	e7a9      	b.n	60e2 <uarte_nrfx_configure+0x18>

0000618e <uarte_nrfx_config_get>:
{
    618e:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    6190:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    6192:	3304      	adds	r3, #4
    6194:	e893 0003 	ldmia.w	r3, {r0, r1}
    6198:	e882 0003 	stmia.w	r2, {r0, r1}
}
    619c:	2000      	movs	r0, #0
    619e:	4770      	bx	lr

000061a0 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    61a0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    61a2:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    61a4:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    61a8:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    61ac:	4770      	bx	lr

000061ae <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    61ae:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    61b0:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    61b2:	685b      	ldr	r3, [r3, #4]
    61b4:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    61b8:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    61bc:	b929      	cbnz	r1, 61ca <is_tx_ready+0x1c>
    61be:	b933      	cbnz	r3, 61ce <is_tx_ready+0x20>
    61c0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    61c4:	b92b      	cbnz	r3, 61d2 <is_tx_ready+0x24>
    61c6:	2000      	movs	r0, #0
    61c8:	4770      	bx	lr
    61ca:	2001      	movs	r0, #1
    61cc:	4770      	bx	lr
    61ce:	2000      	movs	r0, #0
    61d0:	4770      	bx	lr
    61d2:	2001      	movs	r0, #1
}
    61d4:	4770      	bx	lr

000061d6 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    61d6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    61d8:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    61da:	2208      	movs	r2, #8
    61dc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    61e0:	4770      	bx	lr

000061e2 <tx_start>:
{
    61e2:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    61e4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    61e6:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    61e8:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    61ec:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    61f0:	2200      	movs	r2, #0
    61f2:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    61f6:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    61fa:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    61fe:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6202:	685b      	ldr	r3, [r3, #4]
    6204:	f013 0f10 	tst.w	r3, #16
    6208:	d102      	bne.n	6210 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    620a:	2301      	movs	r3, #1
    620c:	60a3      	str	r3, [r4, #8]
}
    620e:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    6210:	2101      	movs	r1, #1
    6212:	f7ff ffe0 	bl	61d6 <uarte_enable>
    p_reg->INTENSET = mask;
    6216:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    621a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    621e:	e7f4      	b.n	620a <tx_start+0x28>

00006220 <uarte_nrfx_poll_in>:
{
    6220:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    6222:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    6224:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    6226:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6228:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    622c:	b15a      	cbz	r2, 6246 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    622e:	6962      	ldr	r2, [r4, #20]
    6230:	7812      	ldrb	r2, [r2, #0]
    6232:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6234:	2000      	movs	r0, #0
    6236:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    623a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    623e:	2201      	movs	r2, #1
    6240:	601a      	str	r2, [r3, #0]
}
    6242:	bc10      	pop	{r4}
    6244:	4770      	bx	lr
		return -1;
    6246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    624a:	e7fa      	b.n	6242 <uarte_nrfx_poll_in+0x22>

0000624c <k_msleep>:
{
    624c:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    624e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    6252:	17c1      	asrs	r1, r0, #31
    6254:	03c9      	lsls	r1, r1, #15
    6256:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    625a:	03c0      	lsls	r0, r0, #15
    625c:	f240 33e7 	movw	r3, #999	; 0x3e7
    6260:	18c0      	adds	r0, r0, r3
    6262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6266:	f04f 0300 	mov.w	r3, #0
    626a:	f141 0100 	adc.w	r1, r1, #0
    626e:	f7f9 ff71 	bl	154 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    6272:	f7fe fb73 	bl	495c <z_impl_k_sleep>
}
    6276:	bd08      	pop	{r3, pc}

00006278 <wait_tx_ready>:
{
    6278:	b570      	push	{r4, r5, r6, lr}
    627a:	4606      	mov	r6, r0
    627c:	e013      	b.n	62a6 <wait_tx_ready+0x2e>
		if (res) {
    627e:	b17d      	cbz	r5, 62a0 <wait_tx_ready+0x28>
	__asm__ volatile(
    6280:	f04f 0320 	mov.w	r3, #32
    6284:	f3ef 8411 	mrs	r4, BASEPRI
    6288:	f383 8812 	msr	BASEPRI_MAX, r3
    628c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    6290:	4630      	mov	r0, r6
    6292:	f7ff ff8c 	bl	61ae <is_tx_ready>
    6296:	b998      	cbnz	r0, 62c0 <wait_tx_ready+0x48>
	__asm__ volatile(
    6298:	f384 8811 	msr	BASEPRI, r4
    629c:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    62a0:	2001      	movs	r0, #1
    62a2:	f7ff ffd3 	bl	624c <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    62a6:	2464      	movs	r4, #100	; 0x64
    62a8:	4630      	mov	r0, r6
    62aa:	f7ff ff80 	bl	61ae <is_tx_ready>
    62ae:	4605      	mov	r5, r0
    62b0:	2800      	cmp	r0, #0
    62b2:	d1e4      	bne.n	627e <wait_tx_ready+0x6>
    62b4:	2001      	movs	r0, #1
    62b6:	f000 f9ab 	bl	6610 <nrfx_busy_wait>
    62ba:	3c01      	subs	r4, #1
    62bc:	d1f4      	bne.n	62a8 <wait_tx_ready+0x30>
    62be:	e7de      	b.n	627e <wait_tx_ready+0x6>
}
    62c0:	4620      	mov	r0, r4
    62c2:	bd70      	pop	{r4, r5, r6, pc}

000062c4 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    62c4:	b510      	push	{r4, lr}
    62c6:	b082      	sub	sp, #8
    62c8:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    62ca:	aa01      	add	r2, sp, #4
    62cc:	f000 f8e1 	bl	6492 <pinctrl_lookup_state>
	if (ret < 0) {
    62d0:	2800      	cmp	r0, #0
    62d2:	db05      	blt.n	62e0 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    62d4:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    62d6:	6822      	ldr	r2, [r4, #0]
    62d8:	7919      	ldrb	r1, [r3, #4]
    62da:	6818      	ldr	r0, [r3, #0]
    62dc:	f7fc fcac 	bl	2c38 <pinctrl_configure_pins>
}
    62e0:	b002      	add	sp, #8
    62e2:	bd10      	pop	{r4, pc}

000062e4 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    62e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62e8:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    62ea:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    62ec:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    62ee:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    62f2:	2100      	movs	r1, #0
    62f4:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    62f8:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    62fc:	68f8      	ldr	r0, [r7, #12]
    62fe:	f7ff ffe1 	bl	62c4 <pinctrl_apply_state>
	if (err < 0) {
    6302:	1e05      	subs	r5, r0, #0
    6304:	db35      	blt.n	6372 <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    6306:	f108 0104 	add.w	r1, r8, #4
    630a:	4620      	mov	r0, r4
    630c:	f7ff fedd 	bl	60ca <uarte_nrfx_configure>
	if (err) {
    6310:	4605      	mov	r5, r0
    6312:	bb70      	cbnz	r0, 6372 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    6314:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    6316:	f013 0f02 	tst.w	r3, #2
    631a:	d12d      	bne.n	6378 <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    631c:	2308      	movs	r3, #8
    631e:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    6322:	7a3b      	ldrb	r3, [r7, #8]
    6324:	b95b      	cbnz	r3, 633e <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6326:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    632a:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    632e:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6332:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6336:	2301      	movs	r3, #1
    6338:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    633c:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    633e:	687b      	ldr	r3, [r7, #4]
    6340:	f013 0f02 	tst.w	r3, #2
    6344:	d103      	bne.n	634e <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    6346:	f44f 7380 	mov.w	r3, #256	; 0x100
    634a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    634e:	687b      	ldr	r3, [r7, #4]
    6350:	f013 0f10 	tst.w	r3, #16
    6354:	d003      	beq.n	635e <uarte_instance_init+0x7a>
    6356:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    635a:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    635e:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6362:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6366:	2300      	movs	r3, #0
    6368:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    636c:	2301      	movs	r3, #1
    636e:	60b3      	str	r3, [r6, #8]
    6370:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    6372:	4628      	mov	r0, r5
    6374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    6378:	4641      	mov	r1, r8
    637a:	4630      	mov	r0, r6
    637c:	f7fc f9bc 	bl	26f8 <endtx_stoptx_ppi_init>
		if (err < 0) {
    6380:	2800      	cmp	r0, #0
    6382:	dacb      	bge.n	631c <uarte_instance_init+0x38>
			return err;
    6384:	4605      	mov	r5, r0
    6386:	e7f4      	b.n	6372 <uarte_instance_init+0x8e>

00006388 <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    6388:	b510      	push	{r4, lr}
    638a:	4604      	mov	r4, r0
    638c:	2200      	movs	r2, #0
    638e:	2101      	movs	r1, #1
    6390:	2008      	movs	r0, #8
    6392:	f7ff faf8 	bl	5986 <z_arm_irq_priority_set>
    6396:	2008      	movs	r0, #8
    6398:	f7ff faf0 	bl	597c <arch_irq_enable>
    639c:	2100      	movs	r1, #0
    639e:	4620      	mov	r0, r4
    63a0:	f7ff ffa0 	bl	62e4 <uarte_instance_init>
    63a4:	bd10      	pop	{r4, pc}

000063a6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    63a6:	4770      	bx	lr

000063a8 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    63a8:	1a40      	subs	r0, r0, r1
}
    63aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    63ae:	4770      	bx	lr

000063b0 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    63b0:	f100 0350 	add.w	r3, r0, #80	; 0x50
    63b4:	009b      	lsls	r3, r3, #2
    63b6:	b29b      	uxth	r3, r3
    63b8:	f103 2350 	add.w	r3, r3, #1342197760	; 0x50005000
    63bc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    63c0:	2200      	movs	r2, #0
    63c2:	601a      	str	r2, [r3, #0]
    63c4:	681b      	ldr	r3, [r3, #0]
}
    63c6:	4770      	bx	lr

000063c8 <absolute_time_to_cc>:
}
    63c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    63cc:	4770      	bx	lr

000063ce <full_int_lock>:
	__asm__ volatile(
    63ce:	f04f 0320 	mov.w	r3, #32
    63d2:	f3ef 8011 	mrs	r0, BASEPRI
    63d6:	f383 8812 	msr	BASEPRI_MAX, r3
    63da:	f3bf 8f6f 	isb	sy
}
    63de:	4770      	bx	lr

000063e0 <full_int_unlock>:
	__asm__ volatile(
    63e0:	f380 8811 	msr	BASEPRI, r0
    63e4:	f3bf 8f6f 	isb	sy
}
    63e8:	4770      	bx	lr

000063ea <set_absolute_alarm>:
{
    63ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63ec:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    63ee:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    63f2:	f7fc f9b1 	bl	2758 <get_comparator>
    63f6:	4607      	mov	r7, r0
    63f8:	e019      	b.n	642e <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    63fa:	2013      	movs	r0, #19
    63fc:	f000 fcf3 	bl	6de6 <z_impl_k_busy_wait>
}
    6400:	e022      	b.n	6448 <set_absolute_alarm+0x5e>
		event_clear(chan);
    6402:	4630      	mov	r0, r6
    6404:	f7ff ffd4 	bl	63b0 <event_clear>
		event_enable(chan);
    6408:	4630      	mov	r0, r6
    640a:	f7fc f9ad 	bl	2768 <event_enable>
		set_comparator(chan, cc_val);
    640e:	4629      	mov	r1, r5
    6410:	4630      	mov	r0, r6
    6412:	f7fc f997 	bl	2744 <set_comparator>
		now2 = counter();
    6416:	f7fc f9bb 	bl	2790 <counter>
	} while ((now2 != now) &&
    641a:	4284      	cmp	r4, r0
    641c:	d01e      	beq.n	645c <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    641e:	1c81      	adds	r1, r0, #2
    6420:	4628      	mov	r0, r5
    6422:	f7ff ffc1 	bl	63a8 <counter_sub>
	} while ((now2 != now) &&
    6426:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    642a:	d917      	bls.n	645c <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    642c:	462f      	mov	r7, r5
		now = counter();
    642e:	f7fc f9af 	bl	2790 <counter>
    6432:	4604      	mov	r4, r0
		set_comparator(chan, now);
    6434:	4601      	mov	r1, r0
    6436:	4630      	mov	r0, r6
    6438:	f7fc f984 	bl	2744 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    643c:	4621      	mov	r1, r4
    643e:	4638      	mov	r0, r7
    6440:	f7ff ffb2 	bl	63a8 <counter_sub>
    6444:	2801      	cmp	r0, #1
    6446:	d0d8      	beq.n	63fa <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    6448:	1ca7      	adds	r7, r4, #2
    644a:	4639      	mov	r1, r7
    644c:	4628      	mov	r0, r5
    644e:	f7ff ffab 	bl	63a8 <counter_sub>
    6452:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6456:	d9d4      	bls.n	6402 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    6458:	463d      	mov	r5, r7
    645a:	e7d2      	b.n	6402 <set_absolute_alarm+0x18>
}
    645c:	4628      	mov	r0, r5
    645e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006460 <compare_set>:
{
    6460:	b5f0      	push	{r4, r5, r6, r7, lr}
    6462:	b083      	sub	sp, #12
    6464:	4604      	mov	r4, r0
    6466:	4617      	mov	r7, r2
    6468:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    646a:	f7fc f997 	bl	279c <compare_int_lock>
    646e:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    6470:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6472:	9301      	str	r3, [sp, #4]
    6474:	9b08      	ldr	r3, [sp, #32]
    6476:	9300      	str	r3, [sp, #0]
    6478:	463a      	mov	r2, r7
    647a:	462b      	mov	r3, r5
    647c:	4620      	mov	r0, r4
    647e:	f7fc fa69 	bl	2954 <compare_set_nolocks>
    6482:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    6484:	4631      	mov	r1, r6
    6486:	4620      	mov	r0, r4
    6488:	f7fc f9e0 	bl	284c <compare_int_unlock>
}
    648c:	4628      	mov	r0, r5
    648e:	b003      	add	sp, #12
    6490:	bdf0      	pop	{r4, r5, r6, r7, pc}

00006492 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    6492:	b410      	push	{r4}
	*state = &config->states[0];
    6494:	6843      	ldr	r3, [r0, #4]
    6496:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    6498:	e001      	b.n	649e <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    649a:	3408      	adds	r4, #8
    649c:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    649e:	6814      	ldr	r4, [r2, #0]
    64a0:	7a03      	ldrb	r3, [r0, #8]
    64a2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    64a6:	3b01      	subs	r3, #1
    64a8:	f8d0 c004 	ldr.w	ip, [r0, #4]
    64ac:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    64b0:	429c      	cmp	r4, r3
    64b2:	d804      	bhi.n	64be <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    64b4:	7963      	ldrb	r3, [r4, #5]
    64b6:	428b      	cmp	r3, r1
    64b8:	d1ef      	bne.n	649a <pinctrl_lookup_state+0x8>
			return 0;
    64ba:	2000      	movs	r0, #0
    64bc:	e001      	b.n	64c2 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    64be:	f06f 0001 	mvn.w	r0, #1
}
    64c2:	bc10      	pop	{r4}
    64c4:	4770      	bx	lr

000064c6 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    64c6:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    64c8:	f7fe fc26 	bl	4d18 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    64cc:	bd08      	pop	{r3, pc}

000064ce <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    64ce:	b510      	push	{r4, lr}
    64d0:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    64d2:	f7fa fe23 	bl	111c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    64d6:	f7fa ff35 	bl	1344 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    64da:	4620      	mov	r0, r4
    64dc:	f7ff fff3 	bl	64c6 <hw_cc3xx_init_internal>
	return res;
}
    64e0:	bd10      	pop	{r4, pc}

000064e2 <nrf53_errata_42>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    64e2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    64e6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    64ea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    64ee:	2a07      	cmp	r2, #7
    64f0:	d001      	beq.n	64f6 <nrf53_errata_42+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    64f2:	2000      	movs	r0, #0
    64f4:	4770      	bx	lr
                    switch(var2)
    64f6:	3b02      	subs	r3, #2
    64f8:	2b00      	cmp	r3, #0
    64fa:	d804      	bhi.n	6506 <nrf53_errata_42+0x24>
    64fc:	e8df f003 	tbb	[pc, r3]
    6500:	01          	.byte	0x01
    6501:	00          	.byte	0x00
    6502:	2001      	movs	r0, #1
    6504:	4770      	bx	lr
                            return false;
    6506:	2000      	movs	r0, #0
    #endif
}
    6508:	4770      	bx	lr

0000650a <nrf53_errata_46>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    650a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    650e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6512:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6516:	2a07      	cmp	r2, #7
    6518:	d001      	beq.n	651e <nrf53_errata_46+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    651a:	2000      	movs	r0, #0
    651c:	4770      	bx	lr
                    switch(var2)
    651e:	2b04      	cmp	r3, #4
    6520:	d007      	beq.n	6532 <nrf53_errata_46+0x28>
    6522:	d808      	bhi.n	6536 <nrf53_errata_46+0x2c>
    6524:	3b02      	subs	r3, #2
    6526:	2b01      	cmp	r3, #1
    6528:	d801      	bhi.n	652e <nrf53_errata_46+0x24>
    652a:	2001      	movs	r0, #1
    #endif
}
    652c:	4770      	bx	lr
                            return false;
    652e:	2000      	movs	r0, #0
    6530:	4770      	bx	lr
                            return false;
    6532:	2000      	movs	r0, #0
    6534:	4770      	bx	lr
                            return false;
    6536:	2000      	movs	r0, #0
    6538:	4770      	bx	lr

0000653a <nrf53_errata_49>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    653a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    653e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6542:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    6546:	2a07      	cmp	r2, #7
    6548:	d001      	beq.n	654e <nrf53_errata_49+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    654a:	2000      	movs	r0, #0
    654c:	4770      	bx	lr
                    switch(var2)
    654e:	3b02      	subs	r3, #2
    6550:	2b00      	cmp	r3, #0
    6552:	d804      	bhi.n	655e <nrf53_errata_49+0x24>
    6554:	e8df f003 	tbb	[pc, r3]
    6558:	01          	.byte	0x01
    6559:	00          	.byte	0x00
    655a:	2001      	movs	r0, #1
    655c:	4770      	bx	lr
                            return false;
    655e:	2000      	movs	r0, #0
    #endif
}
    6560:	4770      	bx	lr

00006562 <nrf53_errata_55>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    6562:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    6566:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    656a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    656e:	2a07      	cmp	r2, #7
    6570:	d001      	beq.n	6576 <nrf53_errata_55+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    6572:	2000      	movs	r0, #0
    6574:	4770      	bx	lr
                            return true;
    6576:	2001      	movs	r0, #1
    #endif
}
    6578:	4770      	bx	lr

0000657a <nrf53_errata_64>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    657a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    657e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    6582:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    6586:	2a07      	cmp	r2, #7
    6588:	d001      	beq.n	658e <nrf53_errata_64+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    658a:	2000      	movs	r0, #0
    658c:	4770      	bx	lr
                    switch(var2)
    658e:	3b02      	subs	r3, #2
    6590:	2b00      	cmp	r3, #0
    6592:	d804      	bhi.n	659e <nrf53_errata_64+0x24>
    6594:	e8df f003 	tbb	[pc, r3]
    6598:	01          	.byte	0x01
    6599:	00          	.byte	0x00
    659a:	2001      	movs	r0, #1
    659c:	4770      	bx	lr
                            return false;
    659e:	2000      	movs	r0, #0
    #endif
}
    65a0:	4770      	bx	lr

000065a2 <nrf53_errata_69>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    65a2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    65a6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    65aa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    65ae:	2a07      	cmp	r2, #7
    65b0:	d001      	beq.n	65b6 <nrf53_errata_69+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    65b2:	2000      	movs	r0, #0
    65b4:	4770      	bx	lr
                    switch(var2)
    65b6:	3b02      	subs	r3, #2
    65b8:	2b00      	cmp	r3, #0
    65ba:	d804      	bhi.n	65c6 <nrf53_errata_69+0x24>
    65bc:	e8df f003 	tbb	[pc, r3]
    65c0:	01          	.byte	0x01
    65c1:	00          	.byte	0x00
    65c2:	2001      	movs	r0, #1
    65c4:	4770      	bx	lr
                            return false;
    65c6:	2000      	movs	r0, #0
    #endif
}
    65c8:	4770      	bx	lr

000065ca <nrf53_errata_97>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    65ca:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    65ce:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    65d2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)\
             || defined (NRF_NETWORK)
                if (var1 == 0x07)
    65d6:	2a07      	cmp	r2, #7
    65d8:	d001      	beq.n	65de <nrf53_errata_97+0x14>
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    65da:	2000      	movs	r0, #0
    65dc:	4770      	bx	lr
                    switch(var2)
    65de:	3b02      	subs	r3, #2
    65e0:	2b00      	cmp	r3, #0
    65e2:	d804      	bhi.n	65ee <nrf53_errata_97+0x24>
    65e4:	e8df f003 	tbb	[pc, r3]
    65e8:	01          	.byte	0x01
    65e9:	00          	.byte	0x00
    65ea:	2001      	movs	r0, #1
    65ec:	4770      	bx	lr
                            return false;
    65ee:	2000      	movs	r0, #0
    #endif
}
    65f0:	4770      	bx	lr

000065f2 <nrf53_errata_140>:
            #if defined(NRF_APPLICATION)
                #if defined(NRF_TRUSTZONE_NONSECURE)
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000130ul));
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_NS + 0x00000134ul));
                #else
                    uint32_t var1 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000130ul));
    65f2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
    65f6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
                    uint32_t var2 = *((volatile uint32_t *)((uint32_t)NRF_FICR_S + 0x00000134ul));
    65fa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                #endif
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    65fe:	2a07      	cmp	r2, #7
    6600:	d001      	beq.n	6606 <nrf53_errata_140+0x14>
                            return true;
                    }
                }
            #endif
        #endif
        return false;
    6602:	2000      	movs	r0, #0
    6604:	4770      	bx	lr
                            return true;
    6606:	2001      	movs	r0, #1
    #endif
}
    6608:	4770      	bx	lr

0000660a <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    660a:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    660c:	4780      	blx	r0
}
    660e:	bd08      	pop	{r3, pc}

00006610 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    6610:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    6612:	f000 fbe8 	bl	6de6 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    6616:	bd08      	pop	{r3, pc}

00006618 <nrf_clock_is_running>:
    switch (domain)
    6618:	2903      	cmp	r1, #3
    661a:	d82f      	bhi.n	667c <nrf_clock_is_running+0x64>
    661c:	e8df f001 	tbb	[pc, r1]
    6620:	291c0f02 	.word	0x291c0f02
            if (p_clk_src != NULL)
    6624:	b122      	cbz	r2, 6630 <nrf_clock_is_running+0x18>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6626:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    662a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    662e:	7013      	strb	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6630:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    6634:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6638:	d122      	bne.n	6680 <nrf_clock_is_running+0x68>
    return false;
    663a:	2000      	movs	r0, #0
    663c:	4770      	bx	lr
            if (p_clk_src != NULL)
    663e:	b122      	cbz	r2, 664a <nrf_clock_is_running+0x32>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6640:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6644:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6648:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    664a:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    664e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6652:	d117      	bne.n	6684 <nrf_clock_is_running+0x6c>
    return false;
    6654:	2000      	movs	r0, #0
    6656:	4770      	bx	lr
            if (p_clk_src != NULL)
    6658:	b122      	cbz	r2, 6664 <nrf_clock_is_running+0x4c>
                    (nrf_clock_hfclk_t)((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_SRC_Msk)
    665a:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    665e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6662:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    6664:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
    6668:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    666c:	d10c      	bne.n	6688 <nrf_clock_is_running+0x70>
    return false;
    666e:	2000      	movs	r0, #0
    6670:	4770      	bx	lr
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    6672:	f8d0 0454 	ldr.w	r0, [r0, #1108]	; 0x454
    6676:	f3c0 4000 	ubfx	r0, r0, #16, #1
    667a:	4770      	bx	lr
    switch (domain)
    667c:	2000      	movs	r0, #0
    667e:	4770      	bx	lr
                return true;
    6680:	2001      	movs	r0, #1
    6682:	4770      	bx	lr
                return true;
    6684:	2001      	movs	r0, #1
    6686:	4770      	bx	lr
                return true;
    6688:	2001      	movs	r0, #1
}
    668a:	4770      	bx	lr

0000668c <clock_initial_lfclksrc_get>:
}
    668c:	2001      	movs	r0, #1
    668e:	4770      	bx	lr

00006690 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    6690:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6692:	2005      	movs	r0, #5
    6694:	f7fa fed2 	bl	143c <arch_irq_is_enabled>
    6698:	b100      	cbz	r0, 669c <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    669a:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    669c:	2005      	movs	r0, #5
    669e:	f7ff f96d 	bl	597c <arch_irq_enable>
}
    66a2:	e7fa      	b.n	669a <nrfx_power_clock_irq_init+0xa>

000066a4 <clock_stop>:
{
    66a4:	b570      	push	{r4, r5, r6, lr}
    66a6:	b082      	sub	sp, #8
    66a8:	4606      	mov	r6, r0
    switch (domain)
    66aa:	2803      	cmp	r0, #3
    66ac:	d855      	bhi.n	675a <clock_stop+0xb6>
    66ae:	e8df f000 	tbb	[pc, r0]
    66b2:	1702      	.short	0x1702
    66b4:	3123      	.short	0x3123
    p_reg->INTENCLR = mask;
    66b6:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    66ba:	2202      	movs	r2, #2
    66bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    66c0:	2200      	movs	r2, #0
    66c2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    66c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    66ca:	2201      	movs	r2, #1
    66cc:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    66ce:	2301      	movs	r3, #1
    66d0:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    66d4:	429e      	cmp	r6, r3
    66d6:	d02b      	beq.n	6730 <clock_stop+0x8c>
    66d8:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    66da:	f242 7410 	movw	r4, #10000	; 0x2710
    66de:	e02f      	b.n	6740 <clock_stop+0x9c>
    p_reg->INTENCLR = mask;
    66e0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    66e4:	2201      	movs	r2, #1
    66e6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    66ea:	2100      	movs	r1, #0
    66ec:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    66f0:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    66f4:	605a      	str	r2, [r3, #4]
}
    66f6:	e7ea      	b.n	66ce <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    66f8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    66fc:	f44f 7200 	mov.w	r2, #512	; 0x200
    6700:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6704:	2200      	movs	r2, #0
    6706:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    670a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    670e:	2201      	movs	r2, #1
    6710:	625a      	str	r2, [r3, #36]	; 0x24
}
    6712:	e7dc      	b.n	66ce <clock_stop+0x2a>
    p_reg->INTENCLR = mask;
    6714:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6718:	f44f 7280 	mov.w	r2, #256	; 0x100
    671c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6720:	2200      	movs	r2, #0
    6722:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    6726:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    672a:	2201      	movs	r2, #1
    672c:	61da      	str	r2, [r3, #28]
}
    672e:	e7ce      	b.n	66ce <clock_stop+0x2a>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6730:	f10d 0507 	add.w	r5, sp, #7
    6734:	e7d1      	b.n	66da <clock_stop+0x36>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6736:	2001      	movs	r0, #1
    6738:	f7ff ff6a 	bl	6610 <nrfx_busy_wait>
    673c:	3c01      	subs	r4, #1
    673e:	d00c      	beq.n	675a <clock_stop+0xb6>
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    6740:	462a      	mov	r2, r5
    6742:	4631      	mov	r1, r6
    6744:	f04f 2050 	mov.w	r0, #1342197760	; 0x50005000
    6748:	f7ff ff66 	bl	6618 <nrf_clock_is_running>
    674c:	b128      	cbz	r0, 675a <clock_stop+0xb6>
    674e:	2d00      	cmp	r5, #0
    6750:	d0f1      	beq.n	6736 <clock_stop+0x92>
    6752:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6756:	2b01      	cmp	r3, #1
    6758:	d0ed      	beq.n	6736 <clock_stop+0x92>
}
    675a:	b002      	add	sp, #8
    675c:	bd70      	pop	{r4, r5, r6, pc}

0000675e <clock_lfclksrc_tweak>:
{
    675e:	b538      	push	{r3, r4, r5, lr}
    6760:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    6762:	7803      	ldrb	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6764:	2b02      	cmp	r3, #2
    6766:	d006      	beq.n	6776 <clock_lfclksrc_tweak+0x18>
    6768:	2b01      	cmp	r3, #1
    676a:	d000      	beq.n	676e <clock_lfclksrc_tweak+0x10>
    676c:	2300      	movs	r3, #0
    if (!is_correct_clk)
    676e:	461d      	mov	r5, r3
    6770:	b11b      	cbz	r3, 677a <clock_lfclksrc_tweak+0x1c>
}
    6772:	4628      	mov	r0, r5
    6774:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6776:	2301      	movs	r3, #1
    6778:	e7f9      	b.n	676e <clock_lfclksrc_tweak+0x10>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    677a:	2000      	movs	r0, #0
    677c:	f7ff ff92 	bl	66a4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    6780:	f7ff ff84 	bl	668c <clock_initial_lfclksrc_get>
    6784:	7020      	strb	r0, [r4, #0]
    6786:	e7f4      	b.n	6772 <clock_lfclksrc_tweak+0x14>

00006788 <nrfx_clock_enable>:
{
    6788:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    678a:	f7ff ff81 	bl	6690 <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    678e:	f7ff ff7d 	bl	668c <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6792:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6796:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    679a:	2201      	movs	r2, #1
    679c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    67a0:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    67a4:	bd08      	pop	{r3, pc}

000067a6 <nrfx_clock_start>:
    switch (domain)
    67a6:	2803      	cmp	r0, #3
    67a8:	d871      	bhi.n	688e <nrfx_clock_start+0xe8>
    67aa:	e8df f000 	tbb	[pc, r0]
    67ae:	4802      	.short	0x4802
    67b0:	6254      	.short	0x6254
{
    67b2:	b500      	push	{lr}
    67b4:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    67b6:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    67ba:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    67be:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    67c2:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    67c6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    67ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    67ce:	d11d      	bne.n	680c <nrfx_clock_start+0x66>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    67d0:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    67d4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    67d8:	f013 0f01 	tst.w	r3, #1
    67dc:	d11b      	bne.n	6816 <nrfx_clock_start+0x70>
                    lfclksrc = clock_initial_lfclksrc_get();
    67de:	f7ff ff55 	bl	668c <clock_initial_lfclksrc_get>
    67e2:	f88d 0007 	strb.w	r0, [sp, #7]
                nrf_clock_lf_src_set(NRF_CLOCK, lfclksrc);
    67e6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    p_reg->LFCLKSRC = (uint32_t)(source);
    67ea:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    67ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    67f2:	2200      	movs	r2, #0
    67f4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    67f8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    67fc:	2202      	movs	r2, #2
    67fe:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6802:	2201      	movs	r2, #1
    6804:	609a      	str	r2, [r3, #8]
}
    6806:	b003      	add	sp, #12
    6808:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    680c:	f10d 0007 	add.w	r0, sp, #7
    6810:	f7ff ffa5 	bl	675e <clock_lfclksrc_tweak>
    6814:	e7e7      	b.n	67e6 <nrfx_clock_start+0x40>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6816:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    681a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    681e:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    6822:	f88d 3007 	strb.w	r3, [sp, #7]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    6826:	f10d 0007 	add.w	r0, sp, #7
    682a:	f7ff ff98 	bl	675e <clock_lfclksrc_tweak>
    682e:	2800      	cmp	r0, #0
    6830:	d0d9      	beq.n	67e6 <nrfx_clock_start+0x40>
    p_reg->INTENSET = mask;
    6832:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6836:	2202      	movs	r2, #2
    6838:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    683c:	e7e3      	b.n	6806 <nrfx_clock_start+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    683e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6842:	2200      	movs	r2, #0
    6844:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6848:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    684c:	2201      	movs	r2, #1
    684e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6852:	601a      	str	r2, [r3, #0]
}
    6854:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6856:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    685a:	2200      	movs	r2, #0
    685c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    6860:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    6864:	f44f 7200 	mov.w	r2, #512	; 0x200
    6868:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    686c:	2201      	movs	r2, #1
    686e:	621a      	str	r2, [r3, #32]
}
    6870:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6872:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    6876:	2200      	movs	r2, #0
    6878:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    687c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    6880:	f44f 7280 	mov.w	r2, #256	; 0x100
    6884:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6888:	2201      	movs	r2, #1
    688a:	619a      	str	r2, [r3, #24]
}
    688c:	4770      	bx	lr
    688e:	4770      	bx	lr

00006890 <nrfx_clock_stop>:
{
    6890:	b508      	push	{r3, lr}
    clock_stop(domain);
    6892:	f7ff ff07 	bl	66a4 <clock_stop>
}
    6896:	bd08      	pop	{r3, pc}

00006898 <nrf_gpiote_event_configure>:
{
    6898:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    689a:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    689e:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    68a2:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    68a6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    68aa:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    68ae:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    68b2:	0212      	lsls	r2, r2, #8
    68b4:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    68b8:	041b      	lsls	r3, r3, #16
    68ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    68be:	431a      	orrs	r2, r3
    68c0:	4314      	orrs	r4, r2
    68c2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    68c6:	bc10      	pop	{r4}
    68c8:	4770      	bx	lr

000068ca <nrf_gpiote_task_configure>:
{
    68ca:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    68cc:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    68d0:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    68d4:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    68d8:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    68dc:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    68e0:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    68e4:	0212      	lsls	r2, r2, #8
    68e6:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    68ea:	041b      	lsls	r3, r3, #16
    68ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    68f0:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    68f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    68f6:	051b      	lsls	r3, r3, #20
    68f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    68fc:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    68fe:	4314      	orrs	r4, r2
    6900:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    6904:	bc10      	pop	{r4}
    6906:	4770      	bx	lr

00006908 <nrf_gpio_cfg_sense_set>:
{
    6908:	b500      	push	{lr}
    690a:	b085      	sub	sp, #20
    690c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    6910:	f10d 030f 	add.w	r3, sp, #15
    6914:	9301      	str	r3, [sp, #4]
    6916:	2100      	movs	r1, #0
    6918:	9100      	str	r1, [sp, #0]
    691a:	460b      	mov	r3, r1
    691c:	460a      	mov	r2, r1
    691e:	f7fc fc45 	bl	31ac <nrf_gpio_reconfigure>
}
    6922:	b005      	add	sp, #20
    6924:	f85d fb04 	ldr.w	pc, [sp], #4

00006928 <pin_is_task_output>:
{
    6928:	b510      	push	{r4, lr}
    692a:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    692c:	f7fc fcf0 	bl	3310 <pin_is_output>
    6930:	b128      	cbz	r0, 693e <pin_is_task_output+0x16>
    6932:	4620      	mov	r0, r4
    6934:	f7fc fcd6 	bl	32e4 <pin_in_use_by_te>
    6938:	b118      	cbz	r0, 6942 <pin_is_task_output+0x1a>
    693a:	2001      	movs	r0, #1
    693c:	e000      	b.n	6940 <pin_is_task_output+0x18>
    693e:	2000      	movs	r0, #0
}
    6940:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6942:	2000      	movs	r0, #0
    6944:	e7fc      	b.n	6940 <pin_is_task_output+0x18>

00006946 <pin_is_input>:
{
    6946:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    6948:	f7fc fce2 	bl	3310 <pin_is_output>
    694c:	f080 0001 	eor.w	r0, r0, #1
}
    6950:	b2c0      	uxtb	r0, r0
    6952:	bd08      	pop	{r3, pc}

00006954 <gpiote_polarity_to_trigger>:
}
    6954:	4770      	bx	lr

00006956 <gpiote_trigger_to_polarity>:
}
    6956:	4770      	bx	lr

00006958 <is_level>:
}
    6958:	2803      	cmp	r0, #3
    695a:	bf94      	ite	ls
    695c:	2000      	movls	r0, #0
    695e:	2001      	movhi	r0, #1
    6960:	4770      	bx	lr

00006962 <latch_pending_read_and_check>:
{
    6962:	b510      	push	{r4, lr}
    6964:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    6966:	4602      	mov	r2, r0
    6968:	2102      	movs	r1, #2
    696a:	2000      	movs	r0, #0
    696c:	f7fc fc90 	bl	3290 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6970:	2300      	movs	r3, #0
    6972:	2b01      	cmp	r3, #1
    6974:	d804      	bhi.n	6980 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    6976:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    697a:	b91a      	cbnz	r2, 6984 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    697c:	3301      	adds	r3, #1
    697e:	e7f8      	b.n	6972 <latch_pending_read_and_check+0x10>
    return false;
    6980:	2000      	movs	r0, #0
}
    6982:	bd10      	pop	{r4, pc}
            return true;
    6984:	2001      	movs	r0, #1
    6986:	e7fc      	b.n	6982 <latch_pending_read_and_check+0x20>

00006988 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6988:	b160      	cbz	r0, 69a4 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    698a:	68c3      	ldr	r3, [r0, #12]
    698c:	785a      	ldrb	r2, [r3, #1]
    698e:	f012 0f01 	tst.w	r2, #1
    6992:	d003      	beq.n	699c <z_device_is_ready+0x14>
    6994:	781b      	ldrb	r3, [r3, #0]
    6996:	b11b      	cbz	r3, 69a0 <z_device_is_ready+0x18>
    6998:	2000      	movs	r0, #0
    699a:	4770      	bx	lr
    699c:	2000      	movs	r0, #0
    699e:	4770      	bx	lr
    69a0:	2001      	movs	r0, #1
    69a2:	4770      	bx	lr
		return false;
    69a4:	2000      	movs	r0, #0
}
    69a6:	4770      	bx	lr

000069a8 <z_early_memset>:
{
    69a8:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    69aa:	f7ff f8f1 	bl	5b90 <memset>
}
    69ae:	bd08      	pop	{r3, pc}

000069b0 <z_early_memcpy>:
{
    69b0:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    69b2:	f7ff f8be 	bl	5b32 <memcpy>
}
    69b6:	bd08      	pop	{r3, pc}

000069b8 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    69b8:	68c2      	ldr	r2, [r0, #12]
    69ba:	6903      	ldr	r3, [r0, #16]
    69bc:	431a      	orrs	r2, r3
    69be:	f012 0203 	ands.w	r2, r2, #3
    69c2:	d10d      	bne.n	69e0 <create_free_list+0x28>
	slab->free_list = NULL;
    69c4:	2100      	movs	r1, #0
    69c6:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    69c8:	e005      	b.n	69d6 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    69ca:	6941      	ldr	r1, [r0, #20]
    69cc:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    69ce:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    69d0:	68c1      	ldr	r1, [r0, #12]
    69d2:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    69d4:	3201      	adds	r2, #1
    69d6:	6881      	ldr	r1, [r0, #8]
    69d8:	4291      	cmp	r1, r2
    69da:	d8f6      	bhi.n	69ca <create_free_list+0x12>
	return 0;
    69dc:	2000      	movs	r0, #0
    69de:	4770      	bx	lr
		return -EINVAL;
    69e0:	f06f 0015 	mvn.w	r0, #21
}
    69e4:	4770      	bx	lr

000069e6 <k_mem_slab_init>:
{
    69e6:	b510      	push	{r4, lr}
    69e8:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    69ea:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    69ec:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    69ee:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    69f0:	2300      	movs	r3, #0
    69f2:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    69f4:	f7ff ffe0 	bl	69b8 <create_free_list>
	if (rc < 0) {
    69f8:	2800      	cmp	r0, #0
    69fa:	db01      	blt.n	6a00 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    69fc:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    69fe:	6064      	str	r4, [r4, #4]
}
    6a00:	bd10      	pop	{r4, pc}

00006a02 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    6a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a06:	4604      	mov	r4, r0
    6a08:	460d      	mov	r5, r1
	__asm__ volatile(
    6a0a:	f04f 0320 	mov.w	r3, #32
    6a0e:	f3ef 8611 	mrs	r6, BASEPRI
    6a12:	f383 8812 	msr	BASEPRI_MAX, r3
    6a16:	f3bf 8f6f 	isb	sy
    6a1a:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6a1c:	6943      	ldr	r3, [r0, #20]
    6a1e:	b16b      	cbz	r3, 6a3c <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    6a20:	682b      	ldr	r3, [r5, #0]
    6a22:	6962      	ldr	r2, [r4, #20]
    6a24:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    6a26:	682b      	ldr	r3, [r5, #0]
    6a28:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    6a2a:	69a3      	ldr	r3, [r4, #24]
    6a2c:	3b01      	subs	r3, #1
    6a2e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6a30:	f387 8811 	msr	BASEPRI, r7
    6a34:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a3c:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6a40:	f000 f930 	bl	6ca4 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    6a44:	2800      	cmp	r0, #0
    6a46:	d0eb      	beq.n	6a20 <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6a48:	682a      	ldr	r2, [r5, #0]
    6a4a:	2100      	movs	r1, #0
    6a4c:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6a50:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    6a52:	f000 f890 	bl	6b76 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    6a56:	4631      	mov	r1, r6
    6a58:	4640      	mov	r0, r8
    6a5a:	f7fd fc77 	bl	434c <z_reschedule>
			return;
    6a5e:	e7eb      	b.n	6a38 <k_mem_slab_free+0x36>

00006a60 <setup_thread_stack>:
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6a60:	3207      	adds	r2, #7
    6a62:	f022 0207 	bic.w	r2, r2, #7
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    6a66:	f8c0 1098 	str.w	r1, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    6a6a:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    6a6e:	2300      	movs	r3, #0
    6a70:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
}
    6a74:	1888      	adds	r0, r1, r2
    6a76:	4770      	bx	lr

00006a78 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6a78:	f3ef 8005 	mrs	r0, IPSR
}
    6a7c:	3800      	subs	r0, #0
    6a7e:	bf18      	it	ne
    6a80:	2001      	movne	r0, #1
    6a82:	4770      	bx	lr

00006a84 <k_thread_name_get>:
}
    6a84:	3074      	adds	r0, #116	; 0x74
    6a86:	4770      	bx	lr

00006a88 <z_impl_k_thread_start>:
{
    6a88:	b508      	push	{r3, lr}
	z_sched_start(thread);
    6a8a:	f7fd fd89 	bl	45a0 <z_sched_start>
}
    6a8e:	bd08      	pop	{r3, pc}

00006a90 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    6a90:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    6a92:	2400      	movs	r4, #0
    6a94:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    6a96:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    6a98:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    6a9a:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    6a9c:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    6a9e:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    6aa0:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    6aa2:	bc10      	pop	{r4}
    6aa4:	4770      	bx	lr

00006aa6 <z_pm_save_idle_exit>:
{
    6aa6:	b508      	push	{r3, lr}
	pm_system_resume();
    6aa8:	f7fa fa3e 	bl	f28 <pm_system_resume>
	sys_clock_idle_exit();
    6aac:	f7ff fc7b 	bl	63a6 <sys_clock_idle_exit>
}
    6ab0:	bd08      	pop	{r3, pc}

00006ab2 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    6ab2:	4288      	cmp	r0, r1
    6ab4:	da00      	bge.n	6ab8 <new_prio_for_inheritance+0x6>
    6ab6:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    6ab8:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    6abc:	db01      	blt.n	6ac2 <new_prio_for_inheritance+0x10>
    6abe:	4608      	mov	r0, r1
    6ac0:	4770      	bx	lr
    6ac2:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    6ac6:	4770      	bx	lr

00006ac8 <adjust_owner_prio>:
{
    6ac8:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    6aca:	6880      	ldr	r0, [r0, #8]
    6acc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6ad0:	428b      	cmp	r3, r1
    6ad2:	d101      	bne.n	6ad8 <adjust_owner_prio+0x10>
	return false;
    6ad4:	2000      	movs	r0, #0
}
    6ad6:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    6ad8:	f7fd fdb8 	bl	464c <z_set_prio>
    6adc:	e7fb      	b.n	6ad6 <adjust_owner_prio+0xe>

00006ade <z_impl_k_mutex_init>:
{
    6ade:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6ae0:	2000      	movs	r0, #0
    6ae2:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    6ae4:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    6ae6:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    6ae8:	605b      	str	r3, [r3, #4]
}
    6aea:	4770      	bx	lr

00006aec <thread_active_elsewhere>:
}
    6aec:	2000      	movs	r0, #0
    6aee:	4770      	bx	lr

00006af0 <pended_on_thread>:
}
    6af0:	6880      	ldr	r0, [r0, #8]
    6af2:	4770      	bx	lr

00006af4 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    6af4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    6af8:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    6afc:	4283      	cmp	r3, r0
    6afe:	d001      	beq.n	6b04 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    6b00:	1ac0      	subs	r0, r0, r3
    6b02:	4770      	bx	lr
	return 0;
    6b04:	2000      	movs	r0, #0
}
    6b06:	4770      	bx	lr

00006b08 <z_reschedule_irqlock>:
{
    6b08:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6b0a:	4603      	mov	r3, r0
    6b0c:	b928      	cbnz	r0, 6b1a <z_reschedule_irqlock+0x12>
    6b0e:	f3ef 8205 	mrs	r2, IPSR
    6b12:	b912      	cbnz	r2, 6b1a <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    6b14:	f7fa fcc0 	bl	1498 <arch_swap>
	return ret;
    6b18:	e003      	b.n	6b22 <z_reschedule_irqlock+0x1a>
    6b1a:	f383 8811 	msr	BASEPRI, r3
    6b1e:	f3bf 8f6f 	isb	sy
}
    6b22:	bd08      	pop	{r3, pc}

00006b24 <z_reschedule_unlocked>:
{
    6b24:	b508      	push	{r3, lr}
	__asm__ volatile(
    6b26:	f04f 0320 	mov.w	r3, #32
    6b2a:	f3ef 8011 	mrs	r0, BASEPRI
    6b2e:	f383 8812 	msr	BASEPRI_MAX, r3
    6b32:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6b36:	f7ff ffe7 	bl	6b08 <z_reschedule_irqlock>
}
    6b3a:	bd08      	pop	{r3, pc}

00006b3c <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6b3c:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    6b3e:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    6b40:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6b42:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6b44:	2300      	movs	r3, #0
    6b46:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    6b48:	604b      	str	r3, [r1, #4]
}
    6b4a:	4770      	bx	lr

00006b4c <unpend_thread_no_timeout>:
{
    6b4c:	b510      	push	{r4, lr}
    6b4e:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6b50:	f7ff ffce 	bl	6af0 <pended_on_thread>
    6b54:	4621      	mov	r1, r4
    6b56:	f7ff fff1 	bl	6b3c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6b5a:	7b63      	ldrb	r3, [r4, #13]
    6b5c:	f023 0302 	bic.w	r3, r3, #2
    6b60:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6b62:	2300      	movs	r3, #0
    6b64:	60a3      	str	r3, [r4, #8]
}
    6b66:	bd10      	pop	{r4, pc}

00006b68 <z_priq_dumb_best>:
{
    6b68:	4603      	mov	r3, r0
	return list->head == list;
    6b6a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6b6c:	4283      	cmp	r3, r0
    6b6e:	d000      	beq.n	6b72 <z_priq_dumb_best+0xa>
}
    6b70:	4770      	bx	lr
	struct k_thread *thread = NULL;
    6b72:	2000      	movs	r0, #0
	return thread;
    6b74:	e7fc      	b.n	6b70 <z_priq_dumb_best+0x8>

00006b76 <z_ready_thread>:
{
    6b76:	b538      	push	{r3, r4, r5, lr}
    6b78:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    6b7a:	2300      	movs	r3, #0
    6b7c:	f04f 0220 	mov.w	r2, #32
    6b80:	f3ef 8511 	mrs	r5, BASEPRI
    6b84:	f382 8812 	msr	BASEPRI_MAX, r2
    6b88:	f3bf 8f6f 	isb	sy
    6b8c:	e004      	b.n	6b98 <z_ready_thread+0x22>
	__asm__ volatile(
    6b8e:	f385 8811 	msr	BASEPRI, r5
    6b92:	f3bf 8f6f 	isb	sy
    6b96:	2301      	movs	r3, #1
    6b98:	b943      	cbnz	r3, 6bac <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    6b9a:	4620      	mov	r0, r4
    6b9c:	f7ff ffa6 	bl	6aec <thread_active_elsewhere>
    6ba0:	2800      	cmp	r0, #0
    6ba2:	d1f4      	bne.n	6b8e <z_ready_thread+0x18>
			ready_thread(thread);
    6ba4:	4620      	mov	r0, r4
    6ba6:	f7fd fcbf 	bl	4528 <ready_thread>
    6baa:	e7f0      	b.n	6b8e <z_ready_thread+0x18>
}
    6bac:	bd38      	pop	{r3, r4, r5, pc}

00006bae <z_thread_timeout>:
{
    6bae:	b570      	push	{r4, r5, r6, lr}
    6bb0:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    6bb2:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    6bb6:	2300      	movs	r3, #0
	__asm__ volatile(
    6bb8:	f04f 0220 	mov.w	r2, #32
    6bbc:	f3ef 8511 	mrs	r5, BASEPRI
    6bc0:	f382 8812 	msr	BASEPRI_MAX, r2
    6bc4:	f3bf 8f6f 	isb	sy
    6bc8:	e011      	b.n	6bee <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6bca:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6bce:	f023 0204 	bic.w	r2, r3, #4
    6bd2:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6bd6:	f023 0314 	bic.w	r3, r3, #20
    6bda:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6bde:	4630      	mov	r0, r6
    6be0:	f7fd fca2 	bl	4528 <ready_thread>
	__asm__ volatile(
    6be4:	f385 8811 	msr	BASEPRI, r5
    6be8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6bec:	2301      	movs	r3, #1
    6bee:	b963      	cbnz	r3, 6c0a <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    6bf0:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    6bf4:	f013 0f28 	tst.w	r3, #40	; 0x28
    6bf8:	d1f4      	bne.n	6be4 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    6bfa:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6bfe:	2b00      	cmp	r3, #0
    6c00:	d0e3      	beq.n	6bca <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
    6c02:	4630      	mov	r0, r6
    6c04:	f7ff ffa2 	bl	6b4c <unpend_thread_no_timeout>
    6c08:	e7df      	b.n	6bca <z_thread_timeout+0x1c>
}
    6c0a:	bd70      	pop	{r4, r5, r6, pc}

00006c0c <unpend_all>:
{
    6c0c:	b538      	push	{r3, r4, r5, lr}
    6c0e:	4605      	mov	r5, r0
	return list->head == list;
    6c10:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c12:	42a5      	cmp	r5, r4
    6c14:	d00e      	beq.n	6c34 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6c16:	b16c      	cbz	r4, 6c34 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    6c18:	4620      	mov	r0, r4
    6c1a:	f7ff ff97 	bl	6b4c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6c1e:	f104 0018 	add.w	r0, r4, #24
    6c22:	f000 f87c 	bl	6d1e <z_abort_timeout>
    6c26:	2300      	movs	r3, #0
    6c28:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    6c2c:	4620      	mov	r0, r4
    6c2e:	f7fd fc7b 	bl	4528 <ready_thread>
    6c32:	e7ed      	b.n	6c10 <unpend_all+0x4>
}
    6c34:	bd38      	pop	{r3, r4, r5, pc}

00006c36 <add_to_waitq_locked>:
{
    6c36:	b570      	push	{r4, r5, r6, lr}
    6c38:	4605      	mov	r5, r0
    6c3a:	460e      	mov	r6, r1
	unready_thread(thread);
    6c3c:	f7fd fcce 	bl	45dc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6c40:	7b6b      	ldrb	r3, [r5, #13]
    6c42:	f043 0302 	orr.w	r3, r3, #2
    6c46:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    6c48:	b1fe      	cbz	r6, 6c8a <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    6c4a:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    6c4c:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c4e:	42a6      	cmp	r6, r4
    6c50:	d108      	bne.n	6c64 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c52:	2400      	movs	r4, #0
    6c54:	e006      	b.n	6c64 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    6c56:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    6c58:	606b      	str	r3, [r5, #4]
	node->next = successor;
    6c5a:	602c      	str	r4, [r5, #0]
	prev->next = node;
    6c5c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6c5e:	6065      	str	r5, [r4, #4]
}
    6c60:	e013      	b.n	6c8a <add_to_waitq_locked+0x54>
    6c62:	2400      	movs	r4, #0
    6c64:	b164      	cbz	r4, 6c80 <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6c66:	4621      	mov	r1, r4
    6c68:	4628      	mov	r0, r5
    6c6a:	f7ff ff43 	bl	6af4 <z_sched_prio_cmp>
    6c6e:	2800      	cmp	r0, #0
    6c70:	dcf1      	bgt.n	6c56 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6c72:	2c00      	cmp	r4, #0
    6c74:	d0f6      	beq.n	6c64 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    6c76:	6873      	ldr	r3, [r6, #4]
    6c78:	429c      	cmp	r4, r3
    6c7a:	d0f2      	beq.n	6c62 <add_to_waitq_locked+0x2c>
    6c7c:	6824      	ldr	r4, [r4, #0]
    6c7e:	e7f1      	b.n	6c64 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    6c80:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    6c82:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    6c84:	606b      	str	r3, [r5, #4]
	tail->next = node;
    6c86:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6c88:	6075      	str	r5, [r6, #4]
}
    6c8a:	bd70      	pop	{r4, r5, r6, pc}

00006c8c <pend_locked>:
{
    6c8c:	b570      	push	{r4, r5, r6, lr}
    6c8e:	4604      	mov	r4, r0
    6c90:	4616      	mov	r6, r2
    6c92:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    6c94:	f7ff ffcf 	bl	6c36 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    6c98:	4632      	mov	r2, r6
    6c9a:	462b      	mov	r3, r5
    6c9c:	4620      	mov	r0, r4
    6c9e:	f7fd faf7 	bl	4290 <add_thread_timeout>
}
    6ca2:	bd70      	pop	{r4, r5, r6, pc}

00006ca4 <z_unpend_first_thread>:
{
    6ca4:	b570      	push	{r4, r5, r6, lr}
    6ca6:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    6ca8:	2300      	movs	r3, #0
	__asm__ volatile(
    6caa:	f04f 0220 	mov.w	r2, #32
    6cae:	f3ef 8511 	mrs	r5, BASEPRI
    6cb2:	f382 8812 	msr	BASEPRI_MAX, r2
    6cb6:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    6cba:	461c      	mov	r4, r3
    6cbc:	e004      	b.n	6cc8 <z_unpend_first_thread+0x24>
	__asm__ volatile(
    6cbe:	f385 8811 	msr	BASEPRI, r5
    6cc2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    6cc6:	2301      	movs	r3, #1
    6cc8:	b963      	cbnz	r3, 6ce4 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    6cca:	4630      	mov	r0, r6
    6ccc:	f7ff ff4c 	bl	6b68 <z_priq_dumb_best>
		if (thread != NULL) {
    6cd0:	4604      	mov	r4, r0
    6cd2:	2800      	cmp	r0, #0
    6cd4:	d0f3      	beq.n	6cbe <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    6cd6:	f7ff ff39 	bl	6b4c <unpend_thread_no_timeout>
    6cda:	f104 0018 	add.w	r0, r4, #24
    6cde:	f000 f81e 	bl	6d1e <z_abort_timeout>
    6ce2:	e7ec      	b.n	6cbe <z_unpend_first_thread+0x1a>
}
    6ce4:	4620      	mov	r0, r4
    6ce6:	bd70      	pop	{r4, r5, r6, pc}

00006ce8 <init_ready_q>:
	sys_dlist_init(&rq->runq);
    6ce8:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    6cea:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    6cec:	6083      	str	r3, [r0, #8]
}
    6cee:	4770      	bx	lr

00006cf0 <remove_timeout>:
{
    6cf0:	b510      	push	{r4, lr}
    6cf2:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    6cf4:	f7fd febe 	bl	4a74 <next>
    6cf8:	b148      	cbz	r0, 6d0e <remove_timeout+0x1e>
    6cfa:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    6cfc:	6903      	ldr	r3, [r0, #16]
    6cfe:	6941      	ldr	r1, [r0, #20]
    6d00:	6920      	ldr	r0, [r4, #16]
    6d02:	181b      	adds	r3, r3, r0
    6d04:	6960      	ldr	r0, [r4, #20]
    6d06:	eb41 0100 	adc.w	r1, r1, r0
    6d0a:	6113      	str	r3, [r2, #16]
    6d0c:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    6d0e:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    6d10:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    6d12:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6d14:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6d16:	2300      	movs	r3, #0
    6d18:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    6d1a:	6063      	str	r3, [r4, #4]
}
    6d1c:	bd10      	pop	{r4, pc}

00006d1e <z_abort_timeout>:
{
    6d1e:	b570      	push	{r4, r5, r6, lr}
    6d20:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    6d22:	2300      	movs	r3, #0
	__asm__ volatile(
    6d24:	f04f 0220 	mov.w	r2, #32
    6d28:	f3ef 8611 	mrs	r6, BASEPRI
    6d2c:	f382 8812 	msr	BASEPRI_MAX, r2
    6d30:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    6d34:	f06f 0015 	mvn.w	r0, #21
    6d38:	e004      	b.n	6d44 <z_abort_timeout+0x26>
	__asm__ volatile(
    6d3a:	f386 8811 	msr	BASEPRI, r6
    6d3e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6d42:	2301      	movs	r3, #1
    6d44:	461d      	mov	r5, r3
    6d46:	b93b      	cbnz	r3, 6d58 <z_abort_timeout+0x3a>
	return node->next != NULL;
    6d48:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    6d4a:	2b00      	cmp	r3, #0
    6d4c:	d0f5      	beq.n	6d3a <z_abort_timeout+0x1c>
			remove_timeout(to);
    6d4e:	4620      	mov	r0, r4
    6d50:	f7ff ffce 	bl	6cf0 <remove_timeout>
			ret = 0;
    6d54:	4628      	mov	r0, r5
    6d56:	e7f0      	b.n	6d3a <z_abort_timeout+0x1c>
}
    6d58:	bd70      	pop	{r4, r5, r6, pc}

00006d5a <z_get_next_timeout_expiry>:
{
    6d5a:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    6d5c:	2300      	movs	r3, #0
	__asm__ volatile(
    6d5e:	f04f 0220 	mov.w	r2, #32
    6d62:	f3ef 8411 	mrs	r4, BASEPRI
    6d66:	f382 8812 	msr	BASEPRI_MAX, r2
    6d6a:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    6d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6d72:	e006      	b.n	6d82 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    6d74:	f7fd fe96 	bl	4aa4 <next_timeout>
	__asm__ volatile(
    6d78:	f384 8811 	msr	BASEPRI, r4
    6d7c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6d80:	2301      	movs	r3, #1
    6d82:	2b00      	cmp	r3, #0
    6d84:	d0f6      	beq.n	6d74 <z_get_next_timeout_expiry+0x1a>
}
    6d86:	bd10      	pop	{r4, pc}

00006d88 <z_set_timeout_expiry>:
{
    6d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d8a:	4606      	mov	r6, r0
    6d8c:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    6d8e:	2300      	movs	r3, #0
	__asm__ volatile(
    6d90:	f04f 0220 	mov.w	r2, #32
    6d94:	f3ef 8511 	mrs	r5, BASEPRI
    6d98:	f382 8812 	msr	BASEPRI_MAX, r2
    6d9c:	f3bf 8f6f 	isb	sy
    6da0:	e00a      	b.n	6db8 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    6da2:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    6da4:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    6da8:	2801      	cmp	r0, #1
    6daa:	dd00      	ble.n	6dae <z_set_timeout_expiry+0x26>
    6dac:	b97c      	cbnz	r4, 6dce <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    6dae:	f385 8811 	msr	BASEPRI, r5
    6db2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6db6:	2301      	movs	r3, #1
    6db8:	461c      	mov	r4, r3
    6dba:	b97b      	cbnz	r3, 6ddc <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    6dbc:	f7fd fe72 	bl	4aa4 <next_timeout>
			      || (ticks <= next_to);
    6dc0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    6dc4:	d0ed      	beq.n	6da2 <z_set_timeout_expiry+0x1a>
    6dc6:	42b0      	cmp	r0, r6
    6dc8:	dbec      	blt.n	6da4 <z_set_timeout_expiry+0x1c>
    6dca:	2401      	movs	r4, #1
    6dcc:	e7ea      	b.n	6da4 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    6dce:	4639      	mov	r1, r7
    6dd0:	42b0      	cmp	r0, r6
    6dd2:	bfa8      	it	ge
    6dd4:	4630      	movge	r0, r6
    6dd6:	f7fb feaf 	bl	2b38 <sys_clock_set_timeout>
    6dda:	e7e8      	b.n	6dae <z_set_timeout_expiry+0x26>
}
    6ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006dde <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    6dde:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6de0:	f7fd ff72 	bl	4cc8 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6de4:	bd08      	pop	{r3, pc}

00006de6 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6de6:	b900      	cbnz	r0, 6dea <z_impl_k_busy_wait+0x4>
    6de8:	4770      	bx	lr
{
    6dea:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    6dec:	f7fe fd57 	bl	589e <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6df0:	bd08      	pop	{r3, pc}

00006df2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6df2:	4770      	bx	lr
