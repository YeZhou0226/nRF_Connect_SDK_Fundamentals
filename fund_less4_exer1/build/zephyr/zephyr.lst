
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	c0 1d 00 20 9d 16 00 00 a3 53 00 00 55 16 00 00     ... .....S..U...
  10:	55 16 00 00 55 16 00 00 55 16 00 00 00 00 00 00     U...U...U.......
	...
  2c:	b1 12 00 00 55 16 00 00 00 00 00 00 59 12 00 00     ....U.......Y...
  3c:	55 16 00 00                                         U...

00000040 <_irq_vector_table>:
  40:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
  50:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
  60:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
  70:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
  80:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
  90:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
  a0:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
  b0:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
  c0:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
  d0:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
  e0:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................
  f0:	89 13 00 00 89 13 00 00 89 13 00 00 89 13 00 00     ................

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     138:	4686      	mov	lr, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e08      	ldr	r6, [sp, #32]
     140:	4615      	mov	r5, r2
     142:	4674      	mov	r4, lr
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c2 	bne.w	2d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x163>
     14c:	4285      	cmp	r5, r0
     14e:	fab2 f282 	clz	r2, r2
     152:	d945      	bls.n	1e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x73>
     154:	b14a      	cbz	r2, 16a <__data_size+0x1a>
     156:	f1c2 0320 	rsb	r3, r2, #32
     15a:	fa00 fc02 	lsl.w	ip, r0, r2
     15e:	fa2e f303 	lsr.w	r3, lr, r3
     162:	4095      	lsls	r5, r2
     164:	ea43 0c0c 	orr.w	ip, r3, ip
     168:	4094      	lsls	r4, r2
     16a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     16e:	b2a8      	uxth	r0, r5
     170:	fbbc f8fe 	udiv	r8, ip, lr
     174:	0c23      	lsrs	r3, r4, #16
     176:	fb0e cc18 	mls	ip, lr, r8, ip
     17a:	fb08 f900 	mul.w	r9, r8, r0
     17e:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     182:	4599      	cmp	r9, r3
     184:	d928      	bls.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     186:	18eb      	adds	r3, r5, r3
     188:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
     18c:	d204      	bcs.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     18e:	4599      	cmp	r9, r3
     190:	d902      	bls.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     192:	f1a8 0702 	sub.w	r7, r8, #2
     196:	442b      	add	r3, r5
     198:	eba3 0309 	sub.w	r3, r3, r9
     19c:	b2a4      	uxth	r4, r4
     19e:	fbb3 fcfe 	udiv	ip, r3, lr
     1a2:	fb0e 331c 	mls	r3, lr, ip, r3
     1a6:	fb0c f000 	mul.w	r0, ip, r0
     1aa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1ae:	42a0      	cmp	r0, r4
     1b0:	d914      	bls.n	1dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6f>
     1b2:	192c      	adds	r4, r5, r4
     1b4:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     1b8:	d204      	bcs.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1ba:	42a0      	cmp	r0, r4
     1bc:	d902      	bls.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1be:	f1ac 0302 	sub.w	r3, ip, #2
     1c2:	442c      	add	r4, r5
     1c4:	1a24      	subs	r4, r4, r0
     1c6:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     1ca:	b11e      	cbz	r6, 1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     1cc:	40d4      	lsrs	r4, r2
     1ce:	2300      	movs	r3, #0
     1d0:	6034      	str	r4, [r6, #0]
     1d2:	6073      	str	r3, [r6, #4]
     1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d8:	4647      	mov	r7, r8
     1da:	e7dd      	b.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     1dc:	4663      	mov	r3, ip
     1de:	e7f1      	b.n	1c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x57>
     1e0:	bb92      	cbnz	r2, 248 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xdb>
     1e2:	1b43      	subs	r3, r0, r5
     1e4:	2101      	movs	r1, #1
     1e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1ea:	b2af      	uxth	r7, r5
     1ec:	fbb3 fcfe 	udiv	ip, r3, lr
     1f0:	0c20      	lsrs	r0, r4, #16
     1f2:	fb0e 331c 	mls	r3, lr, ip, r3
     1f6:	fb0c f807 	mul.w	r8, ip, r7
     1fa:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1fe:	4598      	cmp	r8, r3
     200:	d962      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     202:	18eb      	adds	r3, r5, r3
     204:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     208:	d204      	bcs.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20a:	4598      	cmp	r8, r3
     20c:	d902      	bls.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     20e:	f1ac 0002 	sub.w	r0, ip, #2
     212:	442b      	add	r3, r5
     214:	eba3 0308 	sub.w	r3, r3, r8
     218:	b2a4      	uxth	r4, r4
     21a:	fbb3 fcfe 	udiv	ip, r3, lr
     21e:	fb0e 331c 	mls	r3, lr, ip, r3
     222:	fb0c f707 	mul.w	r7, ip, r7
     226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     22a:	42a7      	cmp	r7, r4
     22c:	d94e      	bls.n	2cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15f>
     22e:	192c      	adds	r4, r5, r4
     230:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     234:	d204      	bcs.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     236:	42a7      	cmp	r7, r4
     238:	d902      	bls.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     23a:	f1ac 0302 	sub.w	r3, ip, #2
     23e:	442c      	add	r4, r5
     240:	1be4      	subs	r4, r4, r7
     242:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     246:	e7c0      	b.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     248:	f1c2 0320 	rsb	r3, r2, #32
     24c:	fa20 f103 	lsr.w	r1, r0, r3
     250:	4095      	lsls	r5, r2
     252:	4090      	lsls	r0, r2
     254:	fa2e f303 	lsr.w	r3, lr, r3
     258:	4303      	orrs	r3, r0
     25a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     25e:	b2af      	uxth	r7, r5
     260:	fbb1 fcfe 	udiv	ip, r1, lr
     264:	fb0e 101c 	mls	r0, lr, ip, r1
     268:	0c19      	lsrs	r1, r3, #16
     26a:	fb0c f807 	mul.w	r8, ip, r7
     26e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     272:	4588      	cmp	r8, r1
     274:	fa04 f402 	lsl.w	r4, r4, r2
     278:	d922      	bls.n	2c0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x153>
     27a:	1869      	adds	r1, r5, r1
     27c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     280:	d204      	bcs.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     282:	4588      	cmp	r8, r1
     284:	d902      	bls.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     286:	f1ac 0002 	sub.w	r0, ip, #2
     28a:	4429      	add	r1, r5
     28c:	eba1 0108 	sub.w	r1, r1, r8
     290:	b29b      	uxth	r3, r3
     292:	fbb1 fcfe 	udiv	ip, r1, lr
     296:	fb0e 111c 	mls	r1, lr, ip, r1
     29a:	fb0c f707 	mul.w	r7, ip, r7
     29e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     2a2:	429f      	cmp	r7, r3
     2a4:	d90e      	bls.n	2c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x157>
     2a6:	18eb      	adds	r3, r5, r3
     2a8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     2ac:	d204      	bcs.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2ae:	429f      	cmp	r7, r3
     2b0:	d902      	bls.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2b2:	f1ac 0102 	sub.w	r1, ip, #2
     2b6:	442b      	add	r3, r5
     2b8:	1bdb      	subs	r3, r3, r7
     2ba:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     2be:	e792      	b.n	1e6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x79>
     2c0:	4660      	mov	r0, ip
     2c2:	e7e3      	b.n	28c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x11f>
     2c4:	4661      	mov	r1, ip
     2c6:	e7f7      	b.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     2c8:	4660      	mov	r0, ip
     2ca:	e7a3      	b.n	214 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xa7>
     2cc:	4663      	mov	r3, ip
     2ce:	e7b7      	b.n	240 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd3>
     2d0:	4283      	cmp	r3, r0
     2d2:	d906      	bls.n	2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2d4:	b916      	cbnz	r6, 2dc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x16f>
     2d6:	2100      	movs	r1, #0
     2d8:	4608      	mov	r0, r1
     2da:	e77b      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     2dc:	e9c6 e000 	strd	lr, r0, [r6]
     2e0:	e7f9      	b.n	2d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x169>
     2e2:	fab3 f783 	clz	r7, r3
     2e6:	b98f      	cbnz	r7, 30c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19f>
     2e8:	4283      	cmp	r3, r0
     2ea:	d301      	bcc.n	2f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x183>
     2ec:	4572      	cmp	r2, lr
     2ee:	d808      	bhi.n	302 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x195>
     2f0:	ebbe 0402 	subs.w	r4, lr, r2
     2f4:	eb60 0303 	sbc.w	r3, r0, r3
     2f8:	2001      	movs	r0, #1
     2fa:	469c      	mov	ip, r3
     2fc:	b91e      	cbnz	r6, 306 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x199>
     2fe:	2100      	movs	r1, #0
     300:	e768      	b.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
     302:	4638      	mov	r0, r7
     304:	e7fa      	b.n	2fc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x18f>
     306:	e9c6 4c00 	strd	r4, ip, [r6]
     30a:	e7f8      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     30c:	f1c7 0c20 	rsb	ip, r7, #32
     310:	40bb      	lsls	r3, r7
     312:	fa22 f40c 	lsr.w	r4, r2, ip
     316:	431c      	orrs	r4, r3
     318:	fa2e f10c 	lsr.w	r1, lr, ip
     31c:	fa20 f30c 	lsr.w	r3, r0, ip
     320:	40b8      	lsls	r0, r7
     322:	4301      	orrs	r1, r0
     324:	ea4f 4914 	mov.w	r9, r4, lsr #16
     328:	fa0e f507 	lsl.w	r5, lr, r7
     32c:	fbb3 f8f9 	udiv	r8, r3, r9
     330:	fa1f fe84 	uxth.w	lr, r4
     334:	fb09 3018 	mls	r0, r9, r8, r3
     338:	0c0b      	lsrs	r3, r1, #16
     33a:	fb08 fa0e 	mul.w	sl, r8, lr
     33e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     342:	459a      	cmp	sl, r3
     344:	fa02 f207 	lsl.w	r2, r2, r7
     348:	d940      	bls.n	3cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25f>
     34a:	18e3      	adds	r3, r4, r3
     34c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     350:	d204      	bcs.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     352:	459a      	cmp	sl, r3
     354:	d902      	bls.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     356:	f1a8 0002 	sub.w	r0, r8, #2
     35a:	4423      	add	r3, r4
     35c:	eba3 030a 	sub.w	r3, r3, sl
     360:	b289      	uxth	r1, r1
     362:	fbb3 f8f9 	udiv	r8, r3, r9
     366:	fb09 3318 	mls	r3, r9, r8, r3
     36a:	fb08 fe0e 	mul.w	lr, r8, lr
     36e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     372:	458e      	cmp	lr, r1
     374:	d92c      	bls.n	3d0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x263>
     376:	1861      	adds	r1, r4, r1
     378:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     37c:	d204      	bcs.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>
     37e:	458e      	cmp	lr, r1
     380:	d902      	bls.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>
     382:	f1a8 0302 	sub.w	r3, r8, #2
     386:	4421      	add	r1, r4
     388:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     38c:	fba0 9802 	umull	r9, r8, r0, r2
     390:	eba1 010e 	sub.w	r1, r1, lr
     394:	4541      	cmp	r1, r8
     396:	46ce      	mov	lr, r9
     398:	4643      	mov	r3, r8
     39a:	d302      	bcc.n	3a2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x235>
     39c:	d106      	bne.n	3ac <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23f>
     39e:	454d      	cmp	r5, r9
     3a0:	d204      	bcs.n	3ac <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x23f>
     3a2:	ebb9 0e02 	subs.w	lr, r9, r2
     3a6:	eb68 0304 	sbc.w	r3, r8, r4
     3aa:	3801      	subs	r0, #1
     3ac:	2e00      	cmp	r6, #0
     3ae:	d0a6      	beq.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3b0:	ebb5 020e 	subs.w	r2, r5, lr
     3b4:	eb61 0103 	sbc.w	r1, r1, r3
     3b8:	fa01 fc0c 	lsl.w	ip, r1, ip
     3bc:	fa22 f307 	lsr.w	r3, r2, r7
     3c0:	ea4c 0303 	orr.w	r3, ip, r3
     3c4:	40f9      	lsrs	r1, r7
     3c6:	e9c6 3100 	strd	r3, r1, [r6]
     3ca:	e798      	b.n	2fe <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x191>
     3cc:	4640      	mov	r0, r8
     3ce:	e7c5      	b.n	35c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1ef>
     3d0:	4643      	mov	r3, r8
     3d2:	e7d9      	b.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>

000003d4 <button_pressed>:
static const struct gpio_dt_spec led = GPIO_DT_SPEC_GET(LED0_NODE, gpios);

/* STEP 8.2 - Replace the button callback function */
void button_pressed(const struct device *dev, struct gpio_callback *cb,
            uint32_t pins)
{
     3d4:	b510      	push	{r4, lr}
  int i;
  int j;
  long int factorial;
  printk("Calculating the factorials of numbers from 1 to %d:\n\r",MAX_NUMBER_FACT);
     3d6:	210a      	movs	r1, #10
     3d8:	480b      	ldr	r0, [pc, #44]	; (408 <CONFIG_FLASH_SIZE+0x8>)
     3da:	f004 fbca 	bl	4b72 <printk>
  for (i=1;i<=MAX_NUMBER_FACT;i++){
     3de:	2401      	movs	r4, #1
     3e0:	e009      	b.n	3f6 <button_pressed+0x22>
       factorial =1;
        for (j=1;j<=i;j++){
            factorial = factorial*j;
     3e2:	fb03 f202 	mul.w	r2, r3, r2
        for (j=1;j<=i;j++){
     3e6:	3301      	adds	r3, #1
     3e8:	429c      	cmp	r4, r3
     3ea:	dafa      	bge.n	3e2 <button_pressed+0xe>
        }
        printk("The factorial of %2d = %ld \n\r",i,factorial);
     3ec:	4621      	mov	r1, r4
     3ee:	4807      	ldr	r0, [pc, #28]	; (40c <CONFIG_FLASH_SIZE+0xc>)
     3f0:	f004 fbbf 	bl	4b72 <printk>
  for (i=1;i<=MAX_NUMBER_FACT;i++){
     3f4:	3401      	adds	r4, #1
     3f6:	2c0a      	cmp	r4, #10
     3f8:	dc02      	bgt.n	400 <CONFIG_FLASH_SIZE>
       factorial =1;
     3fa:	2201      	movs	r2, #1
        for (j=1;j<=i;j++){
     3fc:	4613      	mov	r3, r2
     3fe:	e7f3      	b.n	3e8 <button_pressed+0x14>
  }
  printk("_______________________________________________________\r");
     400:	4803      	ldr	r0, [pc, #12]	; (410 <CONFIG_FLASH_SIZE+0x10>)
     402:	f004 fbb6 	bl	4b72 <printk>
  /*Important note!
  Code in ISR runs at a high priority, therefore, it should be written with timing in mind.
  Too lengthy or too complex tasks should not be performed by an ISR, they should be deferred to a thread.
  */
}
     406:	bd10      	pop	{r4, pc}
     408:	000069f8 	.word	0x000069f8
     40c:	00006a30 	.word	0x00006a30
     410:	00006a50 	.word	0x00006a50

00000414 <main>:

static struct gpio_callback button_cb_data;

void main(void)
{
     414:	b510      	push	{r4, lr}
	int ret;
	/* STEP 7 - Print a simple banner */
	printk("nRF Connect SDK Fundamentals - Lesson 4 - Exercise 1\n\r");
     416:	4815      	ldr	r0, [pc, #84]	; (46c <main+0x58>)
     418:	f004 fbab 	bl	4b72 <printk>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     41c:	4814      	ldr	r0, [pc, #80]	; (470 <main+0x5c>)
     41e:	f005 ff25 	bl	626c <z_device_is_ready>

	/* Only checking one since led.port and button.port point to the same device, &gpio0 */
	if (!device_is_ready(led.port)) {
     422:	b900      	cbnz	r0, 426 <main+0x12>

	gpio_add_callback(button.port, &button_cb_data);	
	while (1) {
        k_msleep(SLEEP_TIME_MS); 
	}
     424:	bd10      	pop	{r4, pc}
	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE);
     426:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     42a:	4812      	ldr	r0, [pc, #72]	; (474 <main+0x60>)
     42c:	f004 fb74 	bl	4b18 <gpio_pin_configure_dt>
	if (ret < 0) {
     430:	2800      	cmp	r0, #0
     432:	dbf7      	blt.n	424 <main+0x10>
	ret = gpio_pin_configure_dt(&button, GPIO_INPUT);
     434:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     438:	480f      	ldr	r0, [pc, #60]	; (478 <main+0x64>)
     43a:	f004 fb6d 	bl	4b18 <gpio_pin_configure_dt>
	if (ret < 0) {
     43e:	2800      	cmp	r0, #0
     440:	dbf0      	blt.n	424 <main+0x10>
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
     442:	4c0b      	ldr	r4, [pc, #44]	; (470 <main+0x5c>)
     444:	f04f 62b8 	mov.w	r2, #96468992	; 0x5c00000
     448:	210b      	movs	r1, #11
     44a:	4620      	mov	r0, r4
     44c:	f004 fb28 	bl	4aa0 <z_impl_gpio_pin_interrupt_configure>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     450:	490a      	ldr	r1, [pc, #40]	; (47c <main+0x68>)
     452:	4b0b      	ldr	r3, [pc, #44]	; (480 <main+0x6c>)
     454:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     456:	f44f 6300 	mov.w	r3, #2048	; 0x800
     45a:	608b      	str	r3, [r1, #8]
	gpio_add_callback(button.port, &button_cb_data);	
     45c:	4620      	mov	r0, r4
     45e:	f004 fb66 	bl	4b2e <gpio_add_callback>
        k_msleep(SLEEP_TIME_MS); 
     462:	4808      	ldr	r0, [pc, #32]	; (484 <main+0x70>)
     464:	f004 fb6d 	bl	4b42 <k_msleep>
	while (1) {
     468:	e7fb      	b.n	462 <main+0x4e>
     46a:	bf00      	nop
     46c:	00006a8c 	.word	0x00006a8c
     470:	000067b0 	.word	0x000067b0
     474:	00006ac4 	.word	0x00006ac4
     478:	00006acc 	.word	0x00006acc
     47c:	20000338 	.word	0x20000338
     480:	000003d5 	.word	0x000003d5
     484:	000927c0 	.word	0x000927c0

00000488 <char_out>:

	return c;
}

static int char_out(int c, void *ctx_p)
{
     488:	b508      	push	{r3, lr}
	(void) ctx_p;
	return _char_out(c);
     48a:	4b02      	ldr	r3, [pc, #8]	; (494 <char_out+0xc>)
     48c:	681b      	ldr	r3, [r3, #0]
     48e:	4798      	blx	r3
}
     490:	bd08      	pop	{r3, pc}
     492:	bf00      	nop
     494:	20000000 	.word	0x20000000

00000498 <__printk_hook_install>:
	_char_out = fn;
     498:	4b01      	ldr	r3, [pc, #4]	; (4a0 <__printk_hook_install+0x8>)
     49a:	6018      	str	r0, [r3, #0]
}
     49c:	4770      	bx	lr
     49e:	bf00      	nop
     4a0:	20000000 	.word	0x20000000

000004a4 <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
     4a4:	b500      	push	{lr}
     4a6:	b083      	sub	sp, #12
     4a8:	4602      	mov	r2, r0
     4aa:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     4ac:	2100      	movs	r1, #0
     4ae:	9100      	str	r1, [sp, #0]
     4b0:	4802      	ldr	r0, [pc, #8]	; (4bc <vprintk+0x18>)
     4b2:	f000 f91d 	bl	6f0 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     4b6:	b003      	add	sp, #12
     4b8:	f85d fb04 	ldr.w	pc, [sp], #4
     4bc:	00000489 	.word	0x00000489

000004c0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     4c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     4c4:	b083      	sub	sp, #12
     4c6:	4604      	mov	r4, r0
     4c8:	4608      	mov	r0, r1
     4ca:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4cc:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4ce:	f013 0f08 	tst.w	r3, #8
     4d2:	d105      	bne.n	4e0 <process_event+0x20>
     4d4:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     4d8:	2300      	movs	r3, #0
     4da:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     4dc:	9301      	str	r3, [sp, #4]
}
     4de:	e055      	b.n	58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>
		if (evt == EVT_COMPLETE) {
     4e0:	2901      	cmp	r1, #1
     4e2:	d009      	beq.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     4e4:	f043 0320 	orr.w	r3, r3, #32
     4e8:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4ea:	f385 8811 	msr	BASEPRI, r5
     4ee:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4f2:	b003      	add	sp, #12
     4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4f8:	f043 0310 	orr.w	r3, r3, #16
     4fc:	8323      	strh	r3, [r4, #24]
     4fe:	e7f4      	b.n	4ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2>
			evt = process_recheck(mgr);
     500:	4620      	mov	r0, r4
     502:	f004 fb78 	bl	4bf6 <process_recheck>
     506:	e043      	b.n	590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>
			res = mgr->last_res;
     508:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     50c:	464a      	mov	r2, r9
     50e:	4669      	mov	r1, sp
     510:	4620      	mov	r0, r4
     512:	f004 fb89 	bl	4c28 <process_complete>
		onoff_transition_fn transit = NULL;
     516:	f04f 0800 	mov.w	r8, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     51a:	8b23      	ldrh	r3, [r4, #24]
     51c:	f003 0707 	and.w	r7, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     520:	42b7      	cmp	r7, r6
     522:	d069      	beq.n	5f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x110>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     524:	68a2      	ldr	r2, [r4, #8]
     526:	2a00      	cmp	r2, #0
     528:	d066      	beq.n	5f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x110>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     52a:	2201      	movs	r2, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     52c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     530:	8323      	strh	r3, [r4, #24]
     532:	f385 8811 	msr	BASEPRI, r5
     536:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     53a:	2a00      	cmp	r2, #0
     53c:	d164      	bne.n	608 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x120>
     53e:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     540:	b12b      	cbz	r3, 54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
				notify_all(mgr, &clients, state, res);
     542:	464b      	mov	r3, r9
     544:	463a      	mov	r2, r7
     546:	4669      	mov	r1, sp
     548:	4620      	mov	r0, r4
     54a:	f004 fbe6 	bl	4d1a <notify_all>
			if (transit != NULL) {
     54e:	f1b8 0f00 	cmp.w	r8, #0
     552:	d002      	beq.n	55a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x72>
				transit(mgr, transition_complete);
     554:	4934      	ldr	r1, [pc, #208]	; (628 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x140>)
     556:	4620      	mov	r0, r4
     558:	47c0      	blx	r8
	__asm__ volatile(
     55a:	f04f 0320 	mov.w	r3, #32
     55e:	f3ef 8511 	mrs	r5, BASEPRI
     562:	f383 8812 	msr	BASEPRI_MAX, r3
     566:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     56a:	8b23      	ldrh	r3, [r4, #24]
     56c:	f023 0308 	bic.w	r3, r3, #8
     570:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     572:	8b23      	ldrh	r3, [r4, #24]
     574:	f013 0f10 	tst.w	r3, #16
     578:	d04c      	beq.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     57a:	f023 0310 	bic.w	r3, r3, #16
     57e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     580:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     582:	8b26      	ldrh	r6, [r4, #24]
     584:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     588:	2800      	cmp	r0, #0
     58a:	d0ae      	beq.n	4ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2>
		if (evt == EVT_RECHECK) {
     58c:	2802      	cmp	r0, #2
     58e:	d0b7      	beq.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
		if (evt == EVT_NOP) {
     590:	2800      	cmp	r0, #0
     592:	d0aa      	beq.n	4ea <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2>
		if (evt == EVT_COMPLETE) {
     594:	3801      	subs	r0, #1
     596:	2804      	cmp	r0, #4
     598:	d82a      	bhi.n	5f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x108>
     59a:	a301      	add	r3, pc, #4	; (adr r3, 5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>)
     59c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
     5a0:	00000509 	.word	0x00000509
     5a4:	000005f1 	.word	0x000005f1
     5a8:	000005b5 	.word	0x000005b5
     5ac:	000005c9 	.word	0x000005c9
     5b0:	000005dd 	.word	0x000005dd
			transit = mgr->transitions->start;
     5b4:	6923      	ldr	r3, [r4, #16]
     5b6:	f8d3 8000 	ldr.w	r8, [r3]
			set_state(mgr, ONOFF_STATE_TO_ON);
     5ba:	2106      	movs	r1, #6
     5bc:	4620      	mov	r0, r4
     5be:	f004 faf0 	bl	4ba2 <set_state>
		res = 0;
     5c2:	f04f 0900 	mov.w	r9, #0
     5c6:	e7a8      	b.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
			transit = mgr->transitions->stop;
     5c8:	6923      	ldr	r3, [r4, #16]
     5ca:	f8d3 8004 	ldr.w	r8, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     5ce:	2104      	movs	r1, #4
     5d0:	4620      	mov	r0, r4
     5d2:	f004 fae6 	bl	4ba2 <set_state>
		res = 0;
     5d6:	f04f 0900 	mov.w	r9, #0
     5da:	e79e      	b.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
			transit = mgr->transitions->reset;
     5dc:	6923      	ldr	r3, [r4, #16]
     5de:	f8d3 8008 	ldr.w	r8, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     5e2:	2105      	movs	r1, #5
     5e4:	4620      	mov	r0, r4
     5e6:	f004 fadc 	bl	4ba2 <set_state>
		res = 0;
     5ea:	f04f 0900 	mov.w	r9, #0
     5ee:	e794      	b.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
		if (evt == EVT_NOP) {
     5f0:	f04f 0800 	mov.w	r8, #0
     5f4:	46c1      	mov	r9, r8
     5f6:	e790      	b.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
     5f8:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     5fa:	b10a      	cbz	r2, 600 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x118>
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5fc:	2200      	movs	r2, #0
     5fe:	e795      	b.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
		    || (transit != NULL)) {
     600:	f1b8 0f00 	cmp.w	r8, #0
     604:	d192      	bne.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     606:	e7b4      	b.n	572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
				notify_monitors(mgr, state, res);
     608:	464a      	mov	r2, r9
     60a:	4639      	mov	r1, r7
     60c:	4620      	mov	r0, r4
     60e:	f004 fad0 	bl	4bb2 <notify_monitors>
     612:	e794      	b.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     614:	f013 0f20 	tst.w	r3, #32
     618:	d004      	beq.n	624 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x13c>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     61a:	f023 0320 	bic.w	r3, r3, #32
     61e:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     620:	2002      	movs	r0, #2
     622:	e7ae      	b.n	582 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9a>
		evt = EVT_NOP;
     624:	2000      	movs	r0, #0
     626:	e7ac      	b.n	582 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9a>
     628:	00004d49 	.word	0x00004d49

0000062c <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
     62c:	4684      	mov	ip, r0
     62e:	4608      	mov	r0, r1
	bool loop = true;
     630:	2201      	movs	r2, #1
     632:	e026      	b.n	682 <extract_flags+0x56>

	do {
		switch (*sp) {
		case '-':
			conv->flag_dash = true;
     634:	f89c 3000 	ldrb.w	r3, [ip]
     638:	f043 0304 	orr.w	r3, r3, #4
     63c:	f88c 3000 	strb.w	r3, [ip]
			conv->flag_zero = true;
			break;
		default:
			loop = false;
		}
		if (loop) {
     640:	b1f2      	cbz	r2, 680 <extract_flags+0x54>
			++sp;
     642:	3001      	adds	r0, #1
     644:	e01c      	b.n	680 <extract_flags+0x54>
			conv->flag_plus = true;
     646:	f89c 3000 	ldrb.w	r3, [ip]
     64a:	f043 0308 	orr.w	r3, r3, #8
     64e:	f88c 3000 	strb.w	r3, [ip]
			break;
     652:	e7f5      	b.n	640 <extract_flags+0x14>
			conv->flag_space = true;
     654:	f89c 3000 	ldrb.w	r3, [ip]
     658:	f043 0310 	orr.w	r3, r3, #16
     65c:	f88c 3000 	strb.w	r3, [ip]
			break;
     660:	e7ee      	b.n	640 <extract_flags+0x14>
			conv->flag_hash = true;
     662:	f89c 3000 	ldrb.w	r3, [ip]
     666:	f043 0320 	orr.w	r3, r3, #32
     66a:	f88c 3000 	strb.w	r3, [ip]
			break;
     66e:	e7e7      	b.n	640 <extract_flags+0x14>
			conv->flag_zero = true;
     670:	f89c 3000 	ldrb.w	r3, [ip]
     674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     678:	f88c 3000 	strb.w	r3, [ip]
			break;
     67c:	e7e0      	b.n	640 <extract_flags+0x14>
		switch (*sp) {
     67e:	2200      	movs	r2, #0
		}
	} while (loop);
     680:	b342      	cbz	r2, 6d4 <extract_flags+0xa8>
		switch (*sp) {
     682:	7803      	ldrb	r3, [r0, #0]
     684:	3b20      	subs	r3, #32
     686:	2b10      	cmp	r3, #16
     688:	d8f9      	bhi.n	67e <extract_flags+0x52>
     68a:	a101      	add	r1, pc, #4	; (adr r1, 690 <extract_flags+0x64>)
     68c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
     690:	00000655 	.word	0x00000655
     694:	0000067f 	.word	0x0000067f
     698:	0000067f 	.word	0x0000067f
     69c:	00000663 	.word	0x00000663
     6a0:	0000067f 	.word	0x0000067f
     6a4:	0000067f 	.word	0x0000067f
     6a8:	0000067f 	.word	0x0000067f
     6ac:	0000067f 	.word	0x0000067f
     6b0:	0000067f 	.word	0x0000067f
     6b4:	0000067f 	.word	0x0000067f
     6b8:	0000067f 	.word	0x0000067f
     6bc:	00000647 	.word	0x00000647
     6c0:	0000067f 	.word	0x0000067f
     6c4:	00000635 	.word	0x00000635
     6c8:	0000067f 	.word	0x0000067f
     6cc:	0000067f 	.word	0x0000067f
     6d0:	00000671 	.word	0x00000671

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
     6d4:	f89c 3000 	ldrb.w	r3, [ip]
     6d8:	f003 0344 	and.w	r3, r3, #68	; 0x44
     6dc:	2b44      	cmp	r3, #68	; 0x44
     6de:	d000      	beq.n	6e2 <extract_flags+0xb6>
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
}
     6e0:	4770      	bx	lr
		conv->flag_zero = false;
     6e2:	f89c 3000 	ldrb.w	r3, [ip]
     6e6:	f36f 1386 	bfc	r3, #6, #1
     6ea:	f88c 3000 	strb.w	r3, [ip]
     6ee:	e7f7      	b.n	6e0 <extract_flags+0xb4>

000006f0 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6f4:	b091      	sub	sp, #68	; 0x44
     6f6:	4606      	mov	r6, r0
     6f8:	460d      	mov	r5, r1
     6fa:	4691      	mov	r9, r2
     6fc:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     6fe:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     700:	f899 0000 	ldrb.w	r0, [r9]
     704:	2800      	cmp	r0, #0
     706:	f000 82b9 	beq.w	c7c <__z_interrupt_stack_SIZEOF+0x43c>
		if (*fp != '%') {
     70a:	2825      	cmp	r0, #37	; 0x25
     70c:	d008      	beq.n	720 <z_cbvprintf_impl+0x30>
			OUTC(*fp++);
     70e:	f109 0901 	add.w	r9, r9, #1
     712:	4629      	mov	r1, r5
     714:	47b0      	blx	r6
     716:	2800      	cmp	r0, #0
     718:	f2c0 82b1 	blt.w	c7e <__z_interrupt_stack_SIZEOF+0x43e>
     71c:	3401      	adds	r4, #1
			continue;
     71e:	e7ef      	b.n	700 <z_cbvprintf_impl+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     720:	2300      	movs	r3, #0
     722:	9304      	str	r3, [sp, #16]
     724:	9305      	str	r3, [sp, #20]
     726:	9306      	str	r3, [sp, #24]
     728:	9307      	str	r3, [sp, #28]
     72a:	9308      	str	r3, [sp, #32]
     72c:	9309      	str	r3, [sp, #36]	; 0x24
		int precision = -1;
		const char *bps = NULL;
		const char *bpe = buf + sizeof(buf);
		char sign = 0;

		fp = extract_conversion(conv, sp);
     72e:	4649      	mov	r1, r9
     730:	a806      	add	r0, sp, #24
     732:	f004 fd25 	bl	5180 <extract_conversion>
     736:	9002      	str	r0, [sp, #8]

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     738:	f89d 3019 	ldrb.w	r3, [sp, #25]
     73c:	f013 0f01 	tst.w	r3, #1
     740:	f000 8097 	beq.w	872 <__z_interrupt_stack_SIZEOF+0x32>
			width = va_arg(ap, int);
     744:	9b03      	ldr	r3, [sp, #12]
     746:	1d1a      	adds	r2, r3, #4
     748:	9203      	str	r2, [sp, #12]
     74a:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     74c:	2f00      	cmp	r7, #0
     74e:	f2c0 8088 	blt.w	862 <__z_interrupt_stack_SIZEOF+0x22>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     752:	f89d 3019 	ldrb.w	r3, [sp, #25]
     756:	f013 0f04 	tst.w	r3, #4
     75a:	f000 809c 	beq.w	896 <__z_interrupt_stack_SIZEOF+0x56>
			int arg = va_arg(ap, int);
     75e:	9b03      	ldr	r3, [sp, #12]
     760:	1d1a      	adds	r2, r3, #4
     762:	9203      	str	r2, [sp, #12]
     764:	f8d3 a000 	ldr.w	sl, [r3]

			if (arg < 0) {
     768:	f1ba 0f00 	cmp.w	sl, #0
     76c:	f2c0 808a 	blt.w	884 <__z_interrupt_stack_SIZEOF+0x44>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     770:	2300      	movs	r3, #0
     772:	9307      	str	r3, [sp, #28]
		conv->pad0_pre_exp = 0;
     774:	9308      	str	r3, [sp, #32]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     776:	f89d 301a 	ldrb.w	r3, [sp, #26]
     77a:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     77e:	f89d 1019 	ldrb.w	r1, [sp, #25]
     782:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     786:	2b01      	cmp	r3, #1
     788:	f000 808e 	beq.w	8a8 <__z_interrupt_stack_SIZEOF+0x68>
			if (length_mod == LENGTH_HH) {
				value->sint = (signed char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     78c:	2b02      	cmp	r3, #2
     78e:	f000 80d3 	beq.w	938 <__z_interrupt_stack_SIZEOF+0xf8>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     792:	2b04      	cmp	r3, #4
     794:	f000 8124 	beq.w	9e0 <__z_interrupt_stack_SIZEOF+0x1a0>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     798:	2b03      	cmp	r3, #3
     79a:	f000 813b 	beq.w	a14 <__z_interrupt_stack_SIZEOF+0x1d4>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     79e:	f89d 8018 	ldrb.w	r8, [sp, #24]
     7a2:	f018 0b03 	ands.w	fp, r8, #3
     7a6:	f040 813b 	bne.w	a20 <__z_interrupt_stack_SIZEOF+0x1e0>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     7aa:	f89d 301b 	ldrb.w	r3, [sp, #27]
     7ae:	3b25      	subs	r3, #37	; 0x25
     7b0:	2b53      	cmp	r3, #83	; 0x53
     7b2:	f200 81ca 	bhi.w	b4a <__z_interrupt_stack_SIZEOF+0x30a>
     7b6:	e8df f013 	tbh	[pc, r3, lsl #1]
     7ba:	0140      	.short	0x0140
     7bc:	01c801c8 	.word	0x01c801c8
     7c0:	01c801c8 	.word	0x01c801c8
     7c4:	01c801c8 	.word	0x01c801c8
     7c8:	01c801c8 	.word	0x01c801c8
     7cc:	01c801c8 	.word	0x01c801c8
     7d0:	01c801c8 	.word	0x01c801c8
     7d4:	01c801c8 	.word	0x01c801c8
     7d8:	01c801c8 	.word	0x01c801c8
     7dc:	01c801c8 	.word	0x01c801c8
     7e0:	01c801c8 	.word	0x01c801c8
     7e4:	01c801c8 	.word	0x01c801c8
     7e8:	01c801c8 	.word	0x01c801c8
     7ec:	01c801c8 	.word	0x01c801c8
     7f0:	01c801c8 	.word	0x01c801c8
     7f4:	01c801c8 	.word	0x01c801c8
     7f8:	01c801c8 	.word	0x01c801c8
     7fc:	01c801c8 	.word	0x01c801c8
     800:	01c801c8 	.word	0x01c801c8
     804:	01c801c8 	.word	0x01c801c8
     808:	01c801c8 	.word	0x01c801c8
     80c:	01c801c8 	.word	0x01c801c8
     810:	01c801c8 	.word	0x01c801c8
     814:	01c801c8 	.word	0x01c801c8
     818:	01c801c8 	.word	0x01c801c8
     81c:	01c801c8 	.word	0x01c801c8
     820:	01c80181 	.word	0x01c80181
     824:	01c801c8 	.word	0x01c801c8
     828:	01c801c8 	.word	0x01c801c8
     82c:	01c801c8 	.word	0x01c801c8
     830:	01c801c8 	.word	0x01c801c8
     834:	015e01c8 	.word	0x015e01c8
     838:	01c80167 	.word	0x01c80167
     83c:	01c801c8 	.word	0x01c801c8
     840:	016701c8 	.word	0x016701c8
     844:	01c801c8 	.word	0x01c801c8
     848:	01c801c8 	.word	0x01c801c8
     84c:	018101bd 	.word	0x018101bd
     850:	01c801a1 	.word	0x01c801a1
     854:	014d01c8 	.word	0x014d01c8
     858:	018101c8 	.word	0x018101c8
     85c:	01c801c8 	.word	0x01c801c8
     860:	0181      	.short	0x0181
				conv->flag_dash = true;
     862:	f89d 3018 	ldrb.w	r3, [sp, #24]
     866:	f043 0304 	orr.w	r3, r3, #4
     86a:	f88d 3018 	strb.w	r3, [sp, #24]
				width = -width;
     86e:	427f      	negs	r7, r7
     870:	e76f      	b.n	752 <z_cbvprintf_impl+0x62>
		} else if (conv->width_present) {
     872:	f99d 3018 	ldrsb.w	r3, [sp, #24]
     876:	2b00      	cmp	r3, #0
     878:	db02      	blt.n	880 <__z_interrupt_stack_SIZEOF+0x40>
		int width = -1;
     87a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
     87e:	e768      	b.n	752 <z_cbvprintf_impl+0x62>
			width = conv->width_value;
     880:	9f07      	ldr	r7, [sp, #28]
     882:	e766      	b.n	752 <z_cbvprintf_impl+0x62>
				conv->prec_present = false;
     884:	f89d 3019 	ldrb.w	r3, [sp, #25]
     888:	f36f 0341 	bfc	r3, #1, #1
     88c:	f88d 3019 	strb.w	r3, [sp, #25]
		int precision = -1;
     890:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     894:	e76c      	b.n	770 <z_cbvprintf_impl+0x80>
		} else if (conv->prec_present) {
     896:	f013 0f02 	tst.w	r3, #2
     89a:	d002      	beq.n	8a2 <__z_interrupt_stack_SIZEOF+0x62>
			precision = conv->prec_value;
     89c:	f8dd a020 	ldr.w	sl, [sp, #32]
     8a0:	e766      	b.n	770 <z_cbvprintf_impl+0x80>
		int precision = -1;
     8a2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
     8a6:	e763      	b.n	770 <z_cbvprintf_impl+0x80>
			switch (length_mod) {
     8a8:	1ecb      	subs	r3, r1, #3
     8aa:	2b04      	cmp	r3, #4
     8ac:	d804      	bhi.n	8b8 <__z_interrupt_stack_SIZEOF+0x78>
     8ae:	e8df f003 	tbb	[pc, r3]
     8b2:	1d0b      	.short	0x1d0b
     8b4:	3529      	.short	0x3529
     8b6:	35          	.byte	0x35
     8b7:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     8b8:	9b03      	ldr	r3, [sp, #12]
     8ba:	1d1a      	adds	r2, r3, #4
     8bc:	9203      	str	r2, [sp, #12]
     8be:	681b      	ldr	r3, [r3, #0]
     8c0:	17da      	asrs	r2, r3, #31
     8c2:	9304      	str	r3, [sp, #16]
     8c4:	9205      	str	r2, [sp, #20]
				break;
     8c6:	e006      	b.n	8d6 <__z_interrupt_stack_SIZEOF+0x96>
					value->sint = va_arg(ap, long);
     8c8:	9b03      	ldr	r3, [sp, #12]
     8ca:	1d1a      	adds	r2, r3, #4
     8cc:	9203      	str	r2, [sp, #12]
     8ce:	681b      	ldr	r3, [r3, #0]
     8d0:	17da      	asrs	r2, r3, #31
     8d2:	9304      	str	r3, [sp, #16]
     8d4:	9205      	str	r2, [sp, #20]
			if (length_mod == LENGTH_HH) {
     8d6:	2901      	cmp	r1, #1
     8d8:	d028      	beq.n	92c <__z_interrupt_stack_SIZEOF+0xec>
			} else if (length_mod == LENGTH_H) {
     8da:	2902      	cmp	r1, #2
     8dc:	f47f af5f 	bne.w	79e <z_cbvprintf_impl+0xae>
				value->sint = (short)value->sint;
     8e0:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
     8e4:	17da      	asrs	r2, r3, #31
     8e6:	9304      	str	r3, [sp, #16]
     8e8:	9205      	str	r2, [sp, #20]
     8ea:	e758      	b.n	79e <z_cbvprintf_impl+0xae>
					(sint_value_type)va_arg(ap, long long);
     8ec:	9b03      	ldr	r3, [sp, #12]
     8ee:	3307      	adds	r3, #7
     8f0:	f023 0307 	bic.w	r3, r3, #7
     8f4:	f103 0208 	add.w	r2, r3, #8
     8f8:	9203      	str	r2, [sp, #12]
     8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     8fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     902:	e7e8      	b.n	8d6 <__z_interrupt_stack_SIZEOF+0x96>
					(sint_value_type)va_arg(ap, intmax_t);
     904:	9b03      	ldr	r3, [sp, #12]
     906:	3307      	adds	r3, #7
     908:	f023 0307 	bic.w	r3, r3, #7
     90c:	f103 0208 	add.w	r2, r3, #8
     910:	9203      	str	r2, [sp, #12]
     912:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     916:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     91a:	e7dc      	b.n	8d6 <__z_interrupt_stack_SIZEOF+0x96>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     91c:	9b03      	ldr	r3, [sp, #12]
     91e:	1d1a      	adds	r2, r3, #4
     920:	9203      	str	r2, [sp, #12]
     922:	681b      	ldr	r3, [r3, #0]
     924:	17da      	asrs	r2, r3, #31
				value->sint =
     926:	9304      	str	r3, [sp, #16]
     928:	9205      	str	r2, [sp, #20]
				break;
     92a:	e7d4      	b.n	8d6 <__z_interrupt_stack_SIZEOF+0x96>
				value->sint = (signed char)value->sint;
     92c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
     930:	17da      	asrs	r2, r3, #31
     932:	9304      	str	r3, [sp, #16]
     934:	9205      	str	r2, [sp, #20]
     936:	e732      	b.n	79e <z_cbvprintf_impl+0xae>
			switch (length_mod) {
     938:	1ecb      	subs	r3, r1, #3
     93a:	2b04      	cmp	r3, #4
     93c:	d804      	bhi.n	948 <__z_interrupt_stack_SIZEOF+0x108>
     93e:	e8df f003 	tbb	[pc, r3]
     942:	1f0b      	.short	0x1f0b
     944:	4135      	.short	0x4135
     946:	41          	.byte	0x41
     947:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     948:	9b03      	ldr	r3, [sp, #12]
     94a:	1d1a      	adds	r2, r3, #4
     94c:	9203      	str	r2, [sp, #12]
     94e:	681b      	ldr	r3, [r3, #0]
     950:	9304      	str	r3, [sp, #16]
     952:	2300      	movs	r3, #0
     954:	9305      	str	r3, [sp, #20]
				break;
     956:	e01e      	b.n	996 <__z_interrupt_stack_SIZEOF+0x156>
				    && (conv->specifier == 'c')) {
     958:	f89d 301b 	ldrb.w	r3, [sp, #27]
				if ((!WCHAR_IS_SIGNED)
     95c:	2b63      	cmp	r3, #99	; 0x63
     95e:	d007      	beq.n	970 <__z_interrupt_stack_SIZEOF+0x130>
					value->uint = va_arg(ap, unsigned long);
     960:	9b03      	ldr	r3, [sp, #12]
     962:	1d1a      	adds	r2, r3, #4
     964:	9203      	str	r2, [sp, #12]
     966:	681b      	ldr	r3, [r3, #0]
     968:	9304      	str	r3, [sp, #16]
     96a:	2300      	movs	r3, #0
     96c:	9305      	str	r3, [sp, #20]
     96e:	e012      	b.n	996 <__z_interrupt_stack_SIZEOF+0x156>
					value->uint = (wchar_t)va_arg(ap,
     970:	9b03      	ldr	r3, [sp, #12]
     972:	1d1a      	adds	r2, r3, #4
     974:	9203      	str	r2, [sp, #12]
     976:	681b      	ldr	r3, [r3, #0]
     978:	9304      	str	r3, [sp, #16]
     97a:	2300      	movs	r3, #0
     97c:	9305      	str	r3, [sp, #20]
     97e:	e00a      	b.n	996 <__z_interrupt_stack_SIZEOF+0x156>
					(uint_value_type)va_arg(ap,
     980:	9b03      	ldr	r3, [sp, #12]
     982:	3307      	adds	r3, #7
     984:	f023 0307 	bic.w	r3, r3, #7
     988:	f103 0208 	add.w	r2, r3, #8
     98c:	9203      	str	r2, [sp, #12]
     98e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     992:	e9cd 2304 	strd	r2, r3, [sp, #16]
			if (length_mod == LENGTH_HH) {
     996:	2901      	cmp	r1, #1
     998:	d01c      	beq.n	9d4 <__z_interrupt_stack_SIZEOF+0x194>
			} else if (length_mod == LENGTH_H) {
     99a:	2902      	cmp	r1, #2
     99c:	f47f aeff 	bne.w	79e <z_cbvprintf_impl+0xae>
				value->uint = (unsigned short)value->uint;
     9a0:	f8bd 3010 	ldrh.w	r3, [sp, #16]
     9a4:	9304      	str	r3, [sp, #16]
     9a6:	2300      	movs	r3, #0
     9a8:	9305      	str	r3, [sp, #20]
     9aa:	e6f8      	b.n	79e <z_cbvprintf_impl+0xae>
					(uint_value_type)va_arg(ap,
     9ac:	9b03      	ldr	r3, [sp, #12]
     9ae:	3307      	adds	r3, #7
     9b0:	f023 0307 	bic.w	r3, r3, #7
     9b4:	f103 0208 	add.w	r2, r3, #8
     9b8:	9203      	str	r2, [sp, #12]
     9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     9be:	e9cd 2304 	strd	r2, r3, [sp, #16]
				break;
     9c2:	e7e8      	b.n	996 <__z_interrupt_stack_SIZEOF+0x156>
					(uint_value_type)va_arg(ap, size_t);
     9c4:	9b03      	ldr	r3, [sp, #12]
     9c6:	1d1a      	adds	r2, r3, #4
     9c8:	9203      	str	r2, [sp, #12]
     9ca:	681b      	ldr	r3, [r3, #0]
				value->uint =
     9cc:	9304      	str	r3, [sp, #16]
     9ce:	2300      	movs	r3, #0
     9d0:	9305      	str	r3, [sp, #20]
				break;
     9d2:	e7e0      	b.n	996 <__z_interrupt_stack_SIZEOF+0x156>
				value->uint = (unsigned char)value->uint;
     9d4:	f89d 3010 	ldrb.w	r3, [sp, #16]
     9d8:	9304      	str	r3, [sp, #16]
     9da:	2300      	movs	r3, #0
     9dc:	9305      	str	r3, [sp, #20]
     9de:	e6de      	b.n	79e <z_cbvprintf_impl+0xae>
			if (length_mod == LENGTH_UPPER_L) {
     9e0:	2908      	cmp	r1, #8
     9e2:	d00b      	beq.n	9fc <__z_interrupt_stack_SIZEOF+0x1bc>
				value->dbl = va_arg(ap, double);
     9e4:	9b03      	ldr	r3, [sp, #12]
     9e6:	3307      	adds	r3, #7
     9e8:	f023 0307 	bic.w	r3, r3, #7
     9ec:	f103 0208 	add.w	r2, r3, #8
     9f0:	9203      	str	r2, [sp, #12]
     9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
     9f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
     9fa:	e6d0      	b.n	79e <z_cbvprintf_impl+0xae>
				value->ldbl = va_arg(ap, long double);
     9fc:	9b03      	ldr	r3, [sp, #12]
     9fe:	3307      	adds	r3, #7
     a00:	f023 0307 	bic.w	r3, r3, #7
     a04:	f103 0208 	add.w	r2, r3, #8
     a08:	9203      	str	r2, [sp, #12]
     a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
     a0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
     a12:	e6c4      	b.n	79e <z_cbvprintf_impl+0xae>
			value->ptr = va_arg(ap, void *);
     a14:	9b03      	ldr	r3, [sp, #12]
     a16:	1d1a      	adds	r2, r3, #4
     a18:	9203      	str	r2, [sp, #12]
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	9304      	str	r3, [sp, #16]
     a1e:	e6be      	b.n	79e <z_cbvprintf_impl+0xae>
			OUTS(sp, fp);
     a20:	9f02      	ldr	r7, [sp, #8]
     a22:	463b      	mov	r3, r7
     a24:	464a      	mov	r2, r9
     a26:	4629      	mov	r1, r5
     a28:	4630      	mov	r0, r6
     a2a:	f004 fc4f 	bl	52cc <outs>
     a2e:	2800      	cmp	r0, #0
     a30:	f2c0 8125 	blt.w	c7e <__z_interrupt_stack_SIZEOF+0x43e>
     a34:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     a36:	46b9      	mov	r9, r7
			continue;
     a38:	e662      	b.n	700 <z_cbvprintf_impl+0x10>
		case '%':
			OUTC('%');
     a3a:	4629      	mov	r1, r5
     a3c:	2025      	movs	r0, #37	; 0x25
     a3e:	47b0      	blx	r6
     a40:	2800      	cmp	r0, #0
     a42:	f2c0 811c 	blt.w	c7e <__z_interrupt_stack_SIZEOF+0x43e>
     a46:	3401      	adds	r4, #1
		char sign = 0;
     a48:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     a4a:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     a4e:	f04f 0900 	mov.w	r9, #0
			break;
     a52:	e07f      	b.n	b54 <__z_interrupt_stack_SIZEOF+0x314>
		case 's': {
			bps = (const char *)value->ptr;
     a54:	f8dd 9010 	ldr.w	r9, [sp, #16]

			size_t len;

			if (precision >= 0) {
     a58:	f1ba 0f00 	cmp.w	sl, #0
     a5c:	db07      	blt.n	a6e <__z_interrupt_stack_SIZEOF+0x22e>
				len = strnlen(bps, precision);
     a5e:	4651      	mov	r1, sl
     a60:	4648      	mov	r0, r9
     a62:	f004 fd64 	bl	552e <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     a66:	eb09 0a00 	add.w	sl, r9, r0
		char sign = 0;
     a6a:	46d8      	mov	r8, fp
			precision = -1;

			break;
     a6c:	e072      	b.n	b54 <__z_interrupt_stack_SIZEOF+0x314>
				len = strlen(bps);
     a6e:	4648      	mov	r0, r9
     a70:	f004 fd54 	bl	551c <strlen>
     a74:	e7f7      	b.n	a66 <__z_interrupt_stack_SIZEOF+0x226>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     a76:	9b04      	ldr	r3, [sp, #16]
     a78:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		char sign = 0;
     a7c:	46d8      	mov	r8, fp
			bpe = buf + 1;
     a7e:	f10d 0a29 	add.w	sl, sp, #41	; 0x29
			bps = buf;
     a82:	f10d 0928 	add.w	r9, sp, #40	; 0x28
			break;
     a86:	e065      	b.n	b54 <__z_interrupt_stack_SIZEOF+0x314>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     a88:	f018 0f08 	tst.w	r8, #8
     a8c:	d105      	bne.n	a9a <__z_interrupt_stack_SIZEOF+0x25a>
				sign = '+';
			} else if (conv->flag_space) {
     a8e:	f018 0810 	ands.w	r8, r8, #16
     a92:	d004      	beq.n	a9e <__z_interrupt_stack_SIZEOF+0x25e>
				sign = ' ';
     a94:	f04f 0820 	mov.w	r8, #32
     a98:	e001      	b.n	a9e <__z_interrupt_stack_SIZEOF+0x25e>
				sign = '+';
     a9a:	f04f 082b 	mov.w	r8, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     a9e:	9a04      	ldr	r2, [sp, #16]
     aa0:	9b05      	ldr	r3, [sp, #20]
			if (sint < 0) {
     aa2:	2b00      	cmp	r3, #0
     aa4:	db02      	blt.n	aac <__z_interrupt_stack_SIZEOF+0x26c>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     aa6:	9204      	str	r2, [sp, #16]
     aa8:	9305      	str	r3, [sp, #20]
     aaa:	e008      	b.n	abe <__z_interrupt_stack_SIZEOF+0x27e>
				value->uint = (uint_value_type)-sint;
     aac:	4252      	negs	r2, r2
     aae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ab2:	9204      	str	r2, [sp, #16]
     ab4:	9305      	str	r3, [sp, #20]
				sign = '-';
     ab6:	f04f 082d 	mov.w	r8, #45	; 0x2d
     aba:	e000      	b.n	abe <__z_interrupt_stack_SIZEOF+0x27e>
		switch (conv->specifier) {
     abc:	46d8      	mov	r8, fp
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     abe:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     ac2:	9300      	str	r3, [sp, #0]
     ac4:	ab0a      	add	r3, sp, #40	; 0x28
     ac6:	aa06      	add	r2, sp, #24
     ac8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
     acc:	f004 fb8f 	bl	51ee <encode_uint>
     ad0:	4681      	mov	r9, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     ad2:	f1ba 0f00 	cmp.w	sl, #0
     ad6:	db6c      	blt.n	bb2 <__z_interrupt_stack_SIZEOF+0x372>
				size_t len = bpe - bps;
     ad8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     adc:	eba3 0309 	sub.w	r3, r3, r9

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     ae0:	f89d 2018 	ldrb.w	r2, [sp, #24]
     ae4:	f36f 1286 	bfc	r2, #6, #1
     ae8:	f88d 2018 	strb.w	r2, [sp, #24]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     aec:	459a      	cmp	sl, r3
     aee:	d963      	bls.n	bb8 <__z_interrupt_stack_SIZEOF+0x378>
					conv->pad0_value = precision - (int)len;
     af0:	ebaa 0303 	sub.w	r3, sl, r3
     af4:	9307      	str	r3, [sp, #28]
		const char *bpe = buf + sizeof(buf);
     af6:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     afa:	e02b      	b.n	b54 <__z_interrupt_stack_SIZEOF+0x314>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     afc:	9804      	ldr	r0, [sp, #16]
     afe:	b928      	cbnz	r0, b0c <__z_interrupt_stack_SIZEOF+0x2cc>
		char sign = 0;
     b00:	46d8      	mov	r8, fp

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     b02:	f8df a180 	ldr.w	sl, [pc, #384]	; c84 <__z_interrupt_stack_SIZEOF+0x444>
			bps = "(nil)";
     b06:	f1aa 0905 	sub.w	r9, sl, #5
     b0a:	e023      	b.n	b54 <__z_interrupt_stack_SIZEOF+0x314>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     b0c:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
     b10:	9300      	str	r3, [sp, #0]
     b12:	ab0a      	add	r3, sp, #40	; 0x28
     b14:	aa06      	add	r2, sp, #24
     b16:	2100      	movs	r1, #0
     b18:	f004 fb69 	bl	51ee <encode_uint>
     b1c:	4681      	mov	r9, r0
				conv->altform_0c = true;
     b1e:	f89d 301a 	ldrb.w	r3, [sp, #26]
     b22:	f043 0310 	orr.w	r3, r3, #16
     b26:	f88d 301a 	strb.w	r3, [sp, #26]
				conv->specifier = 'x';
     b2a:	2378      	movs	r3, #120	; 0x78
     b2c:	f88d 301b 	strb.w	r3, [sp, #27]
		char sign = 0;
     b30:	46d8      	mov	r8, fp
				goto prec_int_pad0;
     b32:	e7ce      	b.n	ad2 <__z_interrupt_stack_SIZEOF+0x292>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     b34:	4622      	mov	r2, r4
     b36:	9904      	ldr	r1, [sp, #16]
     b38:	a806      	add	r0, sp, #24
     b3a:	f004 fba8 	bl	528e <store_count>
		char sign = 0;
     b3e:	46d8      	mov	r8, fp
		const char *bpe = buf + sizeof(buf);
     b40:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
		const char *bps = NULL;
     b44:	f04f 0900 	mov.w	r9, #0
			}

			break;
     b48:	e004      	b.n	b54 <__z_interrupt_stack_SIZEOF+0x314>
		switch (conv->specifier) {
     b4a:	46d8      	mov	r8, fp
     b4c:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     b50:	f04f 0900 	mov.w	r9, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     b54:	f1b9 0f00 	cmp.w	r9, #0
     b58:	f000 808d 	beq.w	c76 <__z_interrupt_stack_SIZEOF+0x436>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     b5c:	ebaa 0309 	sub.w	r3, sl, r9
		int pad_len = 0;

		if (sign != 0) {
     b60:	f1b8 0f00 	cmp.w	r8, #0
     b64:	d000      	beq.n	b68 <__z_interrupt_stack_SIZEOF+0x328>
			nj_len += 1U;
     b66:	3301      	adds	r3, #1
		}

		if (conv->altform_0c) {
     b68:	f89d 201a 	ldrb.w	r2, [sp, #26]
     b6c:	f012 0f10 	tst.w	r2, #16
     b70:	d025      	beq.n	bbe <__z_interrupt_stack_SIZEOF+0x37e>
			nj_len += 2U;
     b72:	3302      	adds	r3, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     b74:	9907      	ldr	r1, [sp, #28]
     b76:	440b      	add	r3, r1
		if (conv->pad_fp) {
     b78:	f012 0f40 	tst.w	r2, #64	; 0x40
     b7c:	d001      	beq.n	b82 <__z_interrupt_stack_SIZEOF+0x342>
			nj_len += conv->pad0_pre_exp;
     b7e:	9a08      	ldr	r2, [sp, #32]
     b80:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     b82:	2f00      	cmp	r7, #0
     b84:	dd31      	ble.n	bea <__z_interrupt_stack_SIZEOF+0x3aa>
			width -= (int)nj_len;
     b86:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     b88:	f89d 3018 	ldrb.w	r3, [sp, #24]
     b8c:	f013 0f04 	tst.w	r3, #4
     b90:	d12b      	bne.n	bea <__z_interrupt_stack_SIZEOF+0x3aa>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     b92:	f013 0f40 	tst.w	r3, #64	; 0x40
     b96:	d017      	beq.n	bc8 <__z_interrupt_stack_SIZEOF+0x388>
					if (sign != 0) {
     b98:	f1b8 0f00 	cmp.w	r8, #0
     b9c:	d017      	beq.n	bce <__z_interrupt_stack_SIZEOF+0x38e>
						OUTC(sign);
     b9e:	4629      	mov	r1, r5
     ba0:	4640      	mov	r0, r8
     ba2:	47b0      	blx	r6
     ba4:	2800      	cmp	r0, #0
     ba6:	db6a      	blt.n	c7e <__z_interrupt_stack_SIZEOF+0x43e>
     ba8:	3401      	adds	r4, #1
						sign = 0;
     baa:	46d8      	mov	r8, fp
					}
					pad = '0';
     bac:	f04f 0b30 	mov.w	fp, #48	; 0x30
     bb0:	e00f      	b.n	bd2 <__z_interrupt_stack_SIZEOF+0x392>
		const char *bpe = buf + sizeof(buf);
     bb2:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     bb6:	e7cd      	b.n	b54 <__z_interrupt_stack_SIZEOF+0x314>
     bb8:	f10d 0a3e 	add.w	sl, sp, #62	; 0x3e
     bbc:	e7ca      	b.n	b54 <__z_interrupt_stack_SIZEOF+0x314>
		} else if (conv->altform_0) {
     bbe:	f012 0f08 	tst.w	r2, #8
     bc2:	d0d7      	beq.n	b74 <__z_interrupt_stack_SIZEOF+0x334>
			nj_len += 1U;
     bc4:	3301      	adds	r3, #1
     bc6:	e7d5      	b.n	b74 <__z_interrupt_stack_SIZEOF+0x334>
				char pad = ' ';
     bc8:	f04f 0b20 	mov.w	fp, #32
     bcc:	e001      	b.n	bd2 <__z_interrupt_stack_SIZEOF+0x392>
					pad = '0';
     bce:	f04f 0b30 	mov.w	fp, #48	; 0x30
     bd2:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
     bd4:	1e5f      	subs	r7, r3, #1
     bd6:	2b00      	cmp	r3, #0
     bd8:	dd07      	ble.n	bea <__z_interrupt_stack_SIZEOF+0x3aa>
					OUTC(pad);
     bda:	4629      	mov	r1, r5
     bdc:	4658      	mov	r0, fp
     bde:	47b0      	blx	r6
     be0:	2800      	cmp	r0, #0
     be2:	db4c      	blt.n	c7e <__z_interrupt_stack_SIZEOF+0x43e>
     be4:	3401      	adds	r4, #1
				while (width-- > 0) {
     be6:	463b      	mov	r3, r7
     be8:	e7f4      	b.n	bd4 <__z_interrupt_stack_SIZEOF+0x394>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
     bea:	f1b8 0f00 	cmp.w	r8, #0
     bee:	d005      	beq.n	bfc <__z_interrupt_stack_SIZEOF+0x3bc>
			OUTC(sign);
     bf0:	4629      	mov	r1, r5
     bf2:	4640      	mov	r0, r8
     bf4:	47b0      	blx	r6
     bf6:	2800      	cmp	r0, #0
     bf8:	db41      	blt.n	c7e <__z_interrupt_stack_SIZEOF+0x43e>
     bfa:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
     bfc:	f89d 301a 	ldrb.w	r3, [sp, #26]
     c00:	f3c3 1200 	ubfx	r2, r3, #4, #1
     c04:	f3c3 03c0 	ubfx	r3, r3, #3, #1
     c08:	431a      	orrs	r2, r3
     c0a:	d005      	beq.n	c18 <__z_interrupt_stack_SIZEOF+0x3d8>
				OUTC('0');
     c0c:	4629      	mov	r1, r5
     c0e:	2030      	movs	r0, #48	; 0x30
     c10:	47b0      	blx	r6
     c12:	2800      	cmp	r0, #0
     c14:	db33      	blt.n	c7e <__z_interrupt_stack_SIZEOF+0x43e>
     c16:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
     c18:	f89d 301a 	ldrb.w	r3, [sp, #26]
     c1c:	f013 0f10 	tst.w	r3, #16
     c20:	d006      	beq.n	c30 <__z_interrupt_stack_SIZEOF+0x3f0>
				OUTC(conv->specifier);
     c22:	4629      	mov	r1, r5
     c24:	f89d 001b 	ldrb.w	r0, [sp, #27]
     c28:	47b0      	blx	r6
     c2a:	2800      	cmp	r0, #0
     c2c:	db27      	blt.n	c7e <__z_interrupt_stack_SIZEOF+0x43e>
     c2e:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
     c30:	9b07      	ldr	r3, [sp, #28]
			while (pad_len-- > 0) {
     c32:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     c36:	2b00      	cmp	r3, #0
     c38:	dd07      	ble.n	c4a <__z_interrupt_stack_SIZEOF+0x40a>
				OUTC('0');
     c3a:	4629      	mov	r1, r5
     c3c:	2030      	movs	r0, #48	; 0x30
     c3e:	47b0      	blx	r6
     c40:	2800      	cmp	r0, #0
     c42:	db1c      	blt.n	c7e <__z_interrupt_stack_SIZEOF+0x43e>
     c44:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
     c46:	4643      	mov	r3, r8
     c48:	e7f3      	b.n	c32 <__z_interrupt_stack_SIZEOF+0x3f2>
			}

			OUTS(bps, bpe);
     c4a:	4653      	mov	r3, sl
     c4c:	464a      	mov	r2, r9
     c4e:	4629      	mov	r1, r5
     c50:	4630      	mov	r0, r6
     c52:	f004 fb3b 	bl	52cc <outs>
     c56:	2800      	cmp	r0, #0
     c58:	db11      	blt.n	c7e <__z_interrupt_stack_SIZEOF+0x43e>
     c5a:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
     c5c:	2f00      	cmp	r7, #0
     c5e:	dd07      	ble.n	c70 <__z_interrupt_stack_SIZEOF+0x430>
			OUTC(' ');
     c60:	4629      	mov	r1, r5
     c62:	2020      	movs	r0, #32
     c64:	47b0      	blx	r6
     c66:	2800      	cmp	r0, #0
     c68:	db09      	blt.n	c7e <__z_interrupt_stack_SIZEOF+0x43e>
     c6a:	3401      	adds	r4, #1
			--width;
     c6c:	3f01      	subs	r7, #1
     c6e:	e7f5      	b.n	c5c <__z_interrupt_stack_SIZEOF+0x41c>
		fp = extract_conversion(conv, sp);
     c70:	f8dd 9008 	ldr.w	r9, [sp, #8]
     c74:	e544      	b.n	700 <z_cbvprintf_impl+0x10>
     c76:	f8dd 9008 	ldr.w	r9, [sp, #8]
     c7a:	e541      	b.n	700 <z_cbvprintf_impl+0x10>
		}
	}

	return count;
     c7c:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
     c7e:	b011      	add	sp, #68	; 0x44
     c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c84:	00006ad9 	.word	0x00006ad9

00000c88 <sys_reboot>:
#include <zephyr/sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
     c88:	b508      	push	{r3, lr}
     c8a:	f04f 0220 	mov.w	r2, #32
     c8e:	f3ef 8311 	mrs	r3, BASEPRI
     c92:	f382 8812 	msr	BASEPRI_MAX, r2
     c96:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
     c9a:	f004 fcb2 	bl	5602 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
     c9e:	4803      	ldr	r0, [pc, #12]	; (cac <sys_reboot+0x24>)
     ca0:	f003 ff67 	bl	4b72 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
     ca4:	f000 fa54 	bl	1150 <arch_cpu_idle>
     ca8:	e7fc      	b.n	ca4 <sys_reboot+0x1c>
     caa:	bf00      	nop
     cac:	00006adc 	.word	0x00006adc

00000cb0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
     cb0:	f001 bdf2 	b.w	2898 <SystemInit>

00000cb4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     cb4:	b570      	push	{r4, r5, r6, lr}
     cb6:	4605      	mov	r5, r0
     cb8:	f04f 0320 	mov.w	r3, #32
     cbc:	f3ef 8611 	mrs	r6, BASEPRI
     cc0:	f383 8812 	msr	BASEPRI_MAX, r3
     cc4:	f3bf 8f6f 	isb	sy
     cc8:	4b0e      	ldr	r3, [pc, #56]	; (d04 <pm_state_notify+0x50>)
     cca:	681c      	ldr	r4, [r3, #0]
     ccc:	e00d      	b.n	cea <pm_state_notify+0x36>
	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
		if (entering_state) {
			callback = notifier->state_entry;
		} else {
			callback = notifier->state_exit;
     cce:	68a2      	ldr	r2, [r4, #8]
		}

		if (callback) {
     cd0:	b13a      	cbz	r2, ce2 <pm_state_notify+0x2e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     cd2:	4b0d      	ldr	r3, [pc, #52]	; (d08 <pm_state_notify+0x54>)
     cd4:	7d1b      	ldrb	r3, [r3, #20]
     cd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     cda:	490c      	ldr	r1, [pc, #48]	; (d0c <pm_state_notify+0x58>)
     cdc:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
     ce0:	4790      	blx	r2
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     ce2:	4623      	mov	r3, r4
	return node->next;
     ce4:	6824      	ldr	r4, [r4, #0]
     ce6:	b104      	cbz	r4, cea <pm_state_notify+0x36>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT(slist, snode)
     ce8:	b123      	cbz	r3, cf4 <pm_state_notify+0x40>
     cea:	b12c      	cbz	r4, cf8 <pm_state_notify+0x44>
		if (entering_state) {
     cec:	2d00      	cmp	r5, #0
     cee:	d0ee      	beq.n	cce <pm_state_notify+0x1a>
			callback = notifier->state_entry;
     cf0:	6862      	ldr	r2, [r4, #4]
     cf2:	e7ed      	b.n	cd0 <pm_state_notify+0x1c>
     cf4:	461c      	mov	r4, r3
     cf6:	e7f8      	b.n	cea <pm_state_notify+0x36>
	__asm__ volatile(
     cf8:	f386 8811 	msr	BASEPRI, r6
     cfc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     d00:	bd70      	pop	{r4, r5, r6, pc}
     d02:	bf00      	nop
     d04:	2000035c 	.word	0x2000035c
     d08:	20000ddc 	.word	0x20000ddc
     d0c:	20000350 	.word	0x20000350

00000d10 <pm_exit_pos_ops>:
{
     d10:	b508      	push	{r3, lr}
	if (pm_state_exit_post_ops != NULL) {
     d12:	4b06      	ldr	r3, [pc, #24]	; (d2c <pm_exit_pos_ops+0x1c>)
     d14:	b123      	cbz	r3, d20 <pm_exit_pos_ops+0x10>
		pm_state_exit_post_ops(info->state, info->substate_id);
     d16:	7841      	ldrb	r1, [r0, #1]
     d18:	7800      	ldrb	r0, [r0, #0]
     d1a:	f004 fc89 	bl	5630 <pm_state_exit_post_ops>
}
     d1e:	bd08      	pop	{r3, pc}
     d20:	2300      	movs	r3, #0
     d22:	f383 8811 	msr	BASEPRI, r3
     d26:	f3bf 8f6f 	isb	sy
     d2a:	e7f8      	b.n	d1e <pm_exit_pos_ops+0xe>
     d2c:	00005631 	.word	0x00005631

00000d30 <pm_system_resume>:

void pm_system_resume(void)
{
     d30:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
     d32:	4b0e      	ldr	r3, [pc, #56]	; (d6c <pm_system_resume+0x3c>)
     d34:	7d1c      	ldrb	r4, [r3, #20]
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     d36:	4621      	mov	r1, r4
     d38:	480d      	ldr	r0, [pc, #52]	; (d70 <pm_system_resume+0x40>)
     d3a:	f004 fae2 	bl	5302 <atomic_test_and_clear_bit>
     d3e:	b900      	cbnz	r0, d42 <pm_system_resume+0x12>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
			0, 0};
	}
}
     d40:	bd70      	pop	{r4, r5, r6, pc}
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
     d42:	0065      	lsls	r5, r4, #1
     d44:	eb04 0044 	add.w	r0, r4, r4, lsl #1
     d48:	4e0a      	ldr	r6, [pc, #40]	; (d74 <pm_system_resume+0x44>)
     d4a:	eb06 0080 	add.w	r0, r6, r0, lsl #2
     d4e:	f7ff ffdf 	bl	d10 <pm_exit_pos_ops>
		pm_state_notify(false);
     d52:	2000      	movs	r0, #0
     d54:	f7ff ffae 	bl	cb4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     d58:	192b      	adds	r3, r5, r4
     d5a:	0099      	lsls	r1, r3, #2
     d5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
     d60:	2200      	movs	r2, #0
     d62:	5072      	str	r2, [r6, r1]
     d64:	605a      	str	r2, [r3, #4]
     d66:	609a      	str	r2, [r3, #8]
}
     d68:	e7ea      	b.n	d40 <pm_system_resume+0x10>
     d6a:	bf00      	nop
     d6c:	20000ddc 	.word	0x20000ddc
     d70:	20000364 	.word	0x20000364
     d74:	20000350 	.word	0x20000350

00000d78 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
     d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d7a:	4605      	mov	r5, r0
	uint8_t id = CURRENT_CPU;
     d7c:	4b38      	ldr	r3, [pc, #224]	; (e60 <pm_system_suspend+0xe8>)
     d7e:	7d1c      	ldrb	r4, [r3, #20]
	__asm__ volatile(
     d80:	f04f 0320 	mov.w	r3, #32
     d84:	f3ef 8611 	mrs	r6, BASEPRI
     d88:	f383 8812 	msr	BASEPRI_MAX, r3
     d8c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
     d90:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     d94:	4b33      	ldr	r3, [pc, #204]	; (e64 <pm_system_suspend+0xec>)
     d96:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
     d9a:	2b00      	cmp	r3, #0
     d9c:	d039      	beq.n	e12 <pm_system_suspend+0x9a>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
     d9e:	4b32      	ldr	r3, [pc, #200]	; (e68 <pm_system_suspend+0xf0>)
     da0:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
     da4:	4f2f      	ldr	r7, [pc, #188]	; (e64 <pm_system_suspend+0xec>)
     da6:	ea4f 0e82 	mov.w	lr, r2, lsl #2
     daa:	eb07 0382 	add.w	r3, r7, r2, lsl #2
     dae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
     db2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
     db6:	2300      	movs	r3, #0
     db8:	f807 300e 	strb.w	r3, [r7, lr]
	__asm__ volatile(
     dbc:	f386 8811 	msr	BASEPRI, r6
     dc0:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     dc4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     dc8:	4a27      	ldr	r2, [pc, #156]	; (e68 <pm_system_suspend+0xf0>)
     dca:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
     dce:	2b00      	cmp	r3, #0
     dd0:	d044      	beq.n	e5c <pm_system_suspend+0xe4>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
     dd2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
     dd6:	d12b      	bne.n	e30 <pm_system_suspend+0xb8>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
     dd8:	f002 ffa6 	bl	3d28 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
     ddc:	2001      	movs	r0, #1
     dde:	f7ff ff69 	bl	cb4 <pm_state_notify>
	atomic_set_bit(z_post_ops_required, id);
     de2:	4621      	mov	r1, r4
     de4:	4821      	ldr	r0, [pc, #132]	; (e6c <pm_system_suspend+0xf4>)
     de6:	f004 faa8 	bl	533a <atomic_set_bit>
	if (pm_state_set != NULL) {
     dea:	4b21      	ldr	r3, [pc, #132]	; (e70 <pm_system_suspend+0xf8>)
     dec:	b15b      	cbz	r3, e06 <pm_system_suspend+0x8e>
		pm_state_set(info->state, info->substate_id);
     dee:	4a1e      	ldr	r2, [pc, #120]	; (e68 <pm_system_suspend+0xf0>)
     df0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
     df4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     df8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
     dfc:	7859      	ldrb	r1, [r3, #1]
     dfe:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
     e02:	f004 fc0d 	bl	5620 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
     e06:	f7ff ff93 	bl	d30 <pm_system_resume>
	k_sched_unlock();
     e0a:	f003 f98f 	bl	412c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
     e0e:	2001      	movs	r0, #1
}
     e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		info = pm_policy_next_state(id, ticks);
     e12:	4601      	mov	r1, r0
     e14:	4620      	mov	r0, r4
     e16:	f000 f831 	bl	e7c <pm_policy_next_state>
		if (info != NULL) {
     e1a:	2800      	cmp	r0, #0
     e1c:	d0ce      	beq.n	dbc <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
     e1e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
     e22:	4b11      	ldr	r3, [pc, #68]	; (e68 <pm_system_suspend+0xf0>)
     e24:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     e28:	c807      	ldmia	r0, {r0, r1, r2}
     e2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
     e2e:	e7c5      	b.n	dbc <pm_system_suspend+0x44>
		     k_us_to_ticks_ceil32(
     e30:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     e34:	4b0c      	ldr	r3, [pc, #48]	; (e68 <pm_system_suspend+0xf0>)
     e36:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     e3a:	6898      	ldr	r0, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     e3c:	0c41      	lsrs	r1, r0, #17
     e3e:	03c0      	lsls	r0, r0, #15
     e40:	4b0c      	ldr	r3, [pc, #48]	; (e74 <pm_system_suspend+0xfc>)
     e42:	18c0      	adds	r0, r0, r3
     e44:	4a0c      	ldr	r2, [pc, #48]	; (e78 <pm_system_suspend+0x100>)
     e46:	f04f 0300 	mov.w	r3, #0
     e4a:	f141 0100 	adc.w	r1, r1, #0
     e4e:	f7ff f957 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
     e52:	2101      	movs	r1, #1
     e54:	1a28      	subs	r0, r5, r0
     e56:	f005 fc28 	bl	66aa <z_set_timeout_expiry>
     e5a:	e7bd      	b.n	dd8 <pm_system_suspend+0x60>
		return false;
     e5c:	2000      	movs	r0, #0
     e5e:	e7d7      	b.n	e10 <pm_system_suspend+0x98>
     e60:	20000ddc 	.word	0x20000ddc
     e64:	20000344 	.word	0x20000344
     e68:	20000350 	.word	0x20000350
     e6c:	20000364 	.word	0x20000364
     e70:	00005621 	.word	0x00005621
     e74:	000f423f 	.word	0x000f423f
     e78:	000f4240 	.word	0x000f4240

00000e7c <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
     e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e80:	b082      	sub	sp, #8
     e82:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
     e84:	a901      	add	r1, sp, #4
     e86:	f000 f845 	bl	f14 <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     e8a:	1e44      	subs	r4, r0, #1
     e8c:	b224      	sxth	r4, r4
     e8e:	e007      	b.n	ea0 <pm_policy_next_state+0x24>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
		    (exit_latency >= max_latency_ticks)) {
			continue;
		}

		if ((ticks == K_TICKS_FOREVER) ||
     e90:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
     e94:	d033      	beq.n	efe <pm_policy_next_state+0x82>
		    (ticks >= (min_residency + exit_latency))) {
     e96:	4480      	add	r8, r0
		if ((ticks == K_TICKS_FOREVER) ||
     e98:	45b0      	cmp	r8, r6
     e9a:	d930      	bls.n	efe <pm_policy_next_state+0x82>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
     e9c:	3c01      	subs	r4, #1
     e9e:	b224      	sxth	r4, r4
     ea0:	2c00      	cmp	r4, #0
     ea2:	db2b      	blt.n	efc <pm_policy_next_state+0x80>
		const struct pm_state_info *state = &cpu_states[i];
     ea4:	9b01      	ldr	r3, [sp, #4]
     ea6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
     eaa:	eb03 0582 	add.w	r5, r3, r2, lsl #2
		if (pm_policy_state_lock_is_active(state->state, state->substate_id)) {
     eae:	7869      	ldrb	r1, [r5, #1]
     eb0:	f813 0022 	ldrb.w	r0, [r3, r2, lsl #2]
     eb4:	f004 fa54 	bl	5360 <pm_policy_state_lock_is_active>
     eb8:	2800      	cmp	r0, #0
     eba:	d1ef      	bne.n	e9c <pm_policy_next_state+0x20>
		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
     ebc:	6868      	ldr	r0, [r5, #4]
     ebe:	0c41      	lsrs	r1, r0, #17
     ec0:	03c0      	lsls	r0, r0, #15
     ec2:	4f11      	ldr	r7, [pc, #68]	; (f08 <pm_policy_next_state+0x8c>)
     ec4:	19c0      	adds	r0, r0, r7
     ec6:	4a11      	ldr	r2, [pc, #68]	; (f0c <pm_policy_next_state+0x90>)
     ec8:	f04f 0300 	mov.w	r3, #0
     ecc:	f141 0100 	adc.w	r1, r1, #0
     ed0:	f7ff f916 	bl	100 <__aeabi_uldivmod>
     ed4:	4680      	mov	r8, r0
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);
     ed6:	68ab      	ldr	r3, [r5, #8]
     ed8:	0c59      	lsrs	r1, r3, #17
     eda:	03db      	lsls	r3, r3, #15
     edc:	19d8      	adds	r0, r3, r7
     ede:	4a0b      	ldr	r2, [pc, #44]	; (f0c <pm_policy_next_state+0x90>)
     ee0:	f04f 0300 	mov.w	r3, #0
     ee4:	f141 0100 	adc.w	r1, r1, #0
     ee8:	f7ff f90a 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
     eec:	4b08      	ldr	r3, [pc, #32]	; (f10 <pm_policy_next_state+0x94>)
     eee:	681b      	ldr	r3, [r3, #0]
     ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
     ef4:	d0cc      	beq.n	e90 <pm_policy_next_state+0x14>
     ef6:	4283      	cmp	r3, r0
     ef8:	d8ca      	bhi.n	e90 <pm_policy_next_state+0x14>
     efa:	e7cf      	b.n	e9c <pm_policy_next_state+0x20>
			return state;
		}
	}

	return NULL;
     efc:	2500      	movs	r5, #0
}
     efe:	4628      	mov	r0, r5
     f00:	b002      	add	sp, #8
     f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f06:	bf00      	nop
     f08:	000f423f 	.word	0x000f423f
     f0c:	000f4240 	.word	0x000f4240
     f10:	20000004 	.word	0x20000004

00000f14 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
     f14:	b908      	cbnz	r0, f1a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
     f16:	4b02      	ldr	r3, [pc, #8]	; (f20 <pm_state_cpu_get_all+0xc>)
     f18:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
     f1a:	2000      	movs	r0, #0
     f1c:	4770      	bx	lr
     f1e:	bf00      	nop
     f20:	00006b08 	.word	0x00006b08

00000f24 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
     f24:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
     f26:	4802      	ldr	r0, [pc, #8]	; (f30 <nrf_cc3xx_platform_abort_init+0xc>)
     f28:	f003 fc16 	bl	4758 <nrf_cc3xx_platform_set_abort>
}
     f2c:	bd08      	pop	{r3, pc}
     f2e:	bf00      	nop
     f30:	00006b08 	.word	0x00006b08

00000f34 <mutex_flags_unknown>:
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX :
                    NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID
};

static bool mutex_flags_unknown(uint32_t flags){
    switch(flags){
     f34:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
     f38:	d017      	beq.n	f6a <mutex_flags_unknown+0x36>
     f3a:	d80c      	bhi.n	f56 <mutex_flags_unknown+0x22>
     f3c:	f640 63ba 	movw	r3, #3770	; 0xeba
     f40:	4298      	cmp	r0, r3
     f42:	d014      	beq.n	f6e <mutex_flags_unknown+0x3a>
     f44:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
     f48:	d013      	beq.n	f72 <mutex_flags_unknown+0x3e>
     f4a:	283a      	cmp	r0, #58	; 0x3a
     f4c:	d001      	beq.n	f52 <mutex_flags_unknown+0x1e>
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_HW_MUTEX:
        case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
            return false;
        default:
            return true;
     f4e:	2001      	movs	r0, #1
     f50:	4770      	bx	lr
    switch(flags){
     f52:	2000      	movs	r0, #0
     f54:	4770      	bx	lr
     f56:	4b09      	ldr	r3, [pc, #36]	; (f7c <mutex_flags_unknown+0x48>)
     f58:	4298      	cmp	r0, r3
     f5a:	d00c      	beq.n	f76 <mutex_flags_unknown+0x42>
     f5c:	4b08      	ldr	r3, [pc, #32]	; (f80 <mutex_flags_unknown+0x4c>)
     f5e:	4298      	cmp	r0, r3
     f60:	d001      	beq.n	f66 <mutex_flags_unknown+0x32>
            return true;
     f62:	2001      	movs	r0, #1
    }
}
     f64:	4770      	bx	lr
    switch(flags){
     f66:	2000      	movs	r0, #0
     f68:	4770      	bx	lr
     f6a:	2000      	movs	r0, #0
     f6c:	4770      	bx	lr
     f6e:	2000      	movs	r0, #0
     f70:	4770      	bx	lr
     f72:	2000      	movs	r0, #0
     f74:	4770      	bx	lr
     f76:	2000      	movs	r0, #0
     f78:	4770      	bx	lr
     f7a:	bf00      	nop
     f7c:	3a00003a 	.word	0x3a00003a
     f80:	a95c5f2c 	.word	0xa95c5f2c

00000f84 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
     f84:	b1e8      	cbz	r0, fc2 <mutex_unlock_platform+0x3e>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     f86:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
     f88:	6842      	ldr	r2, [r0, #4]
     f8a:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
     f8e:	d007      	beq.n	fa0 <mutex_unlock_platform+0x1c>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     f90:	490f      	ldr	r1, [pc, #60]	; (fd0 <mutex_unlock_platform+0x4c>)
     f92:	428a      	cmp	r2, r1
     f94:	d01a      	beq.n	fcc <mutex_unlock_platform+0x48>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
     f96:	6800      	ldr	r0, [r0, #0]
		union { uintptr_t x; struct k_mutex * val; } parm0 = { .val = mutex };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
     f98:	f002 fdaa 	bl	3af0 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
     f9c:	2000      	movs	r0, #0
    }
}
     f9e:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
     fa0:	6803      	ldr	r3, [r0, #0]
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
     fa2:	2200      	movs	r2, #0
     fa4:	f3bf 8f5b 	dmb	ish
     fa8:	e853 1f00 	ldrex	r1, [r3]
     fac:	2901      	cmp	r1, #1
     fae:	d103      	bne.n	fb8 <mutex_unlock_platform+0x34>
     fb0:	e843 2000 	strex	r0, r2, [r3]
     fb4:	2800      	cmp	r0, #0
     fb6:	d1f7      	bne.n	fa8 <mutex_unlock_platform+0x24>
     fb8:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
     fbc:	d104      	bne.n	fc8 <mutex_unlock_platform+0x44>
     fbe:	4610      	mov	r0, r2
     fc0:	e7ed      	b.n	f9e <mutex_unlock_platform+0x1a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
     fc2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
     fc6:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
     fc8:	4802      	ldr	r0, [pc, #8]	; (fd4 <mutex_unlock_platform+0x50>)
     fca:	e7e8      	b.n	f9e <mutex_unlock_platform+0x1a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
     fcc:	4802      	ldr	r0, [pc, #8]	; (fd8 <mutex_unlock_platform+0x54>)
     fce:	e7e6      	b.n	f9e <mutex_unlock_platform+0x1a>
     fd0:	a95c5f2c 	.word	0xa95c5f2c
     fd4:	ffff8fe9 	.word	0xffff8fe9
     fd8:	ffff8fea 	.word	0xffff8fea

00000fdc <mutex_lock_platform>:
    if(mutex == NULL) {
     fdc:	b330      	cbz	r0, 102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
     fde:	b508      	push	{r3, lr}
    switch (mutex->flags) {
     fe0:	6842      	ldr	r2, [r0, #4]
     fe2:	f5b2 3f68 	cmp.w	r2, #237568	; 0x3a000
     fe6:	d00c      	beq.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
     fe8:	4912      	ldr	r1, [pc, #72]	; (1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
     fea:	428a      	cmp	r2, r1
     fec:	d01c      	beq.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
        p_mutex = (struct k_mutex *)mutex->mutex;
     fee:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
     ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     ff8:	f002 fcf6 	bl	39e8 <z_impl_k_mutex_lock>
        if (ret == 0) {
     ffc:	b188      	cbz	r0, 1022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
     ffe:	480e      	ldr	r0, [pc, #56]	; (1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>)
    1000:	e00f      	b.n	1022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    1002:	6803      	ldr	r3, [r0, #0]
    1004:	2201      	movs	r2, #1
    1006:	f3bf 8f5b 	dmb	ish
    100a:	e853 1f00 	ldrex	r1, [r3]
    100e:	2900      	cmp	r1, #0
    1010:	d103      	bne.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
    1012:	e843 2000 	strex	r0, r2, [r3]
    1016:	2800      	cmp	r0, #0
    1018:	d1f7      	bne.n	100a <CONFIG_FPROTECT_BLOCK_SIZE+0xa>
    101a:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    101e:	d101      	bne.n	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    1020:	2000      	movs	r0, #0
}
    1022:	bd08      	pop	{r3, pc}
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1024:	4804      	ldr	r0, [pc, #16]	; (1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>)
    1026:	e7fc      	b.n	1022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1028:	4804      	ldr	r0, [pc, #16]	; (103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>)
    102a:	e7fa      	b.n	1022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    102c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    1030:	4770      	bx	lr
    1032:	bf00      	nop
    1034:	a95c5f2c 	.word	0xa95c5f2c
    1038:	ffff8fe9 	.word	0xffff8fe9
    103c:	ffff8fea 	.word	0xffff8fea

00001040 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1040:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1042:	4604      	mov	r4, r0
    1044:	b1a8      	cbz	r0, 1072 <mutex_free_platform+0x32>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1046:	6863      	ldr	r3, [r4, #4]
    1048:	f5b3 3f68 	cmp.w	r3, #237568	; 0x3a000
    104c:	d010      	beq.n	1070 <mutex_free_platform+0x30>
    104e:	f5b3 0f68 	cmp.w	r3, #15204352	; 0xe80000
    1052:	d00d      	beq.n	1070 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1054:	4a0c      	ldr	r2, [pc, #48]	; (1088 <mutex_free_platform+0x48>)
    1056:	4293      	cmp	r3, r2
    1058:	d00a      	beq.n	1070 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    105a:	f413 6f68 	tst.w	r3, #3712	; 0xe80
    105e:	d00d      	beq.n	107c <mutex_free_platform+0x3c>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1060:	4621      	mov	r1, r4
    1062:	480a      	ldr	r0, [pc, #40]	; (108c <mutex_free_platform+0x4c>)
    1064:	f005 f959 	bl	631a <k_mem_slab_free>
        mutex->mutex = NULL;
    1068:	2300      	movs	r3, #0
    106a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    106c:	4b06      	ldr	r3, [pc, #24]	; (1088 <mutex_free_platform+0x48>)
    106e:	6063      	str	r3, [r4, #4]
}
    1070:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    1072:	4b07      	ldr	r3, [pc, #28]	; (1090 <mutex_free_platform+0x50>)
    1074:	685b      	ldr	r3, [r3, #4]
    1076:	4807      	ldr	r0, [pc, #28]	; (1094 <mutex_free_platform+0x54>)
    1078:	4798      	blx	r3
    107a:	e7e4      	b.n	1046 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    107c:	2214      	movs	r2, #20
    107e:	2100      	movs	r1, #0
    1080:	6820      	ldr	r0, [r4, #0]
    1082:	f004 fa8d 	bl	55a0 <memset>
    1086:	e7f1      	b.n	106c <mutex_free_platform+0x2c>
    1088:	a95c5f2c 	.word	0xa95c5f2c
    108c:	20000868 	.word	0x20000868
    1090:	200000f0 	.word	0x200000f0
    1094:	00006b10 	.word	0x00006b10

00001098 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1098:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    109a:	4604      	mov	r4, r0
    109c:	b358      	cbz	r0, 10f6 <mutex_init_platform+0x5e>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    109e:	6860      	ldr	r0, [r4, #4]
    10a0:	f5b0 3f68 	cmp.w	r0, #237568	; 0x3a000
    10a4:	d026      	beq.n	10f4 <mutex_init_platform+0x5c>
    10a6:	f5b0 0f68 	cmp.w	r0, #15204352	; 0xe80000
    10aa:	d023      	beq.n	10f4 <mutex_init_platform+0x5c>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    10ac:	4b16      	ldr	r3, [pc, #88]	; (1108 <mutex_init_platform+0x70>)
    10ae:	4298      	cmp	r0, r3
    10b0:	d026      	beq.n	1100 <mutex_init_platform+0x68>
        mutex_flags_unknown(mutex->flags)) {
    10b2:	f7ff ff3f 	bl	f34 <mutex_flags_unknown>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    10b6:	b1b0      	cbz	r0, 10e6 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    10b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    10bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    10c0:	4621      	mov	r1, r4
    10c2:	4812      	ldr	r0, [pc, #72]	; (110c <mutex_init_platform+0x74>)
    10c4:	f002 fb62 	bl	378c <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    10c8:	b908      	cbnz	r0, 10ce <mutex_init_platform+0x36>
    10ca:	6823      	ldr	r3, [r4, #0]
    10cc:	b91b      	cbnz	r3, 10d6 <mutex_init_platform+0x3e>
            platform_abort_apis.abort_fn(
    10ce:	4b10      	ldr	r3, [pc, #64]	; (1110 <mutex_init_platform+0x78>)
    10d0:	685b      	ldr	r3, [r3, #4]
    10d2:	4810      	ldr	r0, [pc, #64]	; (1114 <mutex_init_platform+0x7c>)
    10d4:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    10d6:	2214      	movs	r2, #20
    10d8:	2100      	movs	r1, #0
    10da:	6820      	ldr	r0, [r4, #0]
    10dc:	f004 fa60 	bl	55a0 <memset>
        mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    10e0:	f44f 6368 	mov.w	r3, #3712	; 0xe80
    10e4:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    10e6:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    10e8:	f005 f98a 	bl	6400 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    10ec:	6863      	ldr	r3, [r4, #4]
    10ee:	f043 033a 	orr.w	r3, r3, #58	; 0x3a
    10f2:	6063      	str	r3, [r4, #4]
}
    10f4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    10f6:	4b06      	ldr	r3, [pc, #24]	; (1110 <mutex_init_platform+0x78>)
    10f8:	685b      	ldr	r3, [r3, #4]
    10fa:	4807      	ldr	r0, [pc, #28]	; (1118 <mutex_init_platform+0x80>)
    10fc:	4798      	blx	r3
    10fe:	e7ce      	b.n	109e <mutex_init_platform+0x6>
    if ((mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID && mutex->mutex == NULL) ||
    1100:	6823      	ldr	r3, [r4, #0]
    1102:	2b00      	cmp	r3, #0
    1104:	d1d5      	bne.n	10b2 <mutex_init_platform+0x1a>
    1106:	e7d7      	b.n	10b8 <mutex_init_platform+0x20>
    1108:	a95c5f2c 	.word	0xa95c5f2c
    110c:	20000868 	.word	0x20000868
    1110:	200000f0 	.word	0x200000f0
    1114:	00006b38 	.word	0x00006b38
    1118:	00006b10 	.word	0x00006b10

0000111c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    111c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    111e:	2340      	movs	r3, #64	; 0x40
    1120:	2214      	movs	r2, #20
    1122:	4904      	ldr	r1, [pc, #16]	; (1134 <nrf_cc3xx_platform_mutex_init+0x18>)
    1124:	4804      	ldr	r0, [pc, #16]	; (1138 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1126:	f005 f8ea 	bl	62fe <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    112a:	4904      	ldr	r1, [pc, #16]	; (113c <nrf_cc3xx_platform_mutex_init+0x20>)
    112c:	4804      	ldr	r0, [pc, #16]	; (1140 <nrf_cc3xx_platform_mutex_init+0x24>)
    112e:	f003 fb85 	bl	483c <nrf_cc3xx_platform_set_mutexes>
}
    1132:	bd08      	pop	{r3, pc}
    1134:	20000368 	.word	0x20000368
    1138:	20000868 	.word	0x20000868
    113c:	00006b68 	.word	0x00006b68
    1140:	00006b7c 	.word	0x00006b7c

00001144 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1144:	4901      	ldr	r1, [pc, #4]	; (114c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1146:	2210      	movs	r2, #16
	str	r2, [r1]
    1148:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    114a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    114c:	e000ed10 	.word	0xe000ed10

00001150 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1150:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1152:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1154:	f380 8811 	msr	BASEPRI, r0
	isb
    1158:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    115c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1160:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1162:	b662      	cpsie	i
	isb
    1164:	f3bf 8f6f 	isb	sy

	bx	lr
    1168:	4770      	bx	lr
    116a:	bf00      	nop

0000116c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    116c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    116e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1170:	f381 8811 	msr	BASEPRI, r1

	wfe
    1174:	bf20      	wfe

	msr	BASEPRI, r0
    1176:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    117a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    117c:	4770      	bx	lr
    117e:	bf00      	nop

00001180 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1180:	2800      	cmp	r0, #0
    1182:	db07      	blt.n	1194 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1184:	f000 021f 	and.w	r2, r0, #31
    1188:	0940      	lsrs	r0, r0, #5
    118a:	2301      	movs	r3, #1
    118c:	4093      	lsls	r3, r2
    118e:	4a02      	ldr	r2, [pc, #8]	; (1198 <__NVIC_EnableIRQ+0x18>)
    1190:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
    1194:	4770      	bx	lr
    1196:	bf00      	nop
    1198:	e000e100 	.word	0xe000e100

0000119c <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    119c:	2800      	cmp	r0, #0
    119e:	db08      	blt.n	11b2 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11a0:	0149      	lsls	r1, r1, #5
    11a2:	b2c9      	uxtb	r1, r1
    11a4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
    11a8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
    11ac:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
    11b0:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11b2:	f000 000f 	and.w	r0, r0, #15
    11b6:	0149      	lsls	r1, r1, #5
    11b8:	b2c9      	uxtb	r1, r1
    11ba:	4b01      	ldr	r3, [pc, #4]	; (11c0 <__NVIC_SetPriority+0x24>)
    11bc:	5419      	strb	r1, [r3, r0]
  }
}
    11be:	4770      	bx	lr
    11c0:	e000ed14 	.word	0xe000ed14

000011c4 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    11c4:	0942      	lsrs	r2, r0, #5
    11c6:	4b05      	ldr	r3, [pc, #20]	; (11dc <arch_irq_is_enabled+0x18>)
    11c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    11cc:	f000 001f 	and.w	r0, r0, #31
    11d0:	2301      	movs	r3, #1
    11d2:	fa03 f000 	lsl.w	r0, r3, r0
}
    11d6:	4010      	ands	r0, r2
    11d8:	4770      	bx	lr
    11da:	bf00      	nop
    11dc:	e000e100 	.word	0xe000e100

000011e0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    11e0:	bf30      	wfi
    b z_SysNmiOnReset
    11e2:	f7ff bffd 	b.w	11e0 <z_SysNmiOnReset>
    11e6:	bf00      	nop

000011e8 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    11e8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    11ea:	4b0b      	ldr	r3, [pc, #44]	; (1218 <z_arm_prep_c+0x30>)
    11ec:	4a0b      	ldr	r2, [pc, #44]	; (121c <z_arm_prep_c+0x34>)
    11ee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    11f2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    11f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    11f8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    11fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1200:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1204:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1208:	f002 fa0a 	bl	3620 <z_bss_zero>
	z_data_copy();
    120c:	f003 f8e6 	bl	43dc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1210:	f000 fa2a 	bl	1668 <z_arm_interrupt_init>
	z_cstart();
    1214:	f002 fa62 	bl	36dc <z_cstart>
    1218:	e000ed00 	.word	0xe000ed00
    121c:	00000000 	.word	0x00000000

00001220 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1220:	4a0a      	ldr	r2, [pc, #40]	; (124c <arch_swap+0x2c>)
    1222:	6893      	ldr	r3, [r2, #8]
    1224:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    1228:	4909      	ldr	r1, [pc, #36]	; (1250 <arch_swap+0x30>)
    122a:	6809      	ldr	r1, [r1, #0]
    122c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1230:	4908      	ldr	r1, [pc, #32]	; (1254 <arch_swap+0x34>)
    1232:	684b      	ldr	r3, [r1, #4]
    1234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1238:	604b      	str	r3, [r1, #4]
    123a:	2300      	movs	r3, #0
    123c:	f383 8811 	msr	BASEPRI, r3
    1240:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1244:	6893      	ldr	r3, [r2, #8]
}
    1246:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    124a:	4770      	bx	lr
    124c:	20000ddc 	.word	0x20000ddc
    1250:	00006d20 	.word	0x00006d20
    1254:	e000ed00 	.word	0xe000ed00

00001258 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1258:	4913      	ldr	r1, [pc, #76]	; (12a8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    125a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    125c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1260:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1262:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1266:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    126a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    126c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1270:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1274:	4f0d      	ldr	r7, [pc, #52]	; (12ac <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1276:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    127a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    127c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    127e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1280:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    1284:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1286:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    128a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    128e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    1290:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    1292:	f000 fa99 	bl	17c8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    1296:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    129a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    129e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    12a2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    12a6:	4770      	bx	lr
    ldr r1, =_kernel
    12a8:	20000ddc 	.word	0x20000ddc
    ldr v4, =_SCS_ICSR
    12ac:	e000ed04 	.word	0xe000ed04

000012b0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    12b0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    12b4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    12b6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    12ba:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    12be:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    12c0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    12c4:	2902      	cmp	r1, #2
    beq _oops
    12c6:	d0ff      	beq.n	12c8 <_oops>

000012c8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    12c8:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    12ca:	f004 f853 	bl	5374 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    12ce:	bd01      	pop	{r0, pc}

000012d0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    12d0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    12d2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    12d6:	490e      	ldr	r1, [pc, #56]	; (1310 <arch_new_thread+0x40>)
    12d8:	f842 1c08 	str.w	r1, [r2, #-8]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    12dc:	f021 0101 	bic.w	r1, r1, #1
    12e0:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    12e4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    12e8:	9b01      	ldr	r3, [sp, #4]
    12ea:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    12ee:	9b02      	ldr	r3, [sp, #8]
    12f0:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    12f4:	9b03      	ldr	r3, [sp, #12]
    12f6:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    12fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    12fe:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    1302:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    1304:	2300      	movs	r3, #0
    1306:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    130a:	bc10      	pop	{r4}
    130c:	4770      	bx	lr
    130e:	bf00      	nop
    1310:	00004b8f 	.word	0x00004b8f

00001314 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1314:	4b10      	ldr	r3, [pc, #64]	; (1358 <z_check_thread_stack_fail+0x44>)
    1316:	689b      	ldr	r3, [r3, #8]

	if (thread == NULL) {
    1318:	b1bb      	cbz	r3, 134a <z_check_thread_stack_fail+0x36>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    131a:	f110 0f16 	cmn.w	r0, #22
    131e:	d00b      	beq.n	1338 <z_check_thread_stack_fail+0x24>
    1320:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    1324:	f1a2 0c40 	sub.w	ip, r2, #64	; 0x40
    1328:	4584      	cmp	ip, r0
    132a:	d810      	bhi.n	134e <z_check_thread_stack_fail+0x3a>
    132c:	4282      	cmp	r2, r0
    132e:	d910      	bls.n	1352 <z_check_thread_stack_fail+0x3e>
    1330:	428a      	cmp	r2, r1
    1332:	d807      	bhi.n	1344 <z_check_thread_stack_fail+0x30>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1334:	2000      	movs	r0, #0
    1336:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1338:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    133c:	428a      	cmp	r2, r1
    133e:	d801      	bhi.n	1344 <z_check_thread_stack_fail+0x30>
	return 0;
    1340:	2000      	movs	r0, #0
}
    1342:	4770      	bx	lr
		return thread->stack_info.start;
    1344:	f8d3 0098 	ldr.w	r0, [r3, #152]	; 0x98
    1348:	4770      	bx	lr
		return 0;
    134a:	2000      	movs	r0, #0
    134c:	4770      	bx	lr
	return 0;
    134e:	2000      	movs	r0, #0
    1350:	4770      	bx	lr
    1352:	2000      	movs	r0, #0
    1354:	4770      	bx	lr
    1356:	bf00      	nop
    1358:	20000ddc 	.word	0x20000ddc

0000135c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    135c:	b508      	push	{r3, lr}
    135e:	460d      	mov	r5, r1
    1360:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1362:	4b08      	ldr	r3, [pc, #32]	; (1384 <arch_switch_to_main_thread+0x28>)
    1364:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    1366:	f000 fa2f 	bl	17c8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    136a:	4620      	mov	r0, r4
    136c:	f385 8809 	msr	PSP, r5
    1370:	2100      	movs	r1, #0
    1372:	b663      	cpsie	if
    1374:	f381 8811 	msr	BASEPRI, r1
    1378:	f3bf 8f6f 	isb	sy
    137c:	2200      	movs	r2, #0
    137e:	2300      	movs	r3, #0
    1380:	f003 fc05 	bl	4b8e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1384:	20000ddc 	.word	0x20000ddc

00001388 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1388:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    138a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    138c:	4a0b      	ldr	r2, [pc, #44]	; (13bc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    138e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1390:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1392:	bf1e      	ittt	ne
	movne	r1, #0
    1394:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    1396:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    1398:	f005 f816 	blne	63c8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    139c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    139e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    13a2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    13a6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    13aa:	4905      	ldr	r1, [pc, #20]	; (13c0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    13ac:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    13ae:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    13b0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    13b2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    13b6:	4903      	ldr	r1, [pc, #12]	; (13c4 <_isr_wrapper+0x3c>)
	bx r1
    13b8:	4708      	bx	r1
    13ba:	0000      	.short	0x0000
	ldr r2, =_kernel
    13bc:	20000ddc 	.word	0x20000ddc
	ldr r1, =_sw_isr_table
    13c0:	000067f8 	.word	0x000067f8
	ldr r1, =z_arm_int_exit
    13c4:	000013c9 	.word	0x000013c9

000013c8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    13c8:	4b04      	ldr	r3, [pc, #16]	; (13dc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    13ca:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    13cc:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    13ce:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    13d0:	d003      	beq.n	13da <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    13d2:	4903      	ldr	r1, [pc, #12]	; (13e0 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    13d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    13d8:	600a      	str	r2, [r1, #0]

000013da <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    13da:	4770      	bx	lr
	ldr r3, =_kernel
    13dc:	20000ddc 	.word	0x20000ddc
	ldr r1, =_SCS_ICSR
    13e0:	e000ed04 	.word	0xe000ed04

000013e4 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    13e4:	b510      	push	{r4, lr}
    13e6:	4614      	mov	r4, r2
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    13e8:	4b12      	ldr	r3, [pc, #72]	; (1434 <bus_fault+0x50>)
    13ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    13ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    13ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13f0:	f413 7f00 	tst.w	r3, #512	; 0x200
    13f4:	d00b      	beq.n	140e <bus_fault+0x2a>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    13f6:	4b0f      	ldr	r3, [pc, #60]	; (1434 <bus_fault+0x50>)
    13f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    13fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    13fc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    1400:	d005      	beq.n	140e <bus_fault+0x2a>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1402:	b121      	cbz	r1, 140e <bus_fault+0x2a>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1404:	4a0b      	ldr	r2, [pc, #44]	; (1434 <bus_fault+0x50>)
    1406:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1408:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    140c:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    140e:	4b09      	ldr	r3, [pc, #36]	; (1434 <bus_fault+0x50>)
    1410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1414:	f413 7f80 	tst.w	r3, #256	; 0x100
    1418:	d101      	bne.n	141e <bus_fault+0x3a>
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    141a:	4b06      	ldr	r3, [pc, #24]	; (1434 <bus_fault+0x50>)
    141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    141e:	4a05      	ldr	r2, [pc, #20]	; (1434 <bus_fault+0x50>)
    1420:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1422:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1426:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1428:	2101      	movs	r1, #1
    142a:	f003 ffc0 	bl	53ae <memory_fault_recoverable>
    142e:	7020      	strb	r0, [r4, #0]

	return reason;
}
    1430:	2000      	movs	r0, #0
    1432:	bd10      	pop	{r4, pc}
    1434:	e000ed00 	.word	0xe000ed00

00001438 <usage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1438:	4b07      	ldr	r3, [pc, #28]	; (1458 <usage_fault+0x20>)
    143a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    143c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    143e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1442:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1448:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    144c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1450:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    1452:	2000      	movs	r0, #0
    1454:	4770      	bx	lr
    1456:	bf00      	nop
    1458:	e000ed00 	.word	0xe000ed00

0000145c <z_arm_is_synchronous_svc>:
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

static inline bool z_arm_is_synchronous_svc(z_arch_esf_t *esf)
{
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    145c:	6981      	ldr	r1, [r0, #24]
	/* Note: ARMv6-M does not support CCR.BFHFNMIGN so this access
	 * could generate a fault if the pc was invalid.
	 */
	uint16_t fault_insn = *(ret_addr - 1);
#else
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    145e:	4b0d      	ldr	r3, [pc, #52]	; (1494 <z_arm_is_synchronous_svc+0x38>)
    1460:	695a      	ldr	r2, [r3, #20]
    1462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    1466:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    1468:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    146c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();

	uint16_t fault_insn = *(ret_addr - 1);
    1470:	f831 1c02 	ldrh.w	r1, [r1, #-2]

	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    1474:	695a      	ldr	r2, [r3, #20]
    1476:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    147a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    147c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1480:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
#endif /* ARMV6_M_ARMV8_M_BASELINE && !ARMV8_M_BASELINE */

	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1484:	f64d 7302 	movw	r3, #57090	; 0xdf02
    1488:	4299      	cmp	r1, r3
    148a:	d001      	beq.n	1490 <z_arm_is_synchronous_svc+0x34>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
		return true;
	}
#undef _SVC_OPCODE
	return false;
    148c:	2000      	movs	r0, #0
    148e:	4770      	bx	lr
		return true;
    1490:	2001      	movs	r0, #1
}
    1492:	4770      	bx	lr
    1494:	e000ed00 	.word	0xe000ed00

00001498 <mem_manage_fault>:
{
    1498:	b570      	push	{r4, r5, r6, lr}
    149a:	4605      	mov	r5, r0
    149c:	4616      	mov	r6, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    149e:	4b25      	ldr	r3, [pc, #148]	; (1534 <mem_manage_fault+0x9c>)
    14a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    14a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    14a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14a6:	f013 0f02 	tst.w	r3, #2
    14aa:	d00c      	beq.n	14c6 <mem_manage_fault+0x2e>
		uint32_t temp = SCB->MMFAR;
    14ac:	4b21      	ldr	r3, [pc, #132]	; (1534 <mem_manage_fault+0x9c>)
    14ae:	6b58      	ldr	r0, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    14b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14b2:	f013 0f80 	tst.w	r3, #128	; 0x80
    14b6:	d02f      	beq.n	1518 <mem_manage_fault+0x80>
			if (from_hard_fault != 0) {
    14b8:	b139      	cbz	r1, 14ca <mem_manage_fault+0x32>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    14ba:	4a1e      	ldr	r2, [pc, #120]	; (1534 <mem_manage_fault+0x9c>)
    14bc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    14be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    14c2:	6293      	str	r3, [r2, #40]	; 0x28
    14c4:	e001      	b.n	14ca <mem_manage_fault+0x32>
	uint32_t mmfar = -EINVAL;
    14c6:	f06f 0015 	mvn.w	r0, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    14ca:	4b1a      	ldr	r3, [pc, #104]	; (1534 <mem_manage_fault+0x9c>)
    14cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    14ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    14d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14d2:	f013 0f10 	tst.w	r3, #16
    14d6:	d104      	bne.n	14e2 <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    14d8:	4b16      	ldr	r3, [pc, #88]	; (1534 <mem_manage_fault+0x9c>)
    14da:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    14dc:	f014 0402 	ands.w	r4, r4, #2
    14e0:	d004      	beq.n	14ec <mem_manage_fault+0x54>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    14e2:	4b14      	ldr	r3, [pc, #80]	; (1534 <mem_manage_fault+0x9c>)
    14e4:	685c      	ldr	r4, [r3, #4]
    14e6:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    14ea:	d118      	bne.n	151e <mem_manage_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    14ec:	4b11      	ldr	r3, [pc, #68]	; (1534 <mem_manage_fault+0x9c>)
    14ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    14f0:	f013 0f20 	tst.w	r3, #32
    14f4:	d004      	beq.n	1500 <mem_manage_fault+0x68>
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    14f6:	4a0f      	ldr	r2, [pc, #60]	; (1534 <mem_manage_fault+0x9c>)
    14f8:	6a53      	ldr	r3, [r2, #36]	; 0x24
    14fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    14fe:	6253      	str	r3, [r2, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1500:	4a0c      	ldr	r2, [pc, #48]	; (1534 <mem_manage_fault+0x9c>)
    1502:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1504:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1508:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    150a:	2101      	movs	r1, #1
    150c:	4628      	mov	r0, r5
    150e:	f003 ff4e 	bl	53ae <memory_fault_recoverable>
    1512:	7030      	strb	r0, [r6, #0]
}
    1514:	4620      	mov	r0, r4
    1516:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    1518:	f06f 0015 	mvn.w	r0, #21
    151c:	e7d5      	b.n	14ca <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    151e:	4629      	mov	r1, r5
    1520:	f7ff fef8 	bl	1314 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1524:	4604      	mov	r4, r0
    1526:	2800      	cmp	r0, #0
    1528:	d0e0      	beq.n	14ec <mem_manage_fault+0x54>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    152a:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    152e:	2402      	movs	r4, #2
    1530:	e7dc      	b.n	14ec <mem_manage_fault+0x54>
    1532:	bf00      	nop
    1534:	e000ed00 	.word	0xe000ed00

00001538 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    1538:	b538      	push	{r3, r4, r5, lr}
    153a:	4605      	mov	r5, r0
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    153c:	2300      	movs	r3, #0
    153e:	700b      	strb	r3, [r1, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1540:	4b1a      	ldr	r3, [pc, #104]	; (15ac <hard_fault+0x74>)
    1542:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1544:	f010 0002 	ands.w	r0, r0, #2
    1548:	d12d      	bne.n	15a6 <hard_fault+0x6e>
    154a:	460c      	mov	r4, r1
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    154e:	2b00      	cmp	r3, #0
    1550:	db2a      	blt.n	15a8 <hard_fault+0x70>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1552:	4b16      	ldr	r3, [pc, #88]	; (15ac <hard_fault+0x74>)
    1554:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    1556:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    155a:	d025      	beq.n	15a8 <hard_fault+0x70>
		PR_EXC("  Fault escalation (see below)");
		if (z_arm_is_synchronous_svc(esf)) {
    155c:	4628      	mov	r0, r5
    155e:	f7ff ff7d 	bl	145c <z_arm_is_synchronous_svc>
    1562:	b108      	cbz	r0, 1568 <hard_fault+0x30>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
			reason = esf->basic.r0;
    1564:	6828      	ldr	r0, [r5, #0]
    1566:	e01f      	b.n	15a8 <hard_fault+0x70>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1568:	4b10      	ldr	r3, [pc, #64]	; (15ac <hard_fault+0x74>)
    156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    156c:	f013 0fff 	tst.w	r3, #255	; 0xff
    1570:	d10d      	bne.n	158e <hard_fault+0x56>
			reason = mem_manage_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1572:	4b0e      	ldr	r3, [pc, #56]	; (15ac <hard_fault+0x74>)
    1574:	6a98      	ldr	r0, [r3, #40]	; 0x28
    1576:	f410 407f 	ands.w	r0, r0, #65280	; 0xff00
    157a:	d10e      	bne.n	159a <hard_fault+0x62>
			reason = bus_fault(esf, 1, recoverable);
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    157c:	4b0b      	ldr	r3, [pc, #44]	; (15ac <hard_fault+0x74>)
    157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1584:	d310      	bcc.n	15a8 <hard_fault+0x70>
			reason = usage_fault(esf);
    1586:	4628      	mov	r0, r5
    1588:	f7ff ff56 	bl	1438 <usage_fault>
    158c:	e00c      	b.n	15a8 <hard_fault+0x70>
			reason = mem_manage_fault(esf, 1, recoverable);
    158e:	4622      	mov	r2, r4
    1590:	2101      	movs	r1, #1
    1592:	4628      	mov	r0, r5
    1594:	f7ff ff80 	bl	1498 <mem_manage_fault>
    1598:	e006      	b.n	15a8 <hard_fault+0x70>
			reason = bus_fault(esf, 1, recoverable);
    159a:	4622      	mov	r2, r4
    159c:	2101      	movs	r1, #1
    159e:	4628      	mov	r0, r5
    15a0:	f7ff ff20 	bl	13e4 <bus_fault>
    15a4:	e000      	b.n	15a8 <hard_fault+0x70>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    15a6:	2000      	movs	r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    15a8:	bd38      	pop	{r3, r4, r5, pc}
    15aa:	bf00      	nop
    15ac:	e000ed00 	.word	0xe000ed00

000015b0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    15b0:	b570      	push	{r4, r5, r6, lr}
    15b2:	b08a      	sub	sp, #40	; 0x28
    15b4:	460c      	mov	r4, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    15b6:	4b22      	ldr	r3, [pc, #136]	; (1640 <z_arm_fault+0x90>)
    15b8:	6859      	ldr	r1, [r3, #4]
    15ba:	f3c1 0108 	ubfx	r1, r1, #0, #9
    15be:	2300      	movs	r3, #0
    15c0:	f383 8811 	msr	BASEPRI, r3
    15c4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    15c8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    15cc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    15d0:	d115      	bne.n	15fe <z_arm_fault+0x4e>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    15d2:	f002 030c 	and.w	r3, r2, #12
    15d6:	2b08      	cmp	r3, #8
    15d8:	d014      	beq.n	1604 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    15da:	f012 0f08 	tst.w	r2, #8
    15de:	d00b      	beq.n	15f8 <z_arm_fault+0x48>
	*nested_exc = false;
    15e0:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    15e2:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    15e6:	4620      	mov	r0, r4
    15e8:	f003 fee6 	bl	53b8 <fault_handle>
    15ec:	4605      	mov	r5, r0
	if (recoverable) {
    15ee:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    15f2:	b153      	cbz	r3, 160a <z_arm_fault+0x5a>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    15f4:	b00a      	add	sp, #40	; 0x28
    15f6:	bd70      	pop	{r4, r5, r6, pc}
			ptr_esf = (z_arch_esf_t *)msp;
    15f8:	4604      	mov	r4, r0
			*nested_exc = true;
    15fa:	2601      	movs	r6, #1
    15fc:	e7f1      	b.n	15e2 <z_arm_fault+0x32>
	*nested_exc = false;
    15fe:	2600      	movs	r6, #0
		return NULL;
    1600:	4634      	mov	r4, r6
    1602:	e7ee      	b.n	15e2 <z_arm_fault+0x32>
	*nested_exc = false;
    1604:	2600      	movs	r6, #0
		return NULL;
    1606:	4634      	mov	r4, r6
    1608:	e7eb      	b.n	15e2 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    160a:	2220      	movs	r2, #32
    160c:	4621      	mov	r1, r4
    160e:	a801      	add	r0, sp, #4
    1610:	f003 ff97 	bl	5542 <memcpy>
	if (nested_exc) {
    1614:	b14e      	cbz	r6, 162a <z_arm_fault+0x7a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1616:	9b08      	ldr	r3, [sp, #32]
    1618:	f3c3 0208 	ubfx	r2, r3, #0, #9
    161c:	b95a      	cbnz	r2, 1636 <z_arm_fault+0x86>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    161e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1622:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    1626:	9308      	str	r3, [sp, #32]
    1628:	e005      	b.n	1636 <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    162a:	9b08      	ldr	r3, [sp, #32]
    162c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1630:	f023 0301 	bic.w	r3, r3, #1
    1634:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    1636:	a901      	add	r1, sp, #4
    1638:	4628      	mov	r0, r5
    163a:	f003 fe97 	bl	536c <z_arm_fatal_error>
    163e:	e7d9      	b.n	15f4 <z_arm_fault+0x44>
    1640:	e000ed00 	.word	0xe000ed00

00001644 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1644:	4a02      	ldr	r2, [pc, #8]	; (1650 <z_arm_fault_init+0xc>)
    1646:	6953      	ldr	r3, [r2, #20]
    1648:	f043 0310 	orr.w	r3, r3, #16
    164c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    164e:	4770      	bx	lr
    1650:	e000ed00 	.word	0xe000ed00

00001654 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1654:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1658:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    165c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    165e:	4672      	mov	r2, lr
	bl z_arm_fault
    1660:	f7ff ffa6 	bl	15b0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1664:	bd01      	pop	{r0, pc}
    1666:	bf00      	nop

00001668 <z_arm_interrupt_init>:
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1668:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    166a:	e006      	b.n	167a <z_arm_interrupt_init+0x12>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    166c:	f003 030f 	and.w	r3, r3, #15
    1670:	4909      	ldr	r1, [pc, #36]	; (1698 <z_arm_interrupt_init+0x30>)
    1672:	4419      	add	r1, r3
    1674:	2320      	movs	r3, #32
    1676:	760b      	strb	r3, [r1, #24]
    1678:	3201      	adds	r2, #1
    167a:	2a2f      	cmp	r2, #47	; 0x2f
    167c:	dc0a      	bgt.n	1694 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    167e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1680:	2b00      	cmp	r3, #0
    1682:	dbf3      	blt.n	166c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1684:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    1688:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    168c:	2120      	movs	r1, #32
    168e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    1692:	e7f1      	b.n	1678 <z_arm_interrupt_init+0x10>
	}
}
    1694:	4770      	bx	lr
    1696:	bf00      	nop
    1698:	e000ecfc 	.word	0xe000ecfc

0000169c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_DEBUG_THREAD_INFO)
    /* Clear z_sys_post_kernel flag for RTOS aware debuggers */
    movs.n r0, #0
    169c:	2000      	movs	r0, #0
    ldr r1, =z_sys_post_kernel
    169e:	4913      	ldr	r1, [pc, #76]	; (16ec <__start+0x50>)
    strb r0, [r1]
    16a0:	7008      	strb	r0, [r1, #0]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    16a2:	2000      	movs	r0, #0
    msr CONTROL, r0
    16a4:	f380 8814 	msr	CONTROL, r0
    isb
    16a8:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    16ac:	f7ff fb00 	bl	cb0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    16b0:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    16b2:	490f      	ldr	r1, [pc, #60]	; (16f0 <__start+0x54>)
    str r0, [r1]
    16b4:	6008      	str	r0, [r1, #0]
    dsb
    16b6:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    16ba:	480e      	ldr	r0, [pc, #56]	; (16f4 <__start+0x58>)
    msr msp, r0
    16bc:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    16c0:	f000 f830 	bl	1724 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    16c4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    16c6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    16ca:	480b      	ldr	r0, [pc, #44]	; (16f8 <__start+0x5c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    16cc:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    16d0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    16d2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    16d6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    16da:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    16dc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    16de:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    16e2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    16e6:	f7ff fd7f 	bl	11e8 <z_arm_prep_c>
    16ea:	0000      	.short	0x0000
    ldr r1, =z_sys_post_kernel
    16ec:	20000ff5 	.word	0x20000ff5
    ldr r1, =_SCS_MPU_CTRL
    16f0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    16f4:	20001dc0 	.word	0x20001dc0
    ldr r0, =z_interrupt_stacks
    16f8:	20001000 	.word	0x20001000

000016fc <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    16fc:	4b08      	ldr	r3, [pc, #32]	; (1720 <z_arm_clear_arm_mpu_config+0x24>)
    16fe:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
	int num_regions =
    1702:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    1706:	2300      	movs	r3, #0
    1708:	e006      	b.n	1718 <z_arm_clear_arm_mpu_config+0x1c>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    170a:	4a05      	ldr	r2, [pc, #20]	; (1720 <z_arm_clear_arm_mpu_config+0x24>)
    170c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1710:	2100      	movs	r1, #0
    1712:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    1716:	3301      	adds	r3, #1
    1718:	4283      	cmp	r3, r0
    171a:	dbf6      	blt.n	170a <z_arm_clear_arm_mpu_config+0xe>
		ARM_MPU_ClrRegion(i);
	}
}
    171c:	4770      	bx	lr
    171e:	bf00      	nop
    1720:	e000ed00 	.word	0xe000ed00

00001724 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1724:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1726:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1728:	2400      	movs	r4, #0
    172a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    172e:	f7ff ffe5 	bl	16fc <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1732:	4623      	mov	r3, r4
    1734:	e008      	b.n	1748 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    1736:	f103 0120 	add.w	r1, r3, #32
    173a:	4a0e      	ldr	r2, [pc, #56]	; (1774 <z_arm_init_arch_hw_at_boot+0x50>)
    173c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1740:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    1744:	3301      	adds	r3, #1
    1746:	b2db      	uxtb	r3, r3
    1748:	2b07      	cmp	r3, #7
    174a:	d9f4      	bls.n	1736 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    174c:	2300      	movs	r3, #0
    174e:	e008      	b.n	1762 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1750:	f103 0160 	add.w	r1, r3, #96	; 0x60
    1754:	4a07      	ldr	r2, [pc, #28]	; (1774 <z_arm_init_arch_hw_at_boot+0x50>)
    1756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    175a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    175e:	3301      	adds	r3, #1
    1760:	b2db      	uxtb	r3, r3
    1762:	2b07      	cmp	r3, #7
    1764:	d9f4      	bls.n	1750 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    1766:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1768:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    176c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1770:	bd10      	pop	{r4, pc}
    1772:	bf00      	nop
    1774:	e000e100 	.word	0xe000e100

00001778 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1778:	b508      	push	{r3, lr}
	if (_current == thread) {
    177a:	4b0a      	ldr	r3, [pc, #40]	; (17a4 <z_impl_k_thread_abort+0x2c>)
    177c:	689b      	ldr	r3, [r3, #8]
    177e:	4283      	cmp	r3, r0
    1780:	d002      	beq.n	1788 <z_impl_k_thread_abort+0x10>
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
		}
	}

	z_thread_abort(thread);
    1782:	f002 fdf3 	bl	436c <z_thread_abort>
}
    1786:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1788:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    178c:	2b00      	cmp	r3, #0
    178e:	d0f8      	beq.n	1782 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1790:	4b05      	ldr	r3, [pc, #20]	; (17a8 <z_impl_k_thread_abort+0x30>)
    1792:	685a      	ldr	r2, [r3, #4]
    1794:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1798:	605a      	str	r2, [r3, #4]
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    179a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    179c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    17a0:	625a      	str	r2, [r3, #36]	; 0x24
    17a2:	e7ee      	b.n	1782 <z_impl_k_thread_abort+0xa>
    17a4:	20000ddc 	.word	0x20000ddc
    17a8:	e000ed00 	.word	0xe000ed00

000017ac <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    17ac:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    17ae:	4b03      	ldr	r3, [pc, #12]	; (17bc <z_arm_configure_static_mpu_regions+0x10>)
    17b0:	4a03      	ldr	r2, [pc, #12]	; (17c0 <z_arm_configure_static_mpu_regions+0x14>)
    17b2:	2101      	movs	r1, #1
    17b4:	4803      	ldr	r0, [pc, #12]	; (17c4 <z_arm_configure_static_mpu_regions+0x18>)
    17b6:	f003 fe85 	bl	54c4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    17ba:	bd08      	pop	{r3, pc}
    17bc:	20040000 	.word	0x20040000
    17c0:	20000000 	.word	0x20000000
    17c4:	00006b8c 	.word	0x00006b8c

000017c8 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    17c8:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    17ca:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    17ce:	3b40      	subs	r3, #64	; 0x40
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    17d0:	4804      	ldr	r0, [pc, #16]	; (17e4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    17d2:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    17d4:	2340      	movs	r3, #64	; 0x40
    17d6:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    17d8:	4b03      	ldr	r3, [pc, #12]	; (17e8 <z_arm_configure_dynamic_mpu_regions+0x20>)
    17da:	6083      	str	r3, [r0, #8]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    17dc:	2101      	movs	r1, #1
    17de:	f003 fe75 	bl	54cc <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_enable();
#endif
}
    17e2:	bd08      	pop	{r3, pc}
    17e4:	20000884 	.word	0x20000884
    17e8:	150b0000 	.word	0x150b0000

000017ec <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    17ec:	4a08      	ldr	r2, [pc, #32]	; (1810 <region_init+0x24>)
    17ee:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    17f2:	680b      	ldr	r3, [r1, #0]
    17f4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    17f8:	4303      	orrs	r3, r0
    17fa:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    17fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1802:	688b      	ldr	r3, [r1, #8]
    1804:	f043 0301 	orr.w	r3, r3, #1
    1808:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    180c:	4770      	bx	lr
    180e:	bf00      	nop
    1810:	e000ed00 	.word	0xe000ed00

00001814 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    1814:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    1816:	4c03      	ldr	r4, [pc, #12]	; (1824 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1818:	2301      	movs	r3, #1
    181a:	7822      	ldrb	r2, [r4, #0]
    181c:	f003 fe2a 	bl	5474 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1820:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    1822:	bd10      	pop	{r4, pc}
    1824:	20000ff0 	.word	0x20000ff0

00001828 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1828:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    182a:	2300      	movs	r3, #0
    182c:	4a09      	ldr	r2, [pc, #36]	; (1854 <mpu_configure_dynamic_mpu_regions+0x2c>)
    182e:	7812      	ldrb	r2, [r2, #0]
    1830:	f003 fe20 	bl	5474 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1834:	f110 0f16 	cmn.w	r0, #22
    1838:	d00a      	beq.n	1850 <mpu_configure_dynamic_mpu_regions+0x28>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    183a:	4603      	mov	r3, r0
    183c:	e006      	b.n	184c <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    183e:	4a06      	ldr	r2, [pc, #24]	; (1858 <mpu_configure_dynamic_mpu_regions+0x30>)
    1840:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1844:	2100      	movs	r1, #0
    1846:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
    184a:	3301      	adds	r3, #1
    184c:	2b07      	cmp	r3, #7
    184e:	ddf6      	ble.n	183e <mpu_configure_dynamic_mpu_regions+0x16>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    1850:	bd08      	pop	{r3, pc}
    1852:	bf00      	nop
    1854:	20000ff0 	.word	0x20000ff0
    1858:	e000ed00 	.word	0xe000ed00

0000185c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    185c:	4b04      	ldr	r3, [pc, #16]	; (1870 <arm_core_mpu_enable+0x14>)
    185e:	2205      	movs	r2, #5
    1860:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1864:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1868:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    186c:	4770      	bx	lr
    186e:	bf00      	nop
    1870:	e000ed00 	.word	0xe000ed00

00001874 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1874:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1878:	4b02      	ldr	r3, [pc, #8]	; (1884 <arm_core_mpu_disable+0x10>)
    187a:	2200      	movs	r2, #0
    187c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1880:	4770      	bx	lr
    1882:	bf00      	nop
    1884:	e000ed00 	.word	0xe000ed00

00001888 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    1888:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    188a:	4b0e      	ldr	r3, [pc, #56]	; (18c4 <z_arm_mpu_init+0x3c>)
    188c:	681d      	ldr	r5, [r3, #0]
    188e:	2d08      	cmp	r5, #8
    1890:	d815      	bhi.n	18be <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1892:	f7ff ffef 	bl	1874 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1896:	2400      	movs	r4, #0
    1898:	e009      	b.n	18ae <z_arm_mpu_init+0x26>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    189a:	4b0a      	ldr	r3, [pc, #40]	; (18c4 <z_arm_mpu_init+0x3c>)
    189c:	6859      	ldr	r1, [r3, #4]
    189e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    18a2:	0093      	lsls	r3, r2, #2
    18a4:	4419      	add	r1, r3
    18a6:	4620      	mov	r0, r4
    18a8:	f7ff ffa0 	bl	17ec <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    18ac:	3401      	adds	r4, #1
    18ae:	42a5      	cmp	r5, r4
    18b0:	d8f3      	bhi.n	189a <z_arm_mpu_init+0x12>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    18b2:	4b05      	ldr	r3, [pc, #20]	; (18c8 <z_arm_mpu_init+0x40>)
    18b4:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    18b6:	f7ff ffd1 	bl	185c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    18ba:	2000      	movs	r0, #0
}
    18bc:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    18be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    18c2:	e7fb      	b.n	18bc <z_arm_mpu_init+0x34>
    18c4:	00006b98 	.word	0x00006b98
    18c8:	20000ff0 	.word	0x20000ff0

000018cc <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    18cc:	4b01      	ldr	r3, [pc, #4]	; (18d4 <__stdout_hook_install+0x8>)
    18ce:	6018      	str	r0, [r3, #0]
}
    18d0:	4770      	bx	lr
    18d2:	bf00      	nop
    18d4:	20000028 	.word	0x20000028

000018d8 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    18d8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    18dc:	4905      	ldr	r1, [pc, #20]	; (18f4 <__NVIC_SystemReset+0x1c>)
    18de:	68ca      	ldr	r2, [r1, #12]
    18e0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    18e4:	4b04      	ldr	r3, [pc, #16]	; (18f8 <__NVIC_SystemReset+0x20>)
    18e6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    18e8:	60cb      	str	r3, [r1, #12]
    18ea:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    18ee:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    18f0:	e7fd      	b.n	18ee <__NVIC_SystemReset+0x16>
    18f2:	bf00      	nop
    18f4:	e000ed00 	.word	0xe000ed00
    18f8:	05fa0004 	.word	0x05fa0004

000018fc <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    18fc:	b510      	push	{r4, lr}
	__asm__ volatile(
    18fe:	f04f 0320 	mov.w	r3, #32
    1902:	f3ef 8411 	mrs	r4, BASEPRI
    1906:	f383 8812 	msr	BASEPRI_MAX, r3
    190a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    190e:	2301      	movs	r3, #1
    1910:	4a0c      	ldr	r2, [pc, #48]	; (1944 <nordicsemi_nrf52_init+0x48>)
    1912:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1916:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    191a:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    191e:	f003 fe60 	bl	55e2 <nrf52_errata_197>
    1922:	b120      	cbz	r0, 192e <nordicsemi_nrf52_init+0x32>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    1924:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1928:	2201      	movs	r2, #1
    192a:	f8c3 2638 	str.w	r2, [r3, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    192e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1932:	2201      	movs	r2, #1
    1934:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    1938:	f384 8811 	msr	BASEPRI, r4
    193c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1940:	2000      	movs	r0, #0
    1942:	bd10      	pop	{r4, pc}
    1944:	4001e000 	.word	0x4001e000

00001948 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1948:	b130      	cbz	r0, 1958 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    194a:	b508      	push	{r3, lr}
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    194c:	4b03      	ldr	r3, [pc, #12]	; (195c <arch_busy_wait+0x14>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    194e:	0180      	lsls	r0, r0, #6
    1950:	f043 0301 	orr.w	r3, r3, #1
    1954:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    1956:	bd08      	pop	{r3, pc}
    1958:	4770      	bx	lr
    195a:	bf00      	nop
    195c:	000069f0 	.word	0x000069f0

00001960 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    1960:	4800      	ldr	r0, [pc, #0]	; (1964 <get_hf_flags+0x4>)
    1962:	4770      	bx	lr
    1964:	200008e4 	.word	0x200008e4

00001968 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1968:	4b03      	ldr	r3, [pc, #12]	; (1978 <get_subsys+0x10>)
    196a:	1ac0      	subs	r0, r0, r3
    196c:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    196e:	4b03      	ldr	r3, [pc, #12]	; (197c <get_subsys+0x14>)
    1970:	fb03 f000 	mul.w	r0, r3, r0
    1974:	4770      	bx	lr
    1976:	bf00      	nop
    1978:	200008a4 	.word	0x200008a4
    197c:	b6db6db7 	.word	0xb6db6db7

00001980 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1980:	b538      	push	{r3, r4, r5, lr}
    1982:	4605      	mov	r5, r0
    1984:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1986:	f7ff ffef 	bl	1968 <get_subsys>
    198a:	4601      	mov	r1, r0
    198c:	2240      	movs	r2, #64	; 0x40
    198e:	4803      	ldr	r0, [pc, #12]	; (199c <onoff_stop+0x1c>)
    1990:	f003 feec 	bl	576c <stop>
    1994:	4601      	mov	r1, r0
	notify(mgr, res);
    1996:	4628      	mov	r0, r5
    1998:	47a0      	blx	r4
}
    199a:	bd38      	pop	{r3, r4, r5, pc}
    199c:	00006780 	.word	0x00006780

000019a0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    19a0:	b530      	push	{r4, r5, lr}
    19a2:	b083      	sub	sp, #12
    19a4:	4605      	mov	r5, r0
    19a6:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    19a8:	f7ff ffde 	bl	1968 <get_subsys>
    19ac:	4601      	mov	r1, r0
    19ae:	2340      	movs	r3, #64	; 0x40
    19b0:	9300      	str	r3, [sp, #0]
    19b2:	4623      	mov	r3, r4
    19b4:	4a05      	ldr	r2, [pc, #20]	; (19cc <onoff_start+0x2c>)
    19b6:	4806      	ldr	r0, [pc, #24]	; (19d0 <onoff_start+0x30>)
    19b8:	f003 fef2 	bl	57a0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    19bc:	1e01      	subs	r1, r0, #0
    19be:	db01      	blt.n	19c4 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    19c0:	b003      	add	sp, #12
    19c2:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    19c4:	4628      	mov	r0, r5
    19c6:	47a0      	blx	r4
}
    19c8:	e7fa      	b.n	19c0 <onoff_start+0x20>
    19ca:	bf00      	nop
    19cc:	000057e9 	.word	0x000057e9
    19d0:	00006780 	.word	0x00006780

000019d4 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    19d4:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    19d6:	b110      	cbz	r0, 19de <clock_event_handler+0xa>
    19d8:	2801      	cmp	r0, #1
    19da:	d00d      	beq.n	19f8 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    19dc:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    19de:	2100      	movs	r1, #0
    19e0:	4808      	ldr	r0, [pc, #32]	; (1a04 <clock_event_handler+0x30>)
    19e2:	f003 fe4e 	bl	5682 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    19e6:	6883      	ldr	r3, [r0, #8]
    19e8:	f013 0f07 	tst.w	r3, #7
    19ec:	d1f6      	bne.n	19dc <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    19ee:	2100      	movs	r1, #0
    19f0:	4804      	ldr	r0, [pc, #16]	; (1a04 <clock_event_handler+0x30>)
    19f2:	f003 fea9 	bl	5748 <clkstarted_handle>
    19f6:	e7f1      	b.n	19dc <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    19f8:	2101      	movs	r1, #1
    19fa:	4802      	ldr	r0, [pc, #8]	; (1a04 <clock_event_handler+0x30>)
    19fc:	f003 fea4 	bl	5748 <clkstarted_handle>
}
    1a00:	e7ec      	b.n	19dc <clock_event_handler+0x8>
    1a02:	bf00      	nop
    1a04:	00006780 	.word	0x00006780

00001a08 <generic_hfclk_start>:
{
    1a08:	b510      	push	{r4, lr}
    1a0a:	b082      	sub	sp, #8
	__asm__ volatile(
    1a0c:	f04f 0320 	mov.w	r3, #32
    1a10:	f3ef 8411 	mrs	r4, BASEPRI
    1a14:	f383 8812 	msr	BASEPRI_MAX, r3
    1a18:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1a1c:	4a14      	ldr	r2, [pc, #80]	; (1a70 <generic_hfclk_start+0x68>)
    1a1e:	6813      	ldr	r3, [r2, #0]
    1a20:	f043 0102 	orr.w	r1, r3, #2
    1a24:	6011      	str	r1, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1a26:	f013 0f01 	tst.w	r3, #1
    1a2a:	d109      	bne.n	1a40 <generic_hfclk_start+0x38>
	bool already_started = false;
    1a2c:	2300      	movs	r3, #0
	__asm__ volatile(
    1a2e:	f384 8811 	msr	BASEPRI, r4
    1a32:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1a36:	b9b3      	cbnz	r3, 1a66 <generic_hfclk_start+0x5e>
	hfclk_start();
    1a38:	f003 fede 	bl	57f8 <hfclk_start>
}
    1a3c:	b002      	add	sp, #8
    1a3e:	bd10      	pop	{r4, pc}
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    1a40:	f10d 0207 	add.w	r2, sp, #7
    1a44:	2101      	movs	r1, #1
    1a46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    1a4a:	f003 fdf7 	bl	563c <nrf_clock_is_running>
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1a4e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1a52:	2b01      	cmp	r3, #1
    1a54:	d001      	beq.n	1a5a <generic_hfclk_start+0x52>
	bool already_started = false;
    1a56:	2300      	movs	r3, #0
    1a58:	e7e9      	b.n	1a2e <generic_hfclk_start+0x26>
			set_on_state(get_hf_flags());
    1a5a:	f7ff ff81 	bl	1960 <get_hf_flags>
    1a5e:	f003 fe60 	bl	5722 <set_on_state>
			already_started = true;
    1a62:	2301      	movs	r3, #1
    1a64:	e7e3      	b.n	1a2e <generic_hfclk_start+0x26>
		clkstarted_handle(CLOCK_DEVICE,
    1a66:	2100      	movs	r1, #0
    1a68:	4802      	ldr	r0, [pc, #8]	; (1a74 <generic_hfclk_start+0x6c>)
    1a6a:	f003 fe6d 	bl	5748 <clkstarted_handle>
		return;
    1a6e:	e7e5      	b.n	1a3c <generic_hfclk_start+0x34>
    1a70:	200008f4 	.word	0x200008f4
    1a74:	00006780 	.word	0x00006780

00001a78 <generic_hfclk_stop>:
{
    1a78:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1a7a:	4b0a      	ldr	r3, [pc, #40]	; (1aa4 <generic_hfclk_stop+0x2c>)
    1a7c:	f3bf 8f5b 	dmb	ish
    1a80:	e853 2f00 	ldrex	r2, [r3]
    1a84:	f022 0102 	bic.w	r1, r2, #2
    1a88:	e843 1000 	strex	r0, r1, [r3]
    1a8c:	2800      	cmp	r0, #0
    1a8e:	d1f7      	bne.n	1a80 <generic_hfclk_stop+0x8>
    1a90:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1a94:	f012 0f01 	tst.w	r2, #1
    1a98:	d000      	beq.n	1a9c <generic_hfclk_stop+0x24>
}
    1a9a:	bd08      	pop	{r3, pc}
	hfclk_stop();
    1a9c:	f003 feb6 	bl	580c <hfclk_stop>
    1aa0:	e7fb      	b.n	1a9a <generic_hfclk_stop+0x22>
    1aa2:	bf00      	nop
    1aa4:	200008f4 	.word	0x200008f4

00001aa8 <lfclk_spinwait>:
{
    1aa8:	b570      	push	{r4, r5, r6, lr}
    1aaa:	b082      	sub	sp, #8
    1aac:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1aae:	2801      	cmp	r0, #1
    1ab0:	d107      	bne.n	1ac2 <lfclk_spinwait+0x1a>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ab6:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1aba:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1abe:	2b01      	cmp	r3, #1
    1ac0:	d04c      	beq.n	1b5c <lfclk_spinwait+0xb4>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1ac2:	f004 fc6c 	bl	639e <k_is_in_isr>
    1ac6:	4604      	mov	r4, r0
    1ac8:	b918      	cbnz	r0, 1ad2 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    1aca:	4b28      	ldr	r3, [pc, #160]	; (1b6c <lfclk_spinwait+0xc4>)
    1acc:	781b      	ldrb	r3, [r3, #0]
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d139      	bne.n	1b46 <lfclk_spinwait+0x9e>
	__asm__ volatile(
    1ad2:	f04f 0320 	mov.w	r3, #32
    1ad6:	f3ef 8611 	mrs	r6, BASEPRI
    1ada:	f383 8812 	msr	BASEPRI_MAX, r3
    1ade:	f3bf 8f6f 	isb	sy
    1ae2:	2401      	movs	r4, #1
	if (!isr_mode) {
    1ae4:	b924      	cbnz	r4, 1af0 <lfclk_spinwait+0x48>
    p_reg->INTENCLR = mask;
    1ae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1aea:	2202      	movs	r2, #2
    1aec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    1af0:	aa01      	add	r2, sp, #4
    1af2:	2100      	movs	r1, #0
    1af4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    1af8:	f003 fda0 	bl	563c <nrf_clock_is_running>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1afc:	b120      	cbz	r0, 1b08 <lfclk_spinwait+0x60>
		 && ((type == target_type)
    1afe:	9b01      	ldr	r3, [sp, #4]
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1b00:	2b01      	cmp	r3, #1
    1b02:	d026      	beq.n	1b52 <lfclk_spinwait+0xaa>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1b04:	2d01      	cmp	r5, #1
    1b06:	d024      	beq.n	1b52 <lfclk_spinwait+0xaa>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1b08:	b1fc      	cbz	r4, 1b4a <lfclk_spinwait+0xa2>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1b0a:	4630      	mov	r0, r6
    1b0c:	f7ff fb2e 	bl	116c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1b10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b14:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1b18:	2b00      	cmp	r3, #0
    1b1a:	d1e9      	bne.n	1af0 <lfclk_spinwait+0x48>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1b1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b20:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1b24:	2b00      	cmp	r3, #0
    1b26:	d0e3      	beq.n	1af0 <lfclk_spinwait+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1b28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b2c:	2200      	movs	r2, #0
    1b2e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1b32:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1b36:	2201      	movs	r2, #1
    1b38:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1b3c:	490c      	ldr	r1, [pc, #48]	; (1b70 <lfclk_spinwait+0xc8>)
    1b3e:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1b42:	609a      	str	r2, [r3, #8]
}
    1b44:	e7d4      	b.n	1af0 <lfclk_spinwait+0x48>
	int key = isr_mode ? irq_lock() : 0;
    1b46:	2600      	movs	r6, #0
    1b48:	e7cc      	b.n	1ae4 <lfclk_spinwait+0x3c>
				k_msleep(1);
    1b4a:	2001      	movs	r0, #1
    1b4c:	f003 fe68 	bl	5820 <k_msleep>
    1b50:	e7de      	b.n	1b10 <lfclk_spinwait+0x68>
	if (isr_mode) {
    1b52:	b12c      	cbz	r4, 1b60 <lfclk_spinwait+0xb8>
	__asm__ volatile(
    1b54:	f386 8811 	msr	BASEPRI, r6
    1b58:	f3bf 8f6f 	isb	sy
}
    1b5c:	b002      	add	sp, #8
    1b5e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    1b60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b64:	2202      	movs	r2, #2
    1b66:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1b6a:	e7f7      	b.n	1b5c <lfclk_spinwait+0xb4>
    1b6c:	20000ff5 	.word	0x20000ff5
    1b70:	e000e100 	.word	0xe000e100

00001b74 <api_blocking_start>:
{
    1b74:	b500      	push	{lr}
    1b76:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1b78:	f8cd d000 	str.w	sp, [sp]
    1b7c:	f8cd d004 	str.w	sp, [sp, #4]
    1b80:	2300      	movs	r3, #0
    1b82:	9302      	str	r3, [sp, #8]
    1b84:	2301      	movs	r3, #1
    1b86:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1b88:	466b      	mov	r3, sp
    1b8a:	4a07      	ldr	r2, [pc, #28]	; (1ba8 <api_blocking_start+0x34>)
    1b8c:	f003 fe24 	bl	57d8 <api_start>
	if (err < 0) {
    1b90:	2800      	cmp	r0, #0
    1b92:	db05      	blt.n	1ba0 <api_blocking_start+0x2c>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1b94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1b98:	2300      	movs	r3, #0
    1b9a:	4668      	mov	r0, sp
    1b9c:	f002 f80a 	bl	3bb4 <z_impl_k_sem_take>
}
    1ba0:	b005      	add	sp, #20
    1ba2:	f85d fb04 	ldr.w	pc, [sp], #4
    1ba6:	bf00      	nop
    1ba8:	0000584d 	.word	0x0000584d

00001bac <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    1bac:	b570      	push	{r4, r5, r6, lr}
    1bae:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1bb0:	2200      	movs	r2, #0
    1bb2:	2101      	movs	r1, #1
    1bb4:	4610      	mov	r0, r2
    1bb6:	f003 fbe8 	bl	538a <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1bba:	4811      	ldr	r0, [pc, #68]	; (1c00 <clk_init+0x54>)
    1bbc:	f000 ffba 	bl	2b34 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1bc0:	4b10      	ldr	r3, [pc, #64]	; (1c04 <clk_init+0x58>)
    1bc2:	4298      	cmp	r0, r3
    1bc4:	d119      	bne.n	1bfa <clk_init+0x4e>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1bc6:	f004 fa72 	bl	60ae <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    1bca:	2400      	movs	r4, #0
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1bcc:	2c01      	cmp	r4, #1
    1bce:	d812      	bhi.n	1bf6 <clk_init+0x4a>
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1bd0:	4621      	mov	r1, r4
    1bd2:	4630      	mov	r0, r6
    1bd4:	f003 fd55 	bl	5682 <get_sub_data>
    1bd8:	4605      	mov	r5, r0

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1bda:	4621      	mov	r1, r4
    1bdc:	4630      	mov	r0, r6
    1bde:	f003 fd5b 	bl	5698 <get_onoff_manager>
    1be2:	4909      	ldr	r1, [pc, #36]	; (1c08 <clk_init+0x5c>)
    1be4:	f003 f8be 	bl	4d64 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1be8:	2800      	cmp	r0, #0
    1bea:	db05      	blt.n	1bf8 <clk_init+0x4c>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1bec:	2301      	movs	r3, #1
    1bee:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    1bf0:	441c      	add	r4, r3
    1bf2:	b2e4      	uxtb	r4, r4
    1bf4:	e7ea      	b.n	1bcc <clk_init+0x20>
	}

	return 0;
    1bf6:	2000      	movs	r0, #0
}
    1bf8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1bfa:	f06f 0004 	mvn.w	r0, #4
    1bfe:	e7fb      	b.n	1bf8 <clk_init+0x4c>
    1c00:	000019d5 	.word	0x000019d5
    1c04:	0bad0000 	.word	0x0bad0000
    1c08:	00006bc8 	.word	0x00006bc8

00001c0c <z_nrf_clock_control_lf_on>:
{
    1c0c:	b510      	push	{r4, lr}
    1c0e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1c10:	4b10      	ldr	r3, [pc, #64]	; (1c54 <z_nrf_clock_control_lf_on+0x48>)
    1c12:	2101      	movs	r1, #1
    1c14:	f3bf 8f5b 	dmb	ish
    1c18:	e853 2f00 	ldrex	r2, [r3]
    1c1c:	e843 1000 	strex	r0, r1, [r3]
    1c20:	2800      	cmp	r0, #0
    1c22:	d1f9      	bne.n	1c18 <z_nrf_clock_control_lf_on+0xc>
    1c24:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1c28:	b11a      	cbz	r2, 1c32 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    1c2a:	1e63      	subs	r3, r4, #1
    1c2c:	2b01      	cmp	r3, #1
    1c2e:	d90d      	bls.n	1c4c <z_nrf_clock_control_lf_on+0x40>
}
    1c30:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    1c32:	4809      	ldr	r0, [pc, #36]	; (1c58 <z_nrf_clock_control_lf_on+0x4c>)
    1c34:	f003 fd30 	bl	5698 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1c38:	4908      	ldr	r1, [pc, #32]	; (1c5c <z_nrf_clock_control_lf_on+0x50>)
    1c3a:	2300      	movs	r3, #0
    1c3c:	604b      	str	r3, [r1, #4]
    1c3e:	608b      	str	r3, [r1, #8]
    1c40:	60cb      	str	r3, [r1, #12]
    1c42:	2301      	movs	r3, #1
    1c44:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    1c46:	f003 f8aa 	bl	4d9e <onoff_request>
    1c4a:	e7ee      	b.n	1c2a <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    1c4c:	4620      	mov	r0, r4
    1c4e:	f7ff ff2b 	bl	1aa8 <lfclk_spinwait>
		break;
    1c52:	e7ed      	b.n	1c30 <z_nrf_clock_control_lf_on+0x24>
    1c54:	200008a0 	.word	0x200008a0
    1c58:	00006780 	.word	0x00006780
    1c5c:	20000890 	.word	0x20000890

00001c60 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1c60:	b510      	push	{r4, lr}
    1c62:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1c64:	280a      	cmp	r0, #10
    1c66:	d006      	beq.n	1c76 <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1c68:	b2e1      	uxtb	r1, r4
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
	const struct uart_driver_api *api =
    1c6a:	4806      	ldr	r0, [pc, #24]	; (1c84 <console_out+0x24>)
    1c6c:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1c6e:	685b      	ldr	r3, [r3, #4]
    1c70:	4798      	blx	r3

	return c;
}
    1c72:	4620      	mov	r0, r4
    1c74:	bd10      	pop	{r4, pc}
	const struct uart_driver_api *api =
    1c76:	4803      	ldr	r0, [pc, #12]	; (1c84 <console_out+0x24>)
    1c78:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1c7a:	685b      	ldr	r3, [r3, #4]
    1c7c:	210d      	movs	r1, #13
    1c7e:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    1c80:	e7f2      	b.n	1c68 <console_out+0x8>
    1c82:	bf00      	nop
    1c84:	000067e0 	.word	0x000067e0

00001c88 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    1c88:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    1c8a:	4c04      	ldr	r4, [pc, #16]	; (1c9c <uart_console_hook_install+0x14>)
    1c8c:	4620      	mov	r0, r4
    1c8e:	f7ff fe1d 	bl	18cc <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    1c92:	4620      	mov	r0, r4
    1c94:	f7fe fc00 	bl	498 <__printk_hook_install>
#endif
}
    1c98:	bd10      	pop	{r4, pc}
    1c9a:	bf00      	nop
    1c9c:	00001c61 	.word	0x00001c61

00001ca0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1ca0:	b508      	push	{r3, lr}
    1ca2:	4805      	ldr	r0, [pc, #20]	; (1cb8 <uart_console_init+0x18>)
    1ca4:	f004 fae2 	bl	626c <z_device_is_ready>

	ARG_UNUSED(arg);

	if (!device_is_ready(uart_console_dev)) {
    1ca8:	b118      	cbz	r0, 1cb2 <uart_console_init+0x12>
		return -ENODEV;
	}

	uart_console_hook_install();
    1caa:	f7ff ffed 	bl	1c88 <uart_console_hook_install>

	return 0;
    1cae:	2000      	movs	r0, #0
}
    1cb0:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1cb2:	f06f 0012 	mvn.w	r0, #18
    1cb6:	e7fb      	b.n	1cb0 <uart_console_init+0x10>
    1cb8:	000067e0 	.word	0x000067e0

00001cbc <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1cbc:	b128      	cbz	r0, 1cca <get_dev+0xe>
    1cbe:	2801      	cmp	r0, #1
    1cc0:	d101      	bne.n	1cc6 <get_dev+0xa>
    1cc2:	4803      	ldr	r0, [pc, #12]	; (1cd0 <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    1cc4:	4770      	bx	lr
	const struct device *dev = NULL;
    1cc6:	2000      	movs	r0, #0
    1cc8:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1cca:	4802      	ldr	r0, [pc, #8]	; (1cd4 <get_dev+0x18>)
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop
    1cd0:	00006798 	.word	0x00006798
    1cd4:	000067b0 	.word	0x000067b0

00001cd8 <gpio_nrfx_pin_interrupt_configure>:
{
    1cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cda:	b085      	sub	sp, #20
    1cdc:	460e      	mov	r6, r1
    1cde:	4619      	mov	r1, r3
	return port->config;
    1ce0:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1ce2:	7b1b      	ldrb	r3, [r3, #12]
    1ce4:	f006 051f 	and.w	r5, r6, #31
    1ce8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    1cec:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
    1cf0:	d022      	beq.n	1d38 <gpio_nrfx_pin_interrupt_configure+0x60>
    1cf2:	4607      	mov	r7, r0
    1cf4:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    1cf6:	2300      	movs	r3, #0
    1cf8:	9301      	str	r3, [sp, #4]
    1cfa:	9302      	str	r3, [sp, #8]
		.trigger = get_trigger(mode, trig),
    1cfc:	4610      	mov	r0, r2
    1cfe:	f003 fe87 	bl	5a10 <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1d02:	f88d 0004 	strb.w	r0, [sp, #4]
	return port->config;
    1d06:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1d08:	6899      	ldr	r1, [r3, #8]
    1d0a:	40f1      	lsrs	r1, r6
    1d0c:	f011 0f01 	tst.w	r1, #1
    1d10:	d102      	bne.n	1d18 <gpio_nrfx_pin_interrupt_configure+0x40>
    1d12:	f1b4 7fa0 	cmp.w	r4, #20971520	; 0x1400000
    1d16:	d014      	beq.n	1d42 <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1d18:	2300      	movs	r3, #0
    1d1a:	aa01      	add	r2, sp, #4
    1d1c:	4619      	mov	r1, r3
    1d1e:	4628      	mov	r0, r5
    1d20:	f001 f9b2 	bl	3088 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1d24:	4b1b      	ldr	r3, [pc, #108]	; (1d94 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    1d26:	4298      	cmp	r0, r3
    1d28:	d131      	bne.n	1d8e <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1d2a:	2101      	movs	r1, #1
    1d2c:	4628      	mov	r0, r5
    1d2e:	f001 fb0b 	bl	3348 <nrfx_gpiote_trigger_enable>
	return 0;
    1d32:	2000      	movs	r0, #0
}
    1d34:	b005      	add	sp, #20
    1d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    1d38:	4628      	mov	r0, r5
    1d3a:	f001 fb37 	bl	33ac <nrfx_gpiote_trigger_disable>
		return 0;
    1d3e:	2000      	movs	r0, #0
    1d40:	e7f8      	b.n	1d34 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1d42:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    1d46:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    1d48:	2a01      	cmp	r2, #1
    1d4a:	d014      	beq.n	1d76 <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    1d4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1d50:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1d58:	f013 0f01 	tst.w	r3, #1
    1d5c:	d1dc      	bne.n	1d18 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1d5e:	f10d 010f 	add.w	r1, sp, #15
    1d62:	4628      	mov	r0, r5
    1d64:	f001 fa94 	bl	3290 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1d68:	4b0b      	ldr	r3, [pc, #44]	; (1d98 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1d6a:	4298      	cmp	r0, r3
    1d6c:	d005      	beq.n	1d7a <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    1d6e:	f10d 030f 	add.w	r3, sp, #15
    1d72:	9302      	str	r3, [sp, #8]
    1d74:	e7d0      	b.n	1d18 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    1d76:	4a09      	ldr	r2, [pc, #36]	; (1d9c <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1d78:	e7ea      	b.n	1d50 <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    1d7a:	f10d 000f 	add.w	r0, sp, #15
    1d7e:	f001 fadb 	bl	3338 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1d82:	4b04      	ldr	r3, [pc, #16]	; (1d94 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    1d84:	4298      	cmp	r0, r3
    1d86:	d0f2      	beq.n	1d6e <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    1d88:	f06f 000b 	mvn.w	r0, #11
    1d8c:	e7d2      	b.n	1d34 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EINVAL;
    1d8e:	f06f 0015 	mvn.w	r0, #21
    1d92:	e7cf      	b.n	1d34 <gpio_nrfx_pin_interrupt_configure+0x5c>
    1d94:	0bad0000 	.word	0x0bad0000
    1d98:	0bad0004 	.word	0x0bad0004
    1d9c:	50000300 	.word	0x50000300

00001da0 <gpio_nrfx_pin_configure>:
{
    1da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1da4:	b086      	sub	sp, #24
    1da6:	460e      	mov	r6, r1
    1da8:	4614      	mov	r4, r2
	return port->config;
    1daa:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1dae:	f898 300c 	ldrb.w	r3, [r8, #12]
    1db2:	f001 051f 	and.w	r5, r1, #31
    1db6:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1dba:	f10d 0117 	add.w	r1, sp, #23
    1dbe:	4628      	mov	r0, r5
    1dc0:	f001 fa66 	bl	3290 <nrfx_gpiote_channel_get>
    1dc4:	4607      	mov	r7, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    1dc6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
    1dca:	d03a      	beq.n	1e42 <gpio_nrfx_pin_configure+0xa2>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1dcc:	2100      	movs	r1, #0
    1dce:	9103      	str	r1, [sp, #12]
    1dd0:	9104      	str	r1, [sp, #16]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1dd2:	460b      	mov	r3, r1
    1dd4:	aa03      	add	r2, sp, #12
    1dd6:	4628      	mov	r0, r5
    1dd8:	f001 f956 	bl	3088 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1ddc:	4b33      	ldr	r3, [pc, #204]	; (1eac <gpio_nrfx_pin_configure+0x10c>)
    1dde:	4298      	cmp	r0, r3
    1de0:	d161      	bne.n	1ea6 <gpio_nrfx_pin_configure+0x106>
	if (free_ch) {
    1de2:	429f      	cmp	r7, r3
    1de4:	d03d      	beq.n	1e62 <gpio_nrfx_pin_configure+0xc2>
	if (flags & GPIO_OUTPUT) {
    1de6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
    1dea:	d049      	beq.n	1e80 <gpio_nrfx_pin_configure+0xe0>
		int rv = get_drive(flags, &drive);
    1dec:	f10d 0103 	add.w	r1, sp, #3
    1df0:	4620      	mov	r0, r4
    1df2:	f003 fd92 	bl	591a <get_drive>
		if (rv != 0) {
    1df6:	4607      	mov	r7, r0
    1df8:	bb50      	cbnz	r0, 1e50 <gpio_nrfx_pin_configure+0xb0>
		nrfx_gpiote_output_config_t output_config = {
    1dfa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    1dfe:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    1e02:	f414 3f80 	tst.w	r4, #65536	; 0x10000
    1e06:	bf0c      	ite	eq
    1e08:	2301      	moveq	r3, #1
    1e0a:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    1e0c:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    1e10:	4620      	mov	r0, r4
    1e12:	f003 fdc5 	bl	59a0 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    1e16:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1e1a:	f414 2f00 	tst.w	r4, #524288	; 0x80000
    1e1e:	d025      	beq.n	1e6c <gpio_nrfx_pin_configure+0xcc>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    1e20:	f8d8 2004 	ldr.w	r2, [r8, #4]
    1e24:	2301      	movs	r3, #1
    1e26:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    1e28:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    1e2c:	2200      	movs	r2, #0
    1e2e:	a901      	add	r1, sp, #4
    1e30:	4628      	mov	r0, r5
    1e32:	f001 f9bd 	bl	31b0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1e36:	4b1d      	ldr	r3, [pc, #116]	; (1eac <gpio_nrfx_pin_configure+0x10c>)
    1e38:	4298      	cmp	r0, r3
    1e3a:	d009      	beq.n	1e50 <gpio_nrfx_pin_configure+0xb0>
    1e3c:	f06f 0715 	mvn.w	r7, #21
    1e40:	e006      	b.n	1e50 <gpio_nrfx_pin_configure+0xb0>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    1e42:	4628      	mov	r0, r5
    1e44:	f001 fad4 	bl	33f0 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    1e48:	4b18      	ldr	r3, [pc, #96]	; (1eac <gpio_nrfx_pin_configure+0x10c>)
    1e4a:	429f      	cmp	r7, r3
    1e4c:	d004      	beq.n	1e58 <gpio_nrfx_pin_configure+0xb8>
		return 0;
    1e4e:	2700      	movs	r7, #0
}
    1e50:	4638      	mov	r0, r7
    1e52:	b006      	add	sp, #24
    1e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = nrfx_gpiote_channel_free(ch);
    1e58:	f89d 0017 	ldrb.w	r0, [sp, #23]
    1e5c:	f001 fa64 	bl	3328 <nrfx_gpiote_channel_free>
    1e60:	e7f5      	b.n	1e4e <gpio_nrfx_pin_configure+0xae>
		err = nrfx_gpiote_channel_free(ch);
    1e62:	f89d 0017 	ldrb.w	r0, [sp, #23]
    1e66:	f001 fa5f 	bl	3328 <nrfx_gpiote_channel_free>
    1e6a:	e7bc      	b.n	1de6 <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    1e6c:	f414 2f80 	tst.w	r4, #262144	; 0x40000
    1e70:	d0dc      	beq.n	1e2c <gpio_nrfx_pin_configure+0x8c>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    1e72:	f8d8 2004 	ldr.w	r2, [r8, #4]
    1e76:	2301      	movs	r3, #1
    1e78:	40b3      	lsls	r3, r6
    p_reg->OUTCLR = clr_mask;
    1e7a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    1e7e:	e7d5      	b.n	1e2c <gpio_nrfx_pin_configure+0x8c>
		.pull = get_pull(flags)
    1e80:	4620      	mov	r0, r4
    1e82:	f003 fd8d 	bl	59a0 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    1e86:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1e8a:	2300      	movs	r3, #0
    1e8c:	461a      	mov	r2, r3
    1e8e:	a902      	add	r1, sp, #8
    1e90:	4628      	mov	r0, r5
    1e92:	f001 f8f9 	bl	3088 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1e96:	4b05      	ldr	r3, [pc, #20]	; (1eac <gpio_nrfx_pin_configure+0x10c>)
    1e98:	4298      	cmp	r0, r3
    1e9a:	d101      	bne.n	1ea0 <gpio_nrfx_pin_configure+0x100>
    1e9c:	2700      	movs	r7, #0
    1e9e:	e7d7      	b.n	1e50 <gpio_nrfx_pin_configure+0xb0>
    1ea0:	f06f 0715 	mvn.w	r7, #21
    1ea4:	e7d4      	b.n	1e50 <gpio_nrfx_pin_configure+0xb0>
		return -EINVAL;
    1ea6:	f06f 0715 	mvn.w	r7, #21
    1eaa:	e7d1      	b.n	1e50 <gpio_nrfx_pin_configure+0xb0>
    1eac:	0bad0000 	.word	0x0bad0000

00001eb0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1eb0:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    1eb2:	f001 fa2f 	bl	3314 <nrfx_gpiote_is_init>
    1eb6:	b108      	cbz	r0, 1ebc <gpio_nrfx_init+0xc>
		return 0;
    1eb8:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    1eba:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    1ebc:	f001 fa00 	bl	32c0 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    1ec0:	4b08      	ldr	r3, [pc, #32]	; (1ee4 <gpio_nrfx_init+0x34>)
    1ec2:	4298      	cmp	r0, r3
    1ec4:	d10a      	bne.n	1edc <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    1ec6:	2100      	movs	r1, #0
    1ec8:	4807      	ldr	r0, [pc, #28]	; (1ee8 <gpio_nrfx_init+0x38>)
    1eca:	f001 f9db 	bl	3284 <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1ece:	2200      	movs	r2, #0
    1ed0:	2105      	movs	r1, #5
    1ed2:	2006      	movs	r0, #6
    1ed4:	f003 fa59 	bl	538a <z_arm_irq_priority_set>
	return 0;
    1ed8:	2000      	movs	r0, #0
    1eda:	e7ee      	b.n	1eba <gpio_nrfx_init+0xa>
		return -EIO;
    1edc:	f06f 0004 	mvn.w	r0, #4
    1ee0:	e7eb      	b.n	1eba <gpio_nrfx_init+0xa>
    1ee2:	bf00      	nop
    1ee4:	0bad0000 	.word	0x0bad0000
    1ee8:	00005a49 	.word	0x00005a49

00001eec <baudrate_set>:
#endif
};

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = dev->config;
    1eec:	6843      	ldr	r3, [r0, #4]

	return config->uarte_regs;
    1eee:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    1ef0:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    1ef4:	d06f      	beq.n	1fd6 <baudrate_set+0xea>
    1ef6:	d83a      	bhi.n	1f6e <baudrate_set+0x82>
    1ef8:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    1efc:	d06e      	beq.n	1fdc <baudrate_set+0xf0>
    1efe:	d90a      	bls.n	1f16 <baudrate_set+0x2a>
    1f00:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    1f04:	d075      	beq.n	1ff2 <baudrate_set+0x106>
    1f06:	d924      	bls.n	1f52 <baudrate_set+0x66>
    1f08:	f647 2312 	movw	r3, #31250	; 0x7a12
    1f0c:	4299      	cmp	r1, r3
    1f0e:	d12b      	bne.n	1f68 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1f10:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1f14:	e013      	b.n	1f3e <baudrate_set+0x52>
	switch (baudrate) {
    1f16:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    1f1a:	d061      	beq.n	1fe0 <baudrate_set+0xf4>
    1f1c:	d907      	bls.n	1f2e <baudrate_set+0x42>
    1f1e:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    1f22:	d063      	beq.n	1fec <baudrate_set+0x100>
    1f24:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    1f28:	d110      	bne.n	1f4c <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1f2a:	4b3c      	ldr	r3, [pc, #240]	; (201c <baudrate_set+0x130>)
    1f2c:	e007      	b.n	1f3e <baudrate_set+0x52>
	switch (baudrate) {
    1f2e:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    1f32:	d058      	beq.n	1fe6 <baudrate_set+0xfa>
    1f34:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    1f38:	d105      	bne.n	1f46 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    1f3a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1f3e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    1f42:	2000      	movs	r0, #0
    1f44:	4770      	bx	lr
	switch (baudrate) {
    1f46:	f06f 0015 	mvn.w	r0, #21
    1f4a:	4770      	bx	lr
    1f4c:	f06f 0015 	mvn.w	r0, #21
    1f50:	4770      	bx	lr
    1f52:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    1f56:	d04e      	beq.n	1ff6 <baudrate_set+0x10a>
    1f58:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    1f5c:	d101      	bne.n	1f62 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1f5e:	4b30      	ldr	r3, [pc, #192]	; (2020 <baudrate_set+0x134>)
    1f60:	e7ed      	b.n	1f3e <baudrate_set+0x52>
	switch (baudrate) {
    1f62:	f06f 0015 	mvn.w	r0, #21
    1f66:	4770      	bx	lr
    1f68:	f06f 0015 	mvn.w	r0, #21
    1f6c:	4770      	bx	lr
    1f6e:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    1f72:	d042      	beq.n	1ffa <baudrate_set+0x10e>
    1f74:	d909      	bls.n	1f8a <baudrate_set+0x9e>
    1f76:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    1f7a:	d046      	beq.n	200a <baudrate_set+0x11e>
    1f7c:	d91f      	bls.n	1fbe <baudrate_set+0xd2>
    1f7e:	4b29      	ldr	r3, [pc, #164]	; (2024 <baudrate_set+0x138>)
    1f80:	4299      	cmp	r1, r3
    1f82:	d148      	bne.n	2016 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1f84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    1f88:	e7d9      	b.n	1f3e <baudrate_set+0x52>
	switch (baudrate) {
    1f8a:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    1f8e:	d037      	beq.n	2000 <baudrate_set+0x114>
    1f90:	d905      	bls.n	1f9e <baudrate_set+0xb2>
    1f92:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    1f96:	d10f      	bne.n	1fb8 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1f98:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1f9c:	e7cf      	b.n	1f3e <baudrate_set+0x52>
	switch (baudrate) {
    1f9e:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    1fa2:	4299      	cmp	r1, r3
    1fa4:	d02e      	beq.n	2004 <baudrate_set+0x118>
    1fa6:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    1faa:	d102      	bne.n	1fb2 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1fac:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1fb0:	e7c5      	b.n	1f3e <baudrate_set+0x52>
	switch (baudrate) {
    1fb2:	f06f 0015 	mvn.w	r0, #21
    1fb6:	4770      	bx	lr
    1fb8:	f06f 0015 	mvn.w	r0, #21
    1fbc:	4770      	bx	lr
    1fbe:	4b1a      	ldr	r3, [pc, #104]	; (2028 <baudrate_set+0x13c>)
    1fc0:	4299      	cmp	r1, r3
    1fc2:	d025      	beq.n	2010 <baudrate_set+0x124>
    1fc4:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    1fc8:	d102      	bne.n	1fd0 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1fca:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1fce:	e7b6      	b.n	1f3e <baudrate_set+0x52>
	switch (baudrate) {
    1fd0:	f06f 0015 	mvn.w	r0, #21
    1fd4:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1fd6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1fda:	e7b0      	b.n	1f3e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1fdc:	4b13      	ldr	r3, [pc, #76]	; (202c <baudrate_set+0x140>)
    1fde:	e7ae      	b.n	1f3e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1fe0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1fe4:	e7ab      	b.n	1f3e <baudrate_set+0x52>
	switch (baudrate) {
    1fe6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1fea:	e7a8      	b.n	1f3e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1fec:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1ff0:	e7a5      	b.n	1f3e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1ff2:	4b0f      	ldr	r3, [pc, #60]	; (2030 <baudrate_set+0x144>)
    1ff4:	e7a3      	b.n	1f3e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1ff6:	4b0f      	ldr	r3, [pc, #60]	; (2034 <baudrate_set+0x148>)
    1ff8:	e7a1      	b.n	1f3e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1ffa:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1ffe:	e79e      	b.n	1f3e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    2000:	4b0d      	ldr	r3, [pc, #52]	; (2038 <baudrate_set+0x14c>)
    2002:	e79c      	b.n	1f3e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    2004:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2008:	e799      	b.n	1f3e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    200a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    200e:	e796      	b.n	1f3e <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    2010:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2014:	e793      	b.n	1f3e <baudrate_set+0x52>
	switch (baudrate) {
    2016:	f06f 0015 	mvn.w	r0, #21
}
    201a:	4770      	bx	lr
    201c:	0013b000 	.word	0x0013b000
    2020:	004ea000 	.word	0x004ea000
    2024:	000f4240 	.word	0x000f4240
    2028:	0003d090 	.word	0x0003d090
    202c:	00275000 	.word	0x00275000
    2030:	0075c000 	.word	0x0075c000
    2034:	003af000 	.word	0x003af000
    2038:	013a9000 	.word	0x013a9000

0000203c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    203c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    203e:	4605      	mov	r5, r0
    2040:	460e      	mov	r6, r1
	struct uarte_nrfx_data *data = dev->data;
    2042:	6907      	ldr	r7, [r0, #16]
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2044:	f004 f9ab 	bl	639e <k_is_in_isr>
    2048:	b910      	cbnz	r0, 2050 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    204a:	4b12      	ldr	r3, [pc, #72]	; (2094 <uarte_nrfx_poll_out+0x58>)
    204c:	781b      	ldrb	r3, [r3, #0]
    204e:	b983      	cbnz	r3, 2072 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    2050:	f04f 0320 	mov.w	r3, #32
    2054:	f3ef 8411 	mrs	r4, BASEPRI
    2058:	f383 8812 	msr	BASEPRI_MAX, r3
    205c:	f3bf 8f6f 	isb	sy
#endif

	if (isr_mode) {
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    2060:	4628      	mov	r0, r5
    2062:	f003 fda5 	bl	5bb0 <is_tx_ready>
    2066:	b940      	cbnz	r0, 207a <uarte_nrfx_poll_out+0x3e>
	__asm__ volatile(
    2068:	f384 8811 	msr	BASEPRI, r4
    206c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2070:	e7ee      	b.n	2050 <uarte_nrfx_poll_out+0x14>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    2072:	4628      	mov	r0, r5
    2074:	f003 fe01 	bl	5c7a <wait_tx_ready>
    2078:	4604      	mov	r4, r0
	}

	*data->char_out = c;
    207a:	693b      	ldr	r3, [r7, #16]
    207c:	701e      	strb	r6, [r3, #0]
	tx_start(dev, data->char_out, 1);
    207e:	2201      	movs	r2, #1
    2080:	6939      	ldr	r1, [r7, #16]
    2082:	4628      	mov	r0, r5
    2084:	f003 fdae 	bl	5be4 <tx_start>
	__asm__ volatile(
    2088:	f384 8811 	msr	BASEPRI, r4
    208c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    2090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2092:	bf00      	nop
    2094:	20000ff5 	.word	0x20000ff5

00002098 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    2098:	b538      	push	{r3, r4, r5, lr}
    209a:	4604      	mov	r4, r0
    209c:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    209e:	f101 0018 	add.w	r0, r1, #24
    20a2:	f001 f9f9 	bl	3498 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    20a6:	4b0c      	ldr	r3, [pc, #48]	; (20d8 <endtx_stoptx_ppi_init+0x40>)
    20a8:	4298      	cmp	r0, r3
    20aa:	d111      	bne.n	20d0 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    20ac:	7e2b      	ldrb	r3, [r5, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    20ae:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    20b2:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    20b4:	4a09      	ldr	r2, [pc, #36]	; (20dc <endtx_stoptx_ppi_init+0x44>)
    20b6:	33a2      	adds	r3, #162	; 0xa2
    20b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    20bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    20c0:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    20c2:	7e29      	ldrb	r1, [r5, #24]
    20c4:	2301      	movs	r3, #1
    20c6:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    20c8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    20cc:	2000      	movs	r0, #0
}
    20ce:	bd38      	pop	{r3, r4, r5, pc}
		return -EIO;
    20d0:	f06f 0004 	mvn.w	r0, #4
    20d4:	e7fb      	b.n	20ce <endtx_stoptx_ppi_init+0x36>
    20d6:	bf00      	nop
    20d8:	0bad0000 	.word	0x0bad0000
    20dc:	4001f000 	.word	0x4001f000

000020e0 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    20e0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    20e4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    20e8:	4b01      	ldr	r3, [pc, #4]	; (20f0 <set_comparator+0x10>)
    20ea:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    20ee:	4770      	bx	lr
    20f0:	40011000 	.word	0x40011000

000020f4 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    20f4:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    20f8:	4b01      	ldr	r3, [pc, #4]	; (2100 <get_comparator+0xc>)
    20fa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    20fe:	4770      	bx	lr
    2100:	40011000 	.word	0x40011000

00002104 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2108:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    210a:	4a02      	ldr	r2, [pc, #8]	; (2114 <event_enable+0x10>)
    210c:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    2110:	4770      	bx	lr
    2112:	bf00      	nop
    2114:	40011000 	.word	0x40011000

00002118 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2118:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    211c:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    211e:	4a02      	ldr	r2, [pc, #8]	; (2128 <event_disable+0x10>)
    2120:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    2124:	4770      	bx	lr
    2126:	bf00      	nop
    2128:	40011000 	.word	0x40011000

0000212c <counter>:
     return p_reg->COUNTER;
    212c:	4b01      	ldr	r3, [pc, #4]	; (2134 <counter+0x8>)
    212e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    2132:	4770      	bx	lr
    2134:	40011000 	.word	0x40011000

00002138 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    2138:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    213a:	2301      	movs	r3, #1
    213c:	4083      	lsls	r3, r0
    213e:	ea6f 0c03 	mvn.w	ip, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2142:	4a0e      	ldr	r2, [pc, #56]	; (217c <compare_int_lock+0x44>)
    2144:	f3bf 8f5b 	dmb	ish
    2148:	e852 1f00 	ldrex	r1, [r2]
    214c:	ea01 0e0c 	and.w	lr, r1, ip
    2150:	e842 e400 	strex	r4, lr, [r2]
    2154:	2c00      	cmp	r4, #0
    2156:	d1f7      	bne.n	2148 <compare_int_lock+0x10>
    2158:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    215c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2160:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    2162:	4807      	ldr	r0, [pc, #28]	; (2180 <compare_int_lock+0x48>)
    2164:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2168:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    216c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2170:	420b      	tst	r3, r1
}
    2172:	bf14      	ite	ne
    2174:	2001      	movne	r0, #1
    2176:	2000      	moveq	r0, #0
    2178:	bd10      	pop	{r4, pc}
    217a:	bf00      	nop
    217c:	20000914 	.word	0x20000914
    2180:	40011000 	.word	0x40011000

00002184 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    2184:	b538      	push	{r3, r4, r5, lr}
    2186:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    2188:	f003 fe31 	bl	5dee <full_int_lock>
    218c:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    218e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2192:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    2194:	4a16      	ldr	r2, [pc, #88]	; (21f0 <channel_processing_check_and_clear+0x6c>)
    2196:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    219a:	4213      	tst	r3, r2
    219c:	d105      	bne.n	21aa <channel_processing_check_and_clear+0x26>
	bool result = false;
    219e:	2400      	movs	r4, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    21a0:	4628      	mov	r0, r5
    21a2:	f003 fe2d 	bl	5e00 <full_int_unlock>

	return result;
}
    21a6:	4620      	mov	r0, r4
    21a8:	bd38      	pop	{r3, r4, r5, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    21aa:	2301      	movs	r3, #1
    21ac:	40a3      	lsls	r3, r4
    21ae:	43db      	mvns	r3, r3
    21b0:	4a10      	ldr	r2, [pc, #64]	; (21f4 <channel_processing_check_and_clear+0x70>)
    21b2:	f3bf 8f5b 	dmb	ish
    21b6:	e852 1f00 	ldrex	r1, [r2]
    21ba:	ea01 0003 	and.w	r0, r1, r3
    21be:	e842 0c00 	strex	ip, r0, [r2]
    21c2:	f1bc 0f00 	cmp.w	ip, #0
    21c6:	d1f6      	bne.n	21b6 <channel_processing_check_and_clear+0x32>
    21c8:	f3bf 8f5b 	dmb	ish
    21cc:	b949      	cbnz	r1, 21e2 <channel_processing_check_and_clear+0x5e>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    21ce:	f104 0350 	add.w	r3, r4, #80	; 0x50
    21d2:	009b      	lsls	r3, r3, #2
    21d4:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    21d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    21da:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    21de:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    21e0:	b123      	cbz	r3, 21ec <channel_processing_check_and_clear+0x68>
			event_clear(chan);
    21e2:	4620      	mov	r0, r4
    21e4:	f003 fdf4 	bl	5dd0 <event_clear>
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    21e8:	2401      	movs	r4, #1
    21ea:	e7d9      	b.n	21a0 <channel_processing_check_and_clear+0x1c>
    21ec:	2400      	movs	r4, #0
    21ee:	e7d7      	b.n	21a0 <channel_processing_check_and_clear+0x1c>
    21f0:	40011000 	.word	0x40011000
    21f4:	20000910 	.word	0x20000910

000021f8 <compare_int_unlock>:
	if (key) {
    21f8:	b901      	cbnz	r1, 21fc <compare_int_unlock+0x4>
}
    21fa:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    21fc:	2301      	movs	r3, #1
    21fe:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2200:	4a11      	ldr	r2, [pc, #68]	; (2248 <compare_int_unlock+0x50>)
    2202:	f3bf 8f5b 	dmb	ish
    2206:	e852 cf00 	ldrex	ip, [r2]
    220a:	ea4c 0c03 	orr.w	ip, ip, r3
    220e:	e842 c100 	strex	r1, ip, [r2]
    2212:	2900      	cmp	r1, #0
    2214:	d1f7      	bne.n	2206 <compare_int_unlock+0xe>
    2216:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    221a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    221e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    2220:	4a0a      	ldr	r2, [pc, #40]	; (224c <compare_int_unlock+0x54>)
    2222:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2226:	f3bf 8f5b 	dmb	ish
    222a:	4b09      	ldr	r3, [pc, #36]	; (2250 <compare_int_unlock+0x58>)
    222c:	681b      	ldr	r3, [r3, #0]
    222e:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    2232:	40c3      	lsrs	r3, r0
    2234:	f013 0f01 	tst.w	r3, #1
    2238:	d0df      	beq.n	21fa <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    223a:	4b06      	ldr	r3, [pc, #24]	; (2254 <compare_int_unlock+0x5c>)
    223c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2240:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2244:	e7d9      	b.n	21fa <compare_int_unlock+0x2>
    2246:	bf00      	nop
    2248:	20000914 	.word	0x20000914
    224c:	40011000 	.word	0x40011000
    2250:	20000910 	.word	0x20000910
    2254:	e000e100 	.word	0xe000e100

00002258 <sys_clock_timeout_handler>:
{
    2258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    225c:	4607      	mov	r7, r0
    225e:	4614      	mov	r4, r2
    2260:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    2262:	4610      	mov	r0, r2
    2264:	4619      	mov	r1, r3
    2266:	f003 fdbf 	bl	5de8 <absolute_time_to_cc>
    226a:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    226c:	4b15      	ldr	r3, [pc, #84]	; (22c4 <sys_clock_timeout_handler+0x6c>)
    226e:	681a      	ldr	r2, [r3, #0]
    2270:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    2272:	601c      	str	r4, [r3, #0]
    2274:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2276:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    227a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    227e:	d309      	bcc.n	2294 <sys_clock_timeout_handler+0x3c>
	return false;
    2280:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2282:	f002 f997 	bl	45b4 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    2286:	4638      	mov	r0, r7
    2288:	f7ff ff34 	bl	20f4 <get_comparator>
    228c:	42a8      	cmp	r0, r5
    228e:	d00e      	beq.n	22ae <sys_clock_timeout_handler+0x56>
}
    2290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2294:	4b0c      	ldr	r3, [pc, #48]	; (22c8 <sys_clock_timeout_handler+0x70>)
    2296:	681b      	ldr	r3, [r3, #0]
    2298:	0a1a      	lsrs	r2, r3, #8
    229a:	061b      	lsls	r3, r3, #24
    229c:	eb15 0803 	adds.w	r8, r5, r3
    22a0:	f142 0900 	adc.w	r9, r2, #0
    22a4:	4b09      	ldr	r3, [pc, #36]	; (22cc <sys_clock_timeout_handler+0x74>)
    22a6:	e9c3 8900 	strd	r8, r9, [r3]
		return true;
    22aa:	2401      	movs	r4, #1
    22ac:	e7e9      	b.n	2282 <sys_clock_timeout_handler+0x2a>
		if (!anchor_updated) {
    22ae:	b11c      	cbz	r4, 22b8 <sys_clock_timeout_handler+0x60>
		event_enable(chan);
    22b0:	4638      	mov	r0, r7
    22b2:	f7ff ff27 	bl	2104 <event_enable>
}
    22b6:	e7eb      	b.n	2290 <sys_clock_timeout_handler+0x38>
			set_comparator(chan, COUNTER_HALF_SPAN);
    22b8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    22bc:	4638      	mov	r0, r7
    22be:	f7ff ff0f 	bl	20e0 <set_comparator>
    22c2:	e7f5      	b.n	22b0 <sys_clock_timeout_handler+0x58>
    22c4:	200001c0 	.word	0x200001c0
    22c8:	20000918 	.word	0x20000918
    22cc:	200001c8 	.word	0x200001c8

000022d0 <z_nrf_rtc_timer_read>:
{
    22d0:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    22d2:	4b0d      	ldr	r3, [pc, #52]	; (2308 <z_nrf_rtc_timer_read+0x38>)
    22d4:	681c      	ldr	r4, [r3, #0]
    22d6:	0a25      	lsrs	r5, r4, #8
    22d8:	0624      	lsls	r4, r4, #24
  __ASM volatile ("dmb 0xF":::"memory");
    22da:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    22de:	f7ff ff25 	bl	212c <counter>
    22e2:	4603      	mov	r3, r0
	val += cntr;
    22e4:	1900      	adds	r0, r0, r4
    22e6:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    22ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    22ee:	d20a      	bcs.n	2306 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    22f0:	4b06      	ldr	r3, [pc, #24]	; (230c <z_nrf_rtc_timer_read+0x3c>)
    22f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    22f6:	4290      	cmp	r0, r2
    22f8:	eb71 0303 	sbcs.w	r3, r1, r3
    22fc:	d203      	bcs.n	2306 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    22fe:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2302:	f141 0100 	adc.w	r1, r1, #0
}
    2306:	bd38      	pop	{r3, r4, r5, pc}
    2308:	20000918 	.word	0x20000918
    230c:	200001c8 	.word	0x200001c8

00002310 <compare_set_nolocks>:
{
    2310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2312:	4606      	mov	r6, r0
    2314:	4614      	mov	r4, r2
    2316:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    2318:	4610      	mov	r0, r2
    231a:	4619      	mov	r1, r3
    231c:	f003 fd64 	bl	5de8 <absolute_time_to_cc>
    2320:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2322:	f7ff ffd5 	bl	22d0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    2326:	42a0      	cmp	r0, r4
    2328:	eb71 0305 	sbcs.w	r3, r1, r5
    232c:	d21d      	bcs.n	236a <compare_set_nolocks+0x5a>
		if (target_time - curr_time > COUNTER_SPAN) {
    232e:	1a20      	subs	r0, r4, r0
    2330:	eb65 0101 	sbc.w	r1, r5, r1
    2334:	4b1b      	ldr	r3, [pc, #108]	; (23a4 <compare_set_nolocks+0x94>)
    2336:	4298      	cmp	r0, r3
    2338:	f171 0100 	sbcs.w	r1, r1, #0
    233c:	d22f      	bcs.n	239e <compare_set_nolocks+0x8e>
		if (target_time != cc_data[chan].target_time) {
    233e:	4b1a      	ldr	r3, [pc, #104]	; (23a8 <compare_set_nolocks+0x98>)
    2340:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2344:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    2348:	42ab      	cmp	r3, r5
    234a:	bf08      	it	eq
    234c:	42a2      	cmpeq	r2, r4
    234e:	d01a      	beq.n	2386 <compare_set_nolocks+0x76>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    2350:	4639      	mov	r1, r7
    2352:	4630      	mov	r0, r6
    2354:	f003 fd59 	bl	5e0a <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    2358:	4639      	mov	r1, r7
    235a:	f003 fd35 	bl	5dc8 <counter_sub>
    235e:	1900      	adds	r0, r0, r4
    2360:	f145 0300 	adc.w	r3, r5, #0
    2364:	4604      	mov	r4, r0
    2366:	461d      	mov	r5, r3
    2368:	e00d      	b.n	2386 <compare_set_nolocks+0x76>
		atomic_or(&force_isr_mask, BIT(chan));
    236a:	2301      	movs	r3, #1
    236c:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    236e:	4a0f      	ldr	r2, [pc, #60]	; (23ac <compare_set_nolocks+0x9c>)
    2370:	f3bf 8f5b 	dmb	ish
    2374:	e852 0f00 	ldrex	r0, [r2]
    2378:	4318      	orrs	r0, r3
    237a:	e842 0100 	strex	r1, r0, [r2]
    237e:	2900      	cmp	r1, #0
    2380:	d1f8      	bne.n	2374 <compare_set_nolocks+0x64>
    2382:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    2386:	4b08      	ldr	r3, [pc, #32]	; (23a8 <compare_set_nolocks+0x98>)
    2388:	0132      	lsls	r2, r6, #4
    238a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    238e:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    2392:	9906      	ldr	r1, [sp, #24]
    2394:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    2396:	9b07      	ldr	r3, [sp, #28]
    2398:	6073      	str	r3, [r6, #4]
	return ret;
    239a:	2000      	movs	r0, #0
}
    239c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return -EINVAL;
    239e:	f06f 0015 	mvn.w	r0, #21
    23a2:	e7fb      	b.n	239c <compare_set_nolocks+0x8c>
    23a4:	01000001 	.word	0x01000001
    23a8:	200001b0 	.word	0x200001b0
    23ac:	20000910 	.word	0x20000910

000023b0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    23b0:	b530      	push	{r4, r5, lr}
    23b2:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    23b4:	2300      	movs	r3, #0
    23b6:	4a1d      	ldr	r2, [pc, #116]	; (242c <sys_clock_driver_init+0x7c>)
    23b8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    23bc:	2b00      	cmp	r3, #0
    23be:	dd24      	ble.n	240a <sys_clock_driver_init+0x5a>
    p_reg->INTENSET = mask;
    23c0:	4c1a      	ldr	r4, [pc, #104]	; (242c <sys_clock_driver_init+0x7c>)
    23c2:	2502      	movs	r5, #2
    23c4:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    23c8:	4b19      	ldr	r3, [pc, #100]	; (2430 <sys_clock_driver_init+0x80>)
    23ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    23ce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    23d2:	2200      	movs	r2, #0
    23d4:	2101      	movs	r1, #1
    23d6:	2011      	movs	r0, #17
    23d8:	f002 ffd7 	bl	538a <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    23dc:	2011      	movs	r0, #17
    23de:	f002 ffcf 	bl	5380 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    23e2:	2301      	movs	r3, #1
    23e4:	60a3      	str	r3, [r4, #8]
    23e6:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    23e8:	4a12      	ldr	r2, [pc, #72]	; (2434 <sys_clock_driver_init+0x84>)
    23ea:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    23ec:	2400      	movs	r4, #0
    23ee:	9401      	str	r4, [sp, #4]
    23f0:	4b11      	ldr	r3, [pc, #68]	; (2438 <sys_clock_driver_init+0x88>)
    23f2:	9300      	str	r3, [sp, #0]
    23f4:	4a11      	ldr	r2, [pc, #68]	; (243c <sys_clock_driver_init+0x8c>)
    23f6:	2300      	movs	r3, #0
    23f8:	4620      	mov	r0, r4
    23fa:	f003 fd41 	bl	5e80 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    23fe:	4628      	mov	r0, r5
    2400:	f7ff fc04 	bl	1c0c <z_nrf_clock_control_lf_on>

	return 0;
}
    2404:	4620      	mov	r0, r4
    2406:	b003      	add	sp, #12
    2408:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    240a:	4a0d      	ldr	r2, [pc, #52]	; (2440 <sys_clock_driver_init+0x90>)
    240c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    2410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2414:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2418:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    241c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2420:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    2422:	4902      	ldr	r1, [pc, #8]	; (242c <sys_clock_driver_init+0x7c>)
    2424:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    2428:	3301      	adds	r3, #1
    242a:	e7c7      	b.n	23bc <sys_clock_driver_init+0xc>
    242c:	40011000 	.word	0x40011000
    2430:	e000e100 	.word	0xe000e100
    2434:	20000914 	.word	0x20000914
    2438:	00002259 	.word	0x00002259
    243c:	007fffff 	.word	0x007fffff
    2440:	200001b0 	.word	0x200001b0

00002444 <process_channel>:
{
    2444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2448:	b082      	sub	sp, #8
    244a:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    244c:	f7ff fe9a 	bl	2184 <channel_processing_check_and_clear>
    2450:	b910      	cbnz	r0, 2458 <process_channel+0x14>
}
    2452:	b002      	add	sp, #8
    2454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    2458:	f7ff ff3a 	bl	22d0 <z_nrf_rtc_timer_read>
    245c:	4682      	mov	sl, r0
    245e:	460d      	mov	r5, r1
		mcu_critical_state = full_int_lock();
    2460:	f003 fcc5 	bl	5dee <full_int_lock>
    2464:	4606      	mov	r6, r0
		expire_time = cc_data[chan].target_time;
    2466:	4b13      	ldr	r3, [pc, #76]	; (24b4 <process_channel+0x70>)
    2468:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    246c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    2470:	45c2      	cmp	sl, r8
    2472:	eb75 0509 	sbcs.w	r5, r5, r9
    2476:	d20b      	bcs.n	2490 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2478:	2500      	movs	r5, #0
		full_int_unlock(mcu_critical_state);
    247a:	4630      	mov	r0, r6
    247c:	f003 fcc0 	bl	5e00 <full_int_unlock>
		if (handler) {
    2480:	2d00      	cmp	r5, #0
    2482:	d0e6      	beq.n	2452 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    2484:	9700      	str	r7, [sp, #0]
    2486:	4642      	mov	r2, r8
    2488:	464b      	mov	r3, r9
    248a:	4620      	mov	r0, r4
    248c:	47a8      	blx	r5
}
    248e:	e7e0      	b.n	2452 <process_channel+0xe>
			handler = cc_data[chan].callback;
    2490:	4a08      	ldr	r2, [pc, #32]	; (24b4 <process_channel+0x70>)
    2492:	0123      	lsls	r3, r4, #4
    2494:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    2498:	58d5      	ldr	r5, [r2, r3]
			user_context = cc_data[chan].user_context;
    249a:	684f      	ldr	r7, [r1, #4]
			cc_data[chan].callback = NULL;
    249c:	2000      	movs	r0, #0
    249e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    24a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    24a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    24a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    24ac:	4620      	mov	r0, r4
    24ae:	f7ff fe33 	bl	2118 <event_disable>
    24b2:	e7e2      	b.n	247a <process_channel+0x36>
    24b4:	200001b0 	.word	0x200001b0

000024b8 <rtc_nrf_isr>:
{
    24b8:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    24ba:	4b0e      	ldr	r3, [pc, #56]	; (24f4 <rtc_nrf_isr+0x3c>)
    24bc:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    24c0:	f013 0f02 	tst.w	r3, #2
    24c4:	d00d      	beq.n	24e2 <rtc_nrf_isr+0x2a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    24c6:	4b0b      	ldr	r3, [pc, #44]	; (24f4 <rtc_nrf_isr+0x3c>)
    24c8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    24cc:	b14b      	cbz	r3, 24e2 <rtc_nrf_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    24ce:	4b09      	ldr	r3, [pc, #36]	; (24f4 <rtc_nrf_isr+0x3c>)
    24d0:	2200      	movs	r2, #0
    24d2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    24d6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		overflow_cnt++;
    24da:	4a07      	ldr	r2, [pc, #28]	; (24f8 <rtc_nrf_isr+0x40>)
    24dc:	6813      	ldr	r3, [r2, #0]
    24de:	3301      	adds	r3, #1
    24e0:	6013      	str	r3, [r2, #0]
{
    24e2:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    24e4:	2c00      	cmp	r4, #0
    24e6:	dd00      	ble.n	24ea <rtc_nrf_isr+0x32>
}
    24e8:	bd10      	pop	{r4, pc}
		process_channel(chan);
    24ea:	4620      	mov	r0, r4
    24ec:	f7ff ffaa 	bl	2444 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    24f0:	3401      	adds	r4, #1
    24f2:	e7f7      	b.n	24e4 <rtc_nrf_isr+0x2c>
    24f4:	40011000 	.word	0x40011000
    24f8:	20000918 	.word	0x20000918

000024fc <sys_clock_set_timeout>:
{
    24fc:	b510      	push	{r4, lr}
    24fe:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2500:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2504:	d006      	beq.n	2514 <sys_clock_set_timeout+0x18>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2506:	2801      	cmp	r0, #1
    2508:	dd06      	ble.n	2518 <sys_clock_set_timeout+0x1c>
    250a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    250e:	da05      	bge.n	251c <sys_clock_set_timeout+0x20>
    2510:	1e44      	subs	r4, r0, #1
    2512:	e004      	b.n	251e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2514:	480f      	ldr	r0, [pc, #60]	; (2554 <sys_clock_set_timeout+0x58>)
    2516:	e7f8      	b.n	250a <sys_clock_set_timeout+0xe>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2518:	2400      	movs	r4, #0
    251a:	e000      	b.n	251e <sys_clock_set_timeout+0x22>
    251c:	4c0d      	ldr	r4, [pc, #52]	; (2554 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    251e:	f7ff fed7 	bl	22d0 <z_nrf_rtc_timer_read>
    2522:	4b0d      	ldr	r3, [pc, #52]	; (2558 <sys_clock_set_timeout+0x5c>)
    2524:	681a      	ldr	r2, [r3, #0]
    2526:	685b      	ldr	r3, [r3, #4]
    2528:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    252a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    252e:	d300      	bcc.n	2532 <sys_clock_set_timeout+0x36>
		ticks = 0;
    2530:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2532:	4420      	add	r0, r4
    2534:	1c41      	adds	r1, r0, #1
	if (cyc > MAX_CYCLES) {
    2536:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    253a:	d300      	bcc.n	253e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    253c:	4905      	ldr	r1, [pc, #20]	; (2554 <sys_clock_set_timeout+0x58>)
	uint64_t target_time = cyc + last_count;
    253e:	2000      	movs	r0, #0
    2540:	1852      	adds	r2, r2, r1
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2542:	9001      	str	r0, [sp, #4]
    2544:	4905      	ldr	r1, [pc, #20]	; (255c <sys_clock_set_timeout+0x60>)
    2546:	9100      	str	r1, [sp, #0]
    2548:	f143 0300 	adc.w	r3, r3, #0
    254c:	f003 fc98 	bl	5e80 <compare_set>
}
    2550:	b002      	add	sp, #8
    2552:	bd10      	pop	{r4, pc}
    2554:	007fffff 	.word	0x007fffff
    2558:	200001c0 	.word	0x200001c0
    255c:	00002259 	.word	0x00002259

00002560 <sys_clock_elapsed>:
{
    2560:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2562:	f7ff feb5 	bl	22d0 <z_nrf_rtc_timer_read>
    2566:	4b02      	ldr	r3, [pc, #8]	; (2570 <sys_clock_elapsed+0x10>)
    2568:	681b      	ldr	r3, [r3, #0]
}
    256a:	1ac0      	subs	r0, r0, r3
    256c:	bd08      	pop	{r3, pc}
    256e:	bf00      	nop
    2570:	200001c0 	.word	0x200001c0

00002574 <nrf_gpio_pin_write>:
    if (value == 0)
    2574:	b969      	cbnz	r1, 2592 <nrf_gpio_pin_write+0x1e>
    *p_pin = pin_number & 0x1F;
    2576:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    257a:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    257c:	2801      	cmp	r0, #1
    257e:	d006      	beq.n	258e <nrf_gpio_pin_write+0x1a>
        case 0: return NRF_P0;
    2580:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2584:	2301      	movs	r3, #1
    2586:	408b      	lsls	r3, r1
    p_reg->OUTCLR = clr_mask;
    2588:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    258c:	4770      	bx	lr
        case 1: return NRF_P1;
    258e:	4a08      	ldr	r2, [pc, #32]	; (25b0 <nrf_gpio_pin_write+0x3c>)
    2590:	e7f8      	b.n	2584 <nrf_gpio_pin_write+0x10>
    *p_pin = pin_number & 0x1F;
    2592:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    2596:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2598:	2801      	cmp	r0, #1
    259a:	d006      	beq.n	25aa <nrf_gpio_pin_write+0x36>
        case 0: return NRF_P0;
    259c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    25a0:	2301      	movs	r3, #1
    25a2:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    25a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    25a8:	4770      	bx	lr
        case 1: return NRF_P1;
    25aa:	4a01      	ldr	r2, [pc, #4]	; (25b0 <nrf_gpio_pin_write+0x3c>)
    25ac:	e7f8      	b.n	25a0 <nrf_gpio_pin_write+0x2c>
    25ae:	bf00      	nop
    25b0:	50000300 	.word	0x50000300

000025b4 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    25b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25b8:	b083      	sub	sp, #12
    25ba:	4680      	mov	r8, r0
    25bc:	468b      	mov	fp, r1
    25be:	9201      	str	r2, [sp, #4]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    25c0:	2500      	movs	r5, #0
    25c2:	e02b      	b.n	261c <pinctrl_configure_pins+0x68>
		uint32_t write = NO_WRITE;
		nrf_gpio_pin_dir_t dir;
		nrf_gpio_pin_input_t input;

		if (pin == NRF_PIN_DISCONNECTED) {
			pin = 0xFFFFFFFFU;
    25c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    25c8:	e035      	b.n	2636 <pinctrl_configure_pins+0x82>
		}

		switch (NRF_GET_FUN(pins[i])) {
#if defined(NRF_PSEL_UART)
		case NRF_FUN_UART_TX:
			NRF_PSEL_UART(reg, TXD) = pin;
    25ca:	9b01      	ldr	r3, [sp, #4]
    25cc:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
			write = 1U;
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    25d0:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    25d2:	463e      	mov	r6, r7
			write = 1U;
    25d4:	4639      	mov	r1, r7
		default:
			return -ENOTSUP;
		}

		/* configure GPIO properties */
		if (pin != NRF_PIN_DISCONNECTED) {
    25d6:	2c7f      	cmp	r4, #127	; 0x7f
    25d8:	d01e      	beq.n	2618 <pinctrl_configure_pins+0x64>
			if (write != NO_WRITE) {
    25da:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    25de:	f040 811f 	bne.w	2820 <pinctrl_configure_pins+0x26c>
				nrf_gpio_pin_write(pin, write);
			}

			/* force input and disconnected buffer for low power */
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    25e2:	f858 300a 	ldr.w	r3, [r8, sl]
    25e6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    25ea:	d001      	beq.n	25f0 <pinctrl_configure_pins+0x3c>
				dir = NRF_GPIO_PIN_DIR_INPUT;
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    25ec:	2701      	movs	r7, #1
				dir = NRF_GPIO_PIN_DIR_INPUT;
    25ee:	2600      	movs	r6, #0
			}

			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
    25f0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
    *p_pin = pin_number & 0x1F;
    25f4:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    25f8:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    25fa:	2c01      	cmp	r4, #1
    25fc:	f000 8114 	beq.w	2828 <pinctrl_configure_pins+0x274>
        case 0: return NRF_P0;
    2600:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    2604:	ea46 0647 	orr.w	r6, r6, r7, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    2608:	ea46 0683 	orr.w	r6, r6, r3, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    260c:	ea46 2609 	orr.w	r6, r6, r9, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    2610:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    2614:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    2618:	3501      	adds	r5, #1
    261a:	b2ed      	uxtb	r5, r5
    261c:	455d      	cmp	r5, fp
    261e:	f080 8105 	bcs.w	282c <pinctrl_configure_pins+0x278>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    2622:	ea4f 0a85 	mov.w	sl, r5, lsl #2
    2626:	f858 3025 	ldr.w	r3, [r8, r5, lsl #2]
    262a:	f3c3 2943 	ubfx	r9, r3, #9, #4
		uint32_t pin = NRF_GET_PIN(pins[i]);
    262e:	f003 047f 	and.w	r4, r3, #127	; 0x7f
		if (pin == NRF_PIN_DISCONNECTED) {
    2632:	2c7f      	cmp	r4, #127	; 0x7f
    2634:	d0c6      	beq.n	25c4 <pinctrl_configure_pins+0x10>
		switch (NRF_GET_FUN(pins[i])) {
    2636:	0c1b      	lsrs	r3, r3, #16
    2638:	2b22      	cmp	r3, #34	; 0x22
    263a:	f200 80f9 	bhi.w	2830 <pinctrl_configure_pins+0x27c>
    263e:	a201      	add	r2, pc, #4	; (adr r2, 2644 <pinctrl_configure_pins+0x90>)
    2640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2644:	000025cb 	.word	0x000025cb
    2648:	000026d1 	.word	0x000026d1
    264c:	000026e1 	.word	0x000026e1
    2650:	000026ef 	.word	0x000026ef
    2654:	000026ff 	.word	0x000026ff
    2658:	0000270d 	.word	0x0000270d
    265c:	0000271b 	.word	0x0000271b
    2660:	00002831 	.word	0x00002831
    2664:	00002831 	.word	0x00002831
    2668:	00002831 	.word	0x00002831
    266c:	00002831 	.word	0x00002831
    2670:	0000272b 	.word	0x0000272b
    2674:	00002741 	.word	0x00002741
    2678:	00002831 	.word	0x00002831
    267c:	00002831 	.word	0x00002831
    2680:	00002831 	.word	0x00002831
    2684:	00002831 	.word	0x00002831
    2688:	00002831 	.word	0x00002831
    268c:	00002831 	.word	0x00002831
    2690:	00002831 	.word	0x00002831
    2694:	00002831 	.word	0x00002831
    2698:	00002831 	.word	0x00002831
    269c:	00002757 	.word	0x00002757
    26a0:	0000276b 	.word	0x0000276b
    26a4:	0000277f 	.word	0x0000277f
    26a8:	00002793 	.word	0x00002793
    26ac:	00002831 	.word	0x00002831
    26b0:	00002831 	.word	0x00002831
    26b4:	00002831 	.word	0x00002831
    26b8:	000027a7 	.word	0x000027a7
    26bc:	000027b7 	.word	0x000027b7
    26c0:	000027c5 	.word	0x000027c5
    26c4:	000027d5 	.word	0x000027d5
    26c8:	000027e5 	.word	0x000027e5
    26cc:	000027f5 	.word	0x000027f5
			NRF_PSEL_UART(reg, RXD) = pin;
    26d0:	9b01      	ldr	r3, [sp, #4]
    26d2:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    26d6:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    26d8:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    26da:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    26de:	e77a      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, RTS) = pin;
    26e0:	9b01      	ldr	r3, [sp, #4]
    26e2:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    26e6:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    26e8:	463e      	mov	r6, r7
			write = 1U;
    26ea:	4639      	mov	r1, r7
			break;
    26ec:	e773      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_UART(reg, CTS) = pin;
    26ee:	9b01      	ldr	r3, [sp, #4]
    26f0:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    26f4:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    26f6:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    26f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    26fc:	e76b      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    26fe:	9b01      	ldr	r3, [sp, #4]
    2700:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2704:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2706:	2601      	movs	r6, #1
			write = 0U;
    2708:	4639      	mov	r1, r7
			break;
    270a:	e764      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    270c:	9b01      	ldr	r3, [sp, #4]
    270e:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2712:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2714:	463e      	mov	r6, r7
			write = 0U;
    2716:	2100      	movs	r1, #0
			break;
    2718:	e75d      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    271a:	9b01      	ldr	r3, [sp, #4]
    271c:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2720:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2722:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    2724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2728:	e755      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SCL) = pin;
    272a:	9b01      	ldr	r3, [sp, #4]
    272c:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
			if (drive == NRF_DRIVE_S0S1) {
    2730:	f1b9 0f00 	cmp.w	r9, #0
    2734:	d066      	beq.n	2804 <pinctrl_configure_pins+0x250>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2736:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2738:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    273a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    273e:	e74a      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_TWIM(reg, SDA) = pin;
    2740:	9b01      	ldr	r3, [sp, #4]
    2742:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
			if (drive == NRF_DRIVE_S0S1) {
    2746:	f1b9 0f00 	cmp.w	r9, #0
    274a:	d062      	beq.n	2812 <pinctrl_configure_pins+0x25e>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    274c:	2700      	movs	r7, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    274e:	463e      	mov	r6, r7
		uint32_t write = NO_WRITE;
    2750:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    2754:	e73f      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[0]) = pin;
    2756:	9b01      	ldr	r3, [sp, #4]
    2758:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
			write = NRF_GET_INVERT(pins[i]);
    275c:	f858 100a 	ldr.w	r1, [r8, sl]
    2760:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2764:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    2766:	463e      	mov	r6, r7
			break;
    2768:	e735      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[1]) = pin;
    276a:	9b01      	ldr	r3, [sp, #4]
    276c:	f8c3 4564 	str.w	r4, [r3, #1380]	; 0x564
			write = NRF_GET_INVERT(pins[i]);
    2770:	f858 100a 	ldr.w	r1, [r8, sl]
    2774:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    2778:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    277a:	463e      	mov	r6, r7
			break;
    277c:	e72b      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[2]) = pin;
    277e:	9b01      	ldr	r3, [sp, #4]
    2780:	f8c3 4568 	str.w	r4, [r3, #1384]	; 0x568
			write = NRF_GET_INVERT(pins[i]);
    2784:	f858 100a 	ldr.w	r1, [r8, sl]
    2788:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    278c:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    278e:	463e      	mov	r6, r7
			break;
    2790:	e721      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_PWM(reg, OUT[3]) = pin;
    2792:	9b01      	ldr	r3, [sp, #4]
    2794:	f8c3 456c 	str.w	r4, [r3, #1388]	; 0x56c
			write = NRF_GET_INVERT(pins[i]);
    2798:	f858 100a 	ldr.w	r1, [r8, sl]
    279c:	f3c1 3180 	ubfx	r1, r1, #14, #1
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27a0:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    27a2:	463e      	mov	r6, r7
			break;
    27a4:	e717      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, SCK) = pin;
    27a6:	9b01      	ldr	r3, [sp, #4]
    27a8:	f8c3 4524 	str.w	r4, [r3, #1316]	; 0x524
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27ac:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    27ae:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    27b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    27b4:	e70f      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, CSN) = pin;
    27b6:	9b01      	ldr	r3, [sp, #4]
    27b8:	f8c3 4528 	str.w	r4, [r3, #1320]	; 0x528
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27bc:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_OUTPUT;
    27be:	463e      	mov	r6, r7
			write = 1U;
    27c0:	4639      	mov	r1, r7
			break;
    27c2:	e708      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO0) = pin;
    27c4:	9b01      	ldr	r3, [sp, #4]
    27c6:	f8c3 4530 	str.w	r4, [r3, #1328]	; 0x530
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27ca:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    27cc:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    27ce:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    27d2:	e700      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO1) = pin;
    27d4:	9b01      	ldr	r3, [sp, #4]
    27d6:	f8c3 4534 	str.w	r4, [r3, #1332]	; 0x534
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27da:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    27dc:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    27de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    27e2:	e6f8      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO2) = pin;
    27e4:	9b01      	ldr	r3, [sp, #4]
    27e6:	f8c3 4538 	str.w	r4, [r3, #1336]	; 0x538
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27ea:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    27ec:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    27ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    27f2:	e6f0      	b.n	25d6 <pinctrl_configure_pins+0x22>
			NRF_PSEL_QSPI(reg, IO3) = pin;
    27f4:	9b01      	ldr	r3, [sp, #4]
    27f6:	f8c3 453c 	str.w	r4, [r3, #1340]	; 0x53c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    27fa:	2701      	movs	r7, #1
			dir = NRF_GPIO_PIN_DIR_INPUT;
    27fc:	2600      	movs	r6, #0
		uint32_t write = NO_WRITE;
    27fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
			break;
    2802:	e6e8      	b.n	25d6 <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2804:	464f      	mov	r7, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2806:	464e      	mov	r6, r9
		uint32_t write = NO_WRITE;
    2808:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
    280c:	f04f 0906 	mov.w	r9, #6
    2810:	e6e1      	b.n	25d6 <pinctrl_configure_pins+0x22>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    2812:	464f      	mov	r7, r9
			dir = NRF_GPIO_PIN_DIR_INPUT;
    2814:	464e      	mov	r6, r9
		uint32_t write = NO_WRITE;
    2816:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
				drive = NRF_DRIVE_S0D1;
    281a:	f04f 0906 	mov.w	r9, #6
    281e:	e6da      	b.n	25d6 <pinctrl_configure_pins+0x22>
				nrf_gpio_pin_write(pin, write);
    2820:	4620      	mov	r0, r4
    2822:	f7ff fea7 	bl	2574 <nrf_gpio_pin_write>
    2826:	e6dc      	b.n	25e2 <pinctrl_configure_pins+0x2e>
        case 1: return NRF_P1;
    2828:	4904      	ldr	r1, [pc, #16]	; (283c <pinctrl_configure_pins+0x288>)
    282a:	e6eb      	b.n	2604 <pinctrl_configure_pins+0x50>
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    282c:	2000      	movs	r0, #0
    282e:	e001      	b.n	2834 <pinctrl_configure_pins+0x280>
		switch (NRF_GET_FUN(pins[i])) {
    2830:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2834:	b003      	add	sp, #12
    2836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    283a:	bf00      	nop
    283c:	50000300 	.word	0x50000300

00002840 <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
    2840:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2844:	4905      	ldr	r1, [pc, #20]	; (285c <__NVIC_SystemReset+0x1c>)
    2846:	68ca      	ldr	r2, [r1, #12]
    2848:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    284c:	4b04      	ldr	r3, [pc, #16]	; (2860 <__NVIC_SystemReset+0x20>)
    284e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2850:	60cb      	str	r3, [r1, #12]
    2852:	f3bf 8f4f 	dsb	sy
    __NOP();
    2856:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2858:	e7fd      	b.n	2856 <__NVIC_SystemReset+0x16>
    285a:	bf00      	nop
    285c:	e000ed00 	.word	0xe000ed00
    2860:	05fa0004 	.word	0x05fa0004

00002864 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2864:	4b02      	ldr	r3, [pc, #8]	; (2870 <nvmc_wait+0xc>)
    2866:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    286a:	2b00      	cmp	r3, #0
    286c:	d0fa      	beq.n	2864 <nvmc_wait>
}
    286e:	4770      	bx	lr
    2870:	4001e000 	.word	0x4001e000

00002874 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    2874:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2876:	4b03      	ldr	r3, [pc, #12]	; (2884 <nvmc_config+0x10>)
    2878:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    287c:	f7ff fff2 	bl	2864 <nvmc_wait>
}
    2880:	bd08      	pop	{r3, pc}
    2882:	bf00      	nop
    2884:	4001e000 	.word	0x4001e000

00002888 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2888:	4b01      	ldr	r3, [pc, #4]	; (2890 <SystemCoreClockUpdate+0x8>)
    288a:	4a02      	ldr	r2, [pc, #8]	; (2894 <SystemCoreClockUpdate+0xc>)
    288c:	601a      	str	r2, [r3, #0]
}
    288e:	4770      	bx	lr
    2890:	20000064 	.word	0x20000064
    2894:	03d09000 	.word	0x03d09000

00002898 <SystemInit>:

void SystemInit(void)
{
    2898:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    289a:	f003 fb36 	bl	5f0a <nrf52_errata_36>
    289e:	b140      	cbz	r0, 28b2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    28a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    28a4:	2200      	movs	r2, #0
    28a6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    28aa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    28ae:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    28b2:	f003 fb34 	bl	5f1e <nrf52_errata_66>
    28b6:	2800      	cmp	r0, #0
    28b8:	d046      	beq.n	2948 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    28ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    28be:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    28c2:	4b4f      	ldr	r3, [pc, #316]	; (2a00 <SystemInit+0x168>)
    28c4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    28c8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    28cc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    28d0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    28d4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    28d8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    28dc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    28e0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    28e4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    28e8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    28ec:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    28f0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    28f4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    28f8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    28fc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2900:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2904:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2908:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    290c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2910:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2914:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2918:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    291c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2920:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2924:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2928:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    292c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2930:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2934:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2938:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    293c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2940:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2944:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    2948:	f003 faf3 	bl	5f32 <nrf52_errata_98>
    294c:	b118      	cbz	r0, 2956 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    294e:	4b2d      	ldr	r3, [pc, #180]	; (2a04 <SystemInit+0x16c>)
    2950:	4a2d      	ldr	r2, [pc, #180]	; (2a08 <SystemInit+0x170>)
    2952:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    2956:	f003 faff 	bl	5f58 <nrf52_errata_103>
    295a:	b118      	cbz	r0, 2964 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    295c:	4b2b      	ldr	r3, [pc, #172]	; (2a0c <SystemInit+0x174>)
    295e:	22fb      	movs	r2, #251	; 0xfb
    2960:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    2964:	f003 fb0b 	bl	5f7e <nrf52_errata_115>
    2968:	b170      	cbz	r0, 2988 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    296a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    296e:	f8d1 3ee4 	ldr.w	r3, [r1, #3812]	; 0xee4
    2972:	f023 030f 	bic.w	r3, r3, #15
    2976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    297a:	f8d2 2258 	ldr.w	r2, [r2, #600]	; 0x258
    297e:	f002 020f 	and.w	r2, r2, #15
    2982:	4313      	orrs	r3, r2
    2984:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    2988:	f003 fb0c 	bl	5fa4 <nrf52_errata_120>
    298c:	b120      	cbz	r0, 2998 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    298e:	4b20      	ldr	r3, [pc, #128]	; (2a10 <SystemInit+0x178>)
    2990:	f44f 7200 	mov.w	r2, #512	; 0x200
    2994:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2998:	f003 fb17 	bl	5fca <nrf52_errata_136>
    299c:	b160      	cbz	r0, 29b8 <SystemInit+0x120>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    299e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    29a6:	f013 0f01 	tst.w	r3, #1
    29aa:	d005      	beq.n	29b8 <SystemInit+0x120>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    29ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29b0:	f06f 0201 	mvn.w	r2, #1
    29b4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
        __DSB();
        __ISB();
    #endif

    nrf52_handle_approtect();
    29b8:	f003 fb21 	bl	5ffe <nrf52_handle_approtect>

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    29bc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    29c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    29c4:	2b00      	cmp	r3, #0
    29c6:	db08      	blt.n	29da <SystemInit+0x142>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    29c8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    29cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    29d0:	2b00      	cmp	r3, #0
    29d2:	db02      	blt.n	29da <SystemInit+0x142>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    29d4:	f7ff ff58 	bl	2888 <SystemCoreClockUpdate>
}
    29d8:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    29da:	2001      	movs	r0, #1
    29dc:	f7ff ff4a 	bl	2874 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    29e0:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    29e4:	2512      	movs	r5, #18
    29e6:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    29ea:	f7ff ff3b 	bl	2864 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    29ee:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    29f2:	f7ff ff37 	bl	2864 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    29f6:	2000      	movs	r0, #0
    29f8:	f7ff ff3c 	bl	2874 <nvmc_config>
            NVIC_SystemReset();
    29fc:	f7ff ff20 	bl	2840 <__NVIC_SystemReset>
    2a00:	4000c000 	.word	0x4000c000
    2a04:	40005000 	.word	0x40005000
    2a08:	00038148 	.word	0x00038148
    2a0c:	4000f000 	.word	0x4000f000
    2a10:	40029000 	.word	0x40029000

00002a14 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2a14:	b510      	push	{r4, lr}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    2a16:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2a18:	fab4 f384 	clz	r3, r4
    2a1c:	f1c3 031f 	rsb	r3, r3, #31
    2a20:	fa5f fc83 	uxtb.w	ip, r3
        if (idx < 0) {
    2a24:	2b00      	cmp	r3, #0
    2a26:	db16      	blt.n	2a56 <nrfx_flag32_alloc+0x42>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2a28:	2201      	movs	r2, #1
    2a2a:	fa02 f303 	lsl.w	r3, r2, r3
    2a2e:	ea24 0303 	bic.w	r3, r4, r3
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2a32:	f3bf 8f5b 	dmb	ish
    2a36:	e850 2f00 	ldrex	r2, [r0]
    2a3a:	42a2      	cmp	r2, r4
    2a3c:	d104      	bne.n	2a48 <nrfx_flag32_alloc+0x34>
    2a3e:	e840 3e00 	strex	lr, r3, [r0]
    2a42:	f1be 0f00 	cmp.w	lr, #0
    2a46:	d1f6      	bne.n	2a36 <nrfx_flag32_alloc+0x22>
    2a48:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2a4c:	d1e3      	bne.n	2a16 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    2a4e:	f881 c000 	strb.w	ip, [r1]

    return NRFX_SUCCESS;
    2a52:	4802      	ldr	r0, [pc, #8]	; (2a5c <nrfx_flag32_alloc+0x48>)
}
    2a54:	bd10      	pop	{r4, pc}
            return NRFX_ERROR_NO_MEM;
    2a56:	4802      	ldr	r0, [pc, #8]	; (2a60 <nrfx_flag32_alloc+0x4c>)
    2a58:	e7fc      	b.n	2a54 <nrfx_flag32_alloc+0x40>
    2a5a:	bf00      	nop
    2a5c:	0bad0000 	.word	0x0bad0000
    2a60:	0bad0002 	.word	0x0bad0002

00002a64 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2a64:	6803      	ldr	r3, [r0, #0]
    2a66:	40cb      	lsrs	r3, r1
    2a68:	f013 0f01 	tst.w	r3, #1
    2a6c:	d115      	bne.n	2a9a <nrfx_flag32_free+0x36>
{
    2a6e:	b500      	push	{lr}
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    2a70:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    2a72:	2301      	movs	r3, #1
    2a74:	408b      	lsls	r3, r1
    2a76:	4313      	orrs	r3, r2
    2a78:	f3bf 8f5b 	dmb	ish
    2a7c:	e850 cf00 	ldrex	ip, [r0]
    2a80:	4594      	cmp	ip, r2
    2a82:	d104      	bne.n	2a8e <nrfx_flag32_free+0x2a>
    2a84:	e840 3e00 	strex	lr, r3, [r0]
    2a88:	f1be 0f00 	cmp.w	lr, #0
    2a8c:	d1f6      	bne.n	2a7c <nrfx_flag32_free+0x18>
    2a8e:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2a92:	d1ed      	bne.n	2a70 <nrfx_flag32_free+0xc>

    return NRFX_SUCCESS;
    2a94:	4802      	ldr	r0, [pc, #8]	; (2aa0 <nrfx_flag32_free+0x3c>)
}
    2a96:	f85d fb04 	ldr.w	pc, [sp], #4
        return NRFX_ERROR_INVALID_PARAM;
    2a9a:	4802      	ldr	r0, [pc, #8]	; (2aa4 <nrfx_flag32_free+0x40>)
}
    2a9c:	4770      	bx	lr
    2a9e:	bf00      	nop
    2aa0:	0bad0000 	.word	0x0bad0000
    2aa4:	0bad0004 	.word	0x0bad0004

00002aa8 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    2aa8:	b570      	push	{r4, r5, r6, lr}
    2aaa:	b082      	sub	sp, #8
    switch (domain)
    2aac:	4606      	mov	r6, r0
    2aae:	b118      	cbz	r0, 2ab8 <clock_stop+0x10>
    2ab0:	2801      	cmp	r0, #1
    2ab2:	d016      	beq.n	2ae2 <clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2ab4:	b002      	add	sp, #8
    2ab6:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    2ab8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2abc:	2202      	movs	r2, #2
    2abe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2ac2:	2200      	movs	r2, #0
    2ac4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2ac8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2acc:	2201      	movs	r2, #1
    2ace:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2ad0:	2301      	movs	r3, #1
    2ad2:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2ad6:	429e      	cmp	r6, r3
    2ad8:	d00f      	beq.n	2afa <clock_stop+0x52>
    2ada:	2500      	movs	r5, #0
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2adc:	f242 7410 	movw	r4, #10000	; 0x2710
    2ae0:	e013      	b.n	2b0a <clock_stop+0x62>
    p_reg->INTENCLR = mask;
    2ae2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ae6:	2201      	movs	r2, #1
    2ae8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2aec:	2100      	movs	r1, #0
    2aee:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    2af2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2af6:	605a      	str	r2, [r3, #4]
}
    2af8:	e7ea      	b.n	2ad0 <clock_stop+0x28>
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2afa:	f10d 0507 	add.w	r5, sp, #7
    2afe:	e7ed      	b.n	2adc <clock_stop+0x34>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    2b00:	2001      	movs	r0, #1
    2b02:	f003 fa8c 	bl	601e <nrfx_busy_wait>
    2b06:	3c01      	subs	r4, #1
    2b08:	d00c      	beq.n	2b24 <clock_stop+0x7c>
    2b0a:	462a      	mov	r2, r5
    2b0c:	4631      	mov	r1, r6
    2b0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2b12:	f003 fa88 	bl	6026 <nrf_clock_is_running>
    2b16:	b128      	cbz	r0, 2b24 <clock_stop+0x7c>
    2b18:	2d00      	cmp	r5, #0
    2b1a:	d0f1      	beq.n	2b00 <clock_stop+0x58>
    2b1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2b20:	2b01      	cmp	r3, #1
    2b22:	d0ed      	beq.n	2b00 <clock_stop+0x58>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    2b24:	2e01      	cmp	r6, #1
    2b26:	d1c5      	bne.n	2ab4 <clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    2b28:	4b01      	ldr	r3, [pc, #4]	; (2b30 <clock_stop+0x88>)
    2b2a:	2200      	movs	r2, #0
    2b2c:	715a      	strb	r2, [r3, #5]
    2b2e:	e7c1      	b.n	2ab4 <clock_stop+0xc>
    2b30:	2000091c 	.word	0x2000091c

00002b34 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2b34:	4b06      	ldr	r3, [pc, #24]	; (2b50 <nrfx_clock_init+0x1c>)
    2b36:	791b      	ldrb	r3, [r3, #4]
    2b38:	b93b      	cbnz	r3, 2b4a <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    2b3a:	4b05      	ldr	r3, [pc, #20]	; (2b50 <nrfx_clock_init+0x1c>)
    2b3c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2b3e:	2201      	movs	r2, #1
    2b40:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    2b42:	2200      	movs	r2, #0
    2b44:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2b46:	4803      	ldr	r0, [pc, #12]	; (2b54 <nrfx_clock_init+0x20>)
    2b48:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2b4a:	4803      	ldr	r0, [pc, #12]	; (2b58 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2b4c:	4770      	bx	lr
    2b4e:	bf00      	nop
    2b50:	2000091c 	.word	0x2000091c
    2b54:	0bad0000 	.word	0x0bad0000
    2b58:	0bad000c 	.word	0x0bad000c

00002b5c <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2b5c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2b5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b62:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2b66:	b18b      	cbz	r3, 2b8c <nrfx_power_clock_irq_handler+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b6c:	2200      	movs	r2, #0
    2b6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2b72:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2b76:	2201      	movs	r2, #1
    2b78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    2b7c:	4b15      	ldr	r3, [pc, #84]	; (2bd4 <nrfx_power_clock_irq_handler+0x78>)
    2b7e:	795b      	ldrb	r3, [r3, #5]
    2b80:	b923      	cbnz	r3, 2b8c <nrfx_power_clock_irq_handler+0x30>
        {
            m_clock_cb.hfclk_started = true;
    2b82:	4b14      	ldr	r3, [pc, #80]	; (2bd4 <nrfx_power_clock_irq_handler+0x78>)
    2b84:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2b86:	681b      	ldr	r3, [r3, #0]
    2b88:	2000      	movs	r0, #0
    2b8a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2b8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b90:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2b94:	b19b      	cbz	r3, 2bbe <nrfx_power_clock_irq_handler+0x62>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2b96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b9a:	2200      	movs	r2, #0
    2b9c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2ba0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2ba4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2ba8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2bac:	f012 0f03 	tst.w	r2, #3
    2bb0:	d106      	bne.n	2bc0 <nrfx_power_clock_irq_handler+0x64>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2bb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bb6:	2201      	movs	r2, #1
    2bb8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2bbc:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2bbe:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    2bc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bc4:	2202      	movs	r2, #2
    2bc6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2bca:	4b02      	ldr	r3, [pc, #8]	; (2bd4 <nrfx_power_clock_irq_handler+0x78>)
    2bcc:	681b      	ldr	r3, [r3, #0]
    2bce:	2001      	movs	r0, #1
    2bd0:	4798      	blx	r3
}
    2bd2:	e7f4      	b.n	2bbe <nrfx_power_clock_irq_handler+0x62>
    2bd4:	2000091c 	.word	0x2000091c

00002bd8 <nrf_gpio_reconfigure>:
{
    2bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bda:	461c      	mov	r4, r3
    2bdc:	9f05      	ldr	r7, [sp, #20]
    2bde:	9e06      	ldr	r6, [sp, #24]
    *p_pin = pin_number & 0x1F;
    2be0:	f000 0c1f 	and.w	ip, r0, #31
    return pin_number >> 5;
    2be4:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2be6:	2801      	cmp	r0, #1
    2be8:	d035      	beq.n	2c56 <nrf_gpio_reconfigure+0x7e>
        case 0: return NRF_P0;
    2bea:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    2bee:	f50c 73e0 	add.w	r3, ip, #448	; 0x1c0
    2bf2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2bf6:	b381      	cbz	r1, 2c5a <nrf_gpio_reconfigure+0x82>
    2bf8:	2001      	movs	r0, #1
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    2bfa:	b382      	cbz	r2, 2c5e <nrf_gpio_reconfigure+0x86>
    2bfc:	f04f 0e02 	mov.w	lr, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2c00:	ea40 000e 	orr.w	r0, r0, lr
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    2c04:	b374      	cbz	r4, 2c64 <nrf_gpio_reconfigure+0x8c>
    2c06:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    2c0a:	ea40 000e 	orr.w	r0, r0, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    2c0e:	b367      	cbz	r7, 2c6a <nrf_gpio_reconfigure+0x92>
    2c10:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    2c14:	ea40 000e 	orr.w	r0, r0, lr
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    2c18:	b356      	cbz	r6, 2c70 <nrf_gpio_reconfigure+0x98>
    2c1a:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2c1e:	ea40 000e 	orr.w	r0, r0, lr
    cnf &= ~to_update;
    2c22:	ea23 0000 	bic.w	r0, r3, r0
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2c26:	b331      	cbz	r1, 2c76 <nrf_gpio_reconfigure+0x9e>
    2c28:	780b      	ldrb	r3, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2c2a:	b332      	cbz	r2, 2c7a <nrf_gpio_reconfigure+0xa2>
    2c2c:	7812      	ldrb	r2, [r2, #0]
    2c2e:	0052      	lsls	r2, r2, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2c30:	4313      	orrs	r3, r2
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2c32:	b324      	cbz	r4, 2c7e <nrf_gpio_reconfigure+0xa6>
    2c34:	7822      	ldrb	r2, [r4, #0]
    2c36:	0092      	lsls	r2, r2, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2c38:	4313      	orrs	r3, r2
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2c3a:	b317      	cbz	r7, 2c82 <nrf_gpio_reconfigure+0xaa>
    2c3c:	783a      	ldrb	r2, [r7, #0]
    2c3e:	0212      	lsls	r2, r2, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2c40:	4313      	orrs	r3, r2
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    2c42:	b306      	cbz	r6, 2c86 <nrf_gpio_reconfigure+0xae>
    2c44:	7832      	ldrb	r2, [r6, #0]
    2c46:	0412      	lsls	r2, r2, #16
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2c48:	4313      	orrs	r3, r2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2c4a:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    2c4c:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
    2c50:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
}
    2c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    2c56:	4d0d      	ldr	r5, [pc, #52]	; (2c8c <nrf_gpio_reconfigure+0xb4>)
    2c58:	e7c9      	b.n	2bee <nrf_gpio_reconfigure+0x16>
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    2c5a:	2000      	movs	r0, #0
    2c5c:	e7cd      	b.n	2bfa <nrf_gpio_reconfigure+0x22>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    2c5e:	f04f 0e00 	mov.w	lr, #0
    2c62:	e7cd      	b.n	2c00 <nrf_gpio_reconfigure+0x28>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    2c64:	f04f 0e00 	mov.w	lr, #0
    2c68:	e7cf      	b.n	2c0a <nrf_gpio_reconfigure+0x32>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    2c6a:	f04f 0e00 	mov.w	lr, #0
    2c6e:	e7d1      	b.n	2c14 <nrf_gpio_reconfigure+0x3c>
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    2c70:	f04f 0e00 	mov.w	lr, #0
    2c74:	e7d3      	b.n	2c1e <nrf_gpio_reconfigure+0x46>
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2c76:	2300      	movs	r3, #0
    2c78:	e7d7      	b.n	2c2a <nrf_gpio_reconfigure+0x52>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    2c7a:	2200      	movs	r2, #0
    2c7c:	e7d8      	b.n	2c30 <nrf_gpio_reconfigure+0x58>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2c7e:	2200      	movs	r2, #0
    2c80:	e7da      	b.n	2c38 <nrf_gpio_reconfigure+0x60>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    2c82:	2200      	movs	r2, #0
    2c84:	e7dc      	b.n	2c40 <nrf_gpio_reconfigure+0x68>
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    2c86:	2200      	movs	r2, #0
    2c88:	e7de      	b.n	2c48 <nrf_gpio_reconfigure+0x70>
    2c8a:	bf00      	nop
    2c8c:	50000300 	.word	0x50000300

00002c90 <nrf_gpio_latches_read_and_clear>:
{
    2c90:	b500      	push	{lr}
    2c92:	b083      	sub	sp, #12
    2c94:	4684      	mov	ip, r0
    2c96:	468e      	mov	lr, r1
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    2c98:	4b0d      	ldr	r3, [pc, #52]	; (2cd0 <nrf_gpio_latches_read_and_clear+0x40>)
    2c9a:	e893 0003 	ldmia.w	r3, {r0, r1}
    2c9e:	ab02      	add	r3, sp, #8
    2ca0:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    2ca4:	4663      	mov	r3, ip
    2ca6:	e00b      	b.n	2cc0 <nrf_gpio_latches_read_and_clear+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    2ca8:	a902      	add	r1, sp, #8
    2caa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    2cae:	f851 1c08 	ldr.w	r1, [r1, #-8]
    2cb2:	f8d1 0520 	ldr.w	r0, [r1, #1312]	; 0x520
    2cb6:	f842 0b04 	str.w	r0, [r2], #4
        gpio_regs[i]->LATCH = *p_masks;
    2cba:	f8c1 0520 	str.w	r0, [r1, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    2cbe:	3301      	adds	r3, #1
    2cc0:	eb0c 000e 	add.w	r0, ip, lr
    2cc4:	4298      	cmp	r0, r3
    2cc6:	d8ef      	bhi.n	2ca8 <nrf_gpio_latches_read_and_clear+0x18>
}
    2cc8:	b003      	add	sp, #12
    2cca:	f85d fb04 	ldr.w	pc, [sp], #4
    2cce:	bf00      	nop
    2cd0:	000069e0 	.word	0x000069e0

00002cd4 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    2cd4:	3008      	adds	r0, #8
    2cd6:	4b03      	ldr	r3, [pc, #12]	; (2ce4 <pin_in_use+0x10>)
    2cd8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2cdc:	f000 0001 	and.w	r0, r0, #1
    2ce0:	4770      	bx	lr
    2ce2:	bf00      	nop
    2ce4:	20000068 	.word	0x20000068

00002ce8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2ce8:	3008      	adds	r0, #8
    2cea:	4b03      	ldr	r3, [pc, #12]	; (2cf8 <pin_in_use_by_te+0x10>)
    2cec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2cf0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2cf4:	4770      	bx	lr
    2cf6:	bf00      	nop
    2cf8:	20000068 	.word	0x20000068

00002cfc <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    2cfc:	3008      	adds	r0, #8
    2cfe:	4b04      	ldr	r3, [pc, #16]	; (2d10 <pin_has_trigger+0x14>)
    2d00:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2d04:	f010 001c 	ands.w	r0, r0, #28
    2d08:	bf18      	it	ne
    2d0a:	2001      	movne	r0, #1
    2d0c:	4770      	bx	lr
    2d0e:	bf00      	nop
    2d10:	20000068 	.word	0x20000068

00002d14 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2d14:	3008      	adds	r0, #8
    2d16:	4b03      	ldr	r3, [pc, #12]	; (2d24 <pin_is_output+0x10>)
    2d18:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2d1c:	f3c0 0040 	ubfx	r0, r0, #1, #1
    2d20:	4770      	bx	lr
    2d22:	bf00      	nop
    2d24:	20000068 	.word	0x20000068

00002d28 <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2d28:	3008      	adds	r0, #8
    2d2a:	4b02      	ldr	r3, [pc, #8]	; (2d34 <pin_te_get+0xc>)
    2d2c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2d30:	0b40      	lsrs	r0, r0, #13
    2d32:	4770      	bx	lr
    2d34:	20000068 	.word	0x20000068

00002d38 <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2d38:	2200      	movs	r2, #0
    2d3a:	e004      	b.n	2d46 <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d40:	4283      	cmp	r3, r0
    2d42:	d00f      	beq.n	2d64 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2d44:	3201      	adds	r2, #1
    2d46:	2a2f      	cmp	r2, #47	; 0x2f
    2d48:	d80a      	bhi.n	2d60 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2d4a:	f102 0308 	add.w	r3, r2, #8
    2d4e:	4906      	ldr	r1, [pc, #24]	; (2d68 <handler_in_use+0x30>)
    2d50:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    2d54:	f413 7f80 	tst.w	r3, #256	; 0x100
    2d58:	d0f0      	beq.n	2d3c <handler_in_use+0x4>
    2d5a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2d5e:	e7ef      	b.n	2d40 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    2d60:	2000      	movs	r0, #0
    2d62:	4770      	bx	lr
            return true;
    2d64:	2001      	movs	r0, #1
}
    2d66:	4770      	bx	lr
    2d68:	20000068 	.word	0x20000068

00002d6c <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    2d6c:	2300      	movs	r3, #0
    2d6e:	b113      	cbz	r3, 2d76 <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    2d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2d74:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2d76:	4a07      	ldr	r2, [pc, #28]	; (2d94 <find_handler+0x28>)
    2d78:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    2d7c:	4282      	cmp	r2, r0
    2d7e:	d001      	beq.n	2d84 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    2d80:	3301      	adds	r3, #1
    2d82:	e7f4      	b.n	2d6e <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    2d84:	4a03      	ldr	r2, [pc, #12]	; (2d94 <find_handler+0x28>)
    2d86:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    2d8a:	6852      	ldr	r2, [r2, #4]
    2d8c:	428a      	cmp	r2, r1
    2d8e:	d1f7      	bne.n	2d80 <find_handler+0x14>
            return i;
    2d90:	4618      	mov	r0, r3
    2d92:	4770      	bx	lr
    2d94:	20000068 	.word	0x20000068

00002d98 <get_initial_sense>:
    return NRFX_SUCCESS;
}

static inline nrf_gpio_pin_sense_t get_initial_sense(nrfx_gpiote_pin_t pin)
{
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2d98:	f100 0208 	add.w	r2, r0, #8
    2d9c:	4b0f      	ldr	r3, [pc, #60]	; (2ddc <get_initial_sense+0x44>)
    2d9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2da2:	f3c3 0382 	ubfx	r3, r3, #2, #3
    nrf_gpio_pin_sense_t sense;

    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    2da6:	2b04      	cmp	r3, #4
    2da8:	d012      	beq.n	2dd0 <get_initial_sense+0x38>
    {
        sense = NRF_GPIO_PIN_SENSE_LOW;
    }
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    2daa:	2b05      	cmp	r3, #5
    2dac:	d012      	beq.n	2dd4 <get_initial_sense+0x3c>
    *p_pin = pin_number & 0x1F;
    2dae:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    2db2:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2db4:	2801      	cmp	r0, #1
    2db6:	d009      	beq.n	2dcc <get_initial_sense+0x34>
        case 0: return NRF_P0;
    2db8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    2dbc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    2dc0:	40d3      	lsrs	r3, r2
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    }
    else
    {
        /* If edge detection start with sensing opposite state. */
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2dc2:	f013 0f01 	tst.w	r3, #1
    2dc6:	d007      	beq.n	2dd8 <get_initial_sense+0x40>
    2dc8:	2003      	movs	r0, #3
    2dca:	4770      	bx	lr
        case 1: return NRF_P1;
    2dcc:	4b04      	ldr	r3, [pc, #16]	; (2de0 <get_initial_sense+0x48>)
    2dce:	e7f5      	b.n	2dbc <get_initial_sense+0x24>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    2dd0:	2003      	movs	r0, #3
    2dd2:	4770      	bx	lr
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    2dd4:	2002      	movs	r0, #2
    2dd6:	4770      	bx	lr
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2dd8:	2002      	movs	r0, #2
    }

    return sense;
}
    2dda:	4770      	bx	lr
    2ddc:	20000068 	.word	0x20000068
    2de0:	50000300 	.word	0x50000300

00002de4 <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2de4:	3008      	adds	r0, #8
    2de6:	4b06      	ldr	r3, [pc, #24]	; (2e00 <channel_handler_get+0x1c>)
    2de8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    2dec:	f410 7f80 	tst.w	r0, #256	; 0x100
    2df0:	d004      	beq.n	2dfc <channel_handler_get+0x18>
    2df2:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    2df6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2dfa:	4770      	bx	lr
        return NULL;
    2dfc:	2000      	movs	r0, #0
}
    2dfe:	4770      	bx	lr
    2e00:	20000068 	.word	0x20000068

00002e04 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2e04:	b570      	push	{r4, r5, r6, lr}
    2e06:	4604      	mov	r4, r0
    2e08:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    2e0a:	f7ff ffeb 	bl	2de4 <channel_handler_get>

    if (handler)
    2e0e:	b120      	cbz	r0, 2e1a <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    2e10:	6806      	ldr	r6, [r0, #0]
    2e12:	6842      	ldr	r2, [r0, #4]
    2e14:	4629      	mov	r1, r5
    2e16:	4620      	mov	r0, r4
    2e18:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    2e1a:	4b04      	ldr	r3, [pc, #16]	; (2e2c <call_handler+0x28>)
    2e1c:	689b      	ldr	r3, [r3, #8]
    2e1e:	b123      	cbz	r3, 2e2a <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2e20:	4a02      	ldr	r2, [pc, #8]	; (2e2c <call_handler+0x28>)
    2e22:	68d2      	ldr	r2, [r2, #12]
    2e24:	4629      	mov	r1, r5
    2e26:	4620      	mov	r0, r4
    2e28:	4798      	blx	r3
    }
}
    2e2a:	bd70      	pop	{r4, r5, r6, pc}
    2e2c:	20000068 	.word	0x20000068

00002e30 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    2e30:	b570      	push	{r4, r5, r6, lr}
    2e32:	4606      	mov	r6, r0
    2e34:	460c      	mov	r4, r1
    2e36:	4615      	mov	r5, r2
    if (is_level(trigger))
    2e38:	4608      	mov	r0, r1
    2e3a:	f003 f9f6 	bl	622a <is_level>
    2e3e:	b960      	cbnz	r0, 2e5a <next_sense_cond_call_handler+0x2a>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2e40:	2d02      	cmp	r5, #2
    2e42:	d028      	beq.n	2e96 <next_sense_cond_call_handler+0x66>
    2e44:	2102      	movs	r1, #2

        nrf_gpio_cfg_sense_set(pin, next_sense);
    2e46:	4630      	mov	r0, r6
    2e48:	f003 f9c7 	bl	61da <nrf_gpio_cfg_sense_set>

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    2e4c:	2c03      	cmp	r4, #3
    2e4e:	d026      	beq.n	2e9e <next_sense_cond_call_handler+0x6e>
    2e50:	2d02      	cmp	r5, #2
    2e52:	d022      	beq.n	2e9a <next_sense_cond_call_handler+0x6a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    2e54:	2d03      	cmp	r5, #3
    2e56:	d027      	beq.n	2ea8 <next_sense_cond_call_handler+0x78>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    2e58:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    2e5a:	4621      	mov	r1, r4
    2e5c:	4630      	mov	r0, r6
    2e5e:	f7ff ffd1 	bl	2e04 <call_handler>
    *p_pin = pin_number & 0x1F;
    2e62:	f006 031f 	and.w	r3, r6, #31
    return pin_number >> 5;
    2e66:	0972      	lsrs	r2, r6, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    2e68:	2a01      	cmp	r2, #1
    2e6a:	d012      	beq.n	2e92 <next_sense_cond_call_handler+0x62>
        case 0: return NRF_P0;
    2e6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2e70:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    2e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e78:	f3c3 4301 	ubfx	r3, r3, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    2e7c:	429d      	cmp	r5, r3
    2e7e:	d1eb      	bne.n	2e58 <next_sense_cond_call_handler+0x28>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    2e80:	2100      	movs	r1, #0
    2e82:	4630      	mov	r0, r6
    2e84:	f003 f9a9 	bl	61da <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    2e88:	4629      	mov	r1, r5
    2e8a:	4630      	mov	r0, r6
    2e8c:	f003 f9a5 	bl	61da <nrf_gpio_cfg_sense_set>
    2e90:	e7e2      	b.n	2e58 <next_sense_cond_call_handler+0x28>
        case 1: return NRF_P1;
    2e92:	4a07      	ldr	r2, [pc, #28]	; (2eb0 <next_sense_cond_call_handler+0x80>)
    2e94:	e7ec      	b.n	2e70 <next_sense_cond_call_handler+0x40>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    2e96:	2103      	movs	r1, #3
    2e98:	e7d5      	b.n	2e46 <next_sense_cond_call_handler+0x16>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    2e9a:	2c01      	cmp	r4, #1
    2e9c:	d1da      	bne.n	2e54 <next_sense_cond_call_handler+0x24>
            call_handler(pin, trigger);
    2e9e:	4621      	mov	r1, r4
    2ea0:	4630      	mov	r0, r6
    2ea2:	f7ff ffaf 	bl	2e04 <call_handler>
}
    2ea6:	e7d7      	b.n	2e58 <next_sense_cond_call_handler+0x28>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    2ea8:	2c02      	cmp	r4, #2
    2eaa:	d1d5      	bne.n	2e58 <next_sense_cond_call_handler+0x28>
    2eac:	e7f7      	b.n	2e9e <next_sense_cond_call_handler+0x6e>
    2eae:	bf00      	nop
    2eb0:	50000300 	.word	0x50000300

00002eb4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2eb4:	f100 0208 	add.w	r2, r0, #8
    2eb8:	4b0e      	ldr	r3, [pc, #56]	; (2ef4 <release_handler+0x40>)
    2eba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    2ebe:	f413 7f80 	tst.w	r3, #256	; 0x100
    2ec2:	d016      	beq.n	2ef2 <release_handler+0x3e>
{
    2ec4:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2ec6:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2eca:	4610      	mov	r0, r2
    2ecc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2ed0:	4a08      	ldr	r2, [pc, #32]	; (2ef4 <release_handler+0x40>)
    2ed2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    2ed6:	4620      	mov	r0, r4
    2ed8:	f7ff ff2e 	bl	2d38 <handler_in_use>
    2edc:	b100      	cbz	r0, 2ee0 <release_handler+0x2c>
}
    2ede:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    2ee0:	4804      	ldr	r0, [pc, #16]	; (2ef4 <release_handler+0x40>)
    2ee2:	2300      	movs	r3, #0
    2ee4:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2ee8:	4621      	mov	r1, r4
    2eea:	3074      	adds	r0, #116	; 0x74
    2eec:	f7ff fdba 	bl	2a64 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    2ef0:	e7f5      	b.n	2ede <release_handler+0x2a>
    2ef2:	4770      	bx	lr
    2ef4:	20000068 	.word	0x20000068

00002ef8 <pin_handler_trigger_uninit>:
{
    2ef8:	b510      	push	{r4, lr}
    2efa:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    2efc:	f7ff fef4 	bl	2ce8 <pin_in_use_by_te>
    2f00:	b140      	cbz	r0, 2f14 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2f02:	4620      	mov	r0, r4
    2f04:	f7ff ff10 	bl	2d28 <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2f08:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    2f0c:	4b06      	ldr	r3, [pc, #24]	; (2f28 <pin_handler_trigger_uninit+0x30>)
    2f0e:	2200      	movs	r2, #0
    2f10:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    2f14:	4620      	mov	r0, r4
    2f16:	f7ff ffcd 	bl	2eb4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2f1a:	3408      	adds	r4, #8
    2f1c:	4b03      	ldr	r3, [pc, #12]	; (2f2c <pin_handler_trigger_uninit+0x34>)
    2f1e:	2200      	movs	r2, #0
    2f20:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    2f24:	bd10      	pop	{r4, pc}
    2f26:	bf00      	nop
    2f28:	40006000 	.word	0x40006000
    2f2c:	20000068 	.word	0x20000068

00002f30 <pin_handler_set>:
{
    2f30:	b570      	push	{r4, r5, r6, lr}
    2f32:	b082      	sub	sp, #8
    2f34:	4605      	mov	r5, r0
    2f36:	460e      	mov	r6, r1
    2f38:	4614      	mov	r4, r2
    release_handler(pin);
    2f3a:	f7ff ffbb 	bl	2eb4 <release_handler>
    if (!handler)
    2f3e:	b326      	cbz	r6, 2f8a <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    2f40:	4621      	mov	r1, r4
    2f42:	4630      	mov	r0, r6
    2f44:	f7ff ff12 	bl	2d6c <find_handler>
    if (handler_id < 0)
    2f48:	1e03      	subs	r3, r0, #0
    2f4a:	db13      	blt.n	2f74 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    2f4c:	4910      	ldr	r1, [pc, #64]	; (2f90 <pin_handler_set+0x60>)
    2f4e:	f841 6033 	str.w	r6, [r1, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    2f52:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
    2f56:	6054      	str	r4, [r2, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    2f58:	f105 0008 	add.w	r0, r5, #8
    2f5c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
    2f60:	025b      	lsls	r3, r3, #9
    2f62:	b29b      	uxth	r3, r3
    2f64:	4313      	orrs	r3, r2
    2f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2f6a:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    return NRFX_SUCCESS;
    2f6e:	4809      	ldr	r0, [pc, #36]	; (2f94 <pin_handler_set+0x64>)
}
    2f70:	b002      	add	sp, #8
    2f72:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    2f74:	f10d 0107 	add.w	r1, sp, #7
    2f78:	4807      	ldr	r0, [pc, #28]	; (2f98 <pin_handler_set+0x68>)
    2f7a:	f7ff fd4b 	bl	2a14 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    2f7e:	4b05      	ldr	r3, [pc, #20]	; (2f94 <pin_handler_set+0x64>)
    2f80:	4298      	cmp	r0, r3
    2f82:	d1f5      	bne.n	2f70 <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    2f84:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2f88:	e7e0      	b.n	2f4c <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    2f8a:	4802      	ldr	r0, [pc, #8]	; (2f94 <pin_handler_set+0x64>)
    2f8c:	e7f0      	b.n	2f70 <pin_handler_set+0x40>
    2f8e:	bf00      	nop
    2f90:	20000068 	.word	0x20000068
    2f94:	0bad0000 	.word	0x0bad0000
    2f98:	200000dc 	.word	0x200000dc

00002f9c <port_event_handle>:
    }
    return false;
}

static void port_event_handle(void)
{
    2f9c:	b570      	push	{r4, r5, r6, lr}
    2f9e:	b082      	sub	sp, #8
    uint32_t latch[GPIO_COUNT];

    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    2fa0:	466a      	mov	r2, sp
    2fa2:	2102      	movs	r1, #2
    2fa4:	2000      	movs	r0, #0
    2fa6:	f7ff fe73 	bl	2c90 <nrf_gpio_latches_read_and_clear>
    2faa:	e040      	b.n	302e <port_event_handle+0x92>
    2fac:	4e22      	ldr	r6, [pc, #136]	; (3038 <port_event_handle+0x9c>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    2fae:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    2fb2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    2fb6:	f3c2 4201 	ubfx	r2, r2, #16, #2
    2fba:	f7ff ff39 	bl	2e30 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    2fbe:	2301      	movs	r3, #1
    2fc0:	40ab      	lsls	r3, r5
    2fc2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
    2fc6:	ab02      	add	r3, sp, #8
    2fc8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    2fcc:	f853 0c08 	ldr.w	r0, [r3, #-8]
    2fd0:	b300      	cbz	r0, 3014 <port_event_handle+0x78>
                uint32_t pin = NRF_CTZ(latch[i]);
    2fd2:	fa90 f0a0 	rbit	r0, r0
    2fd6:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    2fda:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    2fde:	f100 0208 	add.w	r2, r0, #8
    2fe2:	4b16      	ldr	r3, [pc, #88]	; (303c <port_event_handle+0xa0>)
    2fe4:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    2fe8:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    2fec:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    2fee:	f000 0607 	and.w	r6, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    2ff2:	f81d 2005 	ldrb.w	r2, [sp, r5]
    2ff6:	2301      	movs	r3, #1
    2ff8:	40b3      	lsls	r3, r6
    2ffa:	43db      	mvns	r3, r3
    2ffc:	b25b      	sxtb	r3, r3
    2ffe:	4013      	ands	r3, r2
    3000:	f80d 3005 	strb.w	r3, [sp, r5]
    *p_pin = pin_number & 0x1F;
    3004:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    3008:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    300a:	2b01      	cmp	r3, #1
    300c:	d0ce      	beq.n	2fac <port_event_handle+0x10>
        case 0: return NRF_P0;
    300e:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    3012:	e7cc      	b.n	2fae <port_event_handle+0x12>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    3014:	3401      	adds	r4, #1
    3016:	2c01      	cmp	r4, #1
    3018:	d9d5      	bls.n	2fc6 <port_event_handle+0x2a>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    301a:	4b09      	ldr	r3, [pc, #36]	; (3040 <port_event_handle+0xa4>)
    301c:	2200      	movs	r2, #0
    301e:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    3022:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    3026:	4668      	mov	r0, sp
    3028:	f003 f904 	bl	6234 <latch_pending_read_and_check>
    302c:	b108      	cbz	r0, 3032 <port_event_handle+0x96>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    302e:	2400      	movs	r4, #0
    3030:	e7f1      	b.n	3016 <port_event_handle+0x7a>
}
    3032:	b002      	add	sp, #8
    3034:	bd70      	pop	{r4, r5, r6, pc}
    3036:	bf00      	nop
    3038:	50000300 	.word	0x50000300
    303c:	20000068 	.word	0x20000068
    3040:	40006000 	.word	0x40006000

00003044 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    3044:	b538      	push	{r3, r4, r5, lr}
    3046:	4604      	mov	r4, r0
    while (mask)
    3048:	e018      	b.n	307c <gpiote_evt_handle+0x38>
    {
        uint32_t ch = NRF_CTZ(mask);
    304a:	fa94 f3a4 	rbit	r3, r4
    304e:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    3052:	2201      	movs	r2, #1
    3054:	409a      	lsls	r2, r3
    3056:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    305a:	4a0a      	ldr	r2, [pc, #40]	; (3084 <gpiote_evt_handle+0x40>)
    305c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3060:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    3064:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    3068:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    306c:	f3c0 4001 	ubfx	r0, r0, #16, #2
    3070:	f003 f8d9 	bl	6226 <gpiote_polarity_to_trigger>
    3074:	4601      	mov	r1, r0
    3076:	4628      	mov	r0, r5
    3078:	f7ff fec4 	bl	2e04 <call_handler>
    while (mask)
    307c:	2c00      	cmp	r4, #0
    307e:	d1e4      	bne.n	304a <gpiote_evt_handle+0x6>
    }
}
    3080:	bd38      	pop	{r3, r4, r5, pc}
    3082:	bf00      	nop
    3084:	40006000 	.word	0x40006000

00003088 <nrfx_gpiote_input_configure>:
{
    3088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    308c:	b084      	sub	sp, #16
    308e:	4604      	mov	r4, r0
    3090:	4615      	mov	r5, r2
    3092:	461e      	mov	r6, r3
    if (p_input_config)
    3094:	b309      	cbz	r1, 30da <nrfx_gpiote_input_configure+0x52>
    3096:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    3098:	f003 f8af 	bl	61fa <pin_is_task_output>
    309c:	2800      	cmp	r0, #0
    309e:	d13f      	bne.n	3120 <nrfx_gpiote_input_configure+0x98>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    30a0:	2300      	movs	r3, #0
    30a2:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    30a6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    30aa:	9301      	str	r3, [sp, #4]
    30ac:	9300      	str	r3, [sp, #0]
    30ae:	463b      	mov	r3, r7
    30b0:	f10d 020f 	add.w	r2, sp, #15
    30b4:	f10d 010e 	add.w	r1, sp, #14
    30b8:	4620      	mov	r0, r4
    30ba:	f7ff fd8d 	bl	2bd8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    30be:	4a38      	ldr	r2, [pc, #224]	; (31a0 <nrfx_gpiote_input_configure+0x118>)
    30c0:	f104 0108 	add.w	r1, r4, #8
    30c4:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    30c8:	f023 0302 	bic.w	r3, r3, #2
    30cc:	b29b      	uxth	r3, r3
    30ce:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    30d2:	f043 0301 	orr.w	r3, r3, #1
    30d6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    30da:	b1bd      	cbz	r5, 310c <nrfx_gpiote_input_configure+0x84>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    30dc:	782f      	ldrb	r7, [r5, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    30de:	f8d5 8004 	ldr.w	r8, [r5, #4]
        if (pin_is_output(pin))
    30e2:	4620      	mov	r0, r4
    30e4:	f7ff fe16 	bl	2d14 <pin_is_output>
    30e8:	b1e0      	cbz	r0, 3124 <nrfx_gpiote_input_configure+0x9c>
            if (use_evt)
    30ea:	f1b8 0f00 	cmp.w	r8, #0
    30ee:	d151      	bne.n	3194 <nrfx_gpiote_input_configure+0x10c>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    30f0:	4a2b      	ldr	r2, [pc, #172]	; (31a0 <nrfx_gpiote_input_configure+0x118>)
    30f2:	f104 0108 	add.w	r1, r4, #8
    30f6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    30fa:	f023 031c 	bic.w	r3, r3, #28
    30fe:	b29b      	uxth	r3, r3
    3100:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    3104:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
    3108:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    310c:	2e00      	cmp	r6, #0
    310e:	d045      	beq.n	319c <nrfx_gpiote_input_configure+0x114>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    3110:	6872      	ldr	r2, [r6, #4]
    3112:	6831      	ldr	r1, [r6, #0]
    3114:	4620      	mov	r0, r4
    3116:	f7ff ff0b 	bl	2f30 <pin_handler_set>
}
    311a:	b004      	add	sp, #16
    311c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return NRFX_ERROR_INVALID_PARAM;
    3120:	4820      	ldr	r0, [pc, #128]	; (31a4 <nrfx_gpiote_input_configure+0x11c>)
    3122:	e7fa      	b.n	311a <nrfx_gpiote_input_configure+0x92>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    3124:	4a1e      	ldr	r2, [pc, #120]	; (31a0 <nrfx_gpiote_input_configure+0x118>)
    3126:	f104 0108 	add.w	r1, r4, #8
    312a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    312e:	f023 0320 	bic.w	r3, r3, #32
    3132:	04db      	lsls	r3, r3, #19
    3134:	0cdb      	lsrs	r3, r3, #19
    3136:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
            if (use_evt)
    313a:	f1b8 0f00 	cmp.w	r8, #0
    313e:	d0d7      	beq.n	30f0 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    3140:	2f03      	cmp	r7, #3
    3142:	d829      	bhi.n	3198 <nrfx_gpiote_input_configure+0x110>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3144:	686b      	ldr	r3, [r5, #4]
    3146:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3148:	b937      	cbnz	r7, 3158 <nrfx_gpiote_input_configure+0xd0>
    p_reg->CONFIG[idx] = 0;
    314a:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    314e:	4b16      	ldr	r3, [pc, #88]	; (31a8 <nrfx_gpiote_input_configure+0x120>)
    3150:	2200      	movs	r2, #0
    3152:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    3156:	e7cb      	b.n	30f0 <nrfx_gpiote_input_configure+0x68>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    3158:	4638      	mov	r0, r7
    315a:	f003 f865 	bl	6228 <gpiote_trigger_to_polarity>
    315e:	4603      	mov	r3, r0
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3160:	4811      	ldr	r0, [pc, #68]	; (31a8 <nrfx_gpiote_input_configure+0x120>)
    3162:	f505 71a2 	add.w	r1, r5, #324	; 0x144
    3166:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    316a:	f022 0203 	bic.w	r2, r2, #3
    316e:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
                    nrf_gpiote_event_configure(NRF_GPIOTE, ch, pin, polarity);
    3172:	4622      	mov	r2, r4
    3174:	4629      	mov	r1, r5
    3176:	f002 fff8 	bl	616a <nrf_gpiote_event_configure>
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    317a:	4a09      	ldr	r2, [pc, #36]	; (31a0 <nrfx_gpiote_input_configure+0x118>)
    317c:	f104 0108 	add.w	r1, r4, #8
    3180:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3184:	036d      	lsls	r5, r5, #13
    3186:	b2ad      	uxth	r5, r5
    3188:	432b      	orrs	r3, r5
    318a:	f043 0320 	orr.w	r3, r3, #32
    318e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    3192:	e7ad      	b.n	30f0 <nrfx_gpiote_input_configure+0x68>
                return NRFX_ERROR_INVALID_PARAM;
    3194:	4803      	ldr	r0, [pc, #12]	; (31a4 <nrfx_gpiote_input_configure+0x11c>)
    3196:	e7c0      	b.n	311a <nrfx_gpiote_input_configure+0x92>
                    return NRFX_ERROR_INVALID_PARAM;
    3198:	4802      	ldr	r0, [pc, #8]	; (31a4 <nrfx_gpiote_input_configure+0x11c>)
    319a:	e7be      	b.n	311a <nrfx_gpiote_input_configure+0x92>
        err = NRFX_SUCCESS;
    319c:	4803      	ldr	r0, [pc, #12]	; (31ac <nrfx_gpiote_input_configure+0x124>)
    319e:	e7bc      	b.n	311a <nrfx_gpiote_input_configure+0x92>
    31a0:	20000068 	.word	0x20000068
    31a4:	0bad0004 	.word	0x0bad0004
    31a8:	40006000 	.word	0x40006000
    31ac:	0bad0000 	.word	0x0bad0000

000031b0 <nrfx_gpiote_output_configure>:
{
    31b0:	b570      	push	{r4, r5, r6, lr}
    31b2:	b084      	sub	sp, #16
    31b4:	4604      	mov	r4, r0
    31b6:	4615      	mov	r5, r2
    if (p_config)
    31b8:	b329      	cbz	r1, 3206 <nrfx_gpiote_output_configure+0x56>
    31ba:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    31bc:	f003 f82c 	bl	6218 <pin_is_input>
    31c0:	b120      	cbz	r0, 31cc <nrfx_gpiote_output_configure+0x1c>
    31c2:	4620      	mov	r0, r4
    31c4:	f7ff fd90 	bl	2ce8 <pin_in_use_by_te>
    31c8:	2800      	cmp	r0, #0
    31ca:	d138      	bne.n	323e <nrfx_gpiote_output_configure+0x8e>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    31cc:	4620      	mov	r0, r4
    31ce:	f7ff fd95 	bl	2cfc <pin_has_trigger>
    31d2:	b110      	cbz	r0, 31da <nrfx_gpiote_output_configure+0x2a>
    31d4:	7873      	ldrb	r3, [r6, #1]
    31d6:	2b01      	cmp	r3, #1
    31d8:	d031      	beq.n	323e <nrfx_gpiote_output_configure+0x8e>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    31da:	2301      	movs	r3, #1
    31dc:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    31e0:	2300      	movs	r3, #0
    31e2:	9301      	str	r3, [sp, #4]
    31e4:	9600      	str	r6, [sp, #0]
    31e6:	1cb3      	adds	r3, r6, #2
    31e8:	1c72      	adds	r2, r6, #1
    31ea:	f10d 010f 	add.w	r1, sp, #15
    31ee:	4620      	mov	r0, r4
    31f0:	f7ff fcf2 	bl	2bd8 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    31f4:	4a1f      	ldr	r2, [pc, #124]	; (3274 <nrfx_gpiote_output_configure+0xc4>)
    31f6:	f104 0108 	add.w	r1, r4, #8
    31fa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    31fe:	f043 0303 	orr.w	r3, r3, #3
    3202:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    3206:	b385      	cbz	r5, 326a <nrfx_gpiote_output_configure+0xba>
        if (pin_is_input(pin))
    3208:	4620      	mov	r0, r4
    320a:	f003 f805 	bl	6218 <pin_is_input>
    320e:	bb70      	cbnz	r0, 326e <nrfx_gpiote_output_configure+0xbe>
        uint32_t ch = p_task_config->task_ch;
    3210:	782e      	ldrb	r6, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    3212:	f506 72a2 	add.w	r2, r6, #324	; 0x144
    3216:	4b18      	ldr	r3, [pc, #96]	; (3278 <nrfx_gpiote_output_configure+0xc8>)
    3218:	2100      	movs	r1, #0
    321a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    321e:	4a15      	ldr	r2, [pc, #84]	; (3274 <nrfx_gpiote_output_configure+0xc4>)
    3220:	f104 0108 	add.w	r1, r4, #8
    3224:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    3228:	f023 0320 	bic.w	r3, r3, #32
    322c:	04db      	lsls	r3, r3, #19
    322e:	0cdb      	lsrs	r3, r3, #19
    3230:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    3234:	786b      	ldrb	r3, [r5, #1]
    3236:	b923      	cbnz	r3, 3242 <nrfx_gpiote_output_configure+0x92>
    return NRFX_SUCCESS;
    3238:	4810      	ldr	r0, [pc, #64]	; (327c <nrfx_gpiote_output_configure+0xcc>)
}
    323a:	b004      	add	sp, #16
    323c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_INVALID_PARAM;
    323e:	4810      	ldr	r0, [pc, #64]	; (3280 <nrfx_gpiote_output_configure+0xd0>)
    3240:	e7fb      	b.n	323a <nrfx_gpiote_output_configure+0x8a>
                                      p_task_config->init_val);
    3242:	78aa      	ldrb	r2, [r5, #2]
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3244:	9200      	str	r2, [sp, #0]
    3246:	4622      	mov	r2, r4
    3248:	4631      	mov	r1, r6
    324a:	480b      	ldr	r0, [pc, #44]	; (3278 <nrfx_gpiote_output_configure+0xc8>)
    324c:	f002 ffa6 	bl	619c <nrf_gpiote_task_configure>
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    3250:	4a08      	ldr	r2, [pc, #32]	; (3274 <nrfx_gpiote_output_configure+0xc4>)
    3252:	3408      	adds	r4, #8
    3254:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    3258:	0376      	lsls	r6, r6, #13
    325a:	b2b6      	uxth	r6, r6
    325c:	4333      	orrs	r3, r6
    325e:	f043 0320 	orr.w	r3, r3, #32
    3262:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
    return NRFX_SUCCESS;
    3266:	4805      	ldr	r0, [pc, #20]	; (327c <nrfx_gpiote_output_configure+0xcc>)
    3268:	e7e7      	b.n	323a <nrfx_gpiote_output_configure+0x8a>
    326a:	4804      	ldr	r0, [pc, #16]	; (327c <nrfx_gpiote_output_configure+0xcc>)
    326c:	e7e5      	b.n	323a <nrfx_gpiote_output_configure+0x8a>
            return NRFX_ERROR_INVALID_PARAM;
    326e:	4804      	ldr	r0, [pc, #16]	; (3280 <nrfx_gpiote_output_configure+0xd0>)
    3270:	e7e3      	b.n	323a <nrfx_gpiote_output_configure+0x8a>
    3272:	bf00      	nop
    3274:	20000068 	.word	0x20000068
    3278:	40006000 	.word	0x40006000
    327c:	0bad0000 	.word	0x0bad0000
    3280:	0bad0004 	.word	0x0bad0004

00003284 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    3284:	4b01      	ldr	r3, [pc, #4]	; (328c <nrfx_gpiote_global_callback_set+0x8>)
    3286:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    3288:	60d9      	str	r1, [r3, #12]
}
    328a:	4770      	bx	lr
    328c:	20000068 	.word	0x20000068

00003290 <nrfx_gpiote_channel_get>:
{
    3290:	b538      	push	{r3, r4, r5, lr}
    3292:	4604      	mov	r4, r0
    3294:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    3296:	f7ff fd27 	bl	2ce8 <pin_in_use_by_te>
    329a:	b140      	cbz	r0, 32ae <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    329c:	f104 0008 	add.w	r0, r4, #8
    32a0:	4b04      	ldr	r3, [pc, #16]	; (32b4 <nrfx_gpiote_channel_get+0x24>)
    32a2:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    32a6:	0b5b      	lsrs	r3, r3, #13
    32a8:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    32aa:	4803      	ldr	r0, [pc, #12]	; (32b8 <nrfx_gpiote_channel_get+0x28>)
}
    32ac:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    32ae:	4803      	ldr	r0, [pc, #12]	; (32bc <nrfx_gpiote_channel_get+0x2c>)
    32b0:	e7fc      	b.n	32ac <nrfx_gpiote_channel_get+0x1c>
    32b2:	bf00      	nop
    32b4:	20000068 	.word	0x20000068
    32b8:	0bad0000 	.word	0x0bad0000
    32bc:	0bad0004 	.word	0x0bad0004

000032c0 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    32c0:	4b0f      	ldr	r3, [pc, #60]	; (3300 <nrfx_gpiote_init+0x40>)
    32c2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    32c6:	b10b      	cbz	r3, 32cc <nrfx_gpiote_init+0xc>
        return err_code;
    32c8:	480e      	ldr	r0, [pc, #56]	; (3304 <nrfx_gpiote_init+0x44>)
}
    32ca:	4770      	bx	lr
{
    32cc:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    32ce:	4c0e      	ldr	r4, [pc, #56]	; (3308 <nrfx_gpiote_init+0x48>)
    32d0:	2260      	movs	r2, #96	; 0x60
    32d2:	2100      	movs	r1, #0
    32d4:	4620      	mov	r0, r4
    32d6:	f002 f963 	bl	55a0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    32da:	2006      	movs	r0, #6
    32dc:	f002 f850 	bl	5380 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    32e0:	4b0a      	ldr	r3, [pc, #40]	; (330c <nrfx_gpiote_init+0x4c>)
    32e2:	2200      	movs	r2, #0
    32e4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    32e8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    32ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    32f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    32f4:	2301      	movs	r3, #1
    32f6:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    32fa:	6663      	str	r3, [r4, #100]	; 0x64
    return err_code;
    32fc:	4804      	ldr	r0, [pc, #16]	; (3310 <nrfx_gpiote_init+0x50>)
}
    32fe:	bd10      	pop	{r4, pc}
    3300:	20000068 	.word	0x20000068
    3304:	0bad0005 	.word	0x0bad0005
    3308:	20000078 	.word	0x20000078
    330c:	40006000 	.word	0x40006000
    3310:	0bad0000 	.word	0x0bad0000

00003314 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    3314:	4b03      	ldr	r3, [pc, #12]	; (3324 <nrfx_gpiote_is_init+0x10>)
    3316:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    331a:	3800      	subs	r0, #0
    331c:	bf18      	it	ne
    331e:	2001      	movne	r0, #1
    3320:	4770      	bx	lr
    3322:	bf00      	nop
    3324:	20000068 	.word	0x20000068

00003328 <nrfx_gpiote_channel_free>:
{
    3328:	b508      	push	{r3, lr}
    332a:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    332c:	4801      	ldr	r0, [pc, #4]	; (3334 <nrfx_gpiote_channel_free+0xc>)
    332e:	f7ff fb99 	bl	2a64 <nrfx_flag32_free>
}
    3332:	bd08      	pop	{r3, pc}
    3334:	200000d8 	.word	0x200000d8

00003338 <nrfx_gpiote_channel_alloc>:
{
    3338:	b508      	push	{r3, lr}
    333a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    333c:	4801      	ldr	r0, [pc, #4]	; (3344 <nrfx_gpiote_channel_alloc+0xc>)
    333e:	f7ff fb69 	bl	2a14 <nrfx_flag32_alloc>
}
    3342:	bd08      	pop	{r3, pc}
    3344:	200000d8 	.word	0x200000d8

00003348 <nrfx_gpiote_trigger_enable>:
{
    3348:	b538      	push	{r3, r4, r5, lr}
    334a:	4604      	mov	r4, r0
    334c:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    334e:	f7ff fccb 	bl	2ce8 <pin_in_use_by_te>
    3352:	b300      	cbz	r0, 3396 <nrfx_gpiote_trigger_enable+0x4e>
    3354:	4620      	mov	r0, r4
    3356:	f002 ff5f 	bl	6218 <pin_is_input>
    335a:	b1e0      	cbz	r0, 3396 <nrfx_gpiote_trigger_enable+0x4e>
        uint8_t ch = pin_te_get(pin);
    335c:	4620      	mov	r0, r4
    335e:	f7ff fce3 	bl	2d28 <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3362:	0083      	lsls	r3, r0, #2
    3364:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    3368:	b29b      	uxth	r3, r3
    336a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    336e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3372:	2200      	movs	r2, #0
    3374:	601a      	str	r2, [r3, #0]
    3376:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    3378:	4a0b      	ldr	r2, [pc, #44]	; (33a8 <nrfx_gpiote_trigger_enable+0x60>)
    337a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    337e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    3382:	f043 0301 	orr.w	r3, r3, #1
    3386:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    338a:	b15d      	cbz	r5, 33a4 <nrfx_gpiote_trigger_enable+0x5c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    338c:	2301      	movs	r3, #1
    338e:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    3390:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    3394:	e006      	b.n	33a4 <nrfx_gpiote_trigger_enable+0x5c>
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    3396:	4620      	mov	r0, r4
    3398:	f7ff fcfe 	bl	2d98 <get_initial_sense>
    339c:	4601      	mov	r1, r0
    339e:	4620      	mov	r0, r4
    33a0:	f002 ff1b 	bl	61da <nrf_gpio_cfg_sense_set>
}
    33a4:	bd38      	pop	{r3, r4, r5, pc}
    33a6:	bf00      	nop
    33a8:	40006000 	.word	0x40006000

000033ac <nrfx_gpiote_trigger_disable>:
{
    33ac:	b510      	push	{r4, lr}
    33ae:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    33b0:	f7ff fc9a 	bl	2ce8 <pin_in_use_by_te>
    33b4:	b1a0      	cbz	r0, 33e0 <nrfx_gpiote_trigger_disable+0x34>
    33b6:	4620      	mov	r0, r4
    33b8:	f002 ff2e 	bl	6218 <pin_is_input>
    33bc:	b180      	cbz	r0, 33e0 <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    33be:	4620      	mov	r0, r4
    33c0:	f7ff fcb2 	bl	2d28 <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    33c4:	2201      	movs	r2, #1
    33c6:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    33c8:	4b08      	ldr	r3, [pc, #32]	; (33ec <nrfx_gpiote_trigger_disable+0x40>)
    33ca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    33ce:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    33d2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    33d6:	f022 0203 	bic.w	r2, r2, #3
    33da:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    33de:	e003      	b.n	33e8 <nrfx_gpiote_trigger_disable+0x3c>
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    33e0:	2100      	movs	r1, #0
    33e2:	4620      	mov	r0, r4
    33e4:	f002 fef9 	bl	61da <nrf_gpio_cfg_sense_set>
}
    33e8:	bd10      	pop	{r4, pc}
    33ea:	bf00      	nop
    33ec:	40006000 	.word	0x40006000

000033f0 <nrfx_gpiote_pin_uninit>:
{
    33f0:	b510      	push	{r4, lr}
    33f2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    33f4:	f7ff fc6e 	bl	2cd4 <pin_in_use>
    33f8:	b908      	cbnz	r0, 33fe <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    33fa:	480c      	ldr	r0, [pc, #48]	; (342c <nrfx_gpiote_pin_uninit+0x3c>)
}
    33fc:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    33fe:	4620      	mov	r0, r4
    3400:	f7ff ffd4 	bl	33ac <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3404:	4620      	mov	r0, r4
    3406:	f7ff fd77 	bl	2ef8 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    340a:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    340e:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3410:	2c01      	cmp	r4, #1
    3412:	d008      	beq.n	3426 <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
    3414:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3418:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    341c:	2102      	movs	r1, #2
    341e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
    3422:	4803      	ldr	r0, [pc, #12]	; (3430 <nrfx_gpiote_pin_uninit+0x40>)
    3424:	e7ea      	b.n	33fc <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    3426:	4a03      	ldr	r2, [pc, #12]	; (3434 <nrfx_gpiote_pin_uninit+0x44>)
    3428:	e7f6      	b.n	3418 <nrfx_gpiote_pin_uninit+0x28>
    342a:	bf00      	nop
    342c:	0bad0004 	.word	0x0bad0004
    3430:	0bad0000 	.word	0x0bad0000
    3434:	50000300 	.word	0x50000300

00003438 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    3438:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    343a:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    343c:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3440:	2100      	movs	r1, #0
    uint32_t status = 0;
    3442:	460c      	mov	r4, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    3444:	e003      	b.n	344e <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    3446:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    3448:	3304      	adds	r3, #4
    344a:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    344c:	3101      	adds	r1, #1
    344e:	2907      	cmp	r1, #7
    3450:	d814      	bhi.n	347c <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3452:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    3456:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    345a:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    345c:	2a00      	cmp	r2, #0
    345e:	d0f2      	beq.n	3446 <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    3460:	4a0c      	ldr	r2, [pc, #48]	; (3494 <nrfx_gpiote_irq_handler+0x5c>)
    3462:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    3466:	4210      	tst	r0, r2
    3468:	d0ed      	beq.n	3446 <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    346a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    346e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3472:	2500      	movs	r5, #0
    3474:	6015      	str	r5, [r2, #0]
    3476:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    3478:	4304      	orrs	r4, r0
    347a:	e7e4      	b.n	3446 <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    347c:	4b05      	ldr	r3, [pc, #20]	; (3494 <nrfx_gpiote_irq_handler+0x5c>)
    347e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    3482:	b91b      	cbnz	r3, 348c <nrfx_gpiote_irq_handler+0x54>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    3484:	4620      	mov	r0, r4
    3486:	f7ff fddd 	bl	3044 <gpiote_evt_handle>
}
    348a:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    348c:	f7ff fd86 	bl	2f9c <port_event_handle>
    3490:	e7f8      	b.n	3484 <nrfx_gpiote_irq_handler+0x4c>
    3492:	bf00      	nop
    3494:	40006000 	.word	0x40006000

00003498 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3498:	b508      	push	{r3, lr}
    349a:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    349c:	4801      	ldr	r0, [pc, #4]	; (34a4 <nrfx_ppi_channel_alloc+0xc>)
    349e:	f7ff fab9 	bl	2a14 <nrfx_flag32_alloc>
}
    34a2:	bd08      	pop	{r3, pc}
    34a4:	200000e4 	.word	0x200000e4

000034a8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    34a8:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    34aa:	4c14      	ldr	r4, [pc, #80]	; (34fc <_DoInit+0x54>)
    34ac:	2303      	movs	r3, #3
    34ae:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    34b0:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    34b2:	4a13      	ldr	r2, [pc, #76]	; (3500 <_DoInit+0x58>)
    34b4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    34b6:	4b13      	ldr	r3, [pc, #76]	; (3504 <_DoInit+0x5c>)
    34b8:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    34ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
    34be:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    34c0:	2300      	movs	r3, #0
    34c2:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    34c4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    34c6:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    34c8:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    34ca:	4a0f      	ldr	r2, [pc, #60]	; (3508 <_DoInit+0x60>)
    34cc:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    34ce:	2210      	movs	r2, #16
    34d0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    34d2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    34d4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    34d6:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    34d8:	490c      	ldr	r1, [pc, #48]	; (350c <_DoInit+0x64>)
    34da:	1de0      	adds	r0, r4, #7
    34dc:	f001 fffa 	bl	54d4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    34e0:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    34e4:	490a      	ldr	r1, [pc, #40]	; (3510 <_DoInit+0x68>)
    34e6:	4620      	mov	r0, r4
    34e8:	f001 fff4 	bl	54d4 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    34ec:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    34f0:	2320      	movs	r3, #32
    34f2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    34f4:	f3bf 8f5f 	dmb	sy
}
    34f8:	bd10      	pop	{r4, pc}
    34fa:	bf00      	nop
    34fc:	20000d34 	.word	0x20000d34
    3500:	00006d08 	.word	0x00006d08
    3504:	20000934 	.word	0x20000934
    3508:	20000924 	.word	0x20000924
    350c:	00006d14 	.word	0x00006d14
    3510:	00006d18 	.word	0x00006d18

00003514 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    3514:	4b03      	ldr	r3, [pc, #12]	; (3524 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    3516:	e000      	b.n	351a <z_device_state_init+0x6>
		z_object_init(dev);
		++dev;
    3518:	3318      	adds	r3, #24
	while (dev < __device_end) {
    351a:	4a03      	ldr	r2, [pc, #12]	; (3528 <z_device_state_init+0x14>)
    351c:	4293      	cmp	r3, r2
    351e:	d3fb      	bcc.n	3518 <z_device_state_init+0x4>
	}
}
    3520:	4770      	bx	lr
    3522:	bf00      	nop
    3524:	00006780 	.word	0x00006780
    3528:	000067f8 	.word	0x000067f8

0000352c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
static void z_sys_init_run_level(enum init_level level)
{
    352c:	b570      	push	{r4, r5, r6, lr}
    352e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3530:	4b11      	ldr	r3, [pc, #68]	; (3578 <z_sys_init_run_level+0x4c>)
    3532:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3536:	e009      	b.n	354c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    3538:	4240      	negs	r0, r0
    353a:	e017      	b.n	356c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    353c:	68eb      	ldr	r3, [r5, #12]
    353e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    3540:	68ea      	ldr	r2, [r5, #12]
    3542:	7853      	ldrb	r3, [r2, #1]
    3544:	f043 0301 	orr.w	r3, r3, #1
    3548:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    354a:	3408      	adds	r4, #8
    354c:	1c73      	adds	r3, r6, #1
    354e:	4a0a      	ldr	r2, [pc, #40]	; (3578 <z_sys_init_run_level+0x4c>)
    3550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3554:	42a3      	cmp	r3, r4
    3556:	d90d      	bls.n	3574 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    3558:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    355a:	6823      	ldr	r3, [r4, #0]
    355c:	4628      	mov	r0, r5
    355e:	4798      	blx	r3
		if (dev != NULL) {
    3560:	2d00      	cmp	r5, #0
    3562:	d0f2      	beq.n	354a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    3564:	2800      	cmp	r0, #0
    3566:	d0eb      	beq.n	3540 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    3568:	2800      	cmp	r0, #0
    356a:	dbe5      	blt.n	3538 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    356c:	28ff      	cmp	r0, #255	; 0xff
    356e:	dde5      	ble.n	353c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    3570:	20ff      	movs	r0, #255	; 0xff
    3572:	e7e3      	b.n	353c <z_sys_init_run_level+0x10>
		}
	}
}
    3574:	bd70      	pop	{r4, r5, r6, pc}
    3576:	bf00      	nop
    3578:	00006d34 	.word	0x00006d34

0000357c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    357c:	b510      	push	{r4, lr}
    357e:	b086      	sub	sp, #24
	struct k_thread *thread = &z_idle_threads[i];
    3580:	23b0      	movs	r3, #176	; 0xb0
    3582:	4c10      	ldr	r4, [pc, #64]	; (35c4 <init_idle_thread+0x48>)
    3584:	fb03 4400 	mla	r4, r3, r0, r4
	k_thread_stack_t *stack = z_idle_stacks[i];
    3588:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    358c:	4b0e      	ldr	r3, [pc, #56]	; (35c8 <init_idle_thread+0x4c>)
    358e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
	z_setup_new_thread(thread, stack,
    3592:	4a0e      	ldr	r2, [pc, #56]	; (35cc <init_idle_thread+0x50>)
    3594:	9205      	str	r2, [sp, #20]
    3596:	2201      	movs	r2, #1
    3598:	9204      	str	r2, [sp, #16]
    359a:	220f      	movs	r2, #15
    359c:	9203      	str	r2, [sp, #12]
    359e:	2200      	movs	r2, #0
    35a0:	9202      	str	r2, [sp, #8]
    35a2:	9201      	str	r2, [sp, #4]
    35a4:	9300      	str	r3, [sp, #0]
    35a6:	4b0a      	ldr	r3, [pc, #40]	; (35d0 <init_idle_thread+0x54>)
    35a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    35ac:	4909      	ldr	r1, [pc, #36]	; (35d4 <init_idle_thread+0x58>)
    35ae:	eb01 11cc 	add.w	r1, r1, ip, lsl #7
    35b2:	4620      	mov	r0, r4
    35b4:	f000 f94c 	bl	3850 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    35b8:	7b63      	ldrb	r3, [r4, #13]
    35ba:	f023 0304 	bic.w	r3, r3, #4
    35be:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    35c0:	b006      	add	sp, #24
    35c2:	bd10      	pop	{r4, pc}
    35c4:	200001d0 	.word	0x200001d0
    35c8:	20000ddc 	.word	0x20000ddc
    35cc:	00006d24 	.word	0x00006d24
    35d0:	000039ad 	.word	0x000039ad
    35d4:	20001840 	.word	0x20001840

000035d8 <bg_thread_main>:
{
    35d8:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    35da:	4b0a      	ldr	r3, [pc, #40]	; (3604 <bg_thread_main+0x2c>)
    35dc:	2201      	movs	r2, #1
    35de:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    35e0:	2003      	movs	r0, #3
    35e2:	f7ff ffa3 	bl	352c <z_sys_init_run_level>
	boot_banner();
    35e6:	f001 f867 	bl	46b8 <boot_banner>
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    35ea:	2004      	movs	r0, #4
    35ec:	f7ff ff9e 	bl	352c <z_sys_init_run_level>
	z_init_static_threads();
    35f0:	f000 f992 	bl	3918 <z_init_static_threads>
	main();
    35f4:	f7fc ff0e 	bl	414 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    35f8:	4a03      	ldr	r2, [pc, #12]	; (3608 <bg_thread_main+0x30>)
    35fa:	7b13      	ldrb	r3, [r2, #12]
    35fc:	f023 0301 	bic.w	r3, r3, #1
    3600:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3602:	bd08      	pop	{r3, pc}
    3604:	20000ff5 	.word	0x20000ff5
    3608:	20000280 	.word	0x20000280

0000360c <switch_to_main_thread>:
	return stack_ptr;
}

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    360c:	b508      	push	{r3, lr}
    360e:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3610:	4a01      	ldr	r2, [pc, #4]	; (3618 <switch_to_main_thread+0xc>)
    3612:	4802      	ldr	r0, [pc, #8]	; (361c <switch_to_main_thread+0x10>)
    3614:	f7fd fea2 	bl	135c <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3618:	000035d9 	.word	0x000035d9
    361c:	20000280 	.word	0x20000280

00003620 <z_bss_zero>:
{
    3620:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    3622:	4803      	ldr	r0, [pc, #12]	; (3630 <z_bss_zero+0x10>)
    3624:	4a03      	ldr	r2, [pc, #12]	; (3634 <z_bss_zero+0x14>)
    3626:	1a12      	subs	r2, r2, r0
    3628:	2100      	movs	r1, #0
    362a:	f002 fe49 	bl	62c0 <z_early_memset>
}
    362e:	bd08      	pop	{r3, pc}
    3630:	200001b0 	.word	0x200001b0
    3634:	20000ff8 	.word	0x20000ff8

00003638 <z_init_cpu>:
{
    3638:	b510      	push	{r4, lr}
    363a:	4604      	mov	r4, r0
	init_idle_thread(id);
    363c:	f7ff ff9e 	bl	357c <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    3640:	23b0      	movs	r3, #176	; 0xb0
    3642:	490b      	ldr	r1, [pc, #44]	; (3670 <z_init_cpu+0x38>)
    3644:	fb03 1104 	mla	r1, r3, r4, r1
    3648:	4a0a      	ldr	r2, [pc, #40]	; (3674 <z_init_cpu+0x3c>)
    364a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    364e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3652:	60d9      	str	r1, [r3, #12]
	_kernel.cpus[id].id = id;
    3654:	751c      	strb	r4, [r3, #20]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3656:	eb04 1144 	add.w	r1, r4, r4, lsl #5
    365a:	4b07      	ldr	r3, [pc, #28]	; (3678 <z_init_cpu+0x40>)
    365c:	eb03 1381 	add.w	r3, r3, r1, lsl #6
    3660:	f503 6304 	add.w	r3, r3, #2112	; 0x840
	_kernel.cpus[id].irq_stack =
    3664:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3668:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    366c:	6053      	str	r3, [r2, #4]
}
    366e:	bd10      	pop	{r4, pc}
    3670:	200001d0 	.word	0x200001d0
    3674:	20000ddc 	.word	0x20000ddc
    3678:	20001000 	.word	0x20001000

0000367c <prepare_multithreading>:
{
    367c:	b570      	push	{r4, r5, r6, lr}
    367e:	b086      	sub	sp, #24
	z_sched_init();
    3680:	f000 fda6 	bl	41d0 <z_sched_init>
	_kernel.ready_q.cache = &z_main_thread;
    3684:	4d10      	ldr	r5, [pc, #64]	; (36c8 <prepare_multithreading+0x4c>)
    3686:	4b11      	ldr	r3, [pc, #68]	; (36cc <prepare_multithreading+0x50>)
    3688:	61dd      	str	r5, [r3, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    368a:	4b11      	ldr	r3, [pc, #68]	; (36d0 <prepare_multithreading+0x54>)
    368c:	9305      	str	r3, [sp, #20]
    368e:	2301      	movs	r3, #1
    3690:	9304      	str	r3, [sp, #16]
    3692:	2400      	movs	r4, #0
    3694:	9403      	str	r4, [sp, #12]
    3696:	9402      	str	r4, [sp, #8]
    3698:	9401      	str	r4, [sp, #4]
    369a:	9400      	str	r4, [sp, #0]
    369c:	4b0d      	ldr	r3, [pc, #52]	; (36d4 <prepare_multithreading+0x58>)
    369e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    36a2:	490d      	ldr	r1, [pc, #52]	; (36d8 <prepare_multithreading+0x5c>)
    36a4:	4628      	mov	r0, r5
    36a6:	f000 f8d3 	bl	3850 <z_setup_new_thread>
    36aa:	4606      	mov	r6, r0
    36ac:	7b6b      	ldrb	r3, [r5, #13]
    36ae:	f023 0304 	bic.w	r3, r3, #4
    36b2:	736b      	strb	r3, [r5, #13]
	z_ready_thread(&z_main_thread);
    36b4:	4628      	mov	r0, r5
    36b6:	f002 feef 	bl	6498 <z_ready_thread>
	z_init_cpu(0);
    36ba:	4620      	mov	r0, r4
    36bc:	f7ff ffbc 	bl	3638 <z_init_cpu>
}
    36c0:	4630      	mov	r0, r6
    36c2:	b006      	add	sp, #24
    36c4:	bd70      	pop	{r4, r5, r6, pc}
    36c6:	bf00      	nop
    36c8:	20000280 	.word	0x20000280
    36cc:	20000ddc 	.word	0x20000ddc
    36d0:	00006d2c 	.word	0x00006d2c
    36d4:	000035d9 	.word	0x000035d9
    36d8:	200019c0 	.word	0x200019c0

000036dc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    36dc:	b500      	push	{lr}
    36de:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    36e0:	2000      	movs	r0, #0
    36e2:	f7ff ff23 	bl	352c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    36e6:	4b1d      	ldr	r3, [pc, #116]	; (375c <z_cstart+0x80>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    36e8:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    36ec:	4c1c      	ldr	r4, [pc, #112]	; (3760 <z_cstart+0x84>)
    36ee:	6963      	ldr	r3, [r4, #20]
    36f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    36f4:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    36f6:	23e0      	movs	r3, #224	; 0xe0
    36f8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    36fc:	2500      	movs	r5, #0
    36fe:	77e5      	strb	r5, [r4, #31]
    3700:	7625      	strb	r5, [r4, #24]
    3702:	7665      	strb	r5, [r4, #25]
    3704:	76a5      	strb	r5, [r4, #26]
    3706:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    370a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    370c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3710:	6263      	str	r3, [r4, #36]	; 0x24
    3712:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3716:	f7fd ff95 	bl	1644 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    371a:	f7fd fd13 	bl	1144 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    371e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3722:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3724:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3726:	f7fe f8af 	bl	1888 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    372a:	f7fe f83f 	bl	17ac <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    372e:	2401      	movs	r4, #1
    3730:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    3734:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    3738:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    373a:	9527      	str	r5, [sp, #156]	; 0x9c
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    373c:	9529      	str	r5, [sp, #164]	; 0xa4

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    373e:	4b09      	ldr	r3, [pc, #36]	; (3764 <z_cstart+0x88>)
    3740:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    3744:	f7ff fee6 	bl	3514 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    3748:	4620      	mov	r0, r4
    374a:	f7ff feef 	bl	352c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    374e:	2002      	movs	r0, #2
    3750:	f7ff feec 	bl	352c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    3754:	f7ff ff92 	bl	367c <prepare_multithreading>
    3758:	f7ff ff58 	bl	360c <switch_to_main_thread>
    375c:	20001840 	.word	0x20001840
    3760:	e000ed00 	.word	0xe000ed00
    3764:	20000ddc 	.word	0x20000ddc

00003768 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    3768:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    376a:	4c06      	ldr	r4, [pc, #24]	; (3784 <init_mem_slab_module+0x1c>)
	int rc = 0;
    376c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    376e:	e000      	b.n	3772 <init_mem_slab_module+0xa>
    3770:	341c      	adds	r4, #28
    3772:	4b05      	ldr	r3, [pc, #20]	; (3788 <init_mem_slab_module+0x20>)
    3774:	429c      	cmp	r4, r3
    3776:	d204      	bcs.n	3782 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    3778:	4620      	mov	r0, r4
    377a:	f002 fda9 	bl	62d0 <create_free_list>
		if (rc < 0) {
    377e:	2800      	cmp	r0, #0
    3780:	daf6      	bge.n	3770 <init_mem_slab_module+0x8>
		z_object_init(slab);
	}

out:
	return rc;
}
    3782:	bd10      	pop	{r4, pc}
    3784:	2000015a 	.word	0x2000015a
    3788:	2000015a 	.word	0x2000015a

0000378c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    378c:	b530      	push	{r4, r5, lr}
    378e:	b083      	sub	sp, #12
    3790:	460d      	mov	r5, r1
	__asm__ volatile(
    3792:	f04f 0120 	mov.w	r1, #32
    3796:	f3ef 8c11 	mrs	ip, BASEPRI
    379a:	f381 8812 	msr	BASEPRI_MAX, r1
    379e:	f3bf 8f6f 	isb	sy
    37a2:	4661      	mov	r1, ip
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    37a4:	6944      	ldr	r4, [r0, #20]
    37a6:	b164      	cbz	r4, 37c2 <k_mem_slab_alloc+0x36>
		/* take a free block */
		*mem = slab->free_list;
    37a8:	602c      	str	r4, [r5, #0]
		slab->free_list = *(char **)(slab->free_list);
    37aa:	6823      	ldr	r3, [r4, #0]
    37ac:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    37ae:	6983      	ldr	r3, [r0, #24]
    37b0:	3301      	adds	r3, #1
    37b2:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    37b4:	2000      	movs	r0, #0
	__asm__ volatile(
    37b6:	f381 8811 	msr	BASEPRI, r1
    37ba:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    37be:	b003      	add	sp, #12
    37c0:	bd30      	pop	{r4, r5, pc}
    37c2:	f100 0e08 	add.w	lr, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    37c6:	ea53 0402 	orrs.w	r4, r3, r2
    37ca:	d104      	bne.n	37d6 <k_mem_slab_alloc+0x4a>
		*mem = NULL;
    37cc:	2300      	movs	r3, #0
    37ce:	602b      	str	r3, [r5, #0]
		result = -ENOMEM;
    37d0:	f06f 000b 	mvn.w	r0, #11
    37d4:	e7ef      	b.n	37b6 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    37d6:	9200      	str	r2, [sp, #0]
    37d8:	9301      	str	r3, [sp, #4]
    37da:	4602      	mov	r2, r0
    37dc:	4670      	mov	r0, lr
    37de:	f000 fbf1 	bl	3fc4 <z_pend_curr>
		if (result == 0) {
    37e2:	2800      	cmp	r0, #0
    37e4:	d1eb      	bne.n	37be <k_mem_slab_alloc+0x32>
			*mem = _current->base.swap_data;
    37e6:	4b02      	ldr	r3, [pc, #8]	; (37f0 <k_mem_slab_alloc+0x64>)
    37e8:	689b      	ldr	r3, [r3, #8]
    37ea:	695b      	ldr	r3, [r3, #20]
    37ec:	602b      	str	r3, [r5, #0]
		return result;
    37ee:	e7e6      	b.n	37be <k_mem_slab_alloc+0x32>
    37f0:	20000ddc 	.word	0x20000ddc

000037f4 <z_thread_monitor_exit>:
	__asm__ volatile(
    37f4:	f04f 0320 	mov.w	r3, #32
    37f8:	f3ef 8111 	mrs	r1, BASEPRI
    37fc:	f383 8812 	msr	BASEPRI_MAX, r3
    3800:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    3804:	4b0a      	ldr	r3, [pc, #40]	; (3830 <z_thread_monitor_exit+0x3c>)
    3806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3808:	4283      	cmp	r3, r0
    380a:	d104      	bne.n	3816 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    380c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    380e:	4b08      	ldr	r3, [pc, #32]	; (3830 <z_thread_monitor_exit+0x3c>)
    3810:	629a      	str	r2, [r3, #40]	; 0x28
    3812:	e007      	b.n	3824 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    3814:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    3816:	b113      	cbz	r3, 381e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    3818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    381a:	4282      	cmp	r2, r0
    381c:	d1fa      	bne.n	3814 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    381e:	b10b      	cbz	r3, 3824 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    3820:	6f02      	ldr	r2, [r0, #112]	; 0x70
    3822:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    3824:	f381 8811 	msr	BASEPRI, r1
    3828:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    382c:	4770      	bx	lr
    382e:	bf00      	nop
    3830:	20000ddc 	.word	0x20000ddc

00003834 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    3834:	b508      	push	{r3, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3836:	ea53 0102 	orrs.w	r1, r3, r2
    383a:	d102      	bne.n	3842 <schedule_new_thread+0xe>
	z_impl_k_thread_start(thread);
    383c:	f002 fdb5 	bl	63aa <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    3840:	bd08      	pop	{r3, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3842:	4902      	ldr	r1, [pc, #8]	; (384c <schedule_new_thread+0x18>)
    3844:	3018      	adds	r0, #24
    3846:	f000 fe2b 	bl	44a0 <z_add_timeout>
    384a:	e7f9      	b.n	3840 <schedule_new_thread+0xc>
    384c:	000064d1 	.word	0x000064d1

00003850 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3854:	b085      	sub	sp, #20
    3856:	4604      	mov	r4, r0
    3858:	460f      	mov	r7, r1
    385a:	4615      	mov	r5, r2
    385c:	461e      	mov	r6, r3
    385e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    3862:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    3866:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    386a:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    386e:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3872:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    3874:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    3876:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3878:	2204      	movs	r2, #4
    387a:	9911      	ldr	r1, [sp, #68]	; 0x44
    387c:	f002 fd99 	bl	63b2 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    3880:	462a      	mov	r2, r5
    3882:	4639      	mov	r1, r7
    3884:	4620      	mov	r0, r4
    3886:	f002 fd77 	bl	6378 <setup_thread_stack>
    388a:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    388c:	f8cd 8008 	str.w	r8, [sp, #8]
    3890:	f8cd 9004 	str.w	r9, [sp, #4]
    3894:	f8cd a000 	str.w	sl, [sp]
    3898:	4633      	mov	r3, r6
    389a:	4602      	mov	r2, r0
    389c:	4639      	mov	r1, r7
    389e:	4620      	mov	r0, r4
    38a0:	f7fd fd16 	bl	12d0 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    38a4:	2300      	movs	r3, #0
    38a6:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    38a8:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    38aa:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    38ae:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    38b2:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    38b6:	f04f 0320 	mov.w	r3, #32
    38ba:	f3ef 8211 	mrs	r2, BASEPRI
    38be:	f383 8812 	msr	BASEPRI_MAX, r3
    38c2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    38c6:	4b13      	ldr	r3, [pc, #76]	; (3914 <z_setup_new_thread+0xc4>)
    38c8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    38ca:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    38cc:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    38ce:	f382 8811 	msr	BASEPRI, r2
    38d2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    38d6:	f1bb 0f00 	cmp.w	fp, #0
    38da:	d013      	beq.n	3904 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    38dc:	221f      	movs	r2, #31
    38de:	4659      	mov	r1, fp
    38e0:	f104 0074 	add.w	r0, r4, #116	; 0x74
    38e4:	f001 fe00 	bl	54e8 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    38e8:	2300      	movs	r3, #0
    38ea:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    38ee:	4b09      	ldr	r3, [pc, #36]	; (3914 <z_setup_new_thread+0xc4>)
    38f0:	689b      	ldr	r3, [r3, #8]
    38f2:	b15b      	cbz	r3, 390c <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    38f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    38f8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    38fc:	4628      	mov	r0, r5
    38fe:	b005      	add	sp, #20
    3900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    3904:	2300      	movs	r3, #0
    3906:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    390a:	e7f0      	b.n	38ee <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    390c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    3910:	e7f4      	b.n	38fc <z_setup_new_thread+0xac>
    3912:	bf00      	nop
    3914:	20000ddc 	.word	0x20000ddc

00003918 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3918:	b530      	push	{r4, r5, lr}
    391a:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    391c:	4c21      	ldr	r4, [pc, #132]	; (39a4 <z_init_static_threads+0x8c>)
    391e:	e014      	b.n	394a <z_init_static_threads+0x32>
		z_setup_new_thread(
    3920:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3922:	9305      	str	r3, [sp, #20]
    3924:	6a23      	ldr	r3, [r4, #32]
    3926:	9304      	str	r3, [sp, #16]
    3928:	69e3      	ldr	r3, [r4, #28]
    392a:	9303      	str	r3, [sp, #12]
    392c:	69a3      	ldr	r3, [r4, #24]
    392e:	9302      	str	r3, [sp, #8]
    3930:	6963      	ldr	r3, [r4, #20]
    3932:	9301      	str	r3, [sp, #4]
    3934:	6923      	ldr	r3, [r4, #16]
    3936:	9300      	str	r3, [sp, #0]
    3938:	68e3      	ldr	r3, [r4, #12]
    393a:	68a2      	ldr	r2, [r4, #8]
    393c:	6861      	ldr	r1, [r4, #4]
    393e:	6820      	ldr	r0, [r4, #0]
    3940:	f7ff ff86 	bl	3850 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    3944:	6823      	ldr	r3, [r4, #0]
    3946:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3948:	3430      	adds	r4, #48	; 0x30
    394a:	4b17      	ldr	r3, [pc, #92]	; (39a8 <z_init_static_threads+0x90>)
    394c:	429c      	cmp	r4, r3
    394e:	d3e7      	bcc.n	3920 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3950:	f000 f9ea 	bl	3d28 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3954:	4c13      	ldr	r4, [pc, #76]	; (39a4 <z_init_static_threads+0x8c>)
    3956:	e000      	b.n	395a <z_init_static_threads+0x42>
    3958:	3430      	adds	r4, #48	; 0x30
    395a:	4b13      	ldr	r3, [pc, #76]	; (39a8 <z_init_static_threads+0x90>)
    395c:	429c      	cmp	r4, r3
    395e:	d21c      	bcs.n	399a <z_init_static_threads+0x82>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3960:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3962:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    3966:	d0f7      	beq.n	3958 <z_init_static_threads+0x40>
			schedule_new_thread(thread_data->init_thread,
    3968:	6825      	ldr	r5, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    396a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    396e:	17c1      	asrs	r1, r0, #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3970:	03c9      	lsls	r1, r1, #15
    3972:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    3976:	03c0      	lsls	r0, r0, #15
    3978:	f240 33e7 	movw	r3, #999	; 0x3e7
    397c:	18c0      	adds	r0, r0, r3
    397e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3982:	f04f 0300 	mov.w	r3, #0
    3986:	f141 0100 	adc.w	r1, r1, #0
    398a:	f7fc fbb9 	bl	100 <__aeabi_uldivmod>
    398e:	4602      	mov	r2, r0
    3990:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    3992:	4628      	mov	r0, r5
    3994:	f7ff ff4e 	bl	3834 <schedule_new_thread>
    3998:	e7de      	b.n	3958 <z_init_static_threads+0x40>
		}
	}
	k_sched_unlock();
    399a:	f000 fbc7 	bl	412c <k_sched_unlock>
}
    399e:	b007      	add	sp, #28
    39a0:	bd30      	pop	{r4, r5, pc}
    39a2:	bf00      	nop
    39a4:	00006978 	.word	0x00006978
    39a8:	00006978 	.word	0x00006978

000039ac <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    39ac:	b508      	push	{r3, lr}
    39ae:	e001      	b.n	39b4 <idle+0x8>
	arch_cpu_idle();
    39b0:	f7fd fbce 	bl	1150 <arch_cpu_idle>
	__asm__ volatile(
    39b4:	f04f 0220 	mov.w	r2, #32
    39b8:	f3ef 8311 	mrs	r3, BASEPRI
    39bc:	f382 8812 	msr	BASEPRI_MAX, r2
    39c0:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    39c4:	f002 fe5a 	bl	667c <z_get_next_timeout_expiry>
    39c8:	4b05      	ldr	r3, [pc, #20]	; (39e0 <idle+0x34>)
    39ca:	6198      	str	r0, [r3, #24]
	return !z_sys_post_kernel;
    39cc:	4b05      	ldr	r3, [pc, #20]	; (39e4 <idle+0x38>)
    39ce:	781b      	ldrb	r3, [r3, #0]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    39d0:	2b00      	cmp	r3, #0
    39d2:	d0ed      	beq.n	39b0 <idle+0x4>
    39d4:	f7fd f9d0 	bl	d78 <pm_system_suspend>
    39d8:	2800      	cmp	r0, #0
    39da:	d1eb      	bne.n	39b4 <idle+0x8>
    39dc:	e7e8      	b.n	39b0 <idle+0x4>
    39de:	bf00      	nop
    39e0:	20000ddc 	.word	0x20000ddc
    39e4:	20000ff5 	.word	0x20000ff5

000039e8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    39e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39ec:	b082      	sub	sp, #8
    39ee:	4604      	mov	r4, r0
    39f0:	461e      	mov	r6, r3
    39f2:	f04f 0320 	mov.w	r3, #32
    39f6:	f3ef 8511 	mrs	r5, BASEPRI
    39fa:	f383 8812 	msr	BASEPRI_MAX, r3
    39fe:	f3bf 8f6f 	isb	sy
    3a02:	462b      	mov	r3, r5

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3a04:	68c1      	ldr	r1, [r0, #12]
    3a06:	b999      	cbnz	r1, 3a30 <z_impl_k_mutex_lock+0x48>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    3a08:	2900      	cmp	r1, #0
    3a0a:	d151      	bne.n	3ab0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x18>
    3a0c:	4a36      	ldr	r2, [pc, #216]	; (3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>)
    3a0e:	6892      	ldr	r2, [r2, #8]
    3a10:	f992 200e 	ldrsb.w	r2, [r2, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3a14:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    3a16:	3101      	adds	r1, #1
    3a18:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    3a1a:	4a33      	ldr	r2, [pc, #204]	; (3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>)
    3a1c:	6892      	ldr	r2, [r2, #8]
    3a1e:	60a2      	str	r2, [r4, #8]
	__asm__ volatile(
    3a20:	f383 8811 	msr	BASEPRI, r3
    3a24:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    3a28:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    3a2a:	b002      	add	sp, #8
    3a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a30:	4617      	mov	r7, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3a32:	6880      	ldr	r0, [r0, #8]
    3a34:	4a2c      	ldr	r2, [pc, #176]	; (3ae8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x50>)
    3a36:	6892      	ldr	r2, [r2, #8]
    3a38:	4290      	cmp	r0, r2
    3a3a:	d0e5      	beq.n	3a08 <z_impl_k_mutex_lock+0x20>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3a3c:	ea56 0107 	orrs.w	r1, r6, r7
    3a40:	d038      	beq.n	3ab4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1c>
					    mutex->owner->base.prio);
    3a42:	f990 800e 	ldrsb.w	r8, [r0, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3a46:	4641      	mov	r1, r8
    3a48:	f992 000e 	ldrsb.w	r0, [r2, #14]
    3a4c:	f002 fcc2 	bl	63d4 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3a50:	4580      	cmp	r8, r0
    3a52:	dc36      	bgt.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
	bool resched = false;
    3a54:	f04f 0800 	mov.w	r8, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3a58:	9700      	str	r7, [sp, #0]
    3a5a:	9601      	str	r6, [sp, #4]
    3a5c:	4622      	mov	r2, r4
    3a5e:	4629      	mov	r1, r5
    3a60:	4822      	ldr	r0, [pc, #136]	; (3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>)
    3a62:	f000 faaf 	bl	3fc4 <z_pend_curr>
	if (got_mutex == 0) {
    3a66:	2800      	cmp	r0, #0
    3a68:	d0df      	beq.n	3a2a <z_impl_k_mutex_lock+0x42>
	__asm__ volatile(
    3a6a:	f04f 0320 	mov.w	r3, #32
    3a6e:	f3ef 8511 	mrs	r5, BASEPRI
    3a72:	f383 8812 	msr	BASEPRI_MAX, r3
    3a76:	f3bf 8f6f 	isb	sy
    3a7a:	462e      	mov	r6, r5
	if (likely(mutex->owner != NULL)) {
    3a7c:	68a3      	ldr	r3, [r4, #8]
    3a7e:	b343      	cbz	r3, 3ad2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3a>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3a80:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a82:	429c      	cmp	r4, r3
    3a84:	d023      	beq.n	3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3a86:	b313      	cbz	r3, 3ace <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x36>
    3a88:	6921      	ldr	r1, [r4, #16]
    3a8a:	f993 000e 	ldrsb.w	r0, [r3, #14]
    3a8e:	f002 fca1 	bl	63d4 <new_prio_for_inheritance>
    3a92:	4601      	mov	r1, r0
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    3a94:	4620      	mov	r0, r4
    3a96:	f002 fca8 	bl	63ea <adjust_owner_prio>
    3a9a:	b9e8      	cbnz	r0, 3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
    3a9c:	f1b8 0f00 	cmp.w	r8, #0
    3aa0:	d11a      	bne.n	3ad8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x40>
	__asm__ volatile(
    3aa2:	f386 8811 	msr	BASEPRI, r6
    3aa6:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    3aaa:	f06f 000a 	mvn.w	r0, #10
    3aae:	e7bc      	b.n	3a2a <z_impl_k_mutex_lock+0x42>
					_current->base.prio :
    3ab0:	6922      	ldr	r2, [r4, #16]
    3ab2:	e7af      	b.n	3a14 <z_impl_k_mutex_lock+0x2c>
    3ab4:	f385 8811 	msr	BASEPRI, r5
    3ab8:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    3abc:	f06f 000f 	mvn.w	r0, #15
    3ac0:	e7b3      	b.n	3a2a <z_impl_k_mutex_lock+0x42>
		resched = adjust_owner_prio(mutex, new_prio);
    3ac2:	4601      	mov	r1, r0
    3ac4:	4620      	mov	r0, r4
    3ac6:	f002 fc90 	bl	63ea <adjust_owner_prio>
    3aca:	4680      	mov	r8, r0
    3acc:	e7c4      	b.n	3a58 <z_impl_k_mutex_lock+0x70>
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3ace:	6921      	ldr	r1, [r4, #16]
    3ad0:	e7e0      	b.n	3a94 <z_impl_k_mutex_lock+0xac>
	if (resched) {
    3ad2:	f1b8 0f00 	cmp.w	r8, #0
    3ad6:	d0e4      	beq.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
		z_reschedule(&lock, key);
    3ad8:	4629      	mov	r1, r5
    3ada:	4804      	ldr	r0, [pc, #16]	; (3aec <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x54>)
    3adc:	f000 f90e 	bl	3cfc <z_reschedule>
	return -EAGAIN;
    3ae0:	f06f 000a 	mvn.w	r0, #10
    3ae4:	e7a1      	b.n	3a2a <z_impl_k_mutex_lock+0x42>
    3ae6:	bf00      	nop
    3ae8:	20000ddc 	.word	0x20000ddc
    3aec:	20000e08 	.word	0x20000e08

00003af0 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    3af0:	6883      	ldr	r3, [r0, #8]
    3af2:	b38b      	cbz	r3, 3b58 <z_impl_k_mutex_unlock+0x68>
{
    3af4:	b570      	push	{r4, r5, r6, lr}
    3af6:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3af8:	4a1a      	ldr	r2, [pc, #104]	; (3b64 <z_impl_k_mutex_unlock+0x74>)
    3afa:	6892      	ldr	r2, [r2, #8]
    3afc:	4293      	cmp	r3, r2
    3afe:	d12e      	bne.n	3b5e <z_impl_k_mutex_unlock+0x6e>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    3b00:	68c3      	ldr	r3, [r0, #12]
    3b02:	2b01      	cmp	r3, #1
    3b04:	d903      	bls.n	3b0e <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    3b06:	3b01      	subs	r3, #1
    3b08:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    3b0a:	2000      	movs	r0, #0
}
    3b0c:	bd70      	pop	{r4, r5, r6, pc}
	__asm__ volatile(
    3b0e:	f04f 0320 	mov.w	r3, #32
    3b12:	f3ef 8511 	mrs	r5, BASEPRI
    3b16:	f383 8812 	msr	BASEPRI_MAX, r3
    3b1a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3b1e:	6901      	ldr	r1, [r0, #16]
    3b20:	f002 fc63 	bl	63ea <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3b24:	4620      	mov	r0, r4
    3b26:	f002 fd4e 	bl	65c6 <z_unpend_first_thread>
	mutex->owner = new_owner;
    3b2a:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3b2c:	b168      	cbz	r0, 3b4a <z_impl_k_mutex_unlock+0x5a>
		mutex->owner_orig_prio = new_owner->base.prio;
    3b2e:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3b32:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3b34:	2400      	movs	r4, #0
    3b36:	f8c0 40ac 	str.w	r4, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    3b3a:	f002 fcad 	bl	6498 <z_ready_thread>
		z_reschedule(&lock, key);
    3b3e:	4629      	mov	r1, r5
    3b40:	4809      	ldr	r0, [pc, #36]	; (3b68 <z_impl_k_mutex_unlock+0x78>)
    3b42:	f000 f8db 	bl	3cfc <z_reschedule>
	return 0;
    3b46:	4620      	mov	r0, r4
    3b48:	e7e0      	b.n	3b0c <z_impl_k_mutex_unlock+0x1c>
		mutex->lock_count = 0U;
    3b4a:	2000      	movs	r0, #0
    3b4c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3b4e:	f385 8811 	msr	BASEPRI, r5
    3b52:	f3bf 8f6f 	isb	sy
    3b56:	e7d9      	b.n	3b0c <z_impl_k_mutex_unlock+0x1c>
		return -EINVAL;
    3b58:	f06f 0015 	mvn.w	r0, #21
}
    3b5c:	4770      	bx	lr
		return -EPERM;
    3b5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3b62:	e7d3      	b.n	3b0c <z_impl_k_mutex_unlock+0x1c>
    3b64:	20000ddc 	.word	0x20000ddc
    3b68:	20000e08 	.word	0x20000e08

00003b6c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3b6c:	b538      	push	{r3, r4, r5, lr}
    3b6e:	4604      	mov	r4, r0
	__asm__ volatile(
    3b70:	f04f 0320 	mov.w	r3, #32
    3b74:	f3ef 8511 	mrs	r5, BASEPRI
    3b78:	f383 8812 	msr	BASEPRI_MAX, r3
    3b7c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3b80:	f002 fd21 	bl	65c6 <z_unpend_first_thread>

	if (thread != NULL) {
    3b84:	b148      	cbz	r0, 3b9a <z_impl_k_sem_give+0x2e>
    3b86:	2200      	movs	r2, #0
    3b88:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3b8c:	f002 fc84 	bl	6498 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3b90:	4629      	mov	r1, r5
    3b92:	4807      	ldr	r0, [pc, #28]	; (3bb0 <z_impl_k_sem_give+0x44>)
    3b94:	f000 f8b2 	bl	3cfc <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3b98:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3b9a:	68a3      	ldr	r3, [r4, #8]
    3b9c:	68e2      	ldr	r2, [r4, #12]
    3b9e:	4293      	cmp	r3, r2
    3ba0:	d003      	beq.n	3baa <z_impl_k_sem_give+0x3e>
    3ba2:	2201      	movs	r2, #1
    3ba4:	4413      	add	r3, r2
    3ba6:	60a3      	str	r3, [r4, #8]
}
    3ba8:	e7f2      	b.n	3b90 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3baa:	2200      	movs	r2, #0
    3bac:	e7fa      	b.n	3ba4 <z_impl_k_sem_give+0x38>
    3bae:	bf00      	nop
    3bb0:	20000e08 	.word	0x20000e08

00003bb4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3bb4:	b510      	push	{r4, lr}
    3bb6:	b082      	sub	sp, #8
    3bb8:	f04f 0420 	mov.w	r4, #32
    3bbc:	f3ef 8111 	mrs	r1, BASEPRI
    3bc0:	f384 8812 	msr	BASEPRI_MAX, r4
    3bc4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3bc8:	6884      	ldr	r4, [r0, #8]
    3bca:	b144      	cbz	r4, 3bde <z_impl_k_sem_take+0x2a>
		sem->count--;
    3bcc:	3c01      	subs	r4, #1
    3bce:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    3bd0:	f381 8811 	msr	BASEPRI, r1
    3bd4:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3bd8:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3bda:	b002      	add	sp, #8
    3bdc:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3bde:	ea53 0402 	orrs.w	r4, r3, r2
    3be2:	d006      	beq.n	3bf2 <z_impl_k_sem_take+0x3e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3be4:	9200      	str	r2, [sp, #0]
    3be6:	9301      	str	r3, [sp, #4]
    3be8:	4602      	mov	r2, r0
    3bea:	4805      	ldr	r0, [pc, #20]	; (3c00 <z_impl_k_sem_take+0x4c>)
    3bec:	f000 f9ea 	bl	3fc4 <z_pend_curr>
	return ret;
    3bf0:	e7f3      	b.n	3bda <z_impl_k_sem_take+0x26>
    3bf2:	f381 8811 	msr	BASEPRI, r1
    3bf6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3bfa:	f06f 000f 	mvn.w	r0, #15
    3bfe:	e7ec      	b.n	3bda <z_impl_k_sem_take+0x26>
    3c00:	20000e08 	.word	0x20000e08

00003c04 <sliceable>:


static inline int is_preempt(struct k_thread *thread)
{
	/* explanation in kernel_struct.h */
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    3c04:	89c3      	ldrh	r3, [r0, #14]
static inline bool sliceable(struct k_thread *thread)
{
	bool ret = is_preempt(thread)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_idle_thread_object(thread);
    3c06:	2b7f      	cmp	r3, #127	; 0x7f
    3c08:	d80e      	bhi.n	3c28 <sliceable+0x24>
	uint8_t state = thread->base.thread_state;
    3c0a:	7b43      	ldrb	r3, [r0, #13]
		&& !z_is_thread_prevented_from_running(thread)
    3c0c:	f013 0f1f 	tst.w	r3, #31
    3c10:	d10c      	bne.n	3c2c <sliceable+0x28>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3c12:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3c16:	4b08      	ldr	r3, [pc, #32]	; (3c38 <sliceable+0x34>)
    3c18:	681b      	ldr	r3, [r3, #0]
    3c1a:	429a      	cmp	r2, r3
    3c1c:	db08      	blt.n	3c30 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    3c1e:	4b07      	ldr	r3, [pc, #28]	; (3c3c <sliceable+0x38>)
    3c20:	4298      	cmp	r0, r3
    3c22:	d007      	beq.n	3c34 <sliceable+0x30>
    3c24:	2001      	movs	r0, #1
    3c26:	4770      	bx	lr
    3c28:	2000      	movs	r0, #0
    3c2a:	4770      	bx	lr
    3c2c:	2000      	movs	r0, #0
    3c2e:	4770      	bx	lr
    3c30:	2000      	movs	r0, #0
    3c32:	4770      	bx	lr
    3c34:	2000      	movs	r0, #0
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    3c36:	4770      	bx	lr
    3c38:	20000e0c 	.word	0x20000e0c
    3c3c:	200001d0 	.word	0x200001d0

00003c40 <add_thread_timeout>:
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3c40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    3c44:	bf08      	it	eq
    3c46:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    3c4a:	d100      	bne.n	3c4e <add_thread_timeout+0xe>
    3c4c:	4770      	bx	lr
{
    3c4e:	b508      	push	{r3, lr}
    3c50:	4902      	ldr	r1, [pc, #8]	; (3c5c <add_thread_timeout+0x1c>)
    3c52:	3018      	adds	r0, #24
    3c54:	f000 fc24 	bl	44a0 <z_add_timeout>
		z_add_thread_timeout(thread, timeout);
	}
}
    3c58:	bd08      	pop	{r3, pc}
    3c5a:	bf00      	nop
    3c5c:	000064d1 	.word	0x000064d1

00003c60 <z_reset_time_slice>:
{
    3c60:	b510      	push	{r4, lr}
	int ret = slice_ticks;
    3c62:	4b07      	ldr	r3, [pc, #28]	; (3c80 <z_reset_time_slice+0x20>)
    3c64:	681c      	ldr	r4, [r3, #0]
	if (slice_time(curr) != 0) {
    3c66:	b904      	cbnz	r4, 3c6a <z_reset_time_slice+0xa>
}
    3c68:	bd10      	pop	{r4, pc}
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3c6a:	f7fe fc79 	bl	2560 <sys_clock_elapsed>
    3c6e:	4404      	add	r4, r0
    3c70:	4b04      	ldr	r3, [pc, #16]	; (3c84 <z_reset_time_slice+0x24>)
    3c72:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    3c74:	2100      	movs	r1, #0
    3c76:	4b02      	ldr	r3, [pc, #8]	; (3c80 <z_reset_time_slice+0x20>)
    3c78:	6818      	ldr	r0, [r3, #0]
    3c7a:	f002 fd16 	bl	66aa <z_set_timeout_expiry>
}
    3c7e:	e7f3      	b.n	3c68 <z_reset_time_slice+0x8>
    3c80:	20000e10 	.word	0x20000e10
    3c84:	20000ddc 	.word	0x20000ddc

00003c88 <k_sched_time_slice_set>:
{
    3c88:	b570      	push	{r4, r5, r6, lr}
    3c8a:	4604      	mov	r4, r0
    3c8c:	460e      	mov	r6, r1
	LOCKED(&sched_spinlock) {
    3c8e:	2300      	movs	r3, #0
	__asm__ volatile(
    3c90:	f04f 0220 	mov.w	r2, #32
    3c94:	f3ef 8511 	mrs	r5, BASEPRI
    3c98:	f382 8812 	msr	BASEPRI_MAX, r2
    3c9c:	f3bf 8f6f 	isb	sy
	z_spin_lock_set_owner(l);
#if defined(CONFIG_SPIN_LOCK_TIME_LIMIT) && (CONFIG_SPIN_LOCK_TIME_LIMIT != 0)
	l->lock_time = sys_clock_cycle_get_32();
#endif /* CONFIG_SPIN_LOCK_TIME_LIMIT */
#endif/* CONFIG_SPIN_VALIDATE */
	return k;
    3ca0:	e00e      	b.n	3cc0 <k_sched_time_slice_set+0x38>
			slice_ticks = MAX(2, slice_ticks);
    3ca2:	2802      	cmp	r0, #2
    3ca4:	bfb8      	it	lt
    3ca6:	2002      	movlt	r0, #2
    3ca8:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3caa:	4b11      	ldr	r3, [pc, #68]	; (3cf0 <k_sched_time_slice_set+0x68>)
    3cac:	601e      	str	r6, [r3, #0]
		z_reset_time_slice(_current);
    3cae:	4b11      	ldr	r3, [pc, #68]	; (3cf4 <k_sched_time_slice_set+0x6c>)
    3cb0:	6898      	ldr	r0, [r3, #8]
    3cb2:	f7ff ffd5 	bl	3c60 <z_reset_time_slice>
	__asm__ volatile(
    3cb6:	f385 8811 	msr	BASEPRI, r5
    3cba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    3cbe:	2301      	movs	r3, #1
    3cc0:	b9a3      	cbnz	r3, 3cec <k_sched_time_slice_set+0x64>
		_current_cpu->slice_ticks = 0;
    3cc2:	4b0c      	ldr	r3, [pc, #48]	; (3cf4 <k_sched_time_slice_set+0x6c>)
    3cc4:	2200      	movs	r2, #0
    3cc6:	611a      	str	r2, [r3, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    3cc8:	0c61      	lsrs	r1, r4, #17
    3cca:	03e0      	lsls	r0, r4, #15
    3ccc:	f240 33e7 	movw	r3, #999	; 0x3e7
    3cd0:	18c0      	adds	r0, r0, r3
    3cd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3cd6:	f04f 0300 	mov.w	r3, #0
    3cda:	f141 0100 	adc.w	r1, r1, #0
    3cde:	f7fc fa0f 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    3ce2:	4b05      	ldr	r3, [pc, #20]	; (3cf8 <k_sched_time_slice_set+0x70>)
    3ce4:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3ce6:	2c00      	cmp	r4, #0
    3ce8:	dcdb      	bgt.n	3ca2 <k_sched_time_slice_set+0x1a>
    3cea:	e7de      	b.n	3caa <k_sched_time_slice_set+0x22>
}
    3cec:	bd70      	pop	{r4, r5, r6, pc}
    3cee:	bf00      	nop
    3cf0:	20000e0c 	.word	0x20000e0c
    3cf4:	20000ddc 	.word	0x20000ddc
    3cf8:	20000e10 	.word	0x20000e10

00003cfc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    3cfc:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    3cfe:	460b      	mov	r3, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3d00:	b959      	cbnz	r1, 3d1a <z_reschedule+0x1e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3d02:	f3ef 8205 	mrs	r2, IPSR
    3d06:	b942      	cbnz	r2, 3d1a <z_reschedule+0x1e>
	new_thread = _kernel.ready_q.cache;
    3d08:	4a06      	ldr	r2, [pc, #24]	; (3d24 <z_reschedule+0x28>)
    3d0a:	69d0      	ldr	r0, [r2, #28]
	return new_thread != _current;
    3d0c:	6892      	ldr	r2, [r2, #8]
	if (resched(key.key) && need_swap()) {
    3d0e:	4290      	cmp	r0, r2
    3d10:	d003      	beq.n	3d1a <z_reschedule+0x1e>
	ret = arch_swap(key);
    3d12:	4608      	mov	r0, r1
    3d14:	f7fd fa84 	bl	1220 <arch_swap>
		z_swap(lock, key);
    3d18:	e003      	b.n	3d22 <z_reschedule+0x26>
    3d1a:	f383 8811 	msr	BASEPRI, r3
    3d1e:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    3d22:	bd08      	pop	{r3, pc}
    3d24:	20000ddc 	.word	0x20000ddc

00003d28 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    3d28:	2300      	movs	r3, #0
	__asm__ volatile(
    3d2a:	f04f 0220 	mov.w	r2, #32
    3d2e:	f3ef 8111 	mrs	r1, BASEPRI
    3d32:	f382 8812 	msr	BASEPRI_MAX, r2
    3d36:	f3bf 8f6f 	isb	sy
    3d3a:	e009      	b.n	3d50 <k_sched_lock+0x28>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3d3c:	4b06      	ldr	r3, [pc, #24]	; (3d58 <k_sched_lock+0x30>)
    3d3e:	689a      	ldr	r2, [r3, #8]
    3d40:	7bd3      	ldrb	r3, [r2, #15]
    3d42:	3b01      	subs	r3, #1
    3d44:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3d46:	f381 8811 	msr	BASEPRI, r1
    3d4a:	f3bf 8f6f 	isb	sy
    3d4e:	2301      	movs	r3, #1
    3d50:	2b00      	cmp	r3, #0
    3d52:	d0f3      	beq.n	3d3c <k_sched_lock+0x14>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    3d54:	4770      	bx	lr
    3d56:	bf00      	nop
    3d58:	20000ddc 	.word	0x20000ddc

00003d5c <update_cache>:
{
    3d5c:	b538      	push	{r3, r4, r5, lr}
    3d5e:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    3d60:	4810      	ldr	r0, [pc, #64]	; (3da4 <update_cache+0x48>)
    3d62:	f002 fb92 	bl	648a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3d66:	4605      	mov	r5, r0
    3d68:	b170      	cbz	r0, 3d88 <update_cache+0x2c>
	if (preempt_ok != 0) {
    3d6a:	b984      	cbnz	r4, 3d8e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    3d6c:	4b0e      	ldr	r3, [pc, #56]	; (3da8 <update_cache+0x4c>)
    3d6e:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    3d70:	7b5a      	ldrb	r2, [r3, #13]
    3d72:	f012 0f1f 	tst.w	r2, #31
    3d76:	d10a      	bne.n	3d8e <update_cache+0x32>
	return node->next != NULL;
    3d78:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3d7a:	b942      	cbnz	r2, 3d8e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    3d7c:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    3d7e:	2a7f      	cmp	r2, #127	; 0x7f
    3d80:	d905      	bls.n	3d8e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    3d82:	4a09      	ldr	r2, [pc, #36]	; (3da8 <update_cache+0x4c>)
    3d84:	61d3      	str	r3, [r2, #28]
    3d86:	e00b      	b.n	3da0 <update_cache+0x44>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3d88:	4b07      	ldr	r3, [pc, #28]	; (3da8 <update_cache+0x4c>)
    3d8a:	68dd      	ldr	r5, [r3, #12]
    3d8c:	e7ed      	b.n	3d6a <update_cache+0xe>
		if (thread != _current) {
    3d8e:	4b06      	ldr	r3, [pc, #24]	; (3da8 <update_cache+0x4c>)
    3d90:	689b      	ldr	r3, [r3, #8]
    3d92:	42ab      	cmp	r3, r5
    3d94:	d002      	beq.n	3d9c <update_cache+0x40>
			z_reset_time_slice(thread);
    3d96:	4628      	mov	r0, r5
    3d98:	f7ff ff62 	bl	3c60 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3d9c:	4b02      	ldr	r3, [pc, #8]	; (3da8 <update_cache+0x4c>)
    3d9e:	61dd      	str	r5, [r3, #28]
}
    3da0:	bd38      	pop	{r3, r4, r5, pc}
    3da2:	bf00      	nop
    3da4:	20000dfc 	.word	0x20000dfc
    3da8:	20000ddc 	.word	0x20000ddc

00003dac <move_thread_to_end_of_prio_q>:
{
    3dac:	b538      	push	{r3, r4, r5, lr}
    3dae:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    3db0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    3db2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3db6:	2b00      	cmp	r3, #0
    3db8:	db0a      	blt.n	3dd0 <move_thread_to_end_of_prio_q+0x24>
	thread->base.thread_state |= _THREAD_QUEUED;
    3dba:	7b6b      	ldrb	r3, [r5, #13]
    3dbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3dc0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    3dc2:	4b1b      	ldr	r3, [pc, #108]	; (3e30 <move_thread_to_end_of_prio_q+0x84>)
    3dc4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3dc8:	429c      	cmp	r4, r3
    3dca:	d110      	bne.n	3dee <move_thread_to_end_of_prio_q+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3dcc:	2400      	movs	r4, #0
    3dce:	e00e      	b.n	3dee <move_thread_to_end_of_prio_q+0x42>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3dd0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3dd4:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3dd6:	4601      	mov	r1, r0
    3dd8:	4816      	ldr	r0, [pc, #88]	; (3e34 <move_thread_to_end_of_prio_q+0x88>)
    3dda:	f002 fb40 	bl	645e <z_priq_dumb_remove>
}
    3dde:	e7ec      	b.n	3dba <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3de0:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    3de2:	606b      	str	r3, [r5, #4]
	node->next = successor;
    3de4:	602c      	str	r4, [r5, #0]
	prev->next = node;
    3de6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    3de8:	6065      	str	r5, [r4, #4]
}
    3dea:	e017      	b.n	3e1c <move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3dec:	2400      	movs	r4, #0
    3dee:	b16c      	cbz	r4, 3e0c <move_thread_to_end_of_prio_q+0x60>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3df0:	4621      	mov	r1, r4
    3df2:	4628      	mov	r0, r5
    3df4:	f002 fb0f 	bl	6416 <z_sched_prio_cmp>
    3df8:	2800      	cmp	r0, #0
    3dfa:	dcf1      	bgt.n	3de0 <move_thread_to_end_of_prio_q+0x34>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3dfc:	2c00      	cmp	r4, #0
    3dfe:	d0f6      	beq.n	3dee <move_thread_to_end_of_prio_q+0x42>
	return (node == list->tail) ? NULL : node->next;
    3e00:	4b0b      	ldr	r3, [pc, #44]	; (3e30 <move_thread_to_end_of_prio_q+0x84>)
    3e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3e04:	429c      	cmp	r4, r3
    3e06:	d0f1      	beq.n	3dec <move_thread_to_end_of_prio_q+0x40>
    3e08:	6824      	ldr	r4, [r4, #0]
    3e0a:	e7f0      	b.n	3dee <move_thread_to_end_of_prio_q+0x42>
	sys_dnode_t *const tail = list->tail;
    3e0c:	4b08      	ldr	r3, [pc, #32]	; (3e30 <move_thread_to_end_of_prio_q+0x84>)
    3e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    3e10:	f103 0120 	add.w	r1, r3, #32
    3e14:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    3e16:	606a      	str	r2, [r5, #4]
	tail->next = node;
    3e18:	6015      	str	r5, [r2, #0]
	list->tail = node;
    3e1a:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    3e1c:	4b04      	ldr	r3, [pc, #16]	; (3e30 <move_thread_to_end_of_prio_q+0x84>)
    3e1e:	6898      	ldr	r0, [r3, #8]
    3e20:	42a8      	cmp	r0, r5
    3e22:	bf14      	ite	ne
    3e24:	2000      	movne	r0, #0
    3e26:	2001      	moveq	r0, #1
    3e28:	f7ff ff98 	bl	3d5c <update_cache>
}
    3e2c:	bd38      	pop	{r3, r4, r5, pc}
    3e2e:	bf00      	nop
    3e30:	20000ddc 	.word	0x20000ddc
    3e34:	20000dfc 	.word	0x20000dfc

00003e38 <slice_expired_locked>:
{
    3e38:	b538      	push	{r3, r4, r5, lr}
    3e3a:	4604      	mov	r4, r0
	struct k_thread *curr = _current;
    3e3c:	4b07      	ldr	r3, [pc, #28]	; (3e5c <slice_expired_locked+0x24>)
    3e3e:	689d      	ldr	r5, [r3, #8]
	uint8_t state = thread->base.thread_state;
    3e40:	7b6b      	ldrb	r3, [r5, #13]
	if (!z_is_thread_prevented_from_running(curr)) {
    3e42:	f013 0f1f 	tst.w	r3, #31
    3e46:	d004      	beq.n	3e52 <slice_expired_locked+0x1a>
	z_reset_time_slice(curr);
    3e48:	4628      	mov	r0, r5
    3e4a:	f7ff ff09 	bl	3c60 <z_reset_time_slice>
}
    3e4e:	4620      	mov	r0, r4
    3e50:	bd38      	pop	{r3, r4, r5, pc}
		move_thread_to_end_of_prio_q(curr);
    3e52:	4628      	mov	r0, r5
    3e54:	f7ff ffaa 	bl	3dac <move_thread_to_end_of_prio_q>
    3e58:	e7f6      	b.n	3e48 <slice_expired_locked+0x10>
    3e5a:	bf00      	nop
    3e5c:	20000ddc 	.word	0x20000ddc

00003e60 <z_time_slice>:
{
    3e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e62:	4605      	mov	r5, r0
	__asm__ volatile(
    3e64:	f04f 0320 	mov.w	r3, #32
    3e68:	f3ef 8611 	mrs	r6, BASEPRI
    3e6c:	f383 8812 	msr	BASEPRI_MAX, r3
    3e70:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3e74:	4b15      	ldr	r3, [pc, #84]	; (3ecc <z_time_slice+0x6c>)
    3e76:	6898      	ldr	r0, [r3, #8]
    3e78:	4b15      	ldr	r3, [pc, #84]	; (3ed0 <z_time_slice+0x70>)
    3e7a:	681b      	ldr	r3, [r3, #0]
    3e7c:	4298      	cmp	r0, r3
    3e7e:	d011      	beq.n	3ea4 <z_time_slice+0x44>
    3e80:	4634      	mov	r4, r6
	pending_current = NULL;
    3e82:	4b13      	ldr	r3, [pc, #76]	; (3ed0 <z_time_slice+0x70>)
    3e84:	2200      	movs	r2, #0
    3e86:	601a      	str	r2, [r3, #0]
	int ret = slice_ticks;
    3e88:	4b12      	ldr	r3, [pc, #72]	; (3ed4 <z_time_slice+0x74>)
    3e8a:	681b      	ldr	r3, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
    3e8c:	b1b3      	cbz	r3, 3ebc <z_time_slice+0x5c>
    3e8e:	f7ff feb9 	bl	3c04 <sliceable>
    3e92:	b198      	cbz	r0, 3ebc <z_time_slice+0x5c>
		if (ticks >= _current_cpu->slice_ticks) {
    3e94:	4b0d      	ldr	r3, [pc, #52]	; (3ecc <z_time_slice+0x6c>)
    3e96:	691b      	ldr	r3, [r3, #16]
    3e98:	42ab      	cmp	r3, r5
    3e9a:	dd0a      	ble.n	3eb2 <z_time_slice+0x52>
			_current_cpu->slice_ticks -= ticks;
    3e9c:	1b5b      	subs	r3, r3, r5
    3e9e:	4a0b      	ldr	r2, [pc, #44]	; (3ecc <z_time_slice+0x6c>)
    3ea0:	6113      	str	r3, [r2, #16]
    3ea2:	e00e      	b.n	3ec2 <z_time_slice+0x62>
		z_reset_time_slice(_current);
    3ea4:	f7ff fedc 	bl	3c60 <z_reset_time_slice>
	__asm__ volatile(
    3ea8:	f386 8811 	msr	BASEPRI, r6
    3eac:	f3bf 8f6f 	isb	sy
		return;
    3eb0:	e00b      	b.n	3eca <z_time_slice+0x6a>
			key = slice_expired_locked(key);
    3eb2:	4630      	mov	r0, r6
    3eb4:	f7ff ffc0 	bl	3e38 <slice_expired_locked>
    3eb8:	4604      	mov	r4, r0
    3eba:	e002      	b.n	3ec2 <z_time_slice+0x62>
		_current_cpu->slice_ticks = 0;
    3ebc:	4b03      	ldr	r3, [pc, #12]	; (3ecc <z_time_slice+0x6c>)
    3ebe:	2200      	movs	r2, #0
    3ec0:	611a      	str	r2, [r3, #16]
    3ec2:	f384 8811 	msr	BASEPRI, r4
    3ec6:	f3bf 8f6f 	isb	sy
}
    3eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ecc:	20000ddc 	.word	0x20000ddc
    3ed0:	20000e08 	.word	0x20000e08
    3ed4:	20000e10 	.word	0x20000e10

00003ed8 <ready_thread>:
	return (thread->base.thread_state & state) != 0U;
    3ed8:	7b42      	ldrb	r2, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3eda:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3ede:	2b00      	cmp	r3, #0
    3ee0:	db33      	blt.n	3f4a <ready_thread+0x72>
{
    3ee2:	b570      	push	{r4, r5, r6, lr}
    3ee4:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3ee6:	f012 0f1f 	tst.w	r2, #31
    3eea:	d101      	bne.n	3ef0 <ready_thread+0x18>
	return node->next != NULL;
    3eec:	6986      	ldr	r6, [r0, #24]
    3eee:	b106      	cbz	r6, 3ef2 <ready_thread+0x1a>
}
    3ef0:	bd70      	pop	{r4, r5, r6, pc}
	thread->base.thread_state |= _THREAD_QUEUED;
    3ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3ef6:	7342      	strb	r2, [r0, #13]
	return list->head == list;
    3ef8:	4b14      	ldr	r3, [pc, #80]	; (3f4c <ready_thread+0x74>)
    3efa:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3efe:	429d      	cmp	r5, r3
    3f00:	d108      	bne.n	3f14 <ready_thread+0x3c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3f02:	4635      	mov	r5, r6
    3f04:	e006      	b.n	3f14 <ready_thread+0x3c>
	sys_dnode_t *const prev = successor->prev;
    3f06:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    3f08:	6063      	str	r3, [r4, #4]
	node->next = successor;
    3f0a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    3f0c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    3f0e:	606c      	str	r4, [r5, #4]
}
    3f10:	e017      	b.n	3f42 <ready_thread+0x6a>
    3f12:	4635      	mov	r5, r6
    3f14:	b16d      	cbz	r5, 3f32 <ready_thread+0x5a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    3f16:	4629      	mov	r1, r5
    3f18:	4620      	mov	r0, r4
    3f1a:	f002 fa7c 	bl	6416 <z_sched_prio_cmp>
    3f1e:	2800      	cmp	r0, #0
    3f20:	dcf1      	bgt.n	3f06 <ready_thread+0x2e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3f22:	2d00      	cmp	r5, #0
    3f24:	d0f6      	beq.n	3f14 <ready_thread+0x3c>
	return (node == list->tail) ? NULL : node->next;
    3f26:	4b09      	ldr	r3, [pc, #36]	; (3f4c <ready_thread+0x74>)
    3f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3f2a:	429d      	cmp	r5, r3
    3f2c:	d0f1      	beq.n	3f12 <ready_thread+0x3a>
    3f2e:	682d      	ldr	r5, [r5, #0]
    3f30:	e7f0      	b.n	3f14 <ready_thread+0x3c>
	sys_dnode_t *const tail = list->tail;
    3f32:	4b06      	ldr	r3, [pc, #24]	; (3f4c <ready_thread+0x74>)
    3f34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    3f36:	f103 0120 	add.w	r1, r3, #32
    3f3a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    3f3c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    3f3e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    3f40:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    3f42:	2000      	movs	r0, #0
    3f44:	f7ff ff0a 	bl	3d5c <update_cache>
}
    3f48:	e7d2      	b.n	3ef0 <ready_thread+0x18>
    3f4a:	4770      	bx	lr
    3f4c:	20000ddc 	.word	0x20000ddc

00003f50 <z_sched_start>:
{
    3f50:	b510      	push	{r4, lr}
	__asm__ volatile(
    3f52:	f04f 0320 	mov.w	r3, #32
    3f56:	f3ef 8411 	mrs	r4, BASEPRI
    3f5a:	f383 8812 	msr	BASEPRI_MAX, r3
    3f5e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3f62:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    3f64:	f013 0f04 	tst.w	r3, #4
    3f68:	d104      	bne.n	3f74 <z_sched_start+0x24>
	__asm__ volatile(
    3f6a:	f384 8811 	msr	BASEPRI, r4
    3f6e:	f3bf 8f6f 	isb	sy
}
    3f72:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3f74:	f023 0304 	bic.w	r3, r3, #4
    3f78:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    3f7a:	f7ff ffad 	bl	3ed8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3f7e:	4621      	mov	r1, r4
    3f80:	4801      	ldr	r0, [pc, #4]	; (3f88 <z_sched_start+0x38>)
    3f82:	f7ff febb 	bl	3cfc <z_reschedule>
    3f86:	e7f4      	b.n	3f72 <z_sched_start+0x22>
    3f88:	20000e14 	.word	0x20000e14

00003f8c <unready_thread>:
{
    3f8c:	b510      	push	{r4, lr}
    3f8e:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    3f90:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    3f92:	f990 300d 	ldrsb.w	r3, [r0, #13]
    3f96:	2b00      	cmp	r3, #0
    3f98:	db08      	blt.n	3fac <unready_thread+0x20>
	update_cache(thread == _current);
    3f9a:	4b08      	ldr	r3, [pc, #32]	; (3fbc <unready_thread+0x30>)
    3f9c:	6898      	ldr	r0, [r3, #8]
    3f9e:	42a0      	cmp	r0, r4
    3fa0:	bf14      	ite	ne
    3fa2:	2000      	movne	r0, #0
    3fa4:	2001      	moveq	r0, #1
    3fa6:	f7ff fed9 	bl	3d5c <update_cache>
}
    3faa:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3fac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    3fb0:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    3fb2:	4601      	mov	r1, r0
    3fb4:	4802      	ldr	r0, [pc, #8]	; (3fc0 <unready_thread+0x34>)
    3fb6:	f002 fa52 	bl	645e <z_priq_dumb_remove>
}
    3fba:	e7ee      	b.n	3f9a <unready_thread+0xe>
    3fbc:	20000ddc 	.word	0x20000ddc
    3fc0:	20000dfc 	.word	0x20000dfc

00003fc4 <z_pend_curr>:
{
    3fc4:	b510      	push	{r4, lr}
    3fc6:	460c      	mov	r4, r1
    3fc8:	4611      	mov	r1, r2
	pending_current = _current;
    3fca:	480a      	ldr	r0, [pc, #40]	; (3ff4 <z_pend_curr+0x30>)
    3fcc:	6882      	ldr	r2, [r0, #8]
    3fce:	4b0a      	ldr	r3, [pc, #40]	; (3ff8 <z_pend_curr+0x34>)
    3fd0:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    3fd2:	f04f 0220 	mov.w	r2, #32
    3fd6:	f3ef 8311 	mrs	r3, BASEPRI
    3fda:	f382 8812 	msr	BASEPRI_MAX, r2
    3fde:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    3fe2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3fe6:	6880      	ldr	r0, [r0, #8]
    3fe8:	f002 fae1 	bl	65ae <pend_locked>
    3fec:	4620      	mov	r0, r4
    3fee:	f7fd f917 	bl	1220 <arch_swap>
}
    3ff2:	bd10      	pop	{r4, pc}
    3ff4:	20000ddc 	.word	0x20000ddc
    3ff8:	20000e08 	.word	0x20000e08

00003ffc <z_set_prio>:
{
    3ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4000:	4605      	mov	r5, r0
    4002:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    4004:	2300      	movs	r3, #0
    4006:	f04f 0220 	mov.w	r2, #32
    400a:	f3ef 8611 	mrs	r6, BASEPRI
    400e:	f382 8812 	msr	BASEPRI_MAX, r2
    4012:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    4016:	4618      	mov	r0, r3
    4018:	e029      	b.n	406e <z_set_prio+0x72>
	sys_dnode_t *const prev = successor->prev;
    401a:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    401c:	606b      	str	r3, [r5, #4]
	node->next = successor;
    401e:	602c      	str	r4, [r5, #0]
	prev->next = node;
    4020:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    4022:	6065      	str	r5, [r4, #4]
}
    4024:	e017      	b.n	4056 <z_set_prio+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4026:	4644      	mov	r4, r8
    4028:	b16c      	cbz	r4, 4046 <z_set_prio+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    402a:	4621      	mov	r1, r4
    402c:	4628      	mov	r0, r5
    402e:	f002 f9f2 	bl	6416 <z_sched_prio_cmp>
    4032:	2800      	cmp	r0, #0
    4034:	dcf1      	bgt.n	401a <z_set_prio+0x1e>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4036:	2c00      	cmp	r4, #0
    4038:	d0f6      	beq.n	4028 <z_set_prio+0x2c>
	return (node == list->tail) ? NULL : node->next;
    403a:	4b1d      	ldr	r3, [pc, #116]	; (40b0 <z_set_prio+0xb4>)
    403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    403e:	429c      	cmp	r4, r3
    4040:	d0f1      	beq.n	4026 <z_set_prio+0x2a>
    4042:	6824      	ldr	r4, [r4, #0]
    4044:	e7f0      	b.n	4028 <z_set_prio+0x2c>
	sys_dnode_t *const tail = list->tail;
    4046:	4b1a      	ldr	r3, [pc, #104]	; (40b0 <z_set_prio+0xb4>)
    4048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    404a:	f103 0120 	add.w	r1, r3, #32
    404e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    4050:	606a      	str	r2, [r5, #4]
	tail->next = node;
    4052:	6015      	str	r5, [r2, #0]
	list->tail = node;
    4054:	625d      	str	r5, [r3, #36]	; 0x24
			update_cache(1);
    4056:	2001      	movs	r0, #1
    4058:	f7ff fe80 	bl	3d5c <update_cache>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    405c:	2001      	movs	r0, #1
    405e:	e001      	b.n	4064 <z_set_prio+0x68>
			thread->base.prio = prio;
    4060:	73af      	strb	r7, [r5, #14]
    4062:	2000      	movs	r0, #0
	__asm__ volatile(
    4064:	f386 8811 	msr	BASEPRI, r6
    4068:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    406c:	2301      	movs	r3, #1
    406e:	b9e3      	cbnz	r3, 40aa <z_set_prio+0xae>
	uint8_t state = thread->base.thread_state;
    4070:	7b6b      	ldrb	r3, [r5, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4072:	f013 0f1f 	tst.w	r3, #31
    4076:	d1f3      	bne.n	4060 <z_set_prio+0x64>
	return node->next != NULL;
    4078:	f8d5 8018 	ldr.w	r8, [r5, #24]
    407c:	f1b8 0f00 	cmp.w	r8, #0
    4080:	d1ee      	bne.n	4060 <z_set_prio+0x64>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4086:	736b      	strb	r3, [r5, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4088:	f8df 9028 	ldr.w	r9, [pc, #40]	; 40b4 <z_set_prio+0xb8>
    408c:	4629      	mov	r1, r5
    408e:	4648      	mov	r0, r9
    4090:	f002 f9e5 	bl	645e <z_priq_dumb_remove>
				thread->base.prio = prio;
    4094:	73af      	strb	r7, [r5, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    4096:	7b6b      	ldrb	r3, [r5, #13]
    4098:	f063 037f 	orn	r3, r3, #127	; 0x7f
    409c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    409e:	f8d9 4000 	ldr.w	r4, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    40a2:	454c      	cmp	r4, r9
    40a4:	d1c0      	bne.n	4028 <z_set_prio+0x2c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    40a6:	4644      	mov	r4, r8
    40a8:	e7be      	b.n	4028 <z_set_prio+0x2c>
}
    40aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    40ae:	bf00      	nop
    40b0:	20000ddc 	.word	0x20000ddc
    40b4:	20000dfc 	.word	0x20000dfc

000040b8 <z_impl_k_thread_suspend>:
{
    40b8:	b538      	push	{r3, r4, r5, lr}
    40ba:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    40bc:	3018      	adds	r0, #24
    40be:	f002 fabf 	bl	6640 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    40c2:	2300      	movs	r3, #0
	__asm__ volatile(
    40c4:	f04f 0220 	mov.w	r2, #32
    40c8:	f3ef 8511 	mrs	r5, BASEPRI
    40cc:	f382 8812 	msr	BASEPRI_MAX, r2
    40d0:	f3bf 8f6f 	isb	sy
    40d4:	e010      	b.n	40f8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    40d6:	7b63      	ldrb	r3, [r4, #13]
    40d8:	f043 0310 	orr.w	r3, r3, #16
    40dc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    40de:	4b11      	ldr	r3, [pc, #68]	; (4124 <z_impl_k_thread_suspend+0x6c>)
    40e0:	6898      	ldr	r0, [r3, #8]
    40e2:	42a0      	cmp	r0, r4
    40e4:	bf14      	ite	ne
    40e6:	2000      	movne	r0, #0
    40e8:	2001      	moveq	r0, #1
    40ea:	f7ff fe37 	bl	3d5c <update_cache>
	__asm__ volatile(
    40ee:	f385 8811 	msr	BASEPRI, r5
    40f2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    40f6:	2301      	movs	r3, #1
    40f8:	b963      	cbnz	r3, 4114 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    40fa:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    40fc:	f994 300d 	ldrsb.w	r3, [r4, #13]
    4100:	2b00      	cmp	r3, #0
    4102:	dae8      	bge.n	40d6 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4104:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4108:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    410a:	4621      	mov	r1, r4
    410c:	4806      	ldr	r0, [pc, #24]	; (4128 <z_impl_k_thread_suspend+0x70>)
    410e:	f002 f9a6 	bl	645e <z_priq_dumb_remove>
}
    4112:	e7e0      	b.n	40d6 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    4114:	4b03      	ldr	r3, [pc, #12]	; (4124 <z_impl_k_thread_suspend+0x6c>)
    4116:	689b      	ldr	r3, [r3, #8]
    4118:	42a3      	cmp	r3, r4
    411a:	d000      	beq.n	411e <z_impl_k_thread_suspend+0x66>
}
    411c:	bd38      	pop	{r3, r4, r5, pc}
		z_reschedule_unlocked();
    411e:	f002 f992 	bl	6446 <z_reschedule_unlocked>
}
    4122:	e7fb      	b.n	411c <z_impl_k_thread_suspend+0x64>
    4124:	20000ddc 	.word	0x20000ddc
    4128:	20000dfc 	.word	0x20000dfc

0000412c <k_sched_unlock>:

void k_sched_unlock(void)
{
    412c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    412e:	2300      	movs	r3, #0
	__asm__ volatile(
    4130:	f04f 0220 	mov.w	r2, #32
    4134:	f3ef 8411 	mrs	r4, BASEPRI
    4138:	f382 8812 	msr	BASEPRI_MAX, r2
    413c:	f3bf 8f6f 	isb	sy
    4140:	e00c      	b.n	415c <k_sched_unlock+0x30>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    4142:	4b09      	ldr	r3, [pc, #36]	; (4168 <k_sched_unlock+0x3c>)
    4144:	689a      	ldr	r2, [r3, #8]
    4146:	7bd3      	ldrb	r3, [r2, #15]
    4148:	3301      	adds	r3, #1
    414a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    414c:	2000      	movs	r0, #0
    414e:	f7ff fe05 	bl	3d5c <update_cache>
	__asm__ volatile(
    4152:	f384 8811 	msr	BASEPRI, r4
    4156:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    415a:	2301      	movs	r3, #1
    415c:	2b00      	cmp	r3, #0
    415e:	d0f0      	beq.n	4142 <k_sched_unlock+0x16>
	LOG_DBG("scheduler unlocked (%p:%d)",
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
    4160:	f002 f971 	bl	6446 <z_reschedule_unlocked>
}
    4164:	bd10      	pop	{r4, pc}
    4166:	bf00      	nop
    4168:	20000ddc 	.word	0x20000ddc

0000416c <end_thread>:
static void end_thread(struct k_thread *thread)
{
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    416c:	7b43      	ldrb	r3, [r0, #13]
    416e:	f013 0f08 	tst.w	r3, #8
    4172:	d12a      	bne.n	41ca <end_thread+0x5e>
{
    4174:	b510      	push	{r4, lr}
    4176:	4604      	mov	r4, r0
		thread->base.thread_state |= _THREAD_DEAD;
    4178:	f043 0208 	orr.w	r2, r3, #8
    417c:	7342      	strb	r2, [r0, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    417e:	f023 0220 	bic.w	r2, r3, #32
    4182:	f042 0208 	orr.w	r2, r2, #8
    4186:	7342      	strb	r2, [r0, #13]
		if (z_is_thread_queued(thread)) {
    4188:	f012 0f80 	tst.w	r2, #128	; 0x80
    418c:	d113      	bne.n	41b6 <end_thread+0x4a>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    418e:	68a3      	ldr	r3, [r4, #8]
    4190:	b113      	cbz	r3, 4198 <end_thread+0x2c>
			unpend_thread_no_timeout(thread);
    4192:	4620      	mov	r0, r4
    4194:	f002 f96b 	bl	646e <unpend_thread_no_timeout>
    4198:	f104 0018 	add.w	r0, r4, #24
    419c:	f002 fa50 	bl	6640 <z_abort_timeout>
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    41a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    41a4:	f002 f9c3 	bl	652e <unpend_all>
		update_cache(1);
    41a8:	2001      	movs	r0, #1
    41aa:	f7ff fdd7 	bl	3d5c <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    41ae:	4620      	mov	r0, r4
    41b0:	f7ff fb20 	bl	37f4 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    41b4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    41b6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    41ba:	f043 0308 	orr.w	r3, r3, #8
    41be:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    41c0:	4601      	mov	r1, r0
    41c2:	4802      	ldr	r0, [pc, #8]	; (41cc <end_thread+0x60>)
    41c4:	f002 f94b 	bl	645e <z_priq_dumb_remove>
}
    41c8:	e7e1      	b.n	418e <end_thread+0x22>
    41ca:	4770      	bx	lr
    41cc:	20000dfc 	.word	0x20000dfc

000041d0 <z_sched_init>:
{
    41d0:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    41d2:	4804      	ldr	r0, [pc, #16]	; (41e4 <z_sched_init+0x14>)
    41d4:	f002 fa19 	bl	660a <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    41d8:	2100      	movs	r1, #0
    41da:	4608      	mov	r0, r1
    41dc:	f7ff fd54 	bl	3c88 <k_sched_time_slice_set>
}
    41e0:	bd08      	pop	{r3, pc}
    41e2:	bf00      	nop
    41e4:	20000df8 	.word	0x20000df8

000041e8 <z_impl_k_yield>:
{
    41e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    41ea:	f04f 0320 	mov.w	r3, #32
    41ee:	f3ef 8611 	mrs	r6, BASEPRI
    41f2:	f383 8812 	msr	BASEPRI_MAX, r3
    41f6:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    41fa:	4c1d      	ldr	r4, [pc, #116]	; (4270 <z_impl_k_yield+0x88>)
    41fc:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    41fe:	7b4b      	ldrb	r3, [r1, #13]
    4200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4204:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    4206:	f104 0720 	add.w	r7, r4, #32
    420a:	4638      	mov	r0, r7
    420c:	f002 f927 	bl	645e <z_priq_dumb_remove>
	queue_thread(_current);
    4210:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4212:	7b6b      	ldrb	r3, [r5, #13]
    4214:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4218:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    421a:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    421c:	42bc      	cmp	r4, r7
    421e:	d108      	bne.n	4232 <z_impl_k_yield+0x4a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4220:	2400      	movs	r4, #0
    4222:	e006      	b.n	4232 <z_impl_k_yield+0x4a>
	sys_dnode_t *const prev = successor->prev;
    4224:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    4226:	606b      	str	r3, [r5, #4]
	node->next = successor;
    4228:	602c      	str	r4, [r5, #0]
	prev->next = node;
    422a:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    422c:	6065      	str	r5, [r4, #4]
}
    422e:	e017      	b.n	4260 <z_impl_k_yield+0x78>
    4230:	2400      	movs	r4, #0
    4232:	b16c      	cbz	r4, 4250 <z_impl_k_yield+0x68>
		if (z_sched_prio_cmp(thread, t) > 0) {
    4234:	4621      	mov	r1, r4
    4236:	4628      	mov	r0, r5
    4238:	f002 f8ed 	bl	6416 <z_sched_prio_cmp>
    423c:	2800      	cmp	r0, #0
    423e:	dcf1      	bgt.n	4224 <z_impl_k_yield+0x3c>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4240:	2c00      	cmp	r4, #0
    4242:	d0f6      	beq.n	4232 <z_impl_k_yield+0x4a>
	return (node == list->tail) ? NULL : node->next;
    4244:	4b0a      	ldr	r3, [pc, #40]	; (4270 <z_impl_k_yield+0x88>)
    4246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4248:	429c      	cmp	r4, r3
    424a:	d0f1      	beq.n	4230 <z_impl_k_yield+0x48>
    424c:	6824      	ldr	r4, [r4, #0]
    424e:	e7f0      	b.n	4232 <z_impl_k_yield+0x4a>
	sys_dnode_t *const tail = list->tail;
    4250:	4b07      	ldr	r3, [pc, #28]	; (4270 <z_impl_k_yield+0x88>)
    4252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    4254:	f103 0120 	add.w	r1, r3, #32
    4258:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    425a:	606a      	str	r2, [r5, #4]
	tail->next = node;
    425c:	6015      	str	r5, [r2, #0]
	list->tail = node;
    425e:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    4260:	2001      	movs	r0, #1
    4262:	f7ff fd7b 	bl	3d5c <update_cache>
    4266:	4630      	mov	r0, r6
    4268:	f7fc ffda 	bl	1220 <arch_swap>
}
    426c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    426e:	bf00      	nop
    4270:	20000ddc 	.word	0x20000ddc

00004274 <z_tick_sleep>:
{
    4274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (ticks == 0) {
    4278:	ea50 0301 	orrs.w	r3, r0, r1
    427c:	d038      	beq.n	42f0 <z_tick_sleep+0x7c>
    427e:	4604      	mov	r4, r0
    4280:	460e      	mov	r6, r1
	if (Z_TICK_ABS(ticks) <= 0) {
    4282:	f06f 0301 	mvn.w	r3, #1
    4286:	1a1b      	subs	r3, r3, r0
    4288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    428c:	eb62 0201 	sbc.w	r2, r2, r1
    4290:	2b01      	cmp	r3, #1
    4292:	f172 0200 	sbcs.w	r2, r2, #0
    4296:	db2f      	blt.n	42f8 <z_tick_sleep+0x84>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    4298:	f06f 0501 	mvn.w	r5, #1
    429c:	1a2d      	subs	r5, r5, r0
    429e:	f04f 0320 	mov.w	r3, #32
    42a2:	f3ef 8811 	mrs	r8, BASEPRI
    42a6:	f383 8812 	msr	BASEPRI_MAX, r3
    42aa:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    42ae:	4f14      	ldr	r7, [pc, #80]	; (4300 <z_tick_sleep+0x8c>)
    42b0:	68b8      	ldr	r0, [r7, #8]
    42b2:	4b14      	ldr	r3, [pc, #80]	; (4304 <z_tick_sleep+0x90>)
    42b4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    42b6:	f7ff fe69 	bl	3f8c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    42ba:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    42bc:	4622      	mov	r2, r4
    42be:	4633      	mov	r3, r6
    42c0:	4911      	ldr	r1, [pc, #68]	; (4308 <z_tick_sleep+0x94>)
    42c2:	3018      	adds	r0, #24
    42c4:	f000 f8ec 	bl	44a0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    42c8:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    42ca:	7b53      	ldrb	r3, [r2, #13]
    42cc:	f043 0310 	orr.w	r3, r3, #16
    42d0:	7353      	strb	r3, [r2, #13]
    42d2:	4640      	mov	r0, r8
    42d4:	f7fc ffa4 	bl	1220 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    42d8:	f002 fa12 	bl	6700 <sys_clock_tick_get_32>
    42dc:	1a28      	subs	r0, r5, r0
    42de:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    42e2:	2801      	cmp	r0, #1
    42e4:	f173 0300 	sbcs.w	r3, r3, #0
    42e8:	da00      	bge.n	42ec <z_tick_sleep+0x78>
	return 0;
    42ea:	2000      	movs	r0, #0
}
    42ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    42f0:	f7ff ff7a 	bl	41e8 <z_impl_k_yield>
		return 0;
    42f4:	2000      	movs	r0, #0
    42f6:	e7f9      	b.n	42ec <z_tick_sleep+0x78>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    42f8:	f002 fa02 	bl	6700 <sys_clock_tick_get_32>
    42fc:	1905      	adds	r5, r0, r4
    42fe:	e7ce      	b.n	429e <z_tick_sleep+0x2a>
    4300:	20000ddc 	.word	0x20000ddc
    4304:	20000e08 	.word	0x20000e08
    4308:	000064d1 	.word	0x000064d1

0000430c <z_impl_k_sleep>:
{
    430c:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    430e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4312:	bf08      	it	eq
    4314:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
    4318:	d018      	beq.n	434c <z_impl_k_sleep+0x40>
	ticks = z_tick_sleep(ticks);
    431a:	f7ff ffab 	bl	4274 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    431e:	17c2      	asrs	r2, r0, #31
			return ((t * to_hz + off) / from_hz);
    4320:	0151      	lsls	r1, r2, #5
    4322:	ea41 61d0 	orr.w	r1, r1, r0, lsr #27
    4326:	0143      	lsls	r3, r0, #5
    4328:	1a1b      	subs	r3, r3, r0
    432a:	eb61 0102 	sbc.w	r1, r1, r2
    432e:	0089      	lsls	r1, r1, #2
    4330:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
    4334:	009b      	lsls	r3, r3, #2
    4336:	181b      	adds	r3, r3, r0
    4338:	eb42 0201 	adc.w	r2, r2, r1
    433c:	00d2      	lsls	r2, r2, #3
    433e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    4342:	f3c3 3310 	ubfx	r3, r3, #12, #17
    4346:	ea43 4042 	orr.w	r0, r3, r2, lsl #17
}
    434a:	bd08      	pop	{r3, pc}
		k_thread_suspend(_current);
    434c:	4b03      	ldr	r3, [pc, #12]	; (435c <z_impl_k_sleep+0x50>)
    434e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4350:	f7ff feb2 	bl	40b8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    4354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4358:	e7f7      	b.n	434a <z_impl_k_sleep+0x3e>
    435a:	bf00      	nop
    435c:	20000ddc 	.word	0x20000ddc

00004360 <z_impl_z_current_get>:
}
    4360:	4b01      	ldr	r3, [pc, #4]	; (4368 <z_impl_z_current_get+0x8>)
    4362:	6898      	ldr	r0, [r3, #8]
    4364:	4770      	bx	lr
    4366:	bf00      	nop
    4368:	20000ddc 	.word	0x20000ddc

0000436c <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    436c:	b570      	push	{r4, r5, r6, lr}
    436e:	f04f 0320 	mov.w	r3, #32
    4372:	f3ef 8511 	mrs	r5, BASEPRI
    4376:	f383 8812 	msr	BASEPRI_MAX, r3
    437a:	f3bf 8f6f 	isb	sy
    437e:	462e      	mov	r6, r5
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    4380:	7b03      	ldrb	r3, [r0, #12]
    4382:	f013 0f01 	tst.w	r3, #1
    4386:	d109      	bne.n	439c <z_thread_abort+0x30>
    4388:	4604      	mov	r4, r0
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
		return;
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    438a:	7b43      	ldrb	r3, [r0, #13]
    438c:	f013 0f08 	tst.w	r3, #8
    4390:	d00f      	beq.n	43b2 <z_thread_abort+0x46>
	__asm__ volatile(
    4392:	f385 8811 	msr	BASEPRI, r5
    4396:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		return;
    439a:	e009      	b.n	43b0 <z_thread_abort+0x44>
    439c:	f385 8811 	msr	BASEPRI, r5
    43a0:	f3bf 8f6f 	isb	sy
		k_panic();
    43a4:	4040      	eors	r0, r0
    43a6:	f380 8811 	msr	BASEPRI, r0
    43aa:	f04f 0004 	mov.w	r0, #4
    43ae:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    43b0:	bd70      	pop	{r4, r5, r6, pc}
	end_thread(thread);
    43b2:	f7ff fedb 	bl	416c <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    43b6:	4b08      	ldr	r3, [pc, #32]	; (43d8 <z_thread_abort+0x6c>)
    43b8:	689b      	ldr	r3, [r3, #8]
    43ba:	42a3      	cmp	r3, r4
    43bc:	d004      	beq.n	43c8 <z_thread_abort+0x5c>
    43be:	f386 8811 	msr	BASEPRI, r6
    43c2:	f3bf 8f6f 	isb	sy
    43c6:	e7f3      	b.n	43b0 <z_thread_abort+0x44>
    43c8:	f3ef 8305 	mrs	r3, IPSR
    43cc:	2b00      	cmp	r3, #0
    43ce:	d1f6      	bne.n	43be <z_thread_abort+0x52>
    43d0:	4628      	mov	r0, r5
    43d2:	f7fc ff25 	bl	1220 <arch_swap>
	return ret;
    43d6:	e7f2      	b.n	43be <z_thread_abort+0x52>
    43d8:	20000ddc 	.word	0x20000ddc

000043dc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    43dc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    43de:	4806      	ldr	r0, [pc, #24]	; (43f8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    43e0:	4a06      	ldr	r2, [pc, #24]	; (43fc <z_data_copy+0x20>)
    43e2:	1a12      	subs	r2, r2, r0
    43e4:	4906      	ldr	r1, [pc, #24]	; (4400 <z_data_copy+0x24>)
    43e6:	f001 ff6f 	bl	62c8 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    43ea:	4a06      	ldr	r2, [pc, #24]	; (4404 <z_data_copy+0x28>)
    43ec:	4906      	ldr	r1, [pc, #24]	; (4408 <z_data_copy+0x2c>)
    43ee:	4807      	ldr	r0, [pc, #28]	; (440c <z_data_copy+0x30>)
    43f0:	f001 ff6a 	bl	62c8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    43f4:	bd08      	pop	{r3, pc}
    43f6:	bf00      	nop
    43f8:	20000000 	.word	0x20000000
    43fc:	200001ac 	.word	0x200001ac
    4400:	00006e04 	.word	0x00006e04
    4404:	00000000 	.word	0x00000000
    4408:	00006e04 	.word	0x00006e04
    440c:	20000000 	.word	0x20000000

00004410 <first>:
	return list->head == list;
    4410:	4b03      	ldr	r3, [pc, #12]	; (4420 <first+0x10>)
    4412:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4414:	4298      	cmp	r0, r3
    4416:	d000      	beq.n	441a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    4418:	4770      	bx	lr
    441a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    441c:	e7fc      	b.n	4418 <first+0x8>
    441e:	bf00      	nop
    4420:	200000e8 	.word	0x200000e8

00004424 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4424:	b130      	cbz	r0, 4434 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    4426:	4a04      	ldr	r2, [pc, #16]	; (4438 <next+0x14>)
    4428:	6852      	ldr	r2, [r2, #4]
    442a:	4290      	cmp	r0, r2
    442c:	d001      	beq.n	4432 <next+0xe>
    442e:	6800      	ldr	r0, [r0, #0]
    4430:	4770      	bx	lr
    4432:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    4434:	4770      	bx	lr
    4436:	bf00      	nop
    4438:	200000e8 	.word	0x200000e8

0000443c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    443c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    443e:	4b04      	ldr	r3, [pc, #16]	; (4450 <elapsed+0x14>)
    4440:	681b      	ldr	r3, [r3, #0]
    4442:	b10b      	cbz	r3, 4448 <elapsed+0xc>
    4444:	2000      	movs	r0, #0
}
    4446:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4448:	f7fe f88a 	bl	2560 <sys_clock_elapsed>
    444c:	e7fb      	b.n	4446 <elapsed+0xa>
    444e:	bf00      	nop
    4450:	20000e14 	.word	0x20000e14

00004454 <next_timeout>:

static int32_t next_timeout(void)
{
    4454:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    4456:	f7ff ffdb 	bl	4410 <first>
    445a:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    445c:	f7ff ffee 	bl	443c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4460:	b17c      	cbz	r4, 4482 <next_timeout+0x2e>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    4462:	6923      	ldr	r3, [r4, #16]
    4464:	6962      	ldr	r2, [r4, #20]
    4466:	1a1b      	subs	r3, r3, r0
    4468:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    446c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4470:	f172 0100 	sbcs.w	r1, r2, #0
    4474:	da08      	bge.n	4488 <next_timeout+0x34>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    4476:	2a00      	cmp	r2, #0
    4478:	db01      	blt.n	447e <next_timeout+0x2a>
    447a:	4618      	mov	r0, r3
    447c:	e006      	b.n	448c <next_timeout+0x38>
    447e:	2300      	movs	r3, #0
    4480:	e7fb      	b.n	447a <next_timeout+0x26>
		ret = MAX_WAIT;
    4482:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4486:	e001      	b.n	448c <next_timeout+0x38>
    4488:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    448c:	4b03      	ldr	r3, [pc, #12]	; (449c <next_timeout+0x48>)
    448e:	691b      	ldr	r3, [r3, #16]
    4490:	b113      	cbz	r3, 4498 <next_timeout+0x44>
    4492:	4283      	cmp	r3, r0
    4494:	da00      	bge.n	4498 <next_timeout+0x44>
		ret = _current_cpu->slice_ticks;
    4496:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    4498:	bd10      	pop	{r4, pc}
    449a:	bf00      	nop
    449c:	20000ddc 	.word	0x20000ddc

000044a0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    44a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    44a4:	bf08      	it	eq
    44a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    44aa:	d07b      	beq.n	45a4 <z_add_timeout+0x104>
{
    44ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    44b0:	4604      	mov	r4, r0
    44b2:	4692      	mov	sl, r2
    44b4:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    44b6:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    44b8:	2300      	movs	r3, #0
	__asm__ volatile(
    44ba:	f04f 0220 	mov.w	r2, #32
    44be:	f3ef 8711 	mrs	r7, BASEPRI
    44c2:	f382 8812 	msr	BASEPRI_MAX, r2
    44c6:	f3bf 8f6f 	isb	sy
    44ca:	e026      	b.n	451a <z_add_timeout+0x7a>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    44cc:	f11a 0801 	adds.w	r8, sl, #1
    44d0:	f145 0900 	adc.w	r9, r5, #0
    44d4:	f7ff ffb2 	bl	443c <elapsed>
    44d8:	eb18 0300 	adds.w	r3, r8, r0
    44dc:	eb49 70e0 	adc.w	r0, r9, r0, asr #31
    44e0:	6123      	str	r3, [r4, #16]
    44e2:	6160      	str	r0, [r4, #20]
    44e4:	e03b      	b.n	455e <z_add_timeout+0xbe>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    44e6:	1a52      	subs	r2, r2, r1
    44e8:	eb66 0303 	sbc.w	r3, r6, r3
    44ec:	6102      	str	r2, [r0, #16]
    44ee:	6143      	str	r3, [r0, #20]
	sys_dnode_t *const prev = successor->prev;
    44f0:	6843      	ldr	r3, [r0, #4]
	node->prev = prev;
    44f2:	6063      	str	r3, [r4, #4]
	node->next = successor;
    44f4:	6020      	str	r0, [r4, #0]
	prev->next = node;
    44f6:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    44f8:	6044      	str	r4, [r0, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    44fa:	e005      	b.n	4508 <z_add_timeout+0x68>
	sys_dnode_t *const tail = list->tail;
    44fc:	4b2a      	ldr	r3, [pc, #168]	; (45a8 <z_add_timeout+0x108>)
    44fe:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4500:	6023      	str	r3, [r4, #0]
	node->prev = tail;
    4502:	6062      	str	r2, [r4, #4]
	tail->next = node;
    4504:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4506:	605c      	str	r4, [r3, #4]
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4508:	f7ff ff82 	bl	4410 <first>
    450c:	4284      	cmp	r4, r0
    450e:	d03a      	beq.n	4586 <z_add_timeout+0xe6>
	__asm__ volatile(
    4510:	f387 8811 	msr	BASEPRI, r7
    4514:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    4518:	2301      	movs	r3, #1
    451a:	2b00      	cmp	r3, #0
    451c:	d140      	bne.n	45a0 <z_add_timeout+0x100>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    451e:	4653      	mov	r3, sl
    4520:	f06f 0101 	mvn.w	r1, #1
    4524:	ebb1 010a 	subs.w	r1, r1, sl
    4528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    452c:	eb60 0205 	sbc.w	r2, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4530:	2a00      	cmp	r2, #0
    4532:	dbcb      	blt.n	44cc <z_add_timeout+0x2c>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4534:	4a1d      	ldr	r2, [pc, #116]	; (45ac <z_add_timeout+0x10c>)
    4536:	6811      	ldr	r1, [r2, #0]
    4538:	6852      	ldr	r2, [r2, #4]
    453a:	185b      	adds	r3, r3, r1
    453c:	eb42 0205 	adc.w	r2, r2, r5
    4540:	f06f 0101 	mvn.w	r1, #1
    4544:	1ac9      	subs	r1, r1, r3
    4546:	eb60 0302 	sbc.w	r3, r0, r2
			to->dticks = MAX(1, ticks);
    454a:	4608      	mov	r0, r1
    454c:	461a      	mov	r2, r3
    454e:	2901      	cmp	r1, #1
    4550:	f173 0300 	sbcs.w	r3, r3, #0
    4554:	da01      	bge.n	455a <z_add_timeout+0xba>
    4556:	2001      	movs	r0, #1
    4558:	2200      	movs	r2, #0
    455a:	6120      	str	r0, [r4, #16]
    455c:	6162      	str	r2, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    455e:	f7ff ff57 	bl	4410 <first>
    4562:	2800      	cmp	r0, #0
    4564:	d0ca      	beq.n	44fc <z_add_timeout+0x5c>
			if (t->dticks > to->dticks) {
    4566:	6902      	ldr	r2, [r0, #16]
    4568:	6946      	ldr	r6, [r0, #20]
    456a:	6921      	ldr	r1, [r4, #16]
    456c:	6963      	ldr	r3, [r4, #20]
    456e:	4291      	cmp	r1, r2
    4570:	eb73 0e06 	sbcs.w	lr, r3, r6
    4574:	dbb7      	blt.n	44e6 <z_add_timeout+0x46>
			to->dticks -= t->dticks;
    4576:	1a89      	subs	r1, r1, r2
    4578:	eb63 0306 	sbc.w	r3, r3, r6
    457c:	6121      	str	r1, [r4, #16]
    457e:	6163      	str	r3, [r4, #20]
		for (t = first(); t != NULL; t = next(t)) {
    4580:	f7ff ff50 	bl	4424 <next>
    4584:	e7ed      	b.n	4562 <z_add_timeout+0xc2>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4586:	f7ff ff65 	bl	4454 <next_timeout>

			if (next_time == 0 ||
    458a:	4603      	mov	r3, r0
    458c:	b118      	cbz	r0, 4596 <z_add_timeout+0xf6>
			    _current_cpu->slice_ticks != next_time) {
    458e:	4a08      	ldr	r2, [pc, #32]	; (45b0 <z_add_timeout+0x110>)
    4590:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    4592:	4282      	cmp	r2, r0
    4594:	d0bc      	beq.n	4510 <z_add_timeout+0x70>
				sys_clock_set_timeout(next_time, false);
    4596:	2100      	movs	r1, #0
    4598:	4618      	mov	r0, r3
    459a:	f7fd ffaf 	bl	24fc <sys_clock_set_timeout>
    459e:	e7b7      	b.n	4510 <z_add_timeout+0x70>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    45a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    45a4:	4770      	bx	lr
    45a6:	bf00      	nop
    45a8:	200000e8 	.word	0x200000e8
    45ac:	20000330 	.word	0x20000330
    45b0:	20000ddc 	.word	0x20000ddc

000045b4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    45b4:	b570      	push	{r4, r5, r6, lr}
    45b6:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    45b8:	f7ff fc52 	bl	3e60 <z_time_slice>
	__asm__ volatile(
    45bc:	f04f 0320 	mov.w	r3, #32
    45c0:	f3ef 8611 	mrs	r6, BASEPRI
    45c4:	f383 8812 	msr	BASEPRI_MAX, r3
    45c8:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    45cc:	4b28      	ldr	r3, [pc, #160]	; (4670 <sys_clock_announce+0xbc>)
    45ce:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    45d0:	e021      	b.n	4616 <sys_clock_announce+0x62>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    45d2:	4a28      	ldr	r2, [pc, #160]	; (4674 <sys_clock_announce+0xc0>)
    45d4:	6813      	ldr	r3, [r2, #0]
    45d6:	6851      	ldr	r1, [r2, #4]
    45d8:	195b      	adds	r3, r3, r5
    45da:	eb41 71e5 	adc.w	r1, r1, r5, asr #31
    45de:	6013      	str	r3, [r2, #0]
    45e0:	6051      	str	r1, [r2, #4]
		t->dticks = 0;
    45e2:	2200      	movs	r2, #0
    45e4:	2300      	movs	r3, #0
    45e6:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    45ea:	4620      	mov	r0, r4
    45ec:	f002 f811 	bl	6612 <remove_timeout>
	__asm__ volatile(
    45f0:	f386 8811 	msr	BASEPRI, r6
    45f4:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    45f8:	68a3      	ldr	r3, [r4, #8]
    45fa:	4620      	mov	r0, r4
    45fc:	4798      	blx	r3
	__asm__ volatile(
    45fe:	f04f 0320 	mov.w	r3, #32
    4602:	f3ef 8611 	mrs	r6, BASEPRI
    4606:	f383 8812 	msr	BASEPRI_MAX, r3
    460a:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
    460e:	4a18      	ldr	r2, [pc, #96]	; (4670 <sys_clock_announce+0xbc>)
    4610:	6813      	ldr	r3, [r2, #0]
    4612:	1b5b      	subs	r3, r3, r5
    4614:	6013      	str	r3, [r2, #0]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4616:	f7ff fefb 	bl	4410 <first>
    461a:	4604      	mov	r4, r0
    461c:	b138      	cbz	r0, 462e <sys_clock_announce+0x7a>
    461e:	6905      	ldr	r5, [r0, #16]
    4620:	6941      	ldr	r1, [r0, #20]
    4622:	4b13      	ldr	r3, [pc, #76]	; (4670 <sys_clock_announce+0xbc>)
    4624:	681a      	ldr	r2, [r3, #0]
    4626:	17d3      	asrs	r3, r2, #31
    4628:	42aa      	cmp	r2, r5
    462a:	418b      	sbcs	r3, r1
    462c:	dad1      	bge.n	45d2 <sys_clock_announce+0x1e>
	}

	if (first() != NULL) {
    462e:	b144      	cbz	r4, 4642 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    4630:	6923      	ldr	r3, [r4, #16]
    4632:	6962      	ldr	r2, [r4, #20]
    4634:	490e      	ldr	r1, [pc, #56]	; (4670 <sys_clock_announce+0xbc>)
    4636:	6809      	ldr	r1, [r1, #0]
    4638:	1a5b      	subs	r3, r3, r1
    463a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
    463e:	6123      	str	r3, [r4, #16]
    4640:	6162      	str	r2, [r4, #20]
	}

	curr_tick += announce_remaining;
    4642:	4a0c      	ldr	r2, [pc, #48]	; (4674 <sys_clock_announce+0xc0>)
    4644:	4d0a      	ldr	r5, [pc, #40]	; (4670 <sys_clock_announce+0xbc>)
    4646:	6828      	ldr	r0, [r5, #0]
    4648:	6813      	ldr	r3, [r2, #0]
    464a:	6851      	ldr	r1, [r2, #4]
    464c:	181b      	adds	r3, r3, r0
    464e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
    4652:	6013      	str	r3, [r2, #0]
    4654:	6051      	str	r1, [r2, #4]
	announce_remaining = 0;
    4656:	2400      	movs	r4, #0
    4658:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    465a:	f7ff fefb 	bl	4454 <next_timeout>
    465e:	4621      	mov	r1, r4
    4660:	f7fd ff4c 	bl	24fc <sys_clock_set_timeout>
	__asm__ volatile(
    4664:	f386 8811 	msr	BASEPRI, r6
    4668:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    466c:	bd70      	pop	{r4, r5, r6, pc}
    466e:	bf00      	nop
    4670:	20000e14 	.word	0x20000e14
    4674:	20000330 	.word	0x20000330

00004678 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    4678:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    467a:	2200      	movs	r2, #0
	__asm__ volatile(
    467c:	f04f 0320 	mov.w	r3, #32
    4680:	f3ef 8411 	mrs	r4, BASEPRI
    4684:	f383 8812 	msr	BASEPRI_MAX, r3
    4688:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    468c:	4613      	mov	r3, r2
    468e:	4611      	mov	r1, r2
    4690:	e00c      	b.n	46ac <sys_clock_tick_get+0x34>
		t = curr_tick + elapsed();
    4692:	f7ff fed3 	bl	443c <elapsed>
    4696:	4a07      	ldr	r2, [pc, #28]	; (46b4 <sys_clock_tick_get+0x3c>)
    4698:	6813      	ldr	r3, [r2, #0]
    469a:	6851      	ldr	r1, [r2, #4]
    469c:	18c3      	adds	r3, r0, r3
    469e:	eb41 71e0 	adc.w	r1, r1, r0, asr #31
	__asm__ volatile(
    46a2:	f384 8811 	msr	BASEPRI, r4
    46a6:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    46aa:	2201      	movs	r2, #1
    46ac:	2a00      	cmp	r2, #0
    46ae:	d0f0      	beq.n	4692 <sys_clock_tick_get+0x1a>
	}
	return t;
}
    46b0:	4618      	mov	r0, r3
    46b2:	bd10      	pop	{r4, pc}
    46b4:	20000330 	.word	0x20000330

000046b8 <boot_banner>:
#else
#define BANNER_VERSION KERNEL_VERSION_STRING
#endif

void boot_banner(void)
{
    46b8:	b508      	push	{r3, lr}
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    46ba:	4802      	ldr	r0, [pc, #8]	; (46c4 <boot_banner+0xc>)
    46bc:	f000 fa59 	bl	4b72 <printk>
#endif /* CONFIG_BOOT_BANNER */
}
    46c0:	bd08      	pop	{r3, pc}
    46c2:	bf00      	nop
    46c4:	00006d4c 	.word	0x00006d4c

000046c8 <nrf_cc3xx_platform_init_no_rng>:
    46c8:	b510      	push	{r4, lr}
    46ca:	4c0a      	ldr	r4, [pc, #40]	; (46f4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    46cc:	6823      	ldr	r3, [r4, #0]
    46ce:	b11b      	cbz	r3, 46d8 <nrf_cc3xx_platform_init_no_rng+0x10>
    46d0:	2301      	movs	r3, #1
    46d2:	6023      	str	r3, [r4, #0]
    46d4:	2000      	movs	r0, #0
    46d6:	bd10      	pop	{r4, pc}
    46d8:	f000 f8e6 	bl	48a8 <CC_LibInitNoRng>
    46dc:	2800      	cmp	r0, #0
    46de:	d0f7      	beq.n	46d0 <nrf_cc3xx_platform_init_no_rng+0x8>
    46e0:	3801      	subs	r0, #1
    46e2:	2806      	cmp	r0, #6
    46e4:	d803      	bhi.n	46ee <nrf_cc3xx_platform_init_no_rng+0x26>
    46e6:	4b04      	ldr	r3, [pc, #16]	; (46f8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    46e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    46ec:	bd10      	pop	{r4, pc}
    46ee:	4803      	ldr	r0, [pc, #12]	; (46fc <nrf_cc3xx_platform_init_no_rng+0x34>)
    46f0:	bd10      	pop	{r4, pc}
    46f2:	bf00      	nop
    46f4:	20000e18 	.word	0x20000e18
    46f8:	00006d7c 	.word	0x00006d7c
    46fc:	ffff8ffe 	.word	0xffff8ffe

00004700 <nrf_cc3xx_platform_abort>:
    4700:	f3bf 8f4f 	dsb	sy
    4704:	4905      	ldr	r1, [pc, #20]	; (471c <nrf_cc3xx_platform_abort+0x1c>)
    4706:	4b06      	ldr	r3, [pc, #24]	; (4720 <nrf_cc3xx_platform_abort+0x20>)
    4708:	68ca      	ldr	r2, [r1, #12]
    470a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    470e:	4313      	orrs	r3, r2
    4710:	60cb      	str	r3, [r1, #12]
    4712:	f3bf 8f4f 	dsb	sy
    4716:	bf00      	nop
    4718:	e7fd      	b.n	4716 <nrf_cc3xx_platform_abort+0x16>
    471a:	bf00      	nop
    471c:	e000ed00 	.word	0xe000ed00
    4720:	05fa0004 	.word	0x05fa0004

00004724 <CC_PalAbort>:
    4724:	b410      	push	{r4}
    4726:	4b09      	ldr	r3, [pc, #36]	; (474c <CC_PalAbort+0x28>)
    4728:	4909      	ldr	r1, [pc, #36]	; (4750 <CC_PalAbort+0x2c>)
    472a:	4c0a      	ldr	r4, [pc, #40]	; (4754 <CC_PalAbort+0x30>)
    472c:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    4730:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    4734:	6849      	ldr	r1, [r1, #4]
    4736:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    473a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    473e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    4742:	2300      	movs	r3, #0
    4744:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    4748:	bc10      	pop	{r4}
    474a:	4708      	bx	r1
    474c:	5002b000 	.word	0x5002b000
    4750:	200000f0 	.word	0x200000f0
    4754:	5002a000 	.word	0x5002a000

00004758 <nrf_cc3xx_platform_set_abort>:
    4758:	e9d0 1200 	ldrd	r1, r2, [r0]
    475c:	4b01      	ldr	r3, [pc, #4]	; (4764 <nrf_cc3xx_platform_set_abort+0xc>)
    475e:	e9c3 1200 	strd	r1, r2, [r3]
    4762:	4770      	bx	lr
    4764:	200000f0 	.word	0x200000f0

00004768 <mutex_free>:
    4768:	b510      	push	{r4, lr}
    476a:	4604      	mov	r4, r0
    476c:	b150      	cbz	r0, 4784 <mutex_free+0x1c>
    476e:	6863      	ldr	r3, [r4, #4]
    4770:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4774:	d005      	beq.n	4782 <mutex_free+0x1a>
    4776:	4a06      	ldr	r2, [pc, #24]	; (4790 <mutex_free+0x28>)
    4778:	4293      	cmp	r3, r2
    477a:	d002      	beq.n	4782 <mutex_free+0x1a>
    477c:	2300      	movs	r3, #0
    477e:	6023      	str	r3, [r4, #0]
    4780:	6062      	str	r2, [r4, #4]
    4782:	bd10      	pop	{r4, pc}
    4784:	4b03      	ldr	r3, [pc, #12]	; (4794 <mutex_free+0x2c>)
    4786:	4804      	ldr	r0, [pc, #16]	; (4798 <mutex_free+0x30>)
    4788:	685b      	ldr	r3, [r3, #4]
    478a:	4798      	blx	r3
    478c:	e7ef      	b.n	476e <mutex_free+0x6>
    478e:	bf00      	nop
    4790:	a95c5f2c 	.word	0xa95c5f2c
    4794:	200000f0 	.word	0x200000f0
    4798:	00006d98 	.word	0x00006d98

0000479c <mutex_lock>:
    479c:	b1c8      	cbz	r0, 47d2 <mutex_lock+0x36>
    479e:	6843      	ldr	r3, [r0, #4]
    47a0:	4a0d      	ldr	r2, [pc, #52]	; (47d8 <mutex_lock+0x3c>)
    47a2:	4293      	cmp	r3, r2
    47a4:	d013      	beq.n	47ce <mutex_lock+0x32>
    47a6:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    47aa:	d00e      	beq.n	47ca <mutex_lock+0x2e>
    47ac:	2301      	movs	r3, #1
    47ae:	e850 2f00 	ldrex	r2, [r0]
    47b2:	4619      	mov	r1, r3
    47b4:	e840 1c00 	strex	ip, r1, [r0]
    47b8:	f09c 0f00 	teq	ip, #0
    47bc:	d1f7      	bne.n	47ae <mutex_lock+0x12>
    47be:	2a01      	cmp	r2, #1
    47c0:	d0f5      	beq.n	47ae <mutex_lock+0x12>
    47c2:	f3bf 8f5f 	dmb	sy
    47c6:	2000      	movs	r0, #0
    47c8:	4770      	bx	lr
    47ca:	4804      	ldr	r0, [pc, #16]	; (47dc <mutex_lock+0x40>)
    47cc:	4770      	bx	lr
    47ce:	4804      	ldr	r0, [pc, #16]	; (47e0 <mutex_lock+0x44>)
    47d0:	4770      	bx	lr
    47d2:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    47d6:	4770      	bx	lr
    47d8:	a95c5f2c 	.word	0xa95c5f2c
    47dc:	ffff8fe9 	.word	0xffff8fe9
    47e0:	ffff8fea 	.word	0xffff8fea

000047e4 <mutex_unlock>:
    47e4:	b180      	cbz	r0, 4808 <mutex_unlock+0x24>
    47e6:	6843      	ldr	r3, [r0, #4]
    47e8:	4a09      	ldr	r2, [pc, #36]	; (4810 <mutex_unlock+0x2c>)
    47ea:	4293      	cmp	r3, r2
    47ec:	d00a      	beq.n	4804 <mutex_unlock+0x20>
    47ee:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    47f2:	d005      	beq.n	4800 <mutex_unlock+0x1c>
    47f4:	f3bf 8f5f 	dmb	sy
    47f8:	2300      	movs	r3, #0
    47fa:	6003      	str	r3, [r0, #0]
    47fc:	4618      	mov	r0, r3
    47fe:	4770      	bx	lr
    4800:	4804      	ldr	r0, [pc, #16]	; (4814 <mutex_unlock+0x30>)
    4802:	4770      	bx	lr
    4804:	4804      	ldr	r0, [pc, #16]	; (4818 <mutex_unlock+0x34>)
    4806:	4770      	bx	lr
    4808:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    480c:	4770      	bx	lr
    480e:	bf00      	nop
    4810:	a95c5f2c 	.word	0xa95c5f2c
    4814:	ffff8fe9 	.word	0xffff8fe9
    4818:	ffff8fea 	.word	0xffff8fea

0000481c <mutex_init>:
    481c:	b510      	push	{r4, lr}
    481e:	4604      	mov	r4, r0
    4820:	b120      	cbz	r0, 482c <mutex_init+0x10>
    4822:	4b04      	ldr	r3, [pc, #16]	; (4834 <mutex_init+0x18>)
    4824:	6063      	str	r3, [r4, #4]
    4826:	2200      	movs	r2, #0
    4828:	6022      	str	r2, [r4, #0]
    482a:	bd10      	pop	{r4, pc}
    482c:	4802      	ldr	r0, [pc, #8]	; (4838 <mutex_init+0x1c>)
    482e:	f7ff ff79 	bl	4724 <CC_PalAbort>
    4832:	e7f6      	b.n	4822 <mutex_init+0x6>
    4834:	3a00003a 	.word	0x3a00003a
    4838:	00006dc0 	.word	0x00006dc0

0000483c <nrf_cc3xx_platform_set_mutexes>:
    483c:	b570      	push	{r4, r5, r6, lr}
    483e:	e9d0 2300 	ldrd	r2, r3, [r0]
    4842:	4c15      	ldr	r4, [pc, #84]	; (4898 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    4844:	4d15      	ldr	r5, [pc, #84]	; (489c <nrf_cc3xx_platform_set_mutexes+0x60>)
    4846:	6063      	str	r3, [r4, #4]
    4848:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    484c:	e9c4 3002 	strd	r3, r0, [r4, #8]
    4850:	6022      	str	r2, [r4, #0]
    4852:	4b13      	ldr	r3, [pc, #76]	; (48a0 <nrf_cc3xx_platform_set_mutexes+0x64>)
    4854:	6808      	ldr	r0, [r1, #0]
    4856:	6018      	str	r0, [r3, #0]
    4858:	6848      	ldr	r0, [r1, #4]
    485a:	6058      	str	r0, [r3, #4]
    485c:	6888      	ldr	r0, [r1, #8]
    485e:	6098      	str	r0, [r3, #8]
    4860:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    4864:	60d8      	str	r0, [r3, #12]
    4866:	6119      	str	r1, [r3, #16]
    4868:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    486c:	f013 5f68 	tst.w	r3, #973078528	; 0x3a000000
    4870:	d010      	beq.n	4894 <nrf_cc3xx_platform_set_mutexes+0x58>
    4872:	490c      	ldr	r1, [pc, #48]	; (48a4 <nrf_cc3xx_platform_set_mutexes+0x68>)
    4874:	f8c5 11bc 	str.w	r1, [r5, #444]	; 0x1bc
    4878:	2300      	movs	r3, #0
    487a:	e9c5 3145 	strd	r3, r1, [r5, #276]	; 0x114
    487e:	f505 708a 	add.w	r0, r5, #276	; 0x114
    4882:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
    4886:	4790      	blx	r2
    4888:	6823      	ldr	r3, [r4, #0]
    488a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    488e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4892:	4718      	bx	r3
    4894:	bd70      	pop	{r4, r5, r6, pc}
    4896:	bf00      	nop
    4898:	20000100 	.word	0x20000100
    489c:	20000e30 	.word	0x20000e30
    48a0:	20000110 	.word	0x20000110
    48a4:	a95c5f2c 	.word	0xa95c5f2c

000048a8 <CC_LibInitNoRng>:
    48a8:	b538      	push	{r3, r4, r5, lr}
    48aa:	f000 f82f 	bl	490c <CC_HalInit>
    48ae:	b120      	cbz	r0, 48ba <CC_LibInitNoRng+0x12>
    48b0:	2403      	movs	r4, #3
    48b2:	f000 f863 	bl	497c <CC_PalTerminate>
    48b6:	4620      	mov	r0, r4
    48b8:	bd38      	pop	{r3, r4, r5, pc}
    48ba:	f000 f831 	bl	4920 <CC_PalInit>
    48be:	b998      	cbnz	r0, 48e8 <CC_LibInitNoRng+0x40>
    48c0:	f000 f8ac 	bl	4a1c <CC_PalPowerSaveModeSelect>
    48c4:	b998      	cbnz	r0, 48ee <CC_LibInitNoRng+0x46>
    48c6:	4d0f      	ldr	r5, [pc, #60]	; (4904 <CC_LibInitNoRng+0x5c>)
    48c8:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    48cc:	0e1b      	lsrs	r3, r3, #24
    48ce:	2bf0      	cmp	r3, #240	; 0xf0
    48d0:	d108      	bne.n	48e4 <CC_LibInitNoRng+0x3c>
    48d2:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    48d6:	4b0c      	ldr	r3, [pc, #48]	; (4908 <CC_LibInitNoRng+0x60>)
    48d8:	429a      	cmp	r2, r3
    48da:	d00a      	beq.n	48f2 <CC_LibInitNoRng+0x4a>
    48dc:	2407      	movs	r4, #7
    48de:	f000 f817 	bl	4910 <CC_HalTerminate>
    48e2:	e7e6      	b.n	48b2 <CC_LibInitNoRng+0xa>
    48e4:	2406      	movs	r4, #6
    48e6:	e7fa      	b.n	48de <CC_LibInitNoRng+0x36>
    48e8:	2404      	movs	r4, #4
    48ea:	4620      	mov	r0, r4
    48ec:	bd38      	pop	{r3, r4, r5, pc}
    48ee:	2400      	movs	r4, #0
    48f0:	e7f5      	b.n	48de <CC_LibInitNoRng+0x36>
    48f2:	2001      	movs	r0, #1
    48f4:	f000 f892 	bl	4a1c <CC_PalPowerSaveModeSelect>
    48f8:	4604      	mov	r4, r0
    48fa:	2800      	cmp	r0, #0
    48fc:	d1f7      	bne.n	48ee <CC_LibInitNoRng+0x46>
    48fe:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    4902:	e7d8      	b.n	48b6 <CC_LibInitNoRng+0xe>
    4904:	5002b000 	.word	0x5002b000
    4908:	20e00000 	.word	0x20e00000

0000490c <CC_HalInit>:
    490c:	2000      	movs	r0, #0
    490e:	4770      	bx	lr

00004910 <CC_HalTerminate>:
    4910:	2000      	movs	r0, #0
    4912:	4770      	bx	lr

00004914 <CC_HalMaskInterrupt>:
    4914:	4b01      	ldr	r3, [pc, #4]	; (491c <CC_HalMaskInterrupt+0x8>)
    4916:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    491a:	4770      	bx	lr
    491c:	5002b000 	.word	0x5002b000

00004920 <CC_PalInit>:
    4920:	b510      	push	{r4, lr}
    4922:	4811      	ldr	r0, [pc, #68]	; (4968 <CC_PalInit+0x48>)
    4924:	f000 f848 	bl	49b8 <CC_PalMutexCreate>
    4928:	b100      	cbz	r0, 492c <CC_PalInit+0xc>
    492a:	bd10      	pop	{r4, pc}
    492c:	480f      	ldr	r0, [pc, #60]	; (496c <CC_PalInit+0x4c>)
    492e:	f000 f843 	bl	49b8 <CC_PalMutexCreate>
    4932:	2800      	cmp	r0, #0
    4934:	d1f9      	bne.n	492a <CC_PalInit+0xa>
    4936:	4c0e      	ldr	r4, [pc, #56]	; (4970 <CC_PalInit+0x50>)
    4938:	4620      	mov	r0, r4
    493a:	f000 f83d 	bl	49b8 <CC_PalMutexCreate>
    493e:	2800      	cmp	r0, #0
    4940:	d1f3      	bne.n	492a <CC_PalInit+0xa>
    4942:	4b0c      	ldr	r3, [pc, #48]	; (4974 <CC_PalInit+0x54>)
    4944:	480c      	ldr	r0, [pc, #48]	; (4978 <CC_PalInit+0x58>)
    4946:	601c      	str	r4, [r3, #0]
    4948:	f000 f836 	bl	49b8 <CC_PalMutexCreate>
    494c:	4601      	mov	r1, r0
    494e:	2800      	cmp	r0, #0
    4950:	d1eb      	bne.n	492a <CC_PalInit+0xa>
    4952:	f000 f82d 	bl	49b0 <CC_PalDmaInit>
    4956:	4604      	mov	r4, r0
    4958:	b108      	cbz	r0, 495e <CC_PalInit+0x3e>
    495a:	4620      	mov	r0, r4
    495c:	bd10      	pop	{r4, pc}
    495e:	f000 f83f 	bl	49e0 <CC_PalPowerSaveModeInit>
    4962:	4620      	mov	r0, r4
    4964:	e7fa      	b.n	495c <CC_PalInit+0x3c>
    4966:	bf00      	nop
    4968:	20000148 	.word	0x20000148
    496c:	2000013c 	.word	0x2000013c
    4970:	20000144 	.word	0x20000144
    4974:	2000014c 	.word	0x2000014c
    4978:	20000140 	.word	0x20000140

0000497c <CC_PalTerminate>:
    497c:	b508      	push	{r3, lr}
    497e:	4808      	ldr	r0, [pc, #32]	; (49a0 <CC_PalTerminate+0x24>)
    4980:	f000 f824 	bl	49cc <CC_PalMutexDestroy>
    4984:	4807      	ldr	r0, [pc, #28]	; (49a4 <CC_PalTerminate+0x28>)
    4986:	f000 f821 	bl	49cc <CC_PalMutexDestroy>
    498a:	4807      	ldr	r0, [pc, #28]	; (49a8 <CC_PalTerminate+0x2c>)
    498c:	f000 f81e 	bl	49cc <CC_PalMutexDestroy>
    4990:	4806      	ldr	r0, [pc, #24]	; (49ac <CC_PalTerminate+0x30>)
    4992:	f000 f81b 	bl	49cc <CC_PalMutexDestroy>
    4996:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    499a:	f000 b80b 	b.w	49b4 <CC_PalDmaTerminate>
    499e:	bf00      	nop
    49a0:	20000148 	.word	0x20000148
    49a4:	2000013c 	.word	0x2000013c
    49a8:	20000144 	.word	0x20000144
    49ac:	20000140 	.word	0x20000140

000049b0 <CC_PalDmaInit>:
    49b0:	2000      	movs	r0, #0
    49b2:	4770      	bx	lr

000049b4 <CC_PalDmaTerminate>:
    49b4:	4770      	bx	lr
    49b6:	bf00      	nop

000049b8 <CC_PalMutexCreate>:
    49b8:	b508      	push	{r3, lr}
    49ba:	4b03      	ldr	r3, [pc, #12]	; (49c8 <CC_PalMutexCreate+0x10>)
    49bc:	6802      	ldr	r2, [r0, #0]
    49be:	681b      	ldr	r3, [r3, #0]
    49c0:	6810      	ldr	r0, [r2, #0]
    49c2:	4798      	blx	r3
    49c4:	2000      	movs	r0, #0
    49c6:	bd08      	pop	{r3, pc}
    49c8:	20000100 	.word	0x20000100

000049cc <CC_PalMutexDestroy>:
    49cc:	b508      	push	{r3, lr}
    49ce:	4b03      	ldr	r3, [pc, #12]	; (49dc <CC_PalMutexDestroy+0x10>)
    49d0:	6802      	ldr	r2, [r0, #0]
    49d2:	685b      	ldr	r3, [r3, #4]
    49d4:	6810      	ldr	r0, [r2, #0]
    49d6:	4798      	blx	r3
    49d8:	2000      	movs	r0, #0
    49da:	bd08      	pop	{r3, pc}
    49dc:	20000100 	.word	0x20000100

000049e0 <CC_PalPowerSaveModeInit>:
    49e0:	b570      	push	{r4, r5, r6, lr}
    49e2:	4c09      	ldr	r4, [pc, #36]	; (4a08 <CC_PalPowerSaveModeInit+0x28>)
    49e4:	4d09      	ldr	r5, [pc, #36]	; (4a0c <CC_PalPowerSaveModeInit+0x2c>)
    49e6:	6920      	ldr	r0, [r4, #16]
    49e8:	68ab      	ldr	r3, [r5, #8]
    49ea:	4798      	blx	r3
    49ec:	b118      	cbz	r0, 49f6 <CC_PalPowerSaveModeInit+0x16>
    49ee:	4b08      	ldr	r3, [pc, #32]	; (4a10 <CC_PalPowerSaveModeInit+0x30>)
    49f0:	4808      	ldr	r0, [pc, #32]	; (4a14 <CC_PalPowerSaveModeInit+0x34>)
    49f2:	685b      	ldr	r3, [r3, #4]
    49f4:	4798      	blx	r3
    49f6:	4a08      	ldr	r2, [pc, #32]	; (4a18 <CC_PalPowerSaveModeInit+0x38>)
    49f8:	68eb      	ldr	r3, [r5, #12]
    49fa:	6920      	ldr	r0, [r4, #16]
    49fc:	2100      	movs	r1, #0
    49fe:	6011      	str	r1, [r2, #0]
    4a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4a04:	4718      	bx	r3
    4a06:	bf00      	nop
    4a08:	20000110 	.word	0x20000110
    4a0c:	20000100 	.word	0x20000100
    4a10:	200000f0 	.word	0x200000f0
    4a14:	00006de4 	.word	0x00006de4
    4a18:	20000e2c 	.word	0x20000e2c

00004a1c <CC_PalPowerSaveModeSelect>:
    4a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a1e:	4d1a      	ldr	r5, [pc, #104]	; (4a88 <CC_PalPowerSaveModeSelect+0x6c>)
    4a20:	4e1a      	ldr	r6, [pc, #104]	; (4a8c <CC_PalPowerSaveModeSelect+0x70>)
    4a22:	4604      	mov	r4, r0
    4a24:	68b2      	ldr	r2, [r6, #8]
    4a26:	6928      	ldr	r0, [r5, #16]
    4a28:	4790      	blx	r2
    4a2a:	b9e8      	cbnz	r0, 4a68 <CC_PalPowerSaveModeSelect+0x4c>
    4a2c:	4f18      	ldr	r7, [pc, #96]	; (4a90 <CC_PalPowerSaveModeSelect+0x74>)
    4a2e:	683b      	ldr	r3, [r7, #0]
    4a30:	b14c      	cbz	r4, 4a46 <CC_PalPowerSaveModeSelect+0x2a>
    4a32:	b1a3      	cbz	r3, 4a5e <CC_PalPowerSaveModeSelect+0x42>
    4a34:	2b01      	cmp	r3, #1
    4a36:	d019      	beq.n	4a6c <CC_PalPowerSaveModeSelect+0x50>
    4a38:	3b01      	subs	r3, #1
    4a3a:	603b      	str	r3, [r7, #0]
    4a3c:	6928      	ldr	r0, [r5, #16]
    4a3e:	68f3      	ldr	r3, [r6, #12]
    4a40:	4798      	blx	r3
    4a42:	2000      	movs	r0, #0
    4a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a46:	b943      	cbnz	r3, 4a5a <CC_PalPowerSaveModeSelect+0x3e>
    4a48:	4a12      	ldr	r2, [pc, #72]	; (4a94 <CC_PalPowerSaveModeSelect+0x78>)
    4a4a:	2101      	movs	r1, #1
    4a4c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    4a50:	4911      	ldr	r1, [pc, #68]	; (4a98 <CC_PalPowerSaveModeSelect+0x7c>)
    4a52:	f8d1 2910 	ldr.w	r2, [r1, #2320]	; 0x910
    4a56:	2a00      	cmp	r2, #0
    4a58:	d1fb      	bne.n	4a52 <CC_PalPowerSaveModeSelect+0x36>
    4a5a:	3301      	adds	r3, #1
    4a5c:	603b      	str	r3, [r7, #0]
    4a5e:	68f3      	ldr	r3, [r6, #12]
    4a60:	6928      	ldr	r0, [r5, #16]
    4a62:	4798      	blx	r3
    4a64:	2000      	movs	r0, #0
    4a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a68:	480c      	ldr	r0, [pc, #48]	; (4a9c <CC_PalPowerSaveModeSelect+0x80>)
    4a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4a6c:	4a0a      	ldr	r2, [pc, #40]	; (4a98 <CC_PalPowerSaveModeSelect+0x7c>)
    4a6e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    4a72:	2b00      	cmp	r3, #0
    4a74:	d1fb      	bne.n	4a6e <CC_PalPowerSaveModeSelect+0x52>
    4a76:	4a07      	ldr	r2, [pc, #28]	; (4a94 <CC_PalPowerSaveModeSelect+0x78>)
    4a78:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    4a7c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    4a80:	f7ff ff48 	bl	4914 <CC_HalMaskInterrupt>
    4a84:	683b      	ldr	r3, [r7, #0]
    4a86:	e7d7      	b.n	4a38 <CC_PalPowerSaveModeSelect+0x1c>
    4a88:	20000110 	.word	0x20000110
    4a8c:	20000100 	.word	0x20000100
    4a90:	20000e2c 	.word	0x20000e2c
    4a94:	5002a000 	.word	0x5002a000
    4a98:	5002b000 	.word	0x5002b000
    4a9c:	ffff8fe9 	.word	0xffff8fe9

00004aa0 <z_impl_gpio_pin_interrupt_configure>:
{
    4aa0:	b538      	push	{r3, r4, r5, lr}
	const struct gpio_driver_api *api =
    4aa2:	6883      	ldr	r3, [r0, #8]
	const struct gpio_driver_data *const data =
    4aa4:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    4aa6:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
    4aaa:	d006      	beq.n	4aba <z_impl_gpio_pin_interrupt_configure+0x1a>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    4aac:	6825      	ldr	r5, [r4, #0]
    4aae:	2401      	movs	r4, #1
    4ab0:	408c      	lsls	r4, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    4ab2:	4225      	tst	r5, r4
    4ab4:	d001      	beq.n	4aba <z_impl_gpio_pin_interrupt_configure+0x1a>
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    4ab6:	f082 62c0 	eor.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    4aba:	699c      	ldr	r4, [r3, #24]
    4abc:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    4ac0:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
    4ac4:	47a0      	blx	r4
}
    4ac6:	bd38      	pop	{r3, r4, r5, pc}

00004ac8 <z_impl_gpio_pin_configure>:
{
    4ac8:	b538      	push	{r3, r4, r5, lr}
    4aca:	4613      	mov	r3, r2
	const struct gpio_driver_api *api =
    4acc:	6885      	ldr	r5, [r0, #8]
	struct gpio_driver_data *data =
    4ace:	6904      	ldr	r4, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    4ad0:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    4ad4:	d007      	beq.n	4ae6 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    4ad6:	f412 2f40 	tst.w	r2, #786432	; 0xc0000
    4ada:	d004      	beq.n	4ae6 <z_impl_gpio_pin_configure+0x1e>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4adc:	f012 0f01 	tst.w	r2, #1
    4ae0:	d001      	beq.n	4ae6 <z_impl_gpio_pin_configure+0x1e>
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    4ae2:	f482 2340 	eor.w	r3, r2, #786432	; 0xc0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    4ae6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4aea:	f013 0f01 	tst.w	r3, #1
    4aee:	d00a      	beq.n	4b06 <z_impl_gpio_pin_configure+0x3e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4af0:	6823      	ldr	r3, [r4, #0]
    4af2:	f04f 0c01 	mov.w	ip, #1
    4af6:	fa0c fc01 	lsl.w	ip, ip, r1
    4afa:	ea43 030c 	orr.w	r3, r3, ip
    4afe:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    4b00:	682b      	ldr	r3, [r5, #0]
    4b02:	4798      	blx	r3
}
    4b04:	bd38      	pop	{r3, r4, r5, pc}
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4b06:	6823      	ldr	r3, [r4, #0]
    4b08:	f04f 0c01 	mov.w	ip, #1
    4b0c:	fa0c fc01 	lsl.w	ip, ip, r1
    4b10:	ea23 030c 	bic.w	r3, r3, ip
    4b14:	6023      	str	r3, [r4, #0]
    4b16:	e7f3      	b.n	4b00 <z_impl_gpio_pin_configure+0x38>

00004b18 <gpio_pin_configure_dt>:
{
    4b18:	b508      	push	{r3, lr}
    4b1a:	4603      	mov	r3, r0
    4b1c:	468c      	mov	ip, r1
	return gpio_pin_configure(spec->port,
    4b1e:	6800      	ldr	r0, [r0, #0]
				  spec->pin,
    4b20:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    4b22:	88da      	ldrh	r2, [r3, #6]
	return gpio_pin_configure(spec->port,
    4b24:	ea42 020c 	orr.w	r2, r2, ip
		union { uintptr_t x; gpio_flags_t val; } parm2 = { .val = flags };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    4b28:	f7ff ffce 	bl	4ac8 <z_impl_gpio_pin_configure>
}
    4b2c:	bd08      	pop	{r3, pc}

00004b2e <gpio_add_callback>:
 *
 * Note: enables to add as many callback as needed on the same port.
 */
static inline int gpio_add_callback(const struct device *port,
				    struct gpio_callback *callback)
{
    4b2e:	b508      	push	{r3, lr}
	const struct gpio_driver_api *api =
    4b30:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    4b32:	69db      	ldr	r3, [r3, #28]
    4b34:	b113      	cbz	r3, 4b3c <gpio_add_callback+0xe>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    4b36:	2201      	movs	r2, #1
    4b38:	4798      	blx	r3
}
    4b3a:	bd08      	pop	{r3, pc}
		return -ENOTSUP;
    4b3c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4b40:	e7fb      	b.n	4b3a <gpio_add_callback+0xc>

00004b42 <k_msleep>:
{
    4b42:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    4b44:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    4b48:	17c1      	asrs	r1, r0, #31
    4b4a:	03c9      	lsls	r1, r1, #15
    4b4c:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    4b50:	03c0      	lsls	r0, r0, #15
    4b52:	f240 33e7 	movw	r3, #999	; 0x3e7
    4b56:	18c0      	adds	r0, r0, r3
    4b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4b5c:	f04f 0300 	mov.w	r3, #0
    4b60:	f141 0100 	adc.w	r1, r1, #0
    4b64:	f7fb facc 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    4b68:	f7ff fbd0 	bl	430c <z_impl_k_sleep>
}
    4b6c:	bd08      	pop	{r3, pc}

00004b6e <arch_printk_char_out>:
}
    4b6e:	2000      	movs	r0, #0
    4b70:	4770      	bx	lr

00004b72 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    4b72:	b40f      	push	{r0, r1, r2, r3}
    4b74:	b500      	push	{lr}
    4b76:	b083      	sub	sp, #12
    4b78:	a904      	add	r1, sp, #16
    4b7a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    4b7e:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    4b80:	f7fb fc90 	bl	4a4 <vprintk>

	va_end(ap);
}
    4b84:	b003      	add	sp, #12
    4b86:	f85d eb04 	ldr.w	lr, [sp], #4
    4b8a:	b004      	add	sp, #16
    4b8c:	4770      	bx	lr

00004b8e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4b8e:	b508      	push	{r3, lr}
    4b90:	4604      	mov	r4, r0
    4b92:	4608      	mov	r0, r1
    4b94:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4b96:	461a      	mov	r2, r3
    4b98:	47a0      	blx	r4
	return z_impl_z_current_get();
    4b9a:	f7ff fbe1 	bl	4360 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    4b9e:	f7fc fdeb 	bl	1778 <z_impl_k_thread_abort>

00004ba2 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    4ba2:	f001 0107 	and.w	r1, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4ba6:	8b03      	ldrh	r3, [r0, #24]
    4ba8:	f023 0307 	bic.w	r3, r3, #7
    4bac:	430b      	orrs	r3, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4bae:	8303      	strh	r3, [r0, #24]
}
    4bb0:	4770      	bx	lr

00004bb2 <notify_monitors>:
{
    4bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bb6:	4606      	mov	r6, r0
    4bb8:	460f      	mov	r7, r1
    4bba:	4690      	mov	r8, r2
	return list->head;
    4bbc:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4bbe:	b121      	cbz	r1, 4bca <notify_monitors+0x18>
	return node->next;
    4bc0:	680c      	ldr	r4, [r1, #0]
    4bc2:	b13c      	cbz	r4, 4bd4 <notify_monitors+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4bc4:	b931      	cbnz	r1, 4bd4 <notify_monitors+0x22>
    4bc6:	460c      	mov	r4, r1
    4bc8:	e004      	b.n	4bd4 <notify_monitors+0x22>
    4bca:	460c      	mov	r4, r1
    4bcc:	e002      	b.n	4bd4 <notify_monitors+0x22>
    4bce:	4623      	mov	r3, r4
    4bd0:	4621      	mov	r1, r4
    4bd2:	461c      	mov	r4, r3
    4bd4:	b169      	cbz	r1, 4bf2 <notify_monitors+0x40>
		mon->callback(mgr, mon, state, res);
    4bd6:	684d      	ldr	r5, [r1, #4]
    4bd8:	4643      	mov	r3, r8
    4bda:	463a      	mov	r2, r7
    4bdc:	4630      	mov	r0, r6
    4bde:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4be0:	2c00      	cmp	r4, #0
    4be2:	d0f4      	beq.n	4bce <notify_monitors+0x1c>
	return node->next;
    4be4:	6823      	ldr	r3, [r4, #0]
    4be6:	2b00      	cmp	r3, #0
    4be8:	d0f2      	beq.n	4bd0 <notify_monitors+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4bea:	2c00      	cmp	r4, #0
    4bec:	d1f0      	bne.n	4bd0 <notify_monitors+0x1e>
    4bee:	4623      	mov	r3, r4
    4bf0:	e7ee      	b.n	4bd0 <notify_monitors+0x1e>
}
    4bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004bf6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4bf6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4bf8:	f013 0307 	ands.w	r3, r3, #7
    4bfc:	d103      	bne.n	4c06 <process_recheck+0x10>
	return list->head;
    4bfe:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    4c00:	b10a      	cbz	r2, 4c06 <process_recheck+0x10>
		evt = EVT_START;
    4c02:	2003      	movs	r0, #3
    4c04:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4c06:	2b02      	cmp	r3, #2
    4c08:	d003      	beq.n	4c12 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    4c0a:	2b01      	cmp	r3, #1
    4c0c:	d006      	beq.n	4c1c <process_recheck+0x26>
	int evt = EVT_NOP;
    4c0e:	2000      	movs	r0, #0
    4c10:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    4c12:	8b42      	ldrh	r2, [r0, #26]
    4c14:	2a00      	cmp	r2, #0
    4c16:	d1f8      	bne.n	4c0a <process_recheck+0x14>
		evt = EVT_STOP;
    4c18:	2004      	movs	r0, #4
    4c1a:	4770      	bx	lr
    4c1c:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    4c1e:	b10b      	cbz	r3, 4c24 <process_recheck+0x2e>
		evt = EVT_RESET;
    4c20:	2005      	movs	r0, #5
}
    4c22:	4770      	bx	lr
	int evt = EVT_NOP;
    4c24:	2000      	movs	r0, #0
    4c26:	4770      	bx	lr

00004c28 <process_complete>:
{
    4c28:	b510      	push	{r4, lr}
    4c2a:	4604      	mov	r4, r0
    4c2c:	468c      	mov	ip, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4c2e:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    4c30:	2a00      	cmp	r2, #0
    4c32:	db07      	blt.n	4c44 <process_complete+0x1c>
    4c34:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4c38:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4c3a:	2a01      	cmp	r2, #1
    4c3c:	d90e      	bls.n	4c5c <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4c3e:	2b04      	cmp	r3, #4
    4c40:	d036      	beq.n	4cb0 <process_complete+0x88>
}
    4c42:	bd10      	pop	{r4, pc}
		*clients = mgr->clients;
    4c44:	e9d0 0100 	ldrd	r0, r1, [r0]
    4c48:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    4c4c:	2300      	movs	r3, #0
    4c4e:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    4c50:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    4c52:	2101      	movs	r1, #1
    4c54:	4620      	mov	r0, r4
    4c56:	f7ff ffa4 	bl	4ba2 <set_state>
    4c5a:	e7f2      	b.n	4c42 <process_complete+0x1a>
		*clients = mgr->clients;
    4c5c:	e9d0 0100 	ldrd	r0, r1, [r0]
    4c60:	e88c 0003 	stmia.w	ip, {r0, r1}
	list->head = NULL;
    4c64:	2200      	movs	r2, #0
    4c66:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    4c68:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    4c6a:	2b06      	cmp	r3, #6
    4c6c:	d11b      	bne.n	4ca6 <process_complete+0x7e>
	return list->head;
    4c6e:	f8dc 3000 	ldr.w	r3, [ip]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4c72:	b153      	cbz	r3, 4c8a <process_complete+0x62>
				mgr->refs += 1U;
    4c74:	8b62      	ldrh	r2, [r4, #26]
    4c76:	3201      	adds	r2, #1
    4c78:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4c7a:	461a      	mov	r2, r3
	return node->next;
    4c7c:	681b      	ldr	r3, [r3, #0]
    4c7e:	2b00      	cmp	r3, #0
    4c80:	d0f7      	beq.n	4c72 <process_complete+0x4a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4c82:	2a00      	cmp	r2, #0
    4c84:	d1f5      	bne.n	4c72 <process_complete+0x4a>
    4c86:	4613      	mov	r3, r2
    4c88:	e7f3      	b.n	4c72 <process_complete+0x4a>
			set_state(mgr, ONOFF_STATE_ON);
    4c8a:	2102      	movs	r1, #2
    4c8c:	4620      	mov	r0, r4
    4c8e:	f7ff ff88 	bl	4ba2 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    4c92:	4620      	mov	r0, r4
    4c94:	f7ff ffaf 	bl	4bf6 <process_recheck>
    4c98:	2800      	cmp	r0, #0
    4c9a:	d0d2      	beq.n	4c42 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4c9c:	8b23      	ldrh	r3, [r4, #24]
    4c9e:	f043 0320 	orr.w	r3, r3, #32
    4ca2:	8323      	strh	r3, [r4, #24]
    4ca4:	e7cd      	b.n	4c42 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    4ca6:	2100      	movs	r1, #0
    4ca8:	4620      	mov	r0, r4
    4caa:	f7ff ff7a 	bl	4ba2 <set_state>
    4cae:	e7f0      	b.n	4c92 <process_complete+0x6a>
		set_state(mgr, ONOFF_STATE_OFF);
    4cb0:	2100      	movs	r1, #0
    4cb2:	f7ff ff76 	bl	4ba2 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    4cb6:	4620      	mov	r0, r4
    4cb8:	f7ff ff9d 	bl	4bf6 <process_recheck>
    4cbc:	2800      	cmp	r0, #0
    4cbe:	d0c0      	beq.n	4c42 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4cc0:	8b23      	ldrh	r3, [r4, #24]
    4cc2:	f043 0320 	orr.w	r3, r3, #32
    4cc6:	8323      	strh	r3, [r4, #24]
}
    4cc8:	e7bb      	b.n	4c42 <process_complete+0x1a>

00004cca <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    4cca:	b150      	cbz	r0, 4ce2 <validate_args+0x18>
{
    4ccc:	b510      	push	{r4, lr}
    4cce:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4cd0:	b151      	cbz	r1, 4ce8 <validate_args+0x1e>
	int rv = sys_notify_validate(&cli->notify);
    4cd2:	1d08      	adds	r0, r1, #4
    4cd4:	f000 f8c4 	bl	4e60 <sys_notify_validate>
	if ((rv == 0)
    4cd8:	b910      	cbnz	r0, 4ce0 <validate_args+0x16>
	    && ((cli->notify.flags
    4cda:	68a3      	ldr	r3, [r4, #8]
    4cdc:	2b03      	cmp	r3, #3
    4cde:	d806      	bhi.n	4cee <validate_args+0x24>
}
    4ce0:	bd10      	pop	{r4, pc}
		return -EINVAL;
    4ce2:	f06f 0015 	mvn.w	r0, #21
}
    4ce6:	4770      	bx	lr
		return -EINVAL;
    4ce8:	f06f 0015 	mvn.w	r0, #21
    4cec:	e7f8      	b.n	4ce0 <validate_args+0x16>
		rv = -EINVAL;
    4cee:	f06f 0015 	mvn.w	r0, #21
    4cf2:	e7f5      	b.n	4ce0 <validate_args+0x16>

00004cf4 <notify_one>:
{
    4cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4cf8:	4607      	mov	r7, r0
    4cfa:	460c      	mov	r4, r1
    4cfc:	4616      	mov	r6, r2
    4cfe:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4d00:	4619      	mov	r1, r3
    4d02:	1d20      	adds	r0, r4, #4
    4d04:	f000 f8c3 	bl	4e8e <sys_notify_finalize>
	if (cb) {
    4d08:	b128      	cbz	r0, 4d16 <notify_one+0x22>
    4d0a:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    4d0c:	462b      	mov	r3, r5
    4d0e:	4632      	mov	r2, r6
    4d10:	4621      	mov	r1, r4
    4d12:	4638      	mov	r0, r7
    4d14:	47c0      	blx	r8
}
    4d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004d1a <notify_all>:
{
    4d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d1e:	4680      	mov	r8, r0
    4d20:	460c      	mov	r4, r1
    4d22:	4617      	mov	r7, r2
    4d24:	461e      	mov	r6, r3
	while (!sys_slist_is_empty(list)) {
    4d26:	e004      	b.n	4d32 <notify_all+0x18>
		notify_one(mgr, cli, state, res);
    4d28:	4633      	mov	r3, r6
    4d2a:	463a      	mov	r2, r7
    4d2c:	4640      	mov	r0, r8
    4d2e:	f7ff ffe1 	bl	4cf4 <notify_one>
	return list->head;
    4d32:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    4d34:	b131      	cbz	r1, 4d44 <notify_all+0x2a>
	return node->next;
    4d36:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    4d38:	6025      	str	r5, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4d3a:	6863      	ldr	r3, [r4, #4]
    4d3c:	428b      	cmp	r3, r1
    4d3e:	d1f3      	bne.n	4d28 <notify_all+0xe>
	list->tail = node;
    4d40:	6065      	str	r5, [r4, #4]
}
    4d42:	e7f1      	b.n	4d28 <notify_all+0xe>
}
    4d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004d48 <transition_complete>:
{
    4d48:	b508      	push	{r3, lr}
	__asm__ volatile(
    4d4a:	f04f 0c20 	mov.w	ip, #32
    4d4e:	f3ef 8211 	mrs	r2, BASEPRI
    4d52:	f38c 8812 	msr	BASEPRI_MAX, ip
    4d56:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4d5a:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    4d5c:	2101      	movs	r1, #1
    4d5e:	f7fb fbaf 	bl	4c0 <process_event>
}
    4d62:	bd08      	pop	{r3, pc}

00004d64 <onoff_manager_init>:
	if ((mgr == NULL)
    4d64:	4603      	mov	r3, r0
    4d66:	b170      	cbz	r0, 4d86 <onoff_manager_init+0x22>
	    || (transitions == NULL)
    4d68:	b181      	cbz	r1, 4d8c <onoff_manager_init+0x28>
	    || (transitions->start == NULL)
    4d6a:	680a      	ldr	r2, [r1, #0]
    4d6c:	b18a      	cbz	r2, 4d92 <onoff_manager_init+0x2e>
	    || (transitions->stop == NULL)) {
    4d6e:	684a      	ldr	r2, [r1, #4]
    4d70:	b192      	cbz	r2, 4d98 <onoff_manager_init+0x34>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4d72:	2000      	movs	r0, #0
    4d74:	6018      	str	r0, [r3, #0]
    4d76:	6058      	str	r0, [r3, #4]
    4d78:	6098      	str	r0, [r3, #8]
    4d7a:	60d8      	str	r0, [r3, #12]
    4d7c:	6118      	str	r0, [r3, #16]
    4d7e:	6158      	str	r0, [r3, #20]
    4d80:	6198      	str	r0, [r3, #24]
    4d82:	6119      	str	r1, [r3, #16]
	return 0;
    4d84:	4770      	bx	lr
		return -EINVAL;
    4d86:	f06f 0015 	mvn.w	r0, #21
    4d8a:	4770      	bx	lr
    4d8c:	f06f 0015 	mvn.w	r0, #21
    4d90:	4770      	bx	lr
    4d92:	f06f 0015 	mvn.w	r0, #21
    4d96:	4770      	bx	lr
    4d98:	f06f 0015 	mvn.w	r0, #21
}
    4d9c:	4770      	bx	lr

00004d9e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4d9e:	b570      	push	{r4, r5, r6, lr}
    4da0:	4605      	mov	r5, r0
    4da2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4da4:	f7ff ff91 	bl	4cca <validate_args>

	if (rv < 0) {
    4da8:	1e04      	subs	r4, r0, #0
    4daa:	db30      	blt.n	4e0e <onoff_request+0x70>
    4dac:	f04f 0320 	mov.w	r3, #32
    4db0:	f3ef 8211 	mrs	r2, BASEPRI
    4db4:	f383 8812 	msr	BASEPRI_MAX, r3
    4db8:	f3bf 8f6f 	isb	sy
    4dbc:	4696      	mov	lr, r2
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4dbe:	f8b5 c018 	ldrh.w	ip, [r5, #24]
    4dc2:	f00c 0c07 	and.w	ip, ip, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4dc6:	8b6b      	ldrh	r3, [r5, #26]
    4dc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4dcc:	428b      	cmp	r3, r1
    4dce:	d02c      	beq.n	4e2a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    4dd0:	4664      	mov	r4, ip
	if (state == ONOFF_STATE_ON) {
    4dd2:	f1bc 0f02 	cmp.w	ip, #2
    4dd6:	d008      	beq.n	4dea <onoff_request+0x4c>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    4dd8:	f1bc 0f06 	cmp.w	ip, #6
    4ddc:	d819      	bhi.n	4e12 <onoff_request+0x74>
    4dde:	e8df f00c 	tbb	[pc, ip]
    4de2:	181e      	.short	0x181e
    4de4:	2a1e1818 	.word	0x2a1e1818
    4de8:	1e          	.byte	0x1e
    4de9:	00          	.byte	0x00
		mgr->refs += 1U;
    4dea:	3301      	adds	r3, #1
    4dec:	836b      	strh	r3, [r5, #26]
		notify = true;
    4dee:	2301      	movs	r3, #1
	bool start = false;             /* trigger a start transition */
    4df0:	2100      	movs	r1, #0
	bool add_client = false;        /* add client to pending list */
    4df2:	4608      	mov	r0, r1
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
	}

out:
	if (add_client) {
    4df4:	b128      	cbz	r0, 4e02 <onoff_request+0x64>
	parent->next = child;
    4df6:	2000      	movs	r0, #0
    4df8:	6030      	str	r0, [r6, #0]
	return list->tail;
    4dfa:	6868      	ldr	r0, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    4dfc:	b308      	cbz	r0, 4e42 <onoff_request+0xa4>
	parent->next = child;
    4dfe:	6006      	str	r6, [r0, #0]
	list->tail = node;
    4e00:	606e      	str	r6, [r5, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    4e02:	bb09      	cbnz	r1, 4e48 <onoff_request+0xaa>
	__asm__ volatile(
    4e04:	f38e 8811 	msr	BASEPRI, lr
    4e08:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4e0c:	bb0b      	cbnz	r3, 4e52 <onoff_request+0xb4>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    4e0e:	4620      	mov	r0, r4
    4e10:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    4e12:	f06f 0404 	mvn.w	r4, #4
    4e16:	2300      	movs	r3, #0
    4e18:	4619      	mov	r1, r3
    4e1a:	4618      	mov	r0, r3
    4e1c:	e7ea      	b.n	4df4 <onoff_request+0x56>
		start = (state == ONOFF_STATE_OFF);
    4e1e:	fabc f18c 	clz	r1, ip
    4e22:	0949      	lsrs	r1, r1, #5
	bool notify = false;            /* do client notification */
    4e24:	2300      	movs	r3, #0
		add_client = true;
    4e26:	2001      	movs	r0, #1
    4e28:	e7e4      	b.n	4df4 <onoff_request+0x56>
		rv = -EAGAIN;
    4e2a:	f06f 040a 	mvn.w	r4, #10
	bool notify = false;            /* do client notification */
    4e2e:	2300      	movs	r3, #0
	bool start = false;             /* trigger a start transition */
    4e30:	4619      	mov	r1, r3
	bool add_client = false;        /* add client to pending list */
    4e32:	4618      	mov	r0, r3
    4e34:	e7de      	b.n	4df4 <onoff_request+0x56>
	if (state == ONOFF_STATE_ON) {
    4e36:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4e3a:	2300      	movs	r3, #0
    4e3c:	4619      	mov	r1, r3
    4e3e:	4618      	mov	r0, r3
    4e40:	e7d8      	b.n	4df4 <onoff_request+0x56>
    4e42:	606e      	str	r6, [r5, #4]
	list->head = node;
    4e44:	602e      	str	r6, [r5, #0]
}
    4e46:	e7dc      	b.n	4e02 <onoff_request+0x64>
		process_event(mgr, EVT_RECHECK, key);
    4e48:	2102      	movs	r1, #2
    4e4a:	4628      	mov	r0, r5
    4e4c:	f7fb fb38 	bl	4c0 <process_event>
    4e50:	e7dd      	b.n	4e0e <onoff_request+0x70>
			notify_one(mgr, cli, state, 0);
    4e52:	2300      	movs	r3, #0
    4e54:	4662      	mov	r2, ip
    4e56:	4631      	mov	r1, r6
    4e58:	4628      	mov	r0, r5
    4e5a:	f7ff ff4b 	bl	4cf4 <notify_one>
    4e5e:	e7d6      	b.n	4e0e <onoff_request+0x70>

00004e60 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4e60:	4602      	mov	r2, r0
    4e62:	b158      	cbz	r0, 4e7c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4e64:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4e66:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4e6a:	2b01      	cmp	r3, #1
    4e6c:	d003      	beq.n	4e76 <sys_notify_validate+0x16>
    4e6e:	2b03      	cmp	r3, #3
    4e70:	d107      	bne.n	4e82 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4e72:	6803      	ldr	r3, [r0, #0]
    4e74:	b143      	cbz	r3, 4e88 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4e76:	2000      	movs	r0, #0
    4e78:	6090      	str	r0, [r2, #8]
    4e7a:	4770      	bx	lr
		return -EINVAL;
    4e7c:	f06f 0015 	mvn.w	r0, #21
    4e80:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    4e82:	f06f 0015 	mvn.w	r0, #21
    4e86:	4770      	bx	lr
			rv = -EINVAL;
    4e88:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4e8c:	4770      	bx	lr

00004e8e <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    4e8e:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4e90:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4e92:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4e96:	6081      	str	r1, [r0, #8]
	switch (method) {
    4e98:	2a03      	cmp	r2, #3
    4e9a:	d103      	bne.n	4ea4 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4e9c:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4e9e:	2200      	movs	r2, #0
    4ea0:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4ea2:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    4ea4:	2000      	movs	r0, #0
    4ea6:	e7fa      	b.n	4e9e <sys_notify_finalize+0x10>

00004ea8 <extract_decimal>:
{
    4ea8:	4684      	mov	ip, r0
	const char *sp = *str;
    4eaa:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    4eac:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    4eae:	e006      	b.n	4ebe <extract_decimal+0x16>
		val = 10U * val + *sp++ - '0';
    4eb0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4eb4:	3201      	adds	r2, #1
    4eb6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    4eba:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4ebe:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    4ec0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    4ec4:	2909      	cmp	r1, #9
    4ec6:	d9f3      	bls.n	4eb0 <extract_decimal+0x8>
	*str = sp;
    4ec8:	f8cc 2000 	str.w	r2, [ip]
}
    4ecc:	4770      	bx	lr

00004ece <extract_width>:
{
    4ece:	b530      	push	{r4, r5, lr}
    4ed0:	b083      	sub	sp, #12
    4ed2:	4604      	mov	r4, r0
    4ed4:	9101      	str	r1, [sp, #4]
	conv->width_present = true;
    4ed6:	7803      	ldrb	r3, [r0, #0]
    4ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4edc:	7003      	strb	r3, [r0, #0]
	if (*sp == '*') {
    4ede:	460d      	mov	r5, r1
    4ee0:	780b      	ldrb	r3, [r1, #0]
    4ee2:	2b2a      	cmp	r3, #42	; 0x2a
    4ee4:	d018      	beq.n	4f18 <extract_width+0x4a>
	size_t width = extract_decimal(&sp);
    4ee6:	a801      	add	r0, sp, #4
    4ee8:	f7ff ffde 	bl	4ea8 <extract_decimal>
	if (sp != wp) {
    4eec:	9b01      	ldr	r3, [sp, #4]
    4eee:	429d      	cmp	r5, r3
    4ef0:	d00f      	beq.n	4f12 <extract_width+0x44>
		conv->width_present = true;
    4ef2:	7823      	ldrb	r3, [r4, #0]
    4ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4ef8:	7023      	strb	r3, [r4, #0]
		conv->width_value = width;
    4efa:	6060      	str	r0, [r4, #4]
		conv->unsupported |= ((conv->width_value < 0)
    4efc:	b2db      	uxtb	r3, r3
    4efe:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    4f02:	2800      	cmp	r0, #0
    4f04:	db10      	blt.n	4f28 <extract_width+0x5a>
    4f06:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    4f08:	4313      	orrs	r3, r2
    4f0a:	7822      	ldrb	r2, [r4, #0]
    4f0c:	f363 0241 	bfi	r2, r3, #1, #1
    4f10:	7022      	strb	r2, [r4, #0]
	return sp;
    4f12:	9801      	ldr	r0, [sp, #4]
}
    4f14:	b003      	add	sp, #12
    4f16:	bd30      	pop	{r4, r5, pc}
		conv->width_star = true;
    4f18:	7843      	ldrb	r3, [r0, #1]
    4f1a:	f043 0301 	orr.w	r3, r3, #1
    4f1e:	7043      	strb	r3, [r0, #1]
		return ++sp;
    4f20:	4608      	mov	r0, r1
    4f22:	3001      	adds	r0, #1
    4f24:	9001      	str	r0, [sp, #4]
    4f26:	e7f5      	b.n	4f14 <extract_width+0x46>
				      || (width != (size_t)conv->width_value));
    4f28:	2201      	movs	r2, #1
    4f2a:	e7ed      	b.n	4f08 <extract_width+0x3a>

00004f2c <extract_prec>:
{
    4f2c:	b510      	push	{r4, lr}
    4f2e:	b082      	sub	sp, #8
    4f30:	9101      	str	r1, [sp, #4]
	conv->prec_present = (*sp == '.');
    4f32:	780b      	ldrb	r3, [r1, #0]
    4f34:	2b2e      	cmp	r3, #46	; 0x2e
    4f36:	bf14      	ite	ne
    4f38:	2300      	movne	r3, #0
    4f3a:	2301      	moveq	r3, #1
    4f3c:	7842      	ldrb	r2, [r0, #1]
    4f3e:	f363 0241 	bfi	r2, r3, #1, #1
    4f42:	7042      	strb	r2, [r0, #1]
	if (!conv->prec_present) {
    4f44:	b1c3      	cbz	r3, 4f78 <extract_prec+0x4c>
    4f46:	4604      	mov	r4, r0
	++sp;
    4f48:	9b01      	ldr	r3, [sp, #4]
    4f4a:	1c5a      	adds	r2, r3, #1
    4f4c:	9201      	str	r2, [sp, #4]
	if (*sp == '*') {
    4f4e:	785b      	ldrb	r3, [r3, #1]
    4f50:	2b2a      	cmp	r3, #42	; 0x2a
    4f52:	d013      	beq.n	4f7c <extract_prec+0x50>
	size_t prec = extract_decimal(&sp);
    4f54:	a801      	add	r0, sp, #4
    4f56:	f7ff ffa7 	bl	4ea8 <extract_decimal>
	conv->prec_value = prec;
    4f5a:	60a0      	str	r0, [r4, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    4f5c:	7823      	ldrb	r3, [r4, #0]
    4f5e:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    4f62:	2800      	cmp	r0, #0
    4f64:	db12      	blt.n	4f8c <extract_prec+0x60>
    4f66:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    4f68:	4313      	orrs	r3, r2
    4f6a:	7822      	ldrb	r2, [r4, #0]
    4f6c:	f363 0241 	bfi	r2, r3, #1, #1
    4f70:	7022      	strb	r2, [r4, #0]
	return sp;
    4f72:	9801      	ldr	r0, [sp, #4]
}
    4f74:	b002      	add	sp, #8
    4f76:	bd10      	pop	{r4, pc}
		return sp;
    4f78:	4608      	mov	r0, r1
    4f7a:	e7fb      	b.n	4f74 <extract_prec+0x48>
		conv->prec_star = true;
    4f7c:	7843      	ldrb	r3, [r0, #1]
    4f7e:	f043 0304 	orr.w	r3, r3, #4
    4f82:	7043      	strb	r3, [r0, #1]
		return ++sp;
    4f84:	4610      	mov	r0, r2
    4f86:	3001      	adds	r0, #1
    4f88:	9001      	str	r0, [sp, #4]
    4f8a:	e7f3      	b.n	4f74 <extract_prec+0x48>
			      || (prec != (size_t)conv->prec_value));
    4f8c:	2201      	movs	r2, #1
    4f8e:	e7eb      	b.n	4f68 <extract_prec+0x3c>

00004f90 <extract_length>:
{
    4f90:	4602      	mov	r2, r0
	switch (*sp) {
    4f92:	780b      	ldrb	r3, [r1, #0]
    4f94:	3b4c      	subs	r3, #76	; 0x4c
    4f96:	2b2e      	cmp	r3, #46	; 0x2e
    4f98:	d85b      	bhi.n	5052 <extract_length+0xc2>
    4f9a:	e8df f003 	tbb	[pc, r3]
    4f9e:	5a4f      	.short	0x5a4f
    4fa0:	5a5a5a5a 	.word	0x5a5a5a5a
    4fa4:	5a5a5a5a 	.word	0x5a5a5a5a
    4fa8:	5a5a5a5a 	.word	0x5a5a5a5a
    4fac:	5a5a5a5a 	.word	0x5a5a5a5a
    4fb0:	5a5a5a5a 	.word	0x5a5a5a5a
    4fb4:	5a5a5a5a 	.word	0x5a5a5a5a
    4fb8:	5a185a5a 	.word	0x5a185a5a
    4fbc:	5a295a3a 	.word	0x5a295a3a
    4fc0:	5a5a5a5a 	.word	0x5a5a5a5a
    4fc4:	5a485a5a 	.word	0x5a485a5a
    4fc8:	5a5a5a5a 	.word	0x5a5a5a5a
    4fcc:	41          	.byte	0x41
    4fcd:	00          	.byte	0x00
		if (*++sp == 'h') {
    4fce:	1c48      	adds	r0, r1, #1
    4fd0:	784b      	ldrb	r3, [r1, #1]
    4fd2:	2b68      	cmp	r3, #104	; 0x68
    4fd4:	d005      	beq.n	4fe2 <extract_length+0x52>
			conv->length_mod = LENGTH_H;
    4fd6:	7853      	ldrb	r3, [r2, #1]
    4fd8:	2102      	movs	r1, #2
    4fda:	f361 03c6 	bfi	r3, r1, #3, #4
    4fde:	7053      	strb	r3, [r2, #1]
    4fe0:	4770      	bx	lr
			conv->length_mod = LENGTH_HH;
    4fe2:	7853      	ldrb	r3, [r2, #1]
    4fe4:	2001      	movs	r0, #1
    4fe6:	f360 03c6 	bfi	r3, r0, #3, #4
    4fea:	7053      	strb	r3, [r2, #1]
			++sp;
    4fec:	1c88      	adds	r0, r1, #2
    4fee:	4770      	bx	lr
		if (*++sp == 'l') {
    4ff0:	1c48      	adds	r0, r1, #1
    4ff2:	784b      	ldrb	r3, [r1, #1]
    4ff4:	2b6c      	cmp	r3, #108	; 0x6c
    4ff6:	d005      	beq.n	5004 <extract_length+0x74>
			conv->length_mod = LENGTH_L;
    4ff8:	7853      	ldrb	r3, [r2, #1]
    4ffa:	2103      	movs	r1, #3
    4ffc:	f361 03c6 	bfi	r3, r1, #3, #4
    5000:	7053      	strb	r3, [r2, #1]
    5002:	4770      	bx	lr
			conv->length_mod = LENGTH_LL;
    5004:	7853      	ldrb	r3, [r2, #1]
    5006:	2004      	movs	r0, #4
    5008:	f360 03c6 	bfi	r3, r0, #3, #4
    500c:	7053      	strb	r3, [r2, #1]
			++sp;
    500e:	1c88      	adds	r0, r1, #2
    5010:	4770      	bx	lr
		conv->length_mod = LENGTH_J;
    5012:	7853      	ldrb	r3, [r2, #1]
    5014:	2005      	movs	r0, #5
    5016:	f360 03c6 	bfi	r3, r0, #3, #4
    501a:	7053      	strb	r3, [r2, #1]
		++sp;
    501c:	1c48      	adds	r0, r1, #1
		break;
    501e:	4770      	bx	lr
		conv->length_mod = LENGTH_Z;
    5020:	7853      	ldrb	r3, [r2, #1]
    5022:	2006      	movs	r0, #6
    5024:	f360 03c6 	bfi	r3, r0, #3, #4
    5028:	7053      	strb	r3, [r2, #1]
		++sp;
    502a:	1c48      	adds	r0, r1, #1
		break;
    502c:	4770      	bx	lr
		conv->length_mod = LENGTH_T;
    502e:	7853      	ldrb	r3, [r2, #1]
    5030:	2007      	movs	r0, #7
    5032:	f360 03c6 	bfi	r3, r0, #3, #4
    5036:	7053      	strb	r3, [r2, #1]
		++sp;
    5038:	1c48      	adds	r0, r1, #1
		break;
    503a:	4770      	bx	lr
		conv->length_mod = LENGTH_UPPER_L;
    503c:	7853      	ldrb	r3, [r2, #1]
    503e:	2008      	movs	r0, #8
    5040:	f360 03c6 	bfi	r3, r0, #3, #4
    5044:	7053      	strb	r3, [r2, #1]
		++sp;
    5046:	1c48      	adds	r0, r1, #1
		conv->unsupported = true;
    5048:	7813      	ldrb	r3, [r2, #0]
    504a:	f043 0302 	orr.w	r3, r3, #2
    504e:	7013      	strb	r3, [r2, #0]
		break;
    5050:	4770      	bx	lr
		conv->length_mod = LENGTH_NONE;
    5052:	7853      	ldrb	r3, [r2, #1]
    5054:	f36f 03c6 	bfc	r3, #3, #4
    5058:	7053      	strb	r3, [r2, #1]
		break;
    505a:	4608      	mov	r0, r1
}
    505c:	4770      	bx	lr

0000505e <extract_specifier>:
{
    505e:	b500      	push	{lr}
    5060:	4602      	mov	r2, r0
	conv->specifier = *sp++;
    5062:	4608      	mov	r0, r1
    5064:	f810 3b01 	ldrb.w	r3, [r0], #1
    5068:	70d3      	strb	r3, [r2, #3]
	switch (conv->specifier) {
    506a:	2b78      	cmp	r3, #120	; 0x78
    506c:	d817      	bhi.n	509e <extract_specifier+0x40>
    506e:	2b6e      	cmp	r3, #110	; 0x6e
    5070:	d229      	bcs.n	50c6 <extract_specifier+0x68>
    5072:	2b69      	cmp	r3, #105	; 0x69
    5074:	d813      	bhi.n	509e <extract_specifier+0x40>
    5076:	2b58      	cmp	r3, #88	; 0x58
    5078:	d317      	bcc.n	50aa <extract_specifier+0x4c>
    507a:	f1a3 0c58 	sub.w	ip, r3, #88	; 0x58
    507e:	fa5f fc8c 	uxtb.w	ip, ip
    5082:	2101      	movs	r1, #1
    5084:	fa01 f10c 	lsl.w	r1, r1, ip
    5088:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    508c:	d114      	bne.n	50b8 <extract_specifier+0x5a>
    508e:	f640 0c01 	movw	ip, #2049	; 0x801
    5092:	ea11 0f0c 	tst.w	r1, ip
    5096:	d155      	bne.n	5144 <extract_specifier+0xe6>
    5098:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    509c:	d13a      	bne.n	5114 <extract_specifier+0xb6>
		conv->invalid = true;
    509e:	7813      	ldrb	r3, [r2, #0]
    50a0:	f043 0301 	orr.w	r3, r3, #1
    50a4:	7013      	strb	r3, [r2, #0]
	bool unsupported = false;
    50a6:	2100      	movs	r1, #0
		break;
    50a8:	e042      	b.n	5130 <extract_specifier+0xd2>
	switch (conv->specifier) {
    50aa:	2b41      	cmp	r3, #65	; 0x41
    50ac:	d004      	beq.n	50b8 <extract_specifier+0x5a>
    50ae:	d3f6      	bcc.n	509e <extract_specifier+0x40>
    50b0:	3b45      	subs	r3, #69	; 0x45
    50b2:	b2db      	uxtb	r3, r3
    50b4:	2b02      	cmp	r3, #2
    50b6:	d8f2      	bhi.n	509e <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_FP;
    50b8:	7893      	ldrb	r3, [r2, #2]
    50ba:	2104      	movs	r1, #4
    50bc:	f361 0302 	bfi	r3, r1, #0, #3
    50c0:	7093      	strb	r3, [r2, #2]
			unsupported = true;
    50c2:	2101      	movs	r1, #1
			break;
    50c4:	e034      	b.n	5130 <extract_specifier+0xd2>
	switch (conv->specifier) {
    50c6:	f1a3 016e 	sub.w	r1, r3, #110	; 0x6e
    50ca:	b2c9      	uxtb	r1, r1
    50cc:	f04f 0c01 	mov.w	ip, #1
    50d0:	fa0c fc01 	lsl.w	ip, ip, r1
    50d4:	f240 4182 	movw	r1, #1154	; 0x482
    50d8:	ea1c 0f01 	tst.w	ip, r1
    50dc:	bf14      	ite	ne
    50de:	f04f 0e01 	movne.w	lr, #1
    50e2:	f04f 0e00 	moveq.w	lr, #0
    50e6:	d12d      	bne.n	5144 <extract_specifier+0xe6>
    50e8:	f01c 0f24 	tst.w	ip, #36	; 0x24
    50ec:	bf14      	ite	ne
    50ee:	2101      	movne	r1, #1
    50f0:	2100      	moveq	r1, #0
    50f2:	d139      	bne.n	5168 <extract_specifier+0x10a>
    50f4:	f01c 0c01 	ands.w	ip, ip, #1
    50f8:	d0d1      	beq.n	509e <extract_specifier+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    50fa:	7893      	ldrb	r3, [r2, #2]
    50fc:	f04f 0e03 	mov.w	lr, #3
    5100:	f36e 0302 	bfi	r3, lr, #0, #3
    5104:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    5106:	7853      	ldrb	r3, [r2, #1]
    5108:	f003 0378 	and.w	r3, r3, #120	; 0x78
    510c:	2b40      	cmp	r3, #64	; 0x40
    510e:	d10f      	bne.n	5130 <extract_specifier+0xd2>
			unsupported = true;
    5110:	4661      	mov	r1, ip
    5112:	e00d      	b.n	5130 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_SINT;
    5114:	7891      	ldrb	r1, [r2, #2]
    5116:	f04f 0c01 	mov.w	ip, #1
    511a:	f36c 0102 	bfi	r1, ip, #0, #3
    511e:	7091      	strb	r1, [r2, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
    5120:	7851      	ldrb	r1, [r2, #1]
    5122:	f001 0178 	and.w	r1, r1, #120	; 0x78
    5126:	2940      	cmp	r1, #64	; 0x40
    5128:	d013      	beq.n	5152 <extract_specifier+0xf4>
		if (conv->specifier == 'c') {
    512a:	2b63      	cmp	r3, #99	; 0x63
    512c:	d018      	beq.n	5160 <extract_specifier+0x102>
	bool unsupported = false;
    512e:	2100      	movs	r1, #0
	conv->unsupported |= unsupported;
    5130:	7813      	ldrb	r3, [r2, #0]
    5132:	f3c3 0c40 	ubfx	ip, r3, #1, #1
    5136:	ea41 010c 	orr.w	r1, r1, ip
    513a:	f361 0341 	bfi	r3, r1, #1, #1
    513e:	7013      	strb	r3, [r2, #0]
}
    5140:	f85d fb04 	ldr.w	pc, [sp], #4
		conv->specifier_cat = SPECIFIER_UINT;
    5144:	7891      	ldrb	r1, [r2, #2]
    5146:	f04f 0c02 	mov.w	ip, #2
    514a:	f36c 0102 	bfi	r1, ip, #0, #3
    514e:	7091      	strb	r1, [r2, #2]
    5150:	e7e6      	b.n	5120 <extract_specifier+0xc2>
			conv->invalid = true;
    5152:	f892 c000 	ldrb.w	ip, [r2]
    5156:	f04c 0c01 	orr.w	ip, ip, #1
    515a:	f882 c000 	strb.w	ip, [r2]
    515e:	e7e4      	b.n	512a <extract_specifier+0xcc>
			unsupported = (conv->length_mod != LENGTH_NONE);
    5160:	3900      	subs	r1, #0
    5162:	bf18      	it	ne
    5164:	2101      	movne	r1, #1
    5166:	e7e3      	b.n	5130 <extract_specifier+0xd2>
		conv->specifier_cat = SPECIFIER_PTR;
    5168:	7893      	ldrb	r3, [r2, #2]
    516a:	f04f 0c03 	mov.w	ip, #3
    516e:	f36c 0302 	bfi	r3, ip, #0, #3
    5172:	7093      	strb	r3, [r2, #2]
		if (conv->length_mod != LENGTH_NONE) {
    5174:	7853      	ldrb	r3, [r2, #1]
    5176:	f013 0f78 	tst.w	r3, #120	; 0x78
    517a:	d1d9      	bne.n	5130 <extract_specifier+0xd2>
	bool unsupported = false;
    517c:	4671      	mov	r1, lr
    517e:	e7d7      	b.n	5130 <extract_specifier+0xd2>

00005180 <extract_conversion>:
{
    5180:	b510      	push	{r4, lr}
    5182:	4604      	mov	r4, r0
    5184:	4608      	mov	r0, r1
	*conv = (struct conversion) {
    5186:	2300      	movs	r3, #0
    5188:	6023      	str	r3, [r4, #0]
    518a:	6063      	str	r3, [r4, #4]
    518c:	60a3      	str	r3, [r4, #8]
	if (*sp == '%') {
    518e:	784b      	ldrb	r3, [r1, #1]
    5190:	2b25      	cmp	r3, #37	; 0x25
    5192:	d014      	beq.n	51be <extract_conversion+0x3e>
    5194:	3101      	adds	r1, #1
	sp = extract_flags(conv, sp);
    5196:	4620      	mov	r0, r4
    5198:	f7fb fa48 	bl	62c <extract_flags>
    519c:	4601      	mov	r1, r0
	sp = extract_width(conv, sp);
    519e:	4620      	mov	r0, r4
    51a0:	f7ff fe95 	bl	4ece <extract_width>
    51a4:	4601      	mov	r1, r0
	sp = extract_prec(conv, sp);
    51a6:	4620      	mov	r0, r4
    51a8:	f7ff fec0 	bl	4f2c <extract_prec>
    51ac:	4601      	mov	r1, r0
	sp = extract_length(conv, sp);
    51ae:	4620      	mov	r0, r4
    51b0:	f7ff feee 	bl	4f90 <extract_length>
    51b4:	4601      	mov	r1, r0
	sp = extract_specifier(conv, sp);
    51b6:	4620      	mov	r0, r4
    51b8:	f7ff ff51 	bl	505e <extract_specifier>
}
    51bc:	bd10      	pop	{r4, pc}
		conv->specifier = *sp++;
    51be:	3002      	adds	r0, #2
    51c0:	70e3      	strb	r3, [r4, #3]
		return sp;
    51c2:	e7fb      	b.n	51bc <extract_conversion+0x3c>

000051c4 <conversion_radix>:
	switch (specifier) {
    51c4:	286f      	cmp	r0, #111	; 0x6f
    51c6:	d00c      	beq.n	51e2 <conversion_radix+0x1e>
    51c8:	d905      	bls.n	51d6 <conversion_radix+0x12>
    51ca:	2870      	cmp	r0, #112	; 0x70
    51cc:	d00b      	beq.n	51e6 <conversion_radix+0x22>
    51ce:	2878      	cmp	r0, #120	; 0x78
    51d0:	d10b      	bne.n	51ea <conversion_radix+0x26>
		return 16;
    51d2:	2010      	movs	r0, #16
    51d4:	4770      	bx	lr
	switch (specifier) {
    51d6:	2858      	cmp	r0, #88	; 0x58
    51d8:	d001      	beq.n	51de <conversion_radix+0x1a>
    51da:	200a      	movs	r0, #10
    51dc:	4770      	bx	lr
		return 16;
    51de:	2010      	movs	r0, #16
    51e0:	4770      	bx	lr
		return 8;
    51e2:	2008      	movs	r0, #8
    51e4:	4770      	bx	lr
		return 16;
    51e6:	2010      	movs	r0, #16
    51e8:	4770      	bx	lr
	switch (specifier) {
    51ea:	200a      	movs	r0, #10
}
    51ec:	4770      	bx	lr

000051ee <encode_uint>:
{
    51ee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51f2:	4605      	mov	r5, r0
    51f4:	460c      	mov	r4, r1
    51f6:	4693      	mov	fp, r2
    51f8:	4699      	mov	r9, r3
    51fa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
	bool upcase = isupper((int)conv->specifier);
    51fc:	78d0      	ldrb	r0, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    51fe:	f1a0 0a41 	sub.w	sl, r0, #65	; 0x41
	const unsigned int radix = conversion_radix(conv->specifier);
    5202:	f7ff ffdf 	bl	51c4 <conversion_radix>
    5206:	4606      	mov	r6, r0
	char *bp = bps + (bpe - bps);
    5208:	e015      	b.n	5236 <encode_uint+0x48>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    520a:	f1ba 0f19 	cmp.w	sl, #25
    520e:	d820      	bhi.n	5252 <encode_uint+0x64>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5210:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5212:	3237      	adds	r2, #55	; 0x37
    5214:	b2d2      	uxtb	r2, r2
    5216:	f807 2d01 	strb.w	r2, [r7, #-1]!
		value /= radix;
    521a:	4632      	mov	r2, r6
    521c:	4643      	mov	r3, r8
    521e:	4628      	mov	r0, r5
    5220:	4621      	mov	r1, r4
    5222:	f7fa ff6d 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    5226:	42b5      	cmp	r5, r6
    5228:	f174 0400 	sbcs.w	r4, r4, #0
    522c:	d315      	bcc.n	525a <encode_uint+0x6c>
    522e:	454f      	cmp	r7, r9
    5230:	d913      	bls.n	525a <encode_uint+0x6c>
		value /= radix;
    5232:	4605      	mov	r5, r0
    5234:	460c      	mov	r4, r1
		unsigned int lsv = (unsigned int)(value % radix);
    5236:	f04f 0800 	mov.w	r8, #0
    523a:	4632      	mov	r2, r6
    523c:	4643      	mov	r3, r8
    523e:	4628      	mov	r0, r5
    5240:	4621      	mov	r1, r4
    5242:	f7fa ff5d 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5246:	2a09      	cmp	r2, #9
    5248:	d8df      	bhi.n	520a <encode_uint+0x1c>
    524a:	b2d2      	uxtb	r2, r2
    524c:	3230      	adds	r2, #48	; 0x30
    524e:	b2d2      	uxtb	r2, r2
    5250:	e7e1      	b.n	5216 <encode_uint+0x28>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    5252:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5254:	3257      	adds	r2, #87	; 0x57
    5256:	b2d2      	uxtb	r2, r2
    5258:	e7dd      	b.n	5216 <encode_uint+0x28>
	if (conv->flag_hash) {
    525a:	f89b 3000 	ldrb.w	r3, [fp]
    525e:	f013 0f20 	tst.w	r3, #32
    5262:	d003      	beq.n	526c <encode_uint+0x7e>
		if (radix == 8) {
    5264:	2e08      	cmp	r6, #8
    5266:	d004      	beq.n	5272 <encode_uint+0x84>
		} else if (radix == 16) {
    5268:	2e10      	cmp	r6, #16
    526a:	d009      	beq.n	5280 <encode_uint+0x92>
}
    526c:	4638      	mov	r0, r7
    526e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    5272:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5276:	f043 0308 	orr.w	r3, r3, #8
    527a:	f88b 3002 	strb.w	r3, [fp, #2]
    527e:	e7f5      	b.n	526c <encode_uint+0x7e>
			conv->altform_0c = true;
    5280:	f89b 3002 	ldrb.w	r3, [fp, #2]
    5284:	f043 0310 	orr.w	r3, r3, #16
    5288:	f88b 3002 	strb.w	r3, [fp, #2]
    528c:	e7ee      	b.n	526c <encode_uint+0x7e>

0000528e <store_count>:
	switch ((enum length_mod_enum)conv->length_mod) {
    528e:	7843      	ldrb	r3, [r0, #1]
    5290:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    5294:	2b07      	cmp	r3, #7
    5296:	d818      	bhi.n	52ca <store_count+0x3c>
    5298:	e8df f003 	tbb	[pc, r3]
    529c:	0a080604 	.word	0x0a080604
    52a0:	1614100c 	.word	0x1614100c
		*(int *)dp = count;
    52a4:	600a      	str	r2, [r1, #0]
		break;
    52a6:	4770      	bx	lr
		*(signed char *)dp = (signed char)count;
    52a8:	700a      	strb	r2, [r1, #0]
		break;
    52aa:	4770      	bx	lr
		*(short *)dp = (short)count;
    52ac:	800a      	strh	r2, [r1, #0]
		break;
    52ae:	4770      	bx	lr
		*(long *)dp = (long)count;
    52b0:	600a      	str	r2, [r1, #0]
		break;
    52b2:	4770      	bx	lr
		*(long long *)dp = (long long)count;
    52b4:	17d3      	asrs	r3, r2, #31
    52b6:	600a      	str	r2, [r1, #0]
    52b8:	604b      	str	r3, [r1, #4]
		break;
    52ba:	4770      	bx	lr
		*(intmax_t *)dp = (intmax_t)count;
    52bc:	17d3      	asrs	r3, r2, #31
    52be:	600a      	str	r2, [r1, #0]
    52c0:	604b      	str	r3, [r1, #4]
		break;
    52c2:	4770      	bx	lr
		*(size_t *)dp = (size_t)count;
    52c4:	600a      	str	r2, [r1, #0]
		break;
    52c6:	4770      	bx	lr
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    52c8:	600a      	str	r2, [r1, #0]
}
    52ca:	4770      	bx	lr

000052cc <outs>:
{
    52cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52d0:	4607      	mov	r7, r0
    52d2:	460e      	mov	r6, r1
    52d4:	4614      	mov	r4, r2
    52d6:	4698      	mov	r8, r3
	size_t count = 0;
    52d8:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    52da:	e006      	b.n	52ea <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    52dc:	4631      	mov	r1, r6
    52de:	f814 0b01 	ldrb.w	r0, [r4], #1
    52e2:	47b8      	blx	r7
		if (rc < 0) {
    52e4:	2800      	cmp	r0, #0
    52e6:	db09      	blt.n	52fc <outs+0x30>
		++count;
    52e8:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    52ea:	4544      	cmp	r4, r8
    52ec:	d3f6      	bcc.n	52dc <outs+0x10>
    52ee:	f1b8 0f00 	cmp.w	r8, #0
    52f2:	d102      	bne.n	52fa <outs+0x2e>
    52f4:	7823      	ldrb	r3, [r4, #0]
    52f6:	2b00      	cmp	r3, #0
    52f8:	d1f0      	bne.n	52dc <outs+0x10>
	return (int)count;
    52fa:	4628      	mov	r0, r5
}
    52fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005300 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    5300:	4770      	bx	lr

00005302 <atomic_test_and_clear_bit>:
 * @param bit Bit number (starting from 0).
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
    5302:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
    5304:	f001 021f 	and.w	r2, r1, #31
    5308:	2301      	movs	r3, #1
    530a:	4093      	lsls	r3, r2
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    530c:	0949      	lsrs	r1, r1, #5
    530e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    5312:	43d9      	mvns	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5314:	f3bf 8f5b 	dmb	ish
    5318:	e850 2f00 	ldrex	r2, [r0]
    531c:	ea02 0c01 	and.w	ip, r2, r1
    5320:	e840 ce00 	strex	lr, ip, [r0]
    5324:	f1be 0f00 	cmp.w	lr, #0
    5328:	d1f6      	bne.n	5318 <atomic_test_and_clear_bit+0x16>
    532a:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    532e:	4213      	tst	r3, r2
}
    5330:	bf14      	ite	ne
    5332:	2001      	movne	r0, #1
    5334:	2000      	moveq	r0, #0
    5336:	f85d fb04 	ldr.w	pc, [sp], #4

0000533a <atomic_set_bit>:
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    533a:	f001 021f 	and.w	r2, r1, #31
    533e:	2301      	movs	r3, #1
    5340:	4093      	lsls	r3, r2

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5342:	0949      	lsrs	r1, r1, #5
    5344:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5348:	f3bf 8f5b 	dmb	ish
    534c:	e850 2f00 	ldrex	r2, [r0]
    5350:	431a      	orrs	r2, r3
    5352:	e840 2100 	strex	r1, r2, [r0]
    5356:	2900      	cmp	r1, #0
    5358:	d1f8      	bne.n	534c <atomic_set_bit+0x12>
    535a:	f3bf 8f5b 	dmb	ish
}
    535e:	4770      	bx	lr

00005360 <pm_policy_state_lock_is_active>:
			return (atomic_get(&substate_lock_t[i].lock) != 0);
		}
	}

	return false;
}
    5360:	2000      	movs	r0, #0
    5362:	4770      	bx	lr

00005364 <abort_function>:
{
    5364:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    5366:	2000      	movs	r0, #0
    5368:	f7fb fc8e 	bl	c88 <sys_reboot>

0000536c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    536c:	b508      	push	{r3, lr}

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    536e:	f000 ff8d 	bl	628c <z_fatal_error>
}
    5372:	bd08      	pop	{r3, pc}

00005374 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    5374:	b508      	push	{r3, lr}
    5376:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5378:	6800      	ldr	r0, [r0, #0]
    537a:	f7ff fff7 	bl	536c <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    537e:	bd08      	pop	{r3, pc}

00005380 <arch_irq_enable>:
{
    5380:	b508      	push	{r3, lr}
	NVIC_EnableIRQ((IRQn_Type)irq);
    5382:	b240      	sxtb	r0, r0
    5384:	f7fb fefc 	bl	1180 <__NVIC_EnableIRQ>
}
    5388:	bd08      	pop	{r3, pc}

0000538a <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    538a:	b508      	push	{r3, lr}
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    538c:	3101      	adds	r1, #1
    538e:	b240      	sxtb	r0, r0
    5390:	f7fb ff04 	bl	119c <__NVIC_SetPriority>
}
    5394:	bd08      	pop	{r3, pc}

00005396 <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    5396:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    5398:	2100      	movs	r1, #0
    539a:	2001      	movs	r0, #1
    539c:	f7ff ffe6 	bl	536c <z_arm_fatal_error>
}
    53a0:	bd08      	pop	{r3, pc}

000053a2 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    53a2:	b508      	push	{r3, lr}
	handler();
    53a4:	f7fb ff1c 	bl	11e0 <z_SysNmiOnReset>
	z_arm_int_exit();
    53a8:	f7fc f80e 	bl	13c8 <z_arm_exc_exit>
}
    53ac:	bd08      	pop	{r3, pc}

000053ae <memory_fault_recoverable>:
}
    53ae:	2000      	movs	r0, #0
    53b0:	4770      	bx	lr

000053b2 <debug_monitor>:
	*recoverable = false;
    53b2:	2300      	movs	r3, #0
    53b4:	700b      	strb	r3, [r1, #0]
}
    53b6:	4770      	bx	lr

000053b8 <fault_handle>:
{
    53b8:	b508      	push	{r3, lr}
	*recoverable = false;
    53ba:	2300      	movs	r3, #0
    53bc:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    53be:	1ecb      	subs	r3, r1, #3
    53c0:	2b09      	cmp	r3, #9
    53c2:	d81a      	bhi.n	53fa <fault_handle+0x42>
    53c4:	e8df f003 	tbb	[pc, r3]
    53c8:	110d0905 	.word	0x110d0905
    53cc:	19191919 	.word	0x19191919
    53d0:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    53d2:	4611      	mov	r1, r2
    53d4:	f7fc f8b0 	bl	1538 <hard_fault>
		break;
    53d8:	e010      	b.n	53fc <fault_handle+0x44>
		reason = mem_manage_fault(esf, 0, recoverable);
    53da:	2100      	movs	r1, #0
    53dc:	f7fc f85c 	bl	1498 <mem_manage_fault>
		break;
    53e0:	e00c      	b.n	53fc <fault_handle+0x44>
		reason = bus_fault(esf, 0, recoverable);
    53e2:	2100      	movs	r1, #0
    53e4:	f7fb fffe 	bl	13e4 <bus_fault>
		break;
    53e8:	e008      	b.n	53fc <fault_handle+0x44>
		reason = usage_fault(esf);
    53ea:	f7fc f825 	bl	1438 <usage_fault>
		break;
    53ee:	e005      	b.n	53fc <fault_handle+0x44>
		debug_monitor(esf, recoverable);
    53f0:	4611      	mov	r1, r2
    53f2:	f7ff ffde 	bl	53b2 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    53f6:	2000      	movs	r0, #0
		break;
    53f8:	e000      	b.n	53fc <fault_handle+0x44>
	switch (fault) {
    53fa:	2000      	movs	r0, #0
}
    53fc:	bd08      	pop	{r3, pc}

000053fe <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    53fe:	6843      	ldr	r3, [r0, #4]
    5400:	1e5a      	subs	r2, r3, #1
		&&
    5402:	4213      	tst	r3, r2
    5404:	d106      	bne.n	5414 <mpu_partition_is_valid+0x16>
		&&
    5406:	2b1f      	cmp	r3, #31
    5408:	d906      	bls.n	5418 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    540a:	6803      	ldr	r3, [r0, #0]
		&&
    540c:	421a      	tst	r2, r3
    540e:	d005      	beq.n	541c <mpu_partition_is_valid+0x1e>
    5410:	2000      	movs	r0, #0
    5412:	4770      	bx	lr
    5414:	2000      	movs	r0, #0
    5416:	4770      	bx	lr
    5418:	2000      	movs	r0, #0
    541a:	4770      	bx	lr
    541c:	2001      	movs	r0, #1
}
    541e:	4770      	bx	lr

00005420 <region_allocate_and_init>:
	if (index > (get_num_regions() - 1U)) {
    5420:	2807      	cmp	r0, #7
    5422:	d805      	bhi.n	5430 <region_allocate_and_init+0x10>
{
    5424:	b510      	push	{r4, lr}
    5426:	4604      	mov	r4, r0
	region_init(index, region_conf);
    5428:	f7fc f9e0 	bl	17ec <region_init>
	return index;
    542c:	4620      	mov	r0, r4
}
    542e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    5430:	f06f 0015 	mvn.w	r0, #21
}
    5434:	4770      	bx	lr

00005436 <mpu_configure_region>:
{
    5436:	b500      	push	{lr}
    5438:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    543a:	680b      	ldr	r3, [r1, #0]
    543c:	9301      	str	r3, [sp, #4]
		&new_region->attr, new_region->start, new_region->size);
    543e:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5440:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    5442:	2b20      	cmp	r3, #32
    5444:	d912      	bls.n	546c <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    5446:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    544a:	d811      	bhi.n	5470 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    544c:	3b01      	subs	r3, #1
    544e:	fab3 f383 	clz	r3, r3
    5452:	f1c3 031f 	rsb	r3, r3, #31
    5456:	005b      	lsls	r3, r3, #1
    5458:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    545c:	4313      	orrs	r3, r2
    545e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    5460:	a901      	add	r1, sp, #4
    5462:	f7ff ffdd 	bl	5420 <region_allocate_and_init>
}
    5466:	b005      	add	sp, #20
    5468:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    546c:	2308      	movs	r3, #8
    546e:	e7f5      	b.n	545c <mpu_configure_region+0x26>
		return REGION_4G;
    5470:	233e      	movs	r3, #62	; 0x3e
    5472:	e7f3      	b.n	545c <mpu_configure_region+0x26>

00005474 <mpu_configure_regions>:
{
    5474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5478:	4680      	mov	r8, r0
    547a:	460f      	mov	r7, r1
    547c:	4699      	mov	r9, r3
	int reg_index = start_reg_index;
    547e:	4616      	mov	r6, r2
	for (i = 0; i < regions_num; i++) {
    5480:	2500      	movs	r5, #0
    5482:	e009      	b.n	5498 <mpu_configure_regions+0x24>
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    5484:	4621      	mov	r1, r4
    5486:	b2f0      	uxtb	r0, r6
    5488:	f7ff ffd5 	bl	5436 <mpu_configure_region>
    548c:	4606      	mov	r6, r0
		if (reg_index == -EINVAL) {
    548e:	f110 0f16 	cmn.w	r0, #22
    5492:	d014      	beq.n	54be <mpu_configure_regions+0x4a>
		reg_index++;
    5494:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    5496:	3501      	adds	r5, #1
    5498:	42bd      	cmp	r5, r7
    549a:	da10      	bge.n	54be <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    549c:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    54a0:	eb08 0484 	add.w	r4, r8, r4, lsl #2
    54a4:	6862      	ldr	r2, [r4, #4]
    54a6:	2a00      	cmp	r2, #0
    54a8:	d0f5      	beq.n	5496 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    54aa:	f1b9 0f00 	cmp.w	r9, #0
    54ae:	d0e9      	beq.n	5484 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    54b0:	4620      	mov	r0, r4
    54b2:	f7ff ffa4 	bl	53fe <mpu_partition_is_valid>
		if (do_sanity_check &&
    54b6:	2800      	cmp	r0, #0
    54b8:	d1e4      	bne.n	5484 <mpu_configure_regions+0x10>
			return -EINVAL;
    54ba:	f06f 0615 	mvn.w	r6, #21
}
    54be:	4630      	mov	r0, r6
    54c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000054c4 <arm_core_mpu_configure_static_mpu_regions>:
{
    54c4:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    54c6:	f7fc f9a5 	bl	1814 <mpu_configure_static_mpu_regions>
}
    54ca:	bd08      	pop	{r3, pc}

000054cc <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    54cc:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    54ce:	f7fc f9ab 	bl	1828 <mpu_configure_dynamic_mpu_regions>
}
    54d2:	bd08      	pop	{r3, pc}

000054d4 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    54d4:	4602      	mov	r2, r0
    54d6:	e002      	b.n	54de <strcpy+0xa>
		*d = *s;
    54d8:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    54dc:	3101      	adds	r1, #1
	while (*s != '\0') {
    54de:	780b      	ldrb	r3, [r1, #0]
    54e0:	2b00      	cmp	r3, #0
    54e2:	d1f9      	bne.n	54d8 <strcpy+0x4>
	}

	*d = '\0';
    54e4:	7013      	strb	r3, [r2, #0]

	return dest;
}
    54e6:	4770      	bx	lr

000054e8 <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    54e8:	4603      	mov	r3, r0
    54ea:	b1a2      	cbz	r2, 5516 <strncpy+0x2e>
{
    54ec:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    54ee:	780c      	ldrb	r4, [r1, #0]
    54f0:	b12c      	cbz	r4, 54fe <strncpy+0x16>
		*d = *s;
    54f2:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    54f6:	3101      	adds	r1, #1
		d++;
		n--;
    54f8:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    54fa:	2a00      	cmp	r2, #0
    54fc:	d1f7      	bne.n	54ee <strncpy+0x6>
	}

	while (n > 0) {
    54fe:	b122      	cbz	r2, 550a <strncpy+0x22>
		*d = '\0';
    5500:	2100      	movs	r1, #0
    5502:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    5506:	3a01      	subs	r2, #1
    5508:	e7f9      	b.n	54fe <strncpy+0x16>
	}

	return dest;
}
    550a:	bc10      	pop	{r4}
    550c:	4770      	bx	lr
		*d = '\0';
    550e:	2100      	movs	r1, #0
    5510:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5514:	3a01      	subs	r2, #1
	while (n > 0) {
    5516:	2a00      	cmp	r2, #0
    5518:	d1f9      	bne.n	550e <strncpy+0x26>
    551a:	4770      	bx	lr

0000551c <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    551c:	4603      	mov	r3, r0
	size_t n = 0;
    551e:	2000      	movs	r0, #0

	while (*s != '\0') {
    5520:	e001      	b.n	5526 <strlen+0xa>
		s++;
    5522:	3301      	adds	r3, #1
		n++;
    5524:	3001      	adds	r0, #1
	while (*s != '\0') {
    5526:	781a      	ldrb	r2, [r3, #0]
    5528:	2a00      	cmp	r2, #0
    552a:	d1fa      	bne.n	5522 <strlen+0x6>
	}

	return n;
}
    552c:	4770      	bx	lr

0000552e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    552e:	4603      	mov	r3, r0
	size_t n = 0;
    5530:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    5532:	e001      	b.n	5538 <strnlen+0xa>
		s++;
    5534:	3301      	adds	r3, #1
		n++;
    5536:	3001      	adds	r0, #1
	while (*s != '\0' && n < maxlen) {
    5538:	781a      	ldrb	r2, [r3, #0]
    553a:	b10a      	cbz	r2, 5540 <strnlen+0x12>
    553c:	4288      	cmp	r0, r1
    553e:	d3f9      	bcc.n	5534 <strnlen+0x6>
	}

	return n;
}
    5540:	4770      	bx	lr

00005542 <memcpy>:
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    5542:	ea80 0301 	eor.w	r3, r0, r1
    5546:	f013 0f03 	tst.w	r3, #3
    554a:	d001      	beq.n	5550 <memcpy+0xe>
	unsigned char *d_byte = (unsigned char *)d;
    554c:	4603      	mov	r3, r0
    554e:	e023      	b.n	5598 <memcpy+0x56>
    5550:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    5552:	f013 0f03 	tst.w	r3, #3
    5556:	d00f      	beq.n	5578 <memcpy+0x36>
			if (n == 0) {
    5558:	b30a      	cbz	r2, 559e <memcpy+0x5c>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    555a:	f811 cb01 	ldrb.w	ip, [r1], #1
    555e:	f803 cb01 	strb.w	ip, [r3], #1
			n--;
    5562:	3a01      	subs	r2, #1
    5564:	e7f5      	b.n	5552 <memcpy+0x10>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    5566:	f811 cb01 	ldrb.w	ip, [r1], #1
    556a:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    556e:	3a01      	subs	r2, #1
	while (n > 0) {
    5570:	2a00      	cmp	r2, #0
    5572:	d1f8      	bne.n	5566 <memcpy+0x24>
	}

	return d;
}
    5574:	bc10      	pop	{r4}
    5576:	4770      	bx	lr
		while (n >= sizeof(mem_word_t)) {
    5578:	2a03      	cmp	r2, #3
    557a:	d90d      	bls.n	5598 <memcpy+0x56>
{
    557c:	b410      	push	{r4}
			*(d_word++) = *(s_word++);
    557e:	f851 4b04 	ldr.w	r4, [r1], #4
    5582:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    5586:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    5588:	2a03      	cmp	r2, #3
    558a:	d8f8      	bhi.n	557e <memcpy+0x3c>
    558c:	e7f0      	b.n	5570 <memcpy+0x2e>
		*(d_byte++) = *(s_byte++);
    558e:	f811 cb01 	ldrb.w	ip, [r1], #1
    5592:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    5596:	3a01      	subs	r2, #1
	while (n > 0) {
    5598:	2a00      	cmp	r2, #0
    559a:	d1f8      	bne.n	558e <memcpy+0x4c>
    559c:	4770      	bx	lr
}
    559e:	4770      	bx	lr

000055a0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    55a0:	fa5f fc81 	uxtb.w	ip, r1
	unsigned char *d_byte = (unsigned char *)buf;
    55a4:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    55a6:	e002      	b.n	55ae <memset+0xe>
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    55a8:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    55ac:	3a01      	subs	r2, #1
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    55ae:	f013 0f03 	tst.w	r3, #3
    55b2:	d002      	beq.n	55ba <memset+0x1a>
		if (n == 0) {
    55b4:	2a00      	cmp	r2, #0
    55b6:	d1f7      	bne.n	55a8 <memset+0x8>
    55b8:	e00f      	b.n	55da <memset+0x3a>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    55ba:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    55bc:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    55c0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    55c4:	2a03      	cmp	r2, #3
    55c6:	d906      	bls.n	55d6 <memset+0x36>
		*(d_word++) = c_word;
    55c8:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    55cc:	3a04      	subs	r2, #4
    55ce:	e7f9      	b.n	55c4 <memset+0x24>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    55d0:	f803 cb01 	strb.w	ip, [r3], #1
		n--;
    55d4:	3a01      	subs	r2, #1
	while (n > 0) {
    55d6:	2a00      	cmp	r2, #0
    55d8:	d1fa      	bne.n	55d0 <memset+0x30>
	}

	return buf;
}
    55da:	4770      	bx	lr

000055dc <_stdout_hook_default>:
}
    55dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    55e0:	4770      	bx	lr

000055e2 <nrf52_errata_197>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    55e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    55e6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    55ea:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    55ee:	2a08      	cmp	r2, #8
    55f0:	d001      	beq.n	55f6 <nrf52_errata_197+0x14>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    55f2:	2000      	movs	r0, #0
    55f4:	4770      	bx	lr
                switch(var2)
    55f6:	2b02      	cmp	r3, #2
    55f8:	d001      	beq.n	55fe <nrf52_errata_197+0x1c>
                        return false;
    55fa:	2000      	movs	r0, #0
    55fc:	4770      	bx	lr
                        return true;
    55fe:	2001      	movs	r0, #1
    #endif
}
    5600:	4770      	bx	lr

00005602 <sys_arch_reboot>:
{
    5602:	b508      	push	{r3, lr}
    *p_gpregret = val;
    5604:	b2c0      	uxtb	r0, r0
    5606:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    560a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
	NVIC_SystemReset();
    560e:	f7fc f963 	bl	18d8 <__NVIC_SystemReset>

00005612 <nrf_power_system_off>:
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    5612:	2301      	movs	r3, #1
    5614:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    5618:	f3bf 8f4f 	dsb	sy
        __WFE();
    561c:	bf20      	wfe
    while (true)
    561e:	e7fd      	b.n	561c <nrf_power_system_off+0xa>

00005620 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    5620:	2806      	cmp	r0, #6
    5622:	d000      	beq.n	5626 <pm_state_set+0x6>
    5624:	4770      	bx	lr
{
    5626:	b508      	push	{r3, lr}
	case PM_STATE_SOFT_OFF:
		nrf_power_system_off(NRF_POWER);
    5628:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    562c:	f7ff fff1 	bl	5612 <nrf_power_system_off>

00005630 <pm_state_exit_post_ops>:
    5630:	2300      	movs	r3, #0
    5632:	f383 8811 	msr	BASEPRI, r3
    5636:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    563a:	4770      	bx	lr

0000563c <nrf_clock_is_running>:
    switch (domain)
    563c:	b119      	cbz	r1, 5646 <nrf_clock_is_running+0xa>
    563e:	2901      	cmp	r1, #1
    5640:	d00e      	beq.n	5660 <nrf_clock_is_running+0x24>
    5642:	2000      	movs	r0, #0
    5644:	4770      	bx	lr
            if (p_clk_src != NULL)
    5646:	b122      	cbz	r2, 5652 <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5648:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    564c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    5650:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5652:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    5656:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    565a:	d10e      	bne.n	567a <nrf_clock_is_running+0x3e>
    return false;
    565c:	2000      	movs	r0, #0
    565e:	4770      	bx	lr
            if (p_clk_src != NULL)
    5660:	b122      	cbz	r2, 566c <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5662:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    5666:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    566a:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    566c:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    5670:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5674:	d103      	bne.n	567e <nrf_clock_is_running+0x42>
    return false;
    5676:	2000      	movs	r0, #0
    5678:	4770      	bx	lr
                return true;
    567a:	2001      	movs	r0, #1
    567c:	4770      	bx	lr
                return true;
    567e:	2001      	movs	r0, #1
}
    5680:	4770      	bx	lr

00005682 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    5682:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    5684:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    5688:	0089      	lsls	r1, r1, #2
    568a:	3138      	adds	r1, #56	; 0x38
}
    568c:	4408      	add	r0, r1
    568e:	4770      	bx	lr

00005690 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    5690:	6840      	ldr	r0, [r0, #4]
}
    5692:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    5696:	4770      	bx	lr

00005698 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    5698:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    569a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    569e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    56a2:	4770      	bx	lr

000056a4 <get_status>:
{
    56a4:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    56a6:	b2c9      	uxtb	r1, r1
    56a8:	f7ff ffeb 	bl	5682 <get_sub_data>
    56ac:	6880      	ldr	r0, [r0, #8]
}
    56ae:	f000 0007 	and.w	r0, r0, #7
    56b2:	bd08      	pop	{r3, pc}

000056b4 <set_off_state>:
	__asm__ volatile(
    56b4:	f04f 0320 	mov.w	r3, #32
    56b8:	f3ef 8211 	mrs	r2, BASEPRI
    56bc:	f383 8812 	msr	BASEPRI_MAX, r3
    56c0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    56c4:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    56c6:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    56ca:	d001      	beq.n	56d0 <set_off_state+0x1c>
    56cc:	428b      	cmp	r3, r1
    56ce:	d107      	bne.n	56e0 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    56d0:	2301      	movs	r3, #1
    56d2:	6003      	str	r3, [r0, #0]
	int err = 0;
    56d4:	2000      	movs	r0, #0
	__asm__ volatile(
    56d6:	f382 8811 	msr	BASEPRI, r2
    56da:	f3bf 8f6f 	isb	sy
}
    56de:	4770      	bx	lr
		err = -EPERM;
    56e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    56e4:	e7f7      	b.n	56d6 <set_off_state+0x22>

000056e6 <set_starting_state>:
	__asm__ volatile(
    56e6:	f04f 0320 	mov.w	r3, #32
    56ea:	f3ef 8211 	mrs	r2, BASEPRI
    56ee:	f383 8812 	msr	BASEPRI_MAX, r3
    56f2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    56f6:	6803      	ldr	r3, [r0, #0]
    56f8:	f003 0cc0 	and.w	ip, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    56fc:	f003 0307 	and.w	r3, r3, #7
    5700:	2b01      	cmp	r3, #1
    5702:	d008      	beq.n	5716 <set_starting_state+0x30>
	} else if (current_ctx != ctx) {
    5704:	458c      	cmp	ip, r1
    5706:	d009      	beq.n	571c <set_starting_state+0x36>
		err = -EPERM;
    5708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__asm__ volatile(
    570c:	f382 8811 	msr	BASEPRI, r2
    5710:	f3bf 8f6f 	isb	sy
}
    5714:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5716:	6001      	str	r1, [r0, #0]
	int err = 0;
    5718:	2000      	movs	r0, #0
    571a:	e7f7      	b.n	570c <set_starting_state+0x26>
		err = -EALREADY;
    571c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5720:	e7f4      	b.n	570c <set_starting_state+0x26>

00005722 <set_on_state>:
	__asm__ volatile(
    5722:	f04f 0320 	mov.w	r3, #32
    5726:	f3ef 8211 	mrs	r2, BASEPRI
    572a:	f383 8812 	msr	BASEPRI_MAX, r3
    572e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    5732:	6803      	ldr	r3, [r0, #0]
    5734:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5738:	f043 0302 	orr.w	r3, r3, #2
    573c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    573e:	f382 8811 	msr	BASEPRI, r2
    5742:	f3bf 8f6f 	isb	sy
}
    5746:	4770      	bx	lr

00005748 <clkstarted_handle>:
{
    5748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    574a:	4606      	mov	r6, r0
    574c:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    574e:	f7ff ff98 	bl	5682 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    5752:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    5754:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    5756:	2300      	movs	r3, #0
    5758:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    575c:	f7ff ffe1 	bl	5722 <set_on_state>
	if (callback) {
    5760:	b11d      	cbz	r5, 576a <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5762:	463a      	mov	r2, r7
    5764:	4621      	mov	r1, r4
    5766:	4630      	mov	r0, r6
    5768:	47a8      	blx	r5
}
    576a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000576c <stop>:
{
    576c:	b570      	push	{r4, r5, r6, lr}
    576e:	4606      	mov	r6, r0
    5770:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    5772:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    5774:	4621      	mov	r1, r4
    5776:	f7ff ff84 	bl	5682 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    577a:	4629      	mov	r1, r5
    577c:	3008      	adds	r0, #8
    577e:	f7ff ff99 	bl	56b4 <set_off_state>
	if (err < 0) {
    5782:	2800      	cmp	r0, #0
    5784:	db06      	blt.n	5794 <stop+0x28>
	get_sub_config(dev, type)->stop();
    5786:	4621      	mov	r1, r4
    5788:	4630      	mov	r0, r6
    578a:	f7ff ff81 	bl	5690 <get_sub_config>
    578e:	6843      	ldr	r3, [r0, #4]
    5790:	4798      	blx	r3
	return 0;
    5792:	2000      	movs	r0, #0
}
    5794:	bd70      	pop	{r4, r5, r6, pc}

00005796 <api_stop>:
{
    5796:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    5798:	2280      	movs	r2, #128	; 0x80
    579a:	f7ff ffe7 	bl	576c <stop>
}
    579e:	bd08      	pop	{r3, pc}

000057a0 <async_start>:
{
    57a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    57a4:	4606      	mov	r6, r0
    57a6:	4690      	mov	r8, r2
    57a8:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    57aa:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    57ac:	4629      	mov	r1, r5
    57ae:	f7ff ff68 	bl	5682 <get_sub_data>
    57b2:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    57b4:	9906      	ldr	r1, [sp, #24]
    57b6:	3008      	adds	r0, #8
    57b8:	f7ff ff95 	bl	56e6 <set_starting_state>
	if (err < 0) {
    57bc:	2800      	cmp	r0, #0
    57be:	db09      	blt.n	57d4 <async_start+0x34>
	subdata->cb = cb;
    57c0:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    57c4:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    57c6:	4629      	mov	r1, r5
    57c8:	4630      	mov	r0, r6
    57ca:	f7ff ff61 	bl	5690 <get_sub_config>
    57ce:	6803      	ldr	r3, [r0, #0]
    57d0:	4798      	blx	r3
	return 0;
    57d2:	2000      	movs	r0, #0
}
    57d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000057d8 <api_start>:
{
    57d8:	b510      	push	{r4, lr}
    57da:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    57dc:	2480      	movs	r4, #128	; 0x80
    57de:	9400      	str	r4, [sp, #0]
    57e0:	f7ff ffde 	bl	57a0 <async_start>
}
    57e4:	b002      	add	sp, #8
    57e6:	bd10      	pop	{r4, pc}

000057e8 <onoff_started_callback>:
{
    57e8:	b510      	push	{r4, lr}
    57ea:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    57ec:	b2c9      	uxtb	r1, r1
    57ee:	f7ff ff53 	bl	5698 <get_onoff_manager>
	notify(mgr, 0);
    57f2:	2100      	movs	r1, #0
    57f4:	47a0      	blx	r4
}
    57f6:	bd10      	pop	{r4, pc}

000057f8 <hfclk_start>:
{
    57f8:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    57fa:	2001      	movs	r0, #1
    57fc:	f000 fc61 	bl	60c2 <nrfx_clock_start>
}
    5800:	bd08      	pop	{r3, pc}

00005802 <lfclk_start>:
{
    5802:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    5804:	2000      	movs	r0, #0
    5806:	f000 fc5c 	bl	60c2 <nrfx_clock_start>
}
    580a:	bd08      	pop	{r3, pc}

0000580c <hfclk_stop>:
{
    580c:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    580e:	2001      	movs	r0, #1
    5810:	f000 fca7 	bl	6162 <nrfx_clock_stop>
}
    5814:	bd08      	pop	{r3, pc}

00005816 <lfclk_stop>:
{
    5816:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    5818:	2000      	movs	r0, #0
    581a:	f000 fca2 	bl	6162 <nrfx_clock_stop>
}
    581e:	bd08      	pop	{r3, pc}

00005820 <k_msleep>:
{
    5820:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    5822:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    5826:	17c1      	asrs	r1, r0, #31
    5828:	03c9      	lsls	r1, r1, #15
    582a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    582e:	03c0      	lsls	r0, r0, #15
    5830:	f240 33e7 	movw	r3, #999	; 0x3e7
    5834:	18c0      	adds	r0, r0, r3
    5836:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    583a:	f04f 0300 	mov.w	r3, #0
    583e:	f141 0100 	adc.w	r1, r1, #0
    5842:	f7fa fc5d 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    5846:	f7fe fd61 	bl	430c <z_impl_k_sleep>
}
    584a:	bd08      	pop	{r3, pc}

0000584c <blocking_start_callback>:
{
    584c:	b508      	push	{r3, lr}
    584e:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5850:	f7fe f98c 	bl	3b6c <z_impl_k_sem_give>
}
    5854:	bd08      	pop	{r3, pc}

00005856 <sys_slist_remove>:
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    5856:	460b      	mov	r3, r1
    5858:	b139      	cbz	r1, 586a <sys_slist_remove+0x14>
	return node->next;
    585a:	6811      	ldr	r1, [r2, #0]
	parent->next = child;
    585c:	6019      	str	r1, [r3, #0]
	return list->tail;
    585e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    5860:	428a      	cmp	r2, r1
    5862:	d009      	beq.n	5878 <sys_slist_remove+0x22>
	parent->next = child;
    5864:	2300      	movs	r3, #0
    5866:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    5868:	4770      	bx	lr
	return node->next;
    586a:	6813      	ldr	r3, [r2, #0]
	list->head = node;
    586c:	6003      	str	r3, [r0, #0]
	return list->tail;
    586e:	6841      	ldr	r1, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
    5870:	428a      	cmp	r2, r1
    5872:	d1f7      	bne.n	5864 <sys_slist_remove+0xe>
	list->tail = node;
    5874:	6043      	str	r3, [r0, #4]
}
    5876:	e7f5      	b.n	5864 <sys_slist_remove+0xe>
	list->tail = node;
    5878:	6043      	str	r3, [r0, #4]
}
    587a:	e7f3      	b.n	5864 <sys_slist_remove+0xe>

0000587c <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    587c:	b508      	push	{r3, lr}
    587e:	460a      	mov	r2, r1
	return list->head;
    5880:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5882:	2100      	movs	r1, #0
    5884:	e001      	b.n	588a <sys_slist_find_and_remove+0xe>
    5886:	4619      	mov	r1, r3
    5888:	681b      	ldr	r3, [r3, #0]
    588a:	b12b      	cbz	r3, 5898 <sys_slist_find_and_remove+0x1c>
    588c:	4293      	cmp	r3, r2
    588e:	d1fa      	bne.n	5886 <sys_slist_find_and_remove+0xa>
    5890:	f7ff ffe1 	bl	5856 <sys_slist_remove>
    5894:	2001      	movs	r0, #1
    5896:	e000      	b.n	589a <sys_slist_find_and_remove+0x1e>
    5898:	2000      	movs	r0, #0
    589a:	bd08      	pop	{r3, pc}

0000589c <gpio_manage_callback>:
 * @return 0 on success, negative errno otherwise.
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
    589c:	b570      	push	{r4, r5, r6, lr}
    589e:	4604      	mov	r4, r0
    58a0:	460d      	mov	r5, r1
    58a2:	4616      	mov	r6, r2
	return list->head;
    58a4:	6803      	ldr	r3, [r0, #0]
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    58a6:	b133      	cbz	r3, 58b6 <gpio_manage_callback+0x1a>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    58a8:	f7ff ffe8 	bl	587c <sys_slist_find_and_remove>
    58ac:	b970      	cbnz	r0, 58cc <gpio_manage_callback+0x30>
			if (!set) {
    58ae:	b91e      	cbnz	r6, 58b8 <gpio_manage_callback+0x1c>
				return -EINVAL;
    58b0:	f06f 0015 	mvn.w	r0, #21
    58b4:	e006      	b.n	58c4 <gpio_manage_callback+0x28>
			}
		}
	} else if (!set) {
    58b6:	b132      	cbz	r2, 58c6 <gpio_manage_callback+0x2a>
    58b8:	6823      	ldr	r3, [r4, #0]
	parent->next = child;
    58ba:	602b      	str	r3, [r5, #0]
	list->head = node;
    58bc:	6025      	str	r5, [r4, #0]
	return list->tail;
    58be:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
    58c0:	b143      	cbz	r3, 58d4 <gpio_manage_callback+0x38>

	if (set) {
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    58c2:	2000      	movs	r0, #0
}
    58c4:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    58c6:	f06f 0015 	mvn.w	r0, #21
    58ca:	e7fb      	b.n	58c4 <gpio_manage_callback+0x28>
	if (set) {
    58cc:	2e00      	cmp	r6, #0
    58ce:	d1f3      	bne.n	58b8 <gpio_manage_callback+0x1c>
	return 0;
    58d0:	2000      	movs	r0, #0
    58d2:	e7f7      	b.n	58c4 <gpio_manage_callback+0x28>
	list->tail = node;
    58d4:	6065      	str	r5, [r4, #4]
    58d6:	2000      	movs	r0, #0
}
    58d8:	e7f4      	b.n	58c4 <gpio_manage_callback+0x28>

000058da <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
    58da:	b570      	push	{r4, r5, r6, lr}
    58dc:	460e      	mov	r6, r1
    58de:	4615      	mov	r5, r2
	return list->head;
    58e0:	6801      	ldr	r1, [r0, #0]
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    58e2:	b121      	cbz	r1, 58ee <gpio_fire_callbacks+0x14>
	return node->next;
    58e4:	680c      	ldr	r4, [r1, #0]
    58e6:	b13c      	cbz	r4, 58f8 <gpio_fire_callbacks+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    58e8:	b931      	cbnz	r1, 58f8 <gpio_fire_callbacks+0x1e>
    58ea:	460c      	mov	r4, r1
    58ec:	e004      	b.n	58f8 <gpio_fire_callbacks+0x1e>
    58ee:	460c      	mov	r4, r1
    58f0:	e002      	b.n	58f8 <gpio_fire_callbacks+0x1e>
    58f2:	4623      	mov	r3, r4
    58f4:	4621      	mov	r1, r4
    58f6:	461c      	mov	r4, r3
    58f8:	b171      	cbz	r1, 5918 <gpio_fire_callbacks+0x3e>
		if (cb->pin_mask & pins) {
    58fa:	688a      	ldr	r2, [r1, #8]
    58fc:	402a      	ands	r2, r5
    58fe:	d002      	beq.n	5906 <gpio_fire_callbacks+0x2c>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5900:	684b      	ldr	r3, [r1, #4]
    5902:	4630      	mov	r0, r6
    5904:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5906:	2c00      	cmp	r4, #0
    5908:	d0f3      	beq.n	58f2 <gpio_fire_callbacks+0x18>
	return node->next;
    590a:	6823      	ldr	r3, [r4, #0]
    590c:	2b00      	cmp	r3, #0
    590e:	d0f1      	beq.n	58f4 <gpio_fire_callbacks+0x1a>
Z_GENLIST_PEEK_NEXT(slist, snode)
    5910:	2c00      	cmp	r4, #0
    5912:	d1ef      	bne.n	58f4 <gpio_fire_callbacks+0x1a>
    5914:	4623      	mov	r3, r4
    5916:	e7ed      	b.n	58f4 <gpio_fire_callbacks+0x1a>
		}
	}
}
    5918:	bd70      	pop	{r4, r5, r6, pc}

0000591a <get_drive>:
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    591a:	f020 00f9 	bic.w	r0, r0, #249	; 0xf9
    591e:	0580      	lsls	r0, r0, #22
    5920:	0d80      	lsrs	r0, r0, #22
    5922:	f5b0 7f83 	cmp.w	r0, #262	; 0x106
    5926:	d033      	beq.n	5990 <get_drive+0x76>
    5928:	d816      	bhi.n	5958 <get_drive+0x3e>
    592a:	2806      	cmp	r0, #6
    592c:	d02c      	beq.n	5988 <get_drive+0x6e>
    592e:	d906      	bls.n	593e <get_drive+0x24>
    5930:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    5934:	d10d      	bne.n	5952 <get_drive+0x38>
		*drive = NRF_GPIO_PIN_H0S1;
    5936:	2301      	movs	r3, #1
    5938:	700b      	strb	r3, [r1, #0]
	return 0;
    593a:	2000      	movs	r0, #0
		break;
    593c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    593e:	b300      	cbz	r0, 5982 <get_drive+0x68>
    5940:	2802      	cmp	r0, #2
    5942:	d103      	bne.n	594c <get_drive+0x32>
		*drive = NRF_GPIO_PIN_D0S1;
    5944:	2304      	movs	r3, #4
    5946:	700b      	strb	r3, [r1, #0]
	return 0;
    5948:	2000      	movs	r0, #0
		break;
    594a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    594c:	f06f 0015 	mvn.w	r0, #21
    5950:	4770      	bx	lr
    5952:	f06f 0015 	mvn.w	r0, #21
    5956:	4770      	bx	lr
    5958:	f240 2302 	movw	r3, #514	; 0x202
    595c:	4298      	cmp	r0, r3
    595e:	d01b      	beq.n	5998 <get_drive+0x7e>
    5960:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    5964:	d103      	bne.n	596e <get_drive+0x54>
		*drive = NRF_GPIO_PIN_H0H1;
    5966:	2303      	movs	r3, #3
    5968:	700b      	strb	r3, [r1, #0]
	return 0;
    596a:	2000      	movs	r0, #0
		break;
    596c:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    596e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    5972:	d103      	bne.n	597c <get_drive+0x62>
		*drive = NRF_GPIO_PIN_S0H1;
    5974:	2302      	movs	r3, #2
    5976:	700b      	strb	r3, [r1, #0]
	return 0;
    5978:	2000      	movs	r0, #0
		break;
    597a:	4770      	bx	lr
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    597c:	f06f 0015 	mvn.w	r0, #21
    5980:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    5982:	2000      	movs	r0, #0
    5984:	7008      	strb	r0, [r1, #0]
		break;
    5986:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    5988:	2306      	movs	r3, #6
    598a:	700b      	strb	r3, [r1, #0]
	return 0;
    598c:	2000      	movs	r0, #0
		break;
    598e:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    5990:	2307      	movs	r3, #7
    5992:	700b      	strb	r3, [r1, #0]
	return 0;
    5994:	2000      	movs	r0, #0
		break;
    5996:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_D0H1;
    5998:	2305      	movs	r3, #5
    599a:	700b      	strb	r3, [r1, #0]
	return 0;
    599c:	2000      	movs	r0, #0
}
    599e:	4770      	bx	lr

000059a0 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    59a0:	f010 0f10 	tst.w	r0, #16
    59a4:	d104      	bne.n	59b0 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    59a6:	f010 0f20 	tst.w	r0, #32
    59aa:	d103      	bne.n	59b4 <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    59ac:	2000      	movs	r0, #0
    59ae:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    59b0:	2003      	movs	r0, #3
    59b2:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    59b4:	2001      	movs	r0, #1
}
    59b6:	4770      	bx	lr

000059b8 <gpio_nrfx_port_get_raw>:
	return port->config;
    59b8:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59ba:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    59bc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    59c0:	600b      	str	r3, [r1, #0]
}
    59c2:	2000      	movs	r0, #0
    59c4:	4770      	bx	lr

000059c6 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    59c6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59c8:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    59ca:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    59ce:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    59d2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    59d6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    59da:	2000      	movs	r0, #0
    59dc:	4770      	bx	lr

000059de <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    59de:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59e0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    59e2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    59e6:	2000      	movs	r0, #0
    59e8:	4770      	bx	lr

000059ea <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    59ea:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59ec:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    59ee:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    59f2:	2000      	movs	r0, #0
    59f4:	4770      	bx	lr

000059f6 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    59f6:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59f8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    59fa:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    59fe:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    5a02:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    5a04:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    5a08:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    5a0c:	2000      	movs	r0, #0
    5a0e:	4770      	bx	lr

00005a10 <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    5a10:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    5a14:	d007      	beq.n	5a26 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5a16:	f1b1 6fc0 	cmp.w	r1, #100663296	; 0x6000000
    5a1a:	d00d      	beq.n	5a38 <get_trigger+0x28>
    5a1c:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5a20:	d008      	beq.n	5a34 <get_trigger+0x24>
    5a22:	2001      	movs	r0, #1
}
    5a24:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5a26:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
    5a2a:	d001      	beq.n	5a30 <get_trigger+0x20>
    5a2c:	2005      	movs	r0, #5
    5a2e:	4770      	bx	lr
    5a30:	2004      	movs	r0, #4
    5a32:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5a34:	2002      	movs	r0, #2
    5a36:	4770      	bx	lr
    5a38:	2003      	movs	r0, #3
    5a3a:	4770      	bx	lr

00005a3c <gpio_nrfx_manage_callback>:
{
    5a3c:	b508      	push	{r3, lr}
	return port->data;
    5a3e:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5a40:	3004      	adds	r0, #4
    5a42:	f7ff ff2b 	bl	589c <gpio_manage_callback>
}
    5a46:	bd08      	pop	{r3, pc}

00005a48 <nrfx_gpio_handler>:
{
    5a48:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    5a4a:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    5a4e:	0940      	lsrs	r0, r0, #5
    5a50:	f7fc f934 	bl	1cbc <get_dev>
	if (port == NULL) {
    5a54:	b130      	cbz	r0, 5a64 <nrfx_gpio_handler+0x1c>
    5a56:	4601      	mov	r1, r0
	return port->data;
    5a58:	6900      	ldr	r0, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    5a5a:	2201      	movs	r2, #1
    5a5c:	40a2      	lsls	r2, r4
    5a5e:	3004      	adds	r0, #4
    5a60:	f7ff ff3b 	bl	58da <gpio_fire_callbacks>
}
    5a64:	bd10      	pop	{r4, pc}

00005a66 <endtx_isr>:
	const struct uarte_nrfx_config *config = dev->config;
    5a66:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5a68:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
    5a6a:	f04f 0120 	mov.w	r1, #32
    5a6e:	f3ef 8311 	mrs	r3, BASEPRI
    5a72:	f381 8812 	msr	BASEPRI_MAX, r1
    5a76:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5a7a:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5a7e:	b131      	cbz	r1, 5a8e <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5a80:	2100      	movs	r1, #0
    5a82:	f8c2 1120 	str.w	r1, [r2, #288]	; 0x120
    5a86:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a8a:	2101      	movs	r1, #1
    5a8c:	60d1      	str	r1, [r2, #12]
	__asm__ volatile(
    5a8e:	f383 8811 	msr	BASEPRI, r3
    5a92:	f3bf 8f6f 	isb	sy
}
    5a96:	4770      	bx	lr

00005a98 <uarte_nrfx_isr_int>:
{
    5a98:	b538      	push	{r3, r4, r5, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5a9a:	6845      	ldr	r5, [r0, #4]
	return config->uarte_regs;
    5a9c:	682c      	ldr	r4, [r5, #0]
    return p_reg->INTENSET & mask;
    5a9e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5aa2:	f413 7f80 	tst.w	r3, #256	; 0x100
    5aa6:	d002      	beq.n	5aae <uarte_nrfx_isr_int+0x16>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5aa8:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
    5aac:	b9d3      	cbnz	r3, 5ae4 <uarte_nrfx_isr_int+0x4c>
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5aae:	686b      	ldr	r3, [r5, #4]
    5ab0:	f013 0f10 	tst.w	r3, #16
    5ab4:	d015      	beq.n	5ae2 <uarte_nrfx_isr_int+0x4a>
	__asm__ volatile(
    5ab6:	f04f 0220 	mov.w	r2, #32
    5aba:	f3ef 8311 	mrs	r3, BASEPRI
    5abe:	f382 8812 	msr	BASEPRI_MAX, r2
    5ac2:	f3bf 8f6f 	isb	sy
    5ac6:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    5aca:	b112      	cbz	r2, 5ad2 <uarte_nrfx_isr_int+0x3a>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5acc:	2200      	movs	r2, #0
    5ace:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    5ad2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    5ad6:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
	__asm__ volatile(
    5ada:	f383 8811 	msr	BASEPRI, r3
    5ade:	f3bf 8f6f 	isb	sy
}
    5ae2:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    5ae4:	f7ff ffbf 	bl	5a66 <endtx_isr>
    5ae8:	e7e1      	b.n	5aae <uarte_nrfx_isr_int+0x16>

00005aea <uarte_nrfx_configure>:
{
    5aea:	b570      	push	{r4, r5, r6, lr}
    5aec:	b082      	sub	sp, #8
    5aee:	4606      	mov	r6, r0
    5af0:	460c      	mov	r4, r1
	struct uarte_nrfx_data *data = dev->data;
    5af2:	6905      	ldr	r5, [r0, #16]
	switch (cfg->stop_bits) {
    5af4:	794b      	ldrb	r3, [r1, #5]
    5af6:	2b01      	cmp	r3, #1
    5af8:	d006      	beq.n	5b08 <uarte_nrfx_configure+0x1e>
    5afa:	2b03      	cmp	r3, #3
    5afc:	d011      	beq.n	5b22 <uarte_nrfx_configure+0x38>
    5afe:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    5b02:	4618      	mov	r0, r3
    5b04:	b002      	add	sp, #8
    5b06:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    5b08:	2300      	movs	r3, #0
    5b0a:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    5b0e:	79a3      	ldrb	r3, [r4, #6]
    5b10:	2b03      	cmp	r3, #3
    5b12:	d137      	bne.n	5b84 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    5b14:	79e3      	ldrb	r3, [r4, #7]
    5b16:	b143      	cbz	r3, 5b2a <uarte_nrfx_configure+0x40>
    5b18:	2b01      	cmp	r3, #1
    5b1a:	d010      	beq.n	5b3e <uarte_nrfx_configure+0x54>
    5b1c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5b20:	e7ef      	b.n	5b02 <uarte_nrfx_configure+0x18>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    5b22:	2310      	movs	r3, #16
    5b24:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    5b28:	e7f1      	b.n	5b0e <uarte_nrfx_configure+0x24>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    5b2a:	2300      	movs	r3, #0
    5b2c:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    5b30:	7923      	ldrb	r3, [r4, #4]
    5b32:	b143      	cbz	r3, 5b46 <uarte_nrfx_configure+0x5c>
    5b34:	2b02      	cmp	r3, #2
    5b36:	d021      	beq.n	5b7c <uarte_nrfx_configure+0x92>
    5b38:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5b3c:	e7e1      	b.n	5b02 <uarte_nrfx_configure+0x18>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    5b3e:	2301      	movs	r3, #1
    5b40:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    5b44:	e7f4      	b.n	5b30 <uarte_nrfx_configure+0x46>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    5b46:	2300      	movs	r3, #0
    5b48:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    5b4c:	6821      	ldr	r1, [r4, #0]
    5b4e:	4630      	mov	r0, r6
    5b50:	f7fc f9cc 	bl	1eec <baudrate_set>
    5b54:	4603      	mov	r3, r0
    5b56:	b9c0      	cbnz	r0, 5b8a <uarte_nrfx_configure+0xa0>
	const struct uarte_nrfx_config *config = dev->config;
    5b58:	6872      	ldr	r2, [r6, #4]
	return config->uarte_regs;
    5b5a:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5b5c:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    5b60:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    5b64:	f89d 2004 	ldrb.w	r2, [sp, #4]
    5b68:	4331      	orrs	r1, r6
    5b6a:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    5b6c:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	data->uart_config = *cfg;
    5b70:	3504      	adds	r5, #4
    5b72:	e894 0003 	ldmia.w	r4, {r0, r1}
    5b76:	e885 0003 	stmia.w	r5, {r0, r1}
	return 0;
    5b7a:	e7c2      	b.n	5b02 <uarte_nrfx_configure+0x18>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    5b7c:	230e      	movs	r3, #14
    5b7e:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    5b82:	e7e3      	b.n	5b4c <uarte_nrfx_configure+0x62>
		return -ENOTSUP;
    5b84:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5b88:	e7bb      	b.n	5b02 <uarte_nrfx_configure+0x18>
		return -ENOTSUP;
    5b8a:	f06f 0385 	mvn.w	r3, #133	; 0x85
    5b8e:	e7b8      	b.n	5b02 <uarte_nrfx_configure+0x18>

00005b90 <uarte_nrfx_config_get>:
{
    5b90:	460a      	mov	r2, r1
	struct uarte_nrfx_data *data = dev->data;
    5b92:	6903      	ldr	r3, [r0, #16]
	*cfg = data->uart_config;
    5b94:	3304      	adds	r3, #4
    5b96:	e893 0003 	ldmia.w	r3, {r0, r1}
    5b9a:	e882 0003 	stmia.w	r2, {r0, r1}
}
    5b9e:	2000      	movs	r0, #0
    5ba0:	4770      	bx	lr

00005ba2 <uarte_nrfx_err_check>:
	const struct uarte_nrfx_config *config = dev->config;
    5ba2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5ba4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5ba6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5baa:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5bae:	4770      	bx	lr

00005bb0 <is_tx_ready>:
	const struct uarte_nrfx_config *config = dev->config;
    5bb0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5bb2:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    5bb4:	685b      	ldr	r3, [r3, #4]
    5bb6:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5bba:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5bbe:	b929      	cbnz	r1, 5bcc <is_tx_ready+0x1c>
    5bc0:	b933      	cbnz	r3, 5bd0 <is_tx_ready+0x20>
    5bc2:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    5bc6:	b92b      	cbnz	r3, 5bd4 <is_tx_ready+0x24>
    5bc8:	2000      	movs	r0, #0
    5bca:	4770      	bx	lr
    5bcc:	2001      	movs	r0, #1
    5bce:	4770      	bx	lr
    5bd0:	2000      	movs	r0, #0
    5bd2:	4770      	bx	lr
    5bd4:	2001      	movs	r0, #1
}
    5bd6:	4770      	bx	lr

00005bd8 <uarte_enable>:
	const struct uarte_nrfx_config *config = dev->config;
    5bd8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5bda:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5bdc:	2208      	movs	r2, #8
    5bde:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    5be2:	4770      	bx	lr

00005be4 <tx_start>:
{
    5be4:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    5be6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5be8:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5bea:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5bee:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bf2:	2200      	movs	r2, #0
    5bf4:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
    5bf8:	f8d4 1120 	ldr.w	r1, [r4, #288]	; 0x120
    5bfc:	f8c4 2158 	str.w	r2, [r4, #344]	; 0x158
    5c00:	f8d4 2158 	ldr.w	r2, [r4, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5c04:	685b      	ldr	r3, [r3, #4]
    5c06:	f013 0f10 	tst.w	r3, #16
    5c0a:	d102      	bne.n	5c12 <tx_start+0x2e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c0c:	2301      	movs	r3, #1
    5c0e:	60a3      	str	r3, [r4, #8]
}
    5c10:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    5c12:	2101      	movs	r1, #1
    5c14:	f7ff ffe0 	bl	5bd8 <uarte_enable>
    p_reg->INTENSET = mask;
    5c18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5c1c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    5c20:	e7f4      	b.n	5c0c <tx_start+0x28>

00005c22 <uarte_nrfx_poll_in>:
{
    5c22:	b410      	push	{r4}
	const struct uarte_nrfx_data *data = dev->data;
    5c24:	6904      	ldr	r4, [r0, #16]
	const struct uarte_nrfx_config *config = dev->config;
    5c26:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    5c28:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5c2a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5c2e:	b15a      	cbz	r2, 5c48 <uarte_nrfx_poll_in+0x26>
	*c = *data->rx_data;
    5c30:	6962      	ldr	r2, [r4, #20]
    5c32:	7812      	ldrb	r2, [r2, #0]
    5c34:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5c36:	2000      	movs	r0, #0
    5c38:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5c3c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5c40:	2201      	movs	r2, #1
    5c42:	601a      	str	r2, [r3, #0]
}
    5c44:	bc10      	pop	{r4}
    5c46:	4770      	bx	lr
		return -1;
    5c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5c4c:	e7fa      	b.n	5c44 <uarte_nrfx_poll_in+0x22>

00005c4e <k_msleep>:
{
    5c4e:	b508      	push	{r3, lr}
	return k_sleep(Z_TIMEOUT_MS(ms));
    5c50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    5c54:	17c1      	asrs	r1, r0, #31
    5c56:	03c9      	lsls	r1, r1, #15
    5c58:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    5c5c:	03c0      	lsls	r0, r0, #15
    5c5e:	f240 33e7 	movw	r3, #999	; 0x3e7
    5c62:	18c0      	adds	r0, r0, r3
    5c64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5c68:	f04f 0300 	mov.w	r3, #0
    5c6c:	f141 0100 	adc.w	r1, r1, #0
    5c70:	f7fa fa46 	bl	100 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    5c74:	f7fe fb4a 	bl	430c <z_impl_k_sleep>
}
    5c78:	bd08      	pop	{r3, pc}

00005c7a <wait_tx_ready>:
{
    5c7a:	b570      	push	{r4, r5, r6, lr}
    5c7c:	4606      	mov	r6, r0
    5c7e:	e013      	b.n	5ca8 <wait_tx_ready+0x2e>
		if (res) {
    5c80:	b17d      	cbz	r5, 5ca2 <wait_tx_ready+0x28>
	__asm__ volatile(
    5c82:	f04f 0320 	mov.w	r3, #32
    5c86:	f3ef 8411 	mrs	r4, BASEPRI
    5c8a:	f383 8812 	msr	BASEPRI_MAX, r3
    5c8e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    5c92:	4630      	mov	r0, r6
    5c94:	f7ff ff8c 	bl	5bb0 <is_tx_ready>
    5c98:	b998      	cbnz	r0, 5cc2 <wait_tx_ready+0x48>
	__asm__ volatile(
    5c9a:	f384 8811 	msr	BASEPRI, r4
    5c9e:	f3bf 8f6f 	isb	sy
			k_msleep(1);
    5ca2:	2001      	movs	r0, #1
    5ca4:	f7ff ffd3 	bl	5c4e <k_msleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    5ca8:	2464      	movs	r4, #100	; 0x64
    5caa:	4630      	mov	r0, r6
    5cac:	f7ff ff80 	bl	5bb0 <is_tx_ready>
    5cb0:	4605      	mov	r5, r0
    5cb2:	2800      	cmp	r0, #0
    5cb4:	d1e4      	bne.n	5c80 <wait_tx_ready+0x6>
    5cb6:	2001      	movs	r0, #1
    5cb8:	f000 f9b1 	bl	601e <nrfx_busy_wait>
    5cbc:	3c01      	subs	r4, #1
    5cbe:	d1f4      	bne.n	5caa <wait_tx_ready+0x30>
    5cc0:	e7de      	b.n	5c80 <wait_tx_ready+0x6>
}
    5cc2:	4620      	mov	r0, r4
    5cc4:	bd70      	pop	{r4, r5, r6, pc}

00005cc6 <pinctrl_apply_state>:
 * @retval -ENOENT If given state id does not exist.
 * @retval -errno Negative errno for other failures.
 */
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
				      uint8_t id)
{
    5cc6:	b510      	push	{r4, lr}
    5cc8:	b082      	sub	sp, #8
    5cca:	4604      	mov	r4, r0
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    5ccc:	aa01      	add	r2, sp, #4
    5cce:	f000 f8f0 	bl	5eb2 <pinctrl_lookup_state>
	if (ret < 0) {
    5cd2:	2800      	cmp	r0, #0
    5cd4:	db05      	blt.n	5ce2 <pinctrl_apply_state+0x1c>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    5cd6:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    5cd8:	6822      	ldr	r2, [r4, #0]
    5cda:	7919      	ldrb	r1, [r3, #4]
    5cdc:	6818      	ldr	r0, [r3, #0]
    5cde:	f7fc fc69 	bl	25b4 <pinctrl_configure_pins>
}
    5ce2:	b002      	add	sp, #8
    5ce4:	bd10      	pop	{r4, pc}

00005ce6 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    5ce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cea:	4604      	mov	r4, r0
	const struct uarte_nrfx_config *config = dev->config;
    5cec:	6847      	ldr	r7, [r0, #4]
	return config->uarte_regs;
    5cee:	683e      	ldr	r6, [r7, #0]
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    5cf0:	f8d0 8010 	ldr.w	r8, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    5cf4:	2100      	movs	r1, #0
    5cf6:	f8c6 1500 	str.w	r1, [r6, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
    5cfa:	f8c8 0000 	str.w	r0, [r8]

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    5cfe:	68f8      	ldr	r0, [r7, #12]
    5d00:	f7ff ffe1 	bl	5cc6 <pinctrl_apply_state>
	if (err < 0) {
    5d04:	1e05      	subs	r5, r0, #0
    5d06:	db35      	blt.n	5d74 <uarte_instance_init+0x8e>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    5d08:	f108 0104 	add.w	r1, r8, #4
    5d0c:	4620      	mov	r0, r4
    5d0e:	f7ff feec 	bl	5aea <uarte_nrfx_configure>
	if (err) {
    5d12:	4605      	mov	r5, r0
    5d14:	bb70      	cbnz	r0, 5d74 <uarte_instance_init+0x8e>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    5d16:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    5d18:	f013 0f02 	tst.w	r3, #2
    5d1c:	d12d      	bne.n	5d7a <uarte_instance_init+0x94>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    5d1e:	2308      	movs	r3, #8
    5d20:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    5d24:	7a3b      	ldrb	r3, [r7, #8]
    5d26:	b95b      	cbnz	r3, 5d40 <uarte_instance_init+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5d28:	f8c6 3110 	str.w	r3, [r6, #272]	; 0x110
    5d2c:	f8d6 3110 	ldr.w	r3, [r6, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, data->rx_data, 1);
    5d30:	f8d8 3014 	ldr.w	r3, [r8, #20]

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5d34:	f8c6 3534 	str.w	r3, [r6, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    5d38:	2301      	movs	r3, #1
    5d3a:	f8c6 3538 	str.w	r3, [r6, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d3e:	6033      	str	r3, [r6, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    5d40:	687b      	ldr	r3, [r7, #4]
    5d42:	f013 0f02 	tst.w	r3, #2
    5d46:	d103      	bne.n	5d50 <uarte_instance_init+0x6a>
    p_reg->INTENSET = mask;
    5d48:	f44f 7380 	mov.w	r3, #256	; 0x100
    5d4c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    5d50:	687b      	ldr	r3, [r7, #4]
    5d52:	f013 0f10 	tst.w	r3, #16
    5d56:	d003      	beq.n	5d60 <uarte_instance_init+0x7a>
    5d58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    5d5c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, data->char_out, 0);
    5d60:	f8d8 3010 	ldr.w	r3, [r8, #16]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5d64:	f8c6 3544 	str.w	r3, [r6, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    5d68:	2300      	movs	r3, #0
    5d6a:	f8c6 3548 	str.w	r3, [r6, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5d6e:	2301      	movs	r3, #1
    5d70:	60b3      	str	r3, [r6, #8]
    5d72:	60f3      	str	r3, [r6, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    5d74:	4628      	mov	r0, r5
    5d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    5d7a:	4641      	mov	r1, r8
    5d7c:	4630      	mov	r0, r6
    5d7e:	f7fc f98b 	bl	2098 <endtx_stoptx_ppi_init>
		if (err < 0) {
    5d82:	2800      	cmp	r0, #0
    5d84:	dacb      	bge.n	5d1e <uarte_instance_init+0x38>
			return err;
    5d86:	4605      	mov	r5, r0
    5d88:	e7f4      	b.n	5d74 <uarte_instance_init+0x8e>

00005d8a <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    5d8a:	b510      	push	{r4, lr}
    5d8c:	4604      	mov	r4, r0
    5d8e:	2200      	movs	r2, #0
    5d90:	2101      	movs	r1, #1
    5d92:	2002      	movs	r0, #2
    5d94:	f7ff faf9 	bl	538a <z_arm_irq_priority_set>
    5d98:	2002      	movs	r0, #2
    5d9a:	f7ff faf1 	bl	5380 <arch_irq_enable>
    5d9e:	2100      	movs	r1, #0
    5da0:	4620      	mov	r0, r4
    5da2:	f7ff ffa0 	bl	5ce6 <uarte_instance_init>
    5da6:	bd10      	pop	{r4, pc}

00005da8 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    5da8:	b510      	push	{r4, lr}
    5daa:	4604      	mov	r4, r0
    5dac:	2200      	movs	r2, #0
    5dae:	2101      	movs	r1, #1
    5db0:	2028      	movs	r0, #40	; 0x28
    5db2:	f7ff faea 	bl	538a <z_arm_irq_priority_set>
    5db6:	2028      	movs	r0, #40	; 0x28
    5db8:	f7ff fae2 	bl	5380 <arch_irq_enable>
    5dbc:	2100      	movs	r1, #0
    5dbe:	4620      	mov	r0, r4
    5dc0:	f7ff ff91 	bl	5ce6 <uarte_instance_init>
    5dc4:	bd10      	pop	{r4, pc}

00005dc6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    5dc6:	4770      	bx	lr

00005dc8 <counter_sub>:
	return (a - b) & COUNTER_MAX;
    5dc8:	1a40      	subs	r0, r0, r1
}
    5dca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5dce:	4770      	bx	lr

00005dd0 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    5dd0:	f100 0350 	add.w	r3, r0, #80	; 0x50
    5dd4:	009b      	lsls	r3, r3, #2
    5dd6:	b29b      	uxth	r3, r3
    5dd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5ddc:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5de0:	2200      	movs	r2, #0
    5de2:	601a      	str	r2, [r3, #0]
    5de4:	681b      	ldr	r3, [r3, #0]
}
    5de6:	4770      	bx	lr

00005de8 <absolute_time_to_cc>:
}
    5de8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    5dec:	4770      	bx	lr

00005dee <full_int_lock>:
	__asm__ volatile(
    5dee:	f04f 0320 	mov.w	r3, #32
    5df2:	f3ef 8011 	mrs	r0, BASEPRI
    5df6:	f383 8812 	msr	BASEPRI_MAX, r3
    5dfa:	f3bf 8f6f 	isb	sy
}
    5dfe:	4770      	bx	lr

00005e00 <full_int_unlock>:
	__asm__ volatile(
    5e00:	f380 8811 	msr	BASEPRI, r0
    5e04:	f3bf 8f6f 	isb	sy
}
    5e08:	4770      	bx	lr

00005e0a <set_absolute_alarm>:
{
    5e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e0c:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5e0e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    5e12:	f7fc f96f 	bl	20f4 <get_comparator>
    5e16:	4607      	mov	r7, r0
    5e18:	e019      	b.n	5e4e <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    5e1a:	2013      	movs	r0, #19
    5e1c:	f000 fc74 	bl	6708 <z_impl_k_busy_wait>
}
    5e20:	e022      	b.n	5e68 <set_absolute_alarm+0x5e>
		event_clear(chan);
    5e22:	4630      	mov	r0, r6
    5e24:	f7ff ffd4 	bl	5dd0 <event_clear>
		event_enable(chan);
    5e28:	4630      	mov	r0, r6
    5e2a:	f7fc f96b 	bl	2104 <event_enable>
		set_comparator(chan, cc_val);
    5e2e:	4629      	mov	r1, r5
    5e30:	4630      	mov	r0, r6
    5e32:	f7fc f955 	bl	20e0 <set_comparator>
		now2 = counter();
    5e36:	f7fc f979 	bl	212c <counter>
	} while ((now2 != now) &&
    5e3a:	4284      	cmp	r4, r0
    5e3c:	d01e      	beq.n	5e7c <set_absolute_alarm+0x72>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    5e3e:	1c81      	adds	r1, r0, #2
    5e40:	4628      	mov	r0, r5
    5e42:	f7ff ffc1 	bl	5dc8 <counter_sub>
	} while ((now2 != now) &&
    5e46:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5e4a:	d917      	bls.n	5e7c <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    5e4c:	462f      	mov	r7, r5
		now = counter();
    5e4e:	f7fc f96d 	bl	212c <counter>
    5e52:	4604      	mov	r4, r0
		set_comparator(chan, now);
    5e54:	4601      	mov	r1, r0
    5e56:	4630      	mov	r0, r6
    5e58:	f7fc f942 	bl	20e0 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    5e5c:	4621      	mov	r1, r4
    5e5e:	4638      	mov	r0, r7
    5e60:	f7ff ffb2 	bl	5dc8 <counter_sub>
    5e64:	2801      	cmp	r0, #1
    5e66:	d0d8      	beq.n	5e1a <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5e68:	1ca7      	adds	r7, r4, #2
    5e6a:	4639      	mov	r1, r7
    5e6c:	4628      	mov	r0, r5
    5e6e:	f7ff ffab 	bl	5dc8 <counter_sub>
    5e72:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5e76:	d9d4      	bls.n	5e22 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    5e78:	463d      	mov	r5, r7
    5e7a:	e7d2      	b.n	5e22 <set_absolute_alarm+0x18>
}
    5e7c:	4628      	mov	r0, r5
    5e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005e80 <compare_set>:
{
    5e80:	b5f0      	push	{r4, r5, r6, r7, lr}
    5e82:	b083      	sub	sp, #12
    5e84:	4604      	mov	r4, r0
    5e86:	4617      	mov	r7, r2
    5e88:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    5e8a:	f7fc f955 	bl	2138 <compare_int_lock>
    5e8e:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    5e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5e92:	9301      	str	r3, [sp, #4]
    5e94:	9b08      	ldr	r3, [sp, #32]
    5e96:	9300      	str	r3, [sp, #0]
    5e98:	463a      	mov	r2, r7
    5e9a:	462b      	mov	r3, r5
    5e9c:	4620      	mov	r0, r4
    5e9e:	f7fc fa37 	bl	2310 <compare_set_nolocks>
    5ea2:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    5ea4:	4631      	mov	r1, r6
    5ea6:	4620      	mov	r0, r4
    5ea8:	f7fc f9a6 	bl	21f8 <compare_int_unlock>
}
    5eac:	4628      	mov	r0, r5
    5eae:	b003      	add	sp, #12
    5eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00005eb2 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    5eb2:	b410      	push	{r4}
	*state = &config->states[0];
    5eb4:	6843      	ldr	r3, [r0, #4]
    5eb6:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5eb8:	e001      	b.n	5ebe <pinctrl_lookup_state+0xc>
		if (id == (*state)->id) {
			return 0;
		}

		(*state)++;
    5eba:	3408      	adds	r4, #8
    5ebc:	6014      	str	r4, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    5ebe:	6814      	ldr	r4, [r2, #0]
    5ec0:	7a03      	ldrb	r3, [r0, #8]
    5ec2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    5ec6:	3b01      	subs	r3, #1
    5ec8:	f8d0 c004 	ldr.w	ip, [r0, #4]
    5ecc:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
    5ed0:	429c      	cmp	r4, r3
    5ed2:	d804      	bhi.n	5ede <pinctrl_lookup_state+0x2c>
		if (id == (*state)->id) {
    5ed4:	7963      	ldrb	r3, [r4, #5]
    5ed6:	428b      	cmp	r3, r1
    5ed8:	d1ef      	bne.n	5eba <pinctrl_lookup_state+0x8>
			return 0;
    5eda:	2000      	movs	r0, #0
    5edc:	e001      	b.n	5ee2 <pinctrl_lookup_state+0x30>
	}

	return -ENOENT;
    5ede:	f06f 0001 	mvn.w	r0, #1
}
    5ee2:	bc10      	pop	{r4}
    5ee4:	4770      	bx	lr

00005ee6 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5ee6:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    5ee8:	2000      	movs	r0, #0
    5eea:	f7ff fb8a 	bl	5602 <sys_arch_reboot>

00005eee <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    5eee:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    5ef0:	f7fe fbea 	bl	46c8 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    5ef4:	bd08      	pop	{r3, pc}

00005ef6 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    5ef6:	b510      	push	{r4, lr}
    5ef8:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    5efa:	f7fb f813 	bl	f24 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    5efe:	f7fb f90d 	bl	111c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    5f02:	4620      	mov	r0, r4
    5f04:	f7ff fff3 	bl	5eee <hw_cc3xx_init_internal>
	return res;
}
    5f08:	bd10      	pop	{r4, pc}

00005f0a <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5f0a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5f0e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    5f12:	2b08      	cmp	r3, #8
    5f14:	d001      	beq.n	5f1a <nrf52_errata_36+0x10>
        return false;
    5f16:	2000      	movs	r0, #0
    5f18:	4770      	bx	lr
                        return true;
    5f1a:	2001      	movs	r0, #1
}
    5f1c:	4770      	bx	lr

00005f1e <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5f1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5f22:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    5f26:	2b08      	cmp	r3, #8
    5f28:	d001      	beq.n	5f2e <nrf52_errata_66+0x10>
        return false;
    5f2a:	2000      	movs	r0, #0
    5f2c:	4770      	bx	lr
                        return true;
    5f2e:	2001      	movs	r0, #1
}
    5f30:	4770      	bx	lr

00005f32 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5f32:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5f36:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5f3a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    5f3e:	2a08      	cmp	r2, #8
    5f40:	d001      	beq.n	5f46 <nrf52_errata_98+0x14>
        return false;
    5f42:	2000      	movs	r0, #0
    5f44:	4770      	bx	lr
                switch(var2)
    5f46:	2b00      	cmp	r3, #0
    5f48:	d804      	bhi.n	5f54 <nrf52_errata_98+0x22>
    5f4a:	e8df f003 	tbb	[pc, r3]
    5f4e:	01          	.byte	0x01
    5f4f:	00          	.byte	0x00
    5f50:	2001      	movs	r0, #1
    5f52:	4770      	bx	lr
                        return false;
    5f54:	2000      	movs	r0, #0
}
    5f56:	4770      	bx	lr

00005f58 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5f58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5f5c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5f60:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    5f64:	2a08      	cmp	r2, #8
    5f66:	d001      	beq.n	5f6c <nrf52_errata_103+0x14>
        return false;
    5f68:	2000      	movs	r0, #0
    5f6a:	4770      	bx	lr
                switch(var2)
    5f6c:	2b00      	cmp	r3, #0
    5f6e:	d804      	bhi.n	5f7a <nrf52_errata_103+0x22>
    5f70:	e8df f003 	tbb	[pc, r3]
    5f74:	01          	.byte	0x01
    5f75:	00          	.byte	0x00
    5f76:	2001      	movs	r0, #1
    5f78:	4770      	bx	lr
                        return false;
    5f7a:	2000      	movs	r0, #0
}
    5f7c:	4770      	bx	lr

00005f7e <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5f7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5f82:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5f86:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    5f8a:	2a08      	cmp	r2, #8
    5f8c:	d001      	beq.n	5f92 <nrf52_errata_115+0x14>
        return false;
    5f8e:	2000      	movs	r0, #0
    5f90:	4770      	bx	lr
                switch(var2)
    5f92:	2b00      	cmp	r3, #0
    5f94:	d804      	bhi.n	5fa0 <nrf52_errata_115+0x22>
    5f96:	e8df f003 	tbb	[pc, r3]
    5f9a:	01          	.byte	0x01
    5f9b:	00          	.byte	0x00
    5f9c:	2001      	movs	r0, #1
    5f9e:	4770      	bx	lr
                        return false;
    5fa0:	2000      	movs	r0, #0
}
    5fa2:	4770      	bx	lr

00005fa4 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5fa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5fa8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5fac:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            if (var1 == 0x08)
    5fb0:	2a08      	cmp	r2, #8
    5fb2:	d001      	beq.n	5fb8 <nrf52_errata_120+0x14>
        return false;
    5fb4:	2000      	movs	r0, #0
    5fb6:	4770      	bx	lr
                switch(var2)
    5fb8:	2b00      	cmp	r3, #0
    5fba:	d804      	bhi.n	5fc6 <nrf52_errata_120+0x22>
    5fbc:	e8df f003 	tbb	[pc, r3]
    5fc0:	01          	.byte	0x01
    5fc1:	00          	.byte	0x00
    5fc2:	2001      	movs	r0, #1
    5fc4:	4770      	bx	lr
                        return false;
    5fc6:	2000      	movs	r0, #0
}
    5fc8:	4770      	bx	lr

00005fca <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5fca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5fce:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
            if (var1 == 0x08)
    5fd2:	2b08      	cmp	r3, #8
    5fd4:	d001      	beq.n	5fda <nrf52_errata_136+0x10>
        return false;
    5fd6:	2000      	movs	r0, #0
    5fd8:	4770      	bx	lr
                        return true;
    5fda:	2001      	movs	r0, #1
}
    5fdc:	4770      	bx	lr

00005fde <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5fde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5fe2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5fe6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    5fea:	2a08      	cmp	r2, #8
    5fec:	d001      	beq.n	5ff2 <nrf52_configuration_249+0x14>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    5fee:	2000      	movs	r0, #0
    5ff0:	4770      	bx	lr
                switch(var2)
    5ff2:	2b04      	cmp	r3, #4
    5ff4:	d801      	bhi.n	5ffa <nrf52_configuration_249+0x1c>
    5ff6:	2000      	movs	r0, #0
    5ff8:	4770      	bx	lr
                        return true;
    5ffa:	2001      	movs	r0, #1
    #endif
}
    5ffc:	4770      	bx	lr

00005ffe <nrf52_handle_approtect>:
        Otherwise, the fw branch state is loaded from UICR, emulating the legacy APPROTECT behavior.

         The same mechanism is implemented for SECURE APPROTECT, with the macros
         ENABLE_SECURE_APPROTECT and ENABLE_SECURE_APPROTECT_USER_HANDLING. */
static inline void nrf52_handle_approtect(void)
{
    5ffe:	b508      	push	{r3, lr}
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    6000:	f7ff ffed 	bl	5fde <nrf52_configuration_249>
    6004:	b138      	cbz	r0, 6016 <nrf52_handle_approtect+0x18>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    6006:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    600a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    600e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6012:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
            }
        #endif
    #endif
}
    6016:	bd08      	pop	{r3, pc}

00006018 <nrfx_isr>:
#include <nrfx.h>
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
    6018:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    601a:	4780      	blx	r0
}
    601c:	bd08      	pop	{r3, pc}

0000601e <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    601e:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    6020:	f000 fb72 	bl	6708 <z_impl_k_busy_wait>
	if (IS_ENABLED(CONFIG_SYS_CLOCK_EXISTS)) {
		k_busy_wait(usec_to_wait);
	} else {
		nrfx_coredep_delay_us(usec_to_wait);
	}
}
    6024:	bd08      	pop	{r3, pc}

00006026 <nrf_clock_is_running>:
    switch (domain)
    6026:	b119      	cbz	r1, 6030 <nrf_clock_is_running+0xa>
    6028:	2901      	cmp	r1, #1
    602a:	d00e      	beq.n	604a <nrf_clock_is_running+0x24>
    602c:	2000      	movs	r0, #0
    602e:	4770      	bx	lr
            if (p_clk_src != NULL)
    6030:	b122      	cbz	r2, 603c <nrf_clock_is_running+0x16>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6032:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6036:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    603a:	6013      	str	r3, [r2, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    603c:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
    6040:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    6044:	d10e      	bne.n	6064 <nrf_clock_is_running+0x3e>
    return false;
    6046:	2000      	movs	r0, #0
    6048:	4770      	bx	lr
            if (p_clk_src != NULL)
    604a:	b122      	cbz	r2, 6056 <nrf_clock_is_running+0x30>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    604c:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    6050:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6054:	7013      	strb	r3, [r2, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6056:	f8d0 340c 	ldr.w	r3, [r0, #1036]	; 0x40c
    605a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    605e:	d103      	bne.n	6068 <nrf_clock_is_running+0x42>
    return false;
    6060:	2000      	movs	r0, #0
    6062:	4770      	bx	lr
                return true;
    6064:	2001      	movs	r0, #1
    6066:	4770      	bx	lr
                return true;
    6068:	2001      	movs	r0, #1
}
    606a:	4770      	bx	lr

0000606c <clock_initial_lfclksrc_get>:
}
    606c:	2000      	movs	r0, #0
    606e:	4770      	bx	lr

00006070 <nrfx_power_clock_irq_init>:
extern "C" {
#endif


__STATIC_INLINE void nrfx_power_clock_irq_init(void)
{
    6070:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6072:	2000      	movs	r0, #0
    6074:	f7fb f8a6 	bl	11c4 <arch_irq_is_enabled>
    6078:	b100      	cbz	r0, 607c <nrfx_power_clock_irq_init+0xc>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    }
}
    607a:	bd08      	pop	{r3, pc}
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    607c:	f7ff f980 	bl	5380 <arch_irq_enable>
}
    6080:	e7fb      	b.n	607a <nrfx_power_clock_irq_init+0xa>

00006082 <clock_lfclksrc_tweak>:
{
    6082:	b538      	push	{r3, r4, r5, lr}
    6084:	4604      	mov	r4, r0
    bool is_correct_clk = (*p_lfclksrc == NRFX_CLOCK_CONFIG_LF_SRC);
    6086:	6803      	ldr	r3, [r0, #0]
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    6088:	2b01      	cmp	r3, #1
    608a:	d002      	beq.n	6092 <clock_lfclksrc_tweak+0x10>
    608c:	b933      	cbnz	r3, 609c <clock_lfclksrc_tweak+0x1a>
    608e:	2301      	movs	r3, #1
    6090:	e000      	b.n	6094 <clock_lfclksrc_tweak+0x12>
    6092:	2301      	movs	r3, #1
    if (!is_correct_clk)
    6094:	461d      	mov	r5, r3
    6096:	b11b      	cbz	r3, 60a0 <clock_lfclksrc_tweak+0x1e>
}
    6098:	4628      	mov	r0, r5
    609a:	bd38      	pop	{r3, r4, r5, pc}
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    609c:	2300      	movs	r3, #0
    609e:	e7f9      	b.n	6094 <clock_lfclksrc_tweak+0x12>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    60a0:	2000      	movs	r0, #0
    60a2:	f7fc fd01 	bl	2aa8 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    60a6:	f7ff ffe1 	bl	606c <clock_initial_lfclksrc_get>
    60aa:	6020      	str	r0, [r4, #0]
    60ac:	e7f4      	b.n	6098 <clock_lfclksrc_tweak+0x16>

000060ae <nrfx_clock_enable>:
{
    60ae:	b508      	push	{r3, lr}
    nrfx_power_clock_irq_init();
    60b0:	f7ff ffde 	bl	6070 <nrfx_power_clock_irq_init>
    nrf_clock_lf_src_set(NRF_CLOCK, clock_initial_lfclksrc_get());
    60b4:	f7ff ffda 	bl	606c <clock_initial_lfclksrc_get>
    p_reg->LFCLKSRC = (uint32_t)(source);
    60b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60bc:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
}
    60c0:	bd08      	pop	{r3, pc}

000060c2 <nrfx_clock_start>:
    switch (domain)
    60c2:	b110      	cbz	r0, 60ca <nrfx_clock_start+0x8>
    60c4:	2801      	cmp	r0, #1
    60c6:	d040      	beq.n	614a <nrfx_clock_start+0x88>
    60c8:	4770      	bx	lr
{
    60ca:	b500      	push	{lr}
    60cc:	b083      	sub	sp, #12
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    60ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    60d2:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    60d6:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    60da:	9301      	str	r3, [sp, #4]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    60dc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    60e0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    60e4:	d11b      	bne.n	611e <nrfx_clock_start+0x5c>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    60e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60ea:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    60ee:	f013 0f01 	tst.w	r3, #1
    60f2:	d118      	bne.n	6126 <nrfx_clock_start+0x64>
                    lfclksrc = clock_initial_lfclksrc_get();
    60f4:	f7ff ffba 	bl	606c <clock_initial_lfclksrc_get>
    60f8:	9001      	str	r0, [sp, #4]
    p_reg->LFCLKSRC = (uint32_t)(source);
    60fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60fe:	9a01      	ldr	r2, [sp, #4]
    6100:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6104:	2200      	movs	r2, #0
    6106:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    610a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    610e:	2202      	movs	r2, #2
    6110:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6114:	2201      	movs	r2, #1
    6116:	609a      	str	r2, [r3, #8]
}
    6118:	b003      	add	sp, #12
    611a:	f85d fb04 	ldr.w	pc, [sp], #4
                    (void)clock_lfclksrc_tweak(&lfclksrc);
    611e:	a801      	add	r0, sp, #4
    6120:	f7ff ffaf 	bl	6082 <clock_lfclksrc_tweak>
    6124:	e7e9      	b.n	60fa <nrfx_clock_start+0x38>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    612a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    612e:	f003 0303 	and.w	r3, r3, #3
                    lfclksrc = nrf_clock_lf_srccopy_get(NRF_CLOCK);
    6132:	9301      	str	r3, [sp, #4]
                    if (clock_lfclksrc_tweak(&lfclksrc))
    6134:	a801      	add	r0, sp, #4
    6136:	f7ff ffa4 	bl	6082 <clock_lfclksrc_tweak>
    613a:	2800      	cmp	r0, #0
    613c:	d0dd      	beq.n	60fa <nrfx_clock_start+0x38>
    p_reg->INTENSET = mask;
    613e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6142:	2202      	movs	r2, #2
    6144:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    6148:	e7e6      	b.n	6118 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    614a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    614e:	2200      	movs	r2, #0
    6150:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6154:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6158:	2201      	movs	r2, #1
    615a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    615e:	601a      	str	r2, [r3, #0]
    6160:	4770      	bx	lr

00006162 <nrfx_clock_stop>:
{
    6162:	b508      	push	{r3, lr}
    clock_stop(domain);
    6164:	f7fc fca0 	bl	2aa8 <clock_stop>
}
    6168:	bd08      	pop	{r3, pc}

0000616a <nrf_gpiote_event_configure>:
{
    616a:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    616c:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    6170:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6174:	f424 344f 	bic.w	r4, r4, #211968	; 0x33c00
    6178:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    617c:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6180:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    6184:	0212      	lsls	r2, r2, #8
    6186:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    618a:	041b      	lsls	r3, r3, #16
    618c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6190:	431a      	orrs	r2, r3
    6192:	4314      	orrs	r4, r2
    6194:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    6198:	bc10      	pop	{r4}
    619a:	4770      	bx	lr

0000619c <nrf_gpiote_task_configure>:
{
    619c:	b410      	push	{r4}
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    619e:	f501 71a2 	add.w	r1, r1, #324	; 0x144
    61a2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    61a6:	f424 1499 	bic.w	r4, r4, #1253376	; 0x132000
    61aa:	f424 54f8 	bic.w	r4, r4, #7936	; 0x1f00
    61ae:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    61b2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    61b6:	0212      	lsls	r2, r2, #8
    61b8:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    61bc:	041b      	lsls	r3, r3, #16
    61be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    61c2:	431a      	orrs	r2, r3
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    61c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
    61c8:	051b      	lsls	r3, r3, #20
    61ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    61ce:	431a      	orrs	r2, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    61d0:	4314      	orrs	r4, r2
    61d2:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
}
    61d6:	bc10      	pop	{r4}
    61d8:	4770      	bx	lr

000061da <nrf_gpio_cfg_sense_set>:
{
    61da:	b500      	push	{lr}
    61dc:	b085      	sub	sp, #20
    61de:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    61e2:	f10d 030f 	add.w	r3, sp, #15
    61e6:	9301      	str	r3, [sp, #4]
    61e8:	2100      	movs	r1, #0
    61ea:	9100      	str	r1, [sp, #0]
    61ec:	460b      	mov	r3, r1
    61ee:	460a      	mov	r2, r1
    61f0:	f7fc fcf2 	bl	2bd8 <nrf_gpio_reconfigure>
}
    61f4:	b005      	add	sp, #20
    61f6:	f85d fb04 	ldr.w	pc, [sp], #4

000061fa <pin_is_task_output>:
{
    61fa:	b510      	push	{r4, lr}
    61fc:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    61fe:	f7fc fd89 	bl	2d14 <pin_is_output>
    6202:	b128      	cbz	r0, 6210 <pin_is_task_output+0x16>
    6204:	4620      	mov	r0, r4
    6206:	f7fc fd6f 	bl	2ce8 <pin_in_use_by_te>
    620a:	b118      	cbz	r0, 6214 <pin_is_task_output+0x1a>
    620c:	2001      	movs	r0, #1
    620e:	e000      	b.n	6212 <pin_is_task_output+0x18>
    6210:	2000      	movs	r0, #0
}
    6212:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6214:	2000      	movs	r0, #0
    6216:	e7fc      	b.n	6212 <pin_is_task_output+0x18>

00006218 <pin_is_input>:
{
    6218:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    621a:	f7fc fd7b 	bl	2d14 <pin_is_output>
    621e:	f080 0001 	eor.w	r0, r0, #1
}
    6222:	b2c0      	uxtb	r0, r0
    6224:	bd08      	pop	{r3, pc}

00006226 <gpiote_polarity_to_trigger>:
}
    6226:	4770      	bx	lr

00006228 <gpiote_trigger_to_polarity>:
}
    6228:	4770      	bx	lr

0000622a <is_level>:
}
    622a:	2803      	cmp	r0, #3
    622c:	bf94      	ite	ls
    622e:	2000      	movls	r0, #0
    6230:	2001      	movhi	r0, #1
    6232:	4770      	bx	lr

00006234 <latch_pending_read_and_check>:
{
    6234:	b510      	push	{r4, lr}
    6236:	4604      	mov	r4, r0
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);
    6238:	4602      	mov	r2, r0
    623a:	2102      	movs	r1, #2
    623c:	2000      	movs	r0, #0
    623e:	f7fc fd27 	bl	2c90 <nrf_gpio_latches_read_and_clear>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    6242:	2300      	movs	r3, #0
    6244:	2b01      	cmp	r3, #1
    6246:	d804      	bhi.n	6252 <latch_pending_read_and_check+0x1e>
        if (latch[port_idx])
    6248:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    624c:	b91a      	cbnz	r2, 6256 <latch_pending_read_and_check+0x22>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    624e:	3301      	adds	r3, #1
    6250:	e7f8      	b.n	6244 <latch_pending_read_and_check+0x10>
    return false;
    6252:	2000      	movs	r0, #0
}
    6254:	bd10      	pop	{r4, pc}
            return true;
    6256:	2001      	movs	r0, #1
    6258:	e7fc      	b.n	6254 <latch_pending_read_and_check+0x20>

0000625a <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    625a:	b508      	push	{r3, lr}
  _DoInit();
    625c:	f7fd f924 	bl	34a8 <_DoInit>
}
    6260:	bd08      	pop	{r3, pc}

00006262 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6262:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    6264:	f7ff fff9 	bl	625a <SEGGER_RTT_Init>

	return 0;
}
    6268:	2000      	movs	r0, #0
    626a:	bd08      	pop	{r3, pc}

0000626c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    626c:	b160      	cbz	r0, 6288 <z_device_is_ready+0x1c>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    626e:	68c3      	ldr	r3, [r0, #12]
    6270:	785a      	ldrb	r2, [r3, #1]
    6272:	f012 0f01 	tst.w	r2, #1
    6276:	d003      	beq.n	6280 <z_device_is_ready+0x14>
    6278:	781b      	ldrb	r3, [r3, #0]
    627a:	b11b      	cbz	r3, 6284 <z_device_is_ready+0x18>
    627c:	2000      	movs	r0, #0
    627e:	4770      	bx	lr
    6280:	2000      	movs	r0, #0
    6282:	4770      	bx	lr
    6284:	2001      	movs	r0, #1
    6286:	4770      	bx	lr
		return false;
    6288:	2000      	movs	r0, #0
}
    628a:	4770      	bx	lr

0000628c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    628e:	4605      	mov	r5, r0
    6290:	460e      	mov	r6, r1
	__asm__ volatile(
    6292:	f04f 0320 	mov.w	r3, #32
    6296:	f3ef 8711 	mrs	r7, BASEPRI
    629a:	f383 8812 	msr	BASEPRI_MAX, r3
    629e:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    62a2:	f7fe f85d 	bl	4360 <z_impl_z_current_get>
    62a6:	4604      	mov	r4, r0

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    62a8:	4631      	mov	r1, r6
    62aa:	4628      	mov	r0, r5
    62ac:	f7ff fe1b 	bl	5ee6 <k_sys_fatal_error_handler>
	__asm__ volatile(
    62b0:	f387 8811 	msr	BASEPRI, r7
    62b4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    62b8:	4620      	mov	r0, r4
    62ba:	f7fb fa5d 	bl	1778 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    62be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000062c0 <z_early_memset>:
{
    62c0:	b508      	push	{r3, lr}
	(void) memset(dst, c, n);
    62c2:	f7ff f96d 	bl	55a0 <memset>
}
    62c6:	bd08      	pop	{r3, pc}

000062c8 <z_early_memcpy>:
{
    62c8:	b508      	push	{r3, lr}
	(void) memcpy(dst, src, n);
    62ca:	f7ff f93a 	bl	5542 <memcpy>
}
    62ce:	bd08      	pop	{r3, pc}

000062d0 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    62d0:	68c2      	ldr	r2, [r0, #12]
    62d2:	6903      	ldr	r3, [r0, #16]
    62d4:	431a      	orrs	r2, r3
    62d6:	f012 0203 	ands.w	r2, r2, #3
    62da:	d10d      	bne.n	62f8 <create_free_list+0x28>
	slab->free_list = NULL;
    62dc:	2100      	movs	r1, #0
    62de:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    62e0:	e005      	b.n	62ee <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    62e2:	6941      	ldr	r1, [r0, #20]
    62e4:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    62e6:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    62e8:	68c1      	ldr	r1, [r0, #12]
    62ea:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    62ec:	3201      	adds	r2, #1
    62ee:	6881      	ldr	r1, [r0, #8]
    62f0:	4291      	cmp	r1, r2
    62f2:	d8f6      	bhi.n	62e2 <create_free_list+0x12>
	return 0;
    62f4:	2000      	movs	r0, #0
    62f6:	4770      	bx	lr
		return -EINVAL;
    62f8:	f06f 0015 	mvn.w	r0, #21
}
    62fc:	4770      	bx	lr

000062fe <k_mem_slab_init>:
{
    62fe:	b510      	push	{r4, lr}
    6300:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    6302:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    6304:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    6306:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    6308:	2300      	movs	r3, #0
    630a:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    630c:	f7ff ffe0 	bl	62d0 <create_free_list>
	if (rc < 0) {
    6310:	2800      	cmp	r0, #0
    6312:	db01      	blt.n	6318 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    6314:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    6316:	6064      	str	r4, [r4, #4]
}
    6318:	bd10      	pop	{r4, pc}

0000631a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    631a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    631e:	4604      	mov	r4, r0
    6320:	460d      	mov	r5, r1
	__asm__ volatile(
    6322:	f04f 0320 	mov.w	r3, #32
    6326:	f3ef 8611 	mrs	r6, BASEPRI
    632a:	f383 8812 	msr	BASEPRI_MAX, r3
    632e:	f3bf 8f6f 	isb	sy
    6332:	4637      	mov	r7, r6
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6334:	6943      	ldr	r3, [r0, #20]
    6336:	b16b      	cbz	r3, 6354 <k_mem_slab_free+0x3a>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    6338:	682b      	ldr	r3, [r5, #0]
    633a:	6962      	ldr	r2, [r4, #20]
    633c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    633e:	682b      	ldr	r3, [r5, #0]
    6340:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    6342:	69a3      	ldr	r3, [r4, #24]
    6344:	3b01      	subs	r3, #1
    6346:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    6348:	f387 8811 	msr	BASEPRI, r7
    634c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    6350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6354:	f100 0808 	add.w	r8, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    6358:	f000 f935 	bl	65c6 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    635c:	2800      	cmp	r0, #0
    635e:	d0eb      	beq.n	6338 <k_mem_slab_free+0x1e>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    6360:	682a      	ldr	r2, [r5, #0]
    6362:	2100      	movs	r1, #0
    6364:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    6368:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    636a:	f000 f895 	bl	6498 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    636e:	4631      	mov	r1, r6
    6370:	4640      	mov	r0, r8
    6372:	f7fd fcc3 	bl	3cfc <z_reschedule>
			return;
    6376:	e7eb      	b.n	6350 <k_mem_slab_free+0x36>

00006378 <setup_thread_stack>:
{
    6378:	b410      	push	{r4}
    637a:	4603      	mov	r3, r0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    637c:	3207      	adds	r2, #7
    637e:	f022 0207 	bic.w	r2, r2, #7
    6382:	f102 0040 	add.w	r0, r2, #64	; 0x40

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6386:	f101 0440 	add.w	r4, r1, #64	; 0x40
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    638a:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    638e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    6392:	2200      	movs	r2, #0
    6394:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
    6398:	4408      	add	r0, r1
    639a:	bc10      	pop	{r4}
    639c:	4770      	bx	lr

0000639e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    639e:	f3ef 8005 	mrs	r0, IPSR
}
    63a2:	3800      	subs	r0, #0
    63a4:	bf18      	it	ne
    63a6:	2001      	movne	r0, #1
    63a8:	4770      	bx	lr

000063aa <z_impl_k_thread_start>:
{
    63aa:	b508      	push	{r3, lr}
	z_sched_start(thread);
    63ac:	f7fd fdd0 	bl	3f50 <z_sched_start>
}
    63b0:	bd08      	pop	{r3, pc}

000063b2 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    63b2:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    63b4:	2400      	movs	r4, #0
    63b6:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    63b8:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    63ba:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    63bc:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    63be:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    63c0:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    63c2:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    63c4:	bc10      	pop	{r4}
    63c6:	4770      	bx	lr

000063c8 <z_pm_save_idle_exit>:
{
    63c8:	b508      	push	{r3, lr}
	pm_system_resume();
    63ca:	f7fa fcb1 	bl	d30 <pm_system_resume>
	sys_clock_idle_exit();
    63ce:	f7ff fcfa 	bl	5dc6 <sys_clock_idle_exit>
}
    63d2:	bd08      	pop	{r3, pc}

000063d4 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    63d4:	4288      	cmp	r0, r1
    63d6:	da00      	bge.n	63da <new_prio_for_inheritance+0x6>
    63d8:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    63da:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    63de:	db01      	blt.n	63e4 <new_prio_for_inheritance+0x10>
    63e0:	4608      	mov	r0, r1
    63e2:	4770      	bx	lr
    63e4:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    63e8:	4770      	bx	lr

000063ea <adjust_owner_prio>:
{
    63ea:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    63ec:	6880      	ldr	r0, [r0, #8]
    63ee:	f990 300e 	ldrsb.w	r3, [r0, #14]
    63f2:	428b      	cmp	r3, r1
    63f4:	d101      	bne.n	63fa <adjust_owner_prio+0x10>
	return false;
    63f6:	2000      	movs	r0, #0
}
    63f8:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    63fa:	f7fd fdff 	bl	3ffc <z_set_prio>
    63fe:	e7fb      	b.n	63f8 <adjust_owner_prio+0xe>

00006400 <z_impl_k_mutex_init>:
{
    6400:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6402:	2000      	movs	r0, #0
    6404:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    6406:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    6408:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    640a:	605b      	str	r3, [r3, #4]
}
    640c:	4770      	bx	lr

0000640e <thread_active_elsewhere>:
}
    640e:	2000      	movs	r0, #0
    6410:	4770      	bx	lr

00006412 <pended_on_thread>:
}
    6412:	6880      	ldr	r0, [r0, #8]
    6414:	4770      	bx	lr

00006416 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    6416:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    641a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    641e:	4283      	cmp	r3, r0
    6420:	d001      	beq.n	6426 <z_sched_prio_cmp+0x10>
		return b2 - b1;
    6422:	1ac0      	subs	r0, r0, r3
    6424:	4770      	bx	lr
	return 0;
    6426:	2000      	movs	r0, #0
}
    6428:	4770      	bx	lr

0000642a <z_reschedule_irqlock>:
{
    642a:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    642c:	4603      	mov	r3, r0
    642e:	b928      	cbnz	r0, 643c <z_reschedule_irqlock+0x12>
    6430:	f3ef 8205 	mrs	r2, IPSR
    6434:	b912      	cbnz	r2, 643c <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    6436:	f7fa fef3 	bl	1220 <arch_swap>
	return ret;
    643a:	e003      	b.n	6444 <z_reschedule_irqlock+0x1a>
    643c:	f383 8811 	msr	BASEPRI, r3
    6440:	f3bf 8f6f 	isb	sy
}
    6444:	bd08      	pop	{r3, pc}

00006446 <z_reschedule_unlocked>:
{
    6446:	b508      	push	{r3, lr}
	__asm__ volatile(
    6448:	f04f 0320 	mov.w	r3, #32
    644c:	f3ef 8011 	mrs	r0, BASEPRI
    6450:	f383 8812 	msr	BASEPRI_MAX, r3
    6454:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6458:	f7ff ffe7 	bl	642a <z_reschedule_irqlock>
}
    645c:	bd08      	pop	{r3, pc}

0000645e <z_priq_dumb_remove>:
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    645e:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    6460:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    6462:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6464:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6466:	2300      	movs	r3, #0
    6468:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    646a:	604b      	str	r3, [r1, #4]
}
    646c:	4770      	bx	lr

0000646e <unpend_thread_no_timeout>:
{
    646e:	b510      	push	{r4, lr}
    6470:	4604      	mov	r4, r0
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    6472:	f7ff ffce 	bl	6412 <pended_on_thread>
    6476:	4621      	mov	r1, r4
    6478:	f7ff fff1 	bl	645e <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    647c:	7b63      	ldrb	r3, [r4, #13]
    647e:	f023 0302 	bic.w	r3, r3, #2
    6482:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    6484:	2300      	movs	r3, #0
    6486:	60a3      	str	r3, [r4, #8]
}
    6488:	bd10      	pop	{r4, pc}

0000648a <z_priq_dumb_best>:
{
    648a:	4603      	mov	r3, r0
	return list->head == list;
    648c:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    648e:	4283      	cmp	r3, r0
    6490:	d000      	beq.n	6494 <z_priq_dumb_best+0xa>
}
    6492:	4770      	bx	lr
	struct k_thread *thread = NULL;
    6494:	2000      	movs	r0, #0
	return thread;
    6496:	e7fc      	b.n	6492 <z_priq_dumb_best+0x8>

00006498 <z_ready_thread>:
{
    6498:	b538      	push	{r3, r4, r5, lr}
    649a:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    649c:	2300      	movs	r3, #0
    649e:	f04f 0220 	mov.w	r2, #32
    64a2:	f3ef 8511 	mrs	r5, BASEPRI
    64a6:	f382 8812 	msr	BASEPRI_MAX, r2
    64aa:	f3bf 8f6f 	isb	sy
    64ae:	e004      	b.n	64ba <z_ready_thread+0x22>
	__asm__ volatile(
    64b0:	f385 8811 	msr	BASEPRI, r5
    64b4:	f3bf 8f6f 	isb	sy
    64b8:	2301      	movs	r3, #1
    64ba:	b943      	cbnz	r3, 64ce <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    64bc:	4620      	mov	r0, r4
    64be:	f7ff ffa6 	bl	640e <thread_active_elsewhere>
    64c2:	2800      	cmp	r0, #0
    64c4:	d1f4      	bne.n	64b0 <z_ready_thread+0x18>
			ready_thread(thread);
    64c6:	4620      	mov	r0, r4
    64c8:	f7fd fd06 	bl	3ed8 <ready_thread>
    64cc:	e7f0      	b.n	64b0 <z_ready_thread+0x18>
}
    64ce:	bd38      	pop	{r3, r4, r5, pc}

000064d0 <z_thread_timeout>:
{
    64d0:	b570      	push	{r4, r5, r6, lr}
    64d2:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    64d4:	f1a0 0618 	sub.w	r6, r0, #24
	LOCKED(&sched_spinlock) {
    64d8:	2300      	movs	r3, #0
	__asm__ volatile(
    64da:	f04f 0220 	mov.w	r2, #32
    64de:	f3ef 8511 	mrs	r5, BASEPRI
    64e2:	f382 8812 	msr	BASEPRI_MAX, r2
    64e6:	f3bf 8f6f 	isb	sy
    64ea:	e011      	b.n	6510 <z_thread_timeout+0x40>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    64ec:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    64f0:	f023 0204 	bic.w	r2, r3, #4
    64f4:	f804 2c0b 	strb.w	r2, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    64f8:	f023 0314 	bic.w	r3, r3, #20
    64fc:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6500:	4630      	mov	r0, r6
    6502:	f7fd fce9 	bl	3ed8 <ready_thread>
	__asm__ volatile(
    6506:	f385 8811 	msr	BASEPRI, r5
    650a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    650e:	2301      	movs	r3, #1
    6510:	b963      	cbnz	r3, 652c <z_thread_timeout+0x5c>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    6512:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    6516:	f013 0f28 	tst.w	r3, #40	; 0x28
    651a:	d1f4      	bne.n	6506 <z_thread_timeout+0x36>
			if (thread->base.pended_on != NULL) {
    651c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6520:	2b00      	cmp	r3, #0
    6522:	d0e3      	beq.n	64ec <z_thread_timeout+0x1c>
				unpend_thread_no_timeout(thread);
    6524:	4630      	mov	r0, r6
    6526:	f7ff ffa2 	bl	646e <unpend_thread_no_timeout>
    652a:	e7df      	b.n	64ec <z_thread_timeout+0x1c>
}
    652c:	bd70      	pop	{r4, r5, r6, pc}

0000652e <unpend_all>:
{
    652e:	b538      	push	{r3, r4, r5, lr}
    6530:	4605      	mov	r5, r0
	return list->head == list;
    6532:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6534:	42a5      	cmp	r5, r4
    6536:	d00e      	beq.n	6556 <unpend_all+0x28>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6538:	b16c      	cbz	r4, 6556 <unpend_all+0x28>
		unpend_thread_no_timeout(thread);
    653a:	4620      	mov	r0, r4
    653c:	f7ff ff97 	bl	646e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6540:	f104 0018 	add.w	r0, r4, #24
    6544:	f000 f87c 	bl	6640 <z_abort_timeout>
    6548:	2300      	movs	r3, #0
    654a:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
		ready_thread(thread);
    654e:	4620      	mov	r0, r4
    6550:	f7fd fcc2 	bl	3ed8 <ready_thread>
    6554:	e7ed      	b.n	6532 <unpend_all+0x4>
}
    6556:	bd38      	pop	{r3, r4, r5, pc}

00006558 <add_to_waitq_locked>:
{
    6558:	b570      	push	{r4, r5, r6, lr}
    655a:	4605      	mov	r5, r0
    655c:	460e      	mov	r6, r1
	unready_thread(thread);
    655e:	f7fd fd15 	bl	3f8c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6562:	7b6b      	ldrb	r3, [r5, #13]
    6564:	f043 0302 	orr.w	r3, r3, #2
    6568:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    656a:	b1fe      	cbz	r6, 65ac <add_to_waitq_locked+0x54>
		thread->base.pended_on = wait_q;
    656c:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    656e:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6570:	42a6      	cmp	r6, r4
    6572:	d108      	bne.n	6586 <add_to_waitq_locked+0x2e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6574:	2400      	movs	r4, #0
    6576:	e006      	b.n	6586 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const prev = successor->prev;
    6578:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    657a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    657c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    657e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    6580:	6065      	str	r5, [r4, #4]
}
    6582:	e013      	b.n	65ac <add_to_waitq_locked+0x54>
    6584:	2400      	movs	r4, #0
    6586:	b164      	cbz	r4, 65a2 <add_to_waitq_locked+0x4a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    6588:	4621      	mov	r1, r4
    658a:	4628      	mov	r0, r5
    658c:	f7ff ff43 	bl	6416 <z_sched_prio_cmp>
    6590:	2800      	cmp	r0, #0
    6592:	dcf1      	bgt.n	6578 <add_to_waitq_locked+0x20>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6594:	2c00      	cmp	r4, #0
    6596:	d0f6      	beq.n	6586 <add_to_waitq_locked+0x2e>
	return (node == list->tail) ? NULL : node->next;
    6598:	6873      	ldr	r3, [r6, #4]
    659a:	429c      	cmp	r4, r3
    659c:	d0f2      	beq.n	6584 <add_to_waitq_locked+0x2c>
    659e:	6824      	ldr	r4, [r4, #0]
    65a0:	e7f1      	b.n	6586 <add_to_waitq_locked+0x2e>
	sys_dnode_t *const tail = list->tail;
    65a2:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    65a4:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    65a6:	606b      	str	r3, [r5, #4]
	tail->next = node;
    65a8:	601d      	str	r5, [r3, #0]
	list->tail = node;
    65aa:	6075      	str	r5, [r6, #4]
}
    65ac:	bd70      	pop	{r4, r5, r6, pc}

000065ae <pend_locked>:
{
    65ae:	b570      	push	{r4, r5, r6, lr}
    65b0:	4604      	mov	r4, r0
    65b2:	4616      	mov	r6, r2
    65b4:	461d      	mov	r5, r3
	add_to_waitq_locked(thread, wait_q);
    65b6:	f7ff ffcf 	bl	6558 <add_to_waitq_locked>
	add_thread_timeout(thread, timeout);
    65ba:	4632      	mov	r2, r6
    65bc:	462b      	mov	r3, r5
    65be:	4620      	mov	r0, r4
    65c0:	f7fd fb3e 	bl	3c40 <add_thread_timeout>
}
    65c4:	bd70      	pop	{r4, r5, r6, pc}

000065c6 <z_unpend_first_thread>:
{
    65c6:	b570      	push	{r4, r5, r6, lr}
    65c8:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    65ca:	2300      	movs	r3, #0
	__asm__ volatile(
    65cc:	f04f 0220 	mov.w	r2, #32
    65d0:	f3ef 8511 	mrs	r5, BASEPRI
    65d4:	f382 8812 	msr	BASEPRI_MAX, r2
    65d8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    65dc:	461c      	mov	r4, r3
    65de:	e004      	b.n	65ea <z_unpend_first_thread+0x24>
	__asm__ volatile(
    65e0:	f385 8811 	msr	BASEPRI, r5
    65e4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    65e8:	2301      	movs	r3, #1
    65ea:	b963      	cbnz	r3, 6606 <z_unpend_first_thread+0x40>
		thread = _priq_wait_best(&wait_q->waitq);
    65ec:	4630      	mov	r0, r6
    65ee:	f7ff ff4c 	bl	648a <z_priq_dumb_best>
		if (thread != NULL) {
    65f2:	4604      	mov	r4, r0
    65f4:	2800      	cmp	r0, #0
    65f6:	d0f3      	beq.n	65e0 <z_unpend_first_thread+0x1a>
			unpend_thread_no_timeout(thread);
    65f8:	f7ff ff39 	bl	646e <unpend_thread_no_timeout>
    65fc:	f104 0018 	add.w	r0, r4, #24
    6600:	f000 f81e 	bl	6640 <z_abort_timeout>
    6604:	e7ec      	b.n	65e0 <z_unpend_first_thread+0x1a>
}
    6606:	4620      	mov	r0, r4
    6608:	bd70      	pop	{r4, r5, r6, pc}

0000660a <init_ready_q>:
	sys_dlist_init(&rq->runq);
    660a:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    660c:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    660e:	6083      	str	r3, [r0, #8]
}
    6610:	4770      	bx	lr

00006612 <remove_timeout>:
{
    6612:	b510      	push	{r4, lr}
    6614:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    6616:	f7fd ff05 	bl	4424 <next>
    661a:	b148      	cbz	r0, 6630 <remove_timeout+0x1e>
    661c:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    661e:	6903      	ldr	r3, [r0, #16]
    6620:	6941      	ldr	r1, [r0, #20]
    6622:	6920      	ldr	r0, [r4, #16]
    6624:	181b      	adds	r3, r3, r0
    6626:	6960      	ldr	r0, [r4, #20]
    6628:	eb41 0100 	adc.w	r1, r1, r0
    662c:	6113      	str	r3, [r2, #16]
    662e:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    6630:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    6632:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    6634:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6636:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6638:	2300      	movs	r3, #0
    663a:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    663c:	6063      	str	r3, [r4, #4]
}
    663e:	bd10      	pop	{r4, pc}

00006640 <z_abort_timeout>:
{
    6640:	b570      	push	{r4, r5, r6, lr}
    6642:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    6644:	2300      	movs	r3, #0
	__asm__ volatile(
    6646:	f04f 0220 	mov.w	r2, #32
    664a:	f3ef 8611 	mrs	r6, BASEPRI
    664e:	f382 8812 	msr	BASEPRI_MAX, r2
    6652:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    6656:	f06f 0015 	mvn.w	r0, #21
    665a:	e004      	b.n	6666 <z_abort_timeout+0x26>
	__asm__ volatile(
    665c:	f386 8811 	msr	BASEPRI, r6
    6660:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    6664:	2301      	movs	r3, #1
    6666:	461d      	mov	r5, r3
    6668:	b93b      	cbnz	r3, 667a <z_abort_timeout+0x3a>
	return node->next != NULL;
    666a:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    666c:	2b00      	cmp	r3, #0
    666e:	d0f5      	beq.n	665c <z_abort_timeout+0x1c>
			remove_timeout(to);
    6670:	4620      	mov	r0, r4
    6672:	f7ff ffce 	bl	6612 <remove_timeout>
			ret = 0;
    6676:	4628      	mov	r0, r5
    6678:	e7f0      	b.n	665c <z_abort_timeout+0x1c>
}
    667a:	bd70      	pop	{r4, r5, r6, pc}

0000667c <z_get_next_timeout_expiry>:
{
    667c:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    667e:	2300      	movs	r3, #0
	__asm__ volatile(
    6680:	f04f 0220 	mov.w	r2, #32
    6684:	f3ef 8411 	mrs	r4, BASEPRI
    6688:	f382 8812 	msr	BASEPRI_MAX, r2
    668c:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    6690:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6694:	e006      	b.n	66a4 <z_get_next_timeout_expiry+0x28>
		ret = next_timeout();
    6696:	f7fd fedd 	bl	4454 <next_timeout>
	__asm__ volatile(
    669a:	f384 8811 	msr	BASEPRI, r4
    669e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    66a2:	2301      	movs	r3, #1
    66a4:	2b00      	cmp	r3, #0
    66a6:	d0f6      	beq.n	6696 <z_get_next_timeout_expiry+0x1a>
}
    66a8:	bd10      	pop	{r4, pc}

000066aa <z_set_timeout_expiry>:
{
    66aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66ac:	4606      	mov	r6, r0
    66ae:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    66b0:	2300      	movs	r3, #0
	__asm__ volatile(
    66b2:	f04f 0220 	mov.w	r2, #32
    66b6:	f3ef 8511 	mrs	r5, BASEPRI
    66ba:	f382 8812 	msr	BASEPRI_MAX, r2
    66be:	f3bf 8f6f 	isb	sy
    66c2:	e00a      	b.n	66da <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    66c4:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    66c6:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    66ca:	2801      	cmp	r0, #1
    66cc:	dd00      	ble.n	66d0 <z_set_timeout_expiry+0x26>
    66ce:	b97c      	cbnz	r4, 66f0 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    66d0:	f385 8811 	msr	BASEPRI, r5
    66d4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    66d8:	2301      	movs	r3, #1
    66da:	461c      	mov	r4, r3
    66dc:	b97b      	cbnz	r3, 66fe <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    66de:	f7fd feb9 	bl	4454 <next_timeout>
			      || (ticks <= next_to);
    66e2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    66e6:	d0ed      	beq.n	66c4 <z_set_timeout_expiry+0x1a>
    66e8:	42b0      	cmp	r0, r6
    66ea:	dbec      	blt.n	66c6 <z_set_timeout_expiry+0x1c>
    66ec:	2401      	movs	r4, #1
    66ee:	e7ea      	b.n	66c6 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    66f0:	4639      	mov	r1, r7
    66f2:	42b0      	cmp	r0, r6
    66f4:	bfa8      	it	ge
    66f6:	4630      	movge	r0, r6
    66f8:	f7fb ff00 	bl	24fc <sys_clock_set_timeout>
    66fc:	e7e8      	b.n	66d0 <z_set_timeout_expiry+0x26>
}
    66fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006700 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    6700:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    6702:	f7fd ffb9 	bl	4678 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    6706:	bd08      	pop	{r3, pc}

00006708 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    6708:	b900      	cbnz	r0, 670c <z_impl_k_busy_wait+0x4>
    670a:	4770      	bx	lr
{
    670c:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    670e:	f7fb f91b 	bl	1948 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    6712:	bd08      	pop	{r3, pc}

00006714 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    6714:	4770      	bx	lr
	...
